#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"
#include "ppport.h"

#ifdef newXS
	#undef newXS
	#define newXS ;
#endif

MODULE = P5NCI  PACKAGE = P5NCI

void *
nci_pp( c_func, p0 )
	SV* c_func
	void * p0
PREINIT:
	void *(*func)(void *);
CODE:
	func   = INT2PTR(void *(*)(void *), SvIV(c_func) );
	RETVAL = (*func)(p0);
OUTPUT:
	RETVAL

void
nci_vp( c_func, p0 )
	SV* c_func
	void * p0
PREINIT:
	void(*func)(void *);
CODE:
	func   = INT2PTR(void(*)(void *), SvIV(c_func) );
	(*func)(p0);

double
nci_dp( c_func, p0 )
	SV* c_func
	void * p0
PREINIT:
	double(*func)(void *);
CODE:
	func   = INT2PTR(double(*)(void *), SvIV(c_func) );
	RETVAL = (*func)(p0);
OUTPUT:
	RETVAL

short
nci_sp( c_func, p0 )
	SV* c_func
	void * p0
PREINIT:
	short(*func)(void *);
CODE:
	func   = INT2PTR(short(*)(void *), SvIV(c_func) );
	RETVAL = (*func)(p0);
OUTPUT:
	RETVAL

float
nci_fp( c_func, p0 )
	SV* c_func
	void * p0
PREINIT:
	float(*func)(void *);
CODE:
	func   = INT2PTR(float(*)(void *), SvIV(c_func) );
	RETVAL = (*func)(p0);
OUTPUT:
	RETVAL

char *
nci_tp( c_func, p0 )
	SV* c_func
	void * p0
PREINIT:
	char *(*func)(void *);
CODE:
	func   = INT2PTR(char *(*)(void *), SvIV(c_func) );
	RETVAL = (*func)(p0);
OUTPUT:
	RETVAL

int
nci_ip( c_func, p0 )
	SV* c_func
	void * p0
PREINIT:
	int(*func)(void *);
CODE:
	func   = INT2PTR(int(*)(void *), SvIV(c_func) );
	RETVAL = (*func)(p0);
OUTPUT:
	RETVAL

void *
nci_pv( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vv( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dv( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_sv( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fv( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tv( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_iv( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pd( c_func, d0 )
	SV* c_func
	double d0
PREINIT:
	void *(*func)(double);
CODE:
	func   = INT2PTR(void *(*)(double), SvIV(c_func) );
	RETVAL = (*func)(d0);
OUTPUT:
	RETVAL

void
nci_vd( c_func, d0 )
	SV* c_func
	double d0
PREINIT:
	void(*func)(double);
CODE:
	func   = INT2PTR(void(*)(double), SvIV(c_func) );
	(*func)(d0);

double
nci_dd( c_func, d0 )
	SV* c_func
	double d0
PREINIT:
	double(*func)(double);
CODE:
	func   = INT2PTR(double(*)(double), SvIV(c_func) );
	RETVAL = (*func)(d0);
OUTPUT:
	RETVAL

short
nci_sd( c_func, d0 )
	SV* c_func
	double d0
PREINIT:
	short(*func)(double);
CODE:
	func   = INT2PTR(short(*)(double), SvIV(c_func) );
	RETVAL = (*func)(d0);
OUTPUT:
	RETVAL

float
nci_fd( c_func, d0 )
	SV* c_func
	double d0
PREINIT:
	float(*func)(double);
CODE:
	func   = INT2PTR(float(*)(double), SvIV(c_func) );
	RETVAL = (*func)(d0);
OUTPUT:
	RETVAL

char *
nci_td( c_func, d0 )
	SV* c_func
	double d0
PREINIT:
	char *(*func)(double);
CODE:
	func   = INT2PTR(char *(*)(double), SvIV(c_func) );
	RETVAL = (*func)(d0);
OUTPUT:
	RETVAL

int
nci_id( c_func, d0 )
	SV* c_func
	double d0
PREINIT:
	int(*func)(double);
CODE:
	func   = INT2PTR(int(*)(double), SvIV(c_func) );
	RETVAL = (*func)(d0);
OUTPUT:
	RETVAL

void *
nci_ps( c_func, s0 )
	SV* c_func
	short s0
PREINIT:
	void *(*func)(short);
CODE:
	func   = INT2PTR(void *(*)(short), SvIV(c_func) );
	RETVAL = (*func)(s0);
OUTPUT:
	RETVAL

void
nci_vs( c_func, s0 )
	SV* c_func
	short s0
PREINIT:
	void(*func)(short);
CODE:
	func   = INT2PTR(void(*)(short), SvIV(c_func) );
	(*func)(s0);

double
nci_ds( c_func, s0 )
	SV* c_func
	short s0
PREINIT:
	double(*func)(short);
CODE:
	func   = INT2PTR(double(*)(short), SvIV(c_func) );
	RETVAL = (*func)(s0);
OUTPUT:
	RETVAL

short
nci_ss( c_func, s0 )
	SV* c_func
	short s0
PREINIT:
	short(*func)(short);
CODE:
	func   = INT2PTR(short(*)(short), SvIV(c_func) );
	RETVAL = (*func)(s0);
OUTPUT:
	RETVAL

float
nci_fs( c_func, s0 )
	SV* c_func
	short s0
PREINIT:
	float(*func)(short);
CODE:
	func   = INT2PTR(float(*)(short), SvIV(c_func) );
	RETVAL = (*func)(s0);
OUTPUT:
	RETVAL

char *
nci_ts( c_func, s0 )
	SV* c_func
	short s0
PREINIT:
	char *(*func)(short);
CODE:
	func   = INT2PTR(char *(*)(short), SvIV(c_func) );
	RETVAL = (*func)(s0);
OUTPUT:
	RETVAL

int
nci_is( c_func, s0 )
	SV* c_func
	short s0
PREINIT:
	int(*func)(short);
CODE:
	func   = INT2PTR(int(*)(short), SvIV(c_func) );
	RETVAL = (*func)(s0);
OUTPUT:
	RETVAL

void *
nci_pf( c_func, f0 )
	SV* c_func
	float f0
PREINIT:
	void *(*func)(float);
CODE:
	func   = INT2PTR(void *(*)(float), SvIV(c_func) );
	RETVAL = (*func)(f0);
OUTPUT:
	RETVAL

void
nci_vf( c_func, f0 )
	SV* c_func
	float f0
PREINIT:
	void(*func)(float);
CODE:
	func   = INT2PTR(void(*)(float), SvIV(c_func) );
	(*func)(f0);

double
nci_df( c_func, f0 )
	SV* c_func
	float f0
PREINIT:
	double(*func)(float);
CODE:
	func   = INT2PTR(double(*)(float), SvIV(c_func) );
	RETVAL = (*func)(f0);
OUTPUT:
	RETVAL

short
nci_sf( c_func, f0 )
	SV* c_func
	float f0
PREINIT:
	short(*func)(float);
CODE:
	func   = INT2PTR(short(*)(float), SvIV(c_func) );
	RETVAL = (*func)(f0);
OUTPUT:
	RETVAL

float
nci_ff( c_func, f0 )
	SV* c_func
	float f0
PREINIT:
	float(*func)(float);
CODE:
	func   = INT2PTR(float(*)(float), SvIV(c_func) );
	RETVAL = (*func)(f0);
OUTPUT:
	RETVAL

char *
nci_tf( c_func, f0 )
	SV* c_func
	float f0
PREINIT:
	char *(*func)(float);
CODE:
	func   = INT2PTR(char *(*)(float), SvIV(c_func) );
	RETVAL = (*func)(f0);
OUTPUT:
	RETVAL

int
nci_if( c_func, f0 )
	SV* c_func
	float f0
PREINIT:
	int(*func)(float);
CODE:
	func   = INT2PTR(int(*)(float), SvIV(c_func) );
	RETVAL = (*func)(f0);
OUTPUT:
	RETVAL

void *
nci_pt( c_func, t0 )
	SV* c_func
	char * t0
PREINIT:
	void *(*func)(char *);
CODE:
	func   = INT2PTR(void *(*)(char *), SvIV(c_func) );
	RETVAL = (*func)(t0);
OUTPUT:
	RETVAL

void
nci_vt( c_func, t0 )
	SV* c_func
	char * t0
PREINIT:
	void(*func)(char *);
CODE:
	func   = INT2PTR(void(*)(char *), SvIV(c_func) );
	(*func)(t0);

double
nci_dt( c_func, t0 )
	SV* c_func
	char * t0
PREINIT:
	double(*func)(char *);
CODE:
	func   = INT2PTR(double(*)(char *), SvIV(c_func) );
	RETVAL = (*func)(t0);
OUTPUT:
	RETVAL

short
nci_st( c_func, t0 )
	SV* c_func
	char * t0
PREINIT:
	short(*func)(char *);
CODE:
	func   = INT2PTR(short(*)(char *), SvIV(c_func) );
	RETVAL = (*func)(t0);
OUTPUT:
	RETVAL

float
nci_ft( c_func, t0 )
	SV* c_func
	char * t0
PREINIT:
	float(*func)(char *);
CODE:
	func   = INT2PTR(float(*)(char *), SvIV(c_func) );
	RETVAL = (*func)(t0);
OUTPUT:
	RETVAL

char *
nci_tt( c_func, t0 )
	SV* c_func
	char * t0
PREINIT:
	char *(*func)(char *);
CODE:
	func   = INT2PTR(char *(*)(char *), SvIV(c_func) );
	RETVAL = (*func)(t0);
OUTPUT:
	RETVAL

int
nci_it( c_func, t0 )
	SV* c_func
	char * t0
PREINIT:
	int(*func)(char *);
CODE:
	func   = INT2PTR(int(*)(char *), SvIV(c_func) );
	RETVAL = (*func)(t0);
OUTPUT:
	RETVAL

void *
nci_pi( c_func, i0 )
	SV* c_func
	int i0
PREINIT:
	void *(*func)(int);
CODE:
	func   = INT2PTR(void *(*)(int), SvIV(c_func) );
	RETVAL = (*func)(i0);
OUTPUT:
	RETVAL

void
nci_vi( c_func, i0 )
	SV* c_func
	int i0
PREINIT:
	void(*func)(int);
CODE:
	func   = INT2PTR(void(*)(int), SvIV(c_func) );
	(*func)(i0);

double
nci_di( c_func, i0 )
	SV* c_func
	int i0
PREINIT:
	double(*func)(int);
CODE:
	func   = INT2PTR(double(*)(int), SvIV(c_func) );
	RETVAL = (*func)(i0);
OUTPUT:
	RETVAL

short
nci_si( c_func, i0 )
	SV* c_func
	int i0
PREINIT:
	short(*func)(int);
CODE:
	func   = INT2PTR(short(*)(int), SvIV(c_func) );
	RETVAL = (*func)(i0);
OUTPUT:
	RETVAL

float
nci_fi( c_func, i0 )
	SV* c_func
	int i0
PREINIT:
	float(*func)(int);
CODE:
	func   = INT2PTR(float(*)(int), SvIV(c_func) );
	RETVAL = (*func)(i0);
OUTPUT:
	RETVAL

char *
nci_ti( c_func, i0 )
	SV* c_func
	int i0
PREINIT:
	char *(*func)(int);
CODE:
	func   = INT2PTR(char *(*)(int), SvIV(c_func) );
	RETVAL = (*func)(i0);
OUTPUT:
	RETVAL

int
nci_ii( c_func, i0 )
	SV* c_func
	int i0
PREINIT:
	int(*func)(int);
CODE:
	func   = INT2PTR(int(*)(int), SvIV(c_func) );
	RETVAL = (*func)(i0);
OUTPUT:
	RETVAL

void *
nci_ppp( c_func, p0, p1 )
	SV* c_func
	void * p0
	void * p1
PREINIT:
	void *(*func)(void *, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1);
OUTPUT:
	RETVAL

void
nci_vpp( c_func, p0, p1 )
	SV* c_func
	void * p0
	void * p1
PREINIT:
	void(*func)(void *, void *);
CODE:
	func   = INT2PTR(void(*)(void *, void *), SvIV(c_func) );
	(*func)(p0, p1);

double
nci_dpp( c_func, p0, p1 )
	SV* c_func
	void * p0
	void * p1
PREINIT:
	double(*func)(void *, void *);
CODE:
	func   = INT2PTR(double(*)(void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1);
OUTPUT:
	RETVAL

short
nci_spp( c_func, p0, p1 )
	SV* c_func
	void * p0
	void * p1
PREINIT:
	short(*func)(void *, void *);
CODE:
	func   = INT2PTR(short(*)(void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1);
OUTPUT:
	RETVAL

float
nci_fpp( c_func, p0, p1 )
	SV* c_func
	void * p0
	void * p1
PREINIT:
	float(*func)(void *, void *);
CODE:
	func   = INT2PTR(float(*)(void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1);
OUTPUT:
	RETVAL

char *
nci_tpp( c_func, p0, p1 )
	SV* c_func
	void * p0
	void * p1
PREINIT:
	char *(*func)(void *, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1);
OUTPUT:
	RETVAL

int
nci_ipp( c_func, p0, p1 )
	SV* c_func
	void * p0
	void * p1
PREINIT:
	int(*func)(void *, void *);
CODE:
	func   = INT2PTR(int(*)(void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1);
OUTPUT:
	RETVAL

void *
nci_pvp( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvp( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvp( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svp( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvp( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvp( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivp( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdp( c_func, d0, p1 )
	SV* c_func
	double d0
	void * p1
PREINIT:
	void *(*func)(double, void *);
CODE:
	func   = INT2PTR(void *(*)(double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1);
OUTPUT:
	RETVAL

void
nci_vdp( c_func, d0, p1 )
	SV* c_func
	double d0
	void * p1
PREINIT:
	void(*func)(double, void *);
CODE:
	func   = INT2PTR(void(*)(double, void *), SvIV(c_func) );
	(*func)(d0, p1);

double
nci_ddp( c_func, d0, p1 )
	SV* c_func
	double d0
	void * p1
PREINIT:
	double(*func)(double, void *);
CODE:
	func   = INT2PTR(double(*)(double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1);
OUTPUT:
	RETVAL

short
nci_sdp( c_func, d0, p1 )
	SV* c_func
	double d0
	void * p1
PREINIT:
	short(*func)(double, void *);
CODE:
	func   = INT2PTR(short(*)(double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1);
OUTPUT:
	RETVAL

float
nci_fdp( c_func, d0, p1 )
	SV* c_func
	double d0
	void * p1
PREINIT:
	float(*func)(double, void *);
CODE:
	func   = INT2PTR(float(*)(double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1);
OUTPUT:
	RETVAL

char *
nci_tdp( c_func, d0, p1 )
	SV* c_func
	double d0
	void * p1
PREINIT:
	char *(*func)(double, void *);
CODE:
	func   = INT2PTR(char *(*)(double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1);
OUTPUT:
	RETVAL

int
nci_idp( c_func, d0, p1 )
	SV* c_func
	double d0
	void * p1
PREINIT:
	int(*func)(double, void *);
CODE:
	func   = INT2PTR(int(*)(double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1);
OUTPUT:
	RETVAL

void *
nci_psp( c_func, s0, p1 )
	SV* c_func
	short s0
	void * p1
PREINIT:
	void *(*func)(short, void *);
CODE:
	func   = INT2PTR(void *(*)(short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1);
OUTPUT:
	RETVAL

void
nci_vsp( c_func, s0, p1 )
	SV* c_func
	short s0
	void * p1
PREINIT:
	void(*func)(short, void *);
CODE:
	func   = INT2PTR(void(*)(short, void *), SvIV(c_func) );
	(*func)(s0, p1);

double
nci_dsp( c_func, s0, p1 )
	SV* c_func
	short s0
	void * p1
PREINIT:
	double(*func)(short, void *);
CODE:
	func   = INT2PTR(double(*)(short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1);
OUTPUT:
	RETVAL

short
nci_ssp( c_func, s0, p1 )
	SV* c_func
	short s0
	void * p1
PREINIT:
	short(*func)(short, void *);
CODE:
	func   = INT2PTR(short(*)(short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1);
OUTPUT:
	RETVAL

float
nci_fsp( c_func, s0, p1 )
	SV* c_func
	short s0
	void * p1
PREINIT:
	float(*func)(short, void *);
CODE:
	func   = INT2PTR(float(*)(short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1);
OUTPUT:
	RETVAL

char *
nci_tsp( c_func, s0, p1 )
	SV* c_func
	short s0
	void * p1
PREINIT:
	char *(*func)(short, void *);
CODE:
	func   = INT2PTR(char *(*)(short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1);
OUTPUT:
	RETVAL

int
nci_isp( c_func, s0, p1 )
	SV* c_func
	short s0
	void * p1
PREINIT:
	int(*func)(short, void *);
CODE:
	func   = INT2PTR(int(*)(short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1);
OUTPUT:
	RETVAL

void *
nci_pfp( c_func, f0, p1 )
	SV* c_func
	float f0
	void * p1
PREINIT:
	void *(*func)(float, void *);
CODE:
	func   = INT2PTR(void *(*)(float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1);
OUTPUT:
	RETVAL

void
nci_vfp( c_func, f0, p1 )
	SV* c_func
	float f0
	void * p1
PREINIT:
	void(*func)(float, void *);
CODE:
	func   = INT2PTR(void(*)(float, void *), SvIV(c_func) );
	(*func)(f0, p1);

double
nci_dfp( c_func, f0, p1 )
	SV* c_func
	float f0
	void * p1
PREINIT:
	double(*func)(float, void *);
CODE:
	func   = INT2PTR(double(*)(float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1);
OUTPUT:
	RETVAL

short
nci_sfp( c_func, f0, p1 )
	SV* c_func
	float f0
	void * p1
PREINIT:
	short(*func)(float, void *);
CODE:
	func   = INT2PTR(short(*)(float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1);
OUTPUT:
	RETVAL

float
nci_ffp( c_func, f0, p1 )
	SV* c_func
	float f0
	void * p1
PREINIT:
	float(*func)(float, void *);
CODE:
	func   = INT2PTR(float(*)(float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1);
OUTPUT:
	RETVAL

char *
nci_tfp( c_func, f0, p1 )
	SV* c_func
	float f0
	void * p1
PREINIT:
	char *(*func)(float, void *);
CODE:
	func   = INT2PTR(char *(*)(float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1);
OUTPUT:
	RETVAL

int
nci_ifp( c_func, f0, p1 )
	SV* c_func
	float f0
	void * p1
PREINIT:
	int(*func)(float, void *);
CODE:
	func   = INT2PTR(int(*)(float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1);
OUTPUT:
	RETVAL

void *
nci_ptp( c_func, t0, p1 )
	SV* c_func
	char * t0
	void * p1
PREINIT:
	void *(*func)(char *, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1);
OUTPUT:
	RETVAL

void
nci_vtp( c_func, t0, p1 )
	SV* c_func
	char * t0
	void * p1
PREINIT:
	void(*func)(char *, void *);
CODE:
	func   = INT2PTR(void(*)(char *, void *), SvIV(c_func) );
	(*func)(t0, p1);

double
nci_dtp( c_func, t0, p1 )
	SV* c_func
	char * t0
	void * p1
PREINIT:
	double(*func)(char *, void *);
CODE:
	func   = INT2PTR(double(*)(char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1);
OUTPUT:
	RETVAL

short
nci_stp( c_func, t0, p1 )
	SV* c_func
	char * t0
	void * p1
PREINIT:
	short(*func)(char *, void *);
CODE:
	func   = INT2PTR(short(*)(char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1);
OUTPUT:
	RETVAL

float
nci_ftp( c_func, t0, p1 )
	SV* c_func
	char * t0
	void * p1
PREINIT:
	float(*func)(char *, void *);
CODE:
	func   = INT2PTR(float(*)(char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1);
OUTPUT:
	RETVAL

char *
nci_ttp( c_func, t0, p1 )
	SV* c_func
	char * t0
	void * p1
PREINIT:
	char *(*func)(char *, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1);
OUTPUT:
	RETVAL

int
nci_itp( c_func, t0, p1 )
	SV* c_func
	char * t0
	void * p1
PREINIT:
	int(*func)(char *, void *);
CODE:
	func   = INT2PTR(int(*)(char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1);
OUTPUT:
	RETVAL

void *
nci_pip( c_func, i0, p1 )
	SV* c_func
	int i0
	void * p1
PREINIT:
	void *(*func)(int, void *);
CODE:
	func   = INT2PTR(void *(*)(int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1);
OUTPUT:
	RETVAL

void
nci_vip( c_func, i0, p1 )
	SV* c_func
	int i0
	void * p1
PREINIT:
	void(*func)(int, void *);
CODE:
	func   = INT2PTR(void(*)(int, void *), SvIV(c_func) );
	(*func)(i0, p1);

double
nci_dip( c_func, i0, p1 )
	SV* c_func
	int i0
	void * p1
PREINIT:
	double(*func)(int, void *);
CODE:
	func   = INT2PTR(double(*)(int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1);
OUTPUT:
	RETVAL

short
nci_sip( c_func, i0, p1 )
	SV* c_func
	int i0
	void * p1
PREINIT:
	short(*func)(int, void *);
CODE:
	func   = INT2PTR(short(*)(int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1);
OUTPUT:
	RETVAL

float
nci_fip( c_func, i0, p1 )
	SV* c_func
	int i0
	void * p1
PREINIT:
	float(*func)(int, void *);
CODE:
	func   = INT2PTR(float(*)(int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1);
OUTPUT:
	RETVAL

char *
nci_tip( c_func, i0, p1 )
	SV* c_func
	int i0
	void * p1
PREINIT:
	char *(*func)(int, void *);
CODE:
	func   = INT2PTR(char *(*)(int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1);
OUTPUT:
	RETVAL

int
nci_iip( c_func, i0, p1 )
	SV* c_func
	int i0
	void * p1
PREINIT:
	int(*func)(int, void *);
CODE:
	func   = INT2PTR(int(*)(int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1);
OUTPUT:
	RETVAL

void *
nci_ppd( c_func, p0, d1 )
	SV* c_func
	void * p0
	double d1
PREINIT:
	void *(*func)(void *, double);
CODE:
	func   = INT2PTR(void *(*)(void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1);
OUTPUT:
	RETVAL

void
nci_vpd( c_func, p0, d1 )
	SV* c_func
	void * p0
	double d1
PREINIT:
	void(*func)(void *, double);
CODE:
	func   = INT2PTR(void(*)(void *, double), SvIV(c_func) );
	(*func)(p0, d1);

double
nci_dpd( c_func, p0, d1 )
	SV* c_func
	void * p0
	double d1
PREINIT:
	double(*func)(void *, double);
CODE:
	func   = INT2PTR(double(*)(void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1);
OUTPUT:
	RETVAL

short
nci_spd( c_func, p0, d1 )
	SV* c_func
	void * p0
	double d1
PREINIT:
	short(*func)(void *, double);
CODE:
	func   = INT2PTR(short(*)(void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1);
OUTPUT:
	RETVAL

float
nci_fpd( c_func, p0, d1 )
	SV* c_func
	void * p0
	double d1
PREINIT:
	float(*func)(void *, double);
CODE:
	func   = INT2PTR(float(*)(void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1);
OUTPUT:
	RETVAL

char *
nci_tpd( c_func, p0, d1 )
	SV* c_func
	void * p0
	double d1
PREINIT:
	char *(*func)(void *, double);
CODE:
	func   = INT2PTR(char *(*)(void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1);
OUTPUT:
	RETVAL

int
nci_ipd( c_func, p0, d1 )
	SV* c_func
	void * p0
	double d1
PREINIT:
	int(*func)(void *, double);
CODE:
	func   = INT2PTR(int(*)(void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1);
OUTPUT:
	RETVAL

void *
nci_pvd( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvd( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvd( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svd( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvd( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvd( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivd( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdd( c_func, d0, d1 )
	SV* c_func
	double d0
	double d1
PREINIT:
	void *(*func)(double, double);
CODE:
	func   = INT2PTR(void *(*)(double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1);
OUTPUT:
	RETVAL

void
nci_vdd( c_func, d0, d1 )
	SV* c_func
	double d0
	double d1
PREINIT:
	void(*func)(double, double);
CODE:
	func   = INT2PTR(void(*)(double, double), SvIV(c_func) );
	(*func)(d0, d1);

double
nci_ddd( c_func, d0, d1 )
	SV* c_func
	double d0
	double d1
PREINIT:
	double(*func)(double, double);
CODE:
	func   = INT2PTR(double(*)(double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1);
OUTPUT:
	RETVAL

short
nci_sdd( c_func, d0, d1 )
	SV* c_func
	double d0
	double d1
PREINIT:
	short(*func)(double, double);
CODE:
	func   = INT2PTR(short(*)(double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1);
OUTPUT:
	RETVAL

float
nci_fdd( c_func, d0, d1 )
	SV* c_func
	double d0
	double d1
PREINIT:
	float(*func)(double, double);
CODE:
	func   = INT2PTR(float(*)(double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1);
OUTPUT:
	RETVAL

char *
nci_tdd( c_func, d0, d1 )
	SV* c_func
	double d0
	double d1
PREINIT:
	char *(*func)(double, double);
CODE:
	func   = INT2PTR(char *(*)(double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1);
OUTPUT:
	RETVAL

int
nci_idd( c_func, d0, d1 )
	SV* c_func
	double d0
	double d1
PREINIT:
	int(*func)(double, double);
CODE:
	func   = INT2PTR(int(*)(double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1);
OUTPUT:
	RETVAL

void *
nci_psd( c_func, s0, d1 )
	SV* c_func
	short s0
	double d1
PREINIT:
	void *(*func)(short, double);
CODE:
	func   = INT2PTR(void *(*)(short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1);
OUTPUT:
	RETVAL

void
nci_vsd( c_func, s0, d1 )
	SV* c_func
	short s0
	double d1
PREINIT:
	void(*func)(short, double);
CODE:
	func   = INT2PTR(void(*)(short, double), SvIV(c_func) );
	(*func)(s0, d1);

double
nci_dsd( c_func, s0, d1 )
	SV* c_func
	short s0
	double d1
PREINIT:
	double(*func)(short, double);
CODE:
	func   = INT2PTR(double(*)(short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1);
OUTPUT:
	RETVAL

short
nci_ssd( c_func, s0, d1 )
	SV* c_func
	short s0
	double d1
PREINIT:
	short(*func)(short, double);
CODE:
	func   = INT2PTR(short(*)(short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1);
OUTPUT:
	RETVAL

float
nci_fsd( c_func, s0, d1 )
	SV* c_func
	short s0
	double d1
PREINIT:
	float(*func)(short, double);
CODE:
	func   = INT2PTR(float(*)(short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1);
OUTPUT:
	RETVAL

char *
nci_tsd( c_func, s0, d1 )
	SV* c_func
	short s0
	double d1
PREINIT:
	char *(*func)(short, double);
CODE:
	func   = INT2PTR(char *(*)(short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1);
OUTPUT:
	RETVAL

int
nci_isd( c_func, s0, d1 )
	SV* c_func
	short s0
	double d1
PREINIT:
	int(*func)(short, double);
CODE:
	func   = INT2PTR(int(*)(short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1);
OUTPUT:
	RETVAL

void *
nci_pfd( c_func, f0, d1 )
	SV* c_func
	float f0
	double d1
PREINIT:
	void *(*func)(float, double);
CODE:
	func   = INT2PTR(void *(*)(float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1);
OUTPUT:
	RETVAL

void
nci_vfd( c_func, f0, d1 )
	SV* c_func
	float f0
	double d1
PREINIT:
	void(*func)(float, double);
CODE:
	func   = INT2PTR(void(*)(float, double), SvIV(c_func) );
	(*func)(f0, d1);

double
nci_dfd( c_func, f0, d1 )
	SV* c_func
	float f0
	double d1
PREINIT:
	double(*func)(float, double);
CODE:
	func   = INT2PTR(double(*)(float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1);
OUTPUT:
	RETVAL

short
nci_sfd( c_func, f0, d1 )
	SV* c_func
	float f0
	double d1
PREINIT:
	short(*func)(float, double);
CODE:
	func   = INT2PTR(short(*)(float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1);
OUTPUT:
	RETVAL

float
nci_ffd( c_func, f0, d1 )
	SV* c_func
	float f0
	double d1
PREINIT:
	float(*func)(float, double);
CODE:
	func   = INT2PTR(float(*)(float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1);
OUTPUT:
	RETVAL

char *
nci_tfd( c_func, f0, d1 )
	SV* c_func
	float f0
	double d1
PREINIT:
	char *(*func)(float, double);
CODE:
	func   = INT2PTR(char *(*)(float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1);
OUTPUT:
	RETVAL

int
nci_ifd( c_func, f0, d1 )
	SV* c_func
	float f0
	double d1
PREINIT:
	int(*func)(float, double);
CODE:
	func   = INT2PTR(int(*)(float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1);
OUTPUT:
	RETVAL

void *
nci_ptd( c_func, t0, d1 )
	SV* c_func
	char * t0
	double d1
PREINIT:
	void *(*func)(char *, double);
CODE:
	func   = INT2PTR(void *(*)(char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1);
OUTPUT:
	RETVAL

void
nci_vtd( c_func, t0, d1 )
	SV* c_func
	char * t0
	double d1
PREINIT:
	void(*func)(char *, double);
CODE:
	func   = INT2PTR(void(*)(char *, double), SvIV(c_func) );
	(*func)(t0, d1);

double
nci_dtd( c_func, t0, d1 )
	SV* c_func
	char * t0
	double d1
PREINIT:
	double(*func)(char *, double);
CODE:
	func   = INT2PTR(double(*)(char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1);
OUTPUT:
	RETVAL

short
nci_std( c_func, t0, d1 )
	SV* c_func
	char * t0
	double d1
PREINIT:
	short(*func)(char *, double);
CODE:
	func   = INT2PTR(short(*)(char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1);
OUTPUT:
	RETVAL

float
nci_ftd( c_func, t0, d1 )
	SV* c_func
	char * t0
	double d1
PREINIT:
	float(*func)(char *, double);
CODE:
	func   = INT2PTR(float(*)(char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1);
OUTPUT:
	RETVAL

char *
nci_ttd( c_func, t0, d1 )
	SV* c_func
	char * t0
	double d1
PREINIT:
	char *(*func)(char *, double);
CODE:
	func   = INT2PTR(char *(*)(char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1);
OUTPUT:
	RETVAL

int
nci_itd( c_func, t0, d1 )
	SV* c_func
	char * t0
	double d1
PREINIT:
	int(*func)(char *, double);
CODE:
	func   = INT2PTR(int(*)(char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1);
OUTPUT:
	RETVAL

void *
nci_pid( c_func, i0, d1 )
	SV* c_func
	int i0
	double d1
PREINIT:
	void *(*func)(int, double);
CODE:
	func   = INT2PTR(void *(*)(int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1);
OUTPUT:
	RETVAL

void
nci_vid( c_func, i0, d1 )
	SV* c_func
	int i0
	double d1
PREINIT:
	void(*func)(int, double);
CODE:
	func   = INT2PTR(void(*)(int, double), SvIV(c_func) );
	(*func)(i0, d1);

double
nci_did( c_func, i0, d1 )
	SV* c_func
	int i0
	double d1
PREINIT:
	double(*func)(int, double);
CODE:
	func   = INT2PTR(double(*)(int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1);
OUTPUT:
	RETVAL

short
nci_sid( c_func, i0, d1 )
	SV* c_func
	int i0
	double d1
PREINIT:
	short(*func)(int, double);
CODE:
	func   = INT2PTR(short(*)(int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1);
OUTPUT:
	RETVAL

float
nci_fid( c_func, i0, d1 )
	SV* c_func
	int i0
	double d1
PREINIT:
	float(*func)(int, double);
CODE:
	func   = INT2PTR(float(*)(int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1);
OUTPUT:
	RETVAL

char *
nci_tid( c_func, i0, d1 )
	SV* c_func
	int i0
	double d1
PREINIT:
	char *(*func)(int, double);
CODE:
	func   = INT2PTR(char *(*)(int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1);
OUTPUT:
	RETVAL

int
nci_iid( c_func, i0, d1 )
	SV* c_func
	int i0
	double d1
PREINIT:
	int(*func)(int, double);
CODE:
	func   = INT2PTR(int(*)(int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1);
OUTPUT:
	RETVAL

void *
nci_pps( c_func, p0, s1 )
	SV* c_func
	void * p0
	short s1
PREINIT:
	void *(*func)(void *, short);
CODE:
	func   = INT2PTR(void *(*)(void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1);
OUTPUT:
	RETVAL

void
nci_vps( c_func, p0, s1 )
	SV* c_func
	void * p0
	short s1
PREINIT:
	void(*func)(void *, short);
CODE:
	func   = INT2PTR(void(*)(void *, short), SvIV(c_func) );
	(*func)(p0, s1);

double
nci_dps( c_func, p0, s1 )
	SV* c_func
	void * p0
	short s1
PREINIT:
	double(*func)(void *, short);
CODE:
	func   = INT2PTR(double(*)(void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1);
OUTPUT:
	RETVAL

short
nci_sps( c_func, p0, s1 )
	SV* c_func
	void * p0
	short s1
PREINIT:
	short(*func)(void *, short);
CODE:
	func   = INT2PTR(short(*)(void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1);
OUTPUT:
	RETVAL

float
nci_fps( c_func, p0, s1 )
	SV* c_func
	void * p0
	short s1
PREINIT:
	float(*func)(void *, short);
CODE:
	func   = INT2PTR(float(*)(void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1);
OUTPUT:
	RETVAL

char *
nci_tps( c_func, p0, s1 )
	SV* c_func
	void * p0
	short s1
PREINIT:
	char *(*func)(void *, short);
CODE:
	func   = INT2PTR(char *(*)(void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1);
OUTPUT:
	RETVAL

int
nci_ips( c_func, p0, s1 )
	SV* c_func
	void * p0
	short s1
PREINIT:
	int(*func)(void *, short);
CODE:
	func   = INT2PTR(int(*)(void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1);
OUTPUT:
	RETVAL

void *
nci_pvs( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvs( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvs( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svs( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvs( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvs( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivs( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pds( c_func, d0, s1 )
	SV* c_func
	double d0
	short s1
PREINIT:
	void *(*func)(double, short);
CODE:
	func   = INT2PTR(void *(*)(double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1);
OUTPUT:
	RETVAL

void
nci_vds( c_func, d0, s1 )
	SV* c_func
	double d0
	short s1
PREINIT:
	void(*func)(double, short);
CODE:
	func   = INT2PTR(void(*)(double, short), SvIV(c_func) );
	(*func)(d0, s1);

double
nci_dds( c_func, d0, s1 )
	SV* c_func
	double d0
	short s1
PREINIT:
	double(*func)(double, short);
CODE:
	func   = INT2PTR(double(*)(double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1);
OUTPUT:
	RETVAL

short
nci_sds( c_func, d0, s1 )
	SV* c_func
	double d0
	short s1
PREINIT:
	short(*func)(double, short);
CODE:
	func   = INT2PTR(short(*)(double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1);
OUTPUT:
	RETVAL

float
nci_fds( c_func, d0, s1 )
	SV* c_func
	double d0
	short s1
PREINIT:
	float(*func)(double, short);
CODE:
	func   = INT2PTR(float(*)(double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1);
OUTPUT:
	RETVAL

char *
nci_tds( c_func, d0, s1 )
	SV* c_func
	double d0
	short s1
PREINIT:
	char *(*func)(double, short);
CODE:
	func   = INT2PTR(char *(*)(double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1);
OUTPUT:
	RETVAL

int
nci_ids( c_func, d0, s1 )
	SV* c_func
	double d0
	short s1
PREINIT:
	int(*func)(double, short);
CODE:
	func   = INT2PTR(int(*)(double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1);
OUTPUT:
	RETVAL

void *
nci_pss( c_func, s0, s1 )
	SV* c_func
	short s0
	short s1
PREINIT:
	void *(*func)(short, short);
CODE:
	func   = INT2PTR(void *(*)(short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1);
OUTPUT:
	RETVAL

void
nci_vss( c_func, s0, s1 )
	SV* c_func
	short s0
	short s1
PREINIT:
	void(*func)(short, short);
CODE:
	func   = INT2PTR(void(*)(short, short), SvIV(c_func) );
	(*func)(s0, s1);

double
nci_dss( c_func, s0, s1 )
	SV* c_func
	short s0
	short s1
PREINIT:
	double(*func)(short, short);
CODE:
	func   = INT2PTR(double(*)(short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1);
OUTPUT:
	RETVAL

short
nci_sss( c_func, s0, s1 )
	SV* c_func
	short s0
	short s1
PREINIT:
	short(*func)(short, short);
CODE:
	func   = INT2PTR(short(*)(short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1);
OUTPUT:
	RETVAL

float
nci_fss( c_func, s0, s1 )
	SV* c_func
	short s0
	short s1
PREINIT:
	float(*func)(short, short);
CODE:
	func   = INT2PTR(float(*)(short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1);
OUTPUT:
	RETVAL

char *
nci_tss( c_func, s0, s1 )
	SV* c_func
	short s0
	short s1
PREINIT:
	char *(*func)(short, short);
CODE:
	func   = INT2PTR(char *(*)(short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1);
OUTPUT:
	RETVAL

int
nci_iss( c_func, s0, s1 )
	SV* c_func
	short s0
	short s1
PREINIT:
	int(*func)(short, short);
CODE:
	func   = INT2PTR(int(*)(short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1);
OUTPUT:
	RETVAL

void *
nci_pfs( c_func, f0, s1 )
	SV* c_func
	float f0
	short s1
PREINIT:
	void *(*func)(float, short);
CODE:
	func   = INT2PTR(void *(*)(float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1);
OUTPUT:
	RETVAL

void
nci_vfs( c_func, f0, s1 )
	SV* c_func
	float f0
	short s1
PREINIT:
	void(*func)(float, short);
CODE:
	func   = INT2PTR(void(*)(float, short), SvIV(c_func) );
	(*func)(f0, s1);

double
nci_dfs( c_func, f0, s1 )
	SV* c_func
	float f0
	short s1
PREINIT:
	double(*func)(float, short);
CODE:
	func   = INT2PTR(double(*)(float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1);
OUTPUT:
	RETVAL

short
nci_sfs( c_func, f0, s1 )
	SV* c_func
	float f0
	short s1
PREINIT:
	short(*func)(float, short);
CODE:
	func   = INT2PTR(short(*)(float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1);
OUTPUT:
	RETVAL

float
nci_ffs( c_func, f0, s1 )
	SV* c_func
	float f0
	short s1
PREINIT:
	float(*func)(float, short);
CODE:
	func   = INT2PTR(float(*)(float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1);
OUTPUT:
	RETVAL

char *
nci_tfs( c_func, f0, s1 )
	SV* c_func
	float f0
	short s1
PREINIT:
	char *(*func)(float, short);
CODE:
	func   = INT2PTR(char *(*)(float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1);
OUTPUT:
	RETVAL

int
nci_ifs( c_func, f0, s1 )
	SV* c_func
	float f0
	short s1
PREINIT:
	int(*func)(float, short);
CODE:
	func   = INT2PTR(int(*)(float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1);
OUTPUT:
	RETVAL

void *
nci_pts( c_func, t0, s1 )
	SV* c_func
	char * t0
	short s1
PREINIT:
	void *(*func)(char *, short);
CODE:
	func   = INT2PTR(void *(*)(char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1);
OUTPUT:
	RETVAL

void
nci_vts( c_func, t0, s1 )
	SV* c_func
	char * t0
	short s1
PREINIT:
	void(*func)(char *, short);
CODE:
	func   = INT2PTR(void(*)(char *, short), SvIV(c_func) );
	(*func)(t0, s1);

double
nci_dts( c_func, t0, s1 )
	SV* c_func
	char * t0
	short s1
PREINIT:
	double(*func)(char *, short);
CODE:
	func   = INT2PTR(double(*)(char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1);
OUTPUT:
	RETVAL

short
nci_sts( c_func, t0, s1 )
	SV* c_func
	char * t0
	short s1
PREINIT:
	short(*func)(char *, short);
CODE:
	func   = INT2PTR(short(*)(char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1);
OUTPUT:
	RETVAL

float
nci_fts( c_func, t0, s1 )
	SV* c_func
	char * t0
	short s1
PREINIT:
	float(*func)(char *, short);
CODE:
	func   = INT2PTR(float(*)(char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1);
OUTPUT:
	RETVAL

char *
nci_tts( c_func, t0, s1 )
	SV* c_func
	char * t0
	short s1
PREINIT:
	char *(*func)(char *, short);
CODE:
	func   = INT2PTR(char *(*)(char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1);
OUTPUT:
	RETVAL

int
nci_its( c_func, t0, s1 )
	SV* c_func
	char * t0
	short s1
PREINIT:
	int(*func)(char *, short);
CODE:
	func   = INT2PTR(int(*)(char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1);
OUTPUT:
	RETVAL

void *
nci_pis( c_func, i0, s1 )
	SV* c_func
	int i0
	short s1
PREINIT:
	void *(*func)(int, short);
CODE:
	func   = INT2PTR(void *(*)(int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1);
OUTPUT:
	RETVAL

void
nci_vis( c_func, i0, s1 )
	SV* c_func
	int i0
	short s1
PREINIT:
	void(*func)(int, short);
CODE:
	func   = INT2PTR(void(*)(int, short), SvIV(c_func) );
	(*func)(i0, s1);

double
nci_dis( c_func, i0, s1 )
	SV* c_func
	int i0
	short s1
PREINIT:
	double(*func)(int, short);
CODE:
	func   = INT2PTR(double(*)(int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1);
OUTPUT:
	RETVAL

short
nci_sis( c_func, i0, s1 )
	SV* c_func
	int i0
	short s1
PREINIT:
	short(*func)(int, short);
CODE:
	func   = INT2PTR(short(*)(int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1);
OUTPUT:
	RETVAL

float
nci_fis( c_func, i0, s1 )
	SV* c_func
	int i0
	short s1
PREINIT:
	float(*func)(int, short);
CODE:
	func   = INT2PTR(float(*)(int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1);
OUTPUT:
	RETVAL

char *
nci_tis( c_func, i0, s1 )
	SV* c_func
	int i0
	short s1
PREINIT:
	char *(*func)(int, short);
CODE:
	func   = INT2PTR(char *(*)(int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1);
OUTPUT:
	RETVAL

int
nci_iis( c_func, i0, s1 )
	SV* c_func
	int i0
	short s1
PREINIT:
	int(*func)(int, short);
CODE:
	func   = INT2PTR(int(*)(int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1);
OUTPUT:
	RETVAL

void *
nci_ppf( c_func, p0, f1 )
	SV* c_func
	void * p0
	float f1
PREINIT:
	void *(*func)(void *, float);
CODE:
	func   = INT2PTR(void *(*)(void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1);
OUTPUT:
	RETVAL

void
nci_vpf( c_func, p0, f1 )
	SV* c_func
	void * p0
	float f1
PREINIT:
	void(*func)(void *, float);
CODE:
	func   = INT2PTR(void(*)(void *, float), SvIV(c_func) );
	(*func)(p0, f1);

double
nci_dpf( c_func, p0, f1 )
	SV* c_func
	void * p0
	float f1
PREINIT:
	double(*func)(void *, float);
CODE:
	func   = INT2PTR(double(*)(void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1);
OUTPUT:
	RETVAL

short
nci_spf( c_func, p0, f1 )
	SV* c_func
	void * p0
	float f1
PREINIT:
	short(*func)(void *, float);
CODE:
	func   = INT2PTR(short(*)(void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1);
OUTPUT:
	RETVAL

float
nci_fpf( c_func, p0, f1 )
	SV* c_func
	void * p0
	float f1
PREINIT:
	float(*func)(void *, float);
CODE:
	func   = INT2PTR(float(*)(void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1);
OUTPUT:
	RETVAL

char *
nci_tpf( c_func, p0, f1 )
	SV* c_func
	void * p0
	float f1
PREINIT:
	char *(*func)(void *, float);
CODE:
	func   = INT2PTR(char *(*)(void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1);
OUTPUT:
	RETVAL

int
nci_ipf( c_func, p0, f1 )
	SV* c_func
	void * p0
	float f1
PREINIT:
	int(*func)(void *, float);
CODE:
	func   = INT2PTR(int(*)(void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1);
OUTPUT:
	RETVAL

void *
nci_pvf( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvf( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvf( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svf( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvf( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvf( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivf( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdf( c_func, d0, f1 )
	SV* c_func
	double d0
	float f1
PREINIT:
	void *(*func)(double, float);
CODE:
	func   = INT2PTR(void *(*)(double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1);
OUTPUT:
	RETVAL

void
nci_vdf( c_func, d0, f1 )
	SV* c_func
	double d0
	float f1
PREINIT:
	void(*func)(double, float);
CODE:
	func   = INT2PTR(void(*)(double, float), SvIV(c_func) );
	(*func)(d0, f1);

double
nci_ddf( c_func, d0, f1 )
	SV* c_func
	double d0
	float f1
PREINIT:
	double(*func)(double, float);
CODE:
	func   = INT2PTR(double(*)(double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1);
OUTPUT:
	RETVAL

short
nci_sdf( c_func, d0, f1 )
	SV* c_func
	double d0
	float f1
PREINIT:
	short(*func)(double, float);
CODE:
	func   = INT2PTR(short(*)(double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1);
OUTPUT:
	RETVAL

float
nci_fdf( c_func, d0, f1 )
	SV* c_func
	double d0
	float f1
PREINIT:
	float(*func)(double, float);
CODE:
	func   = INT2PTR(float(*)(double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1);
OUTPUT:
	RETVAL

char *
nci_tdf( c_func, d0, f1 )
	SV* c_func
	double d0
	float f1
PREINIT:
	char *(*func)(double, float);
CODE:
	func   = INT2PTR(char *(*)(double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1);
OUTPUT:
	RETVAL

int
nci_idf( c_func, d0, f1 )
	SV* c_func
	double d0
	float f1
PREINIT:
	int(*func)(double, float);
CODE:
	func   = INT2PTR(int(*)(double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1);
OUTPUT:
	RETVAL

void *
nci_psf( c_func, s0, f1 )
	SV* c_func
	short s0
	float f1
PREINIT:
	void *(*func)(short, float);
CODE:
	func   = INT2PTR(void *(*)(short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1);
OUTPUT:
	RETVAL

void
nci_vsf( c_func, s0, f1 )
	SV* c_func
	short s0
	float f1
PREINIT:
	void(*func)(short, float);
CODE:
	func   = INT2PTR(void(*)(short, float), SvIV(c_func) );
	(*func)(s0, f1);

double
nci_dsf( c_func, s0, f1 )
	SV* c_func
	short s0
	float f1
PREINIT:
	double(*func)(short, float);
CODE:
	func   = INT2PTR(double(*)(short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1);
OUTPUT:
	RETVAL

short
nci_ssf( c_func, s0, f1 )
	SV* c_func
	short s0
	float f1
PREINIT:
	short(*func)(short, float);
CODE:
	func   = INT2PTR(short(*)(short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1);
OUTPUT:
	RETVAL

float
nci_fsf( c_func, s0, f1 )
	SV* c_func
	short s0
	float f1
PREINIT:
	float(*func)(short, float);
CODE:
	func   = INT2PTR(float(*)(short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1);
OUTPUT:
	RETVAL

char *
nci_tsf( c_func, s0, f1 )
	SV* c_func
	short s0
	float f1
PREINIT:
	char *(*func)(short, float);
CODE:
	func   = INT2PTR(char *(*)(short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1);
OUTPUT:
	RETVAL

int
nci_isf( c_func, s0, f1 )
	SV* c_func
	short s0
	float f1
PREINIT:
	int(*func)(short, float);
CODE:
	func   = INT2PTR(int(*)(short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1);
OUTPUT:
	RETVAL

void *
nci_pff( c_func, f0, f1 )
	SV* c_func
	float f0
	float f1
PREINIT:
	void *(*func)(float, float);
CODE:
	func   = INT2PTR(void *(*)(float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1);
OUTPUT:
	RETVAL

void
nci_vff( c_func, f0, f1 )
	SV* c_func
	float f0
	float f1
PREINIT:
	void(*func)(float, float);
CODE:
	func   = INT2PTR(void(*)(float, float), SvIV(c_func) );
	(*func)(f0, f1);

double
nci_dff( c_func, f0, f1 )
	SV* c_func
	float f0
	float f1
PREINIT:
	double(*func)(float, float);
CODE:
	func   = INT2PTR(double(*)(float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1);
OUTPUT:
	RETVAL

short
nci_sff( c_func, f0, f1 )
	SV* c_func
	float f0
	float f1
PREINIT:
	short(*func)(float, float);
CODE:
	func   = INT2PTR(short(*)(float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1);
OUTPUT:
	RETVAL

float
nci_fff( c_func, f0, f1 )
	SV* c_func
	float f0
	float f1
PREINIT:
	float(*func)(float, float);
CODE:
	func   = INT2PTR(float(*)(float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1);
OUTPUT:
	RETVAL

char *
nci_tff( c_func, f0, f1 )
	SV* c_func
	float f0
	float f1
PREINIT:
	char *(*func)(float, float);
CODE:
	func   = INT2PTR(char *(*)(float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1);
OUTPUT:
	RETVAL

int
nci_iff( c_func, f0, f1 )
	SV* c_func
	float f0
	float f1
PREINIT:
	int(*func)(float, float);
CODE:
	func   = INT2PTR(int(*)(float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1);
OUTPUT:
	RETVAL

void *
nci_ptf( c_func, t0, f1 )
	SV* c_func
	char * t0
	float f1
PREINIT:
	void *(*func)(char *, float);
CODE:
	func   = INT2PTR(void *(*)(char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1);
OUTPUT:
	RETVAL

void
nci_vtf( c_func, t0, f1 )
	SV* c_func
	char * t0
	float f1
PREINIT:
	void(*func)(char *, float);
CODE:
	func   = INT2PTR(void(*)(char *, float), SvIV(c_func) );
	(*func)(t0, f1);

double
nci_dtf( c_func, t0, f1 )
	SV* c_func
	char * t0
	float f1
PREINIT:
	double(*func)(char *, float);
CODE:
	func   = INT2PTR(double(*)(char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1);
OUTPUT:
	RETVAL

short
nci_stf( c_func, t0, f1 )
	SV* c_func
	char * t0
	float f1
PREINIT:
	short(*func)(char *, float);
CODE:
	func   = INT2PTR(short(*)(char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1);
OUTPUT:
	RETVAL

float
nci_ftf( c_func, t0, f1 )
	SV* c_func
	char * t0
	float f1
PREINIT:
	float(*func)(char *, float);
CODE:
	func   = INT2PTR(float(*)(char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1);
OUTPUT:
	RETVAL

char *
nci_ttf( c_func, t0, f1 )
	SV* c_func
	char * t0
	float f1
PREINIT:
	char *(*func)(char *, float);
CODE:
	func   = INT2PTR(char *(*)(char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1);
OUTPUT:
	RETVAL

int
nci_itf( c_func, t0, f1 )
	SV* c_func
	char * t0
	float f1
PREINIT:
	int(*func)(char *, float);
CODE:
	func   = INT2PTR(int(*)(char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1);
OUTPUT:
	RETVAL

void *
nci_pif( c_func, i0, f1 )
	SV* c_func
	int i0
	float f1
PREINIT:
	void *(*func)(int, float);
CODE:
	func   = INT2PTR(void *(*)(int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1);
OUTPUT:
	RETVAL

void
nci_vif( c_func, i0, f1 )
	SV* c_func
	int i0
	float f1
PREINIT:
	void(*func)(int, float);
CODE:
	func   = INT2PTR(void(*)(int, float), SvIV(c_func) );
	(*func)(i0, f1);

double
nci_dif( c_func, i0, f1 )
	SV* c_func
	int i0
	float f1
PREINIT:
	double(*func)(int, float);
CODE:
	func   = INT2PTR(double(*)(int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1);
OUTPUT:
	RETVAL

short
nci_sif( c_func, i0, f1 )
	SV* c_func
	int i0
	float f1
PREINIT:
	short(*func)(int, float);
CODE:
	func   = INT2PTR(short(*)(int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1);
OUTPUT:
	RETVAL

float
nci_fif( c_func, i0, f1 )
	SV* c_func
	int i0
	float f1
PREINIT:
	float(*func)(int, float);
CODE:
	func   = INT2PTR(float(*)(int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1);
OUTPUT:
	RETVAL

char *
nci_tif( c_func, i0, f1 )
	SV* c_func
	int i0
	float f1
PREINIT:
	char *(*func)(int, float);
CODE:
	func   = INT2PTR(char *(*)(int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1);
OUTPUT:
	RETVAL

int
nci_iif( c_func, i0, f1 )
	SV* c_func
	int i0
	float f1
PREINIT:
	int(*func)(int, float);
CODE:
	func   = INT2PTR(int(*)(int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1);
OUTPUT:
	RETVAL

void *
nci_ppt( c_func, p0, t1 )
	SV* c_func
	void * p0
	char * t1
PREINIT:
	void *(*func)(void *, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1);
OUTPUT:
	RETVAL

void
nci_vpt( c_func, p0, t1 )
	SV* c_func
	void * p0
	char * t1
PREINIT:
	void(*func)(void *, char *);
CODE:
	func   = INT2PTR(void(*)(void *, char *), SvIV(c_func) );
	(*func)(p0, t1);

double
nci_dpt( c_func, p0, t1 )
	SV* c_func
	void * p0
	char * t1
PREINIT:
	double(*func)(void *, char *);
CODE:
	func   = INT2PTR(double(*)(void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1);
OUTPUT:
	RETVAL

short
nci_spt( c_func, p0, t1 )
	SV* c_func
	void * p0
	char * t1
PREINIT:
	short(*func)(void *, char *);
CODE:
	func   = INT2PTR(short(*)(void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1);
OUTPUT:
	RETVAL

float
nci_fpt( c_func, p0, t1 )
	SV* c_func
	void * p0
	char * t1
PREINIT:
	float(*func)(void *, char *);
CODE:
	func   = INT2PTR(float(*)(void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1);
OUTPUT:
	RETVAL

char *
nci_tpt( c_func, p0, t1 )
	SV* c_func
	void * p0
	char * t1
PREINIT:
	char *(*func)(void *, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1);
OUTPUT:
	RETVAL

int
nci_ipt( c_func, p0, t1 )
	SV* c_func
	void * p0
	char * t1
PREINIT:
	int(*func)(void *, char *);
CODE:
	func   = INT2PTR(int(*)(void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1);
OUTPUT:
	RETVAL

void *
nci_pvt( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvt( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvt( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svt( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvt( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvt( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivt( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdt( c_func, d0, t1 )
	SV* c_func
	double d0
	char * t1
PREINIT:
	void *(*func)(double, char *);
CODE:
	func   = INT2PTR(void *(*)(double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1);
OUTPUT:
	RETVAL

void
nci_vdt( c_func, d0, t1 )
	SV* c_func
	double d0
	char * t1
PREINIT:
	void(*func)(double, char *);
CODE:
	func   = INT2PTR(void(*)(double, char *), SvIV(c_func) );
	(*func)(d0, t1);

double
nci_ddt( c_func, d0, t1 )
	SV* c_func
	double d0
	char * t1
PREINIT:
	double(*func)(double, char *);
CODE:
	func   = INT2PTR(double(*)(double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1);
OUTPUT:
	RETVAL

short
nci_sdt( c_func, d0, t1 )
	SV* c_func
	double d0
	char * t1
PREINIT:
	short(*func)(double, char *);
CODE:
	func   = INT2PTR(short(*)(double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1);
OUTPUT:
	RETVAL

float
nci_fdt( c_func, d0, t1 )
	SV* c_func
	double d0
	char * t1
PREINIT:
	float(*func)(double, char *);
CODE:
	func   = INT2PTR(float(*)(double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1);
OUTPUT:
	RETVAL

char *
nci_tdt( c_func, d0, t1 )
	SV* c_func
	double d0
	char * t1
PREINIT:
	char *(*func)(double, char *);
CODE:
	func   = INT2PTR(char *(*)(double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1);
OUTPUT:
	RETVAL

int
nci_idt( c_func, d0, t1 )
	SV* c_func
	double d0
	char * t1
PREINIT:
	int(*func)(double, char *);
CODE:
	func   = INT2PTR(int(*)(double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1);
OUTPUT:
	RETVAL

void *
nci_pst( c_func, s0, t1 )
	SV* c_func
	short s0
	char * t1
PREINIT:
	void *(*func)(short, char *);
CODE:
	func   = INT2PTR(void *(*)(short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1);
OUTPUT:
	RETVAL

void
nci_vst( c_func, s0, t1 )
	SV* c_func
	short s0
	char * t1
PREINIT:
	void(*func)(short, char *);
CODE:
	func   = INT2PTR(void(*)(short, char *), SvIV(c_func) );
	(*func)(s0, t1);

double
nci_dst( c_func, s0, t1 )
	SV* c_func
	short s0
	char * t1
PREINIT:
	double(*func)(short, char *);
CODE:
	func   = INT2PTR(double(*)(short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1);
OUTPUT:
	RETVAL

short
nci_sst( c_func, s0, t1 )
	SV* c_func
	short s0
	char * t1
PREINIT:
	short(*func)(short, char *);
CODE:
	func   = INT2PTR(short(*)(short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1);
OUTPUT:
	RETVAL

float
nci_fst( c_func, s0, t1 )
	SV* c_func
	short s0
	char * t1
PREINIT:
	float(*func)(short, char *);
CODE:
	func   = INT2PTR(float(*)(short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1);
OUTPUT:
	RETVAL

char *
nci_tst( c_func, s0, t1 )
	SV* c_func
	short s0
	char * t1
PREINIT:
	char *(*func)(short, char *);
CODE:
	func   = INT2PTR(char *(*)(short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1);
OUTPUT:
	RETVAL

int
nci_ist( c_func, s0, t1 )
	SV* c_func
	short s0
	char * t1
PREINIT:
	int(*func)(short, char *);
CODE:
	func   = INT2PTR(int(*)(short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1);
OUTPUT:
	RETVAL

void *
nci_pft( c_func, f0, t1 )
	SV* c_func
	float f0
	char * t1
PREINIT:
	void *(*func)(float, char *);
CODE:
	func   = INT2PTR(void *(*)(float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1);
OUTPUT:
	RETVAL

void
nci_vft( c_func, f0, t1 )
	SV* c_func
	float f0
	char * t1
PREINIT:
	void(*func)(float, char *);
CODE:
	func   = INT2PTR(void(*)(float, char *), SvIV(c_func) );
	(*func)(f0, t1);

double
nci_dft( c_func, f0, t1 )
	SV* c_func
	float f0
	char * t1
PREINIT:
	double(*func)(float, char *);
CODE:
	func   = INT2PTR(double(*)(float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1);
OUTPUT:
	RETVAL

short
nci_sft( c_func, f0, t1 )
	SV* c_func
	float f0
	char * t1
PREINIT:
	short(*func)(float, char *);
CODE:
	func   = INT2PTR(short(*)(float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1);
OUTPUT:
	RETVAL

float
nci_fft( c_func, f0, t1 )
	SV* c_func
	float f0
	char * t1
PREINIT:
	float(*func)(float, char *);
CODE:
	func   = INT2PTR(float(*)(float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1);
OUTPUT:
	RETVAL

char *
nci_tft( c_func, f0, t1 )
	SV* c_func
	float f0
	char * t1
PREINIT:
	char *(*func)(float, char *);
CODE:
	func   = INT2PTR(char *(*)(float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1);
OUTPUT:
	RETVAL

int
nci_ift( c_func, f0, t1 )
	SV* c_func
	float f0
	char * t1
PREINIT:
	int(*func)(float, char *);
CODE:
	func   = INT2PTR(int(*)(float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1);
OUTPUT:
	RETVAL

void *
nci_ptt( c_func, t0, t1 )
	SV* c_func
	char * t0
	char * t1
PREINIT:
	void *(*func)(char *, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1);
OUTPUT:
	RETVAL

void
nci_vtt( c_func, t0, t1 )
	SV* c_func
	char * t0
	char * t1
PREINIT:
	void(*func)(char *, char *);
CODE:
	func   = INT2PTR(void(*)(char *, char *), SvIV(c_func) );
	(*func)(t0, t1);

double
nci_dtt( c_func, t0, t1 )
	SV* c_func
	char * t0
	char * t1
PREINIT:
	double(*func)(char *, char *);
CODE:
	func   = INT2PTR(double(*)(char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1);
OUTPUT:
	RETVAL

short
nci_stt( c_func, t0, t1 )
	SV* c_func
	char * t0
	char * t1
PREINIT:
	short(*func)(char *, char *);
CODE:
	func   = INT2PTR(short(*)(char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1);
OUTPUT:
	RETVAL

float
nci_ftt( c_func, t0, t1 )
	SV* c_func
	char * t0
	char * t1
PREINIT:
	float(*func)(char *, char *);
CODE:
	func   = INT2PTR(float(*)(char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1);
OUTPUT:
	RETVAL

char *
nci_ttt( c_func, t0, t1 )
	SV* c_func
	char * t0
	char * t1
PREINIT:
	char *(*func)(char *, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1);
OUTPUT:
	RETVAL

int
nci_itt( c_func, t0, t1 )
	SV* c_func
	char * t0
	char * t1
PREINIT:
	int(*func)(char *, char *);
CODE:
	func   = INT2PTR(int(*)(char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1);
OUTPUT:
	RETVAL

void *
nci_pit( c_func, i0, t1 )
	SV* c_func
	int i0
	char * t1
PREINIT:
	void *(*func)(int, char *);
CODE:
	func   = INT2PTR(void *(*)(int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1);
OUTPUT:
	RETVAL

void
nci_vit( c_func, i0, t1 )
	SV* c_func
	int i0
	char * t1
PREINIT:
	void(*func)(int, char *);
CODE:
	func   = INT2PTR(void(*)(int, char *), SvIV(c_func) );
	(*func)(i0, t1);

double
nci_dit( c_func, i0, t1 )
	SV* c_func
	int i0
	char * t1
PREINIT:
	double(*func)(int, char *);
CODE:
	func   = INT2PTR(double(*)(int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1);
OUTPUT:
	RETVAL

short
nci_sit( c_func, i0, t1 )
	SV* c_func
	int i0
	char * t1
PREINIT:
	short(*func)(int, char *);
CODE:
	func   = INT2PTR(short(*)(int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1);
OUTPUT:
	RETVAL

float
nci_fit( c_func, i0, t1 )
	SV* c_func
	int i0
	char * t1
PREINIT:
	float(*func)(int, char *);
CODE:
	func   = INT2PTR(float(*)(int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1);
OUTPUT:
	RETVAL

char *
nci_tit( c_func, i0, t1 )
	SV* c_func
	int i0
	char * t1
PREINIT:
	char *(*func)(int, char *);
CODE:
	func   = INT2PTR(char *(*)(int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1);
OUTPUT:
	RETVAL

int
nci_iit( c_func, i0, t1 )
	SV* c_func
	int i0
	char * t1
PREINIT:
	int(*func)(int, char *);
CODE:
	func   = INT2PTR(int(*)(int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1);
OUTPUT:
	RETVAL

void *
nci_ppi( c_func, p0, i1 )
	SV* c_func
	void * p0
	int i1
PREINIT:
	void *(*func)(void *, int);
CODE:
	func   = INT2PTR(void *(*)(void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1);
OUTPUT:
	RETVAL

void
nci_vpi( c_func, p0, i1 )
	SV* c_func
	void * p0
	int i1
PREINIT:
	void(*func)(void *, int);
CODE:
	func   = INT2PTR(void(*)(void *, int), SvIV(c_func) );
	(*func)(p0, i1);

double
nci_dpi( c_func, p0, i1 )
	SV* c_func
	void * p0
	int i1
PREINIT:
	double(*func)(void *, int);
CODE:
	func   = INT2PTR(double(*)(void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1);
OUTPUT:
	RETVAL

short
nci_spi( c_func, p0, i1 )
	SV* c_func
	void * p0
	int i1
PREINIT:
	short(*func)(void *, int);
CODE:
	func   = INT2PTR(short(*)(void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1);
OUTPUT:
	RETVAL

float
nci_fpi( c_func, p0, i1 )
	SV* c_func
	void * p0
	int i1
PREINIT:
	float(*func)(void *, int);
CODE:
	func   = INT2PTR(float(*)(void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1);
OUTPUT:
	RETVAL

char *
nci_tpi( c_func, p0, i1 )
	SV* c_func
	void * p0
	int i1
PREINIT:
	char *(*func)(void *, int);
CODE:
	func   = INT2PTR(char *(*)(void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1);
OUTPUT:
	RETVAL

int
nci_ipi( c_func, p0, i1 )
	SV* c_func
	void * p0
	int i1
PREINIT:
	int(*func)(void *, int);
CODE:
	func   = INT2PTR(int(*)(void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1);
OUTPUT:
	RETVAL

void *
nci_pvi( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvi( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvi( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svi( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvi( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvi( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivi( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdi( c_func, d0, i1 )
	SV* c_func
	double d0
	int i1
PREINIT:
	void *(*func)(double, int);
CODE:
	func   = INT2PTR(void *(*)(double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1);
OUTPUT:
	RETVAL

void
nci_vdi( c_func, d0, i1 )
	SV* c_func
	double d0
	int i1
PREINIT:
	void(*func)(double, int);
CODE:
	func   = INT2PTR(void(*)(double, int), SvIV(c_func) );
	(*func)(d0, i1);

double
nci_ddi( c_func, d0, i1 )
	SV* c_func
	double d0
	int i1
PREINIT:
	double(*func)(double, int);
CODE:
	func   = INT2PTR(double(*)(double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1);
OUTPUT:
	RETVAL

short
nci_sdi( c_func, d0, i1 )
	SV* c_func
	double d0
	int i1
PREINIT:
	short(*func)(double, int);
CODE:
	func   = INT2PTR(short(*)(double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1);
OUTPUT:
	RETVAL

float
nci_fdi( c_func, d0, i1 )
	SV* c_func
	double d0
	int i1
PREINIT:
	float(*func)(double, int);
CODE:
	func   = INT2PTR(float(*)(double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1);
OUTPUT:
	RETVAL

char *
nci_tdi( c_func, d0, i1 )
	SV* c_func
	double d0
	int i1
PREINIT:
	char *(*func)(double, int);
CODE:
	func   = INT2PTR(char *(*)(double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1);
OUTPUT:
	RETVAL

int
nci_idi( c_func, d0, i1 )
	SV* c_func
	double d0
	int i1
PREINIT:
	int(*func)(double, int);
CODE:
	func   = INT2PTR(int(*)(double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1);
OUTPUT:
	RETVAL

void *
nci_psi( c_func, s0, i1 )
	SV* c_func
	short s0
	int i1
PREINIT:
	void *(*func)(short, int);
CODE:
	func   = INT2PTR(void *(*)(short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1);
OUTPUT:
	RETVAL

void
nci_vsi( c_func, s0, i1 )
	SV* c_func
	short s0
	int i1
PREINIT:
	void(*func)(short, int);
CODE:
	func   = INT2PTR(void(*)(short, int), SvIV(c_func) );
	(*func)(s0, i1);

double
nci_dsi( c_func, s0, i1 )
	SV* c_func
	short s0
	int i1
PREINIT:
	double(*func)(short, int);
CODE:
	func   = INT2PTR(double(*)(short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1);
OUTPUT:
	RETVAL

short
nci_ssi( c_func, s0, i1 )
	SV* c_func
	short s0
	int i1
PREINIT:
	short(*func)(short, int);
CODE:
	func   = INT2PTR(short(*)(short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1);
OUTPUT:
	RETVAL

float
nci_fsi( c_func, s0, i1 )
	SV* c_func
	short s0
	int i1
PREINIT:
	float(*func)(short, int);
CODE:
	func   = INT2PTR(float(*)(short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1);
OUTPUT:
	RETVAL

char *
nci_tsi( c_func, s0, i1 )
	SV* c_func
	short s0
	int i1
PREINIT:
	char *(*func)(short, int);
CODE:
	func   = INT2PTR(char *(*)(short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1);
OUTPUT:
	RETVAL

int
nci_isi( c_func, s0, i1 )
	SV* c_func
	short s0
	int i1
PREINIT:
	int(*func)(short, int);
CODE:
	func   = INT2PTR(int(*)(short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1);
OUTPUT:
	RETVAL

void *
nci_pfi( c_func, f0, i1 )
	SV* c_func
	float f0
	int i1
PREINIT:
	void *(*func)(float, int);
CODE:
	func   = INT2PTR(void *(*)(float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1);
OUTPUT:
	RETVAL

void
nci_vfi( c_func, f0, i1 )
	SV* c_func
	float f0
	int i1
PREINIT:
	void(*func)(float, int);
CODE:
	func   = INT2PTR(void(*)(float, int), SvIV(c_func) );
	(*func)(f0, i1);

double
nci_dfi( c_func, f0, i1 )
	SV* c_func
	float f0
	int i1
PREINIT:
	double(*func)(float, int);
CODE:
	func   = INT2PTR(double(*)(float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1);
OUTPUT:
	RETVAL

short
nci_sfi( c_func, f0, i1 )
	SV* c_func
	float f0
	int i1
PREINIT:
	short(*func)(float, int);
CODE:
	func   = INT2PTR(short(*)(float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1);
OUTPUT:
	RETVAL

float
nci_ffi( c_func, f0, i1 )
	SV* c_func
	float f0
	int i1
PREINIT:
	float(*func)(float, int);
CODE:
	func   = INT2PTR(float(*)(float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1);
OUTPUT:
	RETVAL

char *
nci_tfi( c_func, f0, i1 )
	SV* c_func
	float f0
	int i1
PREINIT:
	char *(*func)(float, int);
CODE:
	func   = INT2PTR(char *(*)(float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1);
OUTPUT:
	RETVAL

int
nci_ifi( c_func, f0, i1 )
	SV* c_func
	float f0
	int i1
PREINIT:
	int(*func)(float, int);
CODE:
	func   = INT2PTR(int(*)(float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1);
OUTPUT:
	RETVAL

void *
nci_pti( c_func, t0, i1 )
	SV* c_func
	char * t0
	int i1
PREINIT:
	void *(*func)(char *, int);
CODE:
	func   = INT2PTR(void *(*)(char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1);
OUTPUT:
	RETVAL

void
nci_vti( c_func, t0, i1 )
	SV* c_func
	char * t0
	int i1
PREINIT:
	void(*func)(char *, int);
CODE:
	func   = INT2PTR(void(*)(char *, int), SvIV(c_func) );
	(*func)(t0, i1);

double
nci_dti( c_func, t0, i1 )
	SV* c_func
	char * t0
	int i1
PREINIT:
	double(*func)(char *, int);
CODE:
	func   = INT2PTR(double(*)(char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1);
OUTPUT:
	RETVAL

short
nci_sti( c_func, t0, i1 )
	SV* c_func
	char * t0
	int i1
PREINIT:
	short(*func)(char *, int);
CODE:
	func   = INT2PTR(short(*)(char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1);
OUTPUT:
	RETVAL

float
nci_fti( c_func, t0, i1 )
	SV* c_func
	char * t0
	int i1
PREINIT:
	float(*func)(char *, int);
CODE:
	func   = INT2PTR(float(*)(char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1);
OUTPUT:
	RETVAL

char *
nci_tti( c_func, t0, i1 )
	SV* c_func
	char * t0
	int i1
PREINIT:
	char *(*func)(char *, int);
CODE:
	func   = INT2PTR(char *(*)(char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1);
OUTPUT:
	RETVAL

int
nci_iti( c_func, t0, i1 )
	SV* c_func
	char * t0
	int i1
PREINIT:
	int(*func)(char *, int);
CODE:
	func   = INT2PTR(int(*)(char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1);
OUTPUT:
	RETVAL

void *
nci_pii( c_func, i0, i1 )
	SV* c_func
	int i0
	int i1
PREINIT:
	void *(*func)(int, int);
CODE:
	func   = INT2PTR(void *(*)(int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1);
OUTPUT:
	RETVAL

void
nci_vii( c_func, i0, i1 )
	SV* c_func
	int i0
	int i1
PREINIT:
	void(*func)(int, int);
CODE:
	func   = INT2PTR(void(*)(int, int), SvIV(c_func) );
	(*func)(i0, i1);

double
nci_dii( c_func, i0, i1 )
	SV* c_func
	int i0
	int i1
PREINIT:
	double(*func)(int, int);
CODE:
	func   = INT2PTR(double(*)(int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1);
OUTPUT:
	RETVAL

short
nci_sii( c_func, i0, i1 )
	SV* c_func
	int i0
	int i1
PREINIT:
	short(*func)(int, int);
CODE:
	func   = INT2PTR(short(*)(int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1);
OUTPUT:
	RETVAL

float
nci_fii( c_func, i0, i1 )
	SV* c_func
	int i0
	int i1
PREINIT:
	float(*func)(int, int);
CODE:
	func   = INT2PTR(float(*)(int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1);
OUTPUT:
	RETVAL

char *
nci_tii( c_func, i0, i1 )
	SV* c_func
	int i0
	int i1
PREINIT:
	char *(*func)(int, int);
CODE:
	func   = INT2PTR(char *(*)(int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1);
OUTPUT:
	RETVAL

int
nci_iii( c_func, i0, i1 )
	SV* c_func
	int i0
	int i1
PREINIT:
	int(*func)(int, int);
CODE:
	func   = INT2PTR(int(*)(int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1);
OUTPUT:
	RETVAL

void *
nci_pppp( c_func, p0, p1, p2 )
	SV* c_func
	void * p0
	void * p1
	void * p2
PREINIT:
	void *(*func)(void *, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2);
OUTPUT:
	RETVAL

void
nci_vppp( c_func, p0, p1, p2 )
	SV* c_func
	void * p0
	void * p1
	void * p2
PREINIT:
	void(*func)(void *, void *, void *);
CODE:
	func   = INT2PTR(void(*)(void *, void *, void *), SvIV(c_func) );
	(*func)(p0, p1, p2);

double
nci_dppp( c_func, p0, p1, p2 )
	SV* c_func
	void * p0
	void * p1
	void * p2
PREINIT:
	double(*func)(void *, void *, void *);
CODE:
	func   = INT2PTR(double(*)(void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2);
OUTPUT:
	RETVAL

short
nci_sppp( c_func, p0, p1, p2 )
	SV* c_func
	void * p0
	void * p1
	void * p2
PREINIT:
	short(*func)(void *, void *, void *);
CODE:
	func   = INT2PTR(short(*)(void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2);
OUTPUT:
	RETVAL

float
nci_fppp( c_func, p0, p1, p2 )
	SV* c_func
	void * p0
	void * p1
	void * p2
PREINIT:
	float(*func)(void *, void *, void *);
CODE:
	func   = INT2PTR(float(*)(void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2);
OUTPUT:
	RETVAL

char *
nci_tppp( c_func, p0, p1, p2 )
	SV* c_func
	void * p0
	void * p1
	void * p2
PREINIT:
	char *(*func)(void *, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2);
OUTPUT:
	RETVAL

int
nci_ippp( c_func, p0, p1, p2 )
	SV* c_func
	void * p0
	void * p1
	void * p2
PREINIT:
	int(*func)(void *, void *, void *);
CODE:
	func   = INT2PTR(int(*)(void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2);
OUTPUT:
	RETVAL

void *
nci_pvpp( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvpp( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvpp( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svpp( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvpp( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvpp( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivpp( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdpp( c_func, d0, p1, p2 )
	SV* c_func
	double d0
	void * p1
	void * p2
PREINIT:
	void *(*func)(double, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2);
OUTPUT:
	RETVAL

void
nci_vdpp( c_func, d0, p1, p2 )
	SV* c_func
	double d0
	void * p1
	void * p2
PREINIT:
	void(*func)(double, void *, void *);
CODE:
	func   = INT2PTR(void(*)(double, void *, void *), SvIV(c_func) );
	(*func)(d0, p1, p2);

double
nci_ddpp( c_func, d0, p1, p2 )
	SV* c_func
	double d0
	void * p1
	void * p2
PREINIT:
	double(*func)(double, void *, void *);
CODE:
	func   = INT2PTR(double(*)(double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2);
OUTPUT:
	RETVAL

short
nci_sdpp( c_func, d0, p1, p2 )
	SV* c_func
	double d0
	void * p1
	void * p2
PREINIT:
	short(*func)(double, void *, void *);
CODE:
	func   = INT2PTR(short(*)(double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2);
OUTPUT:
	RETVAL

float
nci_fdpp( c_func, d0, p1, p2 )
	SV* c_func
	double d0
	void * p1
	void * p2
PREINIT:
	float(*func)(double, void *, void *);
CODE:
	func   = INT2PTR(float(*)(double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2);
OUTPUT:
	RETVAL

char *
nci_tdpp( c_func, d0, p1, p2 )
	SV* c_func
	double d0
	void * p1
	void * p2
PREINIT:
	char *(*func)(double, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2);
OUTPUT:
	RETVAL

int
nci_idpp( c_func, d0, p1, p2 )
	SV* c_func
	double d0
	void * p1
	void * p2
PREINIT:
	int(*func)(double, void *, void *);
CODE:
	func   = INT2PTR(int(*)(double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2);
OUTPUT:
	RETVAL

void *
nci_pspp( c_func, s0, p1, p2 )
	SV* c_func
	short s0
	void * p1
	void * p2
PREINIT:
	void *(*func)(short, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2);
OUTPUT:
	RETVAL

void
nci_vspp( c_func, s0, p1, p2 )
	SV* c_func
	short s0
	void * p1
	void * p2
PREINIT:
	void(*func)(short, void *, void *);
CODE:
	func   = INT2PTR(void(*)(short, void *, void *), SvIV(c_func) );
	(*func)(s0, p1, p2);

double
nci_dspp( c_func, s0, p1, p2 )
	SV* c_func
	short s0
	void * p1
	void * p2
PREINIT:
	double(*func)(short, void *, void *);
CODE:
	func   = INT2PTR(double(*)(short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2);
OUTPUT:
	RETVAL

short
nci_sspp( c_func, s0, p1, p2 )
	SV* c_func
	short s0
	void * p1
	void * p2
PREINIT:
	short(*func)(short, void *, void *);
CODE:
	func   = INT2PTR(short(*)(short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2);
OUTPUT:
	RETVAL

float
nci_fspp( c_func, s0, p1, p2 )
	SV* c_func
	short s0
	void * p1
	void * p2
PREINIT:
	float(*func)(short, void *, void *);
CODE:
	func   = INT2PTR(float(*)(short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2);
OUTPUT:
	RETVAL

char *
nci_tspp( c_func, s0, p1, p2 )
	SV* c_func
	short s0
	void * p1
	void * p2
PREINIT:
	char *(*func)(short, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2);
OUTPUT:
	RETVAL

int
nci_ispp( c_func, s0, p1, p2 )
	SV* c_func
	short s0
	void * p1
	void * p2
PREINIT:
	int(*func)(short, void *, void *);
CODE:
	func   = INT2PTR(int(*)(short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2);
OUTPUT:
	RETVAL

void *
nci_pfpp( c_func, f0, p1, p2 )
	SV* c_func
	float f0
	void * p1
	void * p2
PREINIT:
	void *(*func)(float, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2);
OUTPUT:
	RETVAL

void
nci_vfpp( c_func, f0, p1, p2 )
	SV* c_func
	float f0
	void * p1
	void * p2
PREINIT:
	void(*func)(float, void *, void *);
CODE:
	func   = INT2PTR(void(*)(float, void *, void *), SvIV(c_func) );
	(*func)(f0, p1, p2);

double
nci_dfpp( c_func, f0, p1, p2 )
	SV* c_func
	float f0
	void * p1
	void * p2
PREINIT:
	double(*func)(float, void *, void *);
CODE:
	func   = INT2PTR(double(*)(float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2);
OUTPUT:
	RETVAL

short
nci_sfpp( c_func, f0, p1, p2 )
	SV* c_func
	float f0
	void * p1
	void * p2
PREINIT:
	short(*func)(float, void *, void *);
CODE:
	func   = INT2PTR(short(*)(float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2);
OUTPUT:
	RETVAL

float
nci_ffpp( c_func, f0, p1, p2 )
	SV* c_func
	float f0
	void * p1
	void * p2
PREINIT:
	float(*func)(float, void *, void *);
CODE:
	func   = INT2PTR(float(*)(float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2);
OUTPUT:
	RETVAL

char *
nci_tfpp( c_func, f0, p1, p2 )
	SV* c_func
	float f0
	void * p1
	void * p2
PREINIT:
	char *(*func)(float, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2);
OUTPUT:
	RETVAL

int
nci_ifpp( c_func, f0, p1, p2 )
	SV* c_func
	float f0
	void * p1
	void * p2
PREINIT:
	int(*func)(float, void *, void *);
CODE:
	func   = INT2PTR(int(*)(float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2);
OUTPUT:
	RETVAL

void *
nci_ptpp( c_func, t0, p1, p2 )
	SV* c_func
	char * t0
	void * p1
	void * p2
PREINIT:
	void *(*func)(char *, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2);
OUTPUT:
	RETVAL

void
nci_vtpp( c_func, t0, p1, p2 )
	SV* c_func
	char * t0
	void * p1
	void * p2
PREINIT:
	void(*func)(char *, void *, void *);
CODE:
	func   = INT2PTR(void(*)(char *, void *, void *), SvIV(c_func) );
	(*func)(t0, p1, p2);

double
nci_dtpp( c_func, t0, p1, p2 )
	SV* c_func
	char * t0
	void * p1
	void * p2
PREINIT:
	double(*func)(char *, void *, void *);
CODE:
	func   = INT2PTR(double(*)(char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2);
OUTPUT:
	RETVAL

short
nci_stpp( c_func, t0, p1, p2 )
	SV* c_func
	char * t0
	void * p1
	void * p2
PREINIT:
	short(*func)(char *, void *, void *);
CODE:
	func   = INT2PTR(short(*)(char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2);
OUTPUT:
	RETVAL

float
nci_ftpp( c_func, t0, p1, p2 )
	SV* c_func
	char * t0
	void * p1
	void * p2
PREINIT:
	float(*func)(char *, void *, void *);
CODE:
	func   = INT2PTR(float(*)(char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2);
OUTPUT:
	RETVAL

char *
nci_ttpp( c_func, t0, p1, p2 )
	SV* c_func
	char * t0
	void * p1
	void * p2
PREINIT:
	char *(*func)(char *, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2);
OUTPUT:
	RETVAL

int
nci_itpp( c_func, t0, p1, p2 )
	SV* c_func
	char * t0
	void * p1
	void * p2
PREINIT:
	int(*func)(char *, void *, void *);
CODE:
	func   = INT2PTR(int(*)(char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2);
OUTPUT:
	RETVAL

void *
nci_pipp( c_func, i0, p1, p2 )
	SV* c_func
	int i0
	void * p1
	void * p2
PREINIT:
	void *(*func)(int, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2);
OUTPUT:
	RETVAL

void
nci_vipp( c_func, i0, p1, p2 )
	SV* c_func
	int i0
	void * p1
	void * p2
PREINIT:
	void(*func)(int, void *, void *);
CODE:
	func   = INT2PTR(void(*)(int, void *, void *), SvIV(c_func) );
	(*func)(i0, p1, p2);

double
nci_dipp( c_func, i0, p1, p2 )
	SV* c_func
	int i0
	void * p1
	void * p2
PREINIT:
	double(*func)(int, void *, void *);
CODE:
	func   = INT2PTR(double(*)(int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2);
OUTPUT:
	RETVAL

short
nci_sipp( c_func, i0, p1, p2 )
	SV* c_func
	int i0
	void * p1
	void * p2
PREINIT:
	short(*func)(int, void *, void *);
CODE:
	func   = INT2PTR(short(*)(int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2);
OUTPUT:
	RETVAL

float
nci_fipp( c_func, i0, p1, p2 )
	SV* c_func
	int i0
	void * p1
	void * p2
PREINIT:
	float(*func)(int, void *, void *);
CODE:
	func   = INT2PTR(float(*)(int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2);
OUTPUT:
	RETVAL

char *
nci_tipp( c_func, i0, p1, p2 )
	SV* c_func
	int i0
	void * p1
	void * p2
PREINIT:
	char *(*func)(int, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2);
OUTPUT:
	RETVAL

int
nci_iipp( c_func, i0, p1, p2 )
	SV* c_func
	int i0
	void * p1
	void * p2
PREINIT:
	int(*func)(int, void *, void *);
CODE:
	func   = INT2PTR(int(*)(int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2);
OUTPUT:
	RETVAL

void *
nci_ppdp( c_func, p0, d1, p2 )
	SV* c_func
	void * p0
	double d1
	void * p2
PREINIT:
	void *(*func)(void *, double, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2);
OUTPUT:
	RETVAL

void
nci_vpdp( c_func, p0, d1, p2 )
	SV* c_func
	void * p0
	double d1
	void * p2
PREINIT:
	void(*func)(void *, double, void *);
CODE:
	func   = INT2PTR(void(*)(void *, double, void *), SvIV(c_func) );
	(*func)(p0, d1, p2);

double
nci_dpdp( c_func, p0, d1, p2 )
	SV* c_func
	void * p0
	double d1
	void * p2
PREINIT:
	double(*func)(void *, double, void *);
CODE:
	func   = INT2PTR(double(*)(void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2);
OUTPUT:
	RETVAL

short
nci_spdp( c_func, p0, d1, p2 )
	SV* c_func
	void * p0
	double d1
	void * p2
PREINIT:
	short(*func)(void *, double, void *);
CODE:
	func   = INT2PTR(short(*)(void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2);
OUTPUT:
	RETVAL

float
nci_fpdp( c_func, p0, d1, p2 )
	SV* c_func
	void * p0
	double d1
	void * p2
PREINIT:
	float(*func)(void *, double, void *);
CODE:
	func   = INT2PTR(float(*)(void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2);
OUTPUT:
	RETVAL

char *
nci_tpdp( c_func, p0, d1, p2 )
	SV* c_func
	void * p0
	double d1
	void * p2
PREINIT:
	char *(*func)(void *, double, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2);
OUTPUT:
	RETVAL

int
nci_ipdp( c_func, p0, d1, p2 )
	SV* c_func
	void * p0
	double d1
	void * p2
PREINIT:
	int(*func)(void *, double, void *);
CODE:
	func   = INT2PTR(int(*)(void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2);
OUTPUT:
	RETVAL

void *
nci_pvdp( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvdp( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvdp( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svdp( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvdp( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvdp( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivdp( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pddp( c_func, d0, d1, p2 )
	SV* c_func
	double d0
	double d1
	void * p2
PREINIT:
	void *(*func)(double, double, void *);
CODE:
	func   = INT2PTR(void *(*)(double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2);
OUTPUT:
	RETVAL

void
nci_vddp( c_func, d0, d1, p2 )
	SV* c_func
	double d0
	double d1
	void * p2
PREINIT:
	void(*func)(double, double, void *);
CODE:
	func   = INT2PTR(void(*)(double, double, void *), SvIV(c_func) );
	(*func)(d0, d1, p2);

double
nci_dddp( c_func, d0, d1, p2 )
	SV* c_func
	double d0
	double d1
	void * p2
PREINIT:
	double(*func)(double, double, void *);
CODE:
	func   = INT2PTR(double(*)(double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2);
OUTPUT:
	RETVAL

short
nci_sddp( c_func, d0, d1, p2 )
	SV* c_func
	double d0
	double d1
	void * p2
PREINIT:
	short(*func)(double, double, void *);
CODE:
	func   = INT2PTR(short(*)(double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2);
OUTPUT:
	RETVAL

float
nci_fddp( c_func, d0, d1, p2 )
	SV* c_func
	double d0
	double d1
	void * p2
PREINIT:
	float(*func)(double, double, void *);
CODE:
	func   = INT2PTR(float(*)(double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2);
OUTPUT:
	RETVAL

char *
nci_tddp( c_func, d0, d1, p2 )
	SV* c_func
	double d0
	double d1
	void * p2
PREINIT:
	char *(*func)(double, double, void *);
CODE:
	func   = INT2PTR(char *(*)(double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2);
OUTPUT:
	RETVAL

int
nci_iddp( c_func, d0, d1, p2 )
	SV* c_func
	double d0
	double d1
	void * p2
PREINIT:
	int(*func)(double, double, void *);
CODE:
	func   = INT2PTR(int(*)(double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2);
OUTPUT:
	RETVAL

void *
nci_psdp( c_func, s0, d1, p2 )
	SV* c_func
	short s0
	double d1
	void * p2
PREINIT:
	void *(*func)(short, double, void *);
CODE:
	func   = INT2PTR(void *(*)(short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2);
OUTPUT:
	RETVAL

void
nci_vsdp( c_func, s0, d1, p2 )
	SV* c_func
	short s0
	double d1
	void * p2
PREINIT:
	void(*func)(short, double, void *);
CODE:
	func   = INT2PTR(void(*)(short, double, void *), SvIV(c_func) );
	(*func)(s0, d1, p2);

double
nci_dsdp( c_func, s0, d1, p2 )
	SV* c_func
	short s0
	double d1
	void * p2
PREINIT:
	double(*func)(short, double, void *);
CODE:
	func   = INT2PTR(double(*)(short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2);
OUTPUT:
	RETVAL

short
nci_ssdp( c_func, s0, d1, p2 )
	SV* c_func
	short s0
	double d1
	void * p2
PREINIT:
	short(*func)(short, double, void *);
CODE:
	func   = INT2PTR(short(*)(short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2);
OUTPUT:
	RETVAL

float
nci_fsdp( c_func, s0, d1, p2 )
	SV* c_func
	short s0
	double d1
	void * p2
PREINIT:
	float(*func)(short, double, void *);
CODE:
	func   = INT2PTR(float(*)(short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2);
OUTPUT:
	RETVAL

char *
nci_tsdp( c_func, s0, d1, p2 )
	SV* c_func
	short s0
	double d1
	void * p2
PREINIT:
	char *(*func)(short, double, void *);
CODE:
	func   = INT2PTR(char *(*)(short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2);
OUTPUT:
	RETVAL

int
nci_isdp( c_func, s0, d1, p2 )
	SV* c_func
	short s0
	double d1
	void * p2
PREINIT:
	int(*func)(short, double, void *);
CODE:
	func   = INT2PTR(int(*)(short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2);
OUTPUT:
	RETVAL

void *
nci_pfdp( c_func, f0, d1, p2 )
	SV* c_func
	float f0
	double d1
	void * p2
PREINIT:
	void *(*func)(float, double, void *);
CODE:
	func   = INT2PTR(void *(*)(float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2);
OUTPUT:
	RETVAL

void
nci_vfdp( c_func, f0, d1, p2 )
	SV* c_func
	float f0
	double d1
	void * p2
PREINIT:
	void(*func)(float, double, void *);
CODE:
	func   = INT2PTR(void(*)(float, double, void *), SvIV(c_func) );
	(*func)(f0, d1, p2);

double
nci_dfdp( c_func, f0, d1, p2 )
	SV* c_func
	float f0
	double d1
	void * p2
PREINIT:
	double(*func)(float, double, void *);
CODE:
	func   = INT2PTR(double(*)(float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2);
OUTPUT:
	RETVAL

short
nci_sfdp( c_func, f0, d1, p2 )
	SV* c_func
	float f0
	double d1
	void * p2
PREINIT:
	short(*func)(float, double, void *);
CODE:
	func   = INT2PTR(short(*)(float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2);
OUTPUT:
	RETVAL

float
nci_ffdp( c_func, f0, d1, p2 )
	SV* c_func
	float f0
	double d1
	void * p2
PREINIT:
	float(*func)(float, double, void *);
CODE:
	func   = INT2PTR(float(*)(float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2);
OUTPUT:
	RETVAL

char *
nci_tfdp( c_func, f0, d1, p2 )
	SV* c_func
	float f0
	double d1
	void * p2
PREINIT:
	char *(*func)(float, double, void *);
CODE:
	func   = INT2PTR(char *(*)(float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2);
OUTPUT:
	RETVAL

int
nci_ifdp( c_func, f0, d1, p2 )
	SV* c_func
	float f0
	double d1
	void * p2
PREINIT:
	int(*func)(float, double, void *);
CODE:
	func   = INT2PTR(int(*)(float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2);
OUTPUT:
	RETVAL

void *
nci_ptdp( c_func, t0, d1, p2 )
	SV* c_func
	char * t0
	double d1
	void * p2
PREINIT:
	void *(*func)(char *, double, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2);
OUTPUT:
	RETVAL

void
nci_vtdp( c_func, t0, d1, p2 )
	SV* c_func
	char * t0
	double d1
	void * p2
PREINIT:
	void(*func)(char *, double, void *);
CODE:
	func   = INT2PTR(void(*)(char *, double, void *), SvIV(c_func) );
	(*func)(t0, d1, p2);

double
nci_dtdp( c_func, t0, d1, p2 )
	SV* c_func
	char * t0
	double d1
	void * p2
PREINIT:
	double(*func)(char *, double, void *);
CODE:
	func   = INT2PTR(double(*)(char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2);
OUTPUT:
	RETVAL

short
nci_stdp( c_func, t0, d1, p2 )
	SV* c_func
	char * t0
	double d1
	void * p2
PREINIT:
	short(*func)(char *, double, void *);
CODE:
	func   = INT2PTR(short(*)(char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2);
OUTPUT:
	RETVAL

float
nci_ftdp( c_func, t0, d1, p2 )
	SV* c_func
	char * t0
	double d1
	void * p2
PREINIT:
	float(*func)(char *, double, void *);
CODE:
	func   = INT2PTR(float(*)(char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2);
OUTPUT:
	RETVAL

char *
nci_ttdp( c_func, t0, d1, p2 )
	SV* c_func
	char * t0
	double d1
	void * p2
PREINIT:
	char *(*func)(char *, double, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2);
OUTPUT:
	RETVAL

int
nci_itdp( c_func, t0, d1, p2 )
	SV* c_func
	char * t0
	double d1
	void * p2
PREINIT:
	int(*func)(char *, double, void *);
CODE:
	func   = INT2PTR(int(*)(char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2);
OUTPUT:
	RETVAL

void *
nci_pidp( c_func, i0, d1, p2 )
	SV* c_func
	int i0
	double d1
	void * p2
PREINIT:
	void *(*func)(int, double, void *);
CODE:
	func   = INT2PTR(void *(*)(int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2);
OUTPUT:
	RETVAL

void
nci_vidp( c_func, i0, d1, p2 )
	SV* c_func
	int i0
	double d1
	void * p2
PREINIT:
	void(*func)(int, double, void *);
CODE:
	func   = INT2PTR(void(*)(int, double, void *), SvIV(c_func) );
	(*func)(i0, d1, p2);

double
nci_didp( c_func, i0, d1, p2 )
	SV* c_func
	int i0
	double d1
	void * p2
PREINIT:
	double(*func)(int, double, void *);
CODE:
	func   = INT2PTR(double(*)(int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2);
OUTPUT:
	RETVAL

short
nci_sidp( c_func, i0, d1, p2 )
	SV* c_func
	int i0
	double d1
	void * p2
PREINIT:
	short(*func)(int, double, void *);
CODE:
	func   = INT2PTR(short(*)(int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2);
OUTPUT:
	RETVAL

float
nci_fidp( c_func, i0, d1, p2 )
	SV* c_func
	int i0
	double d1
	void * p2
PREINIT:
	float(*func)(int, double, void *);
CODE:
	func   = INT2PTR(float(*)(int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2);
OUTPUT:
	RETVAL

char *
nci_tidp( c_func, i0, d1, p2 )
	SV* c_func
	int i0
	double d1
	void * p2
PREINIT:
	char *(*func)(int, double, void *);
CODE:
	func   = INT2PTR(char *(*)(int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2);
OUTPUT:
	RETVAL

int
nci_iidp( c_func, i0, d1, p2 )
	SV* c_func
	int i0
	double d1
	void * p2
PREINIT:
	int(*func)(int, double, void *);
CODE:
	func   = INT2PTR(int(*)(int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2);
OUTPUT:
	RETVAL

void *
nci_ppsp( c_func, p0, s1, p2 )
	SV* c_func
	void * p0
	short s1
	void * p2
PREINIT:
	void *(*func)(void *, short, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2);
OUTPUT:
	RETVAL

void
nci_vpsp( c_func, p0, s1, p2 )
	SV* c_func
	void * p0
	short s1
	void * p2
PREINIT:
	void(*func)(void *, short, void *);
CODE:
	func   = INT2PTR(void(*)(void *, short, void *), SvIV(c_func) );
	(*func)(p0, s1, p2);

double
nci_dpsp( c_func, p0, s1, p2 )
	SV* c_func
	void * p0
	short s1
	void * p2
PREINIT:
	double(*func)(void *, short, void *);
CODE:
	func   = INT2PTR(double(*)(void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2);
OUTPUT:
	RETVAL

short
nci_spsp( c_func, p0, s1, p2 )
	SV* c_func
	void * p0
	short s1
	void * p2
PREINIT:
	short(*func)(void *, short, void *);
CODE:
	func   = INT2PTR(short(*)(void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2);
OUTPUT:
	RETVAL

float
nci_fpsp( c_func, p0, s1, p2 )
	SV* c_func
	void * p0
	short s1
	void * p2
PREINIT:
	float(*func)(void *, short, void *);
CODE:
	func   = INT2PTR(float(*)(void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2);
OUTPUT:
	RETVAL

char *
nci_tpsp( c_func, p0, s1, p2 )
	SV* c_func
	void * p0
	short s1
	void * p2
PREINIT:
	char *(*func)(void *, short, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2);
OUTPUT:
	RETVAL

int
nci_ipsp( c_func, p0, s1, p2 )
	SV* c_func
	void * p0
	short s1
	void * p2
PREINIT:
	int(*func)(void *, short, void *);
CODE:
	func   = INT2PTR(int(*)(void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2);
OUTPUT:
	RETVAL

void *
nci_pvsp( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvsp( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvsp( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svsp( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvsp( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvsp( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivsp( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdsp( c_func, d0, s1, p2 )
	SV* c_func
	double d0
	short s1
	void * p2
PREINIT:
	void *(*func)(double, short, void *);
CODE:
	func   = INT2PTR(void *(*)(double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2);
OUTPUT:
	RETVAL

void
nci_vdsp( c_func, d0, s1, p2 )
	SV* c_func
	double d0
	short s1
	void * p2
PREINIT:
	void(*func)(double, short, void *);
CODE:
	func   = INT2PTR(void(*)(double, short, void *), SvIV(c_func) );
	(*func)(d0, s1, p2);

double
nci_ddsp( c_func, d0, s1, p2 )
	SV* c_func
	double d0
	short s1
	void * p2
PREINIT:
	double(*func)(double, short, void *);
CODE:
	func   = INT2PTR(double(*)(double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2);
OUTPUT:
	RETVAL

short
nci_sdsp( c_func, d0, s1, p2 )
	SV* c_func
	double d0
	short s1
	void * p2
PREINIT:
	short(*func)(double, short, void *);
CODE:
	func   = INT2PTR(short(*)(double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2);
OUTPUT:
	RETVAL

float
nci_fdsp( c_func, d0, s1, p2 )
	SV* c_func
	double d0
	short s1
	void * p2
PREINIT:
	float(*func)(double, short, void *);
CODE:
	func   = INT2PTR(float(*)(double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2);
OUTPUT:
	RETVAL

char *
nci_tdsp( c_func, d0, s1, p2 )
	SV* c_func
	double d0
	short s1
	void * p2
PREINIT:
	char *(*func)(double, short, void *);
CODE:
	func   = INT2PTR(char *(*)(double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2);
OUTPUT:
	RETVAL

int
nci_idsp( c_func, d0, s1, p2 )
	SV* c_func
	double d0
	short s1
	void * p2
PREINIT:
	int(*func)(double, short, void *);
CODE:
	func   = INT2PTR(int(*)(double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2);
OUTPUT:
	RETVAL

void *
nci_pssp( c_func, s0, s1, p2 )
	SV* c_func
	short s0
	short s1
	void * p2
PREINIT:
	void *(*func)(short, short, void *);
CODE:
	func   = INT2PTR(void *(*)(short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2);
OUTPUT:
	RETVAL

void
nci_vssp( c_func, s0, s1, p2 )
	SV* c_func
	short s0
	short s1
	void * p2
PREINIT:
	void(*func)(short, short, void *);
CODE:
	func   = INT2PTR(void(*)(short, short, void *), SvIV(c_func) );
	(*func)(s0, s1, p2);

double
nci_dssp( c_func, s0, s1, p2 )
	SV* c_func
	short s0
	short s1
	void * p2
PREINIT:
	double(*func)(short, short, void *);
CODE:
	func   = INT2PTR(double(*)(short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2);
OUTPUT:
	RETVAL

short
nci_sssp( c_func, s0, s1, p2 )
	SV* c_func
	short s0
	short s1
	void * p2
PREINIT:
	short(*func)(short, short, void *);
CODE:
	func   = INT2PTR(short(*)(short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2);
OUTPUT:
	RETVAL

float
nci_fssp( c_func, s0, s1, p2 )
	SV* c_func
	short s0
	short s1
	void * p2
PREINIT:
	float(*func)(short, short, void *);
CODE:
	func   = INT2PTR(float(*)(short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2);
OUTPUT:
	RETVAL

char *
nci_tssp( c_func, s0, s1, p2 )
	SV* c_func
	short s0
	short s1
	void * p2
PREINIT:
	char *(*func)(short, short, void *);
CODE:
	func   = INT2PTR(char *(*)(short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2);
OUTPUT:
	RETVAL

int
nci_issp( c_func, s0, s1, p2 )
	SV* c_func
	short s0
	short s1
	void * p2
PREINIT:
	int(*func)(short, short, void *);
CODE:
	func   = INT2PTR(int(*)(short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2);
OUTPUT:
	RETVAL

void *
nci_pfsp( c_func, f0, s1, p2 )
	SV* c_func
	float f0
	short s1
	void * p2
PREINIT:
	void *(*func)(float, short, void *);
CODE:
	func   = INT2PTR(void *(*)(float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2);
OUTPUT:
	RETVAL

void
nci_vfsp( c_func, f0, s1, p2 )
	SV* c_func
	float f0
	short s1
	void * p2
PREINIT:
	void(*func)(float, short, void *);
CODE:
	func   = INT2PTR(void(*)(float, short, void *), SvIV(c_func) );
	(*func)(f0, s1, p2);

double
nci_dfsp( c_func, f0, s1, p2 )
	SV* c_func
	float f0
	short s1
	void * p2
PREINIT:
	double(*func)(float, short, void *);
CODE:
	func   = INT2PTR(double(*)(float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2);
OUTPUT:
	RETVAL

short
nci_sfsp( c_func, f0, s1, p2 )
	SV* c_func
	float f0
	short s1
	void * p2
PREINIT:
	short(*func)(float, short, void *);
CODE:
	func   = INT2PTR(short(*)(float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2);
OUTPUT:
	RETVAL

float
nci_ffsp( c_func, f0, s1, p2 )
	SV* c_func
	float f0
	short s1
	void * p2
PREINIT:
	float(*func)(float, short, void *);
CODE:
	func   = INT2PTR(float(*)(float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2);
OUTPUT:
	RETVAL

char *
nci_tfsp( c_func, f0, s1, p2 )
	SV* c_func
	float f0
	short s1
	void * p2
PREINIT:
	char *(*func)(float, short, void *);
CODE:
	func   = INT2PTR(char *(*)(float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2);
OUTPUT:
	RETVAL

int
nci_ifsp( c_func, f0, s1, p2 )
	SV* c_func
	float f0
	short s1
	void * p2
PREINIT:
	int(*func)(float, short, void *);
CODE:
	func   = INT2PTR(int(*)(float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2);
OUTPUT:
	RETVAL

void *
nci_ptsp( c_func, t0, s1, p2 )
	SV* c_func
	char * t0
	short s1
	void * p2
PREINIT:
	void *(*func)(char *, short, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2);
OUTPUT:
	RETVAL

void
nci_vtsp( c_func, t0, s1, p2 )
	SV* c_func
	char * t0
	short s1
	void * p2
PREINIT:
	void(*func)(char *, short, void *);
CODE:
	func   = INT2PTR(void(*)(char *, short, void *), SvIV(c_func) );
	(*func)(t0, s1, p2);

double
nci_dtsp( c_func, t0, s1, p2 )
	SV* c_func
	char * t0
	short s1
	void * p2
PREINIT:
	double(*func)(char *, short, void *);
CODE:
	func   = INT2PTR(double(*)(char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2);
OUTPUT:
	RETVAL

short
nci_stsp( c_func, t0, s1, p2 )
	SV* c_func
	char * t0
	short s1
	void * p2
PREINIT:
	short(*func)(char *, short, void *);
CODE:
	func   = INT2PTR(short(*)(char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2);
OUTPUT:
	RETVAL

float
nci_ftsp( c_func, t0, s1, p2 )
	SV* c_func
	char * t0
	short s1
	void * p2
PREINIT:
	float(*func)(char *, short, void *);
CODE:
	func   = INT2PTR(float(*)(char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2);
OUTPUT:
	RETVAL

char *
nci_ttsp( c_func, t0, s1, p2 )
	SV* c_func
	char * t0
	short s1
	void * p2
PREINIT:
	char *(*func)(char *, short, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2);
OUTPUT:
	RETVAL

int
nci_itsp( c_func, t0, s1, p2 )
	SV* c_func
	char * t0
	short s1
	void * p2
PREINIT:
	int(*func)(char *, short, void *);
CODE:
	func   = INT2PTR(int(*)(char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2);
OUTPUT:
	RETVAL

void *
nci_pisp( c_func, i0, s1, p2 )
	SV* c_func
	int i0
	short s1
	void * p2
PREINIT:
	void *(*func)(int, short, void *);
CODE:
	func   = INT2PTR(void *(*)(int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2);
OUTPUT:
	RETVAL

void
nci_visp( c_func, i0, s1, p2 )
	SV* c_func
	int i0
	short s1
	void * p2
PREINIT:
	void(*func)(int, short, void *);
CODE:
	func   = INT2PTR(void(*)(int, short, void *), SvIV(c_func) );
	(*func)(i0, s1, p2);

double
nci_disp( c_func, i0, s1, p2 )
	SV* c_func
	int i0
	short s1
	void * p2
PREINIT:
	double(*func)(int, short, void *);
CODE:
	func   = INT2PTR(double(*)(int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2);
OUTPUT:
	RETVAL

short
nci_sisp( c_func, i0, s1, p2 )
	SV* c_func
	int i0
	short s1
	void * p2
PREINIT:
	short(*func)(int, short, void *);
CODE:
	func   = INT2PTR(short(*)(int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2);
OUTPUT:
	RETVAL

float
nci_fisp( c_func, i0, s1, p2 )
	SV* c_func
	int i0
	short s1
	void * p2
PREINIT:
	float(*func)(int, short, void *);
CODE:
	func   = INT2PTR(float(*)(int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2);
OUTPUT:
	RETVAL

char *
nci_tisp( c_func, i0, s1, p2 )
	SV* c_func
	int i0
	short s1
	void * p2
PREINIT:
	char *(*func)(int, short, void *);
CODE:
	func   = INT2PTR(char *(*)(int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2);
OUTPUT:
	RETVAL

int
nci_iisp( c_func, i0, s1, p2 )
	SV* c_func
	int i0
	short s1
	void * p2
PREINIT:
	int(*func)(int, short, void *);
CODE:
	func   = INT2PTR(int(*)(int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2);
OUTPUT:
	RETVAL

void *
nci_ppfp( c_func, p0, f1, p2 )
	SV* c_func
	void * p0
	float f1
	void * p2
PREINIT:
	void *(*func)(void *, float, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2);
OUTPUT:
	RETVAL

void
nci_vpfp( c_func, p0, f1, p2 )
	SV* c_func
	void * p0
	float f1
	void * p2
PREINIT:
	void(*func)(void *, float, void *);
CODE:
	func   = INT2PTR(void(*)(void *, float, void *), SvIV(c_func) );
	(*func)(p0, f1, p2);

double
nci_dpfp( c_func, p0, f1, p2 )
	SV* c_func
	void * p0
	float f1
	void * p2
PREINIT:
	double(*func)(void *, float, void *);
CODE:
	func   = INT2PTR(double(*)(void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2);
OUTPUT:
	RETVAL

short
nci_spfp( c_func, p0, f1, p2 )
	SV* c_func
	void * p0
	float f1
	void * p2
PREINIT:
	short(*func)(void *, float, void *);
CODE:
	func   = INT2PTR(short(*)(void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2);
OUTPUT:
	RETVAL

float
nci_fpfp( c_func, p0, f1, p2 )
	SV* c_func
	void * p0
	float f1
	void * p2
PREINIT:
	float(*func)(void *, float, void *);
CODE:
	func   = INT2PTR(float(*)(void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2);
OUTPUT:
	RETVAL

char *
nci_tpfp( c_func, p0, f1, p2 )
	SV* c_func
	void * p0
	float f1
	void * p2
PREINIT:
	char *(*func)(void *, float, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2);
OUTPUT:
	RETVAL

int
nci_ipfp( c_func, p0, f1, p2 )
	SV* c_func
	void * p0
	float f1
	void * p2
PREINIT:
	int(*func)(void *, float, void *);
CODE:
	func   = INT2PTR(int(*)(void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2);
OUTPUT:
	RETVAL

void *
nci_pvfp( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvfp( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvfp( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svfp( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvfp( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvfp( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivfp( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdfp( c_func, d0, f1, p2 )
	SV* c_func
	double d0
	float f1
	void * p2
PREINIT:
	void *(*func)(double, float, void *);
CODE:
	func   = INT2PTR(void *(*)(double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2);
OUTPUT:
	RETVAL

void
nci_vdfp( c_func, d0, f1, p2 )
	SV* c_func
	double d0
	float f1
	void * p2
PREINIT:
	void(*func)(double, float, void *);
CODE:
	func   = INT2PTR(void(*)(double, float, void *), SvIV(c_func) );
	(*func)(d0, f1, p2);

double
nci_ddfp( c_func, d0, f1, p2 )
	SV* c_func
	double d0
	float f1
	void * p2
PREINIT:
	double(*func)(double, float, void *);
CODE:
	func   = INT2PTR(double(*)(double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2);
OUTPUT:
	RETVAL

short
nci_sdfp( c_func, d0, f1, p2 )
	SV* c_func
	double d0
	float f1
	void * p2
PREINIT:
	short(*func)(double, float, void *);
CODE:
	func   = INT2PTR(short(*)(double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2);
OUTPUT:
	RETVAL

float
nci_fdfp( c_func, d0, f1, p2 )
	SV* c_func
	double d0
	float f1
	void * p2
PREINIT:
	float(*func)(double, float, void *);
CODE:
	func   = INT2PTR(float(*)(double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2);
OUTPUT:
	RETVAL

char *
nci_tdfp( c_func, d0, f1, p2 )
	SV* c_func
	double d0
	float f1
	void * p2
PREINIT:
	char *(*func)(double, float, void *);
CODE:
	func   = INT2PTR(char *(*)(double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2);
OUTPUT:
	RETVAL

int
nci_idfp( c_func, d0, f1, p2 )
	SV* c_func
	double d0
	float f1
	void * p2
PREINIT:
	int(*func)(double, float, void *);
CODE:
	func   = INT2PTR(int(*)(double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2);
OUTPUT:
	RETVAL

void *
nci_psfp( c_func, s0, f1, p2 )
	SV* c_func
	short s0
	float f1
	void * p2
PREINIT:
	void *(*func)(short, float, void *);
CODE:
	func   = INT2PTR(void *(*)(short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2);
OUTPUT:
	RETVAL

void
nci_vsfp( c_func, s0, f1, p2 )
	SV* c_func
	short s0
	float f1
	void * p2
PREINIT:
	void(*func)(short, float, void *);
CODE:
	func   = INT2PTR(void(*)(short, float, void *), SvIV(c_func) );
	(*func)(s0, f1, p2);

double
nci_dsfp( c_func, s0, f1, p2 )
	SV* c_func
	short s0
	float f1
	void * p2
PREINIT:
	double(*func)(short, float, void *);
CODE:
	func   = INT2PTR(double(*)(short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2);
OUTPUT:
	RETVAL

short
nci_ssfp( c_func, s0, f1, p2 )
	SV* c_func
	short s0
	float f1
	void * p2
PREINIT:
	short(*func)(short, float, void *);
CODE:
	func   = INT2PTR(short(*)(short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2);
OUTPUT:
	RETVAL

float
nci_fsfp( c_func, s0, f1, p2 )
	SV* c_func
	short s0
	float f1
	void * p2
PREINIT:
	float(*func)(short, float, void *);
CODE:
	func   = INT2PTR(float(*)(short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2);
OUTPUT:
	RETVAL

char *
nci_tsfp( c_func, s0, f1, p2 )
	SV* c_func
	short s0
	float f1
	void * p2
PREINIT:
	char *(*func)(short, float, void *);
CODE:
	func   = INT2PTR(char *(*)(short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2);
OUTPUT:
	RETVAL

int
nci_isfp( c_func, s0, f1, p2 )
	SV* c_func
	short s0
	float f1
	void * p2
PREINIT:
	int(*func)(short, float, void *);
CODE:
	func   = INT2PTR(int(*)(short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2);
OUTPUT:
	RETVAL

void *
nci_pffp( c_func, f0, f1, p2 )
	SV* c_func
	float f0
	float f1
	void * p2
PREINIT:
	void *(*func)(float, float, void *);
CODE:
	func   = INT2PTR(void *(*)(float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2);
OUTPUT:
	RETVAL

void
nci_vffp( c_func, f0, f1, p2 )
	SV* c_func
	float f0
	float f1
	void * p2
PREINIT:
	void(*func)(float, float, void *);
CODE:
	func   = INT2PTR(void(*)(float, float, void *), SvIV(c_func) );
	(*func)(f0, f1, p2);

double
nci_dffp( c_func, f0, f1, p2 )
	SV* c_func
	float f0
	float f1
	void * p2
PREINIT:
	double(*func)(float, float, void *);
CODE:
	func   = INT2PTR(double(*)(float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2);
OUTPUT:
	RETVAL

short
nci_sffp( c_func, f0, f1, p2 )
	SV* c_func
	float f0
	float f1
	void * p2
PREINIT:
	short(*func)(float, float, void *);
CODE:
	func   = INT2PTR(short(*)(float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2);
OUTPUT:
	RETVAL

float
nci_fffp( c_func, f0, f1, p2 )
	SV* c_func
	float f0
	float f1
	void * p2
PREINIT:
	float(*func)(float, float, void *);
CODE:
	func   = INT2PTR(float(*)(float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2);
OUTPUT:
	RETVAL

char *
nci_tffp( c_func, f0, f1, p2 )
	SV* c_func
	float f0
	float f1
	void * p2
PREINIT:
	char *(*func)(float, float, void *);
CODE:
	func   = INT2PTR(char *(*)(float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2);
OUTPUT:
	RETVAL

int
nci_iffp( c_func, f0, f1, p2 )
	SV* c_func
	float f0
	float f1
	void * p2
PREINIT:
	int(*func)(float, float, void *);
CODE:
	func   = INT2PTR(int(*)(float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2);
OUTPUT:
	RETVAL

void *
nci_ptfp( c_func, t0, f1, p2 )
	SV* c_func
	char * t0
	float f1
	void * p2
PREINIT:
	void *(*func)(char *, float, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2);
OUTPUT:
	RETVAL

void
nci_vtfp( c_func, t0, f1, p2 )
	SV* c_func
	char * t0
	float f1
	void * p2
PREINIT:
	void(*func)(char *, float, void *);
CODE:
	func   = INT2PTR(void(*)(char *, float, void *), SvIV(c_func) );
	(*func)(t0, f1, p2);

double
nci_dtfp( c_func, t0, f1, p2 )
	SV* c_func
	char * t0
	float f1
	void * p2
PREINIT:
	double(*func)(char *, float, void *);
CODE:
	func   = INT2PTR(double(*)(char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2);
OUTPUT:
	RETVAL

short
nci_stfp( c_func, t0, f1, p2 )
	SV* c_func
	char * t0
	float f1
	void * p2
PREINIT:
	short(*func)(char *, float, void *);
CODE:
	func   = INT2PTR(short(*)(char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2);
OUTPUT:
	RETVAL

float
nci_ftfp( c_func, t0, f1, p2 )
	SV* c_func
	char * t0
	float f1
	void * p2
PREINIT:
	float(*func)(char *, float, void *);
CODE:
	func   = INT2PTR(float(*)(char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2);
OUTPUT:
	RETVAL

char *
nci_ttfp( c_func, t0, f1, p2 )
	SV* c_func
	char * t0
	float f1
	void * p2
PREINIT:
	char *(*func)(char *, float, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2);
OUTPUT:
	RETVAL

int
nci_itfp( c_func, t0, f1, p2 )
	SV* c_func
	char * t0
	float f1
	void * p2
PREINIT:
	int(*func)(char *, float, void *);
CODE:
	func   = INT2PTR(int(*)(char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2);
OUTPUT:
	RETVAL

void *
nci_pifp( c_func, i0, f1, p2 )
	SV* c_func
	int i0
	float f1
	void * p2
PREINIT:
	void *(*func)(int, float, void *);
CODE:
	func   = INT2PTR(void *(*)(int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2);
OUTPUT:
	RETVAL

void
nci_vifp( c_func, i0, f1, p2 )
	SV* c_func
	int i0
	float f1
	void * p2
PREINIT:
	void(*func)(int, float, void *);
CODE:
	func   = INT2PTR(void(*)(int, float, void *), SvIV(c_func) );
	(*func)(i0, f1, p2);

double
nci_difp( c_func, i0, f1, p2 )
	SV* c_func
	int i0
	float f1
	void * p2
PREINIT:
	double(*func)(int, float, void *);
CODE:
	func   = INT2PTR(double(*)(int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2);
OUTPUT:
	RETVAL

short
nci_sifp( c_func, i0, f1, p2 )
	SV* c_func
	int i0
	float f1
	void * p2
PREINIT:
	short(*func)(int, float, void *);
CODE:
	func   = INT2PTR(short(*)(int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2);
OUTPUT:
	RETVAL

float
nci_fifp( c_func, i0, f1, p2 )
	SV* c_func
	int i0
	float f1
	void * p2
PREINIT:
	float(*func)(int, float, void *);
CODE:
	func   = INT2PTR(float(*)(int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2);
OUTPUT:
	RETVAL

char *
nci_tifp( c_func, i0, f1, p2 )
	SV* c_func
	int i0
	float f1
	void * p2
PREINIT:
	char *(*func)(int, float, void *);
CODE:
	func   = INT2PTR(char *(*)(int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2);
OUTPUT:
	RETVAL

int
nci_iifp( c_func, i0, f1, p2 )
	SV* c_func
	int i0
	float f1
	void * p2
PREINIT:
	int(*func)(int, float, void *);
CODE:
	func   = INT2PTR(int(*)(int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2);
OUTPUT:
	RETVAL

void *
nci_pptp( c_func, p0, t1, p2 )
	SV* c_func
	void * p0
	char * t1
	void * p2
PREINIT:
	void *(*func)(void *, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2);
OUTPUT:
	RETVAL

void
nci_vptp( c_func, p0, t1, p2 )
	SV* c_func
	void * p0
	char * t1
	void * p2
PREINIT:
	void(*func)(void *, char *, void *);
CODE:
	func   = INT2PTR(void(*)(void *, char *, void *), SvIV(c_func) );
	(*func)(p0, t1, p2);

double
nci_dptp( c_func, p0, t1, p2 )
	SV* c_func
	void * p0
	char * t1
	void * p2
PREINIT:
	double(*func)(void *, char *, void *);
CODE:
	func   = INT2PTR(double(*)(void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2);
OUTPUT:
	RETVAL

short
nci_sptp( c_func, p0, t1, p2 )
	SV* c_func
	void * p0
	char * t1
	void * p2
PREINIT:
	short(*func)(void *, char *, void *);
CODE:
	func   = INT2PTR(short(*)(void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2);
OUTPUT:
	RETVAL

float
nci_fptp( c_func, p0, t1, p2 )
	SV* c_func
	void * p0
	char * t1
	void * p2
PREINIT:
	float(*func)(void *, char *, void *);
CODE:
	func   = INT2PTR(float(*)(void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2);
OUTPUT:
	RETVAL

char *
nci_tptp( c_func, p0, t1, p2 )
	SV* c_func
	void * p0
	char * t1
	void * p2
PREINIT:
	char *(*func)(void *, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2);
OUTPUT:
	RETVAL

int
nci_iptp( c_func, p0, t1, p2 )
	SV* c_func
	void * p0
	char * t1
	void * p2
PREINIT:
	int(*func)(void *, char *, void *);
CODE:
	func   = INT2PTR(int(*)(void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2);
OUTPUT:
	RETVAL

void *
nci_pvtp( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvtp( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvtp( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svtp( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvtp( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvtp( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivtp( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdtp( c_func, d0, t1, p2 )
	SV* c_func
	double d0
	char * t1
	void * p2
PREINIT:
	void *(*func)(double, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2);
OUTPUT:
	RETVAL

void
nci_vdtp( c_func, d0, t1, p2 )
	SV* c_func
	double d0
	char * t1
	void * p2
PREINIT:
	void(*func)(double, char *, void *);
CODE:
	func   = INT2PTR(void(*)(double, char *, void *), SvIV(c_func) );
	(*func)(d0, t1, p2);

double
nci_ddtp( c_func, d0, t1, p2 )
	SV* c_func
	double d0
	char * t1
	void * p2
PREINIT:
	double(*func)(double, char *, void *);
CODE:
	func   = INT2PTR(double(*)(double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2);
OUTPUT:
	RETVAL

short
nci_sdtp( c_func, d0, t1, p2 )
	SV* c_func
	double d0
	char * t1
	void * p2
PREINIT:
	short(*func)(double, char *, void *);
CODE:
	func   = INT2PTR(short(*)(double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2);
OUTPUT:
	RETVAL

float
nci_fdtp( c_func, d0, t1, p2 )
	SV* c_func
	double d0
	char * t1
	void * p2
PREINIT:
	float(*func)(double, char *, void *);
CODE:
	func   = INT2PTR(float(*)(double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2);
OUTPUT:
	RETVAL

char *
nci_tdtp( c_func, d0, t1, p2 )
	SV* c_func
	double d0
	char * t1
	void * p2
PREINIT:
	char *(*func)(double, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2);
OUTPUT:
	RETVAL

int
nci_idtp( c_func, d0, t1, p2 )
	SV* c_func
	double d0
	char * t1
	void * p2
PREINIT:
	int(*func)(double, char *, void *);
CODE:
	func   = INT2PTR(int(*)(double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2);
OUTPUT:
	RETVAL

void *
nci_pstp( c_func, s0, t1, p2 )
	SV* c_func
	short s0
	char * t1
	void * p2
PREINIT:
	void *(*func)(short, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2);
OUTPUT:
	RETVAL

void
nci_vstp( c_func, s0, t1, p2 )
	SV* c_func
	short s0
	char * t1
	void * p2
PREINIT:
	void(*func)(short, char *, void *);
CODE:
	func   = INT2PTR(void(*)(short, char *, void *), SvIV(c_func) );
	(*func)(s0, t1, p2);

double
nci_dstp( c_func, s0, t1, p2 )
	SV* c_func
	short s0
	char * t1
	void * p2
PREINIT:
	double(*func)(short, char *, void *);
CODE:
	func   = INT2PTR(double(*)(short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2);
OUTPUT:
	RETVAL

short
nci_sstp( c_func, s0, t1, p2 )
	SV* c_func
	short s0
	char * t1
	void * p2
PREINIT:
	short(*func)(short, char *, void *);
CODE:
	func   = INT2PTR(short(*)(short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2);
OUTPUT:
	RETVAL

float
nci_fstp( c_func, s0, t1, p2 )
	SV* c_func
	short s0
	char * t1
	void * p2
PREINIT:
	float(*func)(short, char *, void *);
CODE:
	func   = INT2PTR(float(*)(short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2);
OUTPUT:
	RETVAL

char *
nci_tstp( c_func, s0, t1, p2 )
	SV* c_func
	short s0
	char * t1
	void * p2
PREINIT:
	char *(*func)(short, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2);
OUTPUT:
	RETVAL

int
nci_istp( c_func, s0, t1, p2 )
	SV* c_func
	short s0
	char * t1
	void * p2
PREINIT:
	int(*func)(short, char *, void *);
CODE:
	func   = INT2PTR(int(*)(short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2);
OUTPUT:
	RETVAL

void *
nci_pftp( c_func, f0, t1, p2 )
	SV* c_func
	float f0
	char * t1
	void * p2
PREINIT:
	void *(*func)(float, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2);
OUTPUT:
	RETVAL

void
nci_vftp( c_func, f0, t1, p2 )
	SV* c_func
	float f0
	char * t1
	void * p2
PREINIT:
	void(*func)(float, char *, void *);
CODE:
	func   = INT2PTR(void(*)(float, char *, void *), SvIV(c_func) );
	(*func)(f0, t1, p2);

double
nci_dftp( c_func, f0, t1, p2 )
	SV* c_func
	float f0
	char * t1
	void * p2
PREINIT:
	double(*func)(float, char *, void *);
CODE:
	func   = INT2PTR(double(*)(float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2);
OUTPUT:
	RETVAL

short
nci_sftp( c_func, f0, t1, p2 )
	SV* c_func
	float f0
	char * t1
	void * p2
PREINIT:
	short(*func)(float, char *, void *);
CODE:
	func   = INT2PTR(short(*)(float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2);
OUTPUT:
	RETVAL

float
nci_fftp( c_func, f0, t1, p2 )
	SV* c_func
	float f0
	char * t1
	void * p2
PREINIT:
	float(*func)(float, char *, void *);
CODE:
	func   = INT2PTR(float(*)(float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2);
OUTPUT:
	RETVAL

char *
nci_tftp( c_func, f0, t1, p2 )
	SV* c_func
	float f0
	char * t1
	void * p2
PREINIT:
	char *(*func)(float, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2);
OUTPUT:
	RETVAL

int
nci_iftp( c_func, f0, t1, p2 )
	SV* c_func
	float f0
	char * t1
	void * p2
PREINIT:
	int(*func)(float, char *, void *);
CODE:
	func   = INT2PTR(int(*)(float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2);
OUTPUT:
	RETVAL

void *
nci_pttp( c_func, t0, t1, p2 )
	SV* c_func
	char * t0
	char * t1
	void * p2
PREINIT:
	void *(*func)(char *, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2);
OUTPUT:
	RETVAL

void
nci_vttp( c_func, t0, t1, p2 )
	SV* c_func
	char * t0
	char * t1
	void * p2
PREINIT:
	void(*func)(char *, char *, void *);
CODE:
	func   = INT2PTR(void(*)(char *, char *, void *), SvIV(c_func) );
	(*func)(t0, t1, p2);

double
nci_dttp( c_func, t0, t1, p2 )
	SV* c_func
	char * t0
	char * t1
	void * p2
PREINIT:
	double(*func)(char *, char *, void *);
CODE:
	func   = INT2PTR(double(*)(char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2);
OUTPUT:
	RETVAL

short
nci_sttp( c_func, t0, t1, p2 )
	SV* c_func
	char * t0
	char * t1
	void * p2
PREINIT:
	short(*func)(char *, char *, void *);
CODE:
	func   = INT2PTR(short(*)(char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2);
OUTPUT:
	RETVAL

float
nci_fttp( c_func, t0, t1, p2 )
	SV* c_func
	char * t0
	char * t1
	void * p2
PREINIT:
	float(*func)(char *, char *, void *);
CODE:
	func   = INT2PTR(float(*)(char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2);
OUTPUT:
	RETVAL

char *
nci_tttp( c_func, t0, t1, p2 )
	SV* c_func
	char * t0
	char * t1
	void * p2
PREINIT:
	char *(*func)(char *, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2);
OUTPUT:
	RETVAL

int
nci_ittp( c_func, t0, t1, p2 )
	SV* c_func
	char * t0
	char * t1
	void * p2
PREINIT:
	int(*func)(char *, char *, void *);
CODE:
	func   = INT2PTR(int(*)(char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2);
OUTPUT:
	RETVAL

void *
nci_pitp( c_func, i0, t1, p2 )
	SV* c_func
	int i0
	char * t1
	void * p2
PREINIT:
	void *(*func)(int, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2);
OUTPUT:
	RETVAL

void
nci_vitp( c_func, i0, t1, p2 )
	SV* c_func
	int i0
	char * t1
	void * p2
PREINIT:
	void(*func)(int, char *, void *);
CODE:
	func   = INT2PTR(void(*)(int, char *, void *), SvIV(c_func) );
	(*func)(i0, t1, p2);

double
nci_ditp( c_func, i0, t1, p2 )
	SV* c_func
	int i0
	char * t1
	void * p2
PREINIT:
	double(*func)(int, char *, void *);
CODE:
	func   = INT2PTR(double(*)(int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2);
OUTPUT:
	RETVAL

short
nci_sitp( c_func, i0, t1, p2 )
	SV* c_func
	int i0
	char * t1
	void * p2
PREINIT:
	short(*func)(int, char *, void *);
CODE:
	func   = INT2PTR(short(*)(int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2);
OUTPUT:
	RETVAL

float
nci_fitp( c_func, i0, t1, p2 )
	SV* c_func
	int i0
	char * t1
	void * p2
PREINIT:
	float(*func)(int, char *, void *);
CODE:
	func   = INT2PTR(float(*)(int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2);
OUTPUT:
	RETVAL

char *
nci_titp( c_func, i0, t1, p2 )
	SV* c_func
	int i0
	char * t1
	void * p2
PREINIT:
	char *(*func)(int, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2);
OUTPUT:
	RETVAL

int
nci_iitp( c_func, i0, t1, p2 )
	SV* c_func
	int i0
	char * t1
	void * p2
PREINIT:
	int(*func)(int, char *, void *);
CODE:
	func   = INT2PTR(int(*)(int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2);
OUTPUT:
	RETVAL

void *
nci_ppip( c_func, p0, i1, p2 )
	SV* c_func
	void * p0
	int i1
	void * p2
PREINIT:
	void *(*func)(void *, int, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2);
OUTPUT:
	RETVAL

void
nci_vpip( c_func, p0, i1, p2 )
	SV* c_func
	void * p0
	int i1
	void * p2
PREINIT:
	void(*func)(void *, int, void *);
CODE:
	func   = INT2PTR(void(*)(void *, int, void *), SvIV(c_func) );
	(*func)(p0, i1, p2);

double
nci_dpip( c_func, p0, i1, p2 )
	SV* c_func
	void * p0
	int i1
	void * p2
PREINIT:
	double(*func)(void *, int, void *);
CODE:
	func   = INT2PTR(double(*)(void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2);
OUTPUT:
	RETVAL

short
nci_spip( c_func, p0, i1, p2 )
	SV* c_func
	void * p0
	int i1
	void * p2
PREINIT:
	short(*func)(void *, int, void *);
CODE:
	func   = INT2PTR(short(*)(void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2);
OUTPUT:
	RETVAL

float
nci_fpip( c_func, p0, i1, p2 )
	SV* c_func
	void * p0
	int i1
	void * p2
PREINIT:
	float(*func)(void *, int, void *);
CODE:
	func   = INT2PTR(float(*)(void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2);
OUTPUT:
	RETVAL

char *
nci_tpip( c_func, p0, i1, p2 )
	SV* c_func
	void * p0
	int i1
	void * p2
PREINIT:
	char *(*func)(void *, int, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2);
OUTPUT:
	RETVAL

int
nci_ipip( c_func, p0, i1, p2 )
	SV* c_func
	void * p0
	int i1
	void * p2
PREINIT:
	int(*func)(void *, int, void *);
CODE:
	func   = INT2PTR(int(*)(void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2);
OUTPUT:
	RETVAL

void *
nci_pvip( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvip( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvip( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svip( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvip( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvip( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivip( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdip( c_func, d0, i1, p2 )
	SV* c_func
	double d0
	int i1
	void * p2
PREINIT:
	void *(*func)(double, int, void *);
CODE:
	func   = INT2PTR(void *(*)(double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2);
OUTPUT:
	RETVAL

void
nci_vdip( c_func, d0, i1, p2 )
	SV* c_func
	double d0
	int i1
	void * p2
PREINIT:
	void(*func)(double, int, void *);
CODE:
	func   = INT2PTR(void(*)(double, int, void *), SvIV(c_func) );
	(*func)(d0, i1, p2);

double
nci_ddip( c_func, d0, i1, p2 )
	SV* c_func
	double d0
	int i1
	void * p2
PREINIT:
	double(*func)(double, int, void *);
CODE:
	func   = INT2PTR(double(*)(double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2);
OUTPUT:
	RETVAL

short
nci_sdip( c_func, d0, i1, p2 )
	SV* c_func
	double d0
	int i1
	void * p2
PREINIT:
	short(*func)(double, int, void *);
CODE:
	func   = INT2PTR(short(*)(double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2);
OUTPUT:
	RETVAL

float
nci_fdip( c_func, d0, i1, p2 )
	SV* c_func
	double d0
	int i1
	void * p2
PREINIT:
	float(*func)(double, int, void *);
CODE:
	func   = INT2PTR(float(*)(double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2);
OUTPUT:
	RETVAL

char *
nci_tdip( c_func, d0, i1, p2 )
	SV* c_func
	double d0
	int i1
	void * p2
PREINIT:
	char *(*func)(double, int, void *);
CODE:
	func   = INT2PTR(char *(*)(double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2);
OUTPUT:
	RETVAL

int
nci_idip( c_func, d0, i1, p2 )
	SV* c_func
	double d0
	int i1
	void * p2
PREINIT:
	int(*func)(double, int, void *);
CODE:
	func   = INT2PTR(int(*)(double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2);
OUTPUT:
	RETVAL

void *
nci_psip( c_func, s0, i1, p2 )
	SV* c_func
	short s0
	int i1
	void * p2
PREINIT:
	void *(*func)(short, int, void *);
CODE:
	func   = INT2PTR(void *(*)(short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2);
OUTPUT:
	RETVAL

void
nci_vsip( c_func, s0, i1, p2 )
	SV* c_func
	short s0
	int i1
	void * p2
PREINIT:
	void(*func)(short, int, void *);
CODE:
	func   = INT2PTR(void(*)(short, int, void *), SvIV(c_func) );
	(*func)(s0, i1, p2);

double
nci_dsip( c_func, s0, i1, p2 )
	SV* c_func
	short s0
	int i1
	void * p2
PREINIT:
	double(*func)(short, int, void *);
CODE:
	func   = INT2PTR(double(*)(short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2);
OUTPUT:
	RETVAL

short
nci_ssip( c_func, s0, i1, p2 )
	SV* c_func
	short s0
	int i1
	void * p2
PREINIT:
	short(*func)(short, int, void *);
CODE:
	func   = INT2PTR(short(*)(short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2);
OUTPUT:
	RETVAL

float
nci_fsip( c_func, s0, i1, p2 )
	SV* c_func
	short s0
	int i1
	void * p2
PREINIT:
	float(*func)(short, int, void *);
CODE:
	func   = INT2PTR(float(*)(short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2);
OUTPUT:
	RETVAL

char *
nci_tsip( c_func, s0, i1, p2 )
	SV* c_func
	short s0
	int i1
	void * p2
PREINIT:
	char *(*func)(short, int, void *);
CODE:
	func   = INT2PTR(char *(*)(short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2);
OUTPUT:
	RETVAL

int
nci_isip( c_func, s0, i1, p2 )
	SV* c_func
	short s0
	int i1
	void * p2
PREINIT:
	int(*func)(short, int, void *);
CODE:
	func   = INT2PTR(int(*)(short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2);
OUTPUT:
	RETVAL

void *
nci_pfip( c_func, f0, i1, p2 )
	SV* c_func
	float f0
	int i1
	void * p2
PREINIT:
	void *(*func)(float, int, void *);
CODE:
	func   = INT2PTR(void *(*)(float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2);
OUTPUT:
	RETVAL

void
nci_vfip( c_func, f0, i1, p2 )
	SV* c_func
	float f0
	int i1
	void * p2
PREINIT:
	void(*func)(float, int, void *);
CODE:
	func   = INT2PTR(void(*)(float, int, void *), SvIV(c_func) );
	(*func)(f0, i1, p2);

double
nci_dfip( c_func, f0, i1, p2 )
	SV* c_func
	float f0
	int i1
	void * p2
PREINIT:
	double(*func)(float, int, void *);
CODE:
	func   = INT2PTR(double(*)(float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2);
OUTPUT:
	RETVAL

short
nci_sfip( c_func, f0, i1, p2 )
	SV* c_func
	float f0
	int i1
	void * p2
PREINIT:
	short(*func)(float, int, void *);
CODE:
	func   = INT2PTR(short(*)(float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2);
OUTPUT:
	RETVAL

float
nci_ffip( c_func, f0, i1, p2 )
	SV* c_func
	float f0
	int i1
	void * p2
PREINIT:
	float(*func)(float, int, void *);
CODE:
	func   = INT2PTR(float(*)(float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2);
OUTPUT:
	RETVAL

char *
nci_tfip( c_func, f0, i1, p2 )
	SV* c_func
	float f0
	int i1
	void * p2
PREINIT:
	char *(*func)(float, int, void *);
CODE:
	func   = INT2PTR(char *(*)(float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2);
OUTPUT:
	RETVAL

int
nci_ifip( c_func, f0, i1, p2 )
	SV* c_func
	float f0
	int i1
	void * p2
PREINIT:
	int(*func)(float, int, void *);
CODE:
	func   = INT2PTR(int(*)(float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2);
OUTPUT:
	RETVAL

void *
nci_ptip( c_func, t0, i1, p2 )
	SV* c_func
	char * t0
	int i1
	void * p2
PREINIT:
	void *(*func)(char *, int, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2);
OUTPUT:
	RETVAL

void
nci_vtip( c_func, t0, i1, p2 )
	SV* c_func
	char * t0
	int i1
	void * p2
PREINIT:
	void(*func)(char *, int, void *);
CODE:
	func   = INT2PTR(void(*)(char *, int, void *), SvIV(c_func) );
	(*func)(t0, i1, p2);

double
nci_dtip( c_func, t0, i1, p2 )
	SV* c_func
	char * t0
	int i1
	void * p2
PREINIT:
	double(*func)(char *, int, void *);
CODE:
	func   = INT2PTR(double(*)(char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2);
OUTPUT:
	RETVAL

short
nci_stip( c_func, t0, i1, p2 )
	SV* c_func
	char * t0
	int i1
	void * p2
PREINIT:
	short(*func)(char *, int, void *);
CODE:
	func   = INT2PTR(short(*)(char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2);
OUTPUT:
	RETVAL

float
nci_ftip( c_func, t0, i1, p2 )
	SV* c_func
	char * t0
	int i1
	void * p2
PREINIT:
	float(*func)(char *, int, void *);
CODE:
	func   = INT2PTR(float(*)(char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2);
OUTPUT:
	RETVAL

char *
nci_ttip( c_func, t0, i1, p2 )
	SV* c_func
	char * t0
	int i1
	void * p2
PREINIT:
	char *(*func)(char *, int, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2);
OUTPUT:
	RETVAL

int
nci_itip( c_func, t0, i1, p2 )
	SV* c_func
	char * t0
	int i1
	void * p2
PREINIT:
	int(*func)(char *, int, void *);
CODE:
	func   = INT2PTR(int(*)(char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2);
OUTPUT:
	RETVAL

void *
nci_piip( c_func, i0, i1, p2 )
	SV* c_func
	int i0
	int i1
	void * p2
PREINIT:
	void *(*func)(int, int, void *);
CODE:
	func   = INT2PTR(void *(*)(int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2);
OUTPUT:
	RETVAL

void
nci_viip( c_func, i0, i1, p2 )
	SV* c_func
	int i0
	int i1
	void * p2
PREINIT:
	void(*func)(int, int, void *);
CODE:
	func   = INT2PTR(void(*)(int, int, void *), SvIV(c_func) );
	(*func)(i0, i1, p2);

double
nci_diip( c_func, i0, i1, p2 )
	SV* c_func
	int i0
	int i1
	void * p2
PREINIT:
	double(*func)(int, int, void *);
CODE:
	func   = INT2PTR(double(*)(int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2);
OUTPUT:
	RETVAL

short
nci_siip( c_func, i0, i1, p2 )
	SV* c_func
	int i0
	int i1
	void * p2
PREINIT:
	short(*func)(int, int, void *);
CODE:
	func   = INT2PTR(short(*)(int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2);
OUTPUT:
	RETVAL

float
nci_fiip( c_func, i0, i1, p2 )
	SV* c_func
	int i0
	int i1
	void * p2
PREINIT:
	float(*func)(int, int, void *);
CODE:
	func   = INT2PTR(float(*)(int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2);
OUTPUT:
	RETVAL

char *
nci_tiip( c_func, i0, i1, p2 )
	SV* c_func
	int i0
	int i1
	void * p2
PREINIT:
	char *(*func)(int, int, void *);
CODE:
	func   = INT2PTR(char *(*)(int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2);
OUTPUT:
	RETVAL

int
nci_iiip( c_func, i0, i1, p2 )
	SV* c_func
	int i0
	int i1
	void * p2
PREINIT:
	int(*func)(int, int, void *);
CODE:
	func   = INT2PTR(int(*)(int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2);
OUTPUT:
	RETVAL

void *
nci_pppd( c_func, p0, p1, d2 )
	SV* c_func
	void * p0
	void * p1
	double d2
PREINIT:
	void *(*func)(void *, void *, double);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2);
OUTPUT:
	RETVAL

void
nci_vppd( c_func, p0, p1, d2 )
	SV* c_func
	void * p0
	void * p1
	double d2
PREINIT:
	void(*func)(void *, void *, double);
CODE:
	func   = INT2PTR(void(*)(void *, void *, double), SvIV(c_func) );
	(*func)(p0, p1, d2);

double
nci_dppd( c_func, p0, p1, d2 )
	SV* c_func
	void * p0
	void * p1
	double d2
PREINIT:
	double(*func)(void *, void *, double);
CODE:
	func   = INT2PTR(double(*)(void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2);
OUTPUT:
	RETVAL

short
nci_sppd( c_func, p0, p1, d2 )
	SV* c_func
	void * p0
	void * p1
	double d2
PREINIT:
	short(*func)(void *, void *, double);
CODE:
	func   = INT2PTR(short(*)(void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2);
OUTPUT:
	RETVAL

float
nci_fppd( c_func, p0, p1, d2 )
	SV* c_func
	void * p0
	void * p1
	double d2
PREINIT:
	float(*func)(void *, void *, double);
CODE:
	func   = INT2PTR(float(*)(void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2);
OUTPUT:
	RETVAL

char *
nci_tppd( c_func, p0, p1, d2 )
	SV* c_func
	void * p0
	void * p1
	double d2
PREINIT:
	char *(*func)(void *, void *, double);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2);
OUTPUT:
	RETVAL

int
nci_ippd( c_func, p0, p1, d2 )
	SV* c_func
	void * p0
	void * p1
	double d2
PREINIT:
	int(*func)(void *, void *, double);
CODE:
	func   = INT2PTR(int(*)(void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2);
OUTPUT:
	RETVAL

void *
nci_pvpd( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvpd( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvpd( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svpd( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvpd( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvpd( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivpd( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdpd( c_func, d0, p1, d2 )
	SV* c_func
	double d0
	void * p1
	double d2
PREINIT:
	void *(*func)(double, void *, double);
CODE:
	func   = INT2PTR(void *(*)(double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2);
OUTPUT:
	RETVAL

void
nci_vdpd( c_func, d0, p1, d2 )
	SV* c_func
	double d0
	void * p1
	double d2
PREINIT:
	void(*func)(double, void *, double);
CODE:
	func   = INT2PTR(void(*)(double, void *, double), SvIV(c_func) );
	(*func)(d0, p1, d2);

double
nci_ddpd( c_func, d0, p1, d2 )
	SV* c_func
	double d0
	void * p1
	double d2
PREINIT:
	double(*func)(double, void *, double);
CODE:
	func   = INT2PTR(double(*)(double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2);
OUTPUT:
	RETVAL

short
nci_sdpd( c_func, d0, p1, d2 )
	SV* c_func
	double d0
	void * p1
	double d2
PREINIT:
	short(*func)(double, void *, double);
CODE:
	func   = INT2PTR(short(*)(double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2);
OUTPUT:
	RETVAL

float
nci_fdpd( c_func, d0, p1, d2 )
	SV* c_func
	double d0
	void * p1
	double d2
PREINIT:
	float(*func)(double, void *, double);
CODE:
	func   = INT2PTR(float(*)(double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2);
OUTPUT:
	RETVAL

char *
nci_tdpd( c_func, d0, p1, d2 )
	SV* c_func
	double d0
	void * p1
	double d2
PREINIT:
	char *(*func)(double, void *, double);
CODE:
	func   = INT2PTR(char *(*)(double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2);
OUTPUT:
	RETVAL

int
nci_idpd( c_func, d0, p1, d2 )
	SV* c_func
	double d0
	void * p1
	double d2
PREINIT:
	int(*func)(double, void *, double);
CODE:
	func   = INT2PTR(int(*)(double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2);
OUTPUT:
	RETVAL

void *
nci_pspd( c_func, s0, p1, d2 )
	SV* c_func
	short s0
	void * p1
	double d2
PREINIT:
	void *(*func)(short, void *, double);
CODE:
	func   = INT2PTR(void *(*)(short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2);
OUTPUT:
	RETVAL

void
nci_vspd( c_func, s0, p1, d2 )
	SV* c_func
	short s0
	void * p1
	double d2
PREINIT:
	void(*func)(short, void *, double);
CODE:
	func   = INT2PTR(void(*)(short, void *, double), SvIV(c_func) );
	(*func)(s0, p1, d2);

double
nci_dspd( c_func, s0, p1, d2 )
	SV* c_func
	short s0
	void * p1
	double d2
PREINIT:
	double(*func)(short, void *, double);
CODE:
	func   = INT2PTR(double(*)(short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2);
OUTPUT:
	RETVAL

short
nci_sspd( c_func, s0, p1, d2 )
	SV* c_func
	short s0
	void * p1
	double d2
PREINIT:
	short(*func)(short, void *, double);
CODE:
	func   = INT2PTR(short(*)(short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2);
OUTPUT:
	RETVAL

float
nci_fspd( c_func, s0, p1, d2 )
	SV* c_func
	short s0
	void * p1
	double d2
PREINIT:
	float(*func)(short, void *, double);
CODE:
	func   = INT2PTR(float(*)(short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2);
OUTPUT:
	RETVAL

char *
nci_tspd( c_func, s0, p1, d2 )
	SV* c_func
	short s0
	void * p1
	double d2
PREINIT:
	char *(*func)(short, void *, double);
CODE:
	func   = INT2PTR(char *(*)(short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2);
OUTPUT:
	RETVAL

int
nci_ispd( c_func, s0, p1, d2 )
	SV* c_func
	short s0
	void * p1
	double d2
PREINIT:
	int(*func)(short, void *, double);
CODE:
	func   = INT2PTR(int(*)(short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2);
OUTPUT:
	RETVAL

void *
nci_pfpd( c_func, f0, p1, d2 )
	SV* c_func
	float f0
	void * p1
	double d2
PREINIT:
	void *(*func)(float, void *, double);
CODE:
	func   = INT2PTR(void *(*)(float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2);
OUTPUT:
	RETVAL

void
nci_vfpd( c_func, f0, p1, d2 )
	SV* c_func
	float f0
	void * p1
	double d2
PREINIT:
	void(*func)(float, void *, double);
CODE:
	func   = INT2PTR(void(*)(float, void *, double), SvIV(c_func) );
	(*func)(f0, p1, d2);

double
nci_dfpd( c_func, f0, p1, d2 )
	SV* c_func
	float f0
	void * p1
	double d2
PREINIT:
	double(*func)(float, void *, double);
CODE:
	func   = INT2PTR(double(*)(float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2);
OUTPUT:
	RETVAL

short
nci_sfpd( c_func, f0, p1, d2 )
	SV* c_func
	float f0
	void * p1
	double d2
PREINIT:
	short(*func)(float, void *, double);
CODE:
	func   = INT2PTR(short(*)(float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2);
OUTPUT:
	RETVAL

float
nci_ffpd( c_func, f0, p1, d2 )
	SV* c_func
	float f0
	void * p1
	double d2
PREINIT:
	float(*func)(float, void *, double);
CODE:
	func   = INT2PTR(float(*)(float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2);
OUTPUT:
	RETVAL

char *
nci_tfpd( c_func, f0, p1, d2 )
	SV* c_func
	float f0
	void * p1
	double d2
PREINIT:
	char *(*func)(float, void *, double);
CODE:
	func   = INT2PTR(char *(*)(float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2);
OUTPUT:
	RETVAL

int
nci_ifpd( c_func, f0, p1, d2 )
	SV* c_func
	float f0
	void * p1
	double d2
PREINIT:
	int(*func)(float, void *, double);
CODE:
	func   = INT2PTR(int(*)(float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2);
OUTPUT:
	RETVAL

void *
nci_ptpd( c_func, t0, p1, d2 )
	SV* c_func
	char * t0
	void * p1
	double d2
PREINIT:
	void *(*func)(char *, void *, double);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2);
OUTPUT:
	RETVAL

void
nci_vtpd( c_func, t0, p1, d2 )
	SV* c_func
	char * t0
	void * p1
	double d2
PREINIT:
	void(*func)(char *, void *, double);
CODE:
	func   = INT2PTR(void(*)(char *, void *, double), SvIV(c_func) );
	(*func)(t0, p1, d2);

double
nci_dtpd( c_func, t0, p1, d2 )
	SV* c_func
	char * t0
	void * p1
	double d2
PREINIT:
	double(*func)(char *, void *, double);
CODE:
	func   = INT2PTR(double(*)(char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2);
OUTPUT:
	RETVAL

short
nci_stpd( c_func, t0, p1, d2 )
	SV* c_func
	char * t0
	void * p1
	double d2
PREINIT:
	short(*func)(char *, void *, double);
CODE:
	func   = INT2PTR(short(*)(char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2);
OUTPUT:
	RETVAL

float
nci_ftpd( c_func, t0, p1, d2 )
	SV* c_func
	char * t0
	void * p1
	double d2
PREINIT:
	float(*func)(char *, void *, double);
CODE:
	func   = INT2PTR(float(*)(char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2);
OUTPUT:
	RETVAL

char *
nci_ttpd( c_func, t0, p1, d2 )
	SV* c_func
	char * t0
	void * p1
	double d2
PREINIT:
	char *(*func)(char *, void *, double);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2);
OUTPUT:
	RETVAL

int
nci_itpd( c_func, t0, p1, d2 )
	SV* c_func
	char * t0
	void * p1
	double d2
PREINIT:
	int(*func)(char *, void *, double);
CODE:
	func   = INT2PTR(int(*)(char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2);
OUTPUT:
	RETVAL

void *
nci_pipd( c_func, i0, p1, d2 )
	SV* c_func
	int i0
	void * p1
	double d2
PREINIT:
	void *(*func)(int, void *, double);
CODE:
	func   = INT2PTR(void *(*)(int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2);
OUTPUT:
	RETVAL

void
nci_vipd( c_func, i0, p1, d2 )
	SV* c_func
	int i0
	void * p1
	double d2
PREINIT:
	void(*func)(int, void *, double);
CODE:
	func   = INT2PTR(void(*)(int, void *, double), SvIV(c_func) );
	(*func)(i0, p1, d2);

double
nci_dipd( c_func, i0, p1, d2 )
	SV* c_func
	int i0
	void * p1
	double d2
PREINIT:
	double(*func)(int, void *, double);
CODE:
	func   = INT2PTR(double(*)(int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2);
OUTPUT:
	RETVAL

short
nci_sipd( c_func, i0, p1, d2 )
	SV* c_func
	int i0
	void * p1
	double d2
PREINIT:
	short(*func)(int, void *, double);
CODE:
	func   = INT2PTR(short(*)(int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2);
OUTPUT:
	RETVAL

float
nci_fipd( c_func, i0, p1, d2 )
	SV* c_func
	int i0
	void * p1
	double d2
PREINIT:
	float(*func)(int, void *, double);
CODE:
	func   = INT2PTR(float(*)(int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2);
OUTPUT:
	RETVAL

char *
nci_tipd( c_func, i0, p1, d2 )
	SV* c_func
	int i0
	void * p1
	double d2
PREINIT:
	char *(*func)(int, void *, double);
CODE:
	func   = INT2PTR(char *(*)(int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2);
OUTPUT:
	RETVAL

int
nci_iipd( c_func, i0, p1, d2 )
	SV* c_func
	int i0
	void * p1
	double d2
PREINIT:
	int(*func)(int, void *, double);
CODE:
	func   = INT2PTR(int(*)(int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2);
OUTPUT:
	RETVAL

void *
nci_ppdd( c_func, p0, d1, d2 )
	SV* c_func
	void * p0
	double d1
	double d2
PREINIT:
	void *(*func)(void *, double, double);
CODE:
	func   = INT2PTR(void *(*)(void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2);
OUTPUT:
	RETVAL

void
nci_vpdd( c_func, p0, d1, d2 )
	SV* c_func
	void * p0
	double d1
	double d2
PREINIT:
	void(*func)(void *, double, double);
CODE:
	func   = INT2PTR(void(*)(void *, double, double), SvIV(c_func) );
	(*func)(p0, d1, d2);

double
nci_dpdd( c_func, p0, d1, d2 )
	SV* c_func
	void * p0
	double d1
	double d2
PREINIT:
	double(*func)(void *, double, double);
CODE:
	func   = INT2PTR(double(*)(void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2);
OUTPUT:
	RETVAL

short
nci_spdd( c_func, p0, d1, d2 )
	SV* c_func
	void * p0
	double d1
	double d2
PREINIT:
	short(*func)(void *, double, double);
CODE:
	func   = INT2PTR(short(*)(void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2);
OUTPUT:
	RETVAL

float
nci_fpdd( c_func, p0, d1, d2 )
	SV* c_func
	void * p0
	double d1
	double d2
PREINIT:
	float(*func)(void *, double, double);
CODE:
	func   = INT2PTR(float(*)(void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2);
OUTPUT:
	RETVAL

char *
nci_tpdd( c_func, p0, d1, d2 )
	SV* c_func
	void * p0
	double d1
	double d2
PREINIT:
	char *(*func)(void *, double, double);
CODE:
	func   = INT2PTR(char *(*)(void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2);
OUTPUT:
	RETVAL

int
nci_ipdd( c_func, p0, d1, d2 )
	SV* c_func
	void * p0
	double d1
	double d2
PREINIT:
	int(*func)(void *, double, double);
CODE:
	func   = INT2PTR(int(*)(void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2);
OUTPUT:
	RETVAL

void *
nci_pvdd( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvdd( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvdd( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svdd( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvdd( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvdd( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivdd( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pddd( c_func, d0, d1, d2 )
	SV* c_func
	double d0
	double d1
	double d2
PREINIT:
	void *(*func)(double, double, double);
CODE:
	func   = INT2PTR(void *(*)(double, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2);
OUTPUT:
	RETVAL

void
nci_vddd( c_func, d0, d1, d2 )
	SV* c_func
	double d0
	double d1
	double d2
PREINIT:
	void(*func)(double, double, double);
CODE:
	func   = INT2PTR(void(*)(double, double, double), SvIV(c_func) );
	(*func)(d0, d1, d2);

double
nci_dddd( c_func, d0, d1, d2 )
	SV* c_func
	double d0
	double d1
	double d2
PREINIT:
	double(*func)(double, double, double);
CODE:
	func   = INT2PTR(double(*)(double, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2);
OUTPUT:
	RETVAL

short
nci_sddd( c_func, d0, d1, d2 )
	SV* c_func
	double d0
	double d1
	double d2
PREINIT:
	short(*func)(double, double, double);
CODE:
	func   = INT2PTR(short(*)(double, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2);
OUTPUT:
	RETVAL

float
nci_fddd( c_func, d0, d1, d2 )
	SV* c_func
	double d0
	double d1
	double d2
PREINIT:
	float(*func)(double, double, double);
CODE:
	func   = INT2PTR(float(*)(double, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2);
OUTPUT:
	RETVAL

char *
nci_tddd( c_func, d0, d1, d2 )
	SV* c_func
	double d0
	double d1
	double d2
PREINIT:
	char *(*func)(double, double, double);
CODE:
	func   = INT2PTR(char *(*)(double, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2);
OUTPUT:
	RETVAL

int
nci_iddd( c_func, d0, d1, d2 )
	SV* c_func
	double d0
	double d1
	double d2
PREINIT:
	int(*func)(double, double, double);
CODE:
	func   = INT2PTR(int(*)(double, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2);
OUTPUT:
	RETVAL

void *
nci_psdd( c_func, s0, d1, d2 )
	SV* c_func
	short s0
	double d1
	double d2
PREINIT:
	void *(*func)(short, double, double);
CODE:
	func   = INT2PTR(void *(*)(short, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2);
OUTPUT:
	RETVAL

void
nci_vsdd( c_func, s0, d1, d2 )
	SV* c_func
	short s0
	double d1
	double d2
PREINIT:
	void(*func)(short, double, double);
CODE:
	func   = INT2PTR(void(*)(short, double, double), SvIV(c_func) );
	(*func)(s0, d1, d2);

double
nci_dsdd( c_func, s0, d1, d2 )
	SV* c_func
	short s0
	double d1
	double d2
PREINIT:
	double(*func)(short, double, double);
CODE:
	func   = INT2PTR(double(*)(short, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2);
OUTPUT:
	RETVAL

short
nci_ssdd( c_func, s0, d1, d2 )
	SV* c_func
	short s0
	double d1
	double d2
PREINIT:
	short(*func)(short, double, double);
CODE:
	func   = INT2PTR(short(*)(short, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2);
OUTPUT:
	RETVAL

float
nci_fsdd( c_func, s0, d1, d2 )
	SV* c_func
	short s0
	double d1
	double d2
PREINIT:
	float(*func)(short, double, double);
CODE:
	func   = INT2PTR(float(*)(short, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2);
OUTPUT:
	RETVAL

char *
nci_tsdd( c_func, s0, d1, d2 )
	SV* c_func
	short s0
	double d1
	double d2
PREINIT:
	char *(*func)(short, double, double);
CODE:
	func   = INT2PTR(char *(*)(short, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2);
OUTPUT:
	RETVAL

int
nci_isdd( c_func, s0, d1, d2 )
	SV* c_func
	short s0
	double d1
	double d2
PREINIT:
	int(*func)(short, double, double);
CODE:
	func   = INT2PTR(int(*)(short, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2);
OUTPUT:
	RETVAL

void *
nci_pfdd( c_func, f0, d1, d2 )
	SV* c_func
	float f0
	double d1
	double d2
PREINIT:
	void *(*func)(float, double, double);
CODE:
	func   = INT2PTR(void *(*)(float, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2);
OUTPUT:
	RETVAL

void
nci_vfdd( c_func, f0, d1, d2 )
	SV* c_func
	float f0
	double d1
	double d2
PREINIT:
	void(*func)(float, double, double);
CODE:
	func   = INT2PTR(void(*)(float, double, double), SvIV(c_func) );
	(*func)(f0, d1, d2);

double
nci_dfdd( c_func, f0, d1, d2 )
	SV* c_func
	float f0
	double d1
	double d2
PREINIT:
	double(*func)(float, double, double);
CODE:
	func   = INT2PTR(double(*)(float, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2);
OUTPUT:
	RETVAL

short
nci_sfdd( c_func, f0, d1, d2 )
	SV* c_func
	float f0
	double d1
	double d2
PREINIT:
	short(*func)(float, double, double);
CODE:
	func   = INT2PTR(short(*)(float, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2);
OUTPUT:
	RETVAL

float
nci_ffdd( c_func, f0, d1, d2 )
	SV* c_func
	float f0
	double d1
	double d2
PREINIT:
	float(*func)(float, double, double);
CODE:
	func   = INT2PTR(float(*)(float, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2);
OUTPUT:
	RETVAL

char *
nci_tfdd( c_func, f0, d1, d2 )
	SV* c_func
	float f0
	double d1
	double d2
PREINIT:
	char *(*func)(float, double, double);
CODE:
	func   = INT2PTR(char *(*)(float, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2);
OUTPUT:
	RETVAL

int
nci_ifdd( c_func, f0, d1, d2 )
	SV* c_func
	float f0
	double d1
	double d2
PREINIT:
	int(*func)(float, double, double);
CODE:
	func   = INT2PTR(int(*)(float, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2);
OUTPUT:
	RETVAL

void *
nci_ptdd( c_func, t0, d1, d2 )
	SV* c_func
	char * t0
	double d1
	double d2
PREINIT:
	void *(*func)(char *, double, double);
CODE:
	func   = INT2PTR(void *(*)(char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2);
OUTPUT:
	RETVAL

void
nci_vtdd( c_func, t0, d1, d2 )
	SV* c_func
	char * t0
	double d1
	double d2
PREINIT:
	void(*func)(char *, double, double);
CODE:
	func   = INT2PTR(void(*)(char *, double, double), SvIV(c_func) );
	(*func)(t0, d1, d2);

double
nci_dtdd( c_func, t0, d1, d2 )
	SV* c_func
	char * t0
	double d1
	double d2
PREINIT:
	double(*func)(char *, double, double);
CODE:
	func   = INT2PTR(double(*)(char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2);
OUTPUT:
	RETVAL

short
nci_stdd( c_func, t0, d1, d2 )
	SV* c_func
	char * t0
	double d1
	double d2
PREINIT:
	short(*func)(char *, double, double);
CODE:
	func   = INT2PTR(short(*)(char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2);
OUTPUT:
	RETVAL

float
nci_ftdd( c_func, t0, d1, d2 )
	SV* c_func
	char * t0
	double d1
	double d2
PREINIT:
	float(*func)(char *, double, double);
CODE:
	func   = INT2PTR(float(*)(char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2);
OUTPUT:
	RETVAL

char *
nci_ttdd( c_func, t0, d1, d2 )
	SV* c_func
	char * t0
	double d1
	double d2
PREINIT:
	char *(*func)(char *, double, double);
CODE:
	func   = INT2PTR(char *(*)(char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2);
OUTPUT:
	RETVAL

int
nci_itdd( c_func, t0, d1, d2 )
	SV* c_func
	char * t0
	double d1
	double d2
PREINIT:
	int(*func)(char *, double, double);
CODE:
	func   = INT2PTR(int(*)(char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2);
OUTPUT:
	RETVAL

void *
nci_pidd( c_func, i0, d1, d2 )
	SV* c_func
	int i0
	double d1
	double d2
PREINIT:
	void *(*func)(int, double, double);
CODE:
	func   = INT2PTR(void *(*)(int, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2);
OUTPUT:
	RETVAL

void
nci_vidd( c_func, i0, d1, d2 )
	SV* c_func
	int i0
	double d1
	double d2
PREINIT:
	void(*func)(int, double, double);
CODE:
	func   = INT2PTR(void(*)(int, double, double), SvIV(c_func) );
	(*func)(i0, d1, d2);

double
nci_didd( c_func, i0, d1, d2 )
	SV* c_func
	int i0
	double d1
	double d2
PREINIT:
	double(*func)(int, double, double);
CODE:
	func   = INT2PTR(double(*)(int, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2);
OUTPUT:
	RETVAL

short
nci_sidd( c_func, i0, d1, d2 )
	SV* c_func
	int i0
	double d1
	double d2
PREINIT:
	short(*func)(int, double, double);
CODE:
	func   = INT2PTR(short(*)(int, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2);
OUTPUT:
	RETVAL

float
nci_fidd( c_func, i0, d1, d2 )
	SV* c_func
	int i0
	double d1
	double d2
PREINIT:
	float(*func)(int, double, double);
CODE:
	func   = INT2PTR(float(*)(int, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2);
OUTPUT:
	RETVAL

char *
nci_tidd( c_func, i0, d1, d2 )
	SV* c_func
	int i0
	double d1
	double d2
PREINIT:
	char *(*func)(int, double, double);
CODE:
	func   = INT2PTR(char *(*)(int, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2);
OUTPUT:
	RETVAL

int
nci_iidd( c_func, i0, d1, d2 )
	SV* c_func
	int i0
	double d1
	double d2
PREINIT:
	int(*func)(int, double, double);
CODE:
	func   = INT2PTR(int(*)(int, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2);
OUTPUT:
	RETVAL

void *
nci_ppsd( c_func, p0, s1, d2 )
	SV* c_func
	void * p0
	short s1
	double d2
PREINIT:
	void *(*func)(void *, short, double);
CODE:
	func   = INT2PTR(void *(*)(void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2);
OUTPUT:
	RETVAL

void
nci_vpsd( c_func, p0, s1, d2 )
	SV* c_func
	void * p0
	short s1
	double d2
PREINIT:
	void(*func)(void *, short, double);
CODE:
	func   = INT2PTR(void(*)(void *, short, double), SvIV(c_func) );
	(*func)(p0, s1, d2);

double
nci_dpsd( c_func, p0, s1, d2 )
	SV* c_func
	void * p0
	short s1
	double d2
PREINIT:
	double(*func)(void *, short, double);
CODE:
	func   = INT2PTR(double(*)(void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2);
OUTPUT:
	RETVAL

short
nci_spsd( c_func, p0, s1, d2 )
	SV* c_func
	void * p0
	short s1
	double d2
PREINIT:
	short(*func)(void *, short, double);
CODE:
	func   = INT2PTR(short(*)(void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2);
OUTPUT:
	RETVAL

float
nci_fpsd( c_func, p0, s1, d2 )
	SV* c_func
	void * p0
	short s1
	double d2
PREINIT:
	float(*func)(void *, short, double);
CODE:
	func   = INT2PTR(float(*)(void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2);
OUTPUT:
	RETVAL

char *
nci_tpsd( c_func, p0, s1, d2 )
	SV* c_func
	void * p0
	short s1
	double d2
PREINIT:
	char *(*func)(void *, short, double);
CODE:
	func   = INT2PTR(char *(*)(void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2);
OUTPUT:
	RETVAL

int
nci_ipsd( c_func, p0, s1, d2 )
	SV* c_func
	void * p0
	short s1
	double d2
PREINIT:
	int(*func)(void *, short, double);
CODE:
	func   = INT2PTR(int(*)(void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2);
OUTPUT:
	RETVAL

void *
nci_pvsd( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvsd( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvsd( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svsd( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvsd( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvsd( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivsd( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdsd( c_func, d0, s1, d2 )
	SV* c_func
	double d0
	short s1
	double d2
PREINIT:
	void *(*func)(double, short, double);
CODE:
	func   = INT2PTR(void *(*)(double, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2);
OUTPUT:
	RETVAL

void
nci_vdsd( c_func, d0, s1, d2 )
	SV* c_func
	double d0
	short s1
	double d2
PREINIT:
	void(*func)(double, short, double);
CODE:
	func   = INT2PTR(void(*)(double, short, double), SvIV(c_func) );
	(*func)(d0, s1, d2);

double
nci_ddsd( c_func, d0, s1, d2 )
	SV* c_func
	double d0
	short s1
	double d2
PREINIT:
	double(*func)(double, short, double);
CODE:
	func   = INT2PTR(double(*)(double, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2);
OUTPUT:
	RETVAL

short
nci_sdsd( c_func, d0, s1, d2 )
	SV* c_func
	double d0
	short s1
	double d2
PREINIT:
	short(*func)(double, short, double);
CODE:
	func   = INT2PTR(short(*)(double, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2);
OUTPUT:
	RETVAL

float
nci_fdsd( c_func, d0, s1, d2 )
	SV* c_func
	double d0
	short s1
	double d2
PREINIT:
	float(*func)(double, short, double);
CODE:
	func   = INT2PTR(float(*)(double, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2);
OUTPUT:
	RETVAL

char *
nci_tdsd( c_func, d0, s1, d2 )
	SV* c_func
	double d0
	short s1
	double d2
PREINIT:
	char *(*func)(double, short, double);
CODE:
	func   = INT2PTR(char *(*)(double, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2);
OUTPUT:
	RETVAL

int
nci_idsd( c_func, d0, s1, d2 )
	SV* c_func
	double d0
	short s1
	double d2
PREINIT:
	int(*func)(double, short, double);
CODE:
	func   = INT2PTR(int(*)(double, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2);
OUTPUT:
	RETVAL

void *
nci_pssd( c_func, s0, s1, d2 )
	SV* c_func
	short s0
	short s1
	double d2
PREINIT:
	void *(*func)(short, short, double);
CODE:
	func   = INT2PTR(void *(*)(short, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2);
OUTPUT:
	RETVAL

void
nci_vssd( c_func, s0, s1, d2 )
	SV* c_func
	short s0
	short s1
	double d2
PREINIT:
	void(*func)(short, short, double);
CODE:
	func   = INT2PTR(void(*)(short, short, double), SvIV(c_func) );
	(*func)(s0, s1, d2);

double
nci_dssd( c_func, s0, s1, d2 )
	SV* c_func
	short s0
	short s1
	double d2
PREINIT:
	double(*func)(short, short, double);
CODE:
	func   = INT2PTR(double(*)(short, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2);
OUTPUT:
	RETVAL

short
nci_sssd( c_func, s0, s1, d2 )
	SV* c_func
	short s0
	short s1
	double d2
PREINIT:
	short(*func)(short, short, double);
CODE:
	func   = INT2PTR(short(*)(short, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2);
OUTPUT:
	RETVAL

float
nci_fssd( c_func, s0, s1, d2 )
	SV* c_func
	short s0
	short s1
	double d2
PREINIT:
	float(*func)(short, short, double);
CODE:
	func   = INT2PTR(float(*)(short, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2);
OUTPUT:
	RETVAL

char *
nci_tssd( c_func, s0, s1, d2 )
	SV* c_func
	short s0
	short s1
	double d2
PREINIT:
	char *(*func)(short, short, double);
CODE:
	func   = INT2PTR(char *(*)(short, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2);
OUTPUT:
	RETVAL

int
nci_issd( c_func, s0, s1, d2 )
	SV* c_func
	short s0
	short s1
	double d2
PREINIT:
	int(*func)(short, short, double);
CODE:
	func   = INT2PTR(int(*)(short, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2);
OUTPUT:
	RETVAL

void *
nci_pfsd( c_func, f0, s1, d2 )
	SV* c_func
	float f0
	short s1
	double d2
PREINIT:
	void *(*func)(float, short, double);
CODE:
	func   = INT2PTR(void *(*)(float, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2);
OUTPUT:
	RETVAL

void
nci_vfsd( c_func, f0, s1, d2 )
	SV* c_func
	float f0
	short s1
	double d2
PREINIT:
	void(*func)(float, short, double);
CODE:
	func   = INT2PTR(void(*)(float, short, double), SvIV(c_func) );
	(*func)(f0, s1, d2);

double
nci_dfsd( c_func, f0, s1, d2 )
	SV* c_func
	float f0
	short s1
	double d2
PREINIT:
	double(*func)(float, short, double);
CODE:
	func   = INT2PTR(double(*)(float, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2);
OUTPUT:
	RETVAL

short
nci_sfsd( c_func, f0, s1, d2 )
	SV* c_func
	float f0
	short s1
	double d2
PREINIT:
	short(*func)(float, short, double);
CODE:
	func   = INT2PTR(short(*)(float, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2);
OUTPUT:
	RETVAL

float
nci_ffsd( c_func, f0, s1, d2 )
	SV* c_func
	float f0
	short s1
	double d2
PREINIT:
	float(*func)(float, short, double);
CODE:
	func   = INT2PTR(float(*)(float, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2);
OUTPUT:
	RETVAL

char *
nci_tfsd( c_func, f0, s1, d2 )
	SV* c_func
	float f0
	short s1
	double d2
PREINIT:
	char *(*func)(float, short, double);
CODE:
	func   = INT2PTR(char *(*)(float, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2);
OUTPUT:
	RETVAL

int
nci_ifsd( c_func, f0, s1, d2 )
	SV* c_func
	float f0
	short s1
	double d2
PREINIT:
	int(*func)(float, short, double);
CODE:
	func   = INT2PTR(int(*)(float, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2);
OUTPUT:
	RETVAL

void *
nci_ptsd( c_func, t0, s1, d2 )
	SV* c_func
	char * t0
	short s1
	double d2
PREINIT:
	void *(*func)(char *, short, double);
CODE:
	func   = INT2PTR(void *(*)(char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2);
OUTPUT:
	RETVAL

void
nci_vtsd( c_func, t0, s1, d2 )
	SV* c_func
	char * t0
	short s1
	double d2
PREINIT:
	void(*func)(char *, short, double);
CODE:
	func   = INT2PTR(void(*)(char *, short, double), SvIV(c_func) );
	(*func)(t0, s1, d2);

double
nci_dtsd( c_func, t0, s1, d2 )
	SV* c_func
	char * t0
	short s1
	double d2
PREINIT:
	double(*func)(char *, short, double);
CODE:
	func   = INT2PTR(double(*)(char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2);
OUTPUT:
	RETVAL

short
nci_stsd( c_func, t0, s1, d2 )
	SV* c_func
	char * t0
	short s1
	double d2
PREINIT:
	short(*func)(char *, short, double);
CODE:
	func   = INT2PTR(short(*)(char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2);
OUTPUT:
	RETVAL

float
nci_ftsd( c_func, t0, s1, d2 )
	SV* c_func
	char * t0
	short s1
	double d2
PREINIT:
	float(*func)(char *, short, double);
CODE:
	func   = INT2PTR(float(*)(char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2);
OUTPUT:
	RETVAL

char *
nci_ttsd( c_func, t0, s1, d2 )
	SV* c_func
	char * t0
	short s1
	double d2
PREINIT:
	char *(*func)(char *, short, double);
CODE:
	func   = INT2PTR(char *(*)(char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2);
OUTPUT:
	RETVAL

int
nci_itsd( c_func, t0, s1, d2 )
	SV* c_func
	char * t0
	short s1
	double d2
PREINIT:
	int(*func)(char *, short, double);
CODE:
	func   = INT2PTR(int(*)(char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2);
OUTPUT:
	RETVAL

void *
nci_pisd( c_func, i0, s1, d2 )
	SV* c_func
	int i0
	short s1
	double d2
PREINIT:
	void *(*func)(int, short, double);
CODE:
	func   = INT2PTR(void *(*)(int, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2);
OUTPUT:
	RETVAL

void
nci_visd( c_func, i0, s1, d2 )
	SV* c_func
	int i0
	short s1
	double d2
PREINIT:
	void(*func)(int, short, double);
CODE:
	func   = INT2PTR(void(*)(int, short, double), SvIV(c_func) );
	(*func)(i0, s1, d2);

double
nci_disd( c_func, i0, s1, d2 )
	SV* c_func
	int i0
	short s1
	double d2
PREINIT:
	double(*func)(int, short, double);
CODE:
	func   = INT2PTR(double(*)(int, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2);
OUTPUT:
	RETVAL

short
nci_sisd( c_func, i0, s1, d2 )
	SV* c_func
	int i0
	short s1
	double d2
PREINIT:
	short(*func)(int, short, double);
CODE:
	func   = INT2PTR(short(*)(int, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2);
OUTPUT:
	RETVAL

float
nci_fisd( c_func, i0, s1, d2 )
	SV* c_func
	int i0
	short s1
	double d2
PREINIT:
	float(*func)(int, short, double);
CODE:
	func   = INT2PTR(float(*)(int, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2);
OUTPUT:
	RETVAL

char *
nci_tisd( c_func, i0, s1, d2 )
	SV* c_func
	int i0
	short s1
	double d2
PREINIT:
	char *(*func)(int, short, double);
CODE:
	func   = INT2PTR(char *(*)(int, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2);
OUTPUT:
	RETVAL

int
nci_iisd( c_func, i0, s1, d2 )
	SV* c_func
	int i0
	short s1
	double d2
PREINIT:
	int(*func)(int, short, double);
CODE:
	func   = INT2PTR(int(*)(int, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2);
OUTPUT:
	RETVAL

void *
nci_ppfd( c_func, p0, f1, d2 )
	SV* c_func
	void * p0
	float f1
	double d2
PREINIT:
	void *(*func)(void *, float, double);
CODE:
	func   = INT2PTR(void *(*)(void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2);
OUTPUT:
	RETVAL

void
nci_vpfd( c_func, p0, f1, d2 )
	SV* c_func
	void * p0
	float f1
	double d2
PREINIT:
	void(*func)(void *, float, double);
CODE:
	func   = INT2PTR(void(*)(void *, float, double), SvIV(c_func) );
	(*func)(p0, f1, d2);

double
nci_dpfd( c_func, p0, f1, d2 )
	SV* c_func
	void * p0
	float f1
	double d2
PREINIT:
	double(*func)(void *, float, double);
CODE:
	func   = INT2PTR(double(*)(void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2);
OUTPUT:
	RETVAL

short
nci_spfd( c_func, p0, f1, d2 )
	SV* c_func
	void * p0
	float f1
	double d2
PREINIT:
	short(*func)(void *, float, double);
CODE:
	func   = INT2PTR(short(*)(void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2);
OUTPUT:
	RETVAL

float
nci_fpfd( c_func, p0, f1, d2 )
	SV* c_func
	void * p0
	float f1
	double d2
PREINIT:
	float(*func)(void *, float, double);
CODE:
	func   = INT2PTR(float(*)(void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2);
OUTPUT:
	RETVAL

char *
nci_tpfd( c_func, p0, f1, d2 )
	SV* c_func
	void * p0
	float f1
	double d2
PREINIT:
	char *(*func)(void *, float, double);
CODE:
	func   = INT2PTR(char *(*)(void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2);
OUTPUT:
	RETVAL

int
nci_ipfd( c_func, p0, f1, d2 )
	SV* c_func
	void * p0
	float f1
	double d2
PREINIT:
	int(*func)(void *, float, double);
CODE:
	func   = INT2PTR(int(*)(void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2);
OUTPUT:
	RETVAL

void *
nci_pvfd( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvfd( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvfd( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svfd( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvfd( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvfd( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivfd( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdfd( c_func, d0, f1, d2 )
	SV* c_func
	double d0
	float f1
	double d2
PREINIT:
	void *(*func)(double, float, double);
CODE:
	func   = INT2PTR(void *(*)(double, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2);
OUTPUT:
	RETVAL

void
nci_vdfd( c_func, d0, f1, d2 )
	SV* c_func
	double d0
	float f1
	double d2
PREINIT:
	void(*func)(double, float, double);
CODE:
	func   = INT2PTR(void(*)(double, float, double), SvIV(c_func) );
	(*func)(d0, f1, d2);

double
nci_ddfd( c_func, d0, f1, d2 )
	SV* c_func
	double d0
	float f1
	double d2
PREINIT:
	double(*func)(double, float, double);
CODE:
	func   = INT2PTR(double(*)(double, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2);
OUTPUT:
	RETVAL

short
nci_sdfd( c_func, d0, f1, d2 )
	SV* c_func
	double d0
	float f1
	double d2
PREINIT:
	short(*func)(double, float, double);
CODE:
	func   = INT2PTR(short(*)(double, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2);
OUTPUT:
	RETVAL

float
nci_fdfd( c_func, d0, f1, d2 )
	SV* c_func
	double d0
	float f1
	double d2
PREINIT:
	float(*func)(double, float, double);
CODE:
	func   = INT2PTR(float(*)(double, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2);
OUTPUT:
	RETVAL

char *
nci_tdfd( c_func, d0, f1, d2 )
	SV* c_func
	double d0
	float f1
	double d2
PREINIT:
	char *(*func)(double, float, double);
CODE:
	func   = INT2PTR(char *(*)(double, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2);
OUTPUT:
	RETVAL

int
nci_idfd( c_func, d0, f1, d2 )
	SV* c_func
	double d0
	float f1
	double d2
PREINIT:
	int(*func)(double, float, double);
CODE:
	func   = INT2PTR(int(*)(double, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2);
OUTPUT:
	RETVAL

void *
nci_psfd( c_func, s0, f1, d2 )
	SV* c_func
	short s0
	float f1
	double d2
PREINIT:
	void *(*func)(short, float, double);
CODE:
	func   = INT2PTR(void *(*)(short, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2);
OUTPUT:
	RETVAL

void
nci_vsfd( c_func, s0, f1, d2 )
	SV* c_func
	short s0
	float f1
	double d2
PREINIT:
	void(*func)(short, float, double);
CODE:
	func   = INT2PTR(void(*)(short, float, double), SvIV(c_func) );
	(*func)(s0, f1, d2);

double
nci_dsfd( c_func, s0, f1, d2 )
	SV* c_func
	short s0
	float f1
	double d2
PREINIT:
	double(*func)(short, float, double);
CODE:
	func   = INT2PTR(double(*)(short, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2);
OUTPUT:
	RETVAL

short
nci_ssfd( c_func, s0, f1, d2 )
	SV* c_func
	short s0
	float f1
	double d2
PREINIT:
	short(*func)(short, float, double);
CODE:
	func   = INT2PTR(short(*)(short, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2);
OUTPUT:
	RETVAL

float
nci_fsfd( c_func, s0, f1, d2 )
	SV* c_func
	short s0
	float f1
	double d2
PREINIT:
	float(*func)(short, float, double);
CODE:
	func   = INT2PTR(float(*)(short, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2);
OUTPUT:
	RETVAL

char *
nci_tsfd( c_func, s0, f1, d2 )
	SV* c_func
	short s0
	float f1
	double d2
PREINIT:
	char *(*func)(short, float, double);
CODE:
	func   = INT2PTR(char *(*)(short, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2);
OUTPUT:
	RETVAL

int
nci_isfd( c_func, s0, f1, d2 )
	SV* c_func
	short s0
	float f1
	double d2
PREINIT:
	int(*func)(short, float, double);
CODE:
	func   = INT2PTR(int(*)(short, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2);
OUTPUT:
	RETVAL

void *
nci_pffd( c_func, f0, f1, d2 )
	SV* c_func
	float f0
	float f1
	double d2
PREINIT:
	void *(*func)(float, float, double);
CODE:
	func   = INT2PTR(void *(*)(float, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2);
OUTPUT:
	RETVAL

void
nci_vffd( c_func, f0, f1, d2 )
	SV* c_func
	float f0
	float f1
	double d2
PREINIT:
	void(*func)(float, float, double);
CODE:
	func   = INT2PTR(void(*)(float, float, double), SvIV(c_func) );
	(*func)(f0, f1, d2);

double
nci_dffd( c_func, f0, f1, d2 )
	SV* c_func
	float f0
	float f1
	double d2
PREINIT:
	double(*func)(float, float, double);
CODE:
	func   = INT2PTR(double(*)(float, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2);
OUTPUT:
	RETVAL

short
nci_sffd( c_func, f0, f1, d2 )
	SV* c_func
	float f0
	float f1
	double d2
PREINIT:
	short(*func)(float, float, double);
CODE:
	func   = INT2PTR(short(*)(float, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2);
OUTPUT:
	RETVAL

float
nci_fffd( c_func, f0, f1, d2 )
	SV* c_func
	float f0
	float f1
	double d2
PREINIT:
	float(*func)(float, float, double);
CODE:
	func   = INT2PTR(float(*)(float, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2);
OUTPUT:
	RETVAL

char *
nci_tffd( c_func, f0, f1, d2 )
	SV* c_func
	float f0
	float f1
	double d2
PREINIT:
	char *(*func)(float, float, double);
CODE:
	func   = INT2PTR(char *(*)(float, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2);
OUTPUT:
	RETVAL

int
nci_iffd( c_func, f0, f1, d2 )
	SV* c_func
	float f0
	float f1
	double d2
PREINIT:
	int(*func)(float, float, double);
CODE:
	func   = INT2PTR(int(*)(float, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2);
OUTPUT:
	RETVAL

void *
nci_ptfd( c_func, t0, f1, d2 )
	SV* c_func
	char * t0
	float f1
	double d2
PREINIT:
	void *(*func)(char *, float, double);
CODE:
	func   = INT2PTR(void *(*)(char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2);
OUTPUT:
	RETVAL

void
nci_vtfd( c_func, t0, f1, d2 )
	SV* c_func
	char * t0
	float f1
	double d2
PREINIT:
	void(*func)(char *, float, double);
CODE:
	func   = INT2PTR(void(*)(char *, float, double), SvIV(c_func) );
	(*func)(t0, f1, d2);

double
nci_dtfd( c_func, t0, f1, d2 )
	SV* c_func
	char * t0
	float f1
	double d2
PREINIT:
	double(*func)(char *, float, double);
CODE:
	func   = INT2PTR(double(*)(char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2);
OUTPUT:
	RETVAL

short
nci_stfd( c_func, t0, f1, d2 )
	SV* c_func
	char * t0
	float f1
	double d2
PREINIT:
	short(*func)(char *, float, double);
CODE:
	func   = INT2PTR(short(*)(char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2);
OUTPUT:
	RETVAL

float
nci_ftfd( c_func, t0, f1, d2 )
	SV* c_func
	char * t0
	float f1
	double d2
PREINIT:
	float(*func)(char *, float, double);
CODE:
	func   = INT2PTR(float(*)(char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2);
OUTPUT:
	RETVAL

char *
nci_ttfd( c_func, t0, f1, d2 )
	SV* c_func
	char * t0
	float f1
	double d2
PREINIT:
	char *(*func)(char *, float, double);
CODE:
	func   = INT2PTR(char *(*)(char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2);
OUTPUT:
	RETVAL

int
nci_itfd( c_func, t0, f1, d2 )
	SV* c_func
	char * t0
	float f1
	double d2
PREINIT:
	int(*func)(char *, float, double);
CODE:
	func   = INT2PTR(int(*)(char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2);
OUTPUT:
	RETVAL

void *
nci_pifd( c_func, i0, f1, d2 )
	SV* c_func
	int i0
	float f1
	double d2
PREINIT:
	void *(*func)(int, float, double);
CODE:
	func   = INT2PTR(void *(*)(int, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2);
OUTPUT:
	RETVAL

void
nci_vifd( c_func, i0, f1, d2 )
	SV* c_func
	int i0
	float f1
	double d2
PREINIT:
	void(*func)(int, float, double);
CODE:
	func   = INT2PTR(void(*)(int, float, double), SvIV(c_func) );
	(*func)(i0, f1, d2);

double
nci_difd( c_func, i0, f1, d2 )
	SV* c_func
	int i0
	float f1
	double d2
PREINIT:
	double(*func)(int, float, double);
CODE:
	func   = INT2PTR(double(*)(int, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2);
OUTPUT:
	RETVAL

short
nci_sifd( c_func, i0, f1, d2 )
	SV* c_func
	int i0
	float f1
	double d2
PREINIT:
	short(*func)(int, float, double);
CODE:
	func   = INT2PTR(short(*)(int, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2);
OUTPUT:
	RETVAL

float
nci_fifd( c_func, i0, f1, d2 )
	SV* c_func
	int i0
	float f1
	double d2
PREINIT:
	float(*func)(int, float, double);
CODE:
	func   = INT2PTR(float(*)(int, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2);
OUTPUT:
	RETVAL

char *
nci_tifd( c_func, i0, f1, d2 )
	SV* c_func
	int i0
	float f1
	double d2
PREINIT:
	char *(*func)(int, float, double);
CODE:
	func   = INT2PTR(char *(*)(int, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2);
OUTPUT:
	RETVAL

int
nci_iifd( c_func, i0, f1, d2 )
	SV* c_func
	int i0
	float f1
	double d2
PREINIT:
	int(*func)(int, float, double);
CODE:
	func   = INT2PTR(int(*)(int, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2);
OUTPUT:
	RETVAL

void *
nci_pptd( c_func, p0, t1, d2 )
	SV* c_func
	void * p0
	char * t1
	double d2
PREINIT:
	void *(*func)(void *, char *, double);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2);
OUTPUT:
	RETVAL

void
nci_vptd( c_func, p0, t1, d2 )
	SV* c_func
	void * p0
	char * t1
	double d2
PREINIT:
	void(*func)(void *, char *, double);
CODE:
	func   = INT2PTR(void(*)(void *, char *, double), SvIV(c_func) );
	(*func)(p0, t1, d2);

double
nci_dptd( c_func, p0, t1, d2 )
	SV* c_func
	void * p0
	char * t1
	double d2
PREINIT:
	double(*func)(void *, char *, double);
CODE:
	func   = INT2PTR(double(*)(void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2);
OUTPUT:
	RETVAL

short
nci_sptd( c_func, p0, t1, d2 )
	SV* c_func
	void * p0
	char * t1
	double d2
PREINIT:
	short(*func)(void *, char *, double);
CODE:
	func   = INT2PTR(short(*)(void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2);
OUTPUT:
	RETVAL

float
nci_fptd( c_func, p0, t1, d2 )
	SV* c_func
	void * p0
	char * t1
	double d2
PREINIT:
	float(*func)(void *, char *, double);
CODE:
	func   = INT2PTR(float(*)(void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2);
OUTPUT:
	RETVAL

char *
nci_tptd( c_func, p0, t1, d2 )
	SV* c_func
	void * p0
	char * t1
	double d2
PREINIT:
	char *(*func)(void *, char *, double);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2);
OUTPUT:
	RETVAL

int
nci_iptd( c_func, p0, t1, d2 )
	SV* c_func
	void * p0
	char * t1
	double d2
PREINIT:
	int(*func)(void *, char *, double);
CODE:
	func   = INT2PTR(int(*)(void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2);
OUTPUT:
	RETVAL

void *
nci_pvtd( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvtd( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvtd( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svtd( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvtd( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvtd( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivtd( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdtd( c_func, d0, t1, d2 )
	SV* c_func
	double d0
	char * t1
	double d2
PREINIT:
	void *(*func)(double, char *, double);
CODE:
	func   = INT2PTR(void *(*)(double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2);
OUTPUT:
	RETVAL

void
nci_vdtd( c_func, d0, t1, d2 )
	SV* c_func
	double d0
	char * t1
	double d2
PREINIT:
	void(*func)(double, char *, double);
CODE:
	func   = INT2PTR(void(*)(double, char *, double), SvIV(c_func) );
	(*func)(d0, t1, d2);

double
nci_ddtd( c_func, d0, t1, d2 )
	SV* c_func
	double d0
	char * t1
	double d2
PREINIT:
	double(*func)(double, char *, double);
CODE:
	func   = INT2PTR(double(*)(double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2);
OUTPUT:
	RETVAL

short
nci_sdtd( c_func, d0, t1, d2 )
	SV* c_func
	double d0
	char * t1
	double d2
PREINIT:
	short(*func)(double, char *, double);
CODE:
	func   = INT2PTR(short(*)(double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2);
OUTPUT:
	RETVAL

float
nci_fdtd( c_func, d0, t1, d2 )
	SV* c_func
	double d0
	char * t1
	double d2
PREINIT:
	float(*func)(double, char *, double);
CODE:
	func   = INT2PTR(float(*)(double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2);
OUTPUT:
	RETVAL

char *
nci_tdtd( c_func, d0, t1, d2 )
	SV* c_func
	double d0
	char * t1
	double d2
PREINIT:
	char *(*func)(double, char *, double);
CODE:
	func   = INT2PTR(char *(*)(double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2);
OUTPUT:
	RETVAL

int
nci_idtd( c_func, d0, t1, d2 )
	SV* c_func
	double d0
	char * t1
	double d2
PREINIT:
	int(*func)(double, char *, double);
CODE:
	func   = INT2PTR(int(*)(double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2);
OUTPUT:
	RETVAL

void *
nci_pstd( c_func, s0, t1, d2 )
	SV* c_func
	short s0
	char * t1
	double d2
PREINIT:
	void *(*func)(short, char *, double);
CODE:
	func   = INT2PTR(void *(*)(short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2);
OUTPUT:
	RETVAL

void
nci_vstd( c_func, s0, t1, d2 )
	SV* c_func
	short s0
	char * t1
	double d2
PREINIT:
	void(*func)(short, char *, double);
CODE:
	func   = INT2PTR(void(*)(short, char *, double), SvIV(c_func) );
	(*func)(s0, t1, d2);

double
nci_dstd( c_func, s0, t1, d2 )
	SV* c_func
	short s0
	char * t1
	double d2
PREINIT:
	double(*func)(short, char *, double);
CODE:
	func   = INT2PTR(double(*)(short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2);
OUTPUT:
	RETVAL

short
nci_sstd( c_func, s0, t1, d2 )
	SV* c_func
	short s0
	char * t1
	double d2
PREINIT:
	short(*func)(short, char *, double);
CODE:
	func   = INT2PTR(short(*)(short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2);
OUTPUT:
	RETVAL

float
nci_fstd( c_func, s0, t1, d2 )
	SV* c_func
	short s0
	char * t1
	double d2
PREINIT:
	float(*func)(short, char *, double);
CODE:
	func   = INT2PTR(float(*)(short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2);
OUTPUT:
	RETVAL

char *
nci_tstd( c_func, s0, t1, d2 )
	SV* c_func
	short s0
	char * t1
	double d2
PREINIT:
	char *(*func)(short, char *, double);
CODE:
	func   = INT2PTR(char *(*)(short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2);
OUTPUT:
	RETVAL

int
nci_istd( c_func, s0, t1, d2 )
	SV* c_func
	short s0
	char * t1
	double d2
PREINIT:
	int(*func)(short, char *, double);
CODE:
	func   = INT2PTR(int(*)(short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2);
OUTPUT:
	RETVAL

void *
nci_pftd( c_func, f0, t1, d2 )
	SV* c_func
	float f0
	char * t1
	double d2
PREINIT:
	void *(*func)(float, char *, double);
CODE:
	func   = INT2PTR(void *(*)(float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2);
OUTPUT:
	RETVAL

void
nci_vftd( c_func, f0, t1, d2 )
	SV* c_func
	float f0
	char * t1
	double d2
PREINIT:
	void(*func)(float, char *, double);
CODE:
	func   = INT2PTR(void(*)(float, char *, double), SvIV(c_func) );
	(*func)(f0, t1, d2);

double
nci_dftd( c_func, f0, t1, d2 )
	SV* c_func
	float f0
	char * t1
	double d2
PREINIT:
	double(*func)(float, char *, double);
CODE:
	func   = INT2PTR(double(*)(float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2);
OUTPUT:
	RETVAL

short
nci_sftd( c_func, f0, t1, d2 )
	SV* c_func
	float f0
	char * t1
	double d2
PREINIT:
	short(*func)(float, char *, double);
CODE:
	func   = INT2PTR(short(*)(float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2);
OUTPUT:
	RETVAL

float
nci_fftd( c_func, f0, t1, d2 )
	SV* c_func
	float f0
	char * t1
	double d2
PREINIT:
	float(*func)(float, char *, double);
CODE:
	func   = INT2PTR(float(*)(float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2);
OUTPUT:
	RETVAL

char *
nci_tftd( c_func, f0, t1, d2 )
	SV* c_func
	float f0
	char * t1
	double d2
PREINIT:
	char *(*func)(float, char *, double);
CODE:
	func   = INT2PTR(char *(*)(float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2);
OUTPUT:
	RETVAL

int
nci_iftd( c_func, f0, t1, d2 )
	SV* c_func
	float f0
	char * t1
	double d2
PREINIT:
	int(*func)(float, char *, double);
CODE:
	func   = INT2PTR(int(*)(float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2);
OUTPUT:
	RETVAL

void *
nci_pttd( c_func, t0, t1, d2 )
	SV* c_func
	char * t0
	char * t1
	double d2
PREINIT:
	void *(*func)(char *, char *, double);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2);
OUTPUT:
	RETVAL

void
nci_vttd( c_func, t0, t1, d2 )
	SV* c_func
	char * t0
	char * t1
	double d2
PREINIT:
	void(*func)(char *, char *, double);
CODE:
	func   = INT2PTR(void(*)(char *, char *, double), SvIV(c_func) );
	(*func)(t0, t1, d2);

double
nci_dttd( c_func, t0, t1, d2 )
	SV* c_func
	char * t0
	char * t1
	double d2
PREINIT:
	double(*func)(char *, char *, double);
CODE:
	func   = INT2PTR(double(*)(char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2);
OUTPUT:
	RETVAL

short
nci_sttd( c_func, t0, t1, d2 )
	SV* c_func
	char * t0
	char * t1
	double d2
PREINIT:
	short(*func)(char *, char *, double);
CODE:
	func   = INT2PTR(short(*)(char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2);
OUTPUT:
	RETVAL

float
nci_fttd( c_func, t0, t1, d2 )
	SV* c_func
	char * t0
	char * t1
	double d2
PREINIT:
	float(*func)(char *, char *, double);
CODE:
	func   = INT2PTR(float(*)(char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2);
OUTPUT:
	RETVAL

char *
nci_tttd( c_func, t0, t1, d2 )
	SV* c_func
	char * t0
	char * t1
	double d2
PREINIT:
	char *(*func)(char *, char *, double);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2);
OUTPUT:
	RETVAL

int
nci_ittd( c_func, t0, t1, d2 )
	SV* c_func
	char * t0
	char * t1
	double d2
PREINIT:
	int(*func)(char *, char *, double);
CODE:
	func   = INT2PTR(int(*)(char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2);
OUTPUT:
	RETVAL

void *
nci_pitd( c_func, i0, t1, d2 )
	SV* c_func
	int i0
	char * t1
	double d2
PREINIT:
	void *(*func)(int, char *, double);
CODE:
	func   = INT2PTR(void *(*)(int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2);
OUTPUT:
	RETVAL

void
nci_vitd( c_func, i0, t1, d2 )
	SV* c_func
	int i0
	char * t1
	double d2
PREINIT:
	void(*func)(int, char *, double);
CODE:
	func   = INT2PTR(void(*)(int, char *, double), SvIV(c_func) );
	(*func)(i0, t1, d2);

double
nci_ditd( c_func, i0, t1, d2 )
	SV* c_func
	int i0
	char * t1
	double d2
PREINIT:
	double(*func)(int, char *, double);
CODE:
	func   = INT2PTR(double(*)(int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2);
OUTPUT:
	RETVAL

short
nci_sitd( c_func, i0, t1, d2 )
	SV* c_func
	int i0
	char * t1
	double d2
PREINIT:
	short(*func)(int, char *, double);
CODE:
	func   = INT2PTR(short(*)(int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2);
OUTPUT:
	RETVAL

float
nci_fitd( c_func, i0, t1, d2 )
	SV* c_func
	int i0
	char * t1
	double d2
PREINIT:
	float(*func)(int, char *, double);
CODE:
	func   = INT2PTR(float(*)(int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2);
OUTPUT:
	RETVAL

char *
nci_titd( c_func, i0, t1, d2 )
	SV* c_func
	int i0
	char * t1
	double d2
PREINIT:
	char *(*func)(int, char *, double);
CODE:
	func   = INT2PTR(char *(*)(int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2);
OUTPUT:
	RETVAL

int
nci_iitd( c_func, i0, t1, d2 )
	SV* c_func
	int i0
	char * t1
	double d2
PREINIT:
	int(*func)(int, char *, double);
CODE:
	func   = INT2PTR(int(*)(int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2);
OUTPUT:
	RETVAL

void *
nci_ppid( c_func, p0, i1, d2 )
	SV* c_func
	void * p0
	int i1
	double d2
PREINIT:
	void *(*func)(void *, int, double);
CODE:
	func   = INT2PTR(void *(*)(void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2);
OUTPUT:
	RETVAL

void
nci_vpid( c_func, p0, i1, d2 )
	SV* c_func
	void * p0
	int i1
	double d2
PREINIT:
	void(*func)(void *, int, double);
CODE:
	func   = INT2PTR(void(*)(void *, int, double), SvIV(c_func) );
	(*func)(p0, i1, d2);

double
nci_dpid( c_func, p0, i1, d2 )
	SV* c_func
	void * p0
	int i1
	double d2
PREINIT:
	double(*func)(void *, int, double);
CODE:
	func   = INT2PTR(double(*)(void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2);
OUTPUT:
	RETVAL

short
nci_spid( c_func, p0, i1, d2 )
	SV* c_func
	void * p0
	int i1
	double d2
PREINIT:
	short(*func)(void *, int, double);
CODE:
	func   = INT2PTR(short(*)(void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2);
OUTPUT:
	RETVAL

float
nci_fpid( c_func, p0, i1, d2 )
	SV* c_func
	void * p0
	int i1
	double d2
PREINIT:
	float(*func)(void *, int, double);
CODE:
	func   = INT2PTR(float(*)(void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2);
OUTPUT:
	RETVAL

char *
nci_tpid( c_func, p0, i1, d2 )
	SV* c_func
	void * p0
	int i1
	double d2
PREINIT:
	char *(*func)(void *, int, double);
CODE:
	func   = INT2PTR(char *(*)(void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2);
OUTPUT:
	RETVAL

int
nci_ipid( c_func, p0, i1, d2 )
	SV* c_func
	void * p0
	int i1
	double d2
PREINIT:
	int(*func)(void *, int, double);
CODE:
	func   = INT2PTR(int(*)(void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2);
OUTPUT:
	RETVAL

void *
nci_pvid( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvid( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvid( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svid( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvid( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvid( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivid( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdid( c_func, d0, i1, d2 )
	SV* c_func
	double d0
	int i1
	double d2
PREINIT:
	void *(*func)(double, int, double);
CODE:
	func   = INT2PTR(void *(*)(double, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2);
OUTPUT:
	RETVAL

void
nci_vdid( c_func, d0, i1, d2 )
	SV* c_func
	double d0
	int i1
	double d2
PREINIT:
	void(*func)(double, int, double);
CODE:
	func   = INT2PTR(void(*)(double, int, double), SvIV(c_func) );
	(*func)(d0, i1, d2);

double
nci_ddid( c_func, d0, i1, d2 )
	SV* c_func
	double d0
	int i1
	double d2
PREINIT:
	double(*func)(double, int, double);
CODE:
	func   = INT2PTR(double(*)(double, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2);
OUTPUT:
	RETVAL

short
nci_sdid( c_func, d0, i1, d2 )
	SV* c_func
	double d0
	int i1
	double d2
PREINIT:
	short(*func)(double, int, double);
CODE:
	func   = INT2PTR(short(*)(double, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2);
OUTPUT:
	RETVAL

float
nci_fdid( c_func, d0, i1, d2 )
	SV* c_func
	double d0
	int i1
	double d2
PREINIT:
	float(*func)(double, int, double);
CODE:
	func   = INT2PTR(float(*)(double, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2);
OUTPUT:
	RETVAL

char *
nci_tdid( c_func, d0, i1, d2 )
	SV* c_func
	double d0
	int i1
	double d2
PREINIT:
	char *(*func)(double, int, double);
CODE:
	func   = INT2PTR(char *(*)(double, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2);
OUTPUT:
	RETVAL

int
nci_idid( c_func, d0, i1, d2 )
	SV* c_func
	double d0
	int i1
	double d2
PREINIT:
	int(*func)(double, int, double);
CODE:
	func   = INT2PTR(int(*)(double, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2);
OUTPUT:
	RETVAL

void *
nci_psid( c_func, s0, i1, d2 )
	SV* c_func
	short s0
	int i1
	double d2
PREINIT:
	void *(*func)(short, int, double);
CODE:
	func   = INT2PTR(void *(*)(short, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2);
OUTPUT:
	RETVAL

void
nci_vsid( c_func, s0, i1, d2 )
	SV* c_func
	short s0
	int i1
	double d2
PREINIT:
	void(*func)(short, int, double);
CODE:
	func   = INT2PTR(void(*)(short, int, double), SvIV(c_func) );
	(*func)(s0, i1, d2);

double
nci_dsid( c_func, s0, i1, d2 )
	SV* c_func
	short s0
	int i1
	double d2
PREINIT:
	double(*func)(short, int, double);
CODE:
	func   = INT2PTR(double(*)(short, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2);
OUTPUT:
	RETVAL

short
nci_ssid( c_func, s0, i1, d2 )
	SV* c_func
	short s0
	int i1
	double d2
PREINIT:
	short(*func)(short, int, double);
CODE:
	func   = INT2PTR(short(*)(short, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2);
OUTPUT:
	RETVAL

float
nci_fsid( c_func, s0, i1, d2 )
	SV* c_func
	short s0
	int i1
	double d2
PREINIT:
	float(*func)(short, int, double);
CODE:
	func   = INT2PTR(float(*)(short, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2);
OUTPUT:
	RETVAL

char *
nci_tsid( c_func, s0, i1, d2 )
	SV* c_func
	short s0
	int i1
	double d2
PREINIT:
	char *(*func)(short, int, double);
CODE:
	func   = INT2PTR(char *(*)(short, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2);
OUTPUT:
	RETVAL

int
nci_isid( c_func, s0, i1, d2 )
	SV* c_func
	short s0
	int i1
	double d2
PREINIT:
	int(*func)(short, int, double);
CODE:
	func   = INT2PTR(int(*)(short, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2);
OUTPUT:
	RETVAL

void *
nci_pfid( c_func, f0, i1, d2 )
	SV* c_func
	float f0
	int i1
	double d2
PREINIT:
	void *(*func)(float, int, double);
CODE:
	func   = INT2PTR(void *(*)(float, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2);
OUTPUT:
	RETVAL

void
nci_vfid( c_func, f0, i1, d2 )
	SV* c_func
	float f0
	int i1
	double d2
PREINIT:
	void(*func)(float, int, double);
CODE:
	func   = INT2PTR(void(*)(float, int, double), SvIV(c_func) );
	(*func)(f0, i1, d2);

double
nci_dfid( c_func, f0, i1, d2 )
	SV* c_func
	float f0
	int i1
	double d2
PREINIT:
	double(*func)(float, int, double);
CODE:
	func   = INT2PTR(double(*)(float, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2);
OUTPUT:
	RETVAL

short
nci_sfid( c_func, f0, i1, d2 )
	SV* c_func
	float f0
	int i1
	double d2
PREINIT:
	short(*func)(float, int, double);
CODE:
	func   = INT2PTR(short(*)(float, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2);
OUTPUT:
	RETVAL

float
nci_ffid( c_func, f0, i1, d2 )
	SV* c_func
	float f0
	int i1
	double d2
PREINIT:
	float(*func)(float, int, double);
CODE:
	func   = INT2PTR(float(*)(float, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2);
OUTPUT:
	RETVAL

char *
nci_tfid( c_func, f0, i1, d2 )
	SV* c_func
	float f0
	int i1
	double d2
PREINIT:
	char *(*func)(float, int, double);
CODE:
	func   = INT2PTR(char *(*)(float, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2);
OUTPUT:
	RETVAL

int
nci_ifid( c_func, f0, i1, d2 )
	SV* c_func
	float f0
	int i1
	double d2
PREINIT:
	int(*func)(float, int, double);
CODE:
	func   = INT2PTR(int(*)(float, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2);
OUTPUT:
	RETVAL

void *
nci_ptid( c_func, t0, i1, d2 )
	SV* c_func
	char * t0
	int i1
	double d2
PREINIT:
	void *(*func)(char *, int, double);
CODE:
	func   = INT2PTR(void *(*)(char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2);
OUTPUT:
	RETVAL

void
nci_vtid( c_func, t0, i1, d2 )
	SV* c_func
	char * t0
	int i1
	double d2
PREINIT:
	void(*func)(char *, int, double);
CODE:
	func   = INT2PTR(void(*)(char *, int, double), SvIV(c_func) );
	(*func)(t0, i1, d2);

double
nci_dtid( c_func, t0, i1, d2 )
	SV* c_func
	char * t0
	int i1
	double d2
PREINIT:
	double(*func)(char *, int, double);
CODE:
	func   = INT2PTR(double(*)(char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2);
OUTPUT:
	RETVAL

short
nci_stid( c_func, t0, i1, d2 )
	SV* c_func
	char * t0
	int i1
	double d2
PREINIT:
	short(*func)(char *, int, double);
CODE:
	func   = INT2PTR(short(*)(char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2);
OUTPUT:
	RETVAL

float
nci_ftid( c_func, t0, i1, d2 )
	SV* c_func
	char * t0
	int i1
	double d2
PREINIT:
	float(*func)(char *, int, double);
CODE:
	func   = INT2PTR(float(*)(char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2);
OUTPUT:
	RETVAL

char *
nci_ttid( c_func, t0, i1, d2 )
	SV* c_func
	char * t0
	int i1
	double d2
PREINIT:
	char *(*func)(char *, int, double);
CODE:
	func   = INT2PTR(char *(*)(char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2);
OUTPUT:
	RETVAL

int
nci_itid( c_func, t0, i1, d2 )
	SV* c_func
	char * t0
	int i1
	double d2
PREINIT:
	int(*func)(char *, int, double);
CODE:
	func   = INT2PTR(int(*)(char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2);
OUTPUT:
	RETVAL

void *
nci_piid( c_func, i0, i1, d2 )
	SV* c_func
	int i0
	int i1
	double d2
PREINIT:
	void *(*func)(int, int, double);
CODE:
	func   = INT2PTR(void *(*)(int, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2);
OUTPUT:
	RETVAL

void
nci_viid( c_func, i0, i1, d2 )
	SV* c_func
	int i0
	int i1
	double d2
PREINIT:
	void(*func)(int, int, double);
CODE:
	func   = INT2PTR(void(*)(int, int, double), SvIV(c_func) );
	(*func)(i0, i1, d2);

double
nci_diid( c_func, i0, i1, d2 )
	SV* c_func
	int i0
	int i1
	double d2
PREINIT:
	double(*func)(int, int, double);
CODE:
	func   = INT2PTR(double(*)(int, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2);
OUTPUT:
	RETVAL

short
nci_siid( c_func, i0, i1, d2 )
	SV* c_func
	int i0
	int i1
	double d2
PREINIT:
	short(*func)(int, int, double);
CODE:
	func   = INT2PTR(short(*)(int, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2);
OUTPUT:
	RETVAL

float
nci_fiid( c_func, i0, i1, d2 )
	SV* c_func
	int i0
	int i1
	double d2
PREINIT:
	float(*func)(int, int, double);
CODE:
	func   = INT2PTR(float(*)(int, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2);
OUTPUT:
	RETVAL

char *
nci_tiid( c_func, i0, i1, d2 )
	SV* c_func
	int i0
	int i1
	double d2
PREINIT:
	char *(*func)(int, int, double);
CODE:
	func   = INT2PTR(char *(*)(int, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2);
OUTPUT:
	RETVAL

int
nci_iiid( c_func, i0, i1, d2 )
	SV* c_func
	int i0
	int i1
	double d2
PREINIT:
	int(*func)(int, int, double);
CODE:
	func   = INT2PTR(int(*)(int, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2);
OUTPUT:
	RETVAL

void *
nci_ppps( c_func, p0, p1, s2 )
	SV* c_func
	void * p0
	void * p1
	short s2
PREINIT:
	void *(*func)(void *, void *, short);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2);
OUTPUT:
	RETVAL

void
nci_vpps( c_func, p0, p1, s2 )
	SV* c_func
	void * p0
	void * p1
	short s2
PREINIT:
	void(*func)(void *, void *, short);
CODE:
	func   = INT2PTR(void(*)(void *, void *, short), SvIV(c_func) );
	(*func)(p0, p1, s2);

double
nci_dpps( c_func, p0, p1, s2 )
	SV* c_func
	void * p0
	void * p1
	short s2
PREINIT:
	double(*func)(void *, void *, short);
CODE:
	func   = INT2PTR(double(*)(void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2);
OUTPUT:
	RETVAL

short
nci_spps( c_func, p0, p1, s2 )
	SV* c_func
	void * p0
	void * p1
	short s2
PREINIT:
	short(*func)(void *, void *, short);
CODE:
	func   = INT2PTR(short(*)(void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2);
OUTPUT:
	RETVAL

float
nci_fpps( c_func, p0, p1, s2 )
	SV* c_func
	void * p0
	void * p1
	short s2
PREINIT:
	float(*func)(void *, void *, short);
CODE:
	func   = INT2PTR(float(*)(void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2);
OUTPUT:
	RETVAL

char *
nci_tpps( c_func, p0, p1, s2 )
	SV* c_func
	void * p0
	void * p1
	short s2
PREINIT:
	char *(*func)(void *, void *, short);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2);
OUTPUT:
	RETVAL

int
nci_ipps( c_func, p0, p1, s2 )
	SV* c_func
	void * p0
	void * p1
	short s2
PREINIT:
	int(*func)(void *, void *, short);
CODE:
	func   = INT2PTR(int(*)(void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2);
OUTPUT:
	RETVAL

void *
nci_pvps( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvps( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvps( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svps( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvps( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvps( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivps( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdps( c_func, d0, p1, s2 )
	SV* c_func
	double d0
	void * p1
	short s2
PREINIT:
	void *(*func)(double, void *, short);
CODE:
	func   = INT2PTR(void *(*)(double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2);
OUTPUT:
	RETVAL

void
nci_vdps( c_func, d0, p1, s2 )
	SV* c_func
	double d0
	void * p1
	short s2
PREINIT:
	void(*func)(double, void *, short);
CODE:
	func   = INT2PTR(void(*)(double, void *, short), SvIV(c_func) );
	(*func)(d0, p1, s2);

double
nci_ddps( c_func, d0, p1, s2 )
	SV* c_func
	double d0
	void * p1
	short s2
PREINIT:
	double(*func)(double, void *, short);
CODE:
	func   = INT2PTR(double(*)(double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2);
OUTPUT:
	RETVAL

short
nci_sdps( c_func, d0, p1, s2 )
	SV* c_func
	double d0
	void * p1
	short s2
PREINIT:
	short(*func)(double, void *, short);
CODE:
	func   = INT2PTR(short(*)(double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2);
OUTPUT:
	RETVAL

float
nci_fdps( c_func, d0, p1, s2 )
	SV* c_func
	double d0
	void * p1
	short s2
PREINIT:
	float(*func)(double, void *, short);
CODE:
	func   = INT2PTR(float(*)(double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2);
OUTPUT:
	RETVAL

char *
nci_tdps( c_func, d0, p1, s2 )
	SV* c_func
	double d0
	void * p1
	short s2
PREINIT:
	char *(*func)(double, void *, short);
CODE:
	func   = INT2PTR(char *(*)(double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2);
OUTPUT:
	RETVAL

int
nci_idps( c_func, d0, p1, s2 )
	SV* c_func
	double d0
	void * p1
	short s2
PREINIT:
	int(*func)(double, void *, short);
CODE:
	func   = INT2PTR(int(*)(double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2);
OUTPUT:
	RETVAL

void *
nci_psps( c_func, s0, p1, s2 )
	SV* c_func
	short s0
	void * p1
	short s2
PREINIT:
	void *(*func)(short, void *, short);
CODE:
	func   = INT2PTR(void *(*)(short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2);
OUTPUT:
	RETVAL

void
nci_vsps( c_func, s0, p1, s2 )
	SV* c_func
	short s0
	void * p1
	short s2
PREINIT:
	void(*func)(short, void *, short);
CODE:
	func   = INT2PTR(void(*)(short, void *, short), SvIV(c_func) );
	(*func)(s0, p1, s2);

double
nci_dsps( c_func, s0, p1, s2 )
	SV* c_func
	short s0
	void * p1
	short s2
PREINIT:
	double(*func)(short, void *, short);
CODE:
	func   = INT2PTR(double(*)(short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2);
OUTPUT:
	RETVAL

short
nci_ssps( c_func, s0, p1, s2 )
	SV* c_func
	short s0
	void * p1
	short s2
PREINIT:
	short(*func)(short, void *, short);
CODE:
	func   = INT2PTR(short(*)(short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2);
OUTPUT:
	RETVAL

float
nci_fsps( c_func, s0, p1, s2 )
	SV* c_func
	short s0
	void * p1
	short s2
PREINIT:
	float(*func)(short, void *, short);
CODE:
	func   = INT2PTR(float(*)(short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2);
OUTPUT:
	RETVAL

char *
nci_tsps( c_func, s0, p1, s2 )
	SV* c_func
	short s0
	void * p1
	short s2
PREINIT:
	char *(*func)(short, void *, short);
CODE:
	func   = INT2PTR(char *(*)(short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2);
OUTPUT:
	RETVAL

int
nci_isps( c_func, s0, p1, s2 )
	SV* c_func
	short s0
	void * p1
	short s2
PREINIT:
	int(*func)(short, void *, short);
CODE:
	func   = INT2PTR(int(*)(short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2);
OUTPUT:
	RETVAL

void *
nci_pfps( c_func, f0, p1, s2 )
	SV* c_func
	float f0
	void * p1
	short s2
PREINIT:
	void *(*func)(float, void *, short);
CODE:
	func   = INT2PTR(void *(*)(float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2);
OUTPUT:
	RETVAL

void
nci_vfps( c_func, f0, p1, s2 )
	SV* c_func
	float f0
	void * p1
	short s2
PREINIT:
	void(*func)(float, void *, short);
CODE:
	func   = INT2PTR(void(*)(float, void *, short), SvIV(c_func) );
	(*func)(f0, p1, s2);

double
nci_dfps( c_func, f0, p1, s2 )
	SV* c_func
	float f0
	void * p1
	short s2
PREINIT:
	double(*func)(float, void *, short);
CODE:
	func   = INT2PTR(double(*)(float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2);
OUTPUT:
	RETVAL

short
nci_sfps( c_func, f0, p1, s2 )
	SV* c_func
	float f0
	void * p1
	short s2
PREINIT:
	short(*func)(float, void *, short);
CODE:
	func   = INT2PTR(short(*)(float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2);
OUTPUT:
	RETVAL

float
nci_ffps( c_func, f0, p1, s2 )
	SV* c_func
	float f0
	void * p1
	short s2
PREINIT:
	float(*func)(float, void *, short);
CODE:
	func   = INT2PTR(float(*)(float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2);
OUTPUT:
	RETVAL

char *
nci_tfps( c_func, f0, p1, s2 )
	SV* c_func
	float f0
	void * p1
	short s2
PREINIT:
	char *(*func)(float, void *, short);
CODE:
	func   = INT2PTR(char *(*)(float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2);
OUTPUT:
	RETVAL

int
nci_ifps( c_func, f0, p1, s2 )
	SV* c_func
	float f0
	void * p1
	short s2
PREINIT:
	int(*func)(float, void *, short);
CODE:
	func   = INT2PTR(int(*)(float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2);
OUTPUT:
	RETVAL

void *
nci_ptps( c_func, t0, p1, s2 )
	SV* c_func
	char * t0
	void * p1
	short s2
PREINIT:
	void *(*func)(char *, void *, short);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2);
OUTPUT:
	RETVAL

void
nci_vtps( c_func, t0, p1, s2 )
	SV* c_func
	char * t0
	void * p1
	short s2
PREINIT:
	void(*func)(char *, void *, short);
CODE:
	func   = INT2PTR(void(*)(char *, void *, short), SvIV(c_func) );
	(*func)(t0, p1, s2);

double
nci_dtps( c_func, t0, p1, s2 )
	SV* c_func
	char * t0
	void * p1
	short s2
PREINIT:
	double(*func)(char *, void *, short);
CODE:
	func   = INT2PTR(double(*)(char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2);
OUTPUT:
	RETVAL

short
nci_stps( c_func, t0, p1, s2 )
	SV* c_func
	char * t0
	void * p1
	short s2
PREINIT:
	short(*func)(char *, void *, short);
CODE:
	func   = INT2PTR(short(*)(char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2);
OUTPUT:
	RETVAL

float
nci_ftps( c_func, t0, p1, s2 )
	SV* c_func
	char * t0
	void * p1
	short s2
PREINIT:
	float(*func)(char *, void *, short);
CODE:
	func   = INT2PTR(float(*)(char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2);
OUTPUT:
	RETVAL

char *
nci_ttps( c_func, t0, p1, s2 )
	SV* c_func
	char * t0
	void * p1
	short s2
PREINIT:
	char *(*func)(char *, void *, short);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2);
OUTPUT:
	RETVAL

int
nci_itps( c_func, t0, p1, s2 )
	SV* c_func
	char * t0
	void * p1
	short s2
PREINIT:
	int(*func)(char *, void *, short);
CODE:
	func   = INT2PTR(int(*)(char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2);
OUTPUT:
	RETVAL

void *
nci_pips( c_func, i0, p1, s2 )
	SV* c_func
	int i0
	void * p1
	short s2
PREINIT:
	void *(*func)(int, void *, short);
CODE:
	func   = INT2PTR(void *(*)(int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2);
OUTPUT:
	RETVAL

void
nci_vips( c_func, i0, p1, s2 )
	SV* c_func
	int i0
	void * p1
	short s2
PREINIT:
	void(*func)(int, void *, short);
CODE:
	func   = INT2PTR(void(*)(int, void *, short), SvIV(c_func) );
	(*func)(i0, p1, s2);

double
nci_dips( c_func, i0, p1, s2 )
	SV* c_func
	int i0
	void * p1
	short s2
PREINIT:
	double(*func)(int, void *, short);
CODE:
	func   = INT2PTR(double(*)(int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2);
OUTPUT:
	RETVAL

short
nci_sips( c_func, i0, p1, s2 )
	SV* c_func
	int i0
	void * p1
	short s2
PREINIT:
	short(*func)(int, void *, short);
CODE:
	func   = INT2PTR(short(*)(int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2);
OUTPUT:
	RETVAL

float
nci_fips( c_func, i0, p1, s2 )
	SV* c_func
	int i0
	void * p1
	short s2
PREINIT:
	float(*func)(int, void *, short);
CODE:
	func   = INT2PTR(float(*)(int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2);
OUTPUT:
	RETVAL

char *
nci_tips( c_func, i0, p1, s2 )
	SV* c_func
	int i0
	void * p1
	short s2
PREINIT:
	char *(*func)(int, void *, short);
CODE:
	func   = INT2PTR(char *(*)(int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2);
OUTPUT:
	RETVAL

int
nci_iips( c_func, i0, p1, s2 )
	SV* c_func
	int i0
	void * p1
	short s2
PREINIT:
	int(*func)(int, void *, short);
CODE:
	func   = INT2PTR(int(*)(int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2);
OUTPUT:
	RETVAL

void *
nci_ppds( c_func, p0, d1, s2 )
	SV* c_func
	void * p0
	double d1
	short s2
PREINIT:
	void *(*func)(void *, double, short);
CODE:
	func   = INT2PTR(void *(*)(void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2);
OUTPUT:
	RETVAL

void
nci_vpds( c_func, p0, d1, s2 )
	SV* c_func
	void * p0
	double d1
	short s2
PREINIT:
	void(*func)(void *, double, short);
CODE:
	func   = INT2PTR(void(*)(void *, double, short), SvIV(c_func) );
	(*func)(p0, d1, s2);

double
nci_dpds( c_func, p0, d1, s2 )
	SV* c_func
	void * p0
	double d1
	short s2
PREINIT:
	double(*func)(void *, double, short);
CODE:
	func   = INT2PTR(double(*)(void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2);
OUTPUT:
	RETVAL

short
nci_spds( c_func, p0, d1, s2 )
	SV* c_func
	void * p0
	double d1
	short s2
PREINIT:
	short(*func)(void *, double, short);
CODE:
	func   = INT2PTR(short(*)(void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2);
OUTPUT:
	RETVAL

float
nci_fpds( c_func, p0, d1, s2 )
	SV* c_func
	void * p0
	double d1
	short s2
PREINIT:
	float(*func)(void *, double, short);
CODE:
	func   = INT2PTR(float(*)(void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2);
OUTPUT:
	RETVAL

char *
nci_tpds( c_func, p0, d1, s2 )
	SV* c_func
	void * p0
	double d1
	short s2
PREINIT:
	char *(*func)(void *, double, short);
CODE:
	func   = INT2PTR(char *(*)(void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2);
OUTPUT:
	RETVAL

int
nci_ipds( c_func, p0, d1, s2 )
	SV* c_func
	void * p0
	double d1
	short s2
PREINIT:
	int(*func)(void *, double, short);
CODE:
	func   = INT2PTR(int(*)(void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2);
OUTPUT:
	RETVAL

void *
nci_pvds( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvds( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvds( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svds( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvds( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvds( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivds( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdds( c_func, d0, d1, s2 )
	SV* c_func
	double d0
	double d1
	short s2
PREINIT:
	void *(*func)(double, double, short);
CODE:
	func   = INT2PTR(void *(*)(double, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2);
OUTPUT:
	RETVAL

void
nci_vdds( c_func, d0, d1, s2 )
	SV* c_func
	double d0
	double d1
	short s2
PREINIT:
	void(*func)(double, double, short);
CODE:
	func   = INT2PTR(void(*)(double, double, short), SvIV(c_func) );
	(*func)(d0, d1, s2);

double
nci_ddds( c_func, d0, d1, s2 )
	SV* c_func
	double d0
	double d1
	short s2
PREINIT:
	double(*func)(double, double, short);
CODE:
	func   = INT2PTR(double(*)(double, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2);
OUTPUT:
	RETVAL

short
nci_sdds( c_func, d0, d1, s2 )
	SV* c_func
	double d0
	double d1
	short s2
PREINIT:
	short(*func)(double, double, short);
CODE:
	func   = INT2PTR(short(*)(double, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2);
OUTPUT:
	RETVAL

float
nci_fdds( c_func, d0, d1, s2 )
	SV* c_func
	double d0
	double d1
	short s2
PREINIT:
	float(*func)(double, double, short);
CODE:
	func   = INT2PTR(float(*)(double, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2);
OUTPUT:
	RETVAL

char *
nci_tdds( c_func, d0, d1, s2 )
	SV* c_func
	double d0
	double d1
	short s2
PREINIT:
	char *(*func)(double, double, short);
CODE:
	func   = INT2PTR(char *(*)(double, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2);
OUTPUT:
	RETVAL

int
nci_idds( c_func, d0, d1, s2 )
	SV* c_func
	double d0
	double d1
	short s2
PREINIT:
	int(*func)(double, double, short);
CODE:
	func   = INT2PTR(int(*)(double, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2);
OUTPUT:
	RETVAL

void *
nci_psds( c_func, s0, d1, s2 )
	SV* c_func
	short s0
	double d1
	short s2
PREINIT:
	void *(*func)(short, double, short);
CODE:
	func   = INT2PTR(void *(*)(short, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2);
OUTPUT:
	RETVAL

void
nci_vsds( c_func, s0, d1, s2 )
	SV* c_func
	short s0
	double d1
	short s2
PREINIT:
	void(*func)(short, double, short);
CODE:
	func   = INT2PTR(void(*)(short, double, short), SvIV(c_func) );
	(*func)(s0, d1, s2);

double
nci_dsds( c_func, s0, d1, s2 )
	SV* c_func
	short s0
	double d1
	short s2
PREINIT:
	double(*func)(short, double, short);
CODE:
	func   = INT2PTR(double(*)(short, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2);
OUTPUT:
	RETVAL

short
nci_ssds( c_func, s0, d1, s2 )
	SV* c_func
	short s0
	double d1
	short s2
PREINIT:
	short(*func)(short, double, short);
CODE:
	func   = INT2PTR(short(*)(short, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2);
OUTPUT:
	RETVAL

float
nci_fsds( c_func, s0, d1, s2 )
	SV* c_func
	short s0
	double d1
	short s2
PREINIT:
	float(*func)(short, double, short);
CODE:
	func   = INT2PTR(float(*)(short, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2);
OUTPUT:
	RETVAL

char *
nci_tsds( c_func, s0, d1, s2 )
	SV* c_func
	short s0
	double d1
	short s2
PREINIT:
	char *(*func)(short, double, short);
CODE:
	func   = INT2PTR(char *(*)(short, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2);
OUTPUT:
	RETVAL

int
nci_isds( c_func, s0, d1, s2 )
	SV* c_func
	short s0
	double d1
	short s2
PREINIT:
	int(*func)(short, double, short);
CODE:
	func   = INT2PTR(int(*)(short, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2);
OUTPUT:
	RETVAL

void *
nci_pfds( c_func, f0, d1, s2 )
	SV* c_func
	float f0
	double d1
	short s2
PREINIT:
	void *(*func)(float, double, short);
CODE:
	func   = INT2PTR(void *(*)(float, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2);
OUTPUT:
	RETVAL

void
nci_vfds( c_func, f0, d1, s2 )
	SV* c_func
	float f0
	double d1
	short s2
PREINIT:
	void(*func)(float, double, short);
CODE:
	func   = INT2PTR(void(*)(float, double, short), SvIV(c_func) );
	(*func)(f0, d1, s2);

double
nci_dfds( c_func, f0, d1, s2 )
	SV* c_func
	float f0
	double d1
	short s2
PREINIT:
	double(*func)(float, double, short);
CODE:
	func   = INT2PTR(double(*)(float, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2);
OUTPUT:
	RETVAL

short
nci_sfds( c_func, f0, d1, s2 )
	SV* c_func
	float f0
	double d1
	short s2
PREINIT:
	short(*func)(float, double, short);
CODE:
	func   = INT2PTR(short(*)(float, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2);
OUTPUT:
	RETVAL

float
nci_ffds( c_func, f0, d1, s2 )
	SV* c_func
	float f0
	double d1
	short s2
PREINIT:
	float(*func)(float, double, short);
CODE:
	func   = INT2PTR(float(*)(float, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2);
OUTPUT:
	RETVAL

char *
nci_tfds( c_func, f0, d1, s2 )
	SV* c_func
	float f0
	double d1
	short s2
PREINIT:
	char *(*func)(float, double, short);
CODE:
	func   = INT2PTR(char *(*)(float, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2);
OUTPUT:
	RETVAL

int
nci_ifds( c_func, f0, d1, s2 )
	SV* c_func
	float f0
	double d1
	short s2
PREINIT:
	int(*func)(float, double, short);
CODE:
	func   = INT2PTR(int(*)(float, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2);
OUTPUT:
	RETVAL

void *
nci_ptds( c_func, t0, d1, s2 )
	SV* c_func
	char * t0
	double d1
	short s2
PREINIT:
	void *(*func)(char *, double, short);
CODE:
	func   = INT2PTR(void *(*)(char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2);
OUTPUT:
	RETVAL

void
nci_vtds( c_func, t0, d1, s2 )
	SV* c_func
	char * t0
	double d1
	short s2
PREINIT:
	void(*func)(char *, double, short);
CODE:
	func   = INT2PTR(void(*)(char *, double, short), SvIV(c_func) );
	(*func)(t0, d1, s2);

double
nci_dtds( c_func, t0, d1, s2 )
	SV* c_func
	char * t0
	double d1
	short s2
PREINIT:
	double(*func)(char *, double, short);
CODE:
	func   = INT2PTR(double(*)(char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2);
OUTPUT:
	RETVAL

short
nci_stds( c_func, t0, d1, s2 )
	SV* c_func
	char * t0
	double d1
	short s2
PREINIT:
	short(*func)(char *, double, short);
CODE:
	func   = INT2PTR(short(*)(char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2);
OUTPUT:
	RETVAL

float
nci_ftds( c_func, t0, d1, s2 )
	SV* c_func
	char * t0
	double d1
	short s2
PREINIT:
	float(*func)(char *, double, short);
CODE:
	func   = INT2PTR(float(*)(char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2);
OUTPUT:
	RETVAL

char *
nci_ttds( c_func, t0, d1, s2 )
	SV* c_func
	char * t0
	double d1
	short s2
PREINIT:
	char *(*func)(char *, double, short);
CODE:
	func   = INT2PTR(char *(*)(char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2);
OUTPUT:
	RETVAL

int
nci_itds( c_func, t0, d1, s2 )
	SV* c_func
	char * t0
	double d1
	short s2
PREINIT:
	int(*func)(char *, double, short);
CODE:
	func   = INT2PTR(int(*)(char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2);
OUTPUT:
	RETVAL

void *
nci_pids( c_func, i0, d1, s2 )
	SV* c_func
	int i0
	double d1
	short s2
PREINIT:
	void *(*func)(int, double, short);
CODE:
	func   = INT2PTR(void *(*)(int, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2);
OUTPUT:
	RETVAL

void
nci_vids( c_func, i0, d1, s2 )
	SV* c_func
	int i0
	double d1
	short s2
PREINIT:
	void(*func)(int, double, short);
CODE:
	func   = INT2PTR(void(*)(int, double, short), SvIV(c_func) );
	(*func)(i0, d1, s2);

double
nci_dids( c_func, i0, d1, s2 )
	SV* c_func
	int i0
	double d1
	short s2
PREINIT:
	double(*func)(int, double, short);
CODE:
	func   = INT2PTR(double(*)(int, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2);
OUTPUT:
	RETVAL

short
nci_sids( c_func, i0, d1, s2 )
	SV* c_func
	int i0
	double d1
	short s2
PREINIT:
	short(*func)(int, double, short);
CODE:
	func   = INT2PTR(short(*)(int, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2);
OUTPUT:
	RETVAL

float
nci_fids( c_func, i0, d1, s2 )
	SV* c_func
	int i0
	double d1
	short s2
PREINIT:
	float(*func)(int, double, short);
CODE:
	func   = INT2PTR(float(*)(int, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2);
OUTPUT:
	RETVAL

char *
nci_tids( c_func, i0, d1, s2 )
	SV* c_func
	int i0
	double d1
	short s2
PREINIT:
	char *(*func)(int, double, short);
CODE:
	func   = INT2PTR(char *(*)(int, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2);
OUTPUT:
	RETVAL

int
nci_iids( c_func, i0, d1, s2 )
	SV* c_func
	int i0
	double d1
	short s2
PREINIT:
	int(*func)(int, double, short);
CODE:
	func   = INT2PTR(int(*)(int, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2);
OUTPUT:
	RETVAL

void *
nci_ppss( c_func, p0, s1, s2 )
	SV* c_func
	void * p0
	short s1
	short s2
PREINIT:
	void *(*func)(void *, short, short);
CODE:
	func   = INT2PTR(void *(*)(void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2);
OUTPUT:
	RETVAL

void
nci_vpss( c_func, p0, s1, s2 )
	SV* c_func
	void * p0
	short s1
	short s2
PREINIT:
	void(*func)(void *, short, short);
CODE:
	func   = INT2PTR(void(*)(void *, short, short), SvIV(c_func) );
	(*func)(p0, s1, s2);

double
nci_dpss( c_func, p0, s1, s2 )
	SV* c_func
	void * p0
	short s1
	short s2
PREINIT:
	double(*func)(void *, short, short);
CODE:
	func   = INT2PTR(double(*)(void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2);
OUTPUT:
	RETVAL

short
nci_spss( c_func, p0, s1, s2 )
	SV* c_func
	void * p0
	short s1
	short s2
PREINIT:
	short(*func)(void *, short, short);
CODE:
	func   = INT2PTR(short(*)(void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2);
OUTPUT:
	RETVAL

float
nci_fpss( c_func, p0, s1, s2 )
	SV* c_func
	void * p0
	short s1
	short s2
PREINIT:
	float(*func)(void *, short, short);
CODE:
	func   = INT2PTR(float(*)(void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2);
OUTPUT:
	RETVAL

char *
nci_tpss( c_func, p0, s1, s2 )
	SV* c_func
	void * p0
	short s1
	short s2
PREINIT:
	char *(*func)(void *, short, short);
CODE:
	func   = INT2PTR(char *(*)(void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2);
OUTPUT:
	RETVAL

int
nci_ipss( c_func, p0, s1, s2 )
	SV* c_func
	void * p0
	short s1
	short s2
PREINIT:
	int(*func)(void *, short, short);
CODE:
	func   = INT2PTR(int(*)(void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2);
OUTPUT:
	RETVAL

void *
nci_pvss( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvss( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvss( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svss( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvss( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvss( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivss( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdss( c_func, d0, s1, s2 )
	SV* c_func
	double d0
	short s1
	short s2
PREINIT:
	void *(*func)(double, short, short);
CODE:
	func   = INT2PTR(void *(*)(double, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2);
OUTPUT:
	RETVAL

void
nci_vdss( c_func, d0, s1, s2 )
	SV* c_func
	double d0
	short s1
	short s2
PREINIT:
	void(*func)(double, short, short);
CODE:
	func   = INT2PTR(void(*)(double, short, short), SvIV(c_func) );
	(*func)(d0, s1, s2);

double
nci_ddss( c_func, d0, s1, s2 )
	SV* c_func
	double d0
	short s1
	short s2
PREINIT:
	double(*func)(double, short, short);
CODE:
	func   = INT2PTR(double(*)(double, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2);
OUTPUT:
	RETVAL

short
nci_sdss( c_func, d0, s1, s2 )
	SV* c_func
	double d0
	short s1
	short s2
PREINIT:
	short(*func)(double, short, short);
CODE:
	func   = INT2PTR(short(*)(double, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2);
OUTPUT:
	RETVAL

float
nci_fdss( c_func, d0, s1, s2 )
	SV* c_func
	double d0
	short s1
	short s2
PREINIT:
	float(*func)(double, short, short);
CODE:
	func   = INT2PTR(float(*)(double, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2);
OUTPUT:
	RETVAL

char *
nci_tdss( c_func, d0, s1, s2 )
	SV* c_func
	double d0
	short s1
	short s2
PREINIT:
	char *(*func)(double, short, short);
CODE:
	func   = INT2PTR(char *(*)(double, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2);
OUTPUT:
	RETVAL

int
nci_idss( c_func, d0, s1, s2 )
	SV* c_func
	double d0
	short s1
	short s2
PREINIT:
	int(*func)(double, short, short);
CODE:
	func   = INT2PTR(int(*)(double, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2);
OUTPUT:
	RETVAL

void *
nci_psss( c_func, s0, s1, s2 )
	SV* c_func
	short s0
	short s1
	short s2
PREINIT:
	void *(*func)(short, short, short);
CODE:
	func   = INT2PTR(void *(*)(short, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2);
OUTPUT:
	RETVAL

void
nci_vsss( c_func, s0, s1, s2 )
	SV* c_func
	short s0
	short s1
	short s2
PREINIT:
	void(*func)(short, short, short);
CODE:
	func   = INT2PTR(void(*)(short, short, short), SvIV(c_func) );
	(*func)(s0, s1, s2);

double
nci_dsss( c_func, s0, s1, s2 )
	SV* c_func
	short s0
	short s1
	short s2
PREINIT:
	double(*func)(short, short, short);
CODE:
	func   = INT2PTR(double(*)(short, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2);
OUTPUT:
	RETVAL

short
nci_ssss( c_func, s0, s1, s2 )
	SV* c_func
	short s0
	short s1
	short s2
PREINIT:
	short(*func)(short, short, short);
CODE:
	func   = INT2PTR(short(*)(short, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2);
OUTPUT:
	RETVAL

float
nci_fsss( c_func, s0, s1, s2 )
	SV* c_func
	short s0
	short s1
	short s2
PREINIT:
	float(*func)(short, short, short);
CODE:
	func   = INT2PTR(float(*)(short, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2);
OUTPUT:
	RETVAL

char *
nci_tsss( c_func, s0, s1, s2 )
	SV* c_func
	short s0
	short s1
	short s2
PREINIT:
	char *(*func)(short, short, short);
CODE:
	func   = INT2PTR(char *(*)(short, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2);
OUTPUT:
	RETVAL

int
nci_isss( c_func, s0, s1, s2 )
	SV* c_func
	short s0
	short s1
	short s2
PREINIT:
	int(*func)(short, short, short);
CODE:
	func   = INT2PTR(int(*)(short, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2);
OUTPUT:
	RETVAL

void *
nci_pfss( c_func, f0, s1, s2 )
	SV* c_func
	float f0
	short s1
	short s2
PREINIT:
	void *(*func)(float, short, short);
CODE:
	func   = INT2PTR(void *(*)(float, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2);
OUTPUT:
	RETVAL

void
nci_vfss( c_func, f0, s1, s2 )
	SV* c_func
	float f0
	short s1
	short s2
PREINIT:
	void(*func)(float, short, short);
CODE:
	func   = INT2PTR(void(*)(float, short, short), SvIV(c_func) );
	(*func)(f0, s1, s2);

double
nci_dfss( c_func, f0, s1, s2 )
	SV* c_func
	float f0
	short s1
	short s2
PREINIT:
	double(*func)(float, short, short);
CODE:
	func   = INT2PTR(double(*)(float, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2);
OUTPUT:
	RETVAL

short
nci_sfss( c_func, f0, s1, s2 )
	SV* c_func
	float f0
	short s1
	short s2
PREINIT:
	short(*func)(float, short, short);
CODE:
	func   = INT2PTR(short(*)(float, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2);
OUTPUT:
	RETVAL

float
nci_ffss( c_func, f0, s1, s2 )
	SV* c_func
	float f0
	short s1
	short s2
PREINIT:
	float(*func)(float, short, short);
CODE:
	func   = INT2PTR(float(*)(float, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2);
OUTPUT:
	RETVAL

char *
nci_tfss( c_func, f0, s1, s2 )
	SV* c_func
	float f0
	short s1
	short s2
PREINIT:
	char *(*func)(float, short, short);
CODE:
	func   = INT2PTR(char *(*)(float, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2);
OUTPUT:
	RETVAL

int
nci_ifss( c_func, f0, s1, s2 )
	SV* c_func
	float f0
	short s1
	short s2
PREINIT:
	int(*func)(float, short, short);
CODE:
	func   = INT2PTR(int(*)(float, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2);
OUTPUT:
	RETVAL

void *
nci_ptss( c_func, t0, s1, s2 )
	SV* c_func
	char * t0
	short s1
	short s2
PREINIT:
	void *(*func)(char *, short, short);
CODE:
	func   = INT2PTR(void *(*)(char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2);
OUTPUT:
	RETVAL

void
nci_vtss( c_func, t0, s1, s2 )
	SV* c_func
	char * t0
	short s1
	short s2
PREINIT:
	void(*func)(char *, short, short);
CODE:
	func   = INT2PTR(void(*)(char *, short, short), SvIV(c_func) );
	(*func)(t0, s1, s2);

double
nci_dtss( c_func, t0, s1, s2 )
	SV* c_func
	char * t0
	short s1
	short s2
PREINIT:
	double(*func)(char *, short, short);
CODE:
	func   = INT2PTR(double(*)(char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2);
OUTPUT:
	RETVAL

short
nci_stss( c_func, t0, s1, s2 )
	SV* c_func
	char * t0
	short s1
	short s2
PREINIT:
	short(*func)(char *, short, short);
CODE:
	func   = INT2PTR(short(*)(char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2);
OUTPUT:
	RETVAL

float
nci_ftss( c_func, t0, s1, s2 )
	SV* c_func
	char * t0
	short s1
	short s2
PREINIT:
	float(*func)(char *, short, short);
CODE:
	func   = INT2PTR(float(*)(char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2);
OUTPUT:
	RETVAL

char *
nci_ttss( c_func, t0, s1, s2 )
	SV* c_func
	char * t0
	short s1
	short s2
PREINIT:
	char *(*func)(char *, short, short);
CODE:
	func   = INT2PTR(char *(*)(char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2);
OUTPUT:
	RETVAL

int
nci_itss( c_func, t0, s1, s2 )
	SV* c_func
	char * t0
	short s1
	short s2
PREINIT:
	int(*func)(char *, short, short);
CODE:
	func   = INT2PTR(int(*)(char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2);
OUTPUT:
	RETVAL

void *
nci_piss( c_func, i0, s1, s2 )
	SV* c_func
	int i0
	short s1
	short s2
PREINIT:
	void *(*func)(int, short, short);
CODE:
	func   = INT2PTR(void *(*)(int, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2);
OUTPUT:
	RETVAL

void
nci_viss( c_func, i0, s1, s2 )
	SV* c_func
	int i0
	short s1
	short s2
PREINIT:
	void(*func)(int, short, short);
CODE:
	func   = INT2PTR(void(*)(int, short, short), SvIV(c_func) );
	(*func)(i0, s1, s2);

double
nci_diss( c_func, i0, s1, s2 )
	SV* c_func
	int i0
	short s1
	short s2
PREINIT:
	double(*func)(int, short, short);
CODE:
	func   = INT2PTR(double(*)(int, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2);
OUTPUT:
	RETVAL

short
nci_siss( c_func, i0, s1, s2 )
	SV* c_func
	int i0
	short s1
	short s2
PREINIT:
	short(*func)(int, short, short);
CODE:
	func   = INT2PTR(short(*)(int, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2);
OUTPUT:
	RETVAL

float
nci_fiss( c_func, i0, s1, s2 )
	SV* c_func
	int i0
	short s1
	short s2
PREINIT:
	float(*func)(int, short, short);
CODE:
	func   = INT2PTR(float(*)(int, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2);
OUTPUT:
	RETVAL

char *
nci_tiss( c_func, i0, s1, s2 )
	SV* c_func
	int i0
	short s1
	short s2
PREINIT:
	char *(*func)(int, short, short);
CODE:
	func   = INT2PTR(char *(*)(int, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2);
OUTPUT:
	RETVAL

int
nci_iiss( c_func, i0, s1, s2 )
	SV* c_func
	int i0
	short s1
	short s2
PREINIT:
	int(*func)(int, short, short);
CODE:
	func   = INT2PTR(int(*)(int, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2);
OUTPUT:
	RETVAL

void *
nci_ppfs( c_func, p0, f1, s2 )
	SV* c_func
	void * p0
	float f1
	short s2
PREINIT:
	void *(*func)(void *, float, short);
CODE:
	func   = INT2PTR(void *(*)(void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2);
OUTPUT:
	RETVAL

void
nci_vpfs( c_func, p0, f1, s2 )
	SV* c_func
	void * p0
	float f1
	short s2
PREINIT:
	void(*func)(void *, float, short);
CODE:
	func   = INT2PTR(void(*)(void *, float, short), SvIV(c_func) );
	(*func)(p0, f1, s2);

double
nci_dpfs( c_func, p0, f1, s2 )
	SV* c_func
	void * p0
	float f1
	short s2
PREINIT:
	double(*func)(void *, float, short);
CODE:
	func   = INT2PTR(double(*)(void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2);
OUTPUT:
	RETVAL

short
nci_spfs( c_func, p0, f1, s2 )
	SV* c_func
	void * p0
	float f1
	short s2
PREINIT:
	short(*func)(void *, float, short);
CODE:
	func   = INT2PTR(short(*)(void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2);
OUTPUT:
	RETVAL

float
nci_fpfs( c_func, p0, f1, s2 )
	SV* c_func
	void * p0
	float f1
	short s2
PREINIT:
	float(*func)(void *, float, short);
CODE:
	func   = INT2PTR(float(*)(void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2);
OUTPUT:
	RETVAL

char *
nci_tpfs( c_func, p0, f1, s2 )
	SV* c_func
	void * p0
	float f1
	short s2
PREINIT:
	char *(*func)(void *, float, short);
CODE:
	func   = INT2PTR(char *(*)(void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2);
OUTPUT:
	RETVAL

int
nci_ipfs( c_func, p0, f1, s2 )
	SV* c_func
	void * p0
	float f1
	short s2
PREINIT:
	int(*func)(void *, float, short);
CODE:
	func   = INT2PTR(int(*)(void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2);
OUTPUT:
	RETVAL

void *
nci_pvfs( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvfs( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvfs( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svfs( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvfs( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvfs( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivfs( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdfs( c_func, d0, f1, s2 )
	SV* c_func
	double d0
	float f1
	short s2
PREINIT:
	void *(*func)(double, float, short);
CODE:
	func   = INT2PTR(void *(*)(double, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2);
OUTPUT:
	RETVAL

void
nci_vdfs( c_func, d0, f1, s2 )
	SV* c_func
	double d0
	float f1
	short s2
PREINIT:
	void(*func)(double, float, short);
CODE:
	func   = INT2PTR(void(*)(double, float, short), SvIV(c_func) );
	(*func)(d0, f1, s2);

double
nci_ddfs( c_func, d0, f1, s2 )
	SV* c_func
	double d0
	float f1
	short s2
PREINIT:
	double(*func)(double, float, short);
CODE:
	func   = INT2PTR(double(*)(double, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2);
OUTPUT:
	RETVAL

short
nci_sdfs( c_func, d0, f1, s2 )
	SV* c_func
	double d0
	float f1
	short s2
PREINIT:
	short(*func)(double, float, short);
CODE:
	func   = INT2PTR(short(*)(double, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2);
OUTPUT:
	RETVAL

float
nci_fdfs( c_func, d0, f1, s2 )
	SV* c_func
	double d0
	float f1
	short s2
PREINIT:
	float(*func)(double, float, short);
CODE:
	func   = INT2PTR(float(*)(double, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2);
OUTPUT:
	RETVAL

char *
nci_tdfs( c_func, d0, f1, s2 )
	SV* c_func
	double d0
	float f1
	short s2
PREINIT:
	char *(*func)(double, float, short);
CODE:
	func   = INT2PTR(char *(*)(double, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2);
OUTPUT:
	RETVAL

int
nci_idfs( c_func, d0, f1, s2 )
	SV* c_func
	double d0
	float f1
	short s2
PREINIT:
	int(*func)(double, float, short);
CODE:
	func   = INT2PTR(int(*)(double, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2);
OUTPUT:
	RETVAL

void *
nci_psfs( c_func, s0, f1, s2 )
	SV* c_func
	short s0
	float f1
	short s2
PREINIT:
	void *(*func)(short, float, short);
CODE:
	func   = INT2PTR(void *(*)(short, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2);
OUTPUT:
	RETVAL

void
nci_vsfs( c_func, s0, f1, s2 )
	SV* c_func
	short s0
	float f1
	short s2
PREINIT:
	void(*func)(short, float, short);
CODE:
	func   = INT2PTR(void(*)(short, float, short), SvIV(c_func) );
	(*func)(s0, f1, s2);

double
nci_dsfs( c_func, s0, f1, s2 )
	SV* c_func
	short s0
	float f1
	short s2
PREINIT:
	double(*func)(short, float, short);
CODE:
	func   = INT2PTR(double(*)(short, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2);
OUTPUT:
	RETVAL

short
nci_ssfs( c_func, s0, f1, s2 )
	SV* c_func
	short s0
	float f1
	short s2
PREINIT:
	short(*func)(short, float, short);
CODE:
	func   = INT2PTR(short(*)(short, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2);
OUTPUT:
	RETVAL

float
nci_fsfs( c_func, s0, f1, s2 )
	SV* c_func
	short s0
	float f1
	short s2
PREINIT:
	float(*func)(short, float, short);
CODE:
	func   = INT2PTR(float(*)(short, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2);
OUTPUT:
	RETVAL

char *
nci_tsfs( c_func, s0, f1, s2 )
	SV* c_func
	short s0
	float f1
	short s2
PREINIT:
	char *(*func)(short, float, short);
CODE:
	func   = INT2PTR(char *(*)(short, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2);
OUTPUT:
	RETVAL

int
nci_isfs( c_func, s0, f1, s2 )
	SV* c_func
	short s0
	float f1
	short s2
PREINIT:
	int(*func)(short, float, short);
CODE:
	func   = INT2PTR(int(*)(short, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2);
OUTPUT:
	RETVAL

void *
nci_pffs( c_func, f0, f1, s2 )
	SV* c_func
	float f0
	float f1
	short s2
PREINIT:
	void *(*func)(float, float, short);
CODE:
	func   = INT2PTR(void *(*)(float, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2);
OUTPUT:
	RETVAL

void
nci_vffs( c_func, f0, f1, s2 )
	SV* c_func
	float f0
	float f1
	short s2
PREINIT:
	void(*func)(float, float, short);
CODE:
	func   = INT2PTR(void(*)(float, float, short), SvIV(c_func) );
	(*func)(f0, f1, s2);

double
nci_dffs( c_func, f0, f1, s2 )
	SV* c_func
	float f0
	float f1
	short s2
PREINIT:
	double(*func)(float, float, short);
CODE:
	func   = INT2PTR(double(*)(float, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2);
OUTPUT:
	RETVAL

short
nci_sffs( c_func, f0, f1, s2 )
	SV* c_func
	float f0
	float f1
	short s2
PREINIT:
	short(*func)(float, float, short);
CODE:
	func   = INT2PTR(short(*)(float, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2);
OUTPUT:
	RETVAL

float
nci_fffs( c_func, f0, f1, s2 )
	SV* c_func
	float f0
	float f1
	short s2
PREINIT:
	float(*func)(float, float, short);
CODE:
	func   = INT2PTR(float(*)(float, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2);
OUTPUT:
	RETVAL

char *
nci_tffs( c_func, f0, f1, s2 )
	SV* c_func
	float f0
	float f1
	short s2
PREINIT:
	char *(*func)(float, float, short);
CODE:
	func   = INT2PTR(char *(*)(float, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2);
OUTPUT:
	RETVAL

int
nci_iffs( c_func, f0, f1, s2 )
	SV* c_func
	float f0
	float f1
	short s2
PREINIT:
	int(*func)(float, float, short);
CODE:
	func   = INT2PTR(int(*)(float, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2);
OUTPUT:
	RETVAL

void *
nci_ptfs( c_func, t0, f1, s2 )
	SV* c_func
	char * t0
	float f1
	short s2
PREINIT:
	void *(*func)(char *, float, short);
CODE:
	func   = INT2PTR(void *(*)(char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2);
OUTPUT:
	RETVAL

void
nci_vtfs( c_func, t0, f1, s2 )
	SV* c_func
	char * t0
	float f1
	short s2
PREINIT:
	void(*func)(char *, float, short);
CODE:
	func   = INT2PTR(void(*)(char *, float, short), SvIV(c_func) );
	(*func)(t0, f1, s2);

double
nci_dtfs( c_func, t0, f1, s2 )
	SV* c_func
	char * t0
	float f1
	short s2
PREINIT:
	double(*func)(char *, float, short);
CODE:
	func   = INT2PTR(double(*)(char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2);
OUTPUT:
	RETVAL

short
nci_stfs( c_func, t0, f1, s2 )
	SV* c_func
	char * t0
	float f1
	short s2
PREINIT:
	short(*func)(char *, float, short);
CODE:
	func   = INT2PTR(short(*)(char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2);
OUTPUT:
	RETVAL

float
nci_ftfs( c_func, t0, f1, s2 )
	SV* c_func
	char * t0
	float f1
	short s2
PREINIT:
	float(*func)(char *, float, short);
CODE:
	func   = INT2PTR(float(*)(char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2);
OUTPUT:
	RETVAL

char *
nci_ttfs( c_func, t0, f1, s2 )
	SV* c_func
	char * t0
	float f1
	short s2
PREINIT:
	char *(*func)(char *, float, short);
CODE:
	func   = INT2PTR(char *(*)(char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2);
OUTPUT:
	RETVAL

int
nci_itfs( c_func, t0, f1, s2 )
	SV* c_func
	char * t0
	float f1
	short s2
PREINIT:
	int(*func)(char *, float, short);
CODE:
	func   = INT2PTR(int(*)(char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2);
OUTPUT:
	RETVAL

void *
nci_pifs( c_func, i0, f1, s2 )
	SV* c_func
	int i0
	float f1
	short s2
PREINIT:
	void *(*func)(int, float, short);
CODE:
	func   = INT2PTR(void *(*)(int, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2);
OUTPUT:
	RETVAL

void
nci_vifs( c_func, i0, f1, s2 )
	SV* c_func
	int i0
	float f1
	short s2
PREINIT:
	void(*func)(int, float, short);
CODE:
	func   = INT2PTR(void(*)(int, float, short), SvIV(c_func) );
	(*func)(i0, f1, s2);

double
nci_difs( c_func, i0, f1, s2 )
	SV* c_func
	int i0
	float f1
	short s2
PREINIT:
	double(*func)(int, float, short);
CODE:
	func   = INT2PTR(double(*)(int, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2);
OUTPUT:
	RETVAL

short
nci_sifs( c_func, i0, f1, s2 )
	SV* c_func
	int i0
	float f1
	short s2
PREINIT:
	short(*func)(int, float, short);
CODE:
	func   = INT2PTR(short(*)(int, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2);
OUTPUT:
	RETVAL

float
nci_fifs( c_func, i0, f1, s2 )
	SV* c_func
	int i0
	float f1
	short s2
PREINIT:
	float(*func)(int, float, short);
CODE:
	func   = INT2PTR(float(*)(int, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2);
OUTPUT:
	RETVAL

char *
nci_tifs( c_func, i0, f1, s2 )
	SV* c_func
	int i0
	float f1
	short s2
PREINIT:
	char *(*func)(int, float, short);
CODE:
	func   = INT2PTR(char *(*)(int, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2);
OUTPUT:
	RETVAL

int
nci_iifs( c_func, i0, f1, s2 )
	SV* c_func
	int i0
	float f1
	short s2
PREINIT:
	int(*func)(int, float, short);
CODE:
	func   = INT2PTR(int(*)(int, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2);
OUTPUT:
	RETVAL

void *
nci_ppts( c_func, p0, t1, s2 )
	SV* c_func
	void * p0
	char * t1
	short s2
PREINIT:
	void *(*func)(void *, char *, short);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2);
OUTPUT:
	RETVAL

void
nci_vpts( c_func, p0, t1, s2 )
	SV* c_func
	void * p0
	char * t1
	short s2
PREINIT:
	void(*func)(void *, char *, short);
CODE:
	func   = INT2PTR(void(*)(void *, char *, short), SvIV(c_func) );
	(*func)(p0, t1, s2);

double
nci_dpts( c_func, p0, t1, s2 )
	SV* c_func
	void * p0
	char * t1
	short s2
PREINIT:
	double(*func)(void *, char *, short);
CODE:
	func   = INT2PTR(double(*)(void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2);
OUTPUT:
	RETVAL

short
nci_spts( c_func, p0, t1, s2 )
	SV* c_func
	void * p0
	char * t1
	short s2
PREINIT:
	short(*func)(void *, char *, short);
CODE:
	func   = INT2PTR(short(*)(void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2);
OUTPUT:
	RETVAL

float
nci_fpts( c_func, p0, t1, s2 )
	SV* c_func
	void * p0
	char * t1
	short s2
PREINIT:
	float(*func)(void *, char *, short);
CODE:
	func   = INT2PTR(float(*)(void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2);
OUTPUT:
	RETVAL

char *
nci_tpts( c_func, p0, t1, s2 )
	SV* c_func
	void * p0
	char * t1
	short s2
PREINIT:
	char *(*func)(void *, char *, short);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2);
OUTPUT:
	RETVAL

int
nci_ipts( c_func, p0, t1, s2 )
	SV* c_func
	void * p0
	char * t1
	short s2
PREINIT:
	int(*func)(void *, char *, short);
CODE:
	func   = INT2PTR(int(*)(void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2);
OUTPUT:
	RETVAL

void *
nci_pvts( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvts( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvts( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svts( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvts( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvts( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivts( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdts( c_func, d0, t1, s2 )
	SV* c_func
	double d0
	char * t1
	short s2
PREINIT:
	void *(*func)(double, char *, short);
CODE:
	func   = INT2PTR(void *(*)(double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2);
OUTPUT:
	RETVAL

void
nci_vdts( c_func, d0, t1, s2 )
	SV* c_func
	double d0
	char * t1
	short s2
PREINIT:
	void(*func)(double, char *, short);
CODE:
	func   = INT2PTR(void(*)(double, char *, short), SvIV(c_func) );
	(*func)(d0, t1, s2);

double
nci_ddts( c_func, d0, t1, s2 )
	SV* c_func
	double d0
	char * t1
	short s2
PREINIT:
	double(*func)(double, char *, short);
CODE:
	func   = INT2PTR(double(*)(double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2);
OUTPUT:
	RETVAL

short
nci_sdts( c_func, d0, t1, s2 )
	SV* c_func
	double d0
	char * t1
	short s2
PREINIT:
	short(*func)(double, char *, short);
CODE:
	func   = INT2PTR(short(*)(double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2);
OUTPUT:
	RETVAL

float
nci_fdts( c_func, d0, t1, s2 )
	SV* c_func
	double d0
	char * t1
	short s2
PREINIT:
	float(*func)(double, char *, short);
CODE:
	func   = INT2PTR(float(*)(double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2);
OUTPUT:
	RETVAL

char *
nci_tdts( c_func, d0, t1, s2 )
	SV* c_func
	double d0
	char * t1
	short s2
PREINIT:
	char *(*func)(double, char *, short);
CODE:
	func   = INT2PTR(char *(*)(double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2);
OUTPUT:
	RETVAL

int
nci_idts( c_func, d0, t1, s2 )
	SV* c_func
	double d0
	char * t1
	short s2
PREINIT:
	int(*func)(double, char *, short);
CODE:
	func   = INT2PTR(int(*)(double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2);
OUTPUT:
	RETVAL

void *
nci_psts( c_func, s0, t1, s2 )
	SV* c_func
	short s0
	char * t1
	short s2
PREINIT:
	void *(*func)(short, char *, short);
CODE:
	func   = INT2PTR(void *(*)(short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2);
OUTPUT:
	RETVAL

void
nci_vsts( c_func, s0, t1, s2 )
	SV* c_func
	short s0
	char * t1
	short s2
PREINIT:
	void(*func)(short, char *, short);
CODE:
	func   = INT2PTR(void(*)(short, char *, short), SvIV(c_func) );
	(*func)(s0, t1, s2);

double
nci_dsts( c_func, s0, t1, s2 )
	SV* c_func
	short s0
	char * t1
	short s2
PREINIT:
	double(*func)(short, char *, short);
CODE:
	func   = INT2PTR(double(*)(short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2);
OUTPUT:
	RETVAL

short
nci_ssts( c_func, s0, t1, s2 )
	SV* c_func
	short s0
	char * t1
	short s2
PREINIT:
	short(*func)(short, char *, short);
CODE:
	func   = INT2PTR(short(*)(short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2);
OUTPUT:
	RETVAL

float
nci_fsts( c_func, s0, t1, s2 )
	SV* c_func
	short s0
	char * t1
	short s2
PREINIT:
	float(*func)(short, char *, short);
CODE:
	func   = INT2PTR(float(*)(short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2);
OUTPUT:
	RETVAL

char *
nci_tsts( c_func, s0, t1, s2 )
	SV* c_func
	short s0
	char * t1
	short s2
PREINIT:
	char *(*func)(short, char *, short);
CODE:
	func   = INT2PTR(char *(*)(short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2);
OUTPUT:
	RETVAL

int
nci_ists( c_func, s0, t1, s2 )
	SV* c_func
	short s0
	char * t1
	short s2
PREINIT:
	int(*func)(short, char *, short);
CODE:
	func   = INT2PTR(int(*)(short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2);
OUTPUT:
	RETVAL

void *
nci_pfts( c_func, f0, t1, s2 )
	SV* c_func
	float f0
	char * t1
	short s2
PREINIT:
	void *(*func)(float, char *, short);
CODE:
	func   = INT2PTR(void *(*)(float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2);
OUTPUT:
	RETVAL

void
nci_vfts( c_func, f0, t1, s2 )
	SV* c_func
	float f0
	char * t1
	short s2
PREINIT:
	void(*func)(float, char *, short);
CODE:
	func   = INT2PTR(void(*)(float, char *, short), SvIV(c_func) );
	(*func)(f0, t1, s2);

double
nci_dfts( c_func, f0, t1, s2 )
	SV* c_func
	float f0
	char * t1
	short s2
PREINIT:
	double(*func)(float, char *, short);
CODE:
	func   = INT2PTR(double(*)(float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2);
OUTPUT:
	RETVAL

short
nci_sfts( c_func, f0, t1, s2 )
	SV* c_func
	float f0
	char * t1
	short s2
PREINIT:
	short(*func)(float, char *, short);
CODE:
	func   = INT2PTR(short(*)(float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2);
OUTPUT:
	RETVAL

float
nci_ffts( c_func, f0, t1, s2 )
	SV* c_func
	float f0
	char * t1
	short s2
PREINIT:
	float(*func)(float, char *, short);
CODE:
	func   = INT2PTR(float(*)(float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2);
OUTPUT:
	RETVAL

char *
nci_tfts( c_func, f0, t1, s2 )
	SV* c_func
	float f0
	char * t1
	short s2
PREINIT:
	char *(*func)(float, char *, short);
CODE:
	func   = INT2PTR(char *(*)(float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2);
OUTPUT:
	RETVAL

int
nci_ifts( c_func, f0, t1, s2 )
	SV* c_func
	float f0
	char * t1
	short s2
PREINIT:
	int(*func)(float, char *, short);
CODE:
	func   = INT2PTR(int(*)(float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2);
OUTPUT:
	RETVAL

void *
nci_ptts( c_func, t0, t1, s2 )
	SV* c_func
	char * t0
	char * t1
	short s2
PREINIT:
	void *(*func)(char *, char *, short);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2);
OUTPUT:
	RETVAL

void
nci_vtts( c_func, t0, t1, s2 )
	SV* c_func
	char * t0
	char * t1
	short s2
PREINIT:
	void(*func)(char *, char *, short);
CODE:
	func   = INT2PTR(void(*)(char *, char *, short), SvIV(c_func) );
	(*func)(t0, t1, s2);

double
nci_dtts( c_func, t0, t1, s2 )
	SV* c_func
	char * t0
	char * t1
	short s2
PREINIT:
	double(*func)(char *, char *, short);
CODE:
	func   = INT2PTR(double(*)(char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2);
OUTPUT:
	RETVAL

short
nci_stts( c_func, t0, t1, s2 )
	SV* c_func
	char * t0
	char * t1
	short s2
PREINIT:
	short(*func)(char *, char *, short);
CODE:
	func   = INT2PTR(short(*)(char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2);
OUTPUT:
	RETVAL

float
nci_ftts( c_func, t0, t1, s2 )
	SV* c_func
	char * t0
	char * t1
	short s2
PREINIT:
	float(*func)(char *, char *, short);
CODE:
	func   = INT2PTR(float(*)(char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2);
OUTPUT:
	RETVAL

char *
nci_ttts( c_func, t0, t1, s2 )
	SV* c_func
	char * t0
	char * t1
	short s2
PREINIT:
	char *(*func)(char *, char *, short);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2);
OUTPUT:
	RETVAL

int
nci_itts( c_func, t0, t1, s2 )
	SV* c_func
	char * t0
	char * t1
	short s2
PREINIT:
	int(*func)(char *, char *, short);
CODE:
	func   = INT2PTR(int(*)(char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2);
OUTPUT:
	RETVAL

void *
nci_pits( c_func, i0, t1, s2 )
	SV* c_func
	int i0
	char * t1
	short s2
PREINIT:
	void *(*func)(int, char *, short);
CODE:
	func   = INT2PTR(void *(*)(int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2);
OUTPUT:
	RETVAL

void
nci_vits( c_func, i0, t1, s2 )
	SV* c_func
	int i0
	char * t1
	short s2
PREINIT:
	void(*func)(int, char *, short);
CODE:
	func   = INT2PTR(void(*)(int, char *, short), SvIV(c_func) );
	(*func)(i0, t1, s2);

double
nci_dits( c_func, i0, t1, s2 )
	SV* c_func
	int i0
	char * t1
	short s2
PREINIT:
	double(*func)(int, char *, short);
CODE:
	func   = INT2PTR(double(*)(int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2);
OUTPUT:
	RETVAL

short
nci_sits( c_func, i0, t1, s2 )
	SV* c_func
	int i0
	char * t1
	short s2
PREINIT:
	short(*func)(int, char *, short);
CODE:
	func   = INT2PTR(short(*)(int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2);
OUTPUT:
	RETVAL

float
nci_fits( c_func, i0, t1, s2 )
	SV* c_func
	int i0
	char * t1
	short s2
PREINIT:
	float(*func)(int, char *, short);
CODE:
	func   = INT2PTR(float(*)(int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2);
OUTPUT:
	RETVAL

char *
nci_tits( c_func, i0, t1, s2 )
	SV* c_func
	int i0
	char * t1
	short s2
PREINIT:
	char *(*func)(int, char *, short);
CODE:
	func   = INT2PTR(char *(*)(int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2);
OUTPUT:
	RETVAL

int
nci_iits( c_func, i0, t1, s2 )
	SV* c_func
	int i0
	char * t1
	short s2
PREINIT:
	int(*func)(int, char *, short);
CODE:
	func   = INT2PTR(int(*)(int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2);
OUTPUT:
	RETVAL

void *
nci_ppis( c_func, p0, i1, s2 )
	SV* c_func
	void * p0
	int i1
	short s2
PREINIT:
	void *(*func)(void *, int, short);
CODE:
	func   = INT2PTR(void *(*)(void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2);
OUTPUT:
	RETVAL

void
nci_vpis( c_func, p0, i1, s2 )
	SV* c_func
	void * p0
	int i1
	short s2
PREINIT:
	void(*func)(void *, int, short);
CODE:
	func   = INT2PTR(void(*)(void *, int, short), SvIV(c_func) );
	(*func)(p0, i1, s2);

double
nci_dpis( c_func, p0, i1, s2 )
	SV* c_func
	void * p0
	int i1
	short s2
PREINIT:
	double(*func)(void *, int, short);
CODE:
	func   = INT2PTR(double(*)(void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2);
OUTPUT:
	RETVAL

short
nci_spis( c_func, p0, i1, s2 )
	SV* c_func
	void * p0
	int i1
	short s2
PREINIT:
	short(*func)(void *, int, short);
CODE:
	func   = INT2PTR(short(*)(void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2);
OUTPUT:
	RETVAL

float
nci_fpis( c_func, p0, i1, s2 )
	SV* c_func
	void * p0
	int i1
	short s2
PREINIT:
	float(*func)(void *, int, short);
CODE:
	func   = INT2PTR(float(*)(void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2);
OUTPUT:
	RETVAL

char *
nci_tpis( c_func, p0, i1, s2 )
	SV* c_func
	void * p0
	int i1
	short s2
PREINIT:
	char *(*func)(void *, int, short);
CODE:
	func   = INT2PTR(char *(*)(void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2);
OUTPUT:
	RETVAL

int
nci_ipis( c_func, p0, i1, s2 )
	SV* c_func
	void * p0
	int i1
	short s2
PREINIT:
	int(*func)(void *, int, short);
CODE:
	func   = INT2PTR(int(*)(void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2);
OUTPUT:
	RETVAL

void *
nci_pvis( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvis( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvis( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svis( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvis( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvis( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivis( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdis( c_func, d0, i1, s2 )
	SV* c_func
	double d0
	int i1
	short s2
PREINIT:
	void *(*func)(double, int, short);
CODE:
	func   = INT2PTR(void *(*)(double, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2);
OUTPUT:
	RETVAL

void
nci_vdis( c_func, d0, i1, s2 )
	SV* c_func
	double d0
	int i1
	short s2
PREINIT:
	void(*func)(double, int, short);
CODE:
	func   = INT2PTR(void(*)(double, int, short), SvIV(c_func) );
	(*func)(d0, i1, s2);

double
nci_ddis( c_func, d0, i1, s2 )
	SV* c_func
	double d0
	int i1
	short s2
PREINIT:
	double(*func)(double, int, short);
CODE:
	func   = INT2PTR(double(*)(double, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2);
OUTPUT:
	RETVAL

short
nci_sdis( c_func, d0, i1, s2 )
	SV* c_func
	double d0
	int i1
	short s2
PREINIT:
	short(*func)(double, int, short);
CODE:
	func   = INT2PTR(short(*)(double, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2);
OUTPUT:
	RETVAL

float
nci_fdis( c_func, d0, i1, s2 )
	SV* c_func
	double d0
	int i1
	short s2
PREINIT:
	float(*func)(double, int, short);
CODE:
	func   = INT2PTR(float(*)(double, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2);
OUTPUT:
	RETVAL

char *
nci_tdis( c_func, d0, i1, s2 )
	SV* c_func
	double d0
	int i1
	short s2
PREINIT:
	char *(*func)(double, int, short);
CODE:
	func   = INT2PTR(char *(*)(double, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2);
OUTPUT:
	RETVAL

int
nci_idis( c_func, d0, i1, s2 )
	SV* c_func
	double d0
	int i1
	short s2
PREINIT:
	int(*func)(double, int, short);
CODE:
	func   = INT2PTR(int(*)(double, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2);
OUTPUT:
	RETVAL

void *
nci_psis( c_func, s0, i1, s2 )
	SV* c_func
	short s0
	int i1
	short s2
PREINIT:
	void *(*func)(short, int, short);
CODE:
	func   = INT2PTR(void *(*)(short, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2);
OUTPUT:
	RETVAL

void
nci_vsis( c_func, s0, i1, s2 )
	SV* c_func
	short s0
	int i1
	short s2
PREINIT:
	void(*func)(short, int, short);
CODE:
	func   = INT2PTR(void(*)(short, int, short), SvIV(c_func) );
	(*func)(s0, i1, s2);

double
nci_dsis( c_func, s0, i1, s2 )
	SV* c_func
	short s0
	int i1
	short s2
PREINIT:
	double(*func)(short, int, short);
CODE:
	func   = INT2PTR(double(*)(short, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2);
OUTPUT:
	RETVAL

short
nci_ssis( c_func, s0, i1, s2 )
	SV* c_func
	short s0
	int i1
	short s2
PREINIT:
	short(*func)(short, int, short);
CODE:
	func   = INT2PTR(short(*)(short, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2);
OUTPUT:
	RETVAL

float
nci_fsis( c_func, s0, i1, s2 )
	SV* c_func
	short s0
	int i1
	short s2
PREINIT:
	float(*func)(short, int, short);
CODE:
	func   = INT2PTR(float(*)(short, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2);
OUTPUT:
	RETVAL

char *
nci_tsis( c_func, s0, i1, s2 )
	SV* c_func
	short s0
	int i1
	short s2
PREINIT:
	char *(*func)(short, int, short);
CODE:
	func   = INT2PTR(char *(*)(short, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2);
OUTPUT:
	RETVAL

int
nci_isis( c_func, s0, i1, s2 )
	SV* c_func
	short s0
	int i1
	short s2
PREINIT:
	int(*func)(short, int, short);
CODE:
	func   = INT2PTR(int(*)(short, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2);
OUTPUT:
	RETVAL

void *
nci_pfis( c_func, f0, i1, s2 )
	SV* c_func
	float f0
	int i1
	short s2
PREINIT:
	void *(*func)(float, int, short);
CODE:
	func   = INT2PTR(void *(*)(float, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2);
OUTPUT:
	RETVAL

void
nci_vfis( c_func, f0, i1, s2 )
	SV* c_func
	float f0
	int i1
	short s2
PREINIT:
	void(*func)(float, int, short);
CODE:
	func   = INT2PTR(void(*)(float, int, short), SvIV(c_func) );
	(*func)(f0, i1, s2);

double
nci_dfis( c_func, f0, i1, s2 )
	SV* c_func
	float f0
	int i1
	short s2
PREINIT:
	double(*func)(float, int, short);
CODE:
	func   = INT2PTR(double(*)(float, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2);
OUTPUT:
	RETVAL

short
nci_sfis( c_func, f0, i1, s2 )
	SV* c_func
	float f0
	int i1
	short s2
PREINIT:
	short(*func)(float, int, short);
CODE:
	func   = INT2PTR(short(*)(float, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2);
OUTPUT:
	RETVAL

float
nci_ffis( c_func, f0, i1, s2 )
	SV* c_func
	float f0
	int i1
	short s2
PREINIT:
	float(*func)(float, int, short);
CODE:
	func   = INT2PTR(float(*)(float, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2);
OUTPUT:
	RETVAL

char *
nci_tfis( c_func, f0, i1, s2 )
	SV* c_func
	float f0
	int i1
	short s2
PREINIT:
	char *(*func)(float, int, short);
CODE:
	func   = INT2PTR(char *(*)(float, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2);
OUTPUT:
	RETVAL

int
nci_ifis( c_func, f0, i1, s2 )
	SV* c_func
	float f0
	int i1
	short s2
PREINIT:
	int(*func)(float, int, short);
CODE:
	func   = INT2PTR(int(*)(float, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2);
OUTPUT:
	RETVAL

void *
nci_ptis( c_func, t0, i1, s2 )
	SV* c_func
	char * t0
	int i1
	short s2
PREINIT:
	void *(*func)(char *, int, short);
CODE:
	func   = INT2PTR(void *(*)(char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2);
OUTPUT:
	RETVAL

void
nci_vtis( c_func, t0, i1, s2 )
	SV* c_func
	char * t0
	int i1
	short s2
PREINIT:
	void(*func)(char *, int, short);
CODE:
	func   = INT2PTR(void(*)(char *, int, short), SvIV(c_func) );
	(*func)(t0, i1, s2);

double
nci_dtis( c_func, t0, i1, s2 )
	SV* c_func
	char * t0
	int i1
	short s2
PREINIT:
	double(*func)(char *, int, short);
CODE:
	func   = INT2PTR(double(*)(char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2);
OUTPUT:
	RETVAL

short
nci_stis( c_func, t0, i1, s2 )
	SV* c_func
	char * t0
	int i1
	short s2
PREINIT:
	short(*func)(char *, int, short);
CODE:
	func   = INT2PTR(short(*)(char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2);
OUTPUT:
	RETVAL

float
nci_ftis( c_func, t0, i1, s2 )
	SV* c_func
	char * t0
	int i1
	short s2
PREINIT:
	float(*func)(char *, int, short);
CODE:
	func   = INT2PTR(float(*)(char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2);
OUTPUT:
	RETVAL

char *
nci_ttis( c_func, t0, i1, s2 )
	SV* c_func
	char * t0
	int i1
	short s2
PREINIT:
	char *(*func)(char *, int, short);
CODE:
	func   = INT2PTR(char *(*)(char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2);
OUTPUT:
	RETVAL

int
nci_itis( c_func, t0, i1, s2 )
	SV* c_func
	char * t0
	int i1
	short s2
PREINIT:
	int(*func)(char *, int, short);
CODE:
	func   = INT2PTR(int(*)(char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2);
OUTPUT:
	RETVAL

void *
nci_piis( c_func, i0, i1, s2 )
	SV* c_func
	int i0
	int i1
	short s2
PREINIT:
	void *(*func)(int, int, short);
CODE:
	func   = INT2PTR(void *(*)(int, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2);
OUTPUT:
	RETVAL

void
nci_viis( c_func, i0, i1, s2 )
	SV* c_func
	int i0
	int i1
	short s2
PREINIT:
	void(*func)(int, int, short);
CODE:
	func   = INT2PTR(void(*)(int, int, short), SvIV(c_func) );
	(*func)(i0, i1, s2);

double
nci_diis( c_func, i0, i1, s2 )
	SV* c_func
	int i0
	int i1
	short s2
PREINIT:
	double(*func)(int, int, short);
CODE:
	func   = INT2PTR(double(*)(int, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2);
OUTPUT:
	RETVAL

short
nci_siis( c_func, i0, i1, s2 )
	SV* c_func
	int i0
	int i1
	short s2
PREINIT:
	short(*func)(int, int, short);
CODE:
	func   = INT2PTR(short(*)(int, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2);
OUTPUT:
	RETVAL

float
nci_fiis( c_func, i0, i1, s2 )
	SV* c_func
	int i0
	int i1
	short s2
PREINIT:
	float(*func)(int, int, short);
CODE:
	func   = INT2PTR(float(*)(int, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2);
OUTPUT:
	RETVAL

char *
nci_tiis( c_func, i0, i1, s2 )
	SV* c_func
	int i0
	int i1
	short s2
PREINIT:
	char *(*func)(int, int, short);
CODE:
	func   = INT2PTR(char *(*)(int, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2);
OUTPUT:
	RETVAL

int
nci_iiis( c_func, i0, i1, s2 )
	SV* c_func
	int i0
	int i1
	short s2
PREINIT:
	int(*func)(int, int, short);
CODE:
	func   = INT2PTR(int(*)(int, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2);
OUTPUT:
	RETVAL

void *
nci_pppf( c_func, p0, p1, f2 )
	SV* c_func
	void * p0
	void * p1
	float f2
PREINIT:
	void *(*func)(void *, void *, float);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2);
OUTPUT:
	RETVAL

void
nci_vppf( c_func, p0, p1, f2 )
	SV* c_func
	void * p0
	void * p1
	float f2
PREINIT:
	void(*func)(void *, void *, float);
CODE:
	func   = INT2PTR(void(*)(void *, void *, float), SvIV(c_func) );
	(*func)(p0, p1, f2);

double
nci_dppf( c_func, p0, p1, f2 )
	SV* c_func
	void * p0
	void * p1
	float f2
PREINIT:
	double(*func)(void *, void *, float);
CODE:
	func   = INT2PTR(double(*)(void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2);
OUTPUT:
	RETVAL

short
nci_sppf( c_func, p0, p1, f2 )
	SV* c_func
	void * p0
	void * p1
	float f2
PREINIT:
	short(*func)(void *, void *, float);
CODE:
	func   = INT2PTR(short(*)(void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2);
OUTPUT:
	RETVAL

float
nci_fppf( c_func, p0, p1, f2 )
	SV* c_func
	void * p0
	void * p1
	float f2
PREINIT:
	float(*func)(void *, void *, float);
CODE:
	func   = INT2PTR(float(*)(void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2);
OUTPUT:
	RETVAL

char *
nci_tppf( c_func, p0, p1, f2 )
	SV* c_func
	void * p0
	void * p1
	float f2
PREINIT:
	char *(*func)(void *, void *, float);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2);
OUTPUT:
	RETVAL

int
nci_ippf( c_func, p0, p1, f2 )
	SV* c_func
	void * p0
	void * p1
	float f2
PREINIT:
	int(*func)(void *, void *, float);
CODE:
	func   = INT2PTR(int(*)(void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2);
OUTPUT:
	RETVAL

void *
nci_pvpf( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvpf( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvpf( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svpf( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvpf( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvpf( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivpf( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdpf( c_func, d0, p1, f2 )
	SV* c_func
	double d0
	void * p1
	float f2
PREINIT:
	void *(*func)(double, void *, float);
CODE:
	func   = INT2PTR(void *(*)(double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2);
OUTPUT:
	RETVAL

void
nci_vdpf( c_func, d0, p1, f2 )
	SV* c_func
	double d0
	void * p1
	float f2
PREINIT:
	void(*func)(double, void *, float);
CODE:
	func   = INT2PTR(void(*)(double, void *, float), SvIV(c_func) );
	(*func)(d0, p1, f2);

double
nci_ddpf( c_func, d0, p1, f2 )
	SV* c_func
	double d0
	void * p1
	float f2
PREINIT:
	double(*func)(double, void *, float);
CODE:
	func   = INT2PTR(double(*)(double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2);
OUTPUT:
	RETVAL

short
nci_sdpf( c_func, d0, p1, f2 )
	SV* c_func
	double d0
	void * p1
	float f2
PREINIT:
	short(*func)(double, void *, float);
CODE:
	func   = INT2PTR(short(*)(double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2);
OUTPUT:
	RETVAL

float
nci_fdpf( c_func, d0, p1, f2 )
	SV* c_func
	double d0
	void * p1
	float f2
PREINIT:
	float(*func)(double, void *, float);
CODE:
	func   = INT2PTR(float(*)(double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2);
OUTPUT:
	RETVAL

char *
nci_tdpf( c_func, d0, p1, f2 )
	SV* c_func
	double d0
	void * p1
	float f2
PREINIT:
	char *(*func)(double, void *, float);
CODE:
	func   = INT2PTR(char *(*)(double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2);
OUTPUT:
	RETVAL

int
nci_idpf( c_func, d0, p1, f2 )
	SV* c_func
	double d0
	void * p1
	float f2
PREINIT:
	int(*func)(double, void *, float);
CODE:
	func   = INT2PTR(int(*)(double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2);
OUTPUT:
	RETVAL

void *
nci_pspf( c_func, s0, p1, f2 )
	SV* c_func
	short s0
	void * p1
	float f2
PREINIT:
	void *(*func)(short, void *, float);
CODE:
	func   = INT2PTR(void *(*)(short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2);
OUTPUT:
	RETVAL

void
nci_vspf( c_func, s0, p1, f2 )
	SV* c_func
	short s0
	void * p1
	float f2
PREINIT:
	void(*func)(short, void *, float);
CODE:
	func   = INT2PTR(void(*)(short, void *, float), SvIV(c_func) );
	(*func)(s0, p1, f2);

double
nci_dspf( c_func, s0, p1, f2 )
	SV* c_func
	short s0
	void * p1
	float f2
PREINIT:
	double(*func)(short, void *, float);
CODE:
	func   = INT2PTR(double(*)(short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2);
OUTPUT:
	RETVAL

short
nci_sspf( c_func, s0, p1, f2 )
	SV* c_func
	short s0
	void * p1
	float f2
PREINIT:
	short(*func)(short, void *, float);
CODE:
	func   = INT2PTR(short(*)(short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2);
OUTPUT:
	RETVAL

float
nci_fspf( c_func, s0, p1, f2 )
	SV* c_func
	short s0
	void * p1
	float f2
PREINIT:
	float(*func)(short, void *, float);
CODE:
	func   = INT2PTR(float(*)(short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2);
OUTPUT:
	RETVAL

char *
nci_tspf( c_func, s0, p1, f2 )
	SV* c_func
	short s0
	void * p1
	float f2
PREINIT:
	char *(*func)(short, void *, float);
CODE:
	func   = INT2PTR(char *(*)(short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2);
OUTPUT:
	RETVAL

int
nci_ispf( c_func, s0, p1, f2 )
	SV* c_func
	short s0
	void * p1
	float f2
PREINIT:
	int(*func)(short, void *, float);
CODE:
	func   = INT2PTR(int(*)(short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2);
OUTPUT:
	RETVAL

void *
nci_pfpf( c_func, f0, p1, f2 )
	SV* c_func
	float f0
	void * p1
	float f2
PREINIT:
	void *(*func)(float, void *, float);
CODE:
	func   = INT2PTR(void *(*)(float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2);
OUTPUT:
	RETVAL

void
nci_vfpf( c_func, f0, p1, f2 )
	SV* c_func
	float f0
	void * p1
	float f2
PREINIT:
	void(*func)(float, void *, float);
CODE:
	func   = INT2PTR(void(*)(float, void *, float), SvIV(c_func) );
	(*func)(f0, p1, f2);

double
nci_dfpf( c_func, f0, p1, f2 )
	SV* c_func
	float f0
	void * p1
	float f2
PREINIT:
	double(*func)(float, void *, float);
CODE:
	func   = INT2PTR(double(*)(float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2);
OUTPUT:
	RETVAL

short
nci_sfpf( c_func, f0, p1, f2 )
	SV* c_func
	float f0
	void * p1
	float f2
PREINIT:
	short(*func)(float, void *, float);
CODE:
	func   = INT2PTR(short(*)(float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2);
OUTPUT:
	RETVAL

float
nci_ffpf( c_func, f0, p1, f2 )
	SV* c_func
	float f0
	void * p1
	float f2
PREINIT:
	float(*func)(float, void *, float);
CODE:
	func   = INT2PTR(float(*)(float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2);
OUTPUT:
	RETVAL

char *
nci_tfpf( c_func, f0, p1, f2 )
	SV* c_func
	float f0
	void * p1
	float f2
PREINIT:
	char *(*func)(float, void *, float);
CODE:
	func   = INT2PTR(char *(*)(float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2);
OUTPUT:
	RETVAL

int
nci_ifpf( c_func, f0, p1, f2 )
	SV* c_func
	float f0
	void * p1
	float f2
PREINIT:
	int(*func)(float, void *, float);
CODE:
	func   = INT2PTR(int(*)(float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2);
OUTPUT:
	RETVAL

void *
nci_ptpf( c_func, t0, p1, f2 )
	SV* c_func
	char * t0
	void * p1
	float f2
PREINIT:
	void *(*func)(char *, void *, float);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2);
OUTPUT:
	RETVAL

void
nci_vtpf( c_func, t0, p1, f2 )
	SV* c_func
	char * t0
	void * p1
	float f2
PREINIT:
	void(*func)(char *, void *, float);
CODE:
	func   = INT2PTR(void(*)(char *, void *, float), SvIV(c_func) );
	(*func)(t0, p1, f2);

double
nci_dtpf( c_func, t0, p1, f2 )
	SV* c_func
	char * t0
	void * p1
	float f2
PREINIT:
	double(*func)(char *, void *, float);
CODE:
	func   = INT2PTR(double(*)(char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2);
OUTPUT:
	RETVAL

short
nci_stpf( c_func, t0, p1, f2 )
	SV* c_func
	char * t0
	void * p1
	float f2
PREINIT:
	short(*func)(char *, void *, float);
CODE:
	func   = INT2PTR(short(*)(char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2);
OUTPUT:
	RETVAL

float
nci_ftpf( c_func, t0, p1, f2 )
	SV* c_func
	char * t0
	void * p1
	float f2
PREINIT:
	float(*func)(char *, void *, float);
CODE:
	func   = INT2PTR(float(*)(char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2);
OUTPUT:
	RETVAL

char *
nci_ttpf( c_func, t0, p1, f2 )
	SV* c_func
	char * t0
	void * p1
	float f2
PREINIT:
	char *(*func)(char *, void *, float);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2);
OUTPUT:
	RETVAL

int
nci_itpf( c_func, t0, p1, f2 )
	SV* c_func
	char * t0
	void * p1
	float f2
PREINIT:
	int(*func)(char *, void *, float);
CODE:
	func   = INT2PTR(int(*)(char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2);
OUTPUT:
	RETVAL

void *
nci_pipf( c_func, i0, p1, f2 )
	SV* c_func
	int i0
	void * p1
	float f2
PREINIT:
	void *(*func)(int, void *, float);
CODE:
	func   = INT2PTR(void *(*)(int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2);
OUTPUT:
	RETVAL

void
nci_vipf( c_func, i0, p1, f2 )
	SV* c_func
	int i0
	void * p1
	float f2
PREINIT:
	void(*func)(int, void *, float);
CODE:
	func   = INT2PTR(void(*)(int, void *, float), SvIV(c_func) );
	(*func)(i0, p1, f2);

double
nci_dipf( c_func, i0, p1, f2 )
	SV* c_func
	int i0
	void * p1
	float f2
PREINIT:
	double(*func)(int, void *, float);
CODE:
	func   = INT2PTR(double(*)(int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2);
OUTPUT:
	RETVAL

short
nci_sipf( c_func, i0, p1, f2 )
	SV* c_func
	int i0
	void * p1
	float f2
PREINIT:
	short(*func)(int, void *, float);
CODE:
	func   = INT2PTR(short(*)(int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2);
OUTPUT:
	RETVAL

float
nci_fipf( c_func, i0, p1, f2 )
	SV* c_func
	int i0
	void * p1
	float f2
PREINIT:
	float(*func)(int, void *, float);
CODE:
	func   = INT2PTR(float(*)(int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2);
OUTPUT:
	RETVAL

char *
nci_tipf( c_func, i0, p1, f2 )
	SV* c_func
	int i0
	void * p1
	float f2
PREINIT:
	char *(*func)(int, void *, float);
CODE:
	func   = INT2PTR(char *(*)(int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2);
OUTPUT:
	RETVAL

int
nci_iipf( c_func, i0, p1, f2 )
	SV* c_func
	int i0
	void * p1
	float f2
PREINIT:
	int(*func)(int, void *, float);
CODE:
	func   = INT2PTR(int(*)(int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2);
OUTPUT:
	RETVAL

void *
nci_ppdf( c_func, p0, d1, f2 )
	SV* c_func
	void * p0
	double d1
	float f2
PREINIT:
	void *(*func)(void *, double, float);
CODE:
	func   = INT2PTR(void *(*)(void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2);
OUTPUT:
	RETVAL

void
nci_vpdf( c_func, p0, d1, f2 )
	SV* c_func
	void * p0
	double d1
	float f2
PREINIT:
	void(*func)(void *, double, float);
CODE:
	func   = INT2PTR(void(*)(void *, double, float), SvIV(c_func) );
	(*func)(p0, d1, f2);

double
nci_dpdf( c_func, p0, d1, f2 )
	SV* c_func
	void * p0
	double d1
	float f2
PREINIT:
	double(*func)(void *, double, float);
CODE:
	func   = INT2PTR(double(*)(void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2);
OUTPUT:
	RETVAL

short
nci_spdf( c_func, p0, d1, f2 )
	SV* c_func
	void * p0
	double d1
	float f2
PREINIT:
	short(*func)(void *, double, float);
CODE:
	func   = INT2PTR(short(*)(void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2);
OUTPUT:
	RETVAL

float
nci_fpdf( c_func, p0, d1, f2 )
	SV* c_func
	void * p0
	double d1
	float f2
PREINIT:
	float(*func)(void *, double, float);
CODE:
	func   = INT2PTR(float(*)(void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2);
OUTPUT:
	RETVAL

char *
nci_tpdf( c_func, p0, d1, f2 )
	SV* c_func
	void * p0
	double d1
	float f2
PREINIT:
	char *(*func)(void *, double, float);
CODE:
	func   = INT2PTR(char *(*)(void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2);
OUTPUT:
	RETVAL

int
nci_ipdf( c_func, p0, d1, f2 )
	SV* c_func
	void * p0
	double d1
	float f2
PREINIT:
	int(*func)(void *, double, float);
CODE:
	func   = INT2PTR(int(*)(void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2);
OUTPUT:
	RETVAL

void *
nci_pvdf( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvdf( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvdf( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svdf( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvdf( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvdf( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivdf( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pddf( c_func, d0, d1, f2 )
	SV* c_func
	double d0
	double d1
	float f2
PREINIT:
	void *(*func)(double, double, float);
CODE:
	func   = INT2PTR(void *(*)(double, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2);
OUTPUT:
	RETVAL

void
nci_vddf( c_func, d0, d1, f2 )
	SV* c_func
	double d0
	double d1
	float f2
PREINIT:
	void(*func)(double, double, float);
CODE:
	func   = INT2PTR(void(*)(double, double, float), SvIV(c_func) );
	(*func)(d0, d1, f2);

double
nci_dddf( c_func, d0, d1, f2 )
	SV* c_func
	double d0
	double d1
	float f2
PREINIT:
	double(*func)(double, double, float);
CODE:
	func   = INT2PTR(double(*)(double, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2);
OUTPUT:
	RETVAL

short
nci_sddf( c_func, d0, d1, f2 )
	SV* c_func
	double d0
	double d1
	float f2
PREINIT:
	short(*func)(double, double, float);
CODE:
	func   = INT2PTR(short(*)(double, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2);
OUTPUT:
	RETVAL

float
nci_fddf( c_func, d0, d1, f2 )
	SV* c_func
	double d0
	double d1
	float f2
PREINIT:
	float(*func)(double, double, float);
CODE:
	func   = INT2PTR(float(*)(double, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2);
OUTPUT:
	RETVAL

char *
nci_tddf( c_func, d0, d1, f2 )
	SV* c_func
	double d0
	double d1
	float f2
PREINIT:
	char *(*func)(double, double, float);
CODE:
	func   = INT2PTR(char *(*)(double, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2);
OUTPUT:
	RETVAL

int
nci_iddf( c_func, d0, d1, f2 )
	SV* c_func
	double d0
	double d1
	float f2
PREINIT:
	int(*func)(double, double, float);
CODE:
	func   = INT2PTR(int(*)(double, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2);
OUTPUT:
	RETVAL

void *
nci_psdf( c_func, s0, d1, f2 )
	SV* c_func
	short s0
	double d1
	float f2
PREINIT:
	void *(*func)(short, double, float);
CODE:
	func   = INT2PTR(void *(*)(short, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2);
OUTPUT:
	RETVAL

void
nci_vsdf( c_func, s0, d1, f2 )
	SV* c_func
	short s0
	double d1
	float f2
PREINIT:
	void(*func)(short, double, float);
CODE:
	func   = INT2PTR(void(*)(short, double, float), SvIV(c_func) );
	(*func)(s0, d1, f2);

double
nci_dsdf( c_func, s0, d1, f2 )
	SV* c_func
	short s0
	double d1
	float f2
PREINIT:
	double(*func)(short, double, float);
CODE:
	func   = INT2PTR(double(*)(short, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2);
OUTPUT:
	RETVAL

short
nci_ssdf( c_func, s0, d1, f2 )
	SV* c_func
	short s0
	double d1
	float f2
PREINIT:
	short(*func)(short, double, float);
CODE:
	func   = INT2PTR(short(*)(short, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2);
OUTPUT:
	RETVAL

float
nci_fsdf( c_func, s0, d1, f2 )
	SV* c_func
	short s0
	double d1
	float f2
PREINIT:
	float(*func)(short, double, float);
CODE:
	func   = INT2PTR(float(*)(short, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2);
OUTPUT:
	RETVAL

char *
nci_tsdf( c_func, s0, d1, f2 )
	SV* c_func
	short s0
	double d1
	float f2
PREINIT:
	char *(*func)(short, double, float);
CODE:
	func   = INT2PTR(char *(*)(short, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2);
OUTPUT:
	RETVAL

int
nci_isdf( c_func, s0, d1, f2 )
	SV* c_func
	short s0
	double d1
	float f2
PREINIT:
	int(*func)(short, double, float);
CODE:
	func   = INT2PTR(int(*)(short, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2);
OUTPUT:
	RETVAL

void *
nci_pfdf( c_func, f0, d1, f2 )
	SV* c_func
	float f0
	double d1
	float f2
PREINIT:
	void *(*func)(float, double, float);
CODE:
	func   = INT2PTR(void *(*)(float, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2);
OUTPUT:
	RETVAL

void
nci_vfdf( c_func, f0, d1, f2 )
	SV* c_func
	float f0
	double d1
	float f2
PREINIT:
	void(*func)(float, double, float);
CODE:
	func   = INT2PTR(void(*)(float, double, float), SvIV(c_func) );
	(*func)(f0, d1, f2);

double
nci_dfdf( c_func, f0, d1, f2 )
	SV* c_func
	float f0
	double d1
	float f2
PREINIT:
	double(*func)(float, double, float);
CODE:
	func   = INT2PTR(double(*)(float, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2);
OUTPUT:
	RETVAL

short
nci_sfdf( c_func, f0, d1, f2 )
	SV* c_func
	float f0
	double d1
	float f2
PREINIT:
	short(*func)(float, double, float);
CODE:
	func   = INT2PTR(short(*)(float, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2);
OUTPUT:
	RETVAL

float
nci_ffdf( c_func, f0, d1, f2 )
	SV* c_func
	float f0
	double d1
	float f2
PREINIT:
	float(*func)(float, double, float);
CODE:
	func   = INT2PTR(float(*)(float, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2);
OUTPUT:
	RETVAL

char *
nci_tfdf( c_func, f0, d1, f2 )
	SV* c_func
	float f0
	double d1
	float f2
PREINIT:
	char *(*func)(float, double, float);
CODE:
	func   = INT2PTR(char *(*)(float, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2);
OUTPUT:
	RETVAL

int
nci_ifdf( c_func, f0, d1, f2 )
	SV* c_func
	float f0
	double d1
	float f2
PREINIT:
	int(*func)(float, double, float);
CODE:
	func   = INT2PTR(int(*)(float, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2);
OUTPUT:
	RETVAL

void *
nci_ptdf( c_func, t0, d1, f2 )
	SV* c_func
	char * t0
	double d1
	float f2
PREINIT:
	void *(*func)(char *, double, float);
CODE:
	func   = INT2PTR(void *(*)(char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2);
OUTPUT:
	RETVAL

void
nci_vtdf( c_func, t0, d1, f2 )
	SV* c_func
	char * t0
	double d1
	float f2
PREINIT:
	void(*func)(char *, double, float);
CODE:
	func   = INT2PTR(void(*)(char *, double, float), SvIV(c_func) );
	(*func)(t0, d1, f2);

double
nci_dtdf( c_func, t0, d1, f2 )
	SV* c_func
	char * t0
	double d1
	float f2
PREINIT:
	double(*func)(char *, double, float);
CODE:
	func   = INT2PTR(double(*)(char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2);
OUTPUT:
	RETVAL

short
nci_stdf( c_func, t0, d1, f2 )
	SV* c_func
	char * t0
	double d1
	float f2
PREINIT:
	short(*func)(char *, double, float);
CODE:
	func   = INT2PTR(short(*)(char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2);
OUTPUT:
	RETVAL

float
nci_ftdf( c_func, t0, d1, f2 )
	SV* c_func
	char * t0
	double d1
	float f2
PREINIT:
	float(*func)(char *, double, float);
CODE:
	func   = INT2PTR(float(*)(char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2);
OUTPUT:
	RETVAL

char *
nci_ttdf( c_func, t0, d1, f2 )
	SV* c_func
	char * t0
	double d1
	float f2
PREINIT:
	char *(*func)(char *, double, float);
CODE:
	func   = INT2PTR(char *(*)(char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2);
OUTPUT:
	RETVAL

int
nci_itdf( c_func, t0, d1, f2 )
	SV* c_func
	char * t0
	double d1
	float f2
PREINIT:
	int(*func)(char *, double, float);
CODE:
	func   = INT2PTR(int(*)(char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2);
OUTPUT:
	RETVAL

void *
nci_pidf( c_func, i0, d1, f2 )
	SV* c_func
	int i0
	double d1
	float f2
PREINIT:
	void *(*func)(int, double, float);
CODE:
	func   = INT2PTR(void *(*)(int, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2);
OUTPUT:
	RETVAL

void
nci_vidf( c_func, i0, d1, f2 )
	SV* c_func
	int i0
	double d1
	float f2
PREINIT:
	void(*func)(int, double, float);
CODE:
	func   = INT2PTR(void(*)(int, double, float), SvIV(c_func) );
	(*func)(i0, d1, f2);

double
nci_didf( c_func, i0, d1, f2 )
	SV* c_func
	int i0
	double d1
	float f2
PREINIT:
	double(*func)(int, double, float);
CODE:
	func   = INT2PTR(double(*)(int, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2);
OUTPUT:
	RETVAL

short
nci_sidf( c_func, i0, d1, f2 )
	SV* c_func
	int i0
	double d1
	float f2
PREINIT:
	short(*func)(int, double, float);
CODE:
	func   = INT2PTR(short(*)(int, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2);
OUTPUT:
	RETVAL

float
nci_fidf( c_func, i0, d1, f2 )
	SV* c_func
	int i0
	double d1
	float f2
PREINIT:
	float(*func)(int, double, float);
CODE:
	func   = INT2PTR(float(*)(int, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2);
OUTPUT:
	RETVAL

char *
nci_tidf( c_func, i0, d1, f2 )
	SV* c_func
	int i0
	double d1
	float f2
PREINIT:
	char *(*func)(int, double, float);
CODE:
	func   = INT2PTR(char *(*)(int, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2);
OUTPUT:
	RETVAL

int
nci_iidf( c_func, i0, d1, f2 )
	SV* c_func
	int i0
	double d1
	float f2
PREINIT:
	int(*func)(int, double, float);
CODE:
	func   = INT2PTR(int(*)(int, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2);
OUTPUT:
	RETVAL

void *
nci_ppsf( c_func, p0, s1, f2 )
	SV* c_func
	void * p0
	short s1
	float f2
PREINIT:
	void *(*func)(void *, short, float);
CODE:
	func   = INT2PTR(void *(*)(void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2);
OUTPUT:
	RETVAL

void
nci_vpsf( c_func, p0, s1, f2 )
	SV* c_func
	void * p0
	short s1
	float f2
PREINIT:
	void(*func)(void *, short, float);
CODE:
	func   = INT2PTR(void(*)(void *, short, float), SvIV(c_func) );
	(*func)(p0, s1, f2);

double
nci_dpsf( c_func, p0, s1, f2 )
	SV* c_func
	void * p0
	short s1
	float f2
PREINIT:
	double(*func)(void *, short, float);
CODE:
	func   = INT2PTR(double(*)(void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2);
OUTPUT:
	RETVAL

short
nci_spsf( c_func, p0, s1, f2 )
	SV* c_func
	void * p0
	short s1
	float f2
PREINIT:
	short(*func)(void *, short, float);
CODE:
	func   = INT2PTR(short(*)(void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2);
OUTPUT:
	RETVAL

float
nci_fpsf( c_func, p0, s1, f2 )
	SV* c_func
	void * p0
	short s1
	float f2
PREINIT:
	float(*func)(void *, short, float);
CODE:
	func   = INT2PTR(float(*)(void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2);
OUTPUT:
	RETVAL

char *
nci_tpsf( c_func, p0, s1, f2 )
	SV* c_func
	void * p0
	short s1
	float f2
PREINIT:
	char *(*func)(void *, short, float);
CODE:
	func   = INT2PTR(char *(*)(void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2);
OUTPUT:
	RETVAL

int
nci_ipsf( c_func, p0, s1, f2 )
	SV* c_func
	void * p0
	short s1
	float f2
PREINIT:
	int(*func)(void *, short, float);
CODE:
	func   = INT2PTR(int(*)(void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2);
OUTPUT:
	RETVAL

void *
nci_pvsf( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvsf( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvsf( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svsf( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvsf( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvsf( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivsf( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdsf( c_func, d0, s1, f2 )
	SV* c_func
	double d0
	short s1
	float f2
PREINIT:
	void *(*func)(double, short, float);
CODE:
	func   = INT2PTR(void *(*)(double, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2);
OUTPUT:
	RETVAL

void
nci_vdsf( c_func, d0, s1, f2 )
	SV* c_func
	double d0
	short s1
	float f2
PREINIT:
	void(*func)(double, short, float);
CODE:
	func   = INT2PTR(void(*)(double, short, float), SvIV(c_func) );
	(*func)(d0, s1, f2);

double
nci_ddsf( c_func, d0, s1, f2 )
	SV* c_func
	double d0
	short s1
	float f2
PREINIT:
	double(*func)(double, short, float);
CODE:
	func   = INT2PTR(double(*)(double, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2);
OUTPUT:
	RETVAL

short
nci_sdsf( c_func, d0, s1, f2 )
	SV* c_func
	double d0
	short s1
	float f2
PREINIT:
	short(*func)(double, short, float);
CODE:
	func   = INT2PTR(short(*)(double, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2);
OUTPUT:
	RETVAL

float
nci_fdsf( c_func, d0, s1, f2 )
	SV* c_func
	double d0
	short s1
	float f2
PREINIT:
	float(*func)(double, short, float);
CODE:
	func   = INT2PTR(float(*)(double, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2);
OUTPUT:
	RETVAL

char *
nci_tdsf( c_func, d0, s1, f2 )
	SV* c_func
	double d0
	short s1
	float f2
PREINIT:
	char *(*func)(double, short, float);
CODE:
	func   = INT2PTR(char *(*)(double, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2);
OUTPUT:
	RETVAL

int
nci_idsf( c_func, d0, s1, f2 )
	SV* c_func
	double d0
	short s1
	float f2
PREINIT:
	int(*func)(double, short, float);
CODE:
	func   = INT2PTR(int(*)(double, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2);
OUTPUT:
	RETVAL

void *
nci_pssf( c_func, s0, s1, f2 )
	SV* c_func
	short s0
	short s1
	float f2
PREINIT:
	void *(*func)(short, short, float);
CODE:
	func   = INT2PTR(void *(*)(short, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2);
OUTPUT:
	RETVAL

void
nci_vssf( c_func, s0, s1, f2 )
	SV* c_func
	short s0
	short s1
	float f2
PREINIT:
	void(*func)(short, short, float);
CODE:
	func   = INT2PTR(void(*)(short, short, float), SvIV(c_func) );
	(*func)(s0, s1, f2);

double
nci_dssf( c_func, s0, s1, f2 )
	SV* c_func
	short s0
	short s1
	float f2
PREINIT:
	double(*func)(short, short, float);
CODE:
	func   = INT2PTR(double(*)(short, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2);
OUTPUT:
	RETVAL

short
nci_sssf( c_func, s0, s1, f2 )
	SV* c_func
	short s0
	short s1
	float f2
PREINIT:
	short(*func)(short, short, float);
CODE:
	func   = INT2PTR(short(*)(short, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2);
OUTPUT:
	RETVAL

float
nci_fssf( c_func, s0, s1, f2 )
	SV* c_func
	short s0
	short s1
	float f2
PREINIT:
	float(*func)(short, short, float);
CODE:
	func   = INT2PTR(float(*)(short, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2);
OUTPUT:
	RETVAL

char *
nci_tssf( c_func, s0, s1, f2 )
	SV* c_func
	short s0
	short s1
	float f2
PREINIT:
	char *(*func)(short, short, float);
CODE:
	func   = INT2PTR(char *(*)(short, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2);
OUTPUT:
	RETVAL

int
nci_issf( c_func, s0, s1, f2 )
	SV* c_func
	short s0
	short s1
	float f2
PREINIT:
	int(*func)(short, short, float);
CODE:
	func   = INT2PTR(int(*)(short, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2);
OUTPUT:
	RETVAL

void *
nci_pfsf( c_func, f0, s1, f2 )
	SV* c_func
	float f0
	short s1
	float f2
PREINIT:
	void *(*func)(float, short, float);
CODE:
	func   = INT2PTR(void *(*)(float, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2);
OUTPUT:
	RETVAL

void
nci_vfsf( c_func, f0, s1, f2 )
	SV* c_func
	float f0
	short s1
	float f2
PREINIT:
	void(*func)(float, short, float);
CODE:
	func   = INT2PTR(void(*)(float, short, float), SvIV(c_func) );
	(*func)(f0, s1, f2);

double
nci_dfsf( c_func, f0, s1, f2 )
	SV* c_func
	float f0
	short s1
	float f2
PREINIT:
	double(*func)(float, short, float);
CODE:
	func   = INT2PTR(double(*)(float, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2);
OUTPUT:
	RETVAL

short
nci_sfsf( c_func, f0, s1, f2 )
	SV* c_func
	float f0
	short s1
	float f2
PREINIT:
	short(*func)(float, short, float);
CODE:
	func   = INT2PTR(short(*)(float, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2);
OUTPUT:
	RETVAL

float
nci_ffsf( c_func, f0, s1, f2 )
	SV* c_func
	float f0
	short s1
	float f2
PREINIT:
	float(*func)(float, short, float);
CODE:
	func   = INT2PTR(float(*)(float, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2);
OUTPUT:
	RETVAL

char *
nci_tfsf( c_func, f0, s1, f2 )
	SV* c_func
	float f0
	short s1
	float f2
PREINIT:
	char *(*func)(float, short, float);
CODE:
	func   = INT2PTR(char *(*)(float, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2);
OUTPUT:
	RETVAL

int
nci_ifsf( c_func, f0, s1, f2 )
	SV* c_func
	float f0
	short s1
	float f2
PREINIT:
	int(*func)(float, short, float);
CODE:
	func   = INT2PTR(int(*)(float, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2);
OUTPUT:
	RETVAL

void *
nci_ptsf( c_func, t0, s1, f2 )
	SV* c_func
	char * t0
	short s1
	float f2
PREINIT:
	void *(*func)(char *, short, float);
CODE:
	func   = INT2PTR(void *(*)(char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2);
OUTPUT:
	RETVAL

void
nci_vtsf( c_func, t0, s1, f2 )
	SV* c_func
	char * t0
	short s1
	float f2
PREINIT:
	void(*func)(char *, short, float);
CODE:
	func   = INT2PTR(void(*)(char *, short, float), SvIV(c_func) );
	(*func)(t0, s1, f2);

double
nci_dtsf( c_func, t0, s1, f2 )
	SV* c_func
	char * t0
	short s1
	float f2
PREINIT:
	double(*func)(char *, short, float);
CODE:
	func   = INT2PTR(double(*)(char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2);
OUTPUT:
	RETVAL

short
nci_stsf( c_func, t0, s1, f2 )
	SV* c_func
	char * t0
	short s1
	float f2
PREINIT:
	short(*func)(char *, short, float);
CODE:
	func   = INT2PTR(short(*)(char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2);
OUTPUT:
	RETVAL

float
nci_ftsf( c_func, t0, s1, f2 )
	SV* c_func
	char * t0
	short s1
	float f2
PREINIT:
	float(*func)(char *, short, float);
CODE:
	func   = INT2PTR(float(*)(char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2);
OUTPUT:
	RETVAL

char *
nci_ttsf( c_func, t0, s1, f2 )
	SV* c_func
	char * t0
	short s1
	float f2
PREINIT:
	char *(*func)(char *, short, float);
CODE:
	func   = INT2PTR(char *(*)(char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2);
OUTPUT:
	RETVAL

int
nci_itsf( c_func, t0, s1, f2 )
	SV* c_func
	char * t0
	short s1
	float f2
PREINIT:
	int(*func)(char *, short, float);
CODE:
	func   = INT2PTR(int(*)(char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2);
OUTPUT:
	RETVAL

void *
nci_pisf( c_func, i0, s1, f2 )
	SV* c_func
	int i0
	short s1
	float f2
PREINIT:
	void *(*func)(int, short, float);
CODE:
	func   = INT2PTR(void *(*)(int, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2);
OUTPUT:
	RETVAL

void
nci_visf( c_func, i0, s1, f2 )
	SV* c_func
	int i0
	short s1
	float f2
PREINIT:
	void(*func)(int, short, float);
CODE:
	func   = INT2PTR(void(*)(int, short, float), SvIV(c_func) );
	(*func)(i0, s1, f2);

double
nci_disf( c_func, i0, s1, f2 )
	SV* c_func
	int i0
	short s1
	float f2
PREINIT:
	double(*func)(int, short, float);
CODE:
	func   = INT2PTR(double(*)(int, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2);
OUTPUT:
	RETVAL

short
nci_sisf( c_func, i0, s1, f2 )
	SV* c_func
	int i0
	short s1
	float f2
PREINIT:
	short(*func)(int, short, float);
CODE:
	func   = INT2PTR(short(*)(int, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2);
OUTPUT:
	RETVAL

float
nci_fisf( c_func, i0, s1, f2 )
	SV* c_func
	int i0
	short s1
	float f2
PREINIT:
	float(*func)(int, short, float);
CODE:
	func   = INT2PTR(float(*)(int, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2);
OUTPUT:
	RETVAL

char *
nci_tisf( c_func, i0, s1, f2 )
	SV* c_func
	int i0
	short s1
	float f2
PREINIT:
	char *(*func)(int, short, float);
CODE:
	func   = INT2PTR(char *(*)(int, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2);
OUTPUT:
	RETVAL

int
nci_iisf( c_func, i0, s1, f2 )
	SV* c_func
	int i0
	short s1
	float f2
PREINIT:
	int(*func)(int, short, float);
CODE:
	func   = INT2PTR(int(*)(int, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2);
OUTPUT:
	RETVAL

void *
nci_ppff( c_func, p0, f1, f2 )
	SV* c_func
	void * p0
	float f1
	float f2
PREINIT:
	void *(*func)(void *, float, float);
CODE:
	func   = INT2PTR(void *(*)(void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2);
OUTPUT:
	RETVAL

void
nci_vpff( c_func, p0, f1, f2 )
	SV* c_func
	void * p0
	float f1
	float f2
PREINIT:
	void(*func)(void *, float, float);
CODE:
	func   = INT2PTR(void(*)(void *, float, float), SvIV(c_func) );
	(*func)(p0, f1, f2);

double
nci_dpff( c_func, p0, f1, f2 )
	SV* c_func
	void * p0
	float f1
	float f2
PREINIT:
	double(*func)(void *, float, float);
CODE:
	func   = INT2PTR(double(*)(void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2);
OUTPUT:
	RETVAL

short
nci_spff( c_func, p0, f1, f2 )
	SV* c_func
	void * p0
	float f1
	float f2
PREINIT:
	short(*func)(void *, float, float);
CODE:
	func   = INT2PTR(short(*)(void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2);
OUTPUT:
	RETVAL

float
nci_fpff( c_func, p0, f1, f2 )
	SV* c_func
	void * p0
	float f1
	float f2
PREINIT:
	float(*func)(void *, float, float);
CODE:
	func   = INT2PTR(float(*)(void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2);
OUTPUT:
	RETVAL

char *
nci_tpff( c_func, p0, f1, f2 )
	SV* c_func
	void * p0
	float f1
	float f2
PREINIT:
	char *(*func)(void *, float, float);
CODE:
	func   = INT2PTR(char *(*)(void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2);
OUTPUT:
	RETVAL

int
nci_ipff( c_func, p0, f1, f2 )
	SV* c_func
	void * p0
	float f1
	float f2
PREINIT:
	int(*func)(void *, float, float);
CODE:
	func   = INT2PTR(int(*)(void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2);
OUTPUT:
	RETVAL

void *
nci_pvff( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvff( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvff( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svff( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvff( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvff( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivff( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdff( c_func, d0, f1, f2 )
	SV* c_func
	double d0
	float f1
	float f2
PREINIT:
	void *(*func)(double, float, float);
CODE:
	func   = INT2PTR(void *(*)(double, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2);
OUTPUT:
	RETVAL

void
nci_vdff( c_func, d0, f1, f2 )
	SV* c_func
	double d0
	float f1
	float f2
PREINIT:
	void(*func)(double, float, float);
CODE:
	func   = INT2PTR(void(*)(double, float, float), SvIV(c_func) );
	(*func)(d0, f1, f2);

double
nci_ddff( c_func, d0, f1, f2 )
	SV* c_func
	double d0
	float f1
	float f2
PREINIT:
	double(*func)(double, float, float);
CODE:
	func   = INT2PTR(double(*)(double, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2);
OUTPUT:
	RETVAL

short
nci_sdff( c_func, d0, f1, f2 )
	SV* c_func
	double d0
	float f1
	float f2
PREINIT:
	short(*func)(double, float, float);
CODE:
	func   = INT2PTR(short(*)(double, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2);
OUTPUT:
	RETVAL

float
nci_fdff( c_func, d0, f1, f2 )
	SV* c_func
	double d0
	float f1
	float f2
PREINIT:
	float(*func)(double, float, float);
CODE:
	func   = INT2PTR(float(*)(double, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2);
OUTPUT:
	RETVAL

char *
nci_tdff( c_func, d0, f1, f2 )
	SV* c_func
	double d0
	float f1
	float f2
PREINIT:
	char *(*func)(double, float, float);
CODE:
	func   = INT2PTR(char *(*)(double, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2);
OUTPUT:
	RETVAL

int
nci_idff( c_func, d0, f1, f2 )
	SV* c_func
	double d0
	float f1
	float f2
PREINIT:
	int(*func)(double, float, float);
CODE:
	func   = INT2PTR(int(*)(double, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2);
OUTPUT:
	RETVAL

void *
nci_psff( c_func, s0, f1, f2 )
	SV* c_func
	short s0
	float f1
	float f2
PREINIT:
	void *(*func)(short, float, float);
CODE:
	func   = INT2PTR(void *(*)(short, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2);
OUTPUT:
	RETVAL

void
nci_vsff( c_func, s0, f1, f2 )
	SV* c_func
	short s0
	float f1
	float f2
PREINIT:
	void(*func)(short, float, float);
CODE:
	func   = INT2PTR(void(*)(short, float, float), SvIV(c_func) );
	(*func)(s0, f1, f2);

double
nci_dsff( c_func, s0, f1, f2 )
	SV* c_func
	short s0
	float f1
	float f2
PREINIT:
	double(*func)(short, float, float);
CODE:
	func   = INT2PTR(double(*)(short, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2);
OUTPUT:
	RETVAL

short
nci_ssff( c_func, s0, f1, f2 )
	SV* c_func
	short s0
	float f1
	float f2
PREINIT:
	short(*func)(short, float, float);
CODE:
	func   = INT2PTR(short(*)(short, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2);
OUTPUT:
	RETVAL

float
nci_fsff( c_func, s0, f1, f2 )
	SV* c_func
	short s0
	float f1
	float f2
PREINIT:
	float(*func)(short, float, float);
CODE:
	func   = INT2PTR(float(*)(short, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2);
OUTPUT:
	RETVAL

char *
nci_tsff( c_func, s0, f1, f2 )
	SV* c_func
	short s0
	float f1
	float f2
PREINIT:
	char *(*func)(short, float, float);
CODE:
	func   = INT2PTR(char *(*)(short, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2);
OUTPUT:
	RETVAL

int
nci_isff( c_func, s0, f1, f2 )
	SV* c_func
	short s0
	float f1
	float f2
PREINIT:
	int(*func)(short, float, float);
CODE:
	func   = INT2PTR(int(*)(short, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2);
OUTPUT:
	RETVAL

void *
nci_pfff( c_func, f0, f1, f2 )
	SV* c_func
	float f0
	float f1
	float f2
PREINIT:
	void *(*func)(float, float, float);
CODE:
	func   = INT2PTR(void *(*)(float, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2);
OUTPUT:
	RETVAL

void
nci_vfff( c_func, f0, f1, f2 )
	SV* c_func
	float f0
	float f1
	float f2
PREINIT:
	void(*func)(float, float, float);
CODE:
	func   = INT2PTR(void(*)(float, float, float), SvIV(c_func) );
	(*func)(f0, f1, f2);

double
nci_dfff( c_func, f0, f1, f2 )
	SV* c_func
	float f0
	float f1
	float f2
PREINIT:
	double(*func)(float, float, float);
CODE:
	func   = INT2PTR(double(*)(float, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2);
OUTPUT:
	RETVAL

short
nci_sfff( c_func, f0, f1, f2 )
	SV* c_func
	float f0
	float f1
	float f2
PREINIT:
	short(*func)(float, float, float);
CODE:
	func   = INT2PTR(short(*)(float, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2);
OUTPUT:
	RETVAL

float
nci_ffff( c_func, f0, f1, f2 )
	SV* c_func
	float f0
	float f1
	float f2
PREINIT:
	float(*func)(float, float, float);
CODE:
	func   = INT2PTR(float(*)(float, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2);
OUTPUT:
	RETVAL

char *
nci_tfff( c_func, f0, f1, f2 )
	SV* c_func
	float f0
	float f1
	float f2
PREINIT:
	char *(*func)(float, float, float);
CODE:
	func   = INT2PTR(char *(*)(float, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2);
OUTPUT:
	RETVAL

int
nci_ifff( c_func, f0, f1, f2 )
	SV* c_func
	float f0
	float f1
	float f2
PREINIT:
	int(*func)(float, float, float);
CODE:
	func   = INT2PTR(int(*)(float, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2);
OUTPUT:
	RETVAL

void *
nci_ptff( c_func, t0, f1, f2 )
	SV* c_func
	char * t0
	float f1
	float f2
PREINIT:
	void *(*func)(char *, float, float);
CODE:
	func   = INT2PTR(void *(*)(char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2);
OUTPUT:
	RETVAL

void
nci_vtff( c_func, t0, f1, f2 )
	SV* c_func
	char * t0
	float f1
	float f2
PREINIT:
	void(*func)(char *, float, float);
CODE:
	func   = INT2PTR(void(*)(char *, float, float), SvIV(c_func) );
	(*func)(t0, f1, f2);

double
nci_dtff( c_func, t0, f1, f2 )
	SV* c_func
	char * t0
	float f1
	float f2
PREINIT:
	double(*func)(char *, float, float);
CODE:
	func   = INT2PTR(double(*)(char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2);
OUTPUT:
	RETVAL

short
nci_stff( c_func, t0, f1, f2 )
	SV* c_func
	char * t0
	float f1
	float f2
PREINIT:
	short(*func)(char *, float, float);
CODE:
	func   = INT2PTR(short(*)(char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2);
OUTPUT:
	RETVAL

float
nci_ftff( c_func, t0, f1, f2 )
	SV* c_func
	char * t0
	float f1
	float f2
PREINIT:
	float(*func)(char *, float, float);
CODE:
	func   = INT2PTR(float(*)(char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2);
OUTPUT:
	RETVAL

char *
nci_ttff( c_func, t0, f1, f2 )
	SV* c_func
	char * t0
	float f1
	float f2
PREINIT:
	char *(*func)(char *, float, float);
CODE:
	func   = INT2PTR(char *(*)(char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2);
OUTPUT:
	RETVAL

int
nci_itff( c_func, t0, f1, f2 )
	SV* c_func
	char * t0
	float f1
	float f2
PREINIT:
	int(*func)(char *, float, float);
CODE:
	func   = INT2PTR(int(*)(char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2);
OUTPUT:
	RETVAL

void *
nci_piff( c_func, i0, f1, f2 )
	SV* c_func
	int i0
	float f1
	float f2
PREINIT:
	void *(*func)(int, float, float);
CODE:
	func   = INT2PTR(void *(*)(int, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2);
OUTPUT:
	RETVAL

void
nci_viff( c_func, i0, f1, f2 )
	SV* c_func
	int i0
	float f1
	float f2
PREINIT:
	void(*func)(int, float, float);
CODE:
	func   = INT2PTR(void(*)(int, float, float), SvIV(c_func) );
	(*func)(i0, f1, f2);

double
nci_diff( c_func, i0, f1, f2 )
	SV* c_func
	int i0
	float f1
	float f2
PREINIT:
	double(*func)(int, float, float);
CODE:
	func   = INT2PTR(double(*)(int, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2);
OUTPUT:
	RETVAL

short
nci_siff( c_func, i0, f1, f2 )
	SV* c_func
	int i0
	float f1
	float f2
PREINIT:
	short(*func)(int, float, float);
CODE:
	func   = INT2PTR(short(*)(int, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2);
OUTPUT:
	RETVAL

float
nci_fiff( c_func, i0, f1, f2 )
	SV* c_func
	int i0
	float f1
	float f2
PREINIT:
	float(*func)(int, float, float);
CODE:
	func   = INT2PTR(float(*)(int, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2);
OUTPUT:
	RETVAL

char *
nci_tiff( c_func, i0, f1, f2 )
	SV* c_func
	int i0
	float f1
	float f2
PREINIT:
	char *(*func)(int, float, float);
CODE:
	func   = INT2PTR(char *(*)(int, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2);
OUTPUT:
	RETVAL

int
nci_iiff( c_func, i0, f1, f2 )
	SV* c_func
	int i0
	float f1
	float f2
PREINIT:
	int(*func)(int, float, float);
CODE:
	func   = INT2PTR(int(*)(int, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2);
OUTPUT:
	RETVAL

void *
nci_pptf( c_func, p0, t1, f2 )
	SV* c_func
	void * p0
	char * t1
	float f2
PREINIT:
	void *(*func)(void *, char *, float);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2);
OUTPUT:
	RETVAL

void
nci_vptf( c_func, p0, t1, f2 )
	SV* c_func
	void * p0
	char * t1
	float f2
PREINIT:
	void(*func)(void *, char *, float);
CODE:
	func   = INT2PTR(void(*)(void *, char *, float), SvIV(c_func) );
	(*func)(p0, t1, f2);

double
nci_dptf( c_func, p0, t1, f2 )
	SV* c_func
	void * p0
	char * t1
	float f2
PREINIT:
	double(*func)(void *, char *, float);
CODE:
	func   = INT2PTR(double(*)(void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2);
OUTPUT:
	RETVAL

short
nci_sptf( c_func, p0, t1, f2 )
	SV* c_func
	void * p0
	char * t1
	float f2
PREINIT:
	short(*func)(void *, char *, float);
CODE:
	func   = INT2PTR(short(*)(void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2);
OUTPUT:
	RETVAL

float
nci_fptf( c_func, p0, t1, f2 )
	SV* c_func
	void * p0
	char * t1
	float f2
PREINIT:
	float(*func)(void *, char *, float);
CODE:
	func   = INT2PTR(float(*)(void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2);
OUTPUT:
	RETVAL

char *
nci_tptf( c_func, p0, t1, f2 )
	SV* c_func
	void * p0
	char * t1
	float f2
PREINIT:
	char *(*func)(void *, char *, float);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2);
OUTPUT:
	RETVAL

int
nci_iptf( c_func, p0, t1, f2 )
	SV* c_func
	void * p0
	char * t1
	float f2
PREINIT:
	int(*func)(void *, char *, float);
CODE:
	func   = INT2PTR(int(*)(void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2);
OUTPUT:
	RETVAL

void *
nci_pvtf( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvtf( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvtf( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svtf( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvtf( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvtf( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivtf( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdtf( c_func, d0, t1, f2 )
	SV* c_func
	double d0
	char * t1
	float f2
PREINIT:
	void *(*func)(double, char *, float);
CODE:
	func   = INT2PTR(void *(*)(double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2);
OUTPUT:
	RETVAL

void
nci_vdtf( c_func, d0, t1, f2 )
	SV* c_func
	double d0
	char * t1
	float f2
PREINIT:
	void(*func)(double, char *, float);
CODE:
	func   = INT2PTR(void(*)(double, char *, float), SvIV(c_func) );
	(*func)(d0, t1, f2);

double
nci_ddtf( c_func, d0, t1, f2 )
	SV* c_func
	double d0
	char * t1
	float f2
PREINIT:
	double(*func)(double, char *, float);
CODE:
	func   = INT2PTR(double(*)(double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2);
OUTPUT:
	RETVAL

short
nci_sdtf( c_func, d0, t1, f2 )
	SV* c_func
	double d0
	char * t1
	float f2
PREINIT:
	short(*func)(double, char *, float);
CODE:
	func   = INT2PTR(short(*)(double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2);
OUTPUT:
	RETVAL

float
nci_fdtf( c_func, d0, t1, f2 )
	SV* c_func
	double d0
	char * t1
	float f2
PREINIT:
	float(*func)(double, char *, float);
CODE:
	func   = INT2PTR(float(*)(double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2);
OUTPUT:
	RETVAL

char *
nci_tdtf( c_func, d0, t1, f2 )
	SV* c_func
	double d0
	char * t1
	float f2
PREINIT:
	char *(*func)(double, char *, float);
CODE:
	func   = INT2PTR(char *(*)(double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2);
OUTPUT:
	RETVAL

int
nci_idtf( c_func, d0, t1, f2 )
	SV* c_func
	double d0
	char * t1
	float f2
PREINIT:
	int(*func)(double, char *, float);
CODE:
	func   = INT2PTR(int(*)(double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2);
OUTPUT:
	RETVAL

void *
nci_pstf( c_func, s0, t1, f2 )
	SV* c_func
	short s0
	char * t1
	float f2
PREINIT:
	void *(*func)(short, char *, float);
CODE:
	func   = INT2PTR(void *(*)(short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2);
OUTPUT:
	RETVAL

void
nci_vstf( c_func, s0, t1, f2 )
	SV* c_func
	short s0
	char * t1
	float f2
PREINIT:
	void(*func)(short, char *, float);
CODE:
	func   = INT2PTR(void(*)(short, char *, float), SvIV(c_func) );
	(*func)(s0, t1, f2);

double
nci_dstf( c_func, s0, t1, f2 )
	SV* c_func
	short s0
	char * t1
	float f2
PREINIT:
	double(*func)(short, char *, float);
CODE:
	func   = INT2PTR(double(*)(short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2);
OUTPUT:
	RETVAL

short
nci_sstf( c_func, s0, t1, f2 )
	SV* c_func
	short s0
	char * t1
	float f2
PREINIT:
	short(*func)(short, char *, float);
CODE:
	func   = INT2PTR(short(*)(short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2);
OUTPUT:
	RETVAL

float
nci_fstf( c_func, s0, t1, f2 )
	SV* c_func
	short s0
	char * t1
	float f2
PREINIT:
	float(*func)(short, char *, float);
CODE:
	func   = INT2PTR(float(*)(short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2);
OUTPUT:
	RETVAL

char *
nci_tstf( c_func, s0, t1, f2 )
	SV* c_func
	short s0
	char * t1
	float f2
PREINIT:
	char *(*func)(short, char *, float);
CODE:
	func   = INT2PTR(char *(*)(short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2);
OUTPUT:
	RETVAL

int
nci_istf( c_func, s0, t1, f2 )
	SV* c_func
	short s0
	char * t1
	float f2
PREINIT:
	int(*func)(short, char *, float);
CODE:
	func   = INT2PTR(int(*)(short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2);
OUTPUT:
	RETVAL

void *
nci_pftf( c_func, f0, t1, f2 )
	SV* c_func
	float f0
	char * t1
	float f2
PREINIT:
	void *(*func)(float, char *, float);
CODE:
	func   = INT2PTR(void *(*)(float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2);
OUTPUT:
	RETVAL

void
nci_vftf( c_func, f0, t1, f2 )
	SV* c_func
	float f0
	char * t1
	float f2
PREINIT:
	void(*func)(float, char *, float);
CODE:
	func   = INT2PTR(void(*)(float, char *, float), SvIV(c_func) );
	(*func)(f0, t1, f2);

double
nci_dftf( c_func, f0, t1, f2 )
	SV* c_func
	float f0
	char * t1
	float f2
PREINIT:
	double(*func)(float, char *, float);
CODE:
	func   = INT2PTR(double(*)(float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2);
OUTPUT:
	RETVAL

short
nci_sftf( c_func, f0, t1, f2 )
	SV* c_func
	float f0
	char * t1
	float f2
PREINIT:
	short(*func)(float, char *, float);
CODE:
	func   = INT2PTR(short(*)(float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2);
OUTPUT:
	RETVAL

float
nci_fftf( c_func, f0, t1, f2 )
	SV* c_func
	float f0
	char * t1
	float f2
PREINIT:
	float(*func)(float, char *, float);
CODE:
	func   = INT2PTR(float(*)(float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2);
OUTPUT:
	RETVAL

char *
nci_tftf( c_func, f0, t1, f2 )
	SV* c_func
	float f0
	char * t1
	float f2
PREINIT:
	char *(*func)(float, char *, float);
CODE:
	func   = INT2PTR(char *(*)(float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2);
OUTPUT:
	RETVAL

int
nci_iftf( c_func, f0, t1, f2 )
	SV* c_func
	float f0
	char * t1
	float f2
PREINIT:
	int(*func)(float, char *, float);
CODE:
	func   = INT2PTR(int(*)(float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2);
OUTPUT:
	RETVAL

void *
nci_pttf( c_func, t0, t1, f2 )
	SV* c_func
	char * t0
	char * t1
	float f2
PREINIT:
	void *(*func)(char *, char *, float);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2);
OUTPUT:
	RETVAL

void
nci_vttf( c_func, t0, t1, f2 )
	SV* c_func
	char * t0
	char * t1
	float f2
PREINIT:
	void(*func)(char *, char *, float);
CODE:
	func   = INT2PTR(void(*)(char *, char *, float), SvIV(c_func) );
	(*func)(t0, t1, f2);

double
nci_dttf( c_func, t0, t1, f2 )
	SV* c_func
	char * t0
	char * t1
	float f2
PREINIT:
	double(*func)(char *, char *, float);
CODE:
	func   = INT2PTR(double(*)(char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2);
OUTPUT:
	RETVAL

short
nci_sttf( c_func, t0, t1, f2 )
	SV* c_func
	char * t0
	char * t1
	float f2
PREINIT:
	short(*func)(char *, char *, float);
CODE:
	func   = INT2PTR(short(*)(char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2);
OUTPUT:
	RETVAL

float
nci_fttf( c_func, t0, t1, f2 )
	SV* c_func
	char * t0
	char * t1
	float f2
PREINIT:
	float(*func)(char *, char *, float);
CODE:
	func   = INT2PTR(float(*)(char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2);
OUTPUT:
	RETVAL

char *
nci_tttf( c_func, t0, t1, f2 )
	SV* c_func
	char * t0
	char * t1
	float f2
PREINIT:
	char *(*func)(char *, char *, float);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2);
OUTPUT:
	RETVAL

int
nci_ittf( c_func, t0, t1, f2 )
	SV* c_func
	char * t0
	char * t1
	float f2
PREINIT:
	int(*func)(char *, char *, float);
CODE:
	func   = INT2PTR(int(*)(char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2);
OUTPUT:
	RETVAL

void *
nci_pitf( c_func, i0, t1, f2 )
	SV* c_func
	int i0
	char * t1
	float f2
PREINIT:
	void *(*func)(int, char *, float);
CODE:
	func   = INT2PTR(void *(*)(int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2);
OUTPUT:
	RETVAL

void
nci_vitf( c_func, i0, t1, f2 )
	SV* c_func
	int i0
	char * t1
	float f2
PREINIT:
	void(*func)(int, char *, float);
CODE:
	func   = INT2PTR(void(*)(int, char *, float), SvIV(c_func) );
	(*func)(i0, t1, f2);

double
nci_ditf( c_func, i0, t1, f2 )
	SV* c_func
	int i0
	char * t1
	float f2
PREINIT:
	double(*func)(int, char *, float);
CODE:
	func   = INT2PTR(double(*)(int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2);
OUTPUT:
	RETVAL

short
nci_sitf( c_func, i0, t1, f2 )
	SV* c_func
	int i0
	char * t1
	float f2
PREINIT:
	short(*func)(int, char *, float);
CODE:
	func   = INT2PTR(short(*)(int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2);
OUTPUT:
	RETVAL

float
nci_fitf( c_func, i0, t1, f2 )
	SV* c_func
	int i0
	char * t1
	float f2
PREINIT:
	float(*func)(int, char *, float);
CODE:
	func   = INT2PTR(float(*)(int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2);
OUTPUT:
	RETVAL

char *
nci_titf( c_func, i0, t1, f2 )
	SV* c_func
	int i0
	char * t1
	float f2
PREINIT:
	char *(*func)(int, char *, float);
CODE:
	func   = INT2PTR(char *(*)(int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2);
OUTPUT:
	RETVAL

int
nci_iitf( c_func, i0, t1, f2 )
	SV* c_func
	int i0
	char * t1
	float f2
PREINIT:
	int(*func)(int, char *, float);
CODE:
	func   = INT2PTR(int(*)(int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2);
OUTPUT:
	RETVAL

void *
nci_ppif( c_func, p0, i1, f2 )
	SV* c_func
	void * p0
	int i1
	float f2
PREINIT:
	void *(*func)(void *, int, float);
CODE:
	func   = INT2PTR(void *(*)(void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2);
OUTPUT:
	RETVAL

void
nci_vpif( c_func, p0, i1, f2 )
	SV* c_func
	void * p0
	int i1
	float f2
PREINIT:
	void(*func)(void *, int, float);
CODE:
	func   = INT2PTR(void(*)(void *, int, float), SvIV(c_func) );
	(*func)(p0, i1, f2);

double
nci_dpif( c_func, p0, i1, f2 )
	SV* c_func
	void * p0
	int i1
	float f2
PREINIT:
	double(*func)(void *, int, float);
CODE:
	func   = INT2PTR(double(*)(void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2);
OUTPUT:
	RETVAL

short
nci_spif( c_func, p0, i1, f2 )
	SV* c_func
	void * p0
	int i1
	float f2
PREINIT:
	short(*func)(void *, int, float);
CODE:
	func   = INT2PTR(short(*)(void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2);
OUTPUT:
	RETVAL

float
nci_fpif( c_func, p0, i1, f2 )
	SV* c_func
	void * p0
	int i1
	float f2
PREINIT:
	float(*func)(void *, int, float);
CODE:
	func   = INT2PTR(float(*)(void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2);
OUTPUT:
	RETVAL

char *
nci_tpif( c_func, p0, i1, f2 )
	SV* c_func
	void * p0
	int i1
	float f2
PREINIT:
	char *(*func)(void *, int, float);
CODE:
	func   = INT2PTR(char *(*)(void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2);
OUTPUT:
	RETVAL

int
nci_ipif( c_func, p0, i1, f2 )
	SV* c_func
	void * p0
	int i1
	float f2
PREINIT:
	int(*func)(void *, int, float);
CODE:
	func   = INT2PTR(int(*)(void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2);
OUTPUT:
	RETVAL

void *
nci_pvif( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvif( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvif( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svif( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvif( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvif( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivif( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdif( c_func, d0, i1, f2 )
	SV* c_func
	double d0
	int i1
	float f2
PREINIT:
	void *(*func)(double, int, float);
CODE:
	func   = INT2PTR(void *(*)(double, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2);
OUTPUT:
	RETVAL

void
nci_vdif( c_func, d0, i1, f2 )
	SV* c_func
	double d0
	int i1
	float f2
PREINIT:
	void(*func)(double, int, float);
CODE:
	func   = INT2PTR(void(*)(double, int, float), SvIV(c_func) );
	(*func)(d0, i1, f2);

double
nci_ddif( c_func, d0, i1, f2 )
	SV* c_func
	double d0
	int i1
	float f2
PREINIT:
	double(*func)(double, int, float);
CODE:
	func   = INT2PTR(double(*)(double, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2);
OUTPUT:
	RETVAL

short
nci_sdif( c_func, d0, i1, f2 )
	SV* c_func
	double d0
	int i1
	float f2
PREINIT:
	short(*func)(double, int, float);
CODE:
	func   = INT2PTR(short(*)(double, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2);
OUTPUT:
	RETVAL

float
nci_fdif( c_func, d0, i1, f2 )
	SV* c_func
	double d0
	int i1
	float f2
PREINIT:
	float(*func)(double, int, float);
CODE:
	func   = INT2PTR(float(*)(double, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2);
OUTPUT:
	RETVAL

char *
nci_tdif( c_func, d0, i1, f2 )
	SV* c_func
	double d0
	int i1
	float f2
PREINIT:
	char *(*func)(double, int, float);
CODE:
	func   = INT2PTR(char *(*)(double, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2);
OUTPUT:
	RETVAL

int
nci_idif( c_func, d0, i1, f2 )
	SV* c_func
	double d0
	int i1
	float f2
PREINIT:
	int(*func)(double, int, float);
CODE:
	func   = INT2PTR(int(*)(double, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2);
OUTPUT:
	RETVAL

void *
nci_psif( c_func, s0, i1, f2 )
	SV* c_func
	short s0
	int i1
	float f2
PREINIT:
	void *(*func)(short, int, float);
CODE:
	func   = INT2PTR(void *(*)(short, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2);
OUTPUT:
	RETVAL

void
nci_vsif( c_func, s0, i1, f2 )
	SV* c_func
	short s0
	int i1
	float f2
PREINIT:
	void(*func)(short, int, float);
CODE:
	func   = INT2PTR(void(*)(short, int, float), SvIV(c_func) );
	(*func)(s0, i1, f2);

double
nci_dsif( c_func, s0, i1, f2 )
	SV* c_func
	short s0
	int i1
	float f2
PREINIT:
	double(*func)(short, int, float);
CODE:
	func   = INT2PTR(double(*)(short, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2);
OUTPUT:
	RETVAL

short
nci_ssif( c_func, s0, i1, f2 )
	SV* c_func
	short s0
	int i1
	float f2
PREINIT:
	short(*func)(short, int, float);
CODE:
	func   = INT2PTR(short(*)(short, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2);
OUTPUT:
	RETVAL

float
nci_fsif( c_func, s0, i1, f2 )
	SV* c_func
	short s0
	int i1
	float f2
PREINIT:
	float(*func)(short, int, float);
CODE:
	func   = INT2PTR(float(*)(short, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2);
OUTPUT:
	RETVAL

char *
nci_tsif( c_func, s0, i1, f2 )
	SV* c_func
	short s0
	int i1
	float f2
PREINIT:
	char *(*func)(short, int, float);
CODE:
	func   = INT2PTR(char *(*)(short, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2);
OUTPUT:
	RETVAL

int
nci_isif( c_func, s0, i1, f2 )
	SV* c_func
	short s0
	int i1
	float f2
PREINIT:
	int(*func)(short, int, float);
CODE:
	func   = INT2PTR(int(*)(short, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2);
OUTPUT:
	RETVAL

void *
nci_pfif( c_func, f0, i1, f2 )
	SV* c_func
	float f0
	int i1
	float f2
PREINIT:
	void *(*func)(float, int, float);
CODE:
	func   = INT2PTR(void *(*)(float, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2);
OUTPUT:
	RETVAL

void
nci_vfif( c_func, f0, i1, f2 )
	SV* c_func
	float f0
	int i1
	float f2
PREINIT:
	void(*func)(float, int, float);
CODE:
	func   = INT2PTR(void(*)(float, int, float), SvIV(c_func) );
	(*func)(f0, i1, f2);

double
nci_dfif( c_func, f0, i1, f2 )
	SV* c_func
	float f0
	int i1
	float f2
PREINIT:
	double(*func)(float, int, float);
CODE:
	func   = INT2PTR(double(*)(float, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2);
OUTPUT:
	RETVAL

short
nci_sfif( c_func, f0, i1, f2 )
	SV* c_func
	float f0
	int i1
	float f2
PREINIT:
	short(*func)(float, int, float);
CODE:
	func   = INT2PTR(short(*)(float, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2);
OUTPUT:
	RETVAL

float
nci_ffif( c_func, f0, i1, f2 )
	SV* c_func
	float f0
	int i1
	float f2
PREINIT:
	float(*func)(float, int, float);
CODE:
	func   = INT2PTR(float(*)(float, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2);
OUTPUT:
	RETVAL

char *
nci_tfif( c_func, f0, i1, f2 )
	SV* c_func
	float f0
	int i1
	float f2
PREINIT:
	char *(*func)(float, int, float);
CODE:
	func   = INT2PTR(char *(*)(float, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2);
OUTPUT:
	RETVAL

int
nci_ifif( c_func, f0, i1, f2 )
	SV* c_func
	float f0
	int i1
	float f2
PREINIT:
	int(*func)(float, int, float);
CODE:
	func   = INT2PTR(int(*)(float, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2);
OUTPUT:
	RETVAL

void *
nci_ptif( c_func, t0, i1, f2 )
	SV* c_func
	char * t0
	int i1
	float f2
PREINIT:
	void *(*func)(char *, int, float);
CODE:
	func   = INT2PTR(void *(*)(char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2);
OUTPUT:
	RETVAL

void
nci_vtif( c_func, t0, i1, f2 )
	SV* c_func
	char * t0
	int i1
	float f2
PREINIT:
	void(*func)(char *, int, float);
CODE:
	func   = INT2PTR(void(*)(char *, int, float), SvIV(c_func) );
	(*func)(t0, i1, f2);

double
nci_dtif( c_func, t0, i1, f2 )
	SV* c_func
	char * t0
	int i1
	float f2
PREINIT:
	double(*func)(char *, int, float);
CODE:
	func   = INT2PTR(double(*)(char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2);
OUTPUT:
	RETVAL

short
nci_stif( c_func, t0, i1, f2 )
	SV* c_func
	char * t0
	int i1
	float f2
PREINIT:
	short(*func)(char *, int, float);
CODE:
	func   = INT2PTR(short(*)(char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2);
OUTPUT:
	RETVAL

float
nci_ftif( c_func, t0, i1, f2 )
	SV* c_func
	char * t0
	int i1
	float f2
PREINIT:
	float(*func)(char *, int, float);
CODE:
	func   = INT2PTR(float(*)(char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2);
OUTPUT:
	RETVAL

char *
nci_ttif( c_func, t0, i1, f2 )
	SV* c_func
	char * t0
	int i1
	float f2
PREINIT:
	char *(*func)(char *, int, float);
CODE:
	func   = INT2PTR(char *(*)(char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2);
OUTPUT:
	RETVAL

int
nci_itif( c_func, t0, i1, f2 )
	SV* c_func
	char * t0
	int i1
	float f2
PREINIT:
	int(*func)(char *, int, float);
CODE:
	func   = INT2PTR(int(*)(char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2);
OUTPUT:
	RETVAL

void *
nci_piif( c_func, i0, i1, f2 )
	SV* c_func
	int i0
	int i1
	float f2
PREINIT:
	void *(*func)(int, int, float);
CODE:
	func   = INT2PTR(void *(*)(int, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2);
OUTPUT:
	RETVAL

void
nci_viif( c_func, i0, i1, f2 )
	SV* c_func
	int i0
	int i1
	float f2
PREINIT:
	void(*func)(int, int, float);
CODE:
	func   = INT2PTR(void(*)(int, int, float), SvIV(c_func) );
	(*func)(i0, i1, f2);

double
nci_diif( c_func, i0, i1, f2 )
	SV* c_func
	int i0
	int i1
	float f2
PREINIT:
	double(*func)(int, int, float);
CODE:
	func   = INT2PTR(double(*)(int, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2);
OUTPUT:
	RETVAL

short
nci_siif( c_func, i0, i1, f2 )
	SV* c_func
	int i0
	int i1
	float f2
PREINIT:
	short(*func)(int, int, float);
CODE:
	func   = INT2PTR(short(*)(int, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2);
OUTPUT:
	RETVAL

float
nci_fiif( c_func, i0, i1, f2 )
	SV* c_func
	int i0
	int i1
	float f2
PREINIT:
	float(*func)(int, int, float);
CODE:
	func   = INT2PTR(float(*)(int, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2);
OUTPUT:
	RETVAL

char *
nci_tiif( c_func, i0, i1, f2 )
	SV* c_func
	int i0
	int i1
	float f2
PREINIT:
	char *(*func)(int, int, float);
CODE:
	func   = INT2PTR(char *(*)(int, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2);
OUTPUT:
	RETVAL

int
nci_iiif( c_func, i0, i1, f2 )
	SV* c_func
	int i0
	int i1
	float f2
PREINIT:
	int(*func)(int, int, float);
CODE:
	func   = INT2PTR(int(*)(int, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2);
OUTPUT:
	RETVAL

void *
nci_pppt( c_func, p0, p1, t2 )
	SV* c_func
	void * p0
	void * p1
	char * t2
PREINIT:
	void *(*func)(void *, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2);
OUTPUT:
	RETVAL

void
nci_vppt( c_func, p0, p1, t2 )
	SV* c_func
	void * p0
	void * p1
	char * t2
PREINIT:
	void(*func)(void *, void *, char *);
CODE:
	func   = INT2PTR(void(*)(void *, void *, char *), SvIV(c_func) );
	(*func)(p0, p1, t2);

double
nci_dppt( c_func, p0, p1, t2 )
	SV* c_func
	void * p0
	void * p1
	char * t2
PREINIT:
	double(*func)(void *, void *, char *);
CODE:
	func   = INT2PTR(double(*)(void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2);
OUTPUT:
	RETVAL

short
nci_sppt( c_func, p0, p1, t2 )
	SV* c_func
	void * p0
	void * p1
	char * t2
PREINIT:
	short(*func)(void *, void *, char *);
CODE:
	func   = INT2PTR(short(*)(void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2);
OUTPUT:
	RETVAL

float
nci_fppt( c_func, p0, p1, t2 )
	SV* c_func
	void * p0
	void * p1
	char * t2
PREINIT:
	float(*func)(void *, void *, char *);
CODE:
	func   = INT2PTR(float(*)(void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2);
OUTPUT:
	RETVAL

char *
nci_tppt( c_func, p0, p1, t2 )
	SV* c_func
	void * p0
	void * p1
	char * t2
PREINIT:
	char *(*func)(void *, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2);
OUTPUT:
	RETVAL

int
nci_ippt( c_func, p0, p1, t2 )
	SV* c_func
	void * p0
	void * p1
	char * t2
PREINIT:
	int(*func)(void *, void *, char *);
CODE:
	func   = INT2PTR(int(*)(void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2);
OUTPUT:
	RETVAL

void *
nci_pvpt( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvpt( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvpt( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svpt( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvpt( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvpt( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivpt( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdpt( c_func, d0, p1, t2 )
	SV* c_func
	double d0
	void * p1
	char * t2
PREINIT:
	void *(*func)(double, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2);
OUTPUT:
	RETVAL

void
nci_vdpt( c_func, d0, p1, t2 )
	SV* c_func
	double d0
	void * p1
	char * t2
PREINIT:
	void(*func)(double, void *, char *);
CODE:
	func   = INT2PTR(void(*)(double, void *, char *), SvIV(c_func) );
	(*func)(d0, p1, t2);

double
nci_ddpt( c_func, d0, p1, t2 )
	SV* c_func
	double d0
	void * p1
	char * t2
PREINIT:
	double(*func)(double, void *, char *);
CODE:
	func   = INT2PTR(double(*)(double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2);
OUTPUT:
	RETVAL

short
nci_sdpt( c_func, d0, p1, t2 )
	SV* c_func
	double d0
	void * p1
	char * t2
PREINIT:
	short(*func)(double, void *, char *);
CODE:
	func   = INT2PTR(short(*)(double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2);
OUTPUT:
	RETVAL

float
nci_fdpt( c_func, d0, p1, t2 )
	SV* c_func
	double d0
	void * p1
	char * t2
PREINIT:
	float(*func)(double, void *, char *);
CODE:
	func   = INT2PTR(float(*)(double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2);
OUTPUT:
	RETVAL

char *
nci_tdpt( c_func, d0, p1, t2 )
	SV* c_func
	double d0
	void * p1
	char * t2
PREINIT:
	char *(*func)(double, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2);
OUTPUT:
	RETVAL

int
nci_idpt( c_func, d0, p1, t2 )
	SV* c_func
	double d0
	void * p1
	char * t2
PREINIT:
	int(*func)(double, void *, char *);
CODE:
	func   = INT2PTR(int(*)(double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2);
OUTPUT:
	RETVAL

void *
nci_pspt( c_func, s0, p1, t2 )
	SV* c_func
	short s0
	void * p1
	char * t2
PREINIT:
	void *(*func)(short, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2);
OUTPUT:
	RETVAL

void
nci_vspt( c_func, s0, p1, t2 )
	SV* c_func
	short s0
	void * p1
	char * t2
PREINIT:
	void(*func)(short, void *, char *);
CODE:
	func   = INT2PTR(void(*)(short, void *, char *), SvIV(c_func) );
	(*func)(s0, p1, t2);

double
nci_dspt( c_func, s0, p1, t2 )
	SV* c_func
	short s0
	void * p1
	char * t2
PREINIT:
	double(*func)(short, void *, char *);
CODE:
	func   = INT2PTR(double(*)(short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2);
OUTPUT:
	RETVAL

short
nci_sspt( c_func, s0, p1, t2 )
	SV* c_func
	short s0
	void * p1
	char * t2
PREINIT:
	short(*func)(short, void *, char *);
CODE:
	func   = INT2PTR(short(*)(short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2);
OUTPUT:
	RETVAL

float
nci_fspt( c_func, s0, p1, t2 )
	SV* c_func
	short s0
	void * p1
	char * t2
PREINIT:
	float(*func)(short, void *, char *);
CODE:
	func   = INT2PTR(float(*)(short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2);
OUTPUT:
	RETVAL

char *
nci_tspt( c_func, s0, p1, t2 )
	SV* c_func
	short s0
	void * p1
	char * t2
PREINIT:
	char *(*func)(short, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2);
OUTPUT:
	RETVAL

int
nci_ispt( c_func, s0, p1, t2 )
	SV* c_func
	short s0
	void * p1
	char * t2
PREINIT:
	int(*func)(short, void *, char *);
CODE:
	func   = INT2PTR(int(*)(short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2);
OUTPUT:
	RETVAL

void *
nci_pfpt( c_func, f0, p1, t2 )
	SV* c_func
	float f0
	void * p1
	char * t2
PREINIT:
	void *(*func)(float, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2);
OUTPUT:
	RETVAL

void
nci_vfpt( c_func, f0, p1, t2 )
	SV* c_func
	float f0
	void * p1
	char * t2
PREINIT:
	void(*func)(float, void *, char *);
CODE:
	func   = INT2PTR(void(*)(float, void *, char *), SvIV(c_func) );
	(*func)(f0, p1, t2);

double
nci_dfpt( c_func, f0, p1, t2 )
	SV* c_func
	float f0
	void * p1
	char * t2
PREINIT:
	double(*func)(float, void *, char *);
CODE:
	func   = INT2PTR(double(*)(float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2);
OUTPUT:
	RETVAL

short
nci_sfpt( c_func, f0, p1, t2 )
	SV* c_func
	float f0
	void * p1
	char * t2
PREINIT:
	short(*func)(float, void *, char *);
CODE:
	func   = INT2PTR(short(*)(float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2);
OUTPUT:
	RETVAL

float
nci_ffpt( c_func, f0, p1, t2 )
	SV* c_func
	float f0
	void * p1
	char * t2
PREINIT:
	float(*func)(float, void *, char *);
CODE:
	func   = INT2PTR(float(*)(float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2);
OUTPUT:
	RETVAL

char *
nci_tfpt( c_func, f0, p1, t2 )
	SV* c_func
	float f0
	void * p1
	char * t2
PREINIT:
	char *(*func)(float, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2);
OUTPUT:
	RETVAL

int
nci_ifpt( c_func, f0, p1, t2 )
	SV* c_func
	float f0
	void * p1
	char * t2
PREINIT:
	int(*func)(float, void *, char *);
CODE:
	func   = INT2PTR(int(*)(float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2);
OUTPUT:
	RETVAL

void *
nci_ptpt( c_func, t0, p1, t2 )
	SV* c_func
	char * t0
	void * p1
	char * t2
PREINIT:
	void *(*func)(char *, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2);
OUTPUT:
	RETVAL

void
nci_vtpt( c_func, t0, p1, t2 )
	SV* c_func
	char * t0
	void * p1
	char * t2
PREINIT:
	void(*func)(char *, void *, char *);
CODE:
	func   = INT2PTR(void(*)(char *, void *, char *), SvIV(c_func) );
	(*func)(t0, p1, t2);

double
nci_dtpt( c_func, t0, p1, t2 )
	SV* c_func
	char * t0
	void * p1
	char * t2
PREINIT:
	double(*func)(char *, void *, char *);
CODE:
	func   = INT2PTR(double(*)(char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2);
OUTPUT:
	RETVAL

short
nci_stpt( c_func, t0, p1, t2 )
	SV* c_func
	char * t0
	void * p1
	char * t2
PREINIT:
	short(*func)(char *, void *, char *);
CODE:
	func   = INT2PTR(short(*)(char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2);
OUTPUT:
	RETVAL

float
nci_ftpt( c_func, t0, p1, t2 )
	SV* c_func
	char * t0
	void * p1
	char * t2
PREINIT:
	float(*func)(char *, void *, char *);
CODE:
	func   = INT2PTR(float(*)(char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2);
OUTPUT:
	RETVAL

char *
nci_ttpt( c_func, t0, p1, t2 )
	SV* c_func
	char * t0
	void * p1
	char * t2
PREINIT:
	char *(*func)(char *, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2);
OUTPUT:
	RETVAL

int
nci_itpt( c_func, t0, p1, t2 )
	SV* c_func
	char * t0
	void * p1
	char * t2
PREINIT:
	int(*func)(char *, void *, char *);
CODE:
	func   = INT2PTR(int(*)(char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2);
OUTPUT:
	RETVAL

void *
nci_pipt( c_func, i0, p1, t2 )
	SV* c_func
	int i0
	void * p1
	char * t2
PREINIT:
	void *(*func)(int, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2);
OUTPUT:
	RETVAL

void
nci_vipt( c_func, i0, p1, t2 )
	SV* c_func
	int i0
	void * p1
	char * t2
PREINIT:
	void(*func)(int, void *, char *);
CODE:
	func   = INT2PTR(void(*)(int, void *, char *), SvIV(c_func) );
	(*func)(i0, p1, t2);

double
nci_dipt( c_func, i0, p1, t2 )
	SV* c_func
	int i0
	void * p1
	char * t2
PREINIT:
	double(*func)(int, void *, char *);
CODE:
	func   = INT2PTR(double(*)(int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2);
OUTPUT:
	RETVAL

short
nci_sipt( c_func, i0, p1, t2 )
	SV* c_func
	int i0
	void * p1
	char * t2
PREINIT:
	short(*func)(int, void *, char *);
CODE:
	func   = INT2PTR(short(*)(int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2);
OUTPUT:
	RETVAL

float
nci_fipt( c_func, i0, p1, t2 )
	SV* c_func
	int i0
	void * p1
	char * t2
PREINIT:
	float(*func)(int, void *, char *);
CODE:
	func   = INT2PTR(float(*)(int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2);
OUTPUT:
	RETVAL

char *
nci_tipt( c_func, i0, p1, t2 )
	SV* c_func
	int i0
	void * p1
	char * t2
PREINIT:
	char *(*func)(int, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2);
OUTPUT:
	RETVAL

int
nci_iipt( c_func, i0, p1, t2 )
	SV* c_func
	int i0
	void * p1
	char * t2
PREINIT:
	int(*func)(int, void *, char *);
CODE:
	func   = INT2PTR(int(*)(int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2);
OUTPUT:
	RETVAL

void *
nci_ppdt( c_func, p0, d1, t2 )
	SV* c_func
	void * p0
	double d1
	char * t2
PREINIT:
	void *(*func)(void *, double, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2);
OUTPUT:
	RETVAL

void
nci_vpdt( c_func, p0, d1, t2 )
	SV* c_func
	void * p0
	double d1
	char * t2
PREINIT:
	void(*func)(void *, double, char *);
CODE:
	func   = INT2PTR(void(*)(void *, double, char *), SvIV(c_func) );
	(*func)(p0, d1, t2);

double
nci_dpdt( c_func, p0, d1, t2 )
	SV* c_func
	void * p0
	double d1
	char * t2
PREINIT:
	double(*func)(void *, double, char *);
CODE:
	func   = INT2PTR(double(*)(void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2);
OUTPUT:
	RETVAL

short
nci_spdt( c_func, p0, d1, t2 )
	SV* c_func
	void * p0
	double d1
	char * t2
PREINIT:
	short(*func)(void *, double, char *);
CODE:
	func   = INT2PTR(short(*)(void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2);
OUTPUT:
	RETVAL

float
nci_fpdt( c_func, p0, d1, t2 )
	SV* c_func
	void * p0
	double d1
	char * t2
PREINIT:
	float(*func)(void *, double, char *);
CODE:
	func   = INT2PTR(float(*)(void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2);
OUTPUT:
	RETVAL

char *
nci_tpdt( c_func, p0, d1, t2 )
	SV* c_func
	void * p0
	double d1
	char * t2
PREINIT:
	char *(*func)(void *, double, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2);
OUTPUT:
	RETVAL

int
nci_ipdt( c_func, p0, d1, t2 )
	SV* c_func
	void * p0
	double d1
	char * t2
PREINIT:
	int(*func)(void *, double, char *);
CODE:
	func   = INT2PTR(int(*)(void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2);
OUTPUT:
	RETVAL

void *
nci_pvdt( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvdt( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvdt( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svdt( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvdt( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvdt( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivdt( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pddt( c_func, d0, d1, t2 )
	SV* c_func
	double d0
	double d1
	char * t2
PREINIT:
	void *(*func)(double, double, char *);
CODE:
	func   = INT2PTR(void *(*)(double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2);
OUTPUT:
	RETVAL

void
nci_vddt( c_func, d0, d1, t2 )
	SV* c_func
	double d0
	double d1
	char * t2
PREINIT:
	void(*func)(double, double, char *);
CODE:
	func   = INT2PTR(void(*)(double, double, char *), SvIV(c_func) );
	(*func)(d0, d1, t2);

double
nci_dddt( c_func, d0, d1, t2 )
	SV* c_func
	double d0
	double d1
	char * t2
PREINIT:
	double(*func)(double, double, char *);
CODE:
	func   = INT2PTR(double(*)(double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2);
OUTPUT:
	RETVAL

short
nci_sddt( c_func, d0, d1, t2 )
	SV* c_func
	double d0
	double d1
	char * t2
PREINIT:
	short(*func)(double, double, char *);
CODE:
	func   = INT2PTR(short(*)(double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2);
OUTPUT:
	RETVAL

float
nci_fddt( c_func, d0, d1, t2 )
	SV* c_func
	double d0
	double d1
	char * t2
PREINIT:
	float(*func)(double, double, char *);
CODE:
	func   = INT2PTR(float(*)(double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2);
OUTPUT:
	RETVAL

char *
nci_tddt( c_func, d0, d1, t2 )
	SV* c_func
	double d0
	double d1
	char * t2
PREINIT:
	char *(*func)(double, double, char *);
CODE:
	func   = INT2PTR(char *(*)(double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2);
OUTPUT:
	RETVAL

int
nci_iddt( c_func, d0, d1, t2 )
	SV* c_func
	double d0
	double d1
	char * t2
PREINIT:
	int(*func)(double, double, char *);
CODE:
	func   = INT2PTR(int(*)(double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2);
OUTPUT:
	RETVAL

void *
nci_psdt( c_func, s0, d1, t2 )
	SV* c_func
	short s0
	double d1
	char * t2
PREINIT:
	void *(*func)(short, double, char *);
CODE:
	func   = INT2PTR(void *(*)(short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2);
OUTPUT:
	RETVAL

void
nci_vsdt( c_func, s0, d1, t2 )
	SV* c_func
	short s0
	double d1
	char * t2
PREINIT:
	void(*func)(short, double, char *);
CODE:
	func   = INT2PTR(void(*)(short, double, char *), SvIV(c_func) );
	(*func)(s0, d1, t2);

double
nci_dsdt( c_func, s0, d1, t2 )
	SV* c_func
	short s0
	double d1
	char * t2
PREINIT:
	double(*func)(short, double, char *);
CODE:
	func   = INT2PTR(double(*)(short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2);
OUTPUT:
	RETVAL

short
nci_ssdt( c_func, s0, d1, t2 )
	SV* c_func
	short s0
	double d1
	char * t2
PREINIT:
	short(*func)(short, double, char *);
CODE:
	func   = INT2PTR(short(*)(short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2);
OUTPUT:
	RETVAL

float
nci_fsdt( c_func, s0, d1, t2 )
	SV* c_func
	short s0
	double d1
	char * t2
PREINIT:
	float(*func)(short, double, char *);
CODE:
	func   = INT2PTR(float(*)(short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2);
OUTPUT:
	RETVAL

char *
nci_tsdt( c_func, s0, d1, t2 )
	SV* c_func
	short s0
	double d1
	char * t2
PREINIT:
	char *(*func)(short, double, char *);
CODE:
	func   = INT2PTR(char *(*)(short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2);
OUTPUT:
	RETVAL

int
nci_isdt( c_func, s0, d1, t2 )
	SV* c_func
	short s0
	double d1
	char * t2
PREINIT:
	int(*func)(short, double, char *);
CODE:
	func   = INT2PTR(int(*)(short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2);
OUTPUT:
	RETVAL

void *
nci_pfdt( c_func, f0, d1, t2 )
	SV* c_func
	float f0
	double d1
	char * t2
PREINIT:
	void *(*func)(float, double, char *);
CODE:
	func   = INT2PTR(void *(*)(float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2);
OUTPUT:
	RETVAL

void
nci_vfdt( c_func, f0, d1, t2 )
	SV* c_func
	float f0
	double d1
	char * t2
PREINIT:
	void(*func)(float, double, char *);
CODE:
	func   = INT2PTR(void(*)(float, double, char *), SvIV(c_func) );
	(*func)(f0, d1, t2);

double
nci_dfdt( c_func, f0, d1, t2 )
	SV* c_func
	float f0
	double d1
	char * t2
PREINIT:
	double(*func)(float, double, char *);
CODE:
	func   = INT2PTR(double(*)(float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2);
OUTPUT:
	RETVAL

short
nci_sfdt( c_func, f0, d1, t2 )
	SV* c_func
	float f0
	double d1
	char * t2
PREINIT:
	short(*func)(float, double, char *);
CODE:
	func   = INT2PTR(short(*)(float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2);
OUTPUT:
	RETVAL

float
nci_ffdt( c_func, f0, d1, t2 )
	SV* c_func
	float f0
	double d1
	char * t2
PREINIT:
	float(*func)(float, double, char *);
CODE:
	func   = INT2PTR(float(*)(float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2);
OUTPUT:
	RETVAL

char *
nci_tfdt( c_func, f0, d1, t2 )
	SV* c_func
	float f0
	double d1
	char * t2
PREINIT:
	char *(*func)(float, double, char *);
CODE:
	func   = INT2PTR(char *(*)(float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2);
OUTPUT:
	RETVAL

int
nci_ifdt( c_func, f0, d1, t2 )
	SV* c_func
	float f0
	double d1
	char * t2
PREINIT:
	int(*func)(float, double, char *);
CODE:
	func   = INT2PTR(int(*)(float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2);
OUTPUT:
	RETVAL

void *
nci_ptdt( c_func, t0, d1, t2 )
	SV* c_func
	char * t0
	double d1
	char * t2
PREINIT:
	void *(*func)(char *, double, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2);
OUTPUT:
	RETVAL

void
nci_vtdt( c_func, t0, d1, t2 )
	SV* c_func
	char * t0
	double d1
	char * t2
PREINIT:
	void(*func)(char *, double, char *);
CODE:
	func   = INT2PTR(void(*)(char *, double, char *), SvIV(c_func) );
	(*func)(t0, d1, t2);

double
nci_dtdt( c_func, t0, d1, t2 )
	SV* c_func
	char * t0
	double d1
	char * t2
PREINIT:
	double(*func)(char *, double, char *);
CODE:
	func   = INT2PTR(double(*)(char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2);
OUTPUT:
	RETVAL

short
nci_stdt( c_func, t0, d1, t2 )
	SV* c_func
	char * t0
	double d1
	char * t2
PREINIT:
	short(*func)(char *, double, char *);
CODE:
	func   = INT2PTR(short(*)(char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2);
OUTPUT:
	RETVAL

float
nci_ftdt( c_func, t0, d1, t2 )
	SV* c_func
	char * t0
	double d1
	char * t2
PREINIT:
	float(*func)(char *, double, char *);
CODE:
	func   = INT2PTR(float(*)(char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2);
OUTPUT:
	RETVAL

char *
nci_ttdt( c_func, t0, d1, t2 )
	SV* c_func
	char * t0
	double d1
	char * t2
PREINIT:
	char *(*func)(char *, double, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2);
OUTPUT:
	RETVAL

int
nci_itdt( c_func, t0, d1, t2 )
	SV* c_func
	char * t0
	double d1
	char * t2
PREINIT:
	int(*func)(char *, double, char *);
CODE:
	func   = INT2PTR(int(*)(char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2);
OUTPUT:
	RETVAL

void *
nci_pidt( c_func, i0, d1, t2 )
	SV* c_func
	int i0
	double d1
	char * t2
PREINIT:
	void *(*func)(int, double, char *);
CODE:
	func   = INT2PTR(void *(*)(int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2);
OUTPUT:
	RETVAL

void
nci_vidt( c_func, i0, d1, t2 )
	SV* c_func
	int i0
	double d1
	char * t2
PREINIT:
	void(*func)(int, double, char *);
CODE:
	func   = INT2PTR(void(*)(int, double, char *), SvIV(c_func) );
	(*func)(i0, d1, t2);

double
nci_didt( c_func, i0, d1, t2 )
	SV* c_func
	int i0
	double d1
	char * t2
PREINIT:
	double(*func)(int, double, char *);
CODE:
	func   = INT2PTR(double(*)(int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2);
OUTPUT:
	RETVAL

short
nci_sidt( c_func, i0, d1, t2 )
	SV* c_func
	int i0
	double d1
	char * t2
PREINIT:
	short(*func)(int, double, char *);
CODE:
	func   = INT2PTR(short(*)(int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2);
OUTPUT:
	RETVAL

float
nci_fidt( c_func, i0, d1, t2 )
	SV* c_func
	int i0
	double d1
	char * t2
PREINIT:
	float(*func)(int, double, char *);
CODE:
	func   = INT2PTR(float(*)(int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2);
OUTPUT:
	RETVAL

char *
nci_tidt( c_func, i0, d1, t2 )
	SV* c_func
	int i0
	double d1
	char * t2
PREINIT:
	char *(*func)(int, double, char *);
CODE:
	func   = INT2PTR(char *(*)(int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2);
OUTPUT:
	RETVAL

int
nci_iidt( c_func, i0, d1, t2 )
	SV* c_func
	int i0
	double d1
	char * t2
PREINIT:
	int(*func)(int, double, char *);
CODE:
	func   = INT2PTR(int(*)(int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2);
OUTPUT:
	RETVAL

void *
nci_ppst( c_func, p0, s1, t2 )
	SV* c_func
	void * p0
	short s1
	char * t2
PREINIT:
	void *(*func)(void *, short, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2);
OUTPUT:
	RETVAL

void
nci_vpst( c_func, p0, s1, t2 )
	SV* c_func
	void * p0
	short s1
	char * t2
PREINIT:
	void(*func)(void *, short, char *);
CODE:
	func   = INT2PTR(void(*)(void *, short, char *), SvIV(c_func) );
	(*func)(p0, s1, t2);

double
nci_dpst( c_func, p0, s1, t2 )
	SV* c_func
	void * p0
	short s1
	char * t2
PREINIT:
	double(*func)(void *, short, char *);
CODE:
	func   = INT2PTR(double(*)(void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2);
OUTPUT:
	RETVAL

short
nci_spst( c_func, p0, s1, t2 )
	SV* c_func
	void * p0
	short s1
	char * t2
PREINIT:
	short(*func)(void *, short, char *);
CODE:
	func   = INT2PTR(short(*)(void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2);
OUTPUT:
	RETVAL

float
nci_fpst( c_func, p0, s1, t2 )
	SV* c_func
	void * p0
	short s1
	char * t2
PREINIT:
	float(*func)(void *, short, char *);
CODE:
	func   = INT2PTR(float(*)(void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2);
OUTPUT:
	RETVAL

char *
nci_tpst( c_func, p0, s1, t2 )
	SV* c_func
	void * p0
	short s1
	char * t2
PREINIT:
	char *(*func)(void *, short, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2);
OUTPUT:
	RETVAL

int
nci_ipst( c_func, p0, s1, t2 )
	SV* c_func
	void * p0
	short s1
	char * t2
PREINIT:
	int(*func)(void *, short, char *);
CODE:
	func   = INT2PTR(int(*)(void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2);
OUTPUT:
	RETVAL

void *
nci_pvst( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvst( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvst( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svst( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvst( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvst( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivst( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdst( c_func, d0, s1, t2 )
	SV* c_func
	double d0
	short s1
	char * t2
PREINIT:
	void *(*func)(double, short, char *);
CODE:
	func   = INT2PTR(void *(*)(double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2);
OUTPUT:
	RETVAL

void
nci_vdst( c_func, d0, s1, t2 )
	SV* c_func
	double d0
	short s1
	char * t2
PREINIT:
	void(*func)(double, short, char *);
CODE:
	func   = INT2PTR(void(*)(double, short, char *), SvIV(c_func) );
	(*func)(d0, s1, t2);

double
nci_ddst( c_func, d0, s1, t2 )
	SV* c_func
	double d0
	short s1
	char * t2
PREINIT:
	double(*func)(double, short, char *);
CODE:
	func   = INT2PTR(double(*)(double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2);
OUTPUT:
	RETVAL

short
nci_sdst( c_func, d0, s1, t2 )
	SV* c_func
	double d0
	short s1
	char * t2
PREINIT:
	short(*func)(double, short, char *);
CODE:
	func   = INT2PTR(short(*)(double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2);
OUTPUT:
	RETVAL

float
nci_fdst( c_func, d0, s1, t2 )
	SV* c_func
	double d0
	short s1
	char * t2
PREINIT:
	float(*func)(double, short, char *);
CODE:
	func   = INT2PTR(float(*)(double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2);
OUTPUT:
	RETVAL

char *
nci_tdst( c_func, d0, s1, t2 )
	SV* c_func
	double d0
	short s1
	char * t2
PREINIT:
	char *(*func)(double, short, char *);
CODE:
	func   = INT2PTR(char *(*)(double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2);
OUTPUT:
	RETVAL

int
nci_idst( c_func, d0, s1, t2 )
	SV* c_func
	double d0
	short s1
	char * t2
PREINIT:
	int(*func)(double, short, char *);
CODE:
	func   = INT2PTR(int(*)(double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2);
OUTPUT:
	RETVAL

void *
nci_psst( c_func, s0, s1, t2 )
	SV* c_func
	short s0
	short s1
	char * t2
PREINIT:
	void *(*func)(short, short, char *);
CODE:
	func   = INT2PTR(void *(*)(short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2);
OUTPUT:
	RETVAL

void
nci_vsst( c_func, s0, s1, t2 )
	SV* c_func
	short s0
	short s1
	char * t2
PREINIT:
	void(*func)(short, short, char *);
CODE:
	func   = INT2PTR(void(*)(short, short, char *), SvIV(c_func) );
	(*func)(s0, s1, t2);

double
nci_dsst( c_func, s0, s1, t2 )
	SV* c_func
	short s0
	short s1
	char * t2
PREINIT:
	double(*func)(short, short, char *);
CODE:
	func   = INT2PTR(double(*)(short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2);
OUTPUT:
	RETVAL

short
nci_ssst( c_func, s0, s1, t2 )
	SV* c_func
	short s0
	short s1
	char * t2
PREINIT:
	short(*func)(short, short, char *);
CODE:
	func   = INT2PTR(short(*)(short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2);
OUTPUT:
	RETVAL

float
nci_fsst( c_func, s0, s1, t2 )
	SV* c_func
	short s0
	short s1
	char * t2
PREINIT:
	float(*func)(short, short, char *);
CODE:
	func   = INT2PTR(float(*)(short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2);
OUTPUT:
	RETVAL

char *
nci_tsst( c_func, s0, s1, t2 )
	SV* c_func
	short s0
	short s1
	char * t2
PREINIT:
	char *(*func)(short, short, char *);
CODE:
	func   = INT2PTR(char *(*)(short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2);
OUTPUT:
	RETVAL

int
nci_isst( c_func, s0, s1, t2 )
	SV* c_func
	short s0
	short s1
	char * t2
PREINIT:
	int(*func)(short, short, char *);
CODE:
	func   = INT2PTR(int(*)(short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2);
OUTPUT:
	RETVAL

void *
nci_pfst( c_func, f0, s1, t2 )
	SV* c_func
	float f0
	short s1
	char * t2
PREINIT:
	void *(*func)(float, short, char *);
CODE:
	func   = INT2PTR(void *(*)(float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2);
OUTPUT:
	RETVAL

void
nci_vfst( c_func, f0, s1, t2 )
	SV* c_func
	float f0
	short s1
	char * t2
PREINIT:
	void(*func)(float, short, char *);
CODE:
	func   = INT2PTR(void(*)(float, short, char *), SvIV(c_func) );
	(*func)(f0, s1, t2);

double
nci_dfst( c_func, f0, s1, t2 )
	SV* c_func
	float f0
	short s1
	char * t2
PREINIT:
	double(*func)(float, short, char *);
CODE:
	func   = INT2PTR(double(*)(float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2);
OUTPUT:
	RETVAL

short
nci_sfst( c_func, f0, s1, t2 )
	SV* c_func
	float f0
	short s1
	char * t2
PREINIT:
	short(*func)(float, short, char *);
CODE:
	func   = INT2PTR(short(*)(float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2);
OUTPUT:
	RETVAL

float
nci_ffst( c_func, f0, s1, t2 )
	SV* c_func
	float f0
	short s1
	char * t2
PREINIT:
	float(*func)(float, short, char *);
CODE:
	func   = INT2PTR(float(*)(float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2);
OUTPUT:
	RETVAL

char *
nci_tfst( c_func, f0, s1, t2 )
	SV* c_func
	float f0
	short s1
	char * t2
PREINIT:
	char *(*func)(float, short, char *);
CODE:
	func   = INT2PTR(char *(*)(float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2);
OUTPUT:
	RETVAL

int
nci_ifst( c_func, f0, s1, t2 )
	SV* c_func
	float f0
	short s1
	char * t2
PREINIT:
	int(*func)(float, short, char *);
CODE:
	func   = INT2PTR(int(*)(float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2);
OUTPUT:
	RETVAL

void *
nci_ptst( c_func, t0, s1, t2 )
	SV* c_func
	char * t0
	short s1
	char * t2
PREINIT:
	void *(*func)(char *, short, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2);
OUTPUT:
	RETVAL

void
nci_vtst( c_func, t0, s1, t2 )
	SV* c_func
	char * t0
	short s1
	char * t2
PREINIT:
	void(*func)(char *, short, char *);
CODE:
	func   = INT2PTR(void(*)(char *, short, char *), SvIV(c_func) );
	(*func)(t0, s1, t2);

double
nci_dtst( c_func, t0, s1, t2 )
	SV* c_func
	char * t0
	short s1
	char * t2
PREINIT:
	double(*func)(char *, short, char *);
CODE:
	func   = INT2PTR(double(*)(char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2);
OUTPUT:
	RETVAL

short
nci_stst( c_func, t0, s1, t2 )
	SV* c_func
	char * t0
	short s1
	char * t2
PREINIT:
	short(*func)(char *, short, char *);
CODE:
	func   = INT2PTR(short(*)(char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2);
OUTPUT:
	RETVAL

float
nci_ftst( c_func, t0, s1, t2 )
	SV* c_func
	char * t0
	short s1
	char * t2
PREINIT:
	float(*func)(char *, short, char *);
CODE:
	func   = INT2PTR(float(*)(char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2);
OUTPUT:
	RETVAL

char *
nci_ttst( c_func, t0, s1, t2 )
	SV* c_func
	char * t0
	short s1
	char * t2
PREINIT:
	char *(*func)(char *, short, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2);
OUTPUT:
	RETVAL

int
nci_itst( c_func, t0, s1, t2 )
	SV* c_func
	char * t0
	short s1
	char * t2
PREINIT:
	int(*func)(char *, short, char *);
CODE:
	func   = INT2PTR(int(*)(char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2);
OUTPUT:
	RETVAL

void *
nci_pist( c_func, i0, s1, t2 )
	SV* c_func
	int i0
	short s1
	char * t2
PREINIT:
	void *(*func)(int, short, char *);
CODE:
	func   = INT2PTR(void *(*)(int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2);
OUTPUT:
	RETVAL

void
nci_vist( c_func, i0, s1, t2 )
	SV* c_func
	int i0
	short s1
	char * t2
PREINIT:
	void(*func)(int, short, char *);
CODE:
	func   = INT2PTR(void(*)(int, short, char *), SvIV(c_func) );
	(*func)(i0, s1, t2);

double
nci_dist( c_func, i0, s1, t2 )
	SV* c_func
	int i0
	short s1
	char * t2
PREINIT:
	double(*func)(int, short, char *);
CODE:
	func   = INT2PTR(double(*)(int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2);
OUTPUT:
	RETVAL

short
nci_sist( c_func, i0, s1, t2 )
	SV* c_func
	int i0
	short s1
	char * t2
PREINIT:
	short(*func)(int, short, char *);
CODE:
	func   = INT2PTR(short(*)(int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2);
OUTPUT:
	RETVAL

float
nci_fist( c_func, i0, s1, t2 )
	SV* c_func
	int i0
	short s1
	char * t2
PREINIT:
	float(*func)(int, short, char *);
CODE:
	func   = INT2PTR(float(*)(int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2);
OUTPUT:
	RETVAL

char *
nci_tist( c_func, i0, s1, t2 )
	SV* c_func
	int i0
	short s1
	char * t2
PREINIT:
	char *(*func)(int, short, char *);
CODE:
	func   = INT2PTR(char *(*)(int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2);
OUTPUT:
	RETVAL

int
nci_iist( c_func, i0, s1, t2 )
	SV* c_func
	int i0
	short s1
	char * t2
PREINIT:
	int(*func)(int, short, char *);
CODE:
	func   = INT2PTR(int(*)(int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2);
OUTPUT:
	RETVAL

void *
nci_ppft( c_func, p0, f1, t2 )
	SV* c_func
	void * p0
	float f1
	char * t2
PREINIT:
	void *(*func)(void *, float, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2);
OUTPUT:
	RETVAL

void
nci_vpft( c_func, p0, f1, t2 )
	SV* c_func
	void * p0
	float f1
	char * t2
PREINIT:
	void(*func)(void *, float, char *);
CODE:
	func   = INT2PTR(void(*)(void *, float, char *), SvIV(c_func) );
	(*func)(p0, f1, t2);

double
nci_dpft( c_func, p0, f1, t2 )
	SV* c_func
	void * p0
	float f1
	char * t2
PREINIT:
	double(*func)(void *, float, char *);
CODE:
	func   = INT2PTR(double(*)(void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2);
OUTPUT:
	RETVAL

short
nci_spft( c_func, p0, f1, t2 )
	SV* c_func
	void * p0
	float f1
	char * t2
PREINIT:
	short(*func)(void *, float, char *);
CODE:
	func   = INT2PTR(short(*)(void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2);
OUTPUT:
	RETVAL

float
nci_fpft( c_func, p0, f1, t2 )
	SV* c_func
	void * p0
	float f1
	char * t2
PREINIT:
	float(*func)(void *, float, char *);
CODE:
	func   = INT2PTR(float(*)(void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2);
OUTPUT:
	RETVAL

char *
nci_tpft( c_func, p0, f1, t2 )
	SV* c_func
	void * p0
	float f1
	char * t2
PREINIT:
	char *(*func)(void *, float, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2);
OUTPUT:
	RETVAL

int
nci_ipft( c_func, p0, f1, t2 )
	SV* c_func
	void * p0
	float f1
	char * t2
PREINIT:
	int(*func)(void *, float, char *);
CODE:
	func   = INT2PTR(int(*)(void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2);
OUTPUT:
	RETVAL

void *
nci_pvft( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvft( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvft( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svft( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvft( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvft( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivft( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdft( c_func, d0, f1, t2 )
	SV* c_func
	double d0
	float f1
	char * t2
PREINIT:
	void *(*func)(double, float, char *);
CODE:
	func   = INT2PTR(void *(*)(double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2);
OUTPUT:
	RETVAL

void
nci_vdft( c_func, d0, f1, t2 )
	SV* c_func
	double d0
	float f1
	char * t2
PREINIT:
	void(*func)(double, float, char *);
CODE:
	func   = INT2PTR(void(*)(double, float, char *), SvIV(c_func) );
	(*func)(d0, f1, t2);

double
nci_ddft( c_func, d0, f1, t2 )
	SV* c_func
	double d0
	float f1
	char * t2
PREINIT:
	double(*func)(double, float, char *);
CODE:
	func   = INT2PTR(double(*)(double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2);
OUTPUT:
	RETVAL

short
nci_sdft( c_func, d0, f1, t2 )
	SV* c_func
	double d0
	float f1
	char * t2
PREINIT:
	short(*func)(double, float, char *);
CODE:
	func   = INT2PTR(short(*)(double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2);
OUTPUT:
	RETVAL

float
nci_fdft( c_func, d0, f1, t2 )
	SV* c_func
	double d0
	float f1
	char * t2
PREINIT:
	float(*func)(double, float, char *);
CODE:
	func   = INT2PTR(float(*)(double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2);
OUTPUT:
	RETVAL

char *
nci_tdft( c_func, d0, f1, t2 )
	SV* c_func
	double d0
	float f1
	char * t2
PREINIT:
	char *(*func)(double, float, char *);
CODE:
	func   = INT2PTR(char *(*)(double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2);
OUTPUT:
	RETVAL

int
nci_idft( c_func, d0, f1, t2 )
	SV* c_func
	double d0
	float f1
	char * t2
PREINIT:
	int(*func)(double, float, char *);
CODE:
	func   = INT2PTR(int(*)(double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2);
OUTPUT:
	RETVAL

void *
nci_psft( c_func, s0, f1, t2 )
	SV* c_func
	short s0
	float f1
	char * t2
PREINIT:
	void *(*func)(short, float, char *);
CODE:
	func   = INT2PTR(void *(*)(short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2);
OUTPUT:
	RETVAL

void
nci_vsft( c_func, s0, f1, t2 )
	SV* c_func
	short s0
	float f1
	char * t2
PREINIT:
	void(*func)(short, float, char *);
CODE:
	func   = INT2PTR(void(*)(short, float, char *), SvIV(c_func) );
	(*func)(s0, f1, t2);

double
nci_dsft( c_func, s0, f1, t2 )
	SV* c_func
	short s0
	float f1
	char * t2
PREINIT:
	double(*func)(short, float, char *);
CODE:
	func   = INT2PTR(double(*)(short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2);
OUTPUT:
	RETVAL

short
nci_ssft( c_func, s0, f1, t2 )
	SV* c_func
	short s0
	float f1
	char * t2
PREINIT:
	short(*func)(short, float, char *);
CODE:
	func   = INT2PTR(short(*)(short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2);
OUTPUT:
	RETVAL

float
nci_fsft( c_func, s0, f1, t2 )
	SV* c_func
	short s0
	float f1
	char * t2
PREINIT:
	float(*func)(short, float, char *);
CODE:
	func   = INT2PTR(float(*)(short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2);
OUTPUT:
	RETVAL

char *
nci_tsft( c_func, s0, f1, t2 )
	SV* c_func
	short s0
	float f1
	char * t2
PREINIT:
	char *(*func)(short, float, char *);
CODE:
	func   = INT2PTR(char *(*)(short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2);
OUTPUT:
	RETVAL

int
nci_isft( c_func, s0, f1, t2 )
	SV* c_func
	short s0
	float f1
	char * t2
PREINIT:
	int(*func)(short, float, char *);
CODE:
	func   = INT2PTR(int(*)(short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2);
OUTPUT:
	RETVAL

void *
nci_pfft( c_func, f0, f1, t2 )
	SV* c_func
	float f0
	float f1
	char * t2
PREINIT:
	void *(*func)(float, float, char *);
CODE:
	func   = INT2PTR(void *(*)(float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2);
OUTPUT:
	RETVAL

void
nci_vfft( c_func, f0, f1, t2 )
	SV* c_func
	float f0
	float f1
	char * t2
PREINIT:
	void(*func)(float, float, char *);
CODE:
	func   = INT2PTR(void(*)(float, float, char *), SvIV(c_func) );
	(*func)(f0, f1, t2);

double
nci_dfft( c_func, f0, f1, t2 )
	SV* c_func
	float f0
	float f1
	char * t2
PREINIT:
	double(*func)(float, float, char *);
CODE:
	func   = INT2PTR(double(*)(float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2);
OUTPUT:
	RETVAL

short
nci_sfft( c_func, f0, f1, t2 )
	SV* c_func
	float f0
	float f1
	char * t2
PREINIT:
	short(*func)(float, float, char *);
CODE:
	func   = INT2PTR(short(*)(float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2);
OUTPUT:
	RETVAL

float
nci_ffft( c_func, f0, f1, t2 )
	SV* c_func
	float f0
	float f1
	char * t2
PREINIT:
	float(*func)(float, float, char *);
CODE:
	func   = INT2PTR(float(*)(float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2);
OUTPUT:
	RETVAL

char *
nci_tfft( c_func, f0, f1, t2 )
	SV* c_func
	float f0
	float f1
	char * t2
PREINIT:
	char *(*func)(float, float, char *);
CODE:
	func   = INT2PTR(char *(*)(float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2);
OUTPUT:
	RETVAL

int
nci_ifft( c_func, f0, f1, t2 )
	SV* c_func
	float f0
	float f1
	char * t2
PREINIT:
	int(*func)(float, float, char *);
CODE:
	func   = INT2PTR(int(*)(float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2);
OUTPUT:
	RETVAL

void *
nci_ptft( c_func, t0, f1, t2 )
	SV* c_func
	char * t0
	float f1
	char * t2
PREINIT:
	void *(*func)(char *, float, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2);
OUTPUT:
	RETVAL

void
nci_vtft( c_func, t0, f1, t2 )
	SV* c_func
	char * t0
	float f1
	char * t2
PREINIT:
	void(*func)(char *, float, char *);
CODE:
	func   = INT2PTR(void(*)(char *, float, char *), SvIV(c_func) );
	(*func)(t0, f1, t2);

double
nci_dtft( c_func, t0, f1, t2 )
	SV* c_func
	char * t0
	float f1
	char * t2
PREINIT:
	double(*func)(char *, float, char *);
CODE:
	func   = INT2PTR(double(*)(char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2);
OUTPUT:
	RETVAL

short
nci_stft( c_func, t0, f1, t2 )
	SV* c_func
	char * t0
	float f1
	char * t2
PREINIT:
	short(*func)(char *, float, char *);
CODE:
	func   = INT2PTR(short(*)(char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2);
OUTPUT:
	RETVAL

float
nci_ftft( c_func, t0, f1, t2 )
	SV* c_func
	char * t0
	float f1
	char * t2
PREINIT:
	float(*func)(char *, float, char *);
CODE:
	func   = INT2PTR(float(*)(char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2);
OUTPUT:
	RETVAL

char *
nci_ttft( c_func, t0, f1, t2 )
	SV* c_func
	char * t0
	float f1
	char * t2
PREINIT:
	char *(*func)(char *, float, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2);
OUTPUT:
	RETVAL

int
nci_itft( c_func, t0, f1, t2 )
	SV* c_func
	char * t0
	float f1
	char * t2
PREINIT:
	int(*func)(char *, float, char *);
CODE:
	func   = INT2PTR(int(*)(char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2);
OUTPUT:
	RETVAL

void *
nci_pift( c_func, i0, f1, t2 )
	SV* c_func
	int i0
	float f1
	char * t2
PREINIT:
	void *(*func)(int, float, char *);
CODE:
	func   = INT2PTR(void *(*)(int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2);
OUTPUT:
	RETVAL

void
nci_vift( c_func, i0, f1, t2 )
	SV* c_func
	int i0
	float f1
	char * t2
PREINIT:
	void(*func)(int, float, char *);
CODE:
	func   = INT2PTR(void(*)(int, float, char *), SvIV(c_func) );
	(*func)(i0, f1, t2);

double
nci_dift( c_func, i0, f1, t2 )
	SV* c_func
	int i0
	float f1
	char * t2
PREINIT:
	double(*func)(int, float, char *);
CODE:
	func   = INT2PTR(double(*)(int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2);
OUTPUT:
	RETVAL

short
nci_sift( c_func, i0, f1, t2 )
	SV* c_func
	int i0
	float f1
	char * t2
PREINIT:
	short(*func)(int, float, char *);
CODE:
	func   = INT2PTR(short(*)(int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2);
OUTPUT:
	RETVAL

float
nci_fift( c_func, i0, f1, t2 )
	SV* c_func
	int i0
	float f1
	char * t2
PREINIT:
	float(*func)(int, float, char *);
CODE:
	func   = INT2PTR(float(*)(int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2);
OUTPUT:
	RETVAL

char *
nci_tift( c_func, i0, f1, t2 )
	SV* c_func
	int i0
	float f1
	char * t2
PREINIT:
	char *(*func)(int, float, char *);
CODE:
	func   = INT2PTR(char *(*)(int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2);
OUTPUT:
	RETVAL

int
nci_iift( c_func, i0, f1, t2 )
	SV* c_func
	int i0
	float f1
	char * t2
PREINIT:
	int(*func)(int, float, char *);
CODE:
	func   = INT2PTR(int(*)(int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2);
OUTPUT:
	RETVAL

void *
nci_pptt( c_func, p0, t1, t2 )
	SV* c_func
	void * p0
	char * t1
	char * t2
PREINIT:
	void *(*func)(void *, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2);
OUTPUT:
	RETVAL

void
nci_vptt( c_func, p0, t1, t2 )
	SV* c_func
	void * p0
	char * t1
	char * t2
PREINIT:
	void(*func)(void *, char *, char *);
CODE:
	func   = INT2PTR(void(*)(void *, char *, char *), SvIV(c_func) );
	(*func)(p0, t1, t2);

double
nci_dptt( c_func, p0, t1, t2 )
	SV* c_func
	void * p0
	char * t1
	char * t2
PREINIT:
	double(*func)(void *, char *, char *);
CODE:
	func   = INT2PTR(double(*)(void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2);
OUTPUT:
	RETVAL

short
nci_sptt( c_func, p0, t1, t2 )
	SV* c_func
	void * p0
	char * t1
	char * t2
PREINIT:
	short(*func)(void *, char *, char *);
CODE:
	func   = INT2PTR(short(*)(void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2);
OUTPUT:
	RETVAL

float
nci_fptt( c_func, p0, t1, t2 )
	SV* c_func
	void * p0
	char * t1
	char * t2
PREINIT:
	float(*func)(void *, char *, char *);
CODE:
	func   = INT2PTR(float(*)(void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2);
OUTPUT:
	RETVAL

char *
nci_tptt( c_func, p0, t1, t2 )
	SV* c_func
	void * p0
	char * t1
	char * t2
PREINIT:
	char *(*func)(void *, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2);
OUTPUT:
	RETVAL

int
nci_iptt( c_func, p0, t1, t2 )
	SV* c_func
	void * p0
	char * t1
	char * t2
PREINIT:
	int(*func)(void *, char *, char *);
CODE:
	func   = INT2PTR(int(*)(void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2);
OUTPUT:
	RETVAL

void *
nci_pvtt( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvtt( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvtt( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svtt( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvtt( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvtt( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivtt( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdtt( c_func, d0, t1, t2 )
	SV* c_func
	double d0
	char * t1
	char * t2
PREINIT:
	void *(*func)(double, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2);
OUTPUT:
	RETVAL

void
nci_vdtt( c_func, d0, t1, t2 )
	SV* c_func
	double d0
	char * t1
	char * t2
PREINIT:
	void(*func)(double, char *, char *);
CODE:
	func   = INT2PTR(void(*)(double, char *, char *), SvIV(c_func) );
	(*func)(d0, t1, t2);

double
nci_ddtt( c_func, d0, t1, t2 )
	SV* c_func
	double d0
	char * t1
	char * t2
PREINIT:
	double(*func)(double, char *, char *);
CODE:
	func   = INT2PTR(double(*)(double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2);
OUTPUT:
	RETVAL

short
nci_sdtt( c_func, d0, t1, t2 )
	SV* c_func
	double d0
	char * t1
	char * t2
PREINIT:
	short(*func)(double, char *, char *);
CODE:
	func   = INT2PTR(short(*)(double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2);
OUTPUT:
	RETVAL

float
nci_fdtt( c_func, d0, t1, t2 )
	SV* c_func
	double d0
	char * t1
	char * t2
PREINIT:
	float(*func)(double, char *, char *);
CODE:
	func   = INT2PTR(float(*)(double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2);
OUTPUT:
	RETVAL

char *
nci_tdtt( c_func, d0, t1, t2 )
	SV* c_func
	double d0
	char * t1
	char * t2
PREINIT:
	char *(*func)(double, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2);
OUTPUT:
	RETVAL

int
nci_idtt( c_func, d0, t1, t2 )
	SV* c_func
	double d0
	char * t1
	char * t2
PREINIT:
	int(*func)(double, char *, char *);
CODE:
	func   = INT2PTR(int(*)(double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2);
OUTPUT:
	RETVAL

void *
nci_pstt( c_func, s0, t1, t2 )
	SV* c_func
	short s0
	char * t1
	char * t2
PREINIT:
	void *(*func)(short, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2);
OUTPUT:
	RETVAL

void
nci_vstt( c_func, s0, t1, t2 )
	SV* c_func
	short s0
	char * t1
	char * t2
PREINIT:
	void(*func)(short, char *, char *);
CODE:
	func   = INT2PTR(void(*)(short, char *, char *), SvIV(c_func) );
	(*func)(s0, t1, t2);

double
nci_dstt( c_func, s0, t1, t2 )
	SV* c_func
	short s0
	char * t1
	char * t2
PREINIT:
	double(*func)(short, char *, char *);
CODE:
	func   = INT2PTR(double(*)(short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2);
OUTPUT:
	RETVAL

short
nci_sstt( c_func, s0, t1, t2 )
	SV* c_func
	short s0
	char * t1
	char * t2
PREINIT:
	short(*func)(short, char *, char *);
CODE:
	func   = INT2PTR(short(*)(short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2);
OUTPUT:
	RETVAL

float
nci_fstt( c_func, s0, t1, t2 )
	SV* c_func
	short s0
	char * t1
	char * t2
PREINIT:
	float(*func)(short, char *, char *);
CODE:
	func   = INT2PTR(float(*)(short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2);
OUTPUT:
	RETVAL

char *
nci_tstt( c_func, s0, t1, t2 )
	SV* c_func
	short s0
	char * t1
	char * t2
PREINIT:
	char *(*func)(short, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2);
OUTPUT:
	RETVAL

int
nci_istt( c_func, s0, t1, t2 )
	SV* c_func
	short s0
	char * t1
	char * t2
PREINIT:
	int(*func)(short, char *, char *);
CODE:
	func   = INT2PTR(int(*)(short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2);
OUTPUT:
	RETVAL

void *
nci_pftt( c_func, f0, t1, t2 )
	SV* c_func
	float f0
	char * t1
	char * t2
PREINIT:
	void *(*func)(float, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2);
OUTPUT:
	RETVAL

void
nci_vftt( c_func, f0, t1, t2 )
	SV* c_func
	float f0
	char * t1
	char * t2
PREINIT:
	void(*func)(float, char *, char *);
CODE:
	func   = INT2PTR(void(*)(float, char *, char *), SvIV(c_func) );
	(*func)(f0, t1, t2);

double
nci_dftt( c_func, f0, t1, t2 )
	SV* c_func
	float f0
	char * t1
	char * t2
PREINIT:
	double(*func)(float, char *, char *);
CODE:
	func   = INT2PTR(double(*)(float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2);
OUTPUT:
	RETVAL

short
nci_sftt( c_func, f0, t1, t2 )
	SV* c_func
	float f0
	char * t1
	char * t2
PREINIT:
	short(*func)(float, char *, char *);
CODE:
	func   = INT2PTR(short(*)(float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2);
OUTPUT:
	RETVAL

float
nci_fftt( c_func, f0, t1, t2 )
	SV* c_func
	float f0
	char * t1
	char * t2
PREINIT:
	float(*func)(float, char *, char *);
CODE:
	func   = INT2PTR(float(*)(float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2);
OUTPUT:
	RETVAL

char *
nci_tftt( c_func, f0, t1, t2 )
	SV* c_func
	float f0
	char * t1
	char * t2
PREINIT:
	char *(*func)(float, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2);
OUTPUT:
	RETVAL

int
nci_iftt( c_func, f0, t1, t2 )
	SV* c_func
	float f0
	char * t1
	char * t2
PREINIT:
	int(*func)(float, char *, char *);
CODE:
	func   = INT2PTR(int(*)(float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2);
OUTPUT:
	RETVAL

void *
nci_pttt( c_func, t0, t1, t2 )
	SV* c_func
	char * t0
	char * t1
	char * t2
PREINIT:
	void *(*func)(char *, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2);
OUTPUT:
	RETVAL

void
nci_vttt( c_func, t0, t1, t2 )
	SV* c_func
	char * t0
	char * t1
	char * t2
PREINIT:
	void(*func)(char *, char *, char *);
CODE:
	func   = INT2PTR(void(*)(char *, char *, char *), SvIV(c_func) );
	(*func)(t0, t1, t2);

double
nci_dttt( c_func, t0, t1, t2 )
	SV* c_func
	char * t0
	char * t1
	char * t2
PREINIT:
	double(*func)(char *, char *, char *);
CODE:
	func   = INT2PTR(double(*)(char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2);
OUTPUT:
	RETVAL

short
nci_sttt( c_func, t0, t1, t2 )
	SV* c_func
	char * t0
	char * t1
	char * t2
PREINIT:
	short(*func)(char *, char *, char *);
CODE:
	func   = INT2PTR(short(*)(char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2);
OUTPUT:
	RETVAL

float
nci_fttt( c_func, t0, t1, t2 )
	SV* c_func
	char * t0
	char * t1
	char * t2
PREINIT:
	float(*func)(char *, char *, char *);
CODE:
	func   = INT2PTR(float(*)(char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2);
OUTPUT:
	RETVAL

char *
nci_tttt( c_func, t0, t1, t2 )
	SV* c_func
	char * t0
	char * t1
	char * t2
PREINIT:
	char *(*func)(char *, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2);
OUTPUT:
	RETVAL

int
nci_ittt( c_func, t0, t1, t2 )
	SV* c_func
	char * t0
	char * t1
	char * t2
PREINIT:
	int(*func)(char *, char *, char *);
CODE:
	func   = INT2PTR(int(*)(char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2);
OUTPUT:
	RETVAL

void *
nci_pitt( c_func, i0, t1, t2 )
	SV* c_func
	int i0
	char * t1
	char * t2
PREINIT:
	void *(*func)(int, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2);
OUTPUT:
	RETVAL

void
nci_vitt( c_func, i0, t1, t2 )
	SV* c_func
	int i0
	char * t1
	char * t2
PREINIT:
	void(*func)(int, char *, char *);
CODE:
	func   = INT2PTR(void(*)(int, char *, char *), SvIV(c_func) );
	(*func)(i0, t1, t2);

double
nci_ditt( c_func, i0, t1, t2 )
	SV* c_func
	int i0
	char * t1
	char * t2
PREINIT:
	double(*func)(int, char *, char *);
CODE:
	func   = INT2PTR(double(*)(int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2);
OUTPUT:
	RETVAL

short
nci_sitt( c_func, i0, t1, t2 )
	SV* c_func
	int i0
	char * t1
	char * t2
PREINIT:
	short(*func)(int, char *, char *);
CODE:
	func   = INT2PTR(short(*)(int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2);
OUTPUT:
	RETVAL

float
nci_fitt( c_func, i0, t1, t2 )
	SV* c_func
	int i0
	char * t1
	char * t2
PREINIT:
	float(*func)(int, char *, char *);
CODE:
	func   = INT2PTR(float(*)(int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2);
OUTPUT:
	RETVAL

char *
nci_titt( c_func, i0, t1, t2 )
	SV* c_func
	int i0
	char * t1
	char * t2
PREINIT:
	char *(*func)(int, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2);
OUTPUT:
	RETVAL

int
nci_iitt( c_func, i0, t1, t2 )
	SV* c_func
	int i0
	char * t1
	char * t2
PREINIT:
	int(*func)(int, char *, char *);
CODE:
	func   = INT2PTR(int(*)(int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2);
OUTPUT:
	RETVAL

void *
nci_ppit( c_func, p0, i1, t2 )
	SV* c_func
	void * p0
	int i1
	char * t2
PREINIT:
	void *(*func)(void *, int, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2);
OUTPUT:
	RETVAL

void
nci_vpit( c_func, p0, i1, t2 )
	SV* c_func
	void * p0
	int i1
	char * t2
PREINIT:
	void(*func)(void *, int, char *);
CODE:
	func   = INT2PTR(void(*)(void *, int, char *), SvIV(c_func) );
	(*func)(p0, i1, t2);

double
nci_dpit( c_func, p0, i1, t2 )
	SV* c_func
	void * p0
	int i1
	char * t2
PREINIT:
	double(*func)(void *, int, char *);
CODE:
	func   = INT2PTR(double(*)(void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2);
OUTPUT:
	RETVAL

short
nci_spit( c_func, p0, i1, t2 )
	SV* c_func
	void * p0
	int i1
	char * t2
PREINIT:
	short(*func)(void *, int, char *);
CODE:
	func   = INT2PTR(short(*)(void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2);
OUTPUT:
	RETVAL

float
nci_fpit( c_func, p0, i1, t2 )
	SV* c_func
	void * p0
	int i1
	char * t2
PREINIT:
	float(*func)(void *, int, char *);
CODE:
	func   = INT2PTR(float(*)(void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2);
OUTPUT:
	RETVAL

char *
nci_tpit( c_func, p0, i1, t2 )
	SV* c_func
	void * p0
	int i1
	char * t2
PREINIT:
	char *(*func)(void *, int, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2);
OUTPUT:
	RETVAL

int
nci_ipit( c_func, p0, i1, t2 )
	SV* c_func
	void * p0
	int i1
	char * t2
PREINIT:
	int(*func)(void *, int, char *);
CODE:
	func   = INT2PTR(int(*)(void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2);
OUTPUT:
	RETVAL

void *
nci_pvit( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvit( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvit( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svit( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvit( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvit( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivit( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdit( c_func, d0, i1, t2 )
	SV* c_func
	double d0
	int i1
	char * t2
PREINIT:
	void *(*func)(double, int, char *);
CODE:
	func   = INT2PTR(void *(*)(double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2);
OUTPUT:
	RETVAL

void
nci_vdit( c_func, d0, i1, t2 )
	SV* c_func
	double d0
	int i1
	char * t2
PREINIT:
	void(*func)(double, int, char *);
CODE:
	func   = INT2PTR(void(*)(double, int, char *), SvIV(c_func) );
	(*func)(d0, i1, t2);

double
nci_ddit( c_func, d0, i1, t2 )
	SV* c_func
	double d0
	int i1
	char * t2
PREINIT:
	double(*func)(double, int, char *);
CODE:
	func   = INT2PTR(double(*)(double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2);
OUTPUT:
	RETVAL

short
nci_sdit( c_func, d0, i1, t2 )
	SV* c_func
	double d0
	int i1
	char * t2
PREINIT:
	short(*func)(double, int, char *);
CODE:
	func   = INT2PTR(short(*)(double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2);
OUTPUT:
	RETVAL

float
nci_fdit( c_func, d0, i1, t2 )
	SV* c_func
	double d0
	int i1
	char * t2
PREINIT:
	float(*func)(double, int, char *);
CODE:
	func   = INT2PTR(float(*)(double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2);
OUTPUT:
	RETVAL

char *
nci_tdit( c_func, d0, i1, t2 )
	SV* c_func
	double d0
	int i1
	char * t2
PREINIT:
	char *(*func)(double, int, char *);
CODE:
	func   = INT2PTR(char *(*)(double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2);
OUTPUT:
	RETVAL

int
nci_idit( c_func, d0, i1, t2 )
	SV* c_func
	double d0
	int i1
	char * t2
PREINIT:
	int(*func)(double, int, char *);
CODE:
	func   = INT2PTR(int(*)(double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2);
OUTPUT:
	RETVAL

void *
nci_psit( c_func, s0, i1, t2 )
	SV* c_func
	short s0
	int i1
	char * t2
PREINIT:
	void *(*func)(short, int, char *);
CODE:
	func   = INT2PTR(void *(*)(short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2);
OUTPUT:
	RETVAL

void
nci_vsit( c_func, s0, i1, t2 )
	SV* c_func
	short s0
	int i1
	char * t2
PREINIT:
	void(*func)(short, int, char *);
CODE:
	func   = INT2PTR(void(*)(short, int, char *), SvIV(c_func) );
	(*func)(s0, i1, t2);

double
nci_dsit( c_func, s0, i1, t2 )
	SV* c_func
	short s0
	int i1
	char * t2
PREINIT:
	double(*func)(short, int, char *);
CODE:
	func   = INT2PTR(double(*)(short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2);
OUTPUT:
	RETVAL

short
nci_ssit( c_func, s0, i1, t2 )
	SV* c_func
	short s0
	int i1
	char * t2
PREINIT:
	short(*func)(short, int, char *);
CODE:
	func   = INT2PTR(short(*)(short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2);
OUTPUT:
	RETVAL

float
nci_fsit( c_func, s0, i1, t2 )
	SV* c_func
	short s0
	int i1
	char * t2
PREINIT:
	float(*func)(short, int, char *);
CODE:
	func   = INT2PTR(float(*)(short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2);
OUTPUT:
	RETVAL

char *
nci_tsit( c_func, s0, i1, t2 )
	SV* c_func
	short s0
	int i1
	char * t2
PREINIT:
	char *(*func)(short, int, char *);
CODE:
	func   = INT2PTR(char *(*)(short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2);
OUTPUT:
	RETVAL

int
nci_isit( c_func, s0, i1, t2 )
	SV* c_func
	short s0
	int i1
	char * t2
PREINIT:
	int(*func)(short, int, char *);
CODE:
	func   = INT2PTR(int(*)(short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2);
OUTPUT:
	RETVAL

void *
nci_pfit( c_func, f0, i1, t2 )
	SV* c_func
	float f0
	int i1
	char * t2
PREINIT:
	void *(*func)(float, int, char *);
CODE:
	func   = INT2PTR(void *(*)(float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2);
OUTPUT:
	RETVAL

void
nci_vfit( c_func, f0, i1, t2 )
	SV* c_func
	float f0
	int i1
	char * t2
PREINIT:
	void(*func)(float, int, char *);
CODE:
	func   = INT2PTR(void(*)(float, int, char *), SvIV(c_func) );
	(*func)(f0, i1, t2);

double
nci_dfit( c_func, f0, i1, t2 )
	SV* c_func
	float f0
	int i1
	char * t2
PREINIT:
	double(*func)(float, int, char *);
CODE:
	func   = INT2PTR(double(*)(float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2);
OUTPUT:
	RETVAL

short
nci_sfit( c_func, f0, i1, t2 )
	SV* c_func
	float f0
	int i1
	char * t2
PREINIT:
	short(*func)(float, int, char *);
CODE:
	func   = INT2PTR(short(*)(float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2);
OUTPUT:
	RETVAL

float
nci_ffit( c_func, f0, i1, t2 )
	SV* c_func
	float f0
	int i1
	char * t2
PREINIT:
	float(*func)(float, int, char *);
CODE:
	func   = INT2PTR(float(*)(float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2);
OUTPUT:
	RETVAL

char *
nci_tfit( c_func, f0, i1, t2 )
	SV* c_func
	float f0
	int i1
	char * t2
PREINIT:
	char *(*func)(float, int, char *);
CODE:
	func   = INT2PTR(char *(*)(float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2);
OUTPUT:
	RETVAL

int
nci_ifit( c_func, f0, i1, t2 )
	SV* c_func
	float f0
	int i1
	char * t2
PREINIT:
	int(*func)(float, int, char *);
CODE:
	func   = INT2PTR(int(*)(float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2);
OUTPUT:
	RETVAL

void *
nci_ptit( c_func, t0, i1, t2 )
	SV* c_func
	char * t0
	int i1
	char * t2
PREINIT:
	void *(*func)(char *, int, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2);
OUTPUT:
	RETVAL

void
nci_vtit( c_func, t0, i1, t2 )
	SV* c_func
	char * t0
	int i1
	char * t2
PREINIT:
	void(*func)(char *, int, char *);
CODE:
	func   = INT2PTR(void(*)(char *, int, char *), SvIV(c_func) );
	(*func)(t0, i1, t2);

double
nci_dtit( c_func, t0, i1, t2 )
	SV* c_func
	char * t0
	int i1
	char * t2
PREINIT:
	double(*func)(char *, int, char *);
CODE:
	func   = INT2PTR(double(*)(char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2);
OUTPUT:
	RETVAL

short
nci_stit( c_func, t0, i1, t2 )
	SV* c_func
	char * t0
	int i1
	char * t2
PREINIT:
	short(*func)(char *, int, char *);
CODE:
	func   = INT2PTR(short(*)(char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2);
OUTPUT:
	RETVAL

float
nci_ftit( c_func, t0, i1, t2 )
	SV* c_func
	char * t0
	int i1
	char * t2
PREINIT:
	float(*func)(char *, int, char *);
CODE:
	func   = INT2PTR(float(*)(char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2);
OUTPUT:
	RETVAL

char *
nci_ttit( c_func, t0, i1, t2 )
	SV* c_func
	char * t0
	int i1
	char * t2
PREINIT:
	char *(*func)(char *, int, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2);
OUTPUT:
	RETVAL

int
nci_itit( c_func, t0, i1, t2 )
	SV* c_func
	char * t0
	int i1
	char * t2
PREINIT:
	int(*func)(char *, int, char *);
CODE:
	func   = INT2PTR(int(*)(char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2);
OUTPUT:
	RETVAL

void *
nci_piit( c_func, i0, i1, t2 )
	SV* c_func
	int i0
	int i1
	char * t2
PREINIT:
	void *(*func)(int, int, char *);
CODE:
	func   = INT2PTR(void *(*)(int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2);
OUTPUT:
	RETVAL

void
nci_viit( c_func, i0, i1, t2 )
	SV* c_func
	int i0
	int i1
	char * t2
PREINIT:
	void(*func)(int, int, char *);
CODE:
	func   = INT2PTR(void(*)(int, int, char *), SvIV(c_func) );
	(*func)(i0, i1, t2);

double
nci_diit( c_func, i0, i1, t2 )
	SV* c_func
	int i0
	int i1
	char * t2
PREINIT:
	double(*func)(int, int, char *);
CODE:
	func   = INT2PTR(double(*)(int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2);
OUTPUT:
	RETVAL

short
nci_siit( c_func, i0, i1, t2 )
	SV* c_func
	int i0
	int i1
	char * t2
PREINIT:
	short(*func)(int, int, char *);
CODE:
	func   = INT2PTR(short(*)(int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2);
OUTPUT:
	RETVAL

float
nci_fiit( c_func, i0, i1, t2 )
	SV* c_func
	int i0
	int i1
	char * t2
PREINIT:
	float(*func)(int, int, char *);
CODE:
	func   = INT2PTR(float(*)(int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2);
OUTPUT:
	RETVAL

char *
nci_tiit( c_func, i0, i1, t2 )
	SV* c_func
	int i0
	int i1
	char * t2
PREINIT:
	char *(*func)(int, int, char *);
CODE:
	func   = INT2PTR(char *(*)(int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2);
OUTPUT:
	RETVAL

int
nci_iiit( c_func, i0, i1, t2 )
	SV* c_func
	int i0
	int i1
	char * t2
PREINIT:
	int(*func)(int, int, char *);
CODE:
	func   = INT2PTR(int(*)(int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2);
OUTPUT:
	RETVAL

void *
nci_pppi( c_func, p0, p1, i2 )
	SV* c_func
	void * p0
	void * p1
	int i2
PREINIT:
	void *(*func)(void *, void *, int);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2);
OUTPUT:
	RETVAL

void
nci_vppi( c_func, p0, p1, i2 )
	SV* c_func
	void * p0
	void * p1
	int i2
PREINIT:
	void(*func)(void *, void *, int);
CODE:
	func   = INT2PTR(void(*)(void *, void *, int), SvIV(c_func) );
	(*func)(p0, p1, i2);

double
nci_dppi( c_func, p0, p1, i2 )
	SV* c_func
	void * p0
	void * p1
	int i2
PREINIT:
	double(*func)(void *, void *, int);
CODE:
	func   = INT2PTR(double(*)(void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2);
OUTPUT:
	RETVAL

short
nci_sppi( c_func, p0, p1, i2 )
	SV* c_func
	void * p0
	void * p1
	int i2
PREINIT:
	short(*func)(void *, void *, int);
CODE:
	func   = INT2PTR(short(*)(void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2);
OUTPUT:
	RETVAL

float
nci_fppi( c_func, p0, p1, i2 )
	SV* c_func
	void * p0
	void * p1
	int i2
PREINIT:
	float(*func)(void *, void *, int);
CODE:
	func   = INT2PTR(float(*)(void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2);
OUTPUT:
	RETVAL

char *
nci_tppi( c_func, p0, p1, i2 )
	SV* c_func
	void * p0
	void * p1
	int i2
PREINIT:
	char *(*func)(void *, void *, int);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2);
OUTPUT:
	RETVAL

int
nci_ippi( c_func, p0, p1, i2 )
	SV* c_func
	void * p0
	void * p1
	int i2
PREINIT:
	int(*func)(void *, void *, int);
CODE:
	func   = INT2PTR(int(*)(void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2);
OUTPUT:
	RETVAL

void *
nci_pvpi( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvpi( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvpi( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svpi( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvpi( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvpi( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivpi( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdpi( c_func, d0, p1, i2 )
	SV* c_func
	double d0
	void * p1
	int i2
PREINIT:
	void *(*func)(double, void *, int);
CODE:
	func   = INT2PTR(void *(*)(double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2);
OUTPUT:
	RETVAL

void
nci_vdpi( c_func, d0, p1, i2 )
	SV* c_func
	double d0
	void * p1
	int i2
PREINIT:
	void(*func)(double, void *, int);
CODE:
	func   = INT2PTR(void(*)(double, void *, int), SvIV(c_func) );
	(*func)(d0, p1, i2);

double
nci_ddpi( c_func, d0, p1, i2 )
	SV* c_func
	double d0
	void * p1
	int i2
PREINIT:
	double(*func)(double, void *, int);
CODE:
	func   = INT2PTR(double(*)(double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2);
OUTPUT:
	RETVAL

short
nci_sdpi( c_func, d0, p1, i2 )
	SV* c_func
	double d0
	void * p1
	int i2
PREINIT:
	short(*func)(double, void *, int);
CODE:
	func   = INT2PTR(short(*)(double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2);
OUTPUT:
	RETVAL

float
nci_fdpi( c_func, d0, p1, i2 )
	SV* c_func
	double d0
	void * p1
	int i2
PREINIT:
	float(*func)(double, void *, int);
CODE:
	func   = INT2PTR(float(*)(double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2);
OUTPUT:
	RETVAL

char *
nci_tdpi( c_func, d0, p1, i2 )
	SV* c_func
	double d0
	void * p1
	int i2
PREINIT:
	char *(*func)(double, void *, int);
CODE:
	func   = INT2PTR(char *(*)(double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2);
OUTPUT:
	RETVAL

int
nci_idpi( c_func, d0, p1, i2 )
	SV* c_func
	double d0
	void * p1
	int i2
PREINIT:
	int(*func)(double, void *, int);
CODE:
	func   = INT2PTR(int(*)(double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2);
OUTPUT:
	RETVAL

void *
nci_pspi( c_func, s0, p1, i2 )
	SV* c_func
	short s0
	void * p1
	int i2
PREINIT:
	void *(*func)(short, void *, int);
CODE:
	func   = INT2PTR(void *(*)(short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2);
OUTPUT:
	RETVAL

void
nci_vspi( c_func, s0, p1, i2 )
	SV* c_func
	short s0
	void * p1
	int i2
PREINIT:
	void(*func)(short, void *, int);
CODE:
	func   = INT2PTR(void(*)(short, void *, int), SvIV(c_func) );
	(*func)(s0, p1, i2);

double
nci_dspi( c_func, s0, p1, i2 )
	SV* c_func
	short s0
	void * p1
	int i2
PREINIT:
	double(*func)(short, void *, int);
CODE:
	func   = INT2PTR(double(*)(short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2);
OUTPUT:
	RETVAL

short
nci_sspi( c_func, s0, p1, i2 )
	SV* c_func
	short s0
	void * p1
	int i2
PREINIT:
	short(*func)(short, void *, int);
CODE:
	func   = INT2PTR(short(*)(short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2);
OUTPUT:
	RETVAL

float
nci_fspi( c_func, s0, p1, i2 )
	SV* c_func
	short s0
	void * p1
	int i2
PREINIT:
	float(*func)(short, void *, int);
CODE:
	func   = INT2PTR(float(*)(short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2);
OUTPUT:
	RETVAL

char *
nci_tspi( c_func, s0, p1, i2 )
	SV* c_func
	short s0
	void * p1
	int i2
PREINIT:
	char *(*func)(short, void *, int);
CODE:
	func   = INT2PTR(char *(*)(short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2);
OUTPUT:
	RETVAL

int
nci_ispi( c_func, s0, p1, i2 )
	SV* c_func
	short s0
	void * p1
	int i2
PREINIT:
	int(*func)(short, void *, int);
CODE:
	func   = INT2PTR(int(*)(short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2);
OUTPUT:
	RETVAL

void *
nci_pfpi( c_func, f0, p1, i2 )
	SV* c_func
	float f0
	void * p1
	int i2
PREINIT:
	void *(*func)(float, void *, int);
CODE:
	func   = INT2PTR(void *(*)(float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2);
OUTPUT:
	RETVAL

void
nci_vfpi( c_func, f0, p1, i2 )
	SV* c_func
	float f0
	void * p1
	int i2
PREINIT:
	void(*func)(float, void *, int);
CODE:
	func   = INT2PTR(void(*)(float, void *, int), SvIV(c_func) );
	(*func)(f0, p1, i2);

double
nci_dfpi( c_func, f0, p1, i2 )
	SV* c_func
	float f0
	void * p1
	int i2
PREINIT:
	double(*func)(float, void *, int);
CODE:
	func   = INT2PTR(double(*)(float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2);
OUTPUT:
	RETVAL

short
nci_sfpi( c_func, f0, p1, i2 )
	SV* c_func
	float f0
	void * p1
	int i2
PREINIT:
	short(*func)(float, void *, int);
CODE:
	func   = INT2PTR(short(*)(float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2);
OUTPUT:
	RETVAL

float
nci_ffpi( c_func, f0, p1, i2 )
	SV* c_func
	float f0
	void * p1
	int i2
PREINIT:
	float(*func)(float, void *, int);
CODE:
	func   = INT2PTR(float(*)(float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2);
OUTPUT:
	RETVAL

char *
nci_tfpi( c_func, f0, p1, i2 )
	SV* c_func
	float f0
	void * p1
	int i2
PREINIT:
	char *(*func)(float, void *, int);
CODE:
	func   = INT2PTR(char *(*)(float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2);
OUTPUT:
	RETVAL

int
nci_ifpi( c_func, f0, p1, i2 )
	SV* c_func
	float f0
	void * p1
	int i2
PREINIT:
	int(*func)(float, void *, int);
CODE:
	func   = INT2PTR(int(*)(float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2);
OUTPUT:
	RETVAL

void *
nci_ptpi( c_func, t0, p1, i2 )
	SV* c_func
	char * t0
	void * p1
	int i2
PREINIT:
	void *(*func)(char *, void *, int);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2);
OUTPUT:
	RETVAL

void
nci_vtpi( c_func, t0, p1, i2 )
	SV* c_func
	char * t0
	void * p1
	int i2
PREINIT:
	void(*func)(char *, void *, int);
CODE:
	func   = INT2PTR(void(*)(char *, void *, int), SvIV(c_func) );
	(*func)(t0, p1, i2);

double
nci_dtpi( c_func, t0, p1, i2 )
	SV* c_func
	char * t0
	void * p1
	int i2
PREINIT:
	double(*func)(char *, void *, int);
CODE:
	func   = INT2PTR(double(*)(char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2);
OUTPUT:
	RETVAL

short
nci_stpi( c_func, t0, p1, i2 )
	SV* c_func
	char * t0
	void * p1
	int i2
PREINIT:
	short(*func)(char *, void *, int);
CODE:
	func   = INT2PTR(short(*)(char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2);
OUTPUT:
	RETVAL

float
nci_ftpi( c_func, t0, p1, i2 )
	SV* c_func
	char * t0
	void * p1
	int i2
PREINIT:
	float(*func)(char *, void *, int);
CODE:
	func   = INT2PTR(float(*)(char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2);
OUTPUT:
	RETVAL

char *
nci_ttpi( c_func, t0, p1, i2 )
	SV* c_func
	char * t0
	void * p1
	int i2
PREINIT:
	char *(*func)(char *, void *, int);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2);
OUTPUT:
	RETVAL

int
nci_itpi( c_func, t0, p1, i2 )
	SV* c_func
	char * t0
	void * p1
	int i2
PREINIT:
	int(*func)(char *, void *, int);
CODE:
	func   = INT2PTR(int(*)(char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2);
OUTPUT:
	RETVAL

void *
nci_pipi( c_func, i0, p1, i2 )
	SV* c_func
	int i0
	void * p1
	int i2
PREINIT:
	void *(*func)(int, void *, int);
CODE:
	func   = INT2PTR(void *(*)(int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2);
OUTPUT:
	RETVAL

void
nci_vipi( c_func, i0, p1, i2 )
	SV* c_func
	int i0
	void * p1
	int i2
PREINIT:
	void(*func)(int, void *, int);
CODE:
	func   = INT2PTR(void(*)(int, void *, int), SvIV(c_func) );
	(*func)(i0, p1, i2);

double
nci_dipi( c_func, i0, p1, i2 )
	SV* c_func
	int i0
	void * p1
	int i2
PREINIT:
	double(*func)(int, void *, int);
CODE:
	func   = INT2PTR(double(*)(int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2);
OUTPUT:
	RETVAL

short
nci_sipi( c_func, i0, p1, i2 )
	SV* c_func
	int i0
	void * p1
	int i2
PREINIT:
	short(*func)(int, void *, int);
CODE:
	func   = INT2PTR(short(*)(int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2);
OUTPUT:
	RETVAL

float
nci_fipi( c_func, i0, p1, i2 )
	SV* c_func
	int i0
	void * p1
	int i2
PREINIT:
	float(*func)(int, void *, int);
CODE:
	func   = INT2PTR(float(*)(int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2);
OUTPUT:
	RETVAL

char *
nci_tipi( c_func, i0, p1, i2 )
	SV* c_func
	int i0
	void * p1
	int i2
PREINIT:
	char *(*func)(int, void *, int);
CODE:
	func   = INT2PTR(char *(*)(int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2);
OUTPUT:
	RETVAL

int
nci_iipi( c_func, i0, p1, i2 )
	SV* c_func
	int i0
	void * p1
	int i2
PREINIT:
	int(*func)(int, void *, int);
CODE:
	func   = INT2PTR(int(*)(int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2);
OUTPUT:
	RETVAL

void *
nci_ppdi( c_func, p0, d1, i2 )
	SV* c_func
	void * p0
	double d1
	int i2
PREINIT:
	void *(*func)(void *, double, int);
CODE:
	func   = INT2PTR(void *(*)(void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2);
OUTPUT:
	RETVAL

void
nci_vpdi( c_func, p0, d1, i2 )
	SV* c_func
	void * p0
	double d1
	int i2
PREINIT:
	void(*func)(void *, double, int);
CODE:
	func   = INT2PTR(void(*)(void *, double, int), SvIV(c_func) );
	(*func)(p0, d1, i2);

double
nci_dpdi( c_func, p0, d1, i2 )
	SV* c_func
	void * p0
	double d1
	int i2
PREINIT:
	double(*func)(void *, double, int);
CODE:
	func   = INT2PTR(double(*)(void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2);
OUTPUT:
	RETVAL

short
nci_spdi( c_func, p0, d1, i2 )
	SV* c_func
	void * p0
	double d1
	int i2
PREINIT:
	short(*func)(void *, double, int);
CODE:
	func   = INT2PTR(short(*)(void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2);
OUTPUT:
	RETVAL

float
nci_fpdi( c_func, p0, d1, i2 )
	SV* c_func
	void * p0
	double d1
	int i2
PREINIT:
	float(*func)(void *, double, int);
CODE:
	func   = INT2PTR(float(*)(void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2);
OUTPUT:
	RETVAL

char *
nci_tpdi( c_func, p0, d1, i2 )
	SV* c_func
	void * p0
	double d1
	int i2
PREINIT:
	char *(*func)(void *, double, int);
CODE:
	func   = INT2PTR(char *(*)(void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2);
OUTPUT:
	RETVAL

int
nci_ipdi( c_func, p0, d1, i2 )
	SV* c_func
	void * p0
	double d1
	int i2
PREINIT:
	int(*func)(void *, double, int);
CODE:
	func   = INT2PTR(int(*)(void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2);
OUTPUT:
	RETVAL

void *
nci_pvdi( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvdi( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvdi( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svdi( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvdi( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvdi( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivdi( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pddi( c_func, d0, d1, i2 )
	SV* c_func
	double d0
	double d1
	int i2
PREINIT:
	void *(*func)(double, double, int);
CODE:
	func   = INT2PTR(void *(*)(double, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2);
OUTPUT:
	RETVAL

void
nci_vddi( c_func, d0, d1, i2 )
	SV* c_func
	double d0
	double d1
	int i2
PREINIT:
	void(*func)(double, double, int);
CODE:
	func   = INT2PTR(void(*)(double, double, int), SvIV(c_func) );
	(*func)(d0, d1, i2);

double
nci_dddi( c_func, d0, d1, i2 )
	SV* c_func
	double d0
	double d1
	int i2
PREINIT:
	double(*func)(double, double, int);
CODE:
	func   = INT2PTR(double(*)(double, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2);
OUTPUT:
	RETVAL

short
nci_sddi( c_func, d0, d1, i2 )
	SV* c_func
	double d0
	double d1
	int i2
PREINIT:
	short(*func)(double, double, int);
CODE:
	func   = INT2PTR(short(*)(double, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2);
OUTPUT:
	RETVAL

float
nci_fddi( c_func, d0, d1, i2 )
	SV* c_func
	double d0
	double d1
	int i2
PREINIT:
	float(*func)(double, double, int);
CODE:
	func   = INT2PTR(float(*)(double, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2);
OUTPUT:
	RETVAL

char *
nci_tddi( c_func, d0, d1, i2 )
	SV* c_func
	double d0
	double d1
	int i2
PREINIT:
	char *(*func)(double, double, int);
CODE:
	func   = INT2PTR(char *(*)(double, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2);
OUTPUT:
	RETVAL

int
nci_iddi( c_func, d0, d1, i2 )
	SV* c_func
	double d0
	double d1
	int i2
PREINIT:
	int(*func)(double, double, int);
CODE:
	func   = INT2PTR(int(*)(double, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2);
OUTPUT:
	RETVAL

void *
nci_psdi( c_func, s0, d1, i2 )
	SV* c_func
	short s0
	double d1
	int i2
PREINIT:
	void *(*func)(short, double, int);
CODE:
	func   = INT2PTR(void *(*)(short, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2);
OUTPUT:
	RETVAL

void
nci_vsdi( c_func, s0, d1, i2 )
	SV* c_func
	short s0
	double d1
	int i2
PREINIT:
	void(*func)(short, double, int);
CODE:
	func   = INT2PTR(void(*)(short, double, int), SvIV(c_func) );
	(*func)(s0, d1, i2);

double
nci_dsdi( c_func, s0, d1, i2 )
	SV* c_func
	short s0
	double d1
	int i2
PREINIT:
	double(*func)(short, double, int);
CODE:
	func   = INT2PTR(double(*)(short, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2);
OUTPUT:
	RETVAL

short
nci_ssdi( c_func, s0, d1, i2 )
	SV* c_func
	short s0
	double d1
	int i2
PREINIT:
	short(*func)(short, double, int);
CODE:
	func   = INT2PTR(short(*)(short, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2);
OUTPUT:
	RETVAL

float
nci_fsdi( c_func, s0, d1, i2 )
	SV* c_func
	short s0
	double d1
	int i2
PREINIT:
	float(*func)(short, double, int);
CODE:
	func   = INT2PTR(float(*)(short, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2);
OUTPUT:
	RETVAL

char *
nci_tsdi( c_func, s0, d1, i2 )
	SV* c_func
	short s0
	double d1
	int i2
PREINIT:
	char *(*func)(short, double, int);
CODE:
	func   = INT2PTR(char *(*)(short, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2);
OUTPUT:
	RETVAL

int
nci_isdi( c_func, s0, d1, i2 )
	SV* c_func
	short s0
	double d1
	int i2
PREINIT:
	int(*func)(short, double, int);
CODE:
	func   = INT2PTR(int(*)(short, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2);
OUTPUT:
	RETVAL

void *
nci_pfdi( c_func, f0, d1, i2 )
	SV* c_func
	float f0
	double d1
	int i2
PREINIT:
	void *(*func)(float, double, int);
CODE:
	func   = INT2PTR(void *(*)(float, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2);
OUTPUT:
	RETVAL

void
nci_vfdi( c_func, f0, d1, i2 )
	SV* c_func
	float f0
	double d1
	int i2
PREINIT:
	void(*func)(float, double, int);
CODE:
	func   = INT2PTR(void(*)(float, double, int), SvIV(c_func) );
	(*func)(f0, d1, i2);

double
nci_dfdi( c_func, f0, d1, i2 )
	SV* c_func
	float f0
	double d1
	int i2
PREINIT:
	double(*func)(float, double, int);
CODE:
	func   = INT2PTR(double(*)(float, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2);
OUTPUT:
	RETVAL

short
nci_sfdi( c_func, f0, d1, i2 )
	SV* c_func
	float f0
	double d1
	int i2
PREINIT:
	short(*func)(float, double, int);
CODE:
	func   = INT2PTR(short(*)(float, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2);
OUTPUT:
	RETVAL

float
nci_ffdi( c_func, f0, d1, i2 )
	SV* c_func
	float f0
	double d1
	int i2
PREINIT:
	float(*func)(float, double, int);
CODE:
	func   = INT2PTR(float(*)(float, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2);
OUTPUT:
	RETVAL

char *
nci_tfdi( c_func, f0, d1, i2 )
	SV* c_func
	float f0
	double d1
	int i2
PREINIT:
	char *(*func)(float, double, int);
CODE:
	func   = INT2PTR(char *(*)(float, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2);
OUTPUT:
	RETVAL

int
nci_ifdi( c_func, f0, d1, i2 )
	SV* c_func
	float f0
	double d1
	int i2
PREINIT:
	int(*func)(float, double, int);
CODE:
	func   = INT2PTR(int(*)(float, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2);
OUTPUT:
	RETVAL

void *
nci_ptdi( c_func, t0, d1, i2 )
	SV* c_func
	char * t0
	double d1
	int i2
PREINIT:
	void *(*func)(char *, double, int);
CODE:
	func   = INT2PTR(void *(*)(char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2);
OUTPUT:
	RETVAL

void
nci_vtdi( c_func, t0, d1, i2 )
	SV* c_func
	char * t0
	double d1
	int i2
PREINIT:
	void(*func)(char *, double, int);
CODE:
	func   = INT2PTR(void(*)(char *, double, int), SvIV(c_func) );
	(*func)(t0, d1, i2);

double
nci_dtdi( c_func, t0, d1, i2 )
	SV* c_func
	char * t0
	double d1
	int i2
PREINIT:
	double(*func)(char *, double, int);
CODE:
	func   = INT2PTR(double(*)(char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2);
OUTPUT:
	RETVAL

short
nci_stdi( c_func, t0, d1, i2 )
	SV* c_func
	char * t0
	double d1
	int i2
PREINIT:
	short(*func)(char *, double, int);
CODE:
	func   = INT2PTR(short(*)(char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2);
OUTPUT:
	RETVAL

float
nci_ftdi( c_func, t0, d1, i2 )
	SV* c_func
	char * t0
	double d1
	int i2
PREINIT:
	float(*func)(char *, double, int);
CODE:
	func   = INT2PTR(float(*)(char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2);
OUTPUT:
	RETVAL

char *
nci_ttdi( c_func, t0, d1, i2 )
	SV* c_func
	char * t0
	double d1
	int i2
PREINIT:
	char *(*func)(char *, double, int);
CODE:
	func   = INT2PTR(char *(*)(char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2);
OUTPUT:
	RETVAL

int
nci_itdi( c_func, t0, d1, i2 )
	SV* c_func
	char * t0
	double d1
	int i2
PREINIT:
	int(*func)(char *, double, int);
CODE:
	func   = INT2PTR(int(*)(char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2);
OUTPUT:
	RETVAL

void *
nci_pidi( c_func, i0, d1, i2 )
	SV* c_func
	int i0
	double d1
	int i2
PREINIT:
	void *(*func)(int, double, int);
CODE:
	func   = INT2PTR(void *(*)(int, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2);
OUTPUT:
	RETVAL

void
nci_vidi( c_func, i0, d1, i2 )
	SV* c_func
	int i0
	double d1
	int i2
PREINIT:
	void(*func)(int, double, int);
CODE:
	func   = INT2PTR(void(*)(int, double, int), SvIV(c_func) );
	(*func)(i0, d1, i2);

double
nci_didi( c_func, i0, d1, i2 )
	SV* c_func
	int i0
	double d1
	int i2
PREINIT:
	double(*func)(int, double, int);
CODE:
	func   = INT2PTR(double(*)(int, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2);
OUTPUT:
	RETVAL

short
nci_sidi( c_func, i0, d1, i2 )
	SV* c_func
	int i0
	double d1
	int i2
PREINIT:
	short(*func)(int, double, int);
CODE:
	func   = INT2PTR(short(*)(int, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2);
OUTPUT:
	RETVAL

float
nci_fidi( c_func, i0, d1, i2 )
	SV* c_func
	int i0
	double d1
	int i2
PREINIT:
	float(*func)(int, double, int);
CODE:
	func   = INT2PTR(float(*)(int, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2);
OUTPUT:
	RETVAL

char *
nci_tidi( c_func, i0, d1, i2 )
	SV* c_func
	int i0
	double d1
	int i2
PREINIT:
	char *(*func)(int, double, int);
CODE:
	func   = INT2PTR(char *(*)(int, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2);
OUTPUT:
	RETVAL

int
nci_iidi( c_func, i0, d1, i2 )
	SV* c_func
	int i0
	double d1
	int i2
PREINIT:
	int(*func)(int, double, int);
CODE:
	func   = INT2PTR(int(*)(int, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2);
OUTPUT:
	RETVAL

void *
nci_ppsi( c_func, p0, s1, i2 )
	SV* c_func
	void * p0
	short s1
	int i2
PREINIT:
	void *(*func)(void *, short, int);
CODE:
	func   = INT2PTR(void *(*)(void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2);
OUTPUT:
	RETVAL

void
nci_vpsi( c_func, p0, s1, i2 )
	SV* c_func
	void * p0
	short s1
	int i2
PREINIT:
	void(*func)(void *, short, int);
CODE:
	func   = INT2PTR(void(*)(void *, short, int), SvIV(c_func) );
	(*func)(p0, s1, i2);

double
nci_dpsi( c_func, p0, s1, i2 )
	SV* c_func
	void * p0
	short s1
	int i2
PREINIT:
	double(*func)(void *, short, int);
CODE:
	func   = INT2PTR(double(*)(void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2);
OUTPUT:
	RETVAL

short
nci_spsi( c_func, p0, s1, i2 )
	SV* c_func
	void * p0
	short s1
	int i2
PREINIT:
	short(*func)(void *, short, int);
CODE:
	func   = INT2PTR(short(*)(void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2);
OUTPUT:
	RETVAL

float
nci_fpsi( c_func, p0, s1, i2 )
	SV* c_func
	void * p0
	short s1
	int i2
PREINIT:
	float(*func)(void *, short, int);
CODE:
	func   = INT2PTR(float(*)(void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2);
OUTPUT:
	RETVAL

char *
nci_tpsi( c_func, p0, s1, i2 )
	SV* c_func
	void * p0
	short s1
	int i2
PREINIT:
	char *(*func)(void *, short, int);
CODE:
	func   = INT2PTR(char *(*)(void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2);
OUTPUT:
	RETVAL

int
nci_ipsi( c_func, p0, s1, i2 )
	SV* c_func
	void * p0
	short s1
	int i2
PREINIT:
	int(*func)(void *, short, int);
CODE:
	func   = INT2PTR(int(*)(void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2);
OUTPUT:
	RETVAL

void *
nci_pvsi( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvsi( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvsi( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svsi( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvsi( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvsi( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivsi( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdsi( c_func, d0, s1, i2 )
	SV* c_func
	double d0
	short s1
	int i2
PREINIT:
	void *(*func)(double, short, int);
CODE:
	func   = INT2PTR(void *(*)(double, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2);
OUTPUT:
	RETVAL

void
nci_vdsi( c_func, d0, s1, i2 )
	SV* c_func
	double d0
	short s1
	int i2
PREINIT:
	void(*func)(double, short, int);
CODE:
	func   = INT2PTR(void(*)(double, short, int), SvIV(c_func) );
	(*func)(d0, s1, i2);

double
nci_ddsi( c_func, d0, s1, i2 )
	SV* c_func
	double d0
	short s1
	int i2
PREINIT:
	double(*func)(double, short, int);
CODE:
	func   = INT2PTR(double(*)(double, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2);
OUTPUT:
	RETVAL

short
nci_sdsi( c_func, d0, s1, i2 )
	SV* c_func
	double d0
	short s1
	int i2
PREINIT:
	short(*func)(double, short, int);
CODE:
	func   = INT2PTR(short(*)(double, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2);
OUTPUT:
	RETVAL

float
nci_fdsi( c_func, d0, s1, i2 )
	SV* c_func
	double d0
	short s1
	int i2
PREINIT:
	float(*func)(double, short, int);
CODE:
	func   = INT2PTR(float(*)(double, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2);
OUTPUT:
	RETVAL

char *
nci_tdsi( c_func, d0, s1, i2 )
	SV* c_func
	double d0
	short s1
	int i2
PREINIT:
	char *(*func)(double, short, int);
CODE:
	func   = INT2PTR(char *(*)(double, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2);
OUTPUT:
	RETVAL

int
nci_idsi( c_func, d0, s1, i2 )
	SV* c_func
	double d0
	short s1
	int i2
PREINIT:
	int(*func)(double, short, int);
CODE:
	func   = INT2PTR(int(*)(double, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2);
OUTPUT:
	RETVAL

void *
nci_pssi( c_func, s0, s1, i2 )
	SV* c_func
	short s0
	short s1
	int i2
PREINIT:
	void *(*func)(short, short, int);
CODE:
	func   = INT2PTR(void *(*)(short, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2);
OUTPUT:
	RETVAL

void
nci_vssi( c_func, s0, s1, i2 )
	SV* c_func
	short s0
	short s1
	int i2
PREINIT:
	void(*func)(short, short, int);
CODE:
	func   = INT2PTR(void(*)(short, short, int), SvIV(c_func) );
	(*func)(s0, s1, i2);

double
nci_dssi( c_func, s0, s1, i2 )
	SV* c_func
	short s0
	short s1
	int i2
PREINIT:
	double(*func)(short, short, int);
CODE:
	func   = INT2PTR(double(*)(short, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2);
OUTPUT:
	RETVAL

short
nci_sssi( c_func, s0, s1, i2 )
	SV* c_func
	short s0
	short s1
	int i2
PREINIT:
	short(*func)(short, short, int);
CODE:
	func   = INT2PTR(short(*)(short, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2);
OUTPUT:
	RETVAL

float
nci_fssi( c_func, s0, s1, i2 )
	SV* c_func
	short s0
	short s1
	int i2
PREINIT:
	float(*func)(short, short, int);
CODE:
	func   = INT2PTR(float(*)(short, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2);
OUTPUT:
	RETVAL

char *
nci_tssi( c_func, s0, s1, i2 )
	SV* c_func
	short s0
	short s1
	int i2
PREINIT:
	char *(*func)(short, short, int);
CODE:
	func   = INT2PTR(char *(*)(short, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2);
OUTPUT:
	RETVAL

int
nci_issi( c_func, s0, s1, i2 )
	SV* c_func
	short s0
	short s1
	int i2
PREINIT:
	int(*func)(short, short, int);
CODE:
	func   = INT2PTR(int(*)(short, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2);
OUTPUT:
	RETVAL

void *
nci_pfsi( c_func, f0, s1, i2 )
	SV* c_func
	float f0
	short s1
	int i2
PREINIT:
	void *(*func)(float, short, int);
CODE:
	func   = INT2PTR(void *(*)(float, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2);
OUTPUT:
	RETVAL

void
nci_vfsi( c_func, f0, s1, i2 )
	SV* c_func
	float f0
	short s1
	int i2
PREINIT:
	void(*func)(float, short, int);
CODE:
	func   = INT2PTR(void(*)(float, short, int), SvIV(c_func) );
	(*func)(f0, s1, i2);

double
nci_dfsi( c_func, f0, s1, i2 )
	SV* c_func
	float f0
	short s1
	int i2
PREINIT:
	double(*func)(float, short, int);
CODE:
	func   = INT2PTR(double(*)(float, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2);
OUTPUT:
	RETVAL

short
nci_sfsi( c_func, f0, s1, i2 )
	SV* c_func
	float f0
	short s1
	int i2
PREINIT:
	short(*func)(float, short, int);
CODE:
	func   = INT2PTR(short(*)(float, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2);
OUTPUT:
	RETVAL

float
nci_ffsi( c_func, f0, s1, i2 )
	SV* c_func
	float f0
	short s1
	int i2
PREINIT:
	float(*func)(float, short, int);
CODE:
	func   = INT2PTR(float(*)(float, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2);
OUTPUT:
	RETVAL

char *
nci_tfsi( c_func, f0, s1, i2 )
	SV* c_func
	float f0
	short s1
	int i2
PREINIT:
	char *(*func)(float, short, int);
CODE:
	func   = INT2PTR(char *(*)(float, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2);
OUTPUT:
	RETVAL

int
nci_ifsi( c_func, f0, s1, i2 )
	SV* c_func
	float f0
	short s1
	int i2
PREINIT:
	int(*func)(float, short, int);
CODE:
	func   = INT2PTR(int(*)(float, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2);
OUTPUT:
	RETVAL

void *
nci_ptsi( c_func, t0, s1, i2 )
	SV* c_func
	char * t0
	short s1
	int i2
PREINIT:
	void *(*func)(char *, short, int);
CODE:
	func   = INT2PTR(void *(*)(char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2);
OUTPUT:
	RETVAL

void
nci_vtsi( c_func, t0, s1, i2 )
	SV* c_func
	char * t0
	short s1
	int i2
PREINIT:
	void(*func)(char *, short, int);
CODE:
	func   = INT2PTR(void(*)(char *, short, int), SvIV(c_func) );
	(*func)(t0, s1, i2);

double
nci_dtsi( c_func, t0, s1, i2 )
	SV* c_func
	char * t0
	short s1
	int i2
PREINIT:
	double(*func)(char *, short, int);
CODE:
	func   = INT2PTR(double(*)(char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2);
OUTPUT:
	RETVAL

short
nci_stsi( c_func, t0, s1, i2 )
	SV* c_func
	char * t0
	short s1
	int i2
PREINIT:
	short(*func)(char *, short, int);
CODE:
	func   = INT2PTR(short(*)(char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2);
OUTPUT:
	RETVAL

float
nci_ftsi( c_func, t0, s1, i2 )
	SV* c_func
	char * t0
	short s1
	int i2
PREINIT:
	float(*func)(char *, short, int);
CODE:
	func   = INT2PTR(float(*)(char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2);
OUTPUT:
	RETVAL

char *
nci_ttsi( c_func, t0, s1, i2 )
	SV* c_func
	char * t0
	short s1
	int i2
PREINIT:
	char *(*func)(char *, short, int);
CODE:
	func   = INT2PTR(char *(*)(char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2);
OUTPUT:
	RETVAL

int
nci_itsi( c_func, t0, s1, i2 )
	SV* c_func
	char * t0
	short s1
	int i2
PREINIT:
	int(*func)(char *, short, int);
CODE:
	func   = INT2PTR(int(*)(char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2);
OUTPUT:
	RETVAL

void *
nci_pisi( c_func, i0, s1, i2 )
	SV* c_func
	int i0
	short s1
	int i2
PREINIT:
	void *(*func)(int, short, int);
CODE:
	func   = INT2PTR(void *(*)(int, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2);
OUTPUT:
	RETVAL

void
nci_visi( c_func, i0, s1, i2 )
	SV* c_func
	int i0
	short s1
	int i2
PREINIT:
	void(*func)(int, short, int);
CODE:
	func   = INT2PTR(void(*)(int, short, int), SvIV(c_func) );
	(*func)(i0, s1, i2);

double
nci_disi( c_func, i0, s1, i2 )
	SV* c_func
	int i0
	short s1
	int i2
PREINIT:
	double(*func)(int, short, int);
CODE:
	func   = INT2PTR(double(*)(int, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2);
OUTPUT:
	RETVAL

short
nci_sisi( c_func, i0, s1, i2 )
	SV* c_func
	int i0
	short s1
	int i2
PREINIT:
	short(*func)(int, short, int);
CODE:
	func   = INT2PTR(short(*)(int, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2);
OUTPUT:
	RETVAL

float
nci_fisi( c_func, i0, s1, i2 )
	SV* c_func
	int i0
	short s1
	int i2
PREINIT:
	float(*func)(int, short, int);
CODE:
	func   = INT2PTR(float(*)(int, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2);
OUTPUT:
	RETVAL

char *
nci_tisi( c_func, i0, s1, i2 )
	SV* c_func
	int i0
	short s1
	int i2
PREINIT:
	char *(*func)(int, short, int);
CODE:
	func   = INT2PTR(char *(*)(int, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2);
OUTPUT:
	RETVAL

int
nci_iisi( c_func, i0, s1, i2 )
	SV* c_func
	int i0
	short s1
	int i2
PREINIT:
	int(*func)(int, short, int);
CODE:
	func   = INT2PTR(int(*)(int, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2);
OUTPUT:
	RETVAL

void *
nci_ppfi( c_func, p0, f1, i2 )
	SV* c_func
	void * p0
	float f1
	int i2
PREINIT:
	void *(*func)(void *, float, int);
CODE:
	func   = INT2PTR(void *(*)(void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2);
OUTPUT:
	RETVAL

void
nci_vpfi( c_func, p0, f1, i2 )
	SV* c_func
	void * p0
	float f1
	int i2
PREINIT:
	void(*func)(void *, float, int);
CODE:
	func   = INT2PTR(void(*)(void *, float, int), SvIV(c_func) );
	(*func)(p0, f1, i2);

double
nci_dpfi( c_func, p0, f1, i2 )
	SV* c_func
	void * p0
	float f1
	int i2
PREINIT:
	double(*func)(void *, float, int);
CODE:
	func   = INT2PTR(double(*)(void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2);
OUTPUT:
	RETVAL

short
nci_spfi( c_func, p0, f1, i2 )
	SV* c_func
	void * p0
	float f1
	int i2
PREINIT:
	short(*func)(void *, float, int);
CODE:
	func   = INT2PTR(short(*)(void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2);
OUTPUT:
	RETVAL

float
nci_fpfi( c_func, p0, f1, i2 )
	SV* c_func
	void * p0
	float f1
	int i2
PREINIT:
	float(*func)(void *, float, int);
CODE:
	func   = INT2PTR(float(*)(void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2);
OUTPUT:
	RETVAL

char *
nci_tpfi( c_func, p0, f1, i2 )
	SV* c_func
	void * p0
	float f1
	int i2
PREINIT:
	char *(*func)(void *, float, int);
CODE:
	func   = INT2PTR(char *(*)(void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2);
OUTPUT:
	RETVAL

int
nci_ipfi( c_func, p0, f1, i2 )
	SV* c_func
	void * p0
	float f1
	int i2
PREINIT:
	int(*func)(void *, float, int);
CODE:
	func   = INT2PTR(int(*)(void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2);
OUTPUT:
	RETVAL

void *
nci_pvfi( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvfi( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvfi( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svfi( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvfi( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvfi( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivfi( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdfi( c_func, d0, f1, i2 )
	SV* c_func
	double d0
	float f1
	int i2
PREINIT:
	void *(*func)(double, float, int);
CODE:
	func   = INT2PTR(void *(*)(double, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2);
OUTPUT:
	RETVAL

void
nci_vdfi( c_func, d0, f1, i2 )
	SV* c_func
	double d0
	float f1
	int i2
PREINIT:
	void(*func)(double, float, int);
CODE:
	func   = INT2PTR(void(*)(double, float, int), SvIV(c_func) );
	(*func)(d0, f1, i2);

double
nci_ddfi( c_func, d0, f1, i2 )
	SV* c_func
	double d0
	float f1
	int i2
PREINIT:
	double(*func)(double, float, int);
CODE:
	func   = INT2PTR(double(*)(double, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2);
OUTPUT:
	RETVAL

short
nci_sdfi( c_func, d0, f1, i2 )
	SV* c_func
	double d0
	float f1
	int i2
PREINIT:
	short(*func)(double, float, int);
CODE:
	func   = INT2PTR(short(*)(double, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2);
OUTPUT:
	RETVAL

float
nci_fdfi( c_func, d0, f1, i2 )
	SV* c_func
	double d0
	float f1
	int i2
PREINIT:
	float(*func)(double, float, int);
CODE:
	func   = INT2PTR(float(*)(double, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2);
OUTPUT:
	RETVAL

char *
nci_tdfi( c_func, d0, f1, i2 )
	SV* c_func
	double d0
	float f1
	int i2
PREINIT:
	char *(*func)(double, float, int);
CODE:
	func   = INT2PTR(char *(*)(double, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2);
OUTPUT:
	RETVAL

int
nci_idfi( c_func, d0, f1, i2 )
	SV* c_func
	double d0
	float f1
	int i2
PREINIT:
	int(*func)(double, float, int);
CODE:
	func   = INT2PTR(int(*)(double, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2);
OUTPUT:
	RETVAL

void *
nci_psfi( c_func, s0, f1, i2 )
	SV* c_func
	short s0
	float f1
	int i2
PREINIT:
	void *(*func)(short, float, int);
CODE:
	func   = INT2PTR(void *(*)(short, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2);
OUTPUT:
	RETVAL

void
nci_vsfi( c_func, s0, f1, i2 )
	SV* c_func
	short s0
	float f1
	int i2
PREINIT:
	void(*func)(short, float, int);
CODE:
	func   = INT2PTR(void(*)(short, float, int), SvIV(c_func) );
	(*func)(s0, f1, i2);

double
nci_dsfi( c_func, s0, f1, i2 )
	SV* c_func
	short s0
	float f1
	int i2
PREINIT:
	double(*func)(short, float, int);
CODE:
	func   = INT2PTR(double(*)(short, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2);
OUTPUT:
	RETVAL

short
nci_ssfi( c_func, s0, f1, i2 )
	SV* c_func
	short s0
	float f1
	int i2
PREINIT:
	short(*func)(short, float, int);
CODE:
	func   = INT2PTR(short(*)(short, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2);
OUTPUT:
	RETVAL

float
nci_fsfi( c_func, s0, f1, i2 )
	SV* c_func
	short s0
	float f1
	int i2
PREINIT:
	float(*func)(short, float, int);
CODE:
	func   = INT2PTR(float(*)(short, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2);
OUTPUT:
	RETVAL

char *
nci_tsfi( c_func, s0, f1, i2 )
	SV* c_func
	short s0
	float f1
	int i2
PREINIT:
	char *(*func)(short, float, int);
CODE:
	func   = INT2PTR(char *(*)(short, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2);
OUTPUT:
	RETVAL

int
nci_isfi( c_func, s0, f1, i2 )
	SV* c_func
	short s0
	float f1
	int i2
PREINIT:
	int(*func)(short, float, int);
CODE:
	func   = INT2PTR(int(*)(short, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2);
OUTPUT:
	RETVAL

void *
nci_pffi( c_func, f0, f1, i2 )
	SV* c_func
	float f0
	float f1
	int i2
PREINIT:
	void *(*func)(float, float, int);
CODE:
	func   = INT2PTR(void *(*)(float, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2);
OUTPUT:
	RETVAL

void
nci_vffi( c_func, f0, f1, i2 )
	SV* c_func
	float f0
	float f1
	int i2
PREINIT:
	void(*func)(float, float, int);
CODE:
	func   = INT2PTR(void(*)(float, float, int), SvIV(c_func) );
	(*func)(f0, f1, i2);

double
nci_dffi( c_func, f0, f1, i2 )
	SV* c_func
	float f0
	float f1
	int i2
PREINIT:
	double(*func)(float, float, int);
CODE:
	func   = INT2PTR(double(*)(float, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2);
OUTPUT:
	RETVAL

short
nci_sffi( c_func, f0, f1, i2 )
	SV* c_func
	float f0
	float f1
	int i2
PREINIT:
	short(*func)(float, float, int);
CODE:
	func   = INT2PTR(short(*)(float, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2);
OUTPUT:
	RETVAL

float
nci_fffi( c_func, f0, f1, i2 )
	SV* c_func
	float f0
	float f1
	int i2
PREINIT:
	float(*func)(float, float, int);
CODE:
	func   = INT2PTR(float(*)(float, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2);
OUTPUT:
	RETVAL

char *
nci_tffi( c_func, f0, f1, i2 )
	SV* c_func
	float f0
	float f1
	int i2
PREINIT:
	char *(*func)(float, float, int);
CODE:
	func   = INT2PTR(char *(*)(float, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2);
OUTPUT:
	RETVAL

int
nci_iffi( c_func, f0, f1, i2 )
	SV* c_func
	float f0
	float f1
	int i2
PREINIT:
	int(*func)(float, float, int);
CODE:
	func   = INT2PTR(int(*)(float, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2);
OUTPUT:
	RETVAL

void *
nci_ptfi( c_func, t0, f1, i2 )
	SV* c_func
	char * t0
	float f1
	int i2
PREINIT:
	void *(*func)(char *, float, int);
CODE:
	func   = INT2PTR(void *(*)(char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2);
OUTPUT:
	RETVAL

void
nci_vtfi( c_func, t0, f1, i2 )
	SV* c_func
	char * t0
	float f1
	int i2
PREINIT:
	void(*func)(char *, float, int);
CODE:
	func   = INT2PTR(void(*)(char *, float, int), SvIV(c_func) );
	(*func)(t0, f1, i2);

double
nci_dtfi( c_func, t0, f1, i2 )
	SV* c_func
	char * t0
	float f1
	int i2
PREINIT:
	double(*func)(char *, float, int);
CODE:
	func   = INT2PTR(double(*)(char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2);
OUTPUT:
	RETVAL

short
nci_stfi( c_func, t0, f1, i2 )
	SV* c_func
	char * t0
	float f1
	int i2
PREINIT:
	short(*func)(char *, float, int);
CODE:
	func   = INT2PTR(short(*)(char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2);
OUTPUT:
	RETVAL

float
nci_ftfi( c_func, t0, f1, i2 )
	SV* c_func
	char * t0
	float f1
	int i2
PREINIT:
	float(*func)(char *, float, int);
CODE:
	func   = INT2PTR(float(*)(char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2);
OUTPUT:
	RETVAL

char *
nci_ttfi( c_func, t0, f1, i2 )
	SV* c_func
	char * t0
	float f1
	int i2
PREINIT:
	char *(*func)(char *, float, int);
CODE:
	func   = INT2PTR(char *(*)(char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2);
OUTPUT:
	RETVAL

int
nci_itfi( c_func, t0, f1, i2 )
	SV* c_func
	char * t0
	float f1
	int i2
PREINIT:
	int(*func)(char *, float, int);
CODE:
	func   = INT2PTR(int(*)(char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2);
OUTPUT:
	RETVAL

void *
nci_pifi( c_func, i0, f1, i2 )
	SV* c_func
	int i0
	float f1
	int i2
PREINIT:
	void *(*func)(int, float, int);
CODE:
	func   = INT2PTR(void *(*)(int, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2);
OUTPUT:
	RETVAL

void
nci_vifi( c_func, i0, f1, i2 )
	SV* c_func
	int i0
	float f1
	int i2
PREINIT:
	void(*func)(int, float, int);
CODE:
	func   = INT2PTR(void(*)(int, float, int), SvIV(c_func) );
	(*func)(i0, f1, i2);

double
nci_difi( c_func, i0, f1, i2 )
	SV* c_func
	int i0
	float f1
	int i2
PREINIT:
	double(*func)(int, float, int);
CODE:
	func   = INT2PTR(double(*)(int, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2);
OUTPUT:
	RETVAL

short
nci_sifi( c_func, i0, f1, i2 )
	SV* c_func
	int i0
	float f1
	int i2
PREINIT:
	short(*func)(int, float, int);
CODE:
	func   = INT2PTR(short(*)(int, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2);
OUTPUT:
	RETVAL

float
nci_fifi( c_func, i0, f1, i2 )
	SV* c_func
	int i0
	float f1
	int i2
PREINIT:
	float(*func)(int, float, int);
CODE:
	func   = INT2PTR(float(*)(int, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2);
OUTPUT:
	RETVAL

char *
nci_tifi( c_func, i0, f1, i2 )
	SV* c_func
	int i0
	float f1
	int i2
PREINIT:
	char *(*func)(int, float, int);
CODE:
	func   = INT2PTR(char *(*)(int, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2);
OUTPUT:
	RETVAL

int
nci_iifi( c_func, i0, f1, i2 )
	SV* c_func
	int i0
	float f1
	int i2
PREINIT:
	int(*func)(int, float, int);
CODE:
	func   = INT2PTR(int(*)(int, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2);
OUTPUT:
	RETVAL

void *
nci_ppti( c_func, p0, t1, i2 )
	SV* c_func
	void * p0
	char * t1
	int i2
PREINIT:
	void *(*func)(void *, char *, int);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2);
OUTPUT:
	RETVAL

void
nci_vpti( c_func, p0, t1, i2 )
	SV* c_func
	void * p0
	char * t1
	int i2
PREINIT:
	void(*func)(void *, char *, int);
CODE:
	func   = INT2PTR(void(*)(void *, char *, int), SvIV(c_func) );
	(*func)(p0, t1, i2);

double
nci_dpti( c_func, p0, t1, i2 )
	SV* c_func
	void * p0
	char * t1
	int i2
PREINIT:
	double(*func)(void *, char *, int);
CODE:
	func   = INT2PTR(double(*)(void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2);
OUTPUT:
	RETVAL

short
nci_spti( c_func, p0, t1, i2 )
	SV* c_func
	void * p0
	char * t1
	int i2
PREINIT:
	short(*func)(void *, char *, int);
CODE:
	func   = INT2PTR(short(*)(void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2);
OUTPUT:
	RETVAL

float
nci_fpti( c_func, p0, t1, i2 )
	SV* c_func
	void * p0
	char * t1
	int i2
PREINIT:
	float(*func)(void *, char *, int);
CODE:
	func   = INT2PTR(float(*)(void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2);
OUTPUT:
	RETVAL

char *
nci_tpti( c_func, p0, t1, i2 )
	SV* c_func
	void * p0
	char * t1
	int i2
PREINIT:
	char *(*func)(void *, char *, int);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2);
OUTPUT:
	RETVAL

int
nci_ipti( c_func, p0, t1, i2 )
	SV* c_func
	void * p0
	char * t1
	int i2
PREINIT:
	int(*func)(void *, char *, int);
CODE:
	func   = INT2PTR(int(*)(void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2);
OUTPUT:
	RETVAL

void *
nci_pvti( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvti( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvti( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svti( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvti( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvti( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivti( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdti( c_func, d0, t1, i2 )
	SV* c_func
	double d0
	char * t1
	int i2
PREINIT:
	void *(*func)(double, char *, int);
CODE:
	func   = INT2PTR(void *(*)(double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2);
OUTPUT:
	RETVAL

void
nci_vdti( c_func, d0, t1, i2 )
	SV* c_func
	double d0
	char * t1
	int i2
PREINIT:
	void(*func)(double, char *, int);
CODE:
	func   = INT2PTR(void(*)(double, char *, int), SvIV(c_func) );
	(*func)(d0, t1, i2);

double
nci_ddti( c_func, d0, t1, i2 )
	SV* c_func
	double d0
	char * t1
	int i2
PREINIT:
	double(*func)(double, char *, int);
CODE:
	func   = INT2PTR(double(*)(double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2);
OUTPUT:
	RETVAL

short
nci_sdti( c_func, d0, t1, i2 )
	SV* c_func
	double d0
	char * t1
	int i2
PREINIT:
	short(*func)(double, char *, int);
CODE:
	func   = INT2PTR(short(*)(double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2);
OUTPUT:
	RETVAL

float
nci_fdti( c_func, d0, t1, i2 )
	SV* c_func
	double d0
	char * t1
	int i2
PREINIT:
	float(*func)(double, char *, int);
CODE:
	func   = INT2PTR(float(*)(double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2);
OUTPUT:
	RETVAL

char *
nci_tdti( c_func, d0, t1, i2 )
	SV* c_func
	double d0
	char * t1
	int i2
PREINIT:
	char *(*func)(double, char *, int);
CODE:
	func   = INT2PTR(char *(*)(double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2);
OUTPUT:
	RETVAL

int
nci_idti( c_func, d0, t1, i2 )
	SV* c_func
	double d0
	char * t1
	int i2
PREINIT:
	int(*func)(double, char *, int);
CODE:
	func   = INT2PTR(int(*)(double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2);
OUTPUT:
	RETVAL

void *
nci_psti( c_func, s0, t1, i2 )
	SV* c_func
	short s0
	char * t1
	int i2
PREINIT:
	void *(*func)(short, char *, int);
CODE:
	func   = INT2PTR(void *(*)(short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2);
OUTPUT:
	RETVAL

void
nci_vsti( c_func, s0, t1, i2 )
	SV* c_func
	short s0
	char * t1
	int i2
PREINIT:
	void(*func)(short, char *, int);
CODE:
	func   = INT2PTR(void(*)(short, char *, int), SvIV(c_func) );
	(*func)(s0, t1, i2);

double
nci_dsti( c_func, s0, t1, i2 )
	SV* c_func
	short s0
	char * t1
	int i2
PREINIT:
	double(*func)(short, char *, int);
CODE:
	func   = INT2PTR(double(*)(short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2);
OUTPUT:
	RETVAL

short
nci_ssti( c_func, s0, t1, i2 )
	SV* c_func
	short s0
	char * t1
	int i2
PREINIT:
	short(*func)(short, char *, int);
CODE:
	func   = INT2PTR(short(*)(short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2);
OUTPUT:
	RETVAL

float
nci_fsti( c_func, s0, t1, i2 )
	SV* c_func
	short s0
	char * t1
	int i2
PREINIT:
	float(*func)(short, char *, int);
CODE:
	func   = INT2PTR(float(*)(short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2);
OUTPUT:
	RETVAL

char *
nci_tsti( c_func, s0, t1, i2 )
	SV* c_func
	short s0
	char * t1
	int i2
PREINIT:
	char *(*func)(short, char *, int);
CODE:
	func   = INT2PTR(char *(*)(short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2);
OUTPUT:
	RETVAL

int
nci_isti( c_func, s0, t1, i2 )
	SV* c_func
	short s0
	char * t1
	int i2
PREINIT:
	int(*func)(short, char *, int);
CODE:
	func   = INT2PTR(int(*)(short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2);
OUTPUT:
	RETVAL

void *
nci_pfti( c_func, f0, t1, i2 )
	SV* c_func
	float f0
	char * t1
	int i2
PREINIT:
	void *(*func)(float, char *, int);
CODE:
	func   = INT2PTR(void *(*)(float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2);
OUTPUT:
	RETVAL

void
nci_vfti( c_func, f0, t1, i2 )
	SV* c_func
	float f0
	char * t1
	int i2
PREINIT:
	void(*func)(float, char *, int);
CODE:
	func   = INT2PTR(void(*)(float, char *, int), SvIV(c_func) );
	(*func)(f0, t1, i2);

double
nci_dfti( c_func, f0, t1, i2 )
	SV* c_func
	float f0
	char * t1
	int i2
PREINIT:
	double(*func)(float, char *, int);
CODE:
	func   = INT2PTR(double(*)(float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2);
OUTPUT:
	RETVAL

short
nci_sfti( c_func, f0, t1, i2 )
	SV* c_func
	float f0
	char * t1
	int i2
PREINIT:
	short(*func)(float, char *, int);
CODE:
	func   = INT2PTR(short(*)(float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2);
OUTPUT:
	RETVAL

float
nci_ffti( c_func, f0, t1, i2 )
	SV* c_func
	float f0
	char * t1
	int i2
PREINIT:
	float(*func)(float, char *, int);
CODE:
	func   = INT2PTR(float(*)(float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2);
OUTPUT:
	RETVAL

char *
nci_tfti( c_func, f0, t1, i2 )
	SV* c_func
	float f0
	char * t1
	int i2
PREINIT:
	char *(*func)(float, char *, int);
CODE:
	func   = INT2PTR(char *(*)(float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2);
OUTPUT:
	RETVAL

int
nci_ifti( c_func, f0, t1, i2 )
	SV* c_func
	float f0
	char * t1
	int i2
PREINIT:
	int(*func)(float, char *, int);
CODE:
	func   = INT2PTR(int(*)(float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2);
OUTPUT:
	RETVAL

void *
nci_ptti( c_func, t0, t1, i2 )
	SV* c_func
	char * t0
	char * t1
	int i2
PREINIT:
	void *(*func)(char *, char *, int);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2);
OUTPUT:
	RETVAL

void
nci_vtti( c_func, t0, t1, i2 )
	SV* c_func
	char * t0
	char * t1
	int i2
PREINIT:
	void(*func)(char *, char *, int);
CODE:
	func   = INT2PTR(void(*)(char *, char *, int), SvIV(c_func) );
	(*func)(t0, t1, i2);

double
nci_dtti( c_func, t0, t1, i2 )
	SV* c_func
	char * t0
	char * t1
	int i2
PREINIT:
	double(*func)(char *, char *, int);
CODE:
	func   = INT2PTR(double(*)(char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2);
OUTPUT:
	RETVAL

short
nci_stti( c_func, t0, t1, i2 )
	SV* c_func
	char * t0
	char * t1
	int i2
PREINIT:
	short(*func)(char *, char *, int);
CODE:
	func   = INT2PTR(short(*)(char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2);
OUTPUT:
	RETVAL

float
nci_ftti( c_func, t0, t1, i2 )
	SV* c_func
	char * t0
	char * t1
	int i2
PREINIT:
	float(*func)(char *, char *, int);
CODE:
	func   = INT2PTR(float(*)(char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2);
OUTPUT:
	RETVAL

char *
nci_ttti( c_func, t0, t1, i2 )
	SV* c_func
	char * t0
	char * t1
	int i2
PREINIT:
	char *(*func)(char *, char *, int);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2);
OUTPUT:
	RETVAL

int
nci_itti( c_func, t0, t1, i2 )
	SV* c_func
	char * t0
	char * t1
	int i2
PREINIT:
	int(*func)(char *, char *, int);
CODE:
	func   = INT2PTR(int(*)(char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2);
OUTPUT:
	RETVAL

void *
nci_piti( c_func, i0, t1, i2 )
	SV* c_func
	int i0
	char * t1
	int i2
PREINIT:
	void *(*func)(int, char *, int);
CODE:
	func   = INT2PTR(void *(*)(int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2);
OUTPUT:
	RETVAL

void
nci_viti( c_func, i0, t1, i2 )
	SV* c_func
	int i0
	char * t1
	int i2
PREINIT:
	void(*func)(int, char *, int);
CODE:
	func   = INT2PTR(void(*)(int, char *, int), SvIV(c_func) );
	(*func)(i0, t1, i2);

double
nci_diti( c_func, i0, t1, i2 )
	SV* c_func
	int i0
	char * t1
	int i2
PREINIT:
	double(*func)(int, char *, int);
CODE:
	func   = INT2PTR(double(*)(int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2);
OUTPUT:
	RETVAL

short
nci_siti( c_func, i0, t1, i2 )
	SV* c_func
	int i0
	char * t1
	int i2
PREINIT:
	short(*func)(int, char *, int);
CODE:
	func   = INT2PTR(short(*)(int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2);
OUTPUT:
	RETVAL

float
nci_fiti( c_func, i0, t1, i2 )
	SV* c_func
	int i0
	char * t1
	int i2
PREINIT:
	float(*func)(int, char *, int);
CODE:
	func   = INT2PTR(float(*)(int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2);
OUTPUT:
	RETVAL

char *
nci_titi( c_func, i0, t1, i2 )
	SV* c_func
	int i0
	char * t1
	int i2
PREINIT:
	char *(*func)(int, char *, int);
CODE:
	func   = INT2PTR(char *(*)(int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2);
OUTPUT:
	RETVAL

int
nci_iiti( c_func, i0, t1, i2 )
	SV* c_func
	int i0
	char * t1
	int i2
PREINIT:
	int(*func)(int, char *, int);
CODE:
	func   = INT2PTR(int(*)(int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2);
OUTPUT:
	RETVAL

void *
nci_ppii( c_func, p0, i1, i2 )
	SV* c_func
	void * p0
	int i1
	int i2
PREINIT:
	void *(*func)(void *, int, int);
CODE:
	func   = INT2PTR(void *(*)(void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2);
OUTPUT:
	RETVAL

void
nci_vpii( c_func, p0, i1, i2 )
	SV* c_func
	void * p0
	int i1
	int i2
PREINIT:
	void(*func)(void *, int, int);
CODE:
	func   = INT2PTR(void(*)(void *, int, int), SvIV(c_func) );
	(*func)(p0, i1, i2);

double
nci_dpii( c_func, p0, i1, i2 )
	SV* c_func
	void * p0
	int i1
	int i2
PREINIT:
	double(*func)(void *, int, int);
CODE:
	func   = INT2PTR(double(*)(void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2);
OUTPUT:
	RETVAL

short
nci_spii( c_func, p0, i1, i2 )
	SV* c_func
	void * p0
	int i1
	int i2
PREINIT:
	short(*func)(void *, int, int);
CODE:
	func   = INT2PTR(short(*)(void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2);
OUTPUT:
	RETVAL

float
nci_fpii( c_func, p0, i1, i2 )
	SV* c_func
	void * p0
	int i1
	int i2
PREINIT:
	float(*func)(void *, int, int);
CODE:
	func   = INT2PTR(float(*)(void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2);
OUTPUT:
	RETVAL

char *
nci_tpii( c_func, p0, i1, i2 )
	SV* c_func
	void * p0
	int i1
	int i2
PREINIT:
	char *(*func)(void *, int, int);
CODE:
	func   = INT2PTR(char *(*)(void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2);
OUTPUT:
	RETVAL

int
nci_ipii( c_func, p0, i1, i2 )
	SV* c_func
	void * p0
	int i1
	int i2
PREINIT:
	int(*func)(void *, int, int);
CODE:
	func   = INT2PTR(int(*)(void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2);
OUTPUT:
	RETVAL

void *
nci_pvii( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvii( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvii( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svii( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvii( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvii( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivii( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdii( c_func, d0, i1, i2 )
	SV* c_func
	double d0
	int i1
	int i2
PREINIT:
	void *(*func)(double, int, int);
CODE:
	func   = INT2PTR(void *(*)(double, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2);
OUTPUT:
	RETVAL

void
nci_vdii( c_func, d0, i1, i2 )
	SV* c_func
	double d0
	int i1
	int i2
PREINIT:
	void(*func)(double, int, int);
CODE:
	func   = INT2PTR(void(*)(double, int, int), SvIV(c_func) );
	(*func)(d0, i1, i2);

double
nci_ddii( c_func, d0, i1, i2 )
	SV* c_func
	double d0
	int i1
	int i2
PREINIT:
	double(*func)(double, int, int);
CODE:
	func   = INT2PTR(double(*)(double, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2);
OUTPUT:
	RETVAL

short
nci_sdii( c_func, d0, i1, i2 )
	SV* c_func
	double d0
	int i1
	int i2
PREINIT:
	short(*func)(double, int, int);
CODE:
	func   = INT2PTR(short(*)(double, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2);
OUTPUT:
	RETVAL

float
nci_fdii( c_func, d0, i1, i2 )
	SV* c_func
	double d0
	int i1
	int i2
PREINIT:
	float(*func)(double, int, int);
CODE:
	func   = INT2PTR(float(*)(double, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2);
OUTPUT:
	RETVAL

char *
nci_tdii( c_func, d0, i1, i2 )
	SV* c_func
	double d0
	int i1
	int i2
PREINIT:
	char *(*func)(double, int, int);
CODE:
	func   = INT2PTR(char *(*)(double, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2);
OUTPUT:
	RETVAL

int
nci_idii( c_func, d0, i1, i2 )
	SV* c_func
	double d0
	int i1
	int i2
PREINIT:
	int(*func)(double, int, int);
CODE:
	func   = INT2PTR(int(*)(double, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2);
OUTPUT:
	RETVAL

void *
nci_psii( c_func, s0, i1, i2 )
	SV* c_func
	short s0
	int i1
	int i2
PREINIT:
	void *(*func)(short, int, int);
CODE:
	func   = INT2PTR(void *(*)(short, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2);
OUTPUT:
	RETVAL

void
nci_vsii( c_func, s0, i1, i2 )
	SV* c_func
	short s0
	int i1
	int i2
PREINIT:
	void(*func)(short, int, int);
CODE:
	func   = INT2PTR(void(*)(short, int, int), SvIV(c_func) );
	(*func)(s0, i1, i2);

double
nci_dsii( c_func, s0, i1, i2 )
	SV* c_func
	short s0
	int i1
	int i2
PREINIT:
	double(*func)(short, int, int);
CODE:
	func   = INT2PTR(double(*)(short, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2);
OUTPUT:
	RETVAL

short
nci_ssii( c_func, s0, i1, i2 )
	SV* c_func
	short s0
	int i1
	int i2
PREINIT:
	short(*func)(short, int, int);
CODE:
	func   = INT2PTR(short(*)(short, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2);
OUTPUT:
	RETVAL

float
nci_fsii( c_func, s0, i1, i2 )
	SV* c_func
	short s0
	int i1
	int i2
PREINIT:
	float(*func)(short, int, int);
CODE:
	func   = INT2PTR(float(*)(short, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2);
OUTPUT:
	RETVAL

char *
nci_tsii( c_func, s0, i1, i2 )
	SV* c_func
	short s0
	int i1
	int i2
PREINIT:
	char *(*func)(short, int, int);
CODE:
	func   = INT2PTR(char *(*)(short, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2);
OUTPUT:
	RETVAL

int
nci_isii( c_func, s0, i1, i2 )
	SV* c_func
	short s0
	int i1
	int i2
PREINIT:
	int(*func)(short, int, int);
CODE:
	func   = INT2PTR(int(*)(short, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2);
OUTPUT:
	RETVAL

void *
nci_pfii( c_func, f0, i1, i2 )
	SV* c_func
	float f0
	int i1
	int i2
PREINIT:
	void *(*func)(float, int, int);
CODE:
	func   = INT2PTR(void *(*)(float, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2);
OUTPUT:
	RETVAL

void
nci_vfii( c_func, f0, i1, i2 )
	SV* c_func
	float f0
	int i1
	int i2
PREINIT:
	void(*func)(float, int, int);
CODE:
	func   = INT2PTR(void(*)(float, int, int), SvIV(c_func) );
	(*func)(f0, i1, i2);

double
nci_dfii( c_func, f0, i1, i2 )
	SV* c_func
	float f0
	int i1
	int i2
PREINIT:
	double(*func)(float, int, int);
CODE:
	func   = INT2PTR(double(*)(float, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2);
OUTPUT:
	RETVAL

short
nci_sfii( c_func, f0, i1, i2 )
	SV* c_func
	float f0
	int i1
	int i2
PREINIT:
	short(*func)(float, int, int);
CODE:
	func   = INT2PTR(short(*)(float, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2);
OUTPUT:
	RETVAL

float
nci_ffii( c_func, f0, i1, i2 )
	SV* c_func
	float f0
	int i1
	int i2
PREINIT:
	float(*func)(float, int, int);
CODE:
	func   = INT2PTR(float(*)(float, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2);
OUTPUT:
	RETVAL

char *
nci_tfii( c_func, f0, i1, i2 )
	SV* c_func
	float f0
	int i1
	int i2
PREINIT:
	char *(*func)(float, int, int);
CODE:
	func   = INT2PTR(char *(*)(float, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2);
OUTPUT:
	RETVAL

int
nci_ifii( c_func, f0, i1, i2 )
	SV* c_func
	float f0
	int i1
	int i2
PREINIT:
	int(*func)(float, int, int);
CODE:
	func   = INT2PTR(int(*)(float, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2);
OUTPUT:
	RETVAL

void *
nci_ptii( c_func, t0, i1, i2 )
	SV* c_func
	char * t0
	int i1
	int i2
PREINIT:
	void *(*func)(char *, int, int);
CODE:
	func   = INT2PTR(void *(*)(char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2);
OUTPUT:
	RETVAL

void
nci_vtii( c_func, t0, i1, i2 )
	SV* c_func
	char * t0
	int i1
	int i2
PREINIT:
	void(*func)(char *, int, int);
CODE:
	func   = INT2PTR(void(*)(char *, int, int), SvIV(c_func) );
	(*func)(t0, i1, i2);

double
nci_dtii( c_func, t0, i1, i2 )
	SV* c_func
	char * t0
	int i1
	int i2
PREINIT:
	double(*func)(char *, int, int);
CODE:
	func   = INT2PTR(double(*)(char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2);
OUTPUT:
	RETVAL

short
nci_stii( c_func, t0, i1, i2 )
	SV* c_func
	char * t0
	int i1
	int i2
PREINIT:
	short(*func)(char *, int, int);
CODE:
	func   = INT2PTR(short(*)(char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2);
OUTPUT:
	RETVAL

float
nci_ftii( c_func, t0, i1, i2 )
	SV* c_func
	char * t0
	int i1
	int i2
PREINIT:
	float(*func)(char *, int, int);
CODE:
	func   = INT2PTR(float(*)(char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2);
OUTPUT:
	RETVAL

char *
nci_ttii( c_func, t0, i1, i2 )
	SV* c_func
	char * t0
	int i1
	int i2
PREINIT:
	char *(*func)(char *, int, int);
CODE:
	func   = INT2PTR(char *(*)(char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2);
OUTPUT:
	RETVAL

int
nci_itii( c_func, t0, i1, i2 )
	SV* c_func
	char * t0
	int i1
	int i2
PREINIT:
	int(*func)(char *, int, int);
CODE:
	func   = INT2PTR(int(*)(char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2);
OUTPUT:
	RETVAL

void *
nci_piii( c_func, i0, i1, i2 )
	SV* c_func
	int i0
	int i1
	int i2
PREINIT:
	void *(*func)(int, int, int);
CODE:
	func   = INT2PTR(void *(*)(int, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2);
OUTPUT:
	RETVAL

void
nci_viii( c_func, i0, i1, i2 )
	SV* c_func
	int i0
	int i1
	int i2
PREINIT:
	void(*func)(int, int, int);
CODE:
	func   = INT2PTR(void(*)(int, int, int), SvIV(c_func) );
	(*func)(i0, i1, i2);

double
nci_diii( c_func, i0, i1, i2 )
	SV* c_func
	int i0
	int i1
	int i2
PREINIT:
	double(*func)(int, int, int);
CODE:
	func   = INT2PTR(double(*)(int, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2);
OUTPUT:
	RETVAL

short
nci_siii( c_func, i0, i1, i2 )
	SV* c_func
	int i0
	int i1
	int i2
PREINIT:
	short(*func)(int, int, int);
CODE:
	func   = INT2PTR(short(*)(int, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2);
OUTPUT:
	RETVAL

float
nci_fiii( c_func, i0, i1, i2 )
	SV* c_func
	int i0
	int i1
	int i2
PREINIT:
	float(*func)(int, int, int);
CODE:
	func   = INT2PTR(float(*)(int, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2);
OUTPUT:
	RETVAL

char *
nci_tiii( c_func, i0, i1, i2 )
	SV* c_func
	int i0
	int i1
	int i2
PREINIT:
	char *(*func)(int, int, int);
CODE:
	func   = INT2PTR(char *(*)(int, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2);
OUTPUT:
	RETVAL

int
nci_iiii( c_func, i0, i1, i2 )
	SV* c_func
	int i0
	int i1
	int i2
PREINIT:
	int(*func)(int, int, int);
CODE:
	func   = INT2PTR(int(*)(int, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2);
OUTPUT:
	RETVAL

void *
nci_ppppp( c_func, p0, p1, p2, p3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	void * p3
PREINIT:
	void *(*func)(void *, void *, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2, p3);
OUTPUT:
	RETVAL

void
nci_vpppp( c_func, p0, p1, p2, p3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	void * p3
PREINIT:
	void(*func)(void *, void *, void *, void *);
CODE:
	func   = INT2PTR(void(*)(void *, void *, void *, void *), SvIV(c_func) );
	(*func)(p0, p1, p2, p3);

double
nci_dpppp( c_func, p0, p1, p2, p3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	void * p3
PREINIT:
	double(*func)(void *, void *, void *, void *);
CODE:
	func   = INT2PTR(double(*)(void *, void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2, p3);
OUTPUT:
	RETVAL

short
nci_spppp( c_func, p0, p1, p2, p3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	void * p3
PREINIT:
	short(*func)(void *, void *, void *, void *);
CODE:
	func   = INT2PTR(short(*)(void *, void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2, p3);
OUTPUT:
	RETVAL

float
nci_fpppp( c_func, p0, p1, p2, p3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	void * p3
PREINIT:
	float(*func)(void *, void *, void *, void *);
CODE:
	func   = INT2PTR(float(*)(void *, void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2, p3);
OUTPUT:
	RETVAL

char *
nci_tpppp( c_func, p0, p1, p2, p3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	void * p3
PREINIT:
	char *(*func)(void *, void *, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2, p3);
OUTPUT:
	RETVAL

int
nci_ipppp( c_func, p0, p1, p2, p3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	void * p3
PREINIT:
	int(*func)(void *, void *, void *, void *);
CODE:
	func   = INT2PTR(int(*)(void *, void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2, p3);
OUTPUT:
	RETVAL

void *
nci_pvppp( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvppp( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvppp( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svppp( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvppp( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvppp( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivppp( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdppp( c_func, d0, p1, p2, p3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	void * p3
PREINIT:
	void *(*func)(double, void *, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(double, void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2, p3);
OUTPUT:
	RETVAL

void
nci_vdppp( c_func, d0, p1, p2, p3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	void * p3
PREINIT:
	void(*func)(double, void *, void *, void *);
CODE:
	func   = INT2PTR(void(*)(double, void *, void *, void *), SvIV(c_func) );
	(*func)(d0, p1, p2, p3);

double
nci_ddppp( c_func, d0, p1, p2, p3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	void * p3
PREINIT:
	double(*func)(double, void *, void *, void *);
CODE:
	func   = INT2PTR(double(*)(double, void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2, p3);
OUTPUT:
	RETVAL

short
nci_sdppp( c_func, d0, p1, p2, p3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	void * p3
PREINIT:
	short(*func)(double, void *, void *, void *);
CODE:
	func   = INT2PTR(short(*)(double, void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2, p3);
OUTPUT:
	RETVAL

float
nci_fdppp( c_func, d0, p1, p2, p3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	void * p3
PREINIT:
	float(*func)(double, void *, void *, void *);
CODE:
	func   = INT2PTR(float(*)(double, void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2, p3);
OUTPUT:
	RETVAL

char *
nci_tdppp( c_func, d0, p1, p2, p3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	void * p3
PREINIT:
	char *(*func)(double, void *, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(double, void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2, p3);
OUTPUT:
	RETVAL

int
nci_idppp( c_func, d0, p1, p2, p3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	void * p3
PREINIT:
	int(*func)(double, void *, void *, void *);
CODE:
	func   = INT2PTR(int(*)(double, void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2, p3);
OUTPUT:
	RETVAL

void *
nci_psppp( c_func, s0, p1, p2, p3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	void * p3
PREINIT:
	void *(*func)(short, void *, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(short, void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2, p3);
OUTPUT:
	RETVAL

void
nci_vsppp( c_func, s0, p1, p2, p3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	void * p3
PREINIT:
	void(*func)(short, void *, void *, void *);
CODE:
	func   = INT2PTR(void(*)(short, void *, void *, void *), SvIV(c_func) );
	(*func)(s0, p1, p2, p3);

double
nci_dsppp( c_func, s0, p1, p2, p3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	void * p3
PREINIT:
	double(*func)(short, void *, void *, void *);
CODE:
	func   = INT2PTR(double(*)(short, void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2, p3);
OUTPUT:
	RETVAL

short
nci_ssppp( c_func, s0, p1, p2, p3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	void * p3
PREINIT:
	short(*func)(short, void *, void *, void *);
CODE:
	func   = INT2PTR(short(*)(short, void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2, p3);
OUTPUT:
	RETVAL

float
nci_fsppp( c_func, s0, p1, p2, p3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	void * p3
PREINIT:
	float(*func)(short, void *, void *, void *);
CODE:
	func   = INT2PTR(float(*)(short, void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2, p3);
OUTPUT:
	RETVAL

char *
nci_tsppp( c_func, s0, p1, p2, p3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	void * p3
PREINIT:
	char *(*func)(short, void *, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(short, void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2, p3);
OUTPUT:
	RETVAL

int
nci_isppp( c_func, s0, p1, p2, p3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	void * p3
PREINIT:
	int(*func)(short, void *, void *, void *);
CODE:
	func   = INT2PTR(int(*)(short, void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2, p3);
OUTPUT:
	RETVAL

void *
nci_pfppp( c_func, f0, p1, p2, p3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	void * p3
PREINIT:
	void *(*func)(float, void *, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(float, void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2, p3);
OUTPUT:
	RETVAL

void
nci_vfppp( c_func, f0, p1, p2, p3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	void * p3
PREINIT:
	void(*func)(float, void *, void *, void *);
CODE:
	func   = INT2PTR(void(*)(float, void *, void *, void *), SvIV(c_func) );
	(*func)(f0, p1, p2, p3);

double
nci_dfppp( c_func, f0, p1, p2, p3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	void * p3
PREINIT:
	double(*func)(float, void *, void *, void *);
CODE:
	func   = INT2PTR(double(*)(float, void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2, p3);
OUTPUT:
	RETVAL

short
nci_sfppp( c_func, f0, p1, p2, p3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	void * p3
PREINIT:
	short(*func)(float, void *, void *, void *);
CODE:
	func   = INT2PTR(short(*)(float, void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2, p3);
OUTPUT:
	RETVAL

float
nci_ffppp( c_func, f0, p1, p2, p3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	void * p3
PREINIT:
	float(*func)(float, void *, void *, void *);
CODE:
	func   = INT2PTR(float(*)(float, void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2, p3);
OUTPUT:
	RETVAL

char *
nci_tfppp( c_func, f0, p1, p2, p3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	void * p3
PREINIT:
	char *(*func)(float, void *, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(float, void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2, p3);
OUTPUT:
	RETVAL

int
nci_ifppp( c_func, f0, p1, p2, p3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	void * p3
PREINIT:
	int(*func)(float, void *, void *, void *);
CODE:
	func   = INT2PTR(int(*)(float, void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2, p3);
OUTPUT:
	RETVAL

void *
nci_ptppp( c_func, t0, p1, p2, p3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	void * p3
PREINIT:
	void *(*func)(char *, void *, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2, p3);
OUTPUT:
	RETVAL

void
nci_vtppp( c_func, t0, p1, p2, p3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	void * p3
PREINIT:
	void(*func)(char *, void *, void *, void *);
CODE:
	func   = INT2PTR(void(*)(char *, void *, void *, void *), SvIV(c_func) );
	(*func)(t0, p1, p2, p3);

double
nci_dtppp( c_func, t0, p1, p2, p3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	void * p3
PREINIT:
	double(*func)(char *, void *, void *, void *);
CODE:
	func   = INT2PTR(double(*)(char *, void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2, p3);
OUTPUT:
	RETVAL

short
nci_stppp( c_func, t0, p1, p2, p3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	void * p3
PREINIT:
	short(*func)(char *, void *, void *, void *);
CODE:
	func   = INT2PTR(short(*)(char *, void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2, p3);
OUTPUT:
	RETVAL

float
nci_ftppp( c_func, t0, p1, p2, p3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	void * p3
PREINIT:
	float(*func)(char *, void *, void *, void *);
CODE:
	func   = INT2PTR(float(*)(char *, void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2, p3);
OUTPUT:
	RETVAL

char *
nci_ttppp( c_func, t0, p1, p2, p3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	void * p3
PREINIT:
	char *(*func)(char *, void *, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2, p3);
OUTPUT:
	RETVAL

int
nci_itppp( c_func, t0, p1, p2, p3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	void * p3
PREINIT:
	int(*func)(char *, void *, void *, void *);
CODE:
	func   = INT2PTR(int(*)(char *, void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2, p3);
OUTPUT:
	RETVAL

void *
nci_pippp( c_func, i0, p1, p2, p3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	void * p3
PREINIT:
	void *(*func)(int, void *, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(int, void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2, p3);
OUTPUT:
	RETVAL

void
nci_vippp( c_func, i0, p1, p2, p3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	void * p3
PREINIT:
	void(*func)(int, void *, void *, void *);
CODE:
	func   = INT2PTR(void(*)(int, void *, void *, void *), SvIV(c_func) );
	(*func)(i0, p1, p2, p3);

double
nci_dippp( c_func, i0, p1, p2, p3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	void * p3
PREINIT:
	double(*func)(int, void *, void *, void *);
CODE:
	func   = INT2PTR(double(*)(int, void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2, p3);
OUTPUT:
	RETVAL

short
nci_sippp( c_func, i0, p1, p2, p3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	void * p3
PREINIT:
	short(*func)(int, void *, void *, void *);
CODE:
	func   = INT2PTR(short(*)(int, void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2, p3);
OUTPUT:
	RETVAL

float
nci_fippp( c_func, i0, p1, p2, p3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	void * p3
PREINIT:
	float(*func)(int, void *, void *, void *);
CODE:
	func   = INT2PTR(float(*)(int, void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2, p3);
OUTPUT:
	RETVAL

char *
nci_tippp( c_func, i0, p1, p2, p3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	void * p3
PREINIT:
	char *(*func)(int, void *, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(int, void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2, p3);
OUTPUT:
	RETVAL

int
nci_iippp( c_func, i0, p1, p2, p3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	void * p3
PREINIT:
	int(*func)(int, void *, void *, void *);
CODE:
	func   = INT2PTR(int(*)(int, void *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2, p3);
OUTPUT:
	RETVAL

void *
nci_ppdpp( c_func, p0, d1, p2, p3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	void * p3
PREINIT:
	void *(*func)(void *, double, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2, p3);
OUTPUT:
	RETVAL

void
nci_vpdpp( c_func, p0, d1, p2, p3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	void * p3
PREINIT:
	void(*func)(void *, double, void *, void *);
CODE:
	func   = INT2PTR(void(*)(void *, double, void *, void *), SvIV(c_func) );
	(*func)(p0, d1, p2, p3);

double
nci_dpdpp( c_func, p0, d1, p2, p3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	void * p3
PREINIT:
	double(*func)(void *, double, void *, void *);
CODE:
	func   = INT2PTR(double(*)(void *, double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2, p3);
OUTPUT:
	RETVAL

short
nci_spdpp( c_func, p0, d1, p2, p3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	void * p3
PREINIT:
	short(*func)(void *, double, void *, void *);
CODE:
	func   = INT2PTR(short(*)(void *, double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2, p3);
OUTPUT:
	RETVAL

float
nci_fpdpp( c_func, p0, d1, p2, p3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	void * p3
PREINIT:
	float(*func)(void *, double, void *, void *);
CODE:
	func   = INT2PTR(float(*)(void *, double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2, p3);
OUTPUT:
	RETVAL

char *
nci_tpdpp( c_func, p0, d1, p2, p3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	void * p3
PREINIT:
	char *(*func)(void *, double, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2, p3);
OUTPUT:
	RETVAL

int
nci_ipdpp( c_func, p0, d1, p2, p3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	void * p3
PREINIT:
	int(*func)(void *, double, void *, void *);
CODE:
	func   = INT2PTR(int(*)(void *, double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2, p3);
OUTPUT:
	RETVAL

void *
nci_pvdpp( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvdpp( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvdpp( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svdpp( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvdpp( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvdpp( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivdpp( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pddpp( c_func, d0, d1, p2, p3 )
	SV* c_func
	double d0
	double d1
	void * p2
	void * p3
PREINIT:
	void *(*func)(double, double, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(double, double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2, p3);
OUTPUT:
	RETVAL

void
nci_vddpp( c_func, d0, d1, p2, p3 )
	SV* c_func
	double d0
	double d1
	void * p2
	void * p3
PREINIT:
	void(*func)(double, double, void *, void *);
CODE:
	func   = INT2PTR(void(*)(double, double, void *, void *), SvIV(c_func) );
	(*func)(d0, d1, p2, p3);

double
nci_dddpp( c_func, d0, d1, p2, p3 )
	SV* c_func
	double d0
	double d1
	void * p2
	void * p3
PREINIT:
	double(*func)(double, double, void *, void *);
CODE:
	func   = INT2PTR(double(*)(double, double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2, p3);
OUTPUT:
	RETVAL

short
nci_sddpp( c_func, d0, d1, p2, p3 )
	SV* c_func
	double d0
	double d1
	void * p2
	void * p3
PREINIT:
	short(*func)(double, double, void *, void *);
CODE:
	func   = INT2PTR(short(*)(double, double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2, p3);
OUTPUT:
	RETVAL

float
nci_fddpp( c_func, d0, d1, p2, p3 )
	SV* c_func
	double d0
	double d1
	void * p2
	void * p3
PREINIT:
	float(*func)(double, double, void *, void *);
CODE:
	func   = INT2PTR(float(*)(double, double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2, p3);
OUTPUT:
	RETVAL

char *
nci_tddpp( c_func, d0, d1, p2, p3 )
	SV* c_func
	double d0
	double d1
	void * p2
	void * p3
PREINIT:
	char *(*func)(double, double, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(double, double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2, p3);
OUTPUT:
	RETVAL

int
nci_iddpp( c_func, d0, d1, p2, p3 )
	SV* c_func
	double d0
	double d1
	void * p2
	void * p3
PREINIT:
	int(*func)(double, double, void *, void *);
CODE:
	func   = INT2PTR(int(*)(double, double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2, p3);
OUTPUT:
	RETVAL

void *
nci_psdpp( c_func, s0, d1, p2, p3 )
	SV* c_func
	short s0
	double d1
	void * p2
	void * p3
PREINIT:
	void *(*func)(short, double, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(short, double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2, p3);
OUTPUT:
	RETVAL

void
nci_vsdpp( c_func, s0, d1, p2, p3 )
	SV* c_func
	short s0
	double d1
	void * p2
	void * p3
PREINIT:
	void(*func)(short, double, void *, void *);
CODE:
	func   = INT2PTR(void(*)(short, double, void *, void *), SvIV(c_func) );
	(*func)(s0, d1, p2, p3);

double
nci_dsdpp( c_func, s0, d1, p2, p3 )
	SV* c_func
	short s0
	double d1
	void * p2
	void * p3
PREINIT:
	double(*func)(short, double, void *, void *);
CODE:
	func   = INT2PTR(double(*)(short, double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2, p3);
OUTPUT:
	RETVAL

short
nci_ssdpp( c_func, s0, d1, p2, p3 )
	SV* c_func
	short s0
	double d1
	void * p2
	void * p3
PREINIT:
	short(*func)(short, double, void *, void *);
CODE:
	func   = INT2PTR(short(*)(short, double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2, p3);
OUTPUT:
	RETVAL

float
nci_fsdpp( c_func, s0, d1, p2, p3 )
	SV* c_func
	short s0
	double d1
	void * p2
	void * p3
PREINIT:
	float(*func)(short, double, void *, void *);
CODE:
	func   = INT2PTR(float(*)(short, double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2, p3);
OUTPUT:
	RETVAL

char *
nci_tsdpp( c_func, s0, d1, p2, p3 )
	SV* c_func
	short s0
	double d1
	void * p2
	void * p3
PREINIT:
	char *(*func)(short, double, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(short, double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2, p3);
OUTPUT:
	RETVAL

int
nci_isdpp( c_func, s0, d1, p2, p3 )
	SV* c_func
	short s0
	double d1
	void * p2
	void * p3
PREINIT:
	int(*func)(short, double, void *, void *);
CODE:
	func   = INT2PTR(int(*)(short, double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2, p3);
OUTPUT:
	RETVAL

void *
nci_pfdpp( c_func, f0, d1, p2, p3 )
	SV* c_func
	float f0
	double d1
	void * p2
	void * p3
PREINIT:
	void *(*func)(float, double, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(float, double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2, p3);
OUTPUT:
	RETVAL

void
nci_vfdpp( c_func, f0, d1, p2, p3 )
	SV* c_func
	float f0
	double d1
	void * p2
	void * p3
PREINIT:
	void(*func)(float, double, void *, void *);
CODE:
	func   = INT2PTR(void(*)(float, double, void *, void *), SvIV(c_func) );
	(*func)(f0, d1, p2, p3);

double
nci_dfdpp( c_func, f0, d1, p2, p3 )
	SV* c_func
	float f0
	double d1
	void * p2
	void * p3
PREINIT:
	double(*func)(float, double, void *, void *);
CODE:
	func   = INT2PTR(double(*)(float, double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2, p3);
OUTPUT:
	RETVAL

short
nci_sfdpp( c_func, f0, d1, p2, p3 )
	SV* c_func
	float f0
	double d1
	void * p2
	void * p3
PREINIT:
	short(*func)(float, double, void *, void *);
CODE:
	func   = INT2PTR(short(*)(float, double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2, p3);
OUTPUT:
	RETVAL

float
nci_ffdpp( c_func, f0, d1, p2, p3 )
	SV* c_func
	float f0
	double d1
	void * p2
	void * p3
PREINIT:
	float(*func)(float, double, void *, void *);
CODE:
	func   = INT2PTR(float(*)(float, double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2, p3);
OUTPUT:
	RETVAL

char *
nci_tfdpp( c_func, f0, d1, p2, p3 )
	SV* c_func
	float f0
	double d1
	void * p2
	void * p3
PREINIT:
	char *(*func)(float, double, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(float, double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2, p3);
OUTPUT:
	RETVAL

int
nci_ifdpp( c_func, f0, d1, p2, p3 )
	SV* c_func
	float f0
	double d1
	void * p2
	void * p3
PREINIT:
	int(*func)(float, double, void *, void *);
CODE:
	func   = INT2PTR(int(*)(float, double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2, p3);
OUTPUT:
	RETVAL

void *
nci_ptdpp( c_func, t0, d1, p2, p3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	void * p3
PREINIT:
	void *(*func)(char *, double, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2, p3);
OUTPUT:
	RETVAL

void
nci_vtdpp( c_func, t0, d1, p2, p3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	void * p3
PREINIT:
	void(*func)(char *, double, void *, void *);
CODE:
	func   = INT2PTR(void(*)(char *, double, void *, void *), SvIV(c_func) );
	(*func)(t0, d1, p2, p3);

double
nci_dtdpp( c_func, t0, d1, p2, p3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	void * p3
PREINIT:
	double(*func)(char *, double, void *, void *);
CODE:
	func   = INT2PTR(double(*)(char *, double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2, p3);
OUTPUT:
	RETVAL

short
nci_stdpp( c_func, t0, d1, p2, p3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	void * p3
PREINIT:
	short(*func)(char *, double, void *, void *);
CODE:
	func   = INT2PTR(short(*)(char *, double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2, p3);
OUTPUT:
	RETVAL

float
nci_ftdpp( c_func, t0, d1, p2, p3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	void * p3
PREINIT:
	float(*func)(char *, double, void *, void *);
CODE:
	func   = INT2PTR(float(*)(char *, double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2, p3);
OUTPUT:
	RETVAL

char *
nci_ttdpp( c_func, t0, d1, p2, p3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	void * p3
PREINIT:
	char *(*func)(char *, double, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2, p3);
OUTPUT:
	RETVAL

int
nci_itdpp( c_func, t0, d1, p2, p3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	void * p3
PREINIT:
	int(*func)(char *, double, void *, void *);
CODE:
	func   = INT2PTR(int(*)(char *, double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2, p3);
OUTPUT:
	RETVAL

void *
nci_pidpp( c_func, i0, d1, p2, p3 )
	SV* c_func
	int i0
	double d1
	void * p2
	void * p3
PREINIT:
	void *(*func)(int, double, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(int, double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2, p3);
OUTPUT:
	RETVAL

void
nci_vidpp( c_func, i0, d1, p2, p3 )
	SV* c_func
	int i0
	double d1
	void * p2
	void * p3
PREINIT:
	void(*func)(int, double, void *, void *);
CODE:
	func   = INT2PTR(void(*)(int, double, void *, void *), SvIV(c_func) );
	(*func)(i0, d1, p2, p3);

double
nci_didpp( c_func, i0, d1, p2, p3 )
	SV* c_func
	int i0
	double d1
	void * p2
	void * p3
PREINIT:
	double(*func)(int, double, void *, void *);
CODE:
	func   = INT2PTR(double(*)(int, double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2, p3);
OUTPUT:
	RETVAL

short
nci_sidpp( c_func, i0, d1, p2, p3 )
	SV* c_func
	int i0
	double d1
	void * p2
	void * p3
PREINIT:
	short(*func)(int, double, void *, void *);
CODE:
	func   = INT2PTR(short(*)(int, double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2, p3);
OUTPUT:
	RETVAL

float
nci_fidpp( c_func, i0, d1, p2, p3 )
	SV* c_func
	int i0
	double d1
	void * p2
	void * p3
PREINIT:
	float(*func)(int, double, void *, void *);
CODE:
	func   = INT2PTR(float(*)(int, double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2, p3);
OUTPUT:
	RETVAL

char *
nci_tidpp( c_func, i0, d1, p2, p3 )
	SV* c_func
	int i0
	double d1
	void * p2
	void * p3
PREINIT:
	char *(*func)(int, double, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(int, double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2, p3);
OUTPUT:
	RETVAL

int
nci_iidpp( c_func, i0, d1, p2, p3 )
	SV* c_func
	int i0
	double d1
	void * p2
	void * p3
PREINIT:
	int(*func)(int, double, void *, void *);
CODE:
	func   = INT2PTR(int(*)(int, double, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2, p3);
OUTPUT:
	RETVAL

void *
nci_ppspp( c_func, p0, s1, p2, p3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	void * p3
PREINIT:
	void *(*func)(void *, short, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2, p3);
OUTPUT:
	RETVAL

void
nci_vpspp( c_func, p0, s1, p2, p3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	void * p3
PREINIT:
	void(*func)(void *, short, void *, void *);
CODE:
	func   = INT2PTR(void(*)(void *, short, void *, void *), SvIV(c_func) );
	(*func)(p0, s1, p2, p3);

double
nci_dpspp( c_func, p0, s1, p2, p3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	void * p3
PREINIT:
	double(*func)(void *, short, void *, void *);
CODE:
	func   = INT2PTR(double(*)(void *, short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2, p3);
OUTPUT:
	RETVAL

short
nci_spspp( c_func, p0, s1, p2, p3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	void * p3
PREINIT:
	short(*func)(void *, short, void *, void *);
CODE:
	func   = INT2PTR(short(*)(void *, short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2, p3);
OUTPUT:
	RETVAL

float
nci_fpspp( c_func, p0, s1, p2, p3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	void * p3
PREINIT:
	float(*func)(void *, short, void *, void *);
CODE:
	func   = INT2PTR(float(*)(void *, short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2, p3);
OUTPUT:
	RETVAL

char *
nci_tpspp( c_func, p0, s1, p2, p3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	void * p3
PREINIT:
	char *(*func)(void *, short, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2, p3);
OUTPUT:
	RETVAL

int
nci_ipspp( c_func, p0, s1, p2, p3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	void * p3
PREINIT:
	int(*func)(void *, short, void *, void *);
CODE:
	func   = INT2PTR(int(*)(void *, short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2, p3);
OUTPUT:
	RETVAL

void *
nci_pvspp( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvspp( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvspp( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svspp( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvspp( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvspp( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivspp( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdspp( c_func, d0, s1, p2, p3 )
	SV* c_func
	double d0
	short s1
	void * p2
	void * p3
PREINIT:
	void *(*func)(double, short, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(double, short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2, p3);
OUTPUT:
	RETVAL

void
nci_vdspp( c_func, d0, s1, p2, p3 )
	SV* c_func
	double d0
	short s1
	void * p2
	void * p3
PREINIT:
	void(*func)(double, short, void *, void *);
CODE:
	func   = INT2PTR(void(*)(double, short, void *, void *), SvIV(c_func) );
	(*func)(d0, s1, p2, p3);

double
nci_ddspp( c_func, d0, s1, p2, p3 )
	SV* c_func
	double d0
	short s1
	void * p2
	void * p3
PREINIT:
	double(*func)(double, short, void *, void *);
CODE:
	func   = INT2PTR(double(*)(double, short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2, p3);
OUTPUT:
	RETVAL

short
nci_sdspp( c_func, d0, s1, p2, p3 )
	SV* c_func
	double d0
	short s1
	void * p2
	void * p3
PREINIT:
	short(*func)(double, short, void *, void *);
CODE:
	func   = INT2PTR(short(*)(double, short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2, p3);
OUTPUT:
	RETVAL

float
nci_fdspp( c_func, d0, s1, p2, p3 )
	SV* c_func
	double d0
	short s1
	void * p2
	void * p3
PREINIT:
	float(*func)(double, short, void *, void *);
CODE:
	func   = INT2PTR(float(*)(double, short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2, p3);
OUTPUT:
	RETVAL

char *
nci_tdspp( c_func, d0, s1, p2, p3 )
	SV* c_func
	double d0
	short s1
	void * p2
	void * p3
PREINIT:
	char *(*func)(double, short, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(double, short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2, p3);
OUTPUT:
	RETVAL

int
nci_idspp( c_func, d0, s1, p2, p3 )
	SV* c_func
	double d0
	short s1
	void * p2
	void * p3
PREINIT:
	int(*func)(double, short, void *, void *);
CODE:
	func   = INT2PTR(int(*)(double, short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2, p3);
OUTPUT:
	RETVAL

void *
nci_psspp( c_func, s0, s1, p2, p3 )
	SV* c_func
	short s0
	short s1
	void * p2
	void * p3
PREINIT:
	void *(*func)(short, short, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(short, short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2, p3);
OUTPUT:
	RETVAL

void
nci_vsspp( c_func, s0, s1, p2, p3 )
	SV* c_func
	short s0
	short s1
	void * p2
	void * p3
PREINIT:
	void(*func)(short, short, void *, void *);
CODE:
	func   = INT2PTR(void(*)(short, short, void *, void *), SvIV(c_func) );
	(*func)(s0, s1, p2, p3);

double
nci_dsspp( c_func, s0, s1, p2, p3 )
	SV* c_func
	short s0
	short s1
	void * p2
	void * p3
PREINIT:
	double(*func)(short, short, void *, void *);
CODE:
	func   = INT2PTR(double(*)(short, short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2, p3);
OUTPUT:
	RETVAL

short
nci_ssspp( c_func, s0, s1, p2, p3 )
	SV* c_func
	short s0
	short s1
	void * p2
	void * p3
PREINIT:
	short(*func)(short, short, void *, void *);
CODE:
	func   = INT2PTR(short(*)(short, short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2, p3);
OUTPUT:
	RETVAL

float
nci_fsspp( c_func, s0, s1, p2, p3 )
	SV* c_func
	short s0
	short s1
	void * p2
	void * p3
PREINIT:
	float(*func)(short, short, void *, void *);
CODE:
	func   = INT2PTR(float(*)(short, short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2, p3);
OUTPUT:
	RETVAL

char *
nci_tsspp( c_func, s0, s1, p2, p3 )
	SV* c_func
	short s0
	short s1
	void * p2
	void * p3
PREINIT:
	char *(*func)(short, short, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(short, short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2, p3);
OUTPUT:
	RETVAL

int
nci_isspp( c_func, s0, s1, p2, p3 )
	SV* c_func
	short s0
	short s1
	void * p2
	void * p3
PREINIT:
	int(*func)(short, short, void *, void *);
CODE:
	func   = INT2PTR(int(*)(short, short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2, p3);
OUTPUT:
	RETVAL

void *
nci_pfspp( c_func, f0, s1, p2, p3 )
	SV* c_func
	float f0
	short s1
	void * p2
	void * p3
PREINIT:
	void *(*func)(float, short, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(float, short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2, p3);
OUTPUT:
	RETVAL

void
nci_vfspp( c_func, f0, s1, p2, p3 )
	SV* c_func
	float f0
	short s1
	void * p2
	void * p3
PREINIT:
	void(*func)(float, short, void *, void *);
CODE:
	func   = INT2PTR(void(*)(float, short, void *, void *), SvIV(c_func) );
	(*func)(f0, s1, p2, p3);

double
nci_dfspp( c_func, f0, s1, p2, p3 )
	SV* c_func
	float f0
	short s1
	void * p2
	void * p3
PREINIT:
	double(*func)(float, short, void *, void *);
CODE:
	func   = INT2PTR(double(*)(float, short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2, p3);
OUTPUT:
	RETVAL

short
nci_sfspp( c_func, f0, s1, p2, p3 )
	SV* c_func
	float f0
	short s1
	void * p2
	void * p3
PREINIT:
	short(*func)(float, short, void *, void *);
CODE:
	func   = INT2PTR(short(*)(float, short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2, p3);
OUTPUT:
	RETVAL

float
nci_ffspp( c_func, f0, s1, p2, p3 )
	SV* c_func
	float f0
	short s1
	void * p2
	void * p3
PREINIT:
	float(*func)(float, short, void *, void *);
CODE:
	func   = INT2PTR(float(*)(float, short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2, p3);
OUTPUT:
	RETVAL

char *
nci_tfspp( c_func, f0, s1, p2, p3 )
	SV* c_func
	float f0
	short s1
	void * p2
	void * p3
PREINIT:
	char *(*func)(float, short, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(float, short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2, p3);
OUTPUT:
	RETVAL

int
nci_ifspp( c_func, f0, s1, p2, p3 )
	SV* c_func
	float f0
	short s1
	void * p2
	void * p3
PREINIT:
	int(*func)(float, short, void *, void *);
CODE:
	func   = INT2PTR(int(*)(float, short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2, p3);
OUTPUT:
	RETVAL

void *
nci_ptspp( c_func, t0, s1, p2, p3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	void * p3
PREINIT:
	void *(*func)(char *, short, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2, p3);
OUTPUT:
	RETVAL

void
nci_vtspp( c_func, t0, s1, p2, p3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	void * p3
PREINIT:
	void(*func)(char *, short, void *, void *);
CODE:
	func   = INT2PTR(void(*)(char *, short, void *, void *), SvIV(c_func) );
	(*func)(t0, s1, p2, p3);

double
nci_dtspp( c_func, t0, s1, p2, p3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	void * p3
PREINIT:
	double(*func)(char *, short, void *, void *);
CODE:
	func   = INT2PTR(double(*)(char *, short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2, p3);
OUTPUT:
	RETVAL

short
nci_stspp( c_func, t0, s1, p2, p3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	void * p3
PREINIT:
	short(*func)(char *, short, void *, void *);
CODE:
	func   = INT2PTR(short(*)(char *, short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2, p3);
OUTPUT:
	RETVAL

float
nci_ftspp( c_func, t0, s1, p2, p3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	void * p3
PREINIT:
	float(*func)(char *, short, void *, void *);
CODE:
	func   = INT2PTR(float(*)(char *, short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2, p3);
OUTPUT:
	RETVAL

char *
nci_ttspp( c_func, t0, s1, p2, p3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	void * p3
PREINIT:
	char *(*func)(char *, short, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2, p3);
OUTPUT:
	RETVAL

int
nci_itspp( c_func, t0, s1, p2, p3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	void * p3
PREINIT:
	int(*func)(char *, short, void *, void *);
CODE:
	func   = INT2PTR(int(*)(char *, short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2, p3);
OUTPUT:
	RETVAL

void *
nci_pispp( c_func, i0, s1, p2, p3 )
	SV* c_func
	int i0
	short s1
	void * p2
	void * p3
PREINIT:
	void *(*func)(int, short, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(int, short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2, p3);
OUTPUT:
	RETVAL

void
nci_vispp( c_func, i0, s1, p2, p3 )
	SV* c_func
	int i0
	short s1
	void * p2
	void * p3
PREINIT:
	void(*func)(int, short, void *, void *);
CODE:
	func   = INT2PTR(void(*)(int, short, void *, void *), SvIV(c_func) );
	(*func)(i0, s1, p2, p3);

double
nci_dispp( c_func, i0, s1, p2, p3 )
	SV* c_func
	int i0
	short s1
	void * p2
	void * p3
PREINIT:
	double(*func)(int, short, void *, void *);
CODE:
	func   = INT2PTR(double(*)(int, short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2, p3);
OUTPUT:
	RETVAL

short
nci_sispp( c_func, i0, s1, p2, p3 )
	SV* c_func
	int i0
	short s1
	void * p2
	void * p3
PREINIT:
	short(*func)(int, short, void *, void *);
CODE:
	func   = INT2PTR(short(*)(int, short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2, p3);
OUTPUT:
	RETVAL

float
nci_fispp( c_func, i0, s1, p2, p3 )
	SV* c_func
	int i0
	short s1
	void * p2
	void * p3
PREINIT:
	float(*func)(int, short, void *, void *);
CODE:
	func   = INT2PTR(float(*)(int, short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2, p3);
OUTPUT:
	RETVAL

char *
nci_tispp( c_func, i0, s1, p2, p3 )
	SV* c_func
	int i0
	short s1
	void * p2
	void * p3
PREINIT:
	char *(*func)(int, short, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(int, short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2, p3);
OUTPUT:
	RETVAL

int
nci_iispp( c_func, i0, s1, p2, p3 )
	SV* c_func
	int i0
	short s1
	void * p2
	void * p3
PREINIT:
	int(*func)(int, short, void *, void *);
CODE:
	func   = INT2PTR(int(*)(int, short, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2, p3);
OUTPUT:
	RETVAL

void *
nci_ppfpp( c_func, p0, f1, p2, p3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	void * p3
PREINIT:
	void *(*func)(void *, float, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2, p3);
OUTPUT:
	RETVAL

void
nci_vpfpp( c_func, p0, f1, p2, p3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	void * p3
PREINIT:
	void(*func)(void *, float, void *, void *);
CODE:
	func   = INT2PTR(void(*)(void *, float, void *, void *), SvIV(c_func) );
	(*func)(p0, f1, p2, p3);

double
nci_dpfpp( c_func, p0, f1, p2, p3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	void * p3
PREINIT:
	double(*func)(void *, float, void *, void *);
CODE:
	func   = INT2PTR(double(*)(void *, float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2, p3);
OUTPUT:
	RETVAL

short
nci_spfpp( c_func, p0, f1, p2, p3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	void * p3
PREINIT:
	short(*func)(void *, float, void *, void *);
CODE:
	func   = INT2PTR(short(*)(void *, float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2, p3);
OUTPUT:
	RETVAL

float
nci_fpfpp( c_func, p0, f1, p2, p3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	void * p3
PREINIT:
	float(*func)(void *, float, void *, void *);
CODE:
	func   = INT2PTR(float(*)(void *, float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2, p3);
OUTPUT:
	RETVAL

char *
nci_tpfpp( c_func, p0, f1, p2, p3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	void * p3
PREINIT:
	char *(*func)(void *, float, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2, p3);
OUTPUT:
	RETVAL

int
nci_ipfpp( c_func, p0, f1, p2, p3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	void * p3
PREINIT:
	int(*func)(void *, float, void *, void *);
CODE:
	func   = INT2PTR(int(*)(void *, float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2, p3);
OUTPUT:
	RETVAL

void *
nci_pvfpp( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvfpp( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvfpp( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svfpp( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvfpp( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvfpp( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivfpp( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdfpp( c_func, d0, f1, p2, p3 )
	SV* c_func
	double d0
	float f1
	void * p2
	void * p3
PREINIT:
	void *(*func)(double, float, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(double, float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2, p3);
OUTPUT:
	RETVAL

void
nci_vdfpp( c_func, d0, f1, p2, p3 )
	SV* c_func
	double d0
	float f1
	void * p2
	void * p3
PREINIT:
	void(*func)(double, float, void *, void *);
CODE:
	func   = INT2PTR(void(*)(double, float, void *, void *), SvIV(c_func) );
	(*func)(d0, f1, p2, p3);

double
nci_ddfpp( c_func, d0, f1, p2, p3 )
	SV* c_func
	double d0
	float f1
	void * p2
	void * p3
PREINIT:
	double(*func)(double, float, void *, void *);
CODE:
	func   = INT2PTR(double(*)(double, float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2, p3);
OUTPUT:
	RETVAL

short
nci_sdfpp( c_func, d0, f1, p2, p3 )
	SV* c_func
	double d0
	float f1
	void * p2
	void * p3
PREINIT:
	short(*func)(double, float, void *, void *);
CODE:
	func   = INT2PTR(short(*)(double, float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2, p3);
OUTPUT:
	RETVAL

float
nci_fdfpp( c_func, d0, f1, p2, p3 )
	SV* c_func
	double d0
	float f1
	void * p2
	void * p3
PREINIT:
	float(*func)(double, float, void *, void *);
CODE:
	func   = INT2PTR(float(*)(double, float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2, p3);
OUTPUT:
	RETVAL

char *
nci_tdfpp( c_func, d0, f1, p2, p3 )
	SV* c_func
	double d0
	float f1
	void * p2
	void * p3
PREINIT:
	char *(*func)(double, float, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(double, float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2, p3);
OUTPUT:
	RETVAL

int
nci_idfpp( c_func, d0, f1, p2, p3 )
	SV* c_func
	double d0
	float f1
	void * p2
	void * p3
PREINIT:
	int(*func)(double, float, void *, void *);
CODE:
	func   = INT2PTR(int(*)(double, float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2, p3);
OUTPUT:
	RETVAL

void *
nci_psfpp( c_func, s0, f1, p2, p3 )
	SV* c_func
	short s0
	float f1
	void * p2
	void * p3
PREINIT:
	void *(*func)(short, float, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(short, float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2, p3);
OUTPUT:
	RETVAL

void
nci_vsfpp( c_func, s0, f1, p2, p3 )
	SV* c_func
	short s0
	float f1
	void * p2
	void * p3
PREINIT:
	void(*func)(short, float, void *, void *);
CODE:
	func   = INT2PTR(void(*)(short, float, void *, void *), SvIV(c_func) );
	(*func)(s0, f1, p2, p3);

double
nci_dsfpp( c_func, s0, f1, p2, p3 )
	SV* c_func
	short s0
	float f1
	void * p2
	void * p3
PREINIT:
	double(*func)(short, float, void *, void *);
CODE:
	func   = INT2PTR(double(*)(short, float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2, p3);
OUTPUT:
	RETVAL

short
nci_ssfpp( c_func, s0, f1, p2, p3 )
	SV* c_func
	short s0
	float f1
	void * p2
	void * p3
PREINIT:
	short(*func)(short, float, void *, void *);
CODE:
	func   = INT2PTR(short(*)(short, float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2, p3);
OUTPUT:
	RETVAL

float
nci_fsfpp( c_func, s0, f1, p2, p3 )
	SV* c_func
	short s0
	float f1
	void * p2
	void * p3
PREINIT:
	float(*func)(short, float, void *, void *);
CODE:
	func   = INT2PTR(float(*)(short, float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2, p3);
OUTPUT:
	RETVAL

char *
nci_tsfpp( c_func, s0, f1, p2, p3 )
	SV* c_func
	short s0
	float f1
	void * p2
	void * p3
PREINIT:
	char *(*func)(short, float, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(short, float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2, p3);
OUTPUT:
	RETVAL

int
nci_isfpp( c_func, s0, f1, p2, p3 )
	SV* c_func
	short s0
	float f1
	void * p2
	void * p3
PREINIT:
	int(*func)(short, float, void *, void *);
CODE:
	func   = INT2PTR(int(*)(short, float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2, p3);
OUTPUT:
	RETVAL

void *
nci_pffpp( c_func, f0, f1, p2, p3 )
	SV* c_func
	float f0
	float f1
	void * p2
	void * p3
PREINIT:
	void *(*func)(float, float, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(float, float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2, p3);
OUTPUT:
	RETVAL

void
nci_vffpp( c_func, f0, f1, p2, p3 )
	SV* c_func
	float f0
	float f1
	void * p2
	void * p3
PREINIT:
	void(*func)(float, float, void *, void *);
CODE:
	func   = INT2PTR(void(*)(float, float, void *, void *), SvIV(c_func) );
	(*func)(f0, f1, p2, p3);

double
nci_dffpp( c_func, f0, f1, p2, p3 )
	SV* c_func
	float f0
	float f1
	void * p2
	void * p3
PREINIT:
	double(*func)(float, float, void *, void *);
CODE:
	func   = INT2PTR(double(*)(float, float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2, p3);
OUTPUT:
	RETVAL

short
nci_sffpp( c_func, f0, f1, p2, p3 )
	SV* c_func
	float f0
	float f1
	void * p2
	void * p3
PREINIT:
	short(*func)(float, float, void *, void *);
CODE:
	func   = INT2PTR(short(*)(float, float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2, p3);
OUTPUT:
	RETVAL

float
nci_fffpp( c_func, f0, f1, p2, p3 )
	SV* c_func
	float f0
	float f1
	void * p2
	void * p3
PREINIT:
	float(*func)(float, float, void *, void *);
CODE:
	func   = INT2PTR(float(*)(float, float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2, p3);
OUTPUT:
	RETVAL

char *
nci_tffpp( c_func, f0, f1, p2, p3 )
	SV* c_func
	float f0
	float f1
	void * p2
	void * p3
PREINIT:
	char *(*func)(float, float, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(float, float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2, p3);
OUTPUT:
	RETVAL

int
nci_iffpp( c_func, f0, f1, p2, p3 )
	SV* c_func
	float f0
	float f1
	void * p2
	void * p3
PREINIT:
	int(*func)(float, float, void *, void *);
CODE:
	func   = INT2PTR(int(*)(float, float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2, p3);
OUTPUT:
	RETVAL

void *
nci_ptfpp( c_func, t0, f1, p2, p3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	void * p3
PREINIT:
	void *(*func)(char *, float, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2, p3);
OUTPUT:
	RETVAL

void
nci_vtfpp( c_func, t0, f1, p2, p3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	void * p3
PREINIT:
	void(*func)(char *, float, void *, void *);
CODE:
	func   = INT2PTR(void(*)(char *, float, void *, void *), SvIV(c_func) );
	(*func)(t0, f1, p2, p3);

double
nci_dtfpp( c_func, t0, f1, p2, p3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	void * p3
PREINIT:
	double(*func)(char *, float, void *, void *);
CODE:
	func   = INT2PTR(double(*)(char *, float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2, p3);
OUTPUT:
	RETVAL

short
nci_stfpp( c_func, t0, f1, p2, p3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	void * p3
PREINIT:
	short(*func)(char *, float, void *, void *);
CODE:
	func   = INT2PTR(short(*)(char *, float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2, p3);
OUTPUT:
	RETVAL

float
nci_ftfpp( c_func, t0, f1, p2, p3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	void * p3
PREINIT:
	float(*func)(char *, float, void *, void *);
CODE:
	func   = INT2PTR(float(*)(char *, float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2, p3);
OUTPUT:
	RETVAL

char *
nci_ttfpp( c_func, t0, f1, p2, p3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	void * p3
PREINIT:
	char *(*func)(char *, float, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2, p3);
OUTPUT:
	RETVAL

int
nci_itfpp( c_func, t0, f1, p2, p3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	void * p3
PREINIT:
	int(*func)(char *, float, void *, void *);
CODE:
	func   = INT2PTR(int(*)(char *, float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2, p3);
OUTPUT:
	RETVAL

void *
nci_pifpp( c_func, i0, f1, p2, p3 )
	SV* c_func
	int i0
	float f1
	void * p2
	void * p3
PREINIT:
	void *(*func)(int, float, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(int, float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2, p3);
OUTPUT:
	RETVAL

void
nci_vifpp( c_func, i0, f1, p2, p3 )
	SV* c_func
	int i0
	float f1
	void * p2
	void * p3
PREINIT:
	void(*func)(int, float, void *, void *);
CODE:
	func   = INT2PTR(void(*)(int, float, void *, void *), SvIV(c_func) );
	(*func)(i0, f1, p2, p3);

double
nci_difpp( c_func, i0, f1, p2, p3 )
	SV* c_func
	int i0
	float f1
	void * p2
	void * p3
PREINIT:
	double(*func)(int, float, void *, void *);
CODE:
	func   = INT2PTR(double(*)(int, float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2, p3);
OUTPUT:
	RETVAL

short
nci_sifpp( c_func, i0, f1, p2, p3 )
	SV* c_func
	int i0
	float f1
	void * p2
	void * p3
PREINIT:
	short(*func)(int, float, void *, void *);
CODE:
	func   = INT2PTR(short(*)(int, float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2, p3);
OUTPUT:
	RETVAL

float
nci_fifpp( c_func, i0, f1, p2, p3 )
	SV* c_func
	int i0
	float f1
	void * p2
	void * p3
PREINIT:
	float(*func)(int, float, void *, void *);
CODE:
	func   = INT2PTR(float(*)(int, float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2, p3);
OUTPUT:
	RETVAL

char *
nci_tifpp( c_func, i0, f1, p2, p3 )
	SV* c_func
	int i0
	float f1
	void * p2
	void * p3
PREINIT:
	char *(*func)(int, float, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(int, float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2, p3);
OUTPUT:
	RETVAL

int
nci_iifpp( c_func, i0, f1, p2, p3 )
	SV* c_func
	int i0
	float f1
	void * p2
	void * p3
PREINIT:
	int(*func)(int, float, void *, void *);
CODE:
	func   = INT2PTR(int(*)(int, float, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2, p3);
OUTPUT:
	RETVAL

void *
nci_pptpp( c_func, p0, t1, p2, p3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	void * p3
PREINIT:
	void *(*func)(void *, char *, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2, p3);
OUTPUT:
	RETVAL

void
nci_vptpp( c_func, p0, t1, p2, p3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	void * p3
PREINIT:
	void(*func)(void *, char *, void *, void *);
CODE:
	func   = INT2PTR(void(*)(void *, char *, void *, void *), SvIV(c_func) );
	(*func)(p0, t1, p2, p3);

double
nci_dptpp( c_func, p0, t1, p2, p3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	void * p3
PREINIT:
	double(*func)(void *, char *, void *, void *);
CODE:
	func   = INT2PTR(double(*)(void *, char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2, p3);
OUTPUT:
	RETVAL

short
nci_sptpp( c_func, p0, t1, p2, p3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	void * p3
PREINIT:
	short(*func)(void *, char *, void *, void *);
CODE:
	func   = INT2PTR(short(*)(void *, char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2, p3);
OUTPUT:
	RETVAL

float
nci_fptpp( c_func, p0, t1, p2, p3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	void * p3
PREINIT:
	float(*func)(void *, char *, void *, void *);
CODE:
	func   = INT2PTR(float(*)(void *, char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2, p3);
OUTPUT:
	RETVAL

char *
nci_tptpp( c_func, p0, t1, p2, p3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	void * p3
PREINIT:
	char *(*func)(void *, char *, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2, p3);
OUTPUT:
	RETVAL

int
nci_iptpp( c_func, p0, t1, p2, p3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	void * p3
PREINIT:
	int(*func)(void *, char *, void *, void *);
CODE:
	func   = INT2PTR(int(*)(void *, char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2, p3);
OUTPUT:
	RETVAL

void *
nci_pvtpp( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvtpp( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvtpp( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svtpp( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvtpp( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvtpp( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivtpp( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdtpp( c_func, d0, t1, p2, p3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	void * p3
PREINIT:
	void *(*func)(double, char *, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(double, char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2, p3);
OUTPUT:
	RETVAL

void
nci_vdtpp( c_func, d0, t1, p2, p3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	void * p3
PREINIT:
	void(*func)(double, char *, void *, void *);
CODE:
	func   = INT2PTR(void(*)(double, char *, void *, void *), SvIV(c_func) );
	(*func)(d0, t1, p2, p3);

double
nci_ddtpp( c_func, d0, t1, p2, p3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	void * p3
PREINIT:
	double(*func)(double, char *, void *, void *);
CODE:
	func   = INT2PTR(double(*)(double, char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2, p3);
OUTPUT:
	RETVAL

short
nci_sdtpp( c_func, d0, t1, p2, p3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	void * p3
PREINIT:
	short(*func)(double, char *, void *, void *);
CODE:
	func   = INT2PTR(short(*)(double, char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2, p3);
OUTPUT:
	RETVAL

float
nci_fdtpp( c_func, d0, t1, p2, p3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	void * p3
PREINIT:
	float(*func)(double, char *, void *, void *);
CODE:
	func   = INT2PTR(float(*)(double, char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2, p3);
OUTPUT:
	RETVAL

char *
nci_tdtpp( c_func, d0, t1, p2, p3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	void * p3
PREINIT:
	char *(*func)(double, char *, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(double, char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2, p3);
OUTPUT:
	RETVAL

int
nci_idtpp( c_func, d0, t1, p2, p3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	void * p3
PREINIT:
	int(*func)(double, char *, void *, void *);
CODE:
	func   = INT2PTR(int(*)(double, char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2, p3);
OUTPUT:
	RETVAL

void *
nci_pstpp( c_func, s0, t1, p2, p3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	void * p3
PREINIT:
	void *(*func)(short, char *, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(short, char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2, p3);
OUTPUT:
	RETVAL

void
nci_vstpp( c_func, s0, t1, p2, p3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	void * p3
PREINIT:
	void(*func)(short, char *, void *, void *);
CODE:
	func   = INT2PTR(void(*)(short, char *, void *, void *), SvIV(c_func) );
	(*func)(s0, t1, p2, p3);

double
nci_dstpp( c_func, s0, t1, p2, p3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	void * p3
PREINIT:
	double(*func)(short, char *, void *, void *);
CODE:
	func   = INT2PTR(double(*)(short, char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2, p3);
OUTPUT:
	RETVAL

short
nci_sstpp( c_func, s0, t1, p2, p3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	void * p3
PREINIT:
	short(*func)(short, char *, void *, void *);
CODE:
	func   = INT2PTR(short(*)(short, char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2, p3);
OUTPUT:
	RETVAL

float
nci_fstpp( c_func, s0, t1, p2, p3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	void * p3
PREINIT:
	float(*func)(short, char *, void *, void *);
CODE:
	func   = INT2PTR(float(*)(short, char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2, p3);
OUTPUT:
	RETVAL

char *
nci_tstpp( c_func, s0, t1, p2, p3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	void * p3
PREINIT:
	char *(*func)(short, char *, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(short, char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2, p3);
OUTPUT:
	RETVAL

int
nci_istpp( c_func, s0, t1, p2, p3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	void * p3
PREINIT:
	int(*func)(short, char *, void *, void *);
CODE:
	func   = INT2PTR(int(*)(short, char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2, p3);
OUTPUT:
	RETVAL

void *
nci_pftpp( c_func, f0, t1, p2, p3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	void * p3
PREINIT:
	void *(*func)(float, char *, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(float, char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2, p3);
OUTPUT:
	RETVAL

void
nci_vftpp( c_func, f0, t1, p2, p3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	void * p3
PREINIT:
	void(*func)(float, char *, void *, void *);
CODE:
	func   = INT2PTR(void(*)(float, char *, void *, void *), SvIV(c_func) );
	(*func)(f0, t1, p2, p3);

double
nci_dftpp( c_func, f0, t1, p2, p3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	void * p3
PREINIT:
	double(*func)(float, char *, void *, void *);
CODE:
	func   = INT2PTR(double(*)(float, char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2, p3);
OUTPUT:
	RETVAL

short
nci_sftpp( c_func, f0, t1, p2, p3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	void * p3
PREINIT:
	short(*func)(float, char *, void *, void *);
CODE:
	func   = INT2PTR(short(*)(float, char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2, p3);
OUTPUT:
	RETVAL

float
nci_fftpp( c_func, f0, t1, p2, p3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	void * p3
PREINIT:
	float(*func)(float, char *, void *, void *);
CODE:
	func   = INT2PTR(float(*)(float, char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2, p3);
OUTPUT:
	RETVAL

char *
nci_tftpp( c_func, f0, t1, p2, p3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	void * p3
PREINIT:
	char *(*func)(float, char *, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(float, char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2, p3);
OUTPUT:
	RETVAL

int
nci_iftpp( c_func, f0, t1, p2, p3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	void * p3
PREINIT:
	int(*func)(float, char *, void *, void *);
CODE:
	func   = INT2PTR(int(*)(float, char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2, p3);
OUTPUT:
	RETVAL

void *
nci_pttpp( c_func, t0, t1, p2, p3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	void * p3
PREINIT:
	void *(*func)(char *, char *, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2, p3);
OUTPUT:
	RETVAL

void
nci_vttpp( c_func, t0, t1, p2, p3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	void * p3
PREINIT:
	void(*func)(char *, char *, void *, void *);
CODE:
	func   = INT2PTR(void(*)(char *, char *, void *, void *), SvIV(c_func) );
	(*func)(t0, t1, p2, p3);

double
nci_dttpp( c_func, t0, t1, p2, p3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	void * p3
PREINIT:
	double(*func)(char *, char *, void *, void *);
CODE:
	func   = INT2PTR(double(*)(char *, char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2, p3);
OUTPUT:
	RETVAL

short
nci_sttpp( c_func, t0, t1, p2, p3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	void * p3
PREINIT:
	short(*func)(char *, char *, void *, void *);
CODE:
	func   = INT2PTR(short(*)(char *, char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2, p3);
OUTPUT:
	RETVAL

float
nci_fttpp( c_func, t0, t1, p2, p3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	void * p3
PREINIT:
	float(*func)(char *, char *, void *, void *);
CODE:
	func   = INT2PTR(float(*)(char *, char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2, p3);
OUTPUT:
	RETVAL

char *
nci_tttpp( c_func, t0, t1, p2, p3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	void * p3
PREINIT:
	char *(*func)(char *, char *, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2, p3);
OUTPUT:
	RETVAL

int
nci_ittpp( c_func, t0, t1, p2, p3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	void * p3
PREINIT:
	int(*func)(char *, char *, void *, void *);
CODE:
	func   = INT2PTR(int(*)(char *, char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2, p3);
OUTPUT:
	RETVAL

void *
nci_pitpp( c_func, i0, t1, p2, p3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	void * p3
PREINIT:
	void *(*func)(int, char *, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(int, char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2, p3);
OUTPUT:
	RETVAL

void
nci_vitpp( c_func, i0, t1, p2, p3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	void * p3
PREINIT:
	void(*func)(int, char *, void *, void *);
CODE:
	func   = INT2PTR(void(*)(int, char *, void *, void *), SvIV(c_func) );
	(*func)(i0, t1, p2, p3);

double
nci_ditpp( c_func, i0, t1, p2, p3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	void * p3
PREINIT:
	double(*func)(int, char *, void *, void *);
CODE:
	func   = INT2PTR(double(*)(int, char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2, p3);
OUTPUT:
	RETVAL

short
nci_sitpp( c_func, i0, t1, p2, p3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	void * p3
PREINIT:
	short(*func)(int, char *, void *, void *);
CODE:
	func   = INT2PTR(short(*)(int, char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2, p3);
OUTPUT:
	RETVAL

float
nci_fitpp( c_func, i0, t1, p2, p3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	void * p3
PREINIT:
	float(*func)(int, char *, void *, void *);
CODE:
	func   = INT2PTR(float(*)(int, char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2, p3);
OUTPUT:
	RETVAL

char *
nci_titpp( c_func, i0, t1, p2, p3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	void * p3
PREINIT:
	char *(*func)(int, char *, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(int, char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2, p3);
OUTPUT:
	RETVAL

int
nci_iitpp( c_func, i0, t1, p2, p3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	void * p3
PREINIT:
	int(*func)(int, char *, void *, void *);
CODE:
	func   = INT2PTR(int(*)(int, char *, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2, p3);
OUTPUT:
	RETVAL

void *
nci_ppipp( c_func, p0, i1, p2, p3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	void * p3
PREINIT:
	void *(*func)(void *, int, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2, p3);
OUTPUT:
	RETVAL

void
nci_vpipp( c_func, p0, i1, p2, p3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	void * p3
PREINIT:
	void(*func)(void *, int, void *, void *);
CODE:
	func   = INT2PTR(void(*)(void *, int, void *, void *), SvIV(c_func) );
	(*func)(p0, i1, p2, p3);

double
nci_dpipp( c_func, p0, i1, p2, p3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	void * p3
PREINIT:
	double(*func)(void *, int, void *, void *);
CODE:
	func   = INT2PTR(double(*)(void *, int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2, p3);
OUTPUT:
	RETVAL

short
nci_spipp( c_func, p0, i1, p2, p3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	void * p3
PREINIT:
	short(*func)(void *, int, void *, void *);
CODE:
	func   = INT2PTR(short(*)(void *, int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2, p3);
OUTPUT:
	RETVAL

float
nci_fpipp( c_func, p0, i1, p2, p3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	void * p3
PREINIT:
	float(*func)(void *, int, void *, void *);
CODE:
	func   = INT2PTR(float(*)(void *, int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2, p3);
OUTPUT:
	RETVAL

char *
nci_tpipp( c_func, p0, i1, p2, p3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	void * p3
PREINIT:
	char *(*func)(void *, int, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2, p3);
OUTPUT:
	RETVAL

int
nci_ipipp( c_func, p0, i1, p2, p3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	void * p3
PREINIT:
	int(*func)(void *, int, void *, void *);
CODE:
	func   = INT2PTR(int(*)(void *, int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2, p3);
OUTPUT:
	RETVAL

void *
nci_pvipp( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvipp( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvipp( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svipp( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvipp( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvipp( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivipp( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdipp( c_func, d0, i1, p2, p3 )
	SV* c_func
	double d0
	int i1
	void * p2
	void * p3
PREINIT:
	void *(*func)(double, int, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(double, int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2, p3);
OUTPUT:
	RETVAL

void
nci_vdipp( c_func, d0, i1, p2, p3 )
	SV* c_func
	double d0
	int i1
	void * p2
	void * p3
PREINIT:
	void(*func)(double, int, void *, void *);
CODE:
	func   = INT2PTR(void(*)(double, int, void *, void *), SvIV(c_func) );
	(*func)(d0, i1, p2, p3);

double
nci_ddipp( c_func, d0, i1, p2, p3 )
	SV* c_func
	double d0
	int i1
	void * p2
	void * p3
PREINIT:
	double(*func)(double, int, void *, void *);
CODE:
	func   = INT2PTR(double(*)(double, int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2, p3);
OUTPUT:
	RETVAL

short
nci_sdipp( c_func, d0, i1, p2, p3 )
	SV* c_func
	double d0
	int i1
	void * p2
	void * p3
PREINIT:
	short(*func)(double, int, void *, void *);
CODE:
	func   = INT2PTR(short(*)(double, int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2, p3);
OUTPUT:
	RETVAL

float
nci_fdipp( c_func, d0, i1, p2, p3 )
	SV* c_func
	double d0
	int i1
	void * p2
	void * p3
PREINIT:
	float(*func)(double, int, void *, void *);
CODE:
	func   = INT2PTR(float(*)(double, int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2, p3);
OUTPUT:
	RETVAL

char *
nci_tdipp( c_func, d0, i1, p2, p3 )
	SV* c_func
	double d0
	int i1
	void * p2
	void * p3
PREINIT:
	char *(*func)(double, int, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(double, int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2, p3);
OUTPUT:
	RETVAL

int
nci_idipp( c_func, d0, i1, p2, p3 )
	SV* c_func
	double d0
	int i1
	void * p2
	void * p3
PREINIT:
	int(*func)(double, int, void *, void *);
CODE:
	func   = INT2PTR(int(*)(double, int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2, p3);
OUTPUT:
	RETVAL

void *
nci_psipp( c_func, s0, i1, p2, p3 )
	SV* c_func
	short s0
	int i1
	void * p2
	void * p3
PREINIT:
	void *(*func)(short, int, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(short, int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2, p3);
OUTPUT:
	RETVAL

void
nci_vsipp( c_func, s0, i1, p2, p3 )
	SV* c_func
	short s0
	int i1
	void * p2
	void * p3
PREINIT:
	void(*func)(short, int, void *, void *);
CODE:
	func   = INT2PTR(void(*)(short, int, void *, void *), SvIV(c_func) );
	(*func)(s0, i1, p2, p3);

double
nci_dsipp( c_func, s0, i1, p2, p3 )
	SV* c_func
	short s0
	int i1
	void * p2
	void * p3
PREINIT:
	double(*func)(short, int, void *, void *);
CODE:
	func   = INT2PTR(double(*)(short, int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2, p3);
OUTPUT:
	RETVAL

short
nci_ssipp( c_func, s0, i1, p2, p3 )
	SV* c_func
	short s0
	int i1
	void * p2
	void * p3
PREINIT:
	short(*func)(short, int, void *, void *);
CODE:
	func   = INT2PTR(short(*)(short, int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2, p3);
OUTPUT:
	RETVAL

float
nci_fsipp( c_func, s0, i1, p2, p3 )
	SV* c_func
	short s0
	int i1
	void * p2
	void * p3
PREINIT:
	float(*func)(short, int, void *, void *);
CODE:
	func   = INT2PTR(float(*)(short, int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2, p3);
OUTPUT:
	RETVAL

char *
nci_tsipp( c_func, s0, i1, p2, p3 )
	SV* c_func
	short s0
	int i1
	void * p2
	void * p3
PREINIT:
	char *(*func)(short, int, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(short, int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2, p3);
OUTPUT:
	RETVAL

int
nci_isipp( c_func, s0, i1, p2, p3 )
	SV* c_func
	short s0
	int i1
	void * p2
	void * p3
PREINIT:
	int(*func)(short, int, void *, void *);
CODE:
	func   = INT2PTR(int(*)(short, int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2, p3);
OUTPUT:
	RETVAL

void *
nci_pfipp( c_func, f0, i1, p2, p3 )
	SV* c_func
	float f0
	int i1
	void * p2
	void * p3
PREINIT:
	void *(*func)(float, int, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(float, int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2, p3);
OUTPUT:
	RETVAL

void
nci_vfipp( c_func, f0, i1, p2, p3 )
	SV* c_func
	float f0
	int i1
	void * p2
	void * p3
PREINIT:
	void(*func)(float, int, void *, void *);
CODE:
	func   = INT2PTR(void(*)(float, int, void *, void *), SvIV(c_func) );
	(*func)(f0, i1, p2, p3);

double
nci_dfipp( c_func, f0, i1, p2, p3 )
	SV* c_func
	float f0
	int i1
	void * p2
	void * p3
PREINIT:
	double(*func)(float, int, void *, void *);
CODE:
	func   = INT2PTR(double(*)(float, int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2, p3);
OUTPUT:
	RETVAL

short
nci_sfipp( c_func, f0, i1, p2, p3 )
	SV* c_func
	float f0
	int i1
	void * p2
	void * p3
PREINIT:
	short(*func)(float, int, void *, void *);
CODE:
	func   = INT2PTR(short(*)(float, int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2, p3);
OUTPUT:
	RETVAL

float
nci_ffipp( c_func, f0, i1, p2, p3 )
	SV* c_func
	float f0
	int i1
	void * p2
	void * p3
PREINIT:
	float(*func)(float, int, void *, void *);
CODE:
	func   = INT2PTR(float(*)(float, int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2, p3);
OUTPUT:
	RETVAL

char *
nci_tfipp( c_func, f0, i1, p2, p3 )
	SV* c_func
	float f0
	int i1
	void * p2
	void * p3
PREINIT:
	char *(*func)(float, int, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(float, int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2, p3);
OUTPUT:
	RETVAL

int
nci_ifipp( c_func, f0, i1, p2, p3 )
	SV* c_func
	float f0
	int i1
	void * p2
	void * p3
PREINIT:
	int(*func)(float, int, void *, void *);
CODE:
	func   = INT2PTR(int(*)(float, int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2, p3);
OUTPUT:
	RETVAL

void *
nci_ptipp( c_func, t0, i1, p2, p3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	void * p3
PREINIT:
	void *(*func)(char *, int, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2, p3);
OUTPUT:
	RETVAL

void
nci_vtipp( c_func, t0, i1, p2, p3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	void * p3
PREINIT:
	void(*func)(char *, int, void *, void *);
CODE:
	func   = INT2PTR(void(*)(char *, int, void *, void *), SvIV(c_func) );
	(*func)(t0, i1, p2, p3);

double
nci_dtipp( c_func, t0, i1, p2, p3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	void * p3
PREINIT:
	double(*func)(char *, int, void *, void *);
CODE:
	func   = INT2PTR(double(*)(char *, int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2, p3);
OUTPUT:
	RETVAL

short
nci_stipp( c_func, t0, i1, p2, p3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	void * p3
PREINIT:
	short(*func)(char *, int, void *, void *);
CODE:
	func   = INT2PTR(short(*)(char *, int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2, p3);
OUTPUT:
	RETVAL

float
nci_ftipp( c_func, t0, i1, p2, p3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	void * p3
PREINIT:
	float(*func)(char *, int, void *, void *);
CODE:
	func   = INT2PTR(float(*)(char *, int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2, p3);
OUTPUT:
	RETVAL

char *
nci_ttipp( c_func, t0, i1, p2, p3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	void * p3
PREINIT:
	char *(*func)(char *, int, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2, p3);
OUTPUT:
	RETVAL

int
nci_itipp( c_func, t0, i1, p2, p3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	void * p3
PREINIT:
	int(*func)(char *, int, void *, void *);
CODE:
	func   = INT2PTR(int(*)(char *, int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2, p3);
OUTPUT:
	RETVAL

void *
nci_piipp( c_func, i0, i1, p2, p3 )
	SV* c_func
	int i0
	int i1
	void * p2
	void * p3
PREINIT:
	void *(*func)(int, int, void *, void *);
CODE:
	func   = INT2PTR(void *(*)(int, int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2, p3);
OUTPUT:
	RETVAL

void
nci_viipp( c_func, i0, i1, p2, p3 )
	SV* c_func
	int i0
	int i1
	void * p2
	void * p3
PREINIT:
	void(*func)(int, int, void *, void *);
CODE:
	func   = INT2PTR(void(*)(int, int, void *, void *), SvIV(c_func) );
	(*func)(i0, i1, p2, p3);

double
nci_diipp( c_func, i0, i1, p2, p3 )
	SV* c_func
	int i0
	int i1
	void * p2
	void * p3
PREINIT:
	double(*func)(int, int, void *, void *);
CODE:
	func   = INT2PTR(double(*)(int, int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2, p3);
OUTPUT:
	RETVAL

short
nci_siipp( c_func, i0, i1, p2, p3 )
	SV* c_func
	int i0
	int i1
	void * p2
	void * p3
PREINIT:
	short(*func)(int, int, void *, void *);
CODE:
	func   = INT2PTR(short(*)(int, int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2, p3);
OUTPUT:
	RETVAL

float
nci_fiipp( c_func, i0, i1, p2, p3 )
	SV* c_func
	int i0
	int i1
	void * p2
	void * p3
PREINIT:
	float(*func)(int, int, void *, void *);
CODE:
	func   = INT2PTR(float(*)(int, int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2, p3);
OUTPUT:
	RETVAL

char *
nci_tiipp( c_func, i0, i1, p2, p3 )
	SV* c_func
	int i0
	int i1
	void * p2
	void * p3
PREINIT:
	char *(*func)(int, int, void *, void *);
CODE:
	func   = INT2PTR(char *(*)(int, int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2, p3);
OUTPUT:
	RETVAL

int
nci_iiipp( c_func, i0, i1, p2, p3 )
	SV* c_func
	int i0
	int i1
	void * p2
	void * p3
PREINIT:
	int(*func)(int, int, void *, void *);
CODE:
	func   = INT2PTR(int(*)(int, int, void *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2, p3);
OUTPUT:
	RETVAL

void *
nci_pppdp( c_func, p0, p1, d2, p3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	void * p3
PREINIT:
	void *(*func)(void *, void *, double, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2, p3);
OUTPUT:
	RETVAL

void
nci_vppdp( c_func, p0, p1, d2, p3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	void * p3
PREINIT:
	void(*func)(void *, void *, double, void *);
CODE:
	func   = INT2PTR(void(*)(void *, void *, double, void *), SvIV(c_func) );
	(*func)(p0, p1, d2, p3);

double
nci_dppdp( c_func, p0, p1, d2, p3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	void * p3
PREINIT:
	double(*func)(void *, void *, double, void *);
CODE:
	func   = INT2PTR(double(*)(void *, void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2, p3);
OUTPUT:
	RETVAL

short
nci_sppdp( c_func, p0, p1, d2, p3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	void * p3
PREINIT:
	short(*func)(void *, void *, double, void *);
CODE:
	func   = INT2PTR(short(*)(void *, void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2, p3);
OUTPUT:
	RETVAL

float
nci_fppdp( c_func, p0, p1, d2, p3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	void * p3
PREINIT:
	float(*func)(void *, void *, double, void *);
CODE:
	func   = INT2PTR(float(*)(void *, void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2, p3);
OUTPUT:
	RETVAL

char *
nci_tppdp( c_func, p0, p1, d2, p3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	void * p3
PREINIT:
	char *(*func)(void *, void *, double, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2, p3);
OUTPUT:
	RETVAL

int
nci_ippdp( c_func, p0, p1, d2, p3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	void * p3
PREINIT:
	int(*func)(void *, void *, double, void *);
CODE:
	func   = INT2PTR(int(*)(void *, void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2, p3);
OUTPUT:
	RETVAL

void *
nci_pvpdp( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvpdp( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvpdp( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svpdp( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvpdp( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvpdp( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivpdp( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdpdp( c_func, d0, p1, d2, p3 )
	SV* c_func
	double d0
	void * p1
	double d2
	void * p3
PREINIT:
	void *(*func)(double, void *, double, void *);
CODE:
	func   = INT2PTR(void *(*)(double, void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2, p3);
OUTPUT:
	RETVAL

void
nci_vdpdp( c_func, d0, p1, d2, p3 )
	SV* c_func
	double d0
	void * p1
	double d2
	void * p3
PREINIT:
	void(*func)(double, void *, double, void *);
CODE:
	func   = INT2PTR(void(*)(double, void *, double, void *), SvIV(c_func) );
	(*func)(d0, p1, d2, p3);

double
nci_ddpdp( c_func, d0, p1, d2, p3 )
	SV* c_func
	double d0
	void * p1
	double d2
	void * p3
PREINIT:
	double(*func)(double, void *, double, void *);
CODE:
	func   = INT2PTR(double(*)(double, void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2, p3);
OUTPUT:
	RETVAL

short
nci_sdpdp( c_func, d0, p1, d2, p3 )
	SV* c_func
	double d0
	void * p1
	double d2
	void * p3
PREINIT:
	short(*func)(double, void *, double, void *);
CODE:
	func   = INT2PTR(short(*)(double, void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2, p3);
OUTPUT:
	RETVAL

float
nci_fdpdp( c_func, d0, p1, d2, p3 )
	SV* c_func
	double d0
	void * p1
	double d2
	void * p3
PREINIT:
	float(*func)(double, void *, double, void *);
CODE:
	func   = INT2PTR(float(*)(double, void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2, p3);
OUTPUT:
	RETVAL

char *
nci_tdpdp( c_func, d0, p1, d2, p3 )
	SV* c_func
	double d0
	void * p1
	double d2
	void * p3
PREINIT:
	char *(*func)(double, void *, double, void *);
CODE:
	func   = INT2PTR(char *(*)(double, void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2, p3);
OUTPUT:
	RETVAL

int
nci_idpdp( c_func, d0, p1, d2, p3 )
	SV* c_func
	double d0
	void * p1
	double d2
	void * p3
PREINIT:
	int(*func)(double, void *, double, void *);
CODE:
	func   = INT2PTR(int(*)(double, void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2, p3);
OUTPUT:
	RETVAL

void *
nci_pspdp( c_func, s0, p1, d2, p3 )
	SV* c_func
	short s0
	void * p1
	double d2
	void * p3
PREINIT:
	void *(*func)(short, void *, double, void *);
CODE:
	func   = INT2PTR(void *(*)(short, void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2, p3);
OUTPUT:
	RETVAL

void
nci_vspdp( c_func, s0, p1, d2, p3 )
	SV* c_func
	short s0
	void * p1
	double d2
	void * p3
PREINIT:
	void(*func)(short, void *, double, void *);
CODE:
	func   = INT2PTR(void(*)(short, void *, double, void *), SvIV(c_func) );
	(*func)(s0, p1, d2, p3);

double
nci_dspdp( c_func, s0, p1, d2, p3 )
	SV* c_func
	short s0
	void * p1
	double d2
	void * p3
PREINIT:
	double(*func)(short, void *, double, void *);
CODE:
	func   = INT2PTR(double(*)(short, void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2, p3);
OUTPUT:
	RETVAL

short
nci_sspdp( c_func, s0, p1, d2, p3 )
	SV* c_func
	short s0
	void * p1
	double d2
	void * p3
PREINIT:
	short(*func)(short, void *, double, void *);
CODE:
	func   = INT2PTR(short(*)(short, void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2, p3);
OUTPUT:
	RETVAL

float
nci_fspdp( c_func, s0, p1, d2, p3 )
	SV* c_func
	short s0
	void * p1
	double d2
	void * p3
PREINIT:
	float(*func)(short, void *, double, void *);
CODE:
	func   = INT2PTR(float(*)(short, void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2, p3);
OUTPUT:
	RETVAL

char *
nci_tspdp( c_func, s0, p1, d2, p3 )
	SV* c_func
	short s0
	void * p1
	double d2
	void * p3
PREINIT:
	char *(*func)(short, void *, double, void *);
CODE:
	func   = INT2PTR(char *(*)(short, void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2, p3);
OUTPUT:
	RETVAL

int
nci_ispdp( c_func, s0, p1, d2, p3 )
	SV* c_func
	short s0
	void * p1
	double d2
	void * p3
PREINIT:
	int(*func)(short, void *, double, void *);
CODE:
	func   = INT2PTR(int(*)(short, void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2, p3);
OUTPUT:
	RETVAL

void *
nci_pfpdp( c_func, f0, p1, d2, p3 )
	SV* c_func
	float f0
	void * p1
	double d2
	void * p3
PREINIT:
	void *(*func)(float, void *, double, void *);
CODE:
	func   = INT2PTR(void *(*)(float, void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2, p3);
OUTPUT:
	RETVAL

void
nci_vfpdp( c_func, f0, p1, d2, p3 )
	SV* c_func
	float f0
	void * p1
	double d2
	void * p3
PREINIT:
	void(*func)(float, void *, double, void *);
CODE:
	func   = INT2PTR(void(*)(float, void *, double, void *), SvIV(c_func) );
	(*func)(f0, p1, d2, p3);

double
nci_dfpdp( c_func, f0, p1, d2, p3 )
	SV* c_func
	float f0
	void * p1
	double d2
	void * p3
PREINIT:
	double(*func)(float, void *, double, void *);
CODE:
	func   = INT2PTR(double(*)(float, void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2, p3);
OUTPUT:
	RETVAL

short
nci_sfpdp( c_func, f0, p1, d2, p3 )
	SV* c_func
	float f0
	void * p1
	double d2
	void * p3
PREINIT:
	short(*func)(float, void *, double, void *);
CODE:
	func   = INT2PTR(short(*)(float, void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2, p3);
OUTPUT:
	RETVAL

float
nci_ffpdp( c_func, f0, p1, d2, p3 )
	SV* c_func
	float f0
	void * p1
	double d2
	void * p3
PREINIT:
	float(*func)(float, void *, double, void *);
CODE:
	func   = INT2PTR(float(*)(float, void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2, p3);
OUTPUT:
	RETVAL

char *
nci_tfpdp( c_func, f0, p1, d2, p3 )
	SV* c_func
	float f0
	void * p1
	double d2
	void * p3
PREINIT:
	char *(*func)(float, void *, double, void *);
CODE:
	func   = INT2PTR(char *(*)(float, void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2, p3);
OUTPUT:
	RETVAL

int
nci_ifpdp( c_func, f0, p1, d2, p3 )
	SV* c_func
	float f0
	void * p1
	double d2
	void * p3
PREINIT:
	int(*func)(float, void *, double, void *);
CODE:
	func   = INT2PTR(int(*)(float, void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2, p3);
OUTPUT:
	RETVAL

void *
nci_ptpdp( c_func, t0, p1, d2, p3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	void * p3
PREINIT:
	void *(*func)(char *, void *, double, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2, p3);
OUTPUT:
	RETVAL

void
nci_vtpdp( c_func, t0, p1, d2, p3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	void * p3
PREINIT:
	void(*func)(char *, void *, double, void *);
CODE:
	func   = INT2PTR(void(*)(char *, void *, double, void *), SvIV(c_func) );
	(*func)(t0, p1, d2, p3);

double
nci_dtpdp( c_func, t0, p1, d2, p3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	void * p3
PREINIT:
	double(*func)(char *, void *, double, void *);
CODE:
	func   = INT2PTR(double(*)(char *, void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2, p3);
OUTPUT:
	RETVAL

short
nci_stpdp( c_func, t0, p1, d2, p3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	void * p3
PREINIT:
	short(*func)(char *, void *, double, void *);
CODE:
	func   = INT2PTR(short(*)(char *, void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2, p3);
OUTPUT:
	RETVAL

float
nci_ftpdp( c_func, t0, p1, d2, p3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	void * p3
PREINIT:
	float(*func)(char *, void *, double, void *);
CODE:
	func   = INT2PTR(float(*)(char *, void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2, p3);
OUTPUT:
	RETVAL

char *
nci_ttpdp( c_func, t0, p1, d2, p3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	void * p3
PREINIT:
	char *(*func)(char *, void *, double, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2, p3);
OUTPUT:
	RETVAL

int
nci_itpdp( c_func, t0, p1, d2, p3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	void * p3
PREINIT:
	int(*func)(char *, void *, double, void *);
CODE:
	func   = INT2PTR(int(*)(char *, void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2, p3);
OUTPUT:
	RETVAL

void *
nci_pipdp( c_func, i0, p1, d2, p3 )
	SV* c_func
	int i0
	void * p1
	double d2
	void * p3
PREINIT:
	void *(*func)(int, void *, double, void *);
CODE:
	func   = INT2PTR(void *(*)(int, void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2, p3);
OUTPUT:
	RETVAL

void
nci_vipdp( c_func, i0, p1, d2, p3 )
	SV* c_func
	int i0
	void * p1
	double d2
	void * p3
PREINIT:
	void(*func)(int, void *, double, void *);
CODE:
	func   = INT2PTR(void(*)(int, void *, double, void *), SvIV(c_func) );
	(*func)(i0, p1, d2, p3);

double
nci_dipdp( c_func, i0, p1, d2, p3 )
	SV* c_func
	int i0
	void * p1
	double d2
	void * p3
PREINIT:
	double(*func)(int, void *, double, void *);
CODE:
	func   = INT2PTR(double(*)(int, void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2, p3);
OUTPUT:
	RETVAL

short
nci_sipdp( c_func, i0, p1, d2, p3 )
	SV* c_func
	int i0
	void * p1
	double d2
	void * p3
PREINIT:
	short(*func)(int, void *, double, void *);
CODE:
	func   = INT2PTR(short(*)(int, void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2, p3);
OUTPUT:
	RETVAL

float
nci_fipdp( c_func, i0, p1, d2, p3 )
	SV* c_func
	int i0
	void * p1
	double d2
	void * p3
PREINIT:
	float(*func)(int, void *, double, void *);
CODE:
	func   = INT2PTR(float(*)(int, void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2, p3);
OUTPUT:
	RETVAL

char *
nci_tipdp( c_func, i0, p1, d2, p3 )
	SV* c_func
	int i0
	void * p1
	double d2
	void * p3
PREINIT:
	char *(*func)(int, void *, double, void *);
CODE:
	func   = INT2PTR(char *(*)(int, void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2, p3);
OUTPUT:
	RETVAL

int
nci_iipdp( c_func, i0, p1, d2, p3 )
	SV* c_func
	int i0
	void * p1
	double d2
	void * p3
PREINIT:
	int(*func)(int, void *, double, void *);
CODE:
	func   = INT2PTR(int(*)(int, void *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2, p3);
OUTPUT:
	RETVAL

void *
nci_ppddp( c_func, p0, d1, d2, p3 )
	SV* c_func
	void * p0
	double d1
	double d2
	void * p3
PREINIT:
	void *(*func)(void *, double, double, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2, p3);
OUTPUT:
	RETVAL

void
nci_vpddp( c_func, p0, d1, d2, p3 )
	SV* c_func
	void * p0
	double d1
	double d2
	void * p3
PREINIT:
	void(*func)(void *, double, double, void *);
CODE:
	func   = INT2PTR(void(*)(void *, double, double, void *), SvIV(c_func) );
	(*func)(p0, d1, d2, p3);

double
nci_dpddp( c_func, p0, d1, d2, p3 )
	SV* c_func
	void * p0
	double d1
	double d2
	void * p3
PREINIT:
	double(*func)(void *, double, double, void *);
CODE:
	func   = INT2PTR(double(*)(void *, double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2, p3);
OUTPUT:
	RETVAL

short
nci_spddp( c_func, p0, d1, d2, p3 )
	SV* c_func
	void * p0
	double d1
	double d2
	void * p3
PREINIT:
	short(*func)(void *, double, double, void *);
CODE:
	func   = INT2PTR(short(*)(void *, double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2, p3);
OUTPUT:
	RETVAL

float
nci_fpddp( c_func, p0, d1, d2, p3 )
	SV* c_func
	void * p0
	double d1
	double d2
	void * p3
PREINIT:
	float(*func)(void *, double, double, void *);
CODE:
	func   = INT2PTR(float(*)(void *, double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2, p3);
OUTPUT:
	RETVAL

char *
nci_tpddp( c_func, p0, d1, d2, p3 )
	SV* c_func
	void * p0
	double d1
	double d2
	void * p3
PREINIT:
	char *(*func)(void *, double, double, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2, p3);
OUTPUT:
	RETVAL

int
nci_ipddp( c_func, p0, d1, d2, p3 )
	SV* c_func
	void * p0
	double d1
	double d2
	void * p3
PREINIT:
	int(*func)(void *, double, double, void *);
CODE:
	func   = INT2PTR(int(*)(void *, double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2, p3);
OUTPUT:
	RETVAL

void *
nci_pvddp( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvddp( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvddp( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svddp( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvddp( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvddp( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivddp( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdddp( c_func, d0, d1, d2, p3 )
	SV* c_func
	double d0
	double d1
	double d2
	void * p3
PREINIT:
	void *(*func)(double, double, double, void *);
CODE:
	func   = INT2PTR(void *(*)(double, double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2, p3);
OUTPUT:
	RETVAL

void
nci_vdddp( c_func, d0, d1, d2, p3 )
	SV* c_func
	double d0
	double d1
	double d2
	void * p3
PREINIT:
	void(*func)(double, double, double, void *);
CODE:
	func   = INT2PTR(void(*)(double, double, double, void *), SvIV(c_func) );
	(*func)(d0, d1, d2, p3);

double
nci_ddddp( c_func, d0, d1, d2, p3 )
	SV* c_func
	double d0
	double d1
	double d2
	void * p3
PREINIT:
	double(*func)(double, double, double, void *);
CODE:
	func   = INT2PTR(double(*)(double, double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2, p3);
OUTPUT:
	RETVAL

short
nci_sdddp( c_func, d0, d1, d2, p3 )
	SV* c_func
	double d0
	double d1
	double d2
	void * p3
PREINIT:
	short(*func)(double, double, double, void *);
CODE:
	func   = INT2PTR(short(*)(double, double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2, p3);
OUTPUT:
	RETVAL

float
nci_fdddp( c_func, d0, d1, d2, p3 )
	SV* c_func
	double d0
	double d1
	double d2
	void * p3
PREINIT:
	float(*func)(double, double, double, void *);
CODE:
	func   = INT2PTR(float(*)(double, double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2, p3);
OUTPUT:
	RETVAL

char *
nci_tdddp( c_func, d0, d1, d2, p3 )
	SV* c_func
	double d0
	double d1
	double d2
	void * p3
PREINIT:
	char *(*func)(double, double, double, void *);
CODE:
	func   = INT2PTR(char *(*)(double, double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2, p3);
OUTPUT:
	RETVAL

int
nci_idddp( c_func, d0, d1, d2, p3 )
	SV* c_func
	double d0
	double d1
	double d2
	void * p3
PREINIT:
	int(*func)(double, double, double, void *);
CODE:
	func   = INT2PTR(int(*)(double, double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2, p3);
OUTPUT:
	RETVAL

void *
nci_psddp( c_func, s0, d1, d2, p3 )
	SV* c_func
	short s0
	double d1
	double d2
	void * p3
PREINIT:
	void *(*func)(short, double, double, void *);
CODE:
	func   = INT2PTR(void *(*)(short, double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2, p3);
OUTPUT:
	RETVAL

void
nci_vsddp( c_func, s0, d1, d2, p3 )
	SV* c_func
	short s0
	double d1
	double d2
	void * p3
PREINIT:
	void(*func)(short, double, double, void *);
CODE:
	func   = INT2PTR(void(*)(short, double, double, void *), SvIV(c_func) );
	(*func)(s0, d1, d2, p3);

double
nci_dsddp( c_func, s0, d1, d2, p3 )
	SV* c_func
	short s0
	double d1
	double d2
	void * p3
PREINIT:
	double(*func)(short, double, double, void *);
CODE:
	func   = INT2PTR(double(*)(short, double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2, p3);
OUTPUT:
	RETVAL

short
nci_ssddp( c_func, s0, d1, d2, p3 )
	SV* c_func
	short s0
	double d1
	double d2
	void * p3
PREINIT:
	short(*func)(short, double, double, void *);
CODE:
	func   = INT2PTR(short(*)(short, double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2, p3);
OUTPUT:
	RETVAL

float
nci_fsddp( c_func, s0, d1, d2, p3 )
	SV* c_func
	short s0
	double d1
	double d2
	void * p3
PREINIT:
	float(*func)(short, double, double, void *);
CODE:
	func   = INT2PTR(float(*)(short, double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2, p3);
OUTPUT:
	RETVAL

char *
nci_tsddp( c_func, s0, d1, d2, p3 )
	SV* c_func
	short s0
	double d1
	double d2
	void * p3
PREINIT:
	char *(*func)(short, double, double, void *);
CODE:
	func   = INT2PTR(char *(*)(short, double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2, p3);
OUTPUT:
	RETVAL

int
nci_isddp( c_func, s0, d1, d2, p3 )
	SV* c_func
	short s0
	double d1
	double d2
	void * p3
PREINIT:
	int(*func)(short, double, double, void *);
CODE:
	func   = INT2PTR(int(*)(short, double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2, p3);
OUTPUT:
	RETVAL

void *
nci_pfddp( c_func, f0, d1, d2, p3 )
	SV* c_func
	float f0
	double d1
	double d2
	void * p3
PREINIT:
	void *(*func)(float, double, double, void *);
CODE:
	func   = INT2PTR(void *(*)(float, double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2, p3);
OUTPUT:
	RETVAL

void
nci_vfddp( c_func, f0, d1, d2, p3 )
	SV* c_func
	float f0
	double d1
	double d2
	void * p3
PREINIT:
	void(*func)(float, double, double, void *);
CODE:
	func   = INT2PTR(void(*)(float, double, double, void *), SvIV(c_func) );
	(*func)(f0, d1, d2, p3);

double
nci_dfddp( c_func, f0, d1, d2, p3 )
	SV* c_func
	float f0
	double d1
	double d2
	void * p3
PREINIT:
	double(*func)(float, double, double, void *);
CODE:
	func   = INT2PTR(double(*)(float, double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2, p3);
OUTPUT:
	RETVAL

short
nci_sfddp( c_func, f0, d1, d2, p3 )
	SV* c_func
	float f0
	double d1
	double d2
	void * p3
PREINIT:
	short(*func)(float, double, double, void *);
CODE:
	func   = INT2PTR(short(*)(float, double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2, p3);
OUTPUT:
	RETVAL

float
nci_ffddp( c_func, f0, d1, d2, p3 )
	SV* c_func
	float f0
	double d1
	double d2
	void * p3
PREINIT:
	float(*func)(float, double, double, void *);
CODE:
	func   = INT2PTR(float(*)(float, double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2, p3);
OUTPUT:
	RETVAL

char *
nci_tfddp( c_func, f0, d1, d2, p3 )
	SV* c_func
	float f0
	double d1
	double d2
	void * p3
PREINIT:
	char *(*func)(float, double, double, void *);
CODE:
	func   = INT2PTR(char *(*)(float, double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2, p3);
OUTPUT:
	RETVAL

int
nci_ifddp( c_func, f0, d1, d2, p3 )
	SV* c_func
	float f0
	double d1
	double d2
	void * p3
PREINIT:
	int(*func)(float, double, double, void *);
CODE:
	func   = INT2PTR(int(*)(float, double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2, p3);
OUTPUT:
	RETVAL

void *
nci_ptddp( c_func, t0, d1, d2, p3 )
	SV* c_func
	char * t0
	double d1
	double d2
	void * p3
PREINIT:
	void *(*func)(char *, double, double, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2, p3);
OUTPUT:
	RETVAL

void
nci_vtddp( c_func, t0, d1, d2, p3 )
	SV* c_func
	char * t0
	double d1
	double d2
	void * p3
PREINIT:
	void(*func)(char *, double, double, void *);
CODE:
	func   = INT2PTR(void(*)(char *, double, double, void *), SvIV(c_func) );
	(*func)(t0, d1, d2, p3);

double
nci_dtddp( c_func, t0, d1, d2, p3 )
	SV* c_func
	char * t0
	double d1
	double d2
	void * p3
PREINIT:
	double(*func)(char *, double, double, void *);
CODE:
	func   = INT2PTR(double(*)(char *, double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2, p3);
OUTPUT:
	RETVAL

short
nci_stddp( c_func, t0, d1, d2, p3 )
	SV* c_func
	char * t0
	double d1
	double d2
	void * p3
PREINIT:
	short(*func)(char *, double, double, void *);
CODE:
	func   = INT2PTR(short(*)(char *, double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2, p3);
OUTPUT:
	RETVAL

float
nci_ftddp( c_func, t0, d1, d2, p3 )
	SV* c_func
	char * t0
	double d1
	double d2
	void * p3
PREINIT:
	float(*func)(char *, double, double, void *);
CODE:
	func   = INT2PTR(float(*)(char *, double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2, p3);
OUTPUT:
	RETVAL

char *
nci_ttddp( c_func, t0, d1, d2, p3 )
	SV* c_func
	char * t0
	double d1
	double d2
	void * p3
PREINIT:
	char *(*func)(char *, double, double, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2, p3);
OUTPUT:
	RETVAL

int
nci_itddp( c_func, t0, d1, d2, p3 )
	SV* c_func
	char * t0
	double d1
	double d2
	void * p3
PREINIT:
	int(*func)(char *, double, double, void *);
CODE:
	func   = INT2PTR(int(*)(char *, double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2, p3);
OUTPUT:
	RETVAL

void *
nci_piddp( c_func, i0, d1, d2, p3 )
	SV* c_func
	int i0
	double d1
	double d2
	void * p3
PREINIT:
	void *(*func)(int, double, double, void *);
CODE:
	func   = INT2PTR(void *(*)(int, double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2, p3);
OUTPUT:
	RETVAL

void
nci_viddp( c_func, i0, d1, d2, p3 )
	SV* c_func
	int i0
	double d1
	double d2
	void * p3
PREINIT:
	void(*func)(int, double, double, void *);
CODE:
	func   = INT2PTR(void(*)(int, double, double, void *), SvIV(c_func) );
	(*func)(i0, d1, d2, p3);

double
nci_diddp( c_func, i0, d1, d2, p3 )
	SV* c_func
	int i0
	double d1
	double d2
	void * p3
PREINIT:
	double(*func)(int, double, double, void *);
CODE:
	func   = INT2PTR(double(*)(int, double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2, p3);
OUTPUT:
	RETVAL

short
nci_siddp( c_func, i0, d1, d2, p3 )
	SV* c_func
	int i0
	double d1
	double d2
	void * p3
PREINIT:
	short(*func)(int, double, double, void *);
CODE:
	func   = INT2PTR(short(*)(int, double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2, p3);
OUTPUT:
	RETVAL

float
nci_fiddp( c_func, i0, d1, d2, p3 )
	SV* c_func
	int i0
	double d1
	double d2
	void * p3
PREINIT:
	float(*func)(int, double, double, void *);
CODE:
	func   = INT2PTR(float(*)(int, double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2, p3);
OUTPUT:
	RETVAL

char *
nci_tiddp( c_func, i0, d1, d2, p3 )
	SV* c_func
	int i0
	double d1
	double d2
	void * p3
PREINIT:
	char *(*func)(int, double, double, void *);
CODE:
	func   = INT2PTR(char *(*)(int, double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2, p3);
OUTPUT:
	RETVAL

int
nci_iiddp( c_func, i0, d1, d2, p3 )
	SV* c_func
	int i0
	double d1
	double d2
	void * p3
PREINIT:
	int(*func)(int, double, double, void *);
CODE:
	func   = INT2PTR(int(*)(int, double, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2, p3);
OUTPUT:
	RETVAL

void *
nci_ppsdp( c_func, p0, s1, d2, p3 )
	SV* c_func
	void * p0
	short s1
	double d2
	void * p3
PREINIT:
	void *(*func)(void *, short, double, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2, p3);
OUTPUT:
	RETVAL

void
nci_vpsdp( c_func, p0, s1, d2, p3 )
	SV* c_func
	void * p0
	short s1
	double d2
	void * p3
PREINIT:
	void(*func)(void *, short, double, void *);
CODE:
	func   = INT2PTR(void(*)(void *, short, double, void *), SvIV(c_func) );
	(*func)(p0, s1, d2, p3);

double
nci_dpsdp( c_func, p0, s1, d2, p3 )
	SV* c_func
	void * p0
	short s1
	double d2
	void * p3
PREINIT:
	double(*func)(void *, short, double, void *);
CODE:
	func   = INT2PTR(double(*)(void *, short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2, p3);
OUTPUT:
	RETVAL

short
nci_spsdp( c_func, p0, s1, d2, p3 )
	SV* c_func
	void * p0
	short s1
	double d2
	void * p3
PREINIT:
	short(*func)(void *, short, double, void *);
CODE:
	func   = INT2PTR(short(*)(void *, short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2, p3);
OUTPUT:
	RETVAL

float
nci_fpsdp( c_func, p0, s1, d2, p3 )
	SV* c_func
	void * p0
	short s1
	double d2
	void * p3
PREINIT:
	float(*func)(void *, short, double, void *);
CODE:
	func   = INT2PTR(float(*)(void *, short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2, p3);
OUTPUT:
	RETVAL

char *
nci_tpsdp( c_func, p0, s1, d2, p3 )
	SV* c_func
	void * p0
	short s1
	double d2
	void * p3
PREINIT:
	char *(*func)(void *, short, double, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2, p3);
OUTPUT:
	RETVAL

int
nci_ipsdp( c_func, p0, s1, d2, p3 )
	SV* c_func
	void * p0
	short s1
	double d2
	void * p3
PREINIT:
	int(*func)(void *, short, double, void *);
CODE:
	func   = INT2PTR(int(*)(void *, short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2, p3);
OUTPUT:
	RETVAL

void *
nci_pvsdp( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvsdp( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvsdp( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svsdp( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvsdp( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvsdp( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivsdp( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdsdp( c_func, d0, s1, d2, p3 )
	SV* c_func
	double d0
	short s1
	double d2
	void * p3
PREINIT:
	void *(*func)(double, short, double, void *);
CODE:
	func   = INT2PTR(void *(*)(double, short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2, p3);
OUTPUT:
	RETVAL

void
nci_vdsdp( c_func, d0, s1, d2, p3 )
	SV* c_func
	double d0
	short s1
	double d2
	void * p3
PREINIT:
	void(*func)(double, short, double, void *);
CODE:
	func   = INT2PTR(void(*)(double, short, double, void *), SvIV(c_func) );
	(*func)(d0, s1, d2, p3);

double
nci_ddsdp( c_func, d0, s1, d2, p3 )
	SV* c_func
	double d0
	short s1
	double d2
	void * p3
PREINIT:
	double(*func)(double, short, double, void *);
CODE:
	func   = INT2PTR(double(*)(double, short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2, p3);
OUTPUT:
	RETVAL

short
nci_sdsdp( c_func, d0, s1, d2, p3 )
	SV* c_func
	double d0
	short s1
	double d2
	void * p3
PREINIT:
	short(*func)(double, short, double, void *);
CODE:
	func   = INT2PTR(short(*)(double, short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2, p3);
OUTPUT:
	RETVAL

float
nci_fdsdp( c_func, d0, s1, d2, p3 )
	SV* c_func
	double d0
	short s1
	double d2
	void * p3
PREINIT:
	float(*func)(double, short, double, void *);
CODE:
	func   = INT2PTR(float(*)(double, short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2, p3);
OUTPUT:
	RETVAL

char *
nci_tdsdp( c_func, d0, s1, d2, p3 )
	SV* c_func
	double d0
	short s1
	double d2
	void * p3
PREINIT:
	char *(*func)(double, short, double, void *);
CODE:
	func   = INT2PTR(char *(*)(double, short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2, p3);
OUTPUT:
	RETVAL

int
nci_idsdp( c_func, d0, s1, d2, p3 )
	SV* c_func
	double d0
	short s1
	double d2
	void * p3
PREINIT:
	int(*func)(double, short, double, void *);
CODE:
	func   = INT2PTR(int(*)(double, short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2, p3);
OUTPUT:
	RETVAL

void *
nci_pssdp( c_func, s0, s1, d2, p3 )
	SV* c_func
	short s0
	short s1
	double d2
	void * p3
PREINIT:
	void *(*func)(short, short, double, void *);
CODE:
	func   = INT2PTR(void *(*)(short, short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2, p3);
OUTPUT:
	RETVAL

void
nci_vssdp( c_func, s0, s1, d2, p3 )
	SV* c_func
	short s0
	short s1
	double d2
	void * p3
PREINIT:
	void(*func)(short, short, double, void *);
CODE:
	func   = INT2PTR(void(*)(short, short, double, void *), SvIV(c_func) );
	(*func)(s0, s1, d2, p3);

double
nci_dssdp( c_func, s0, s1, d2, p3 )
	SV* c_func
	short s0
	short s1
	double d2
	void * p3
PREINIT:
	double(*func)(short, short, double, void *);
CODE:
	func   = INT2PTR(double(*)(short, short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2, p3);
OUTPUT:
	RETVAL

short
nci_sssdp( c_func, s0, s1, d2, p3 )
	SV* c_func
	short s0
	short s1
	double d2
	void * p3
PREINIT:
	short(*func)(short, short, double, void *);
CODE:
	func   = INT2PTR(short(*)(short, short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2, p3);
OUTPUT:
	RETVAL

float
nci_fssdp( c_func, s0, s1, d2, p3 )
	SV* c_func
	short s0
	short s1
	double d2
	void * p3
PREINIT:
	float(*func)(short, short, double, void *);
CODE:
	func   = INT2PTR(float(*)(short, short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2, p3);
OUTPUT:
	RETVAL

char *
nci_tssdp( c_func, s0, s1, d2, p3 )
	SV* c_func
	short s0
	short s1
	double d2
	void * p3
PREINIT:
	char *(*func)(short, short, double, void *);
CODE:
	func   = INT2PTR(char *(*)(short, short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2, p3);
OUTPUT:
	RETVAL

int
nci_issdp( c_func, s0, s1, d2, p3 )
	SV* c_func
	short s0
	short s1
	double d2
	void * p3
PREINIT:
	int(*func)(short, short, double, void *);
CODE:
	func   = INT2PTR(int(*)(short, short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2, p3);
OUTPUT:
	RETVAL

void *
nci_pfsdp( c_func, f0, s1, d2, p3 )
	SV* c_func
	float f0
	short s1
	double d2
	void * p3
PREINIT:
	void *(*func)(float, short, double, void *);
CODE:
	func   = INT2PTR(void *(*)(float, short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2, p3);
OUTPUT:
	RETVAL

void
nci_vfsdp( c_func, f0, s1, d2, p3 )
	SV* c_func
	float f0
	short s1
	double d2
	void * p3
PREINIT:
	void(*func)(float, short, double, void *);
CODE:
	func   = INT2PTR(void(*)(float, short, double, void *), SvIV(c_func) );
	(*func)(f0, s1, d2, p3);

double
nci_dfsdp( c_func, f0, s1, d2, p3 )
	SV* c_func
	float f0
	short s1
	double d2
	void * p3
PREINIT:
	double(*func)(float, short, double, void *);
CODE:
	func   = INT2PTR(double(*)(float, short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2, p3);
OUTPUT:
	RETVAL

short
nci_sfsdp( c_func, f0, s1, d2, p3 )
	SV* c_func
	float f0
	short s1
	double d2
	void * p3
PREINIT:
	short(*func)(float, short, double, void *);
CODE:
	func   = INT2PTR(short(*)(float, short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2, p3);
OUTPUT:
	RETVAL

float
nci_ffsdp( c_func, f0, s1, d2, p3 )
	SV* c_func
	float f0
	short s1
	double d2
	void * p3
PREINIT:
	float(*func)(float, short, double, void *);
CODE:
	func   = INT2PTR(float(*)(float, short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2, p3);
OUTPUT:
	RETVAL

char *
nci_tfsdp( c_func, f0, s1, d2, p3 )
	SV* c_func
	float f0
	short s1
	double d2
	void * p3
PREINIT:
	char *(*func)(float, short, double, void *);
CODE:
	func   = INT2PTR(char *(*)(float, short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2, p3);
OUTPUT:
	RETVAL

int
nci_ifsdp( c_func, f0, s1, d2, p3 )
	SV* c_func
	float f0
	short s1
	double d2
	void * p3
PREINIT:
	int(*func)(float, short, double, void *);
CODE:
	func   = INT2PTR(int(*)(float, short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2, p3);
OUTPUT:
	RETVAL

void *
nci_ptsdp( c_func, t0, s1, d2, p3 )
	SV* c_func
	char * t0
	short s1
	double d2
	void * p3
PREINIT:
	void *(*func)(char *, short, double, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2, p3);
OUTPUT:
	RETVAL

void
nci_vtsdp( c_func, t0, s1, d2, p3 )
	SV* c_func
	char * t0
	short s1
	double d2
	void * p3
PREINIT:
	void(*func)(char *, short, double, void *);
CODE:
	func   = INT2PTR(void(*)(char *, short, double, void *), SvIV(c_func) );
	(*func)(t0, s1, d2, p3);

double
nci_dtsdp( c_func, t0, s1, d2, p3 )
	SV* c_func
	char * t0
	short s1
	double d2
	void * p3
PREINIT:
	double(*func)(char *, short, double, void *);
CODE:
	func   = INT2PTR(double(*)(char *, short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2, p3);
OUTPUT:
	RETVAL

short
nci_stsdp( c_func, t0, s1, d2, p3 )
	SV* c_func
	char * t0
	short s1
	double d2
	void * p3
PREINIT:
	short(*func)(char *, short, double, void *);
CODE:
	func   = INT2PTR(short(*)(char *, short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2, p3);
OUTPUT:
	RETVAL

float
nci_ftsdp( c_func, t0, s1, d2, p3 )
	SV* c_func
	char * t0
	short s1
	double d2
	void * p3
PREINIT:
	float(*func)(char *, short, double, void *);
CODE:
	func   = INT2PTR(float(*)(char *, short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2, p3);
OUTPUT:
	RETVAL

char *
nci_ttsdp( c_func, t0, s1, d2, p3 )
	SV* c_func
	char * t0
	short s1
	double d2
	void * p3
PREINIT:
	char *(*func)(char *, short, double, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2, p3);
OUTPUT:
	RETVAL

int
nci_itsdp( c_func, t0, s1, d2, p3 )
	SV* c_func
	char * t0
	short s1
	double d2
	void * p3
PREINIT:
	int(*func)(char *, short, double, void *);
CODE:
	func   = INT2PTR(int(*)(char *, short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2, p3);
OUTPUT:
	RETVAL

void *
nci_pisdp( c_func, i0, s1, d2, p3 )
	SV* c_func
	int i0
	short s1
	double d2
	void * p3
PREINIT:
	void *(*func)(int, short, double, void *);
CODE:
	func   = INT2PTR(void *(*)(int, short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2, p3);
OUTPUT:
	RETVAL

void
nci_visdp( c_func, i0, s1, d2, p3 )
	SV* c_func
	int i0
	short s1
	double d2
	void * p3
PREINIT:
	void(*func)(int, short, double, void *);
CODE:
	func   = INT2PTR(void(*)(int, short, double, void *), SvIV(c_func) );
	(*func)(i0, s1, d2, p3);

double
nci_disdp( c_func, i0, s1, d2, p3 )
	SV* c_func
	int i0
	short s1
	double d2
	void * p3
PREINIT:
	double(*func)(int, short, double, void *);
CODE:
	func   = INT2PTR(double(*)(int, short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2, p3);
OUTPUT:
	RETVAL

short
nci_sisdp( c_func, i0, s1, d2, p3 )
	SV* c_func
	int i0
	short s1
	double d2
	void * p3
PREINIT:
	short(*func)(int, short, double, void *);
CODE:
	func   = INT2PTR(short(*)(int, short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2, p3);
OUTPUT:
	RETVAL

float
nci_fisdp( c_func, i0, s1, d2, p3 )
	SV* c_func
	int i0
	short s1
	double d2
	void * p3
PREINIT:
	float(*func)(int, short, double, void *);
CODE:
	func   = INT2PTR(float(*)(int, short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2, p3);
OUTPUT:
	RETVAL

char *
nci_tisdp( c_func, i0, s1, d2, p3 )
	SV* c_func
	int i0
	short s1
	double d2
	void * p3
PREINIT:
	char *(*func)(int, short, double, void *);
CODE:
	func   = INT2PTR(char *(*)(int, short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2, p3);
OUTPUT:
	RETVAL

int
nci_iisdp( c_func, i0, s1, d2, p3 )
	SV* c_func
	int i0
	short s1
	double d2
	void * p3
PREINIT:
	int(*func)(int, short, double, void *);
CODE:
	func   = INT2PTR(int(*)(int, short, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2, p3);
OUTPUT:
	RETVAL

void *
nci_ppfdp( c_func, p0, f1, d2, p3 )
	SV* c_func
	void * p0
	float f1
	double d2
	void * p3
PREINIT:
	void *(*func)(void *, float, double, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2, p3);
OUTPUT:
	RETVAL

void
nci_vpfdp( c_func, p0, f1, d2, p3 )
	SV* c_func
	void * p0
	float f1
	double d2
	void * p3
PREINIT:
	void(*func)(void *, float, double, void *);
CODE:
	func   = INT2PTR(void(*)(void *, float, double, void *), SvIV(c_func) );
	(*func)(p0, f1, d2, p3);

double
nci_dpfdp( c_func, p0, f1, d2, p3 )
	SV* c_func
	void * p0
	float f1
	double d2
	void * p3
PREINIT:
	double(*func)(void *, float, double, void *);
CODE:
	func   = INT2PTR(double(*)(void *, float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2, p3);
OUTPUT:
	RETVAL

short
nci_spfdp( c_func, p0, f1, d2, p3 )
	SV* c_func
	void * p0
	float f1
	double d2
	void * p3
PREINIT:
	short(*func)(void *, float, double, void *);
CODE:
	func   = INT2PTR(short(*)(void *, float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2, p3);
OUTPUT:
	RETVAL

float
nci_fpfdp( c_func, p0, f1, d2, p3 )
	SV* c_func
	void * p0
	float f1
	double d2
	void * p3
PREINIT:
	float(*func)(void *, float, double, void *);
CODE:
	func   = INT2PTR(float(*)(void *, float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2, p3);
OUTPUT:
	RETVAL

char *
nci_tpfdp( c_func, p0, f1, d2, p3 )
	SV* c_func
	void * p0
	float f1
	double d2
	void * p3
PREINIT:
	char *(*func)(void *, float, double, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2, p3);
OUTPUT:
	RETVAL

int
nci_ipfdp( c_func, p0, f1, d2, p3 )
	SV* c_func
	void * p0
	float f1
	double d2
	void * p3
PREINIT:
	int(*func)(void *, float, double, void *);
CODE:
	func   = INT2PTR(int(*)(void *, float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2, p3);
OUTPUT:
	RETVAL

void *
nci_pvfdp( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvfdp( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvfdp( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svfdp( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvfdp( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvfdp( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivfdp( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdfdp( c_func, d0, f1, d2, p3 )
	SV* c_func
	double d0
	float f1
	double d2
	void * p3
PREINIT:
	void *(*func)(double, float, double, void *);
CODE:
	func   = INT2PTR(void *(*)(double, float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2, p3);
OUTPUT:
	RETVAL

void
nci_vdfdp( c_func, d0, f1, d2, p3 )
	SV* c_func
	double d0
	float f1
	double d2
	void * p3
PREINIT:
	void(*func)(double, float, double, void *);
CODE:
	func   = INT2PTR(void(*)(double, float, double, void *), SvIV(c_func) );
	(*func)(d0, f1, d2, p3);

double
nci_ddfdp( c_func, d0, f1, d2, p3 )
	SV* c_func
	double d0
	float f1
	double d2
	void * p3
PREINIT:
	double(*func)(double, float, double, void *);
CODE:
	func   = INT2PTR(double(*)(double, float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2, p3);
OUTPUT:
	RETVAL

short
nci_sdfdp( c_func, d0, f1, d2, p3 )
	SV* c_func
	double d0
	float f1
	double d2
	void * p3
PREINIT:
	short(*func)(double, float, double, void *);
CODE:
	func   = INT2PTR(short(*)(double, float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2, p3);
OUTPUT:
	RETVAL

float
nci_fdfdp( c_func, d0, f1, d2, p3 )
	SV* c_func
	double d0
	float f1
	double d2
	void * p3
PREINIT:
	float(*func)(double, float, double, void *);
CODE:
	func   = INT2PTR(float(*)(double, float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2, p3);
OUTPUT:
	RETVAL

char *
nci_tdfdp( c_func, d0, f1, d2, p3 )
	SV* c_func
	double d0
	float f1
	double d2
	void * p3
PREINIT:
	char *(*func)(double, float, double, void *);
CODE:
	func   = INT2PTR(char *(*)(double, float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2, p3);
OUTPUT:
	RETVAL

int
nci_idfdp( c_func, d0, f1, d2, p3 )
	SV* c_func
	double d0
	float f1
	double d2
	void * p3
PREINIT:
	int(*func)(double, float, double, void *);
CODE:
	func   = INT2PTR(int(*)(double, float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2, p3);
OUTPUT:
	RETVAL

void *
nci_psfdp( c_func, s0, f1, d2, p3 )
	SV* c_func
	short s0
	float f1
	double d2
	void * p3
PREINIT:
	void *(*func)(short, float, double, void *);
CODE:
	func   = INT2PTR(void *(*)(short, float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2, p3);
OUTPUT:
	RETVAL

void
nci_vsfdp( c_func, s0, f1, d2, p3 )
	SV* c_func
	short s0
	float f1
	double d2
	void * p3
PREINIT:
	void(*func)(short, float, double, void *);
CODE:
	func   = INT2PTR(void(*)(short, float, double, void *), SvIV(c_func) );
	(*func)(s0, f1, d2, p3);

double
nci_dsfdp( c_func, s0, f1, d2, p3 )
	SV* c_func
	short s0
	float f1
	double d2
	void * p3
PREINIT:
	double(*func)(short, float, double, void *);
CODE:
	func   = INT2PTR(double(*)(short, float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2, p3);
OUTPUT:
	RETVAL

short
nci_ssfdp( c_func, s0, f1, d2, p3 )
	SV* c_func
	short s0
	float f1
	double d2
	void * p3
PREINIT:
	short(*func)(short, float, double, void *);
CODE:
	func   = INT2PTR(short(*)(short, float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2, p3);
OUTPUT:
	RETVAL

float
nci_fsfdp( c_func, s0, f1, d2, p3 )
	SV* c_func
	short s0
	float f1
	double d2
	void * p3
PREINIT:
	float(*func)(short, float, double, void *);
CODE:
	func   = INT2PTR(float(*)(short, float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2, p3);
OUTPUT:
	RETVAL

char *
nci_tsfdp( c_func, s0, f1, d2, p3 )
	SV* c_func
	short s0
	float f1
	double d2
	void * p3
PREINIT:
	char *(*func)(short, float, double, void *);
CODE:
	func   = INT2PTR(char *(*)(short, float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2, p3);
OUTPUT:
	RETVAL

int
nci_isfdp( c_func, s0, f1, d2, p3 )
	SV* c_func
	short s0
	float f1
	double d2
	void * p3
PREINIT:
	int(*func)(short, float, double, void *);
CODE:
	func   = INT2PTR(int(*)(short, float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2, p3);
OUTPUT:
	RETVAL

void *
nci_pffdp( c_func, f0, f1, d2, p3 )
	SV* c_func
	float f0
	float f1
	double d2
	void * p3
PREINIT:
	void *(*func)(float, float, double, void *);
CODE:
	func   = INT2PTR(void *(*)(float, float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2, p3);
OUTPUT:
	RETVAL

void
nci_vffdp( c_func, f0, f1, d2, p3 )
	SV* c_func
	float f0
	float f1
	double d2
	void * p3
PREINIT:
	void(*func)(float, float, double, void *);
CODE:
	func   = INT2PTR(void(*)(float, float, double, void *), SvIV(c_func) );
	(*func)(f0, f1, d2, p3);

double
nci_dffdp( c_func, f0, f1, d2, p3 )
	SV* c_func
	float f0
	float f1
	double d2
	void * p3
PREINIT:
	double(*func)(float, float, double, void *);
CODE:
	func   = INT2PTR(double(*)(float, float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2, p3);
OUTPUT:
	RETVAL

short
nci_sffdp( c_func, f0, f1, d2, p3 )
	SV* c_func
	float f0
	float f1
	double d2
	void * p3
PREINIT:
	short(*func)(float, float, double, void *);
CODE:
	func   = INT2PTR(short(*)(float, float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2, p3);
OUTPUT:
	RETVAL

float
nci_fffdp( c_func, f0, f1, d2, p3 )
	SV* c_func
	float f0
	float f1
	double d2
	void * p3
PREINIT:
	float(*func)(float, float, double, void *);
CODE:
	func   = INT2PTR(float(*)(float, float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2, p3);
OUTPUT:
	RETVAL

char *
nci_tffdp( c_func, f0, f1, d2, p3 )
	SV* c_func
	float f0
	float f1
	double d2
	void * p3
PREINIT:
	char *(*func)(float, float, double, void *);
CODE:
	func   = INT2PTR(char *(*)(float, float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2, p3);
OUTPUT:
	RETVAL

int
nci_iffdp( c_func, f0, f1, d2, p3 )
	SV* c_func
	float f0
	float f1
	double d2
	void * p3
PREINIT:
	int(*func)(float, float, double, void *);
CODE:
	func   = INT2PTR(int(*)(float, float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2, p3);
OUTPUT:
	RETVAL

void *
nci_ptfdp( c_func, t0, f1, d2, p3 )
	SV* c_func
	char * t0
	float f1
	double d2
	void * p3
PREINIT:
	void *(*func)(char *, float, double, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2, p3);
OUTPUT:
	RETVAL

void
nci_vtfdp( c_func, t0, f1, d2, p3 )
	SV* c_func
	char * t0
	float f1
	double d2
	void * p3
PREINIT:
	void(*func)(char *, float, double, void *);
CODE:
	func   = INT2PTR(void(*)(char *, float, double, void *), SvIV(c_func) );
	(*func)(t0, f1, d2, p3);

double
nci_dtfdp( c_func, t0, f1, d2, p3 )
	SV* c_func
	char * t0
	float f1
	double d2
	void * p3
PREINIT:
	double(*func)(char *, float, double, void *);
CODE:
	func   = INT2PTR(double(*)(char *, float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2, p3);
OUTPUT:
	RETVAL

short
nci_stfdp( c_func, t0, f1, d2, p3 )
	SV* c_func
	char * t0
	float f1
	double d2
	void * p3
PREINIT:
	short(*func)(char *, float, double, void *);
CODE:
	func   = INT2PTR(short(*)(char *, float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2, p3);
OUTPUT:
	RETVAL

float
nci_ftfdp( c_func, t0, f1, d2, p3 )
	SV* c_func
	char * t0
	float f1
	double d2
	void * p3
PREINIT:
	float(*func)(char *, float, double, void *);
CODE:
	func   = INT2PTR(float(*)(char *, float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2, p3);
OUTPUT:
	RETVAL

char *
nci_ttfdp( c_func, t0, f1, d2, p3 )
	SV* c_func
	char * t0
	float f1
	double d2
	void * p3
PREINIT:
	char *(*func)(char *, float, double, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2, p3);
OUTPUT:
	RETVAL

int
nci_itfdp( c_func, t0, f1, d2, p3 )
	SV* c_func
	char * t0
	float f1
	double d2
	void * p3
PREINIT:
	int(*func)(char *, float, double, void *);
CODE:
	func   = INT2PTR(int(*)(char *, float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2, p3);
OUTPUT:
	RETVAL

void *
nci_pifdp( c_func, i0, f1, d2, p3 )
	SV* c_func
	int i0
	float f1
	double d2
	void * p3
PREINIT:
	void *(*func)(int, float, double, void *);
CODE:
	func   = INT2PTR(void *(*)(int, float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2, p3);
OUTPUT:
	RETVAL

void
nci_vifdp( c_func, i0, f1, d2, p3 )
	SV* c_func
	int i0
	float f1
	double d2
	void * p3
PREINIT:
	void(*func)(int, float, double, void *);
CODE:
	func   = INT2PTR(void(*)(int, float, double, void *), SvIV(c_func) );
	(*func)(i0, f1, d2, p3);

double
nci_difdp( c_func, i0, f1, d2, p3 )
	SV* c_func
	int i0
	float f1
	double d2
	void * p3
PREINIT:
	double(*func)(int, float, double, void *);
CODE:
	func   = INT2PTR(double(*)(int, float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2, p3);
OUTPUT:
	RETVAL

short
nci_sifdp( c_func, i0, f1, d2, p3 )
	SV* c_func
	int i0
	float f1
	double d2
	void * p3
PREINIT:
	short(*func)(int, float, double, void *);
CODE:
	func   = INT2PTR(short(*)(int, float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2, p3);
OUTPUT:
	RETVAL

float
nci_fifdp( c_func, i0, f1, d2, p3 )
	SV* c_func
	int i0
	float f1
	double d2
	void * p3
PREINIT:
	float(*func)(int, float, double, void *);
CODE:
	func   = INT2PTR(float(*)(int, float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2, p3);
OUTPUT:
	RETVAL

char *
nci_tifdp( c_func, i0, f1, d2, p3 )
	SV* c_func
	int i0
	float f1
	double d2
	void * p3
PREINIT:
	char *(*func)(int, float, double, void *);
CODE:
	func   = INT2PTR(char *(*)(int, float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2, p3);
OUTPUT:
	RETVAL

int
nci_iifdp( c_func, i0, f1, d2, p3 )
	SV* c_func
	int i0
	float f1
	double d2
	void * p3
PREINIT:
	int(*func)(int, float, double, void *);
CODE:
	func   = INT2PTR(int(*)(int, float, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2, p3);
OUTPUT:
	RETVAL

void *
nci_pptdp( c_func, p0, t1, d2, p3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	void * p3
PREINIT:
	void *(*func)(void *, char *, double, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2, p3);
OUTPUT:
	RETVAL

void
nci_vptdp( c_func, p0, t1, d2, p3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	void * p3
PREINIT:
	void(*func)(void *, char *, double, void *);
CODE:
	func   = INT2PTR(void(*)(void *, char *, double, void *), SvIV(c_func) );
	(*func)(p0, t1, d2, p3);

double
nci_dptdp( c_func, p0, t1, d2, p3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	void * p3
PREINIT:
	double(*func)(void *, char *, double, void *);
CODE:
	func   = INT2PTR(double(*)(void *, char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2, p3);
OUTPUT:
	RETVAL

short
nci_sptdp( c_func, p0, t1, d2, p3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	void * p3
PREINIT:
	short(*func)(void *, char *, double, void *);
CODE:
	func   = INT2PTR(short(*)(void *, char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2, p3);
OUTPUT:
	RETVAL

float
nci_fptdp( c_func, p0, t1, d2, p3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	void * p3
PREINIT:
	float(*func)(void *, char *, double, void *);
CODE:
	func   = INT2PTR(float(*)(void *, char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2, p3);
OUTPUT:
	RETVAL

char *
nci_tptdp( c_func, p0, t1, d2, p3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	void * p3
PREINIT:
	char *(*func)(void *, char *, double, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2, p3);
OUTPUT:
	RETVAL

int
nci_iptdp( c_func, p0, t1, d2, p3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	void * p3
PREINIT:
	int(*func)(void *, char *, double, void *);
CODE:
	func   = INT2PTR(int(*)(void *, char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2, p3);
OUTPUT:
	RETVAL

void *
nci_pvtdp( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvtdp( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvtdp( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svtdp( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvtdp( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvtdp( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivtdp( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdtdp( c_func, d0, t1, d2, p3 )
	SV* c_func
	double d0
	char * t1
	double d2
	void * p3
PREINIT:
	void *(*func)(double, char *, double, void *);
CODE:
	func   = INT2PTR(void *(*)(double, char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2, p3);
OUTPUT:
	RETVAL

void
nci_vdtdp( c_func, d0, t1, d2, p3 )
	SV* c_func
	double d0
	char * t1
	double d2
	void * p3
PREINIT:
	void(*func)(double, char *, double, void *);
CODE:
	func   = INT2PTR(void(*)(double, char *, double, void *), SvIV(c_func) );
	(*func)(d0, t1, d2, p3);

double
nci_ddtdp( c_func, d0, t1, d2, p3 )
	SV* c_func
	double d0
	char * t1
	double d2
	void * p3
PREINIT:
	double(*func)(double, char *, double, void *);
CODE:
	func   = INT2PTR(double(*)(double, char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2, p3);
OUTPUT:
	RETVAL

short
nci_sdtdp( c_func, d0, t1, d2, p3 )
	SV* c_func
	double d0
	char * t1
	double d2
	void * p3
PREINIT:
	short(*func)(double, char *, double, void *);
CODE:
	func   = INT2PTR(short(*)(double, char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2, p3);
OUTPUT:
	RETVAL

float
nci_fdtdp( c_func, d0, t1, d2, p3 )
	SV* c_func
	double d0
	char * t1
	double d2
	void * p3
PREINIT:
	float(*func)(double, char *, double, void *);
CODE:
	func   = INT2PTR(float(*)(double, char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2, p3);
OUTPUT:
	RETVAL

char *
nci_tdtdp( c_func, d0, t1, d2, p3 )
	SV* c_func
	double d0
	char * t1
	double d2
	void * p3
PREINIT:
	char *(*func)(double, char *, double, void *);
CODE:
	func   = INT2PTR(char *(*)(double, char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2, p3);
OUTPUT:
	RETVAL

int
nci_idtdp( c_func, d0, t1, d2, p3 )
	SV* c_func
	double d0
	char * t1
	double d2
	void * p3
PREINIT:
	int(*func)(double, char *, double, void *);
CODE:
	func   = INT2PTR(int(*)(double, char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2, p3);
OUTPUT:
	RETVAL

void *
nci_pstdp( c_func, s0, t1, d2, p3 )
	SV* c_func
	short s0
	char * t1
	double d2
	void * p3
PREINIT:
	void *(*func)(short, char *, double, void *);
CODE:
	func   = INT2PTR(void *(*)(short, char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2, p3);
OUTPUT:
	RETVAL

void
nci_vstdp( c_func, s0, t1, d2, p3 )
	SV* c_func
	short s0
	char * t1
	double d2
	void * p3
PREINIT:
	void(*func)(short, char *, double, void *);
CODE:
	func   = INT2PTR(void(*)(short, char *, double, void *), SvIV(c_func) );
	(*func)(s0, t1, d2, p3);

double
nci_dstdp( c_func, s0, t1, d2, p3 )
	SV* c_func
	short s0
	char * t1
	double d2
	void * p3
PREINIT:
	double(*func)(short, char *, double, void *);
CODE:
	func   = INT2PTR(double(*)(short, char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2, p3);
OUTPUT:
	RETVAL

short
nci_sstdp( c_func, s0, t1, d2, p3 )
	SV* c_func
	short s0
	char * t1
	double d2
	void * p3
PREINIT:
	short(*func)(short, char *, double, void *);
CODE:
	func   = INT2PTR(short(*)(short, char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2, p3);
OUTPUT:
	RETVAL

float
nci_fstdp( c_func, s0, t1, d2, p3 )
	SV* c_func
	short s0
	char * t1
	double d2
	void * p3
PREINIT:
	float(*func)(short, char *, double, void *);
CODE:
	func   = INT2PTR(float(*)(short, char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2, p3);
OUTPUT:
	RETVAL

char *
nci_tstdp( c_func, s0, t1, d2, p3 )
	SV* c_func
	short s0
	char * t1
	double d2
	void * p3
PREINIT:
	char *(*func)(short, char *, double, void *);
CODE:
	func   = INT2PTR(char *(*)(short, char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2, p3);
OUTPUT:
	RETVAL

int
nci_istdp( c_func, s0, t1, d2, p3 )
	SV* c_func
	short s0
	char * t1
	double d2
	void * p3
PREINIT:
	int(*func)(short, char *, double, void *);
CODE:
	func   = INT2PTR(int(*)(short, char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2, p3);
OUTPUT:
	RETVAL

void *
nci_pftdp( c_func, f0, t1, d2, p3 )
	SV* c_func
	float f0
	char * t1
	double d2
	void * p3
PREINIT:
	void *(*func)(float, char *, double, void *);
CODE:
	func   = INT2PTR(void *(*)(float, char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2, p3);
OUTPUT:
	RETVAL

void
nci_vftdp( c_func, f0, t1, d2, p3 )
	SV* c_func
	float f0
	char * t1
	double d2
	void * p3
PREINIT:
	void(*func)(float, char *, double, void *);
CODE:
	func   = INT2PTR(void(*)(float, char *, double, void *), SvIV(c_func) );
	(*func)(f0, t1, d2, p3);

double
nci_dftdp( c_func, f0, t1, d2, p3 )
	SV* c_func
	float f0
	char * t1
	double d2
	void * p3
PREINIT:
	double(*func)(float, char *, double, void *);
CODE:
	func   = INT2PTR(double(*)(float, char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2, p3);
OUTPUT:
	RETVAL

short
nci_sftdp( c_func, f0, t1, d2, p3 )
	SV* c_func
	float f0
	char * t1
	double d2
	void * p3
PREINIT:
	short(*func)(float, char *, double, void *);
CODE:
	func   = INT2PTR(short(*)(float, char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2, p3);
OUTPUT:
	RETVAL

float
nci_fftdp( c_func, f0, t1, d2, p3 )
	SV* c_func
	float f0
	char * t1
	double d2
	void * p3
PREINIT:
	float(*func)(float, char *, double, void *);
CODE:
	func   = INT2PTR(float(*)(float, char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2, p3);
OUTPUT:
	RETVAL

char *
nci_tftdp( c_func, f0, t1, d2, p3 )
	SV* c_func
	float f0
	char * t1
	double d2
	void * p3
PREINIT:
	char *(*func)(float, char *, double, void *);
CODE:
	func   = INT2PTR(char *(*)(float, char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2, p3);
OUTPUT:
	RETVAL

int
nci_iftdp( c_func, f0, t1, d2, p3 )
	SV* c_func
	float f0
	char * t1
	double d2
	void * p3
PREINIT:
	int(*func)(float, char *, double, void *);
CODE:
	func   = INT2PTR(int(*)(float, char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2, p3);
OUTPUT:
	RETVAL

void *
nci_pttdp( c_func, t0, t1, d2, p3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	void * p3
PREINIT:
	void *(*func)(char *, char *, double, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2, p3);
OUTPUT:
	RETVAL

void
nci_vttdp( c_func, t0, t1, d2, p3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	void * p3
PREINIT:
	void(*func)(char *, char *, double, void *);
CODE:
	func   = INT2PTR(void(*)(char *, char *, double, void *), SvIV(c_func) );
	(*func)(t0, t1, d2, p3);

double
nci_dttdp( c_func, t0, t1, d2, p3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	void * p3
PREINIT:
	double(*func)(char *, char *, double, void *);
CODE:
	func   = INT2PTR(double(*)(char *, char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2, p3);
OUTPUT:
	RETVAL

short
nci_sttdp( c_func, t0, t1, d2, p3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	void * p3
PREINIT:
	short(*func)(char *, char *, double, void *);
CODE:
	func   = INT2PTR(short(*)(char *, char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2, p3);
OUTPUT:
	RETVAL

float
nci_fttdp( c_func, t0, t1, d2, p3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	void * p3
PREINIT:
	float(*func)(char *, char *, double, void *);
CODE:
	func   = INT2PTR(float(*)(char *, char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2, p3);
OUTPUT:
	RETVAL

char *
nci_tttdp( c_func, t0, t1, d2, p3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	void * p3
PREINIT:
	char *(*func)(char *, char *, double, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2, p3);
OUTPUT:
	RETVAL

int
nci_ittdp( c_func, t0, t1, d2, p3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	void * p3
PREINIT:
	int(*func)(char *, char *, double, void *);
CODE:
	func   = INT2PTR(int(*)(char *, char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2, p3);
OUTPUT:
	RETVAL

void *
nci_pitdp( c_func, i0, t1, d2, p3 )
	SV* c_func
	int i0
	char * t1
	double d2
	void * p3
PREINIT:
	void *(*func)(int, char *, double, void *);
CODE:
	func   = INT2PTR(void *(*)(int, char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2, p3);
OUTPUT:
	RETVAL

void
nci_vitdp( c_func, i0, t1, d2, p3 )
	SV* c_func
	int i0
	char * t1
	double d2
	void * p3
PREINIT:
	void(*func)(int, char *, double, void *);
CODE:
	func   = INT2PTR(void(*)(int, char *, double, void *), SvIV(c_func) );
	(*func)(i0, t1, d2, p3);

double
nci_ditdp( c_func, i0, t1, d2, p3 )
	SV* c_func
	int i0
	char * t1
	double d2
	void * p3
PREINIT:
	double(*func)(int, char *, double, void *);
CODE:
	func   = INT2PTR(double(*)(int, char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2, p3);
OUTPUT:
	RETVAL

short
nci_sitdp( c_func, i0, t1, d2, p3 )
	SV* c_func
	int i0
	char * t1
	double d2
	void * p3
PREINIT:
	short(*func)(int, char *, double, void *);
CODE:
	func   = INT2PTR(short(*)(int, char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2, p3);
OUTPUT:
	RETVAL

float
nci_fitdp( c_func, i0, t1, d2, p3 )
	SV* c_func
	int i0
	char * t1
	double d2
	void * p3
PREINIT:
	float(*func)(int, char *, double, void *);
CODE:
	func   = INT2PTR(float(*)(int, char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2, p3);
OUTPUT:
	RETVAL

char *
nci_titdp( c_func, i0, t1, d2, p3 )
	SV* c_func
	int i0
	char * t1
	double d2
	void * p3
PREINIT:
	char *(*func)(int, char *, double, void *);
CODE:
	func   = INT2PTR(char *(*)(int, char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2, p3);
OUTPUT:
	RETVAL

int
nci_iitdp( c_func, i0, t1, d2, p3 )
	SV* c_func
	int i0
	char * t1
	double d2
	void * p3
PREINIT:
	int(*func)(int, char *, double, void *);
CODE:
	func   = INT2PTR(int(*)(int, char *, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2, p3);
OUTPUT:
	RETVAL

void *
nci_ppidp( c_func, p0, i1, d2, p3 )
	SV* c_func
	void * p0
	int i1
	double d2
	void * p3
PREINIT:
	void *(*func)(void *, int, double, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2, p3);
OUTPUT:
	RETVAL

void
nci_vpidp( c_func, p0, i1, d2, p3 )
	SV* c_func
	void * p0
	int i1
	double d2
	void * p3
PREINIT:
	void(*func)(void *, int, double, void *);
CODE:
	func   = INT2PTR(void(*)(void *, int, double, void *), SvIV(c_func) );
	(*func)(p0, i1, d2, p3);

double
nci_dpidp( c_func, p0, i1, d2, p3 )
	SV* c_func
	void * p0
	int i1
	double d2
	void * p3
PREINIT:
	double(*func)(void *, int, double, void *);
CODE:
	func   = INT2PTR(double(*)(void *, int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2, p3);
OUTPUT:
	RETVAL

short
nci_spidp( c_func, p0, i1, d2, p3 )
	SV* c_func
	void * p0
	int i1
	double d2
	void * p3
PREINIT:
	short(*func)(void *, int, double, void *);
CODE:
	func   = INT2PTR(short(*)(void *, int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2, p3);
OUTPUT:
	RETVAL

float
nci_fpidp( c_func, p0, i1, d2, p3 )
	SV* c_func
	void * p0
	int i1
	double d2
	void * p3
PREINIT:
	float(*func)(void *, int, double, void *);
CODE:
	func   = INT2PTR(float(*)(void *, int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2, p3);
OUTPUT:
	RETVAL

char *
nci_tpidp( c_func, p0, i1, d2, p3 )
	SV* c_func
	void * p0
	int i1
	double d2
	void * p3
PREINIT:
	char *(*func)(void *, int, double, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2, p3);
OUTPUT:
	RETVAL

int
nci_ipidp( c_func, p0, i1, d2, p3 )
	SV* c_func
	void * p0
	int i1
	double d2
	void * p3
PREINIT:
	int(*func)(void *, int, double, void *);
CODE:
	func   = INT2PTR(int(*)(void *, int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2, p3);
OUTPUT:
	RETVAL

void *
nci_pvidp( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvidp( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvidp( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svidp( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvidp( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvidp( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ividp( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdidp( c_func, d0, i1, d2, p3 )
	SV* c_func
	double d0
	int i1
	double d2
	void * p3
PREINIT:
	void *(*func)(double, int, double, void *);
CODE:
	func   = INT2PTR(void *(*)(double, int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2, p3);
OUTPUT:
	RETVAL

void
nci_vdidp( c_func, d0, i1, d2, p3 )
	SV* c_func
	double d0
	int i1
	double d2
	void * p3
PREINIT:
	void(*func)(double, int, double, void *);
CODE:
	func   = INT2PTR(void(*)(double, int, double, void *), SvIV(c_func) );
	(*func)(d0, i1, d2, p3);

double
nci_ddidp( c_func, d0, i1, d2, p3 )
	SV* c_func
	double d0
	int i1
	double d2
	void * p3
PREINIT:
	double(*func)(double, int, double, void *);
CODE:
	func   = INT2PTR(double(*)(double, int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2, p3);
OUTPUT:
	RETVAL

short
nci_sdidp( c_func, d0, i1, d2, p3 )
	SV* c_func
	double d0
	int i1
	double d2
	void * p3
PREINIT:
	short(*func)(double, int, double, void *);
CODE:
	func   = INT2PTR(short(*)(double, int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2, p3);
OUTPUT:
	RETVAL

float
nci_fdidp( c_func, d0, i1, d2, p3 )
	SV* c_func
	double d0
	int i1
	double d2
	void * p3
PREINIT:
	float(*func)(double, int, double, void *);
CODE:
	func   = INT2PTR(float(*)(double, int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2, p3);
OUTPUT:
	RETVAL

char *
nci_tdidp( c_func, d0, i1, d2, p3 )
	SV* c_func
	double d0
	int i1
	double d2
	void * p3
PREINIT:
	char *(*func)(double, int, double, void *);
CODE:
	func   = INT2PTR(char *(*)(double, int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2, p3);
OUTPUT:
	RETVAL

int
nci_ididp( c_func, d0, i1, d2, p3 )
	SV* c_func
	double d0
	int i1
	double d2
	void * p3
PREINIT:
	int(*func)(double, int, double, void *);
CODE:
	func   = INT2PTR(int(*)(double, int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2, p3);
OUTPUT:
	RETVAL

void *
nci_psidp( c_func, s0, i1, d2, p3 )
	SV* c_func
	short s0
	int i1
	double d2
	void * p3
PREINIT:
	void *(*func)(short, int, double, void *);
CODE:
	func   = INT2PTR(void *(*)(short, int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2, p3);
OUTPUT:
	RETVAL

void
nci_vsidp( c_func, s0, i1, d2, p3 )
	SV* c_func
	short s0
	int i1
	double d2
	void * p3
PREINIT:
	void(*func)(short, int, double, void *);
CODE:
	func   = INT2PTR(void(*)(short, int, double, void *), SvIV(c_func) );
	(*func)(s0, i1, d2, p3);

double
nci_dsidp( c_func, s0, i1, d2, p3 )
	SV* c_func
	short s0
	int i1
	double d2
	void * p3
PREINIT:
	double(*func)(short, int, double, void *);
CODE:
	func   = INT2PTR(double(*)(short, int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2, p3);
OUTPUT:
	RETVAL

short
nci_ssidp( c_func, s0, i1, d2, p3 )
	SV* c_func
	short s0
	int i1
	double d2
	void * p3
PREINIT:
	short(*func)(short, int, double, void *);
CODE:
	func   = INT2PTR(short(*)(short, int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2, p3);
OUTPUT:
	RETVAL

float
nci_fsidp( c_func, s0, i1, d2, p3 )
	SV* c_func
	short s0
	int i1
	double d2
	void * p3
PREINIT:
	float(*func)(short, int, double, void *);
CODE:
	func   = INT2PTR(float(*)(short, int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2, p3);
OUTPUT:
	RETVAL

char *
nci_tsidp( c_func, s0, i1, d2, p3 )
	SV* c_func
	short s0
	int i1
	double d2
	void * p3
PREINIT:
	char *(*func)(short, int, double, void *);
CODE:
	func   = INT2PTR(char *(*)(short, int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2, p3);
OUTPUT:
	RETVAL

int
nci_isidp( c_func, s0, i1, d2, p3 )
	SV* c_func
	short s0
	int i1
	double d2
	void * p3
PREINIT:
	int(*func)(short, int, double, void *);
CODE:
	func   = INT2PTR(int(*)(short, int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2, p3);
OUTPUT:
	RETVAL

void *
nci_pfidp( c_func, f0, i1, d2, p3 )
	SV* c_func
	float f0
	int i1
	double d2
	void * p3
PREINIT:
	void *(*func)(float, int, double, void *);
CODE:
	func   = INT2PTR(void *(*)(float, int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2, p3);
OUTPUT:
	RETVAL

void
nci_vfidp( c_func, f0, i1, d2, p3 )
	SV* c_func
	float f0
	int i1
	double d2
	void * p3
PREINIT:
	void(*func)(float, int, double, void *);
CODE:
	func   = INT2PTR(void(*)(float, int, double, void *), SvIV(c_func) );
	(*func)(f0, i1, d2, p3);

double
nci_dfidp( c_func, f0, i1, d2, p3 )
	SV* c_func
	float f0
	int i1
	double d2
	void * p3
PREINIT:
	double(*func)(float, int, double, void *);
CODE:
	func   = INT2PTR(double(*)(float, int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2, p3);
OUTPUT:
	RETVAL

short
nci_sfidp( c_func, f0, i1, d2, p3 )
	SV* c_func
	float f0
	int i1
	double d2
	void * p3
PREINIT:
	short(*func)(float, int, double, void *);
CODE:
	func   = INT2PTR(short(*)(float, int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2, p3);
OUTPUT:
	RETVAL

float
nci_ffidp( c_func, f0, i1, d2, p3 )
	SV* c_func
	float f0
	int i1
	double d2
	void * p3
PREINIT:
	float(*func)(float, int, double, void *);
CODE:
	func   = INT2PTR(float(*)(float, int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2, p3);
OUTPUT:
	RETVAL

char *
nci_tfidp( c_func, f0, i1, d2, p3 )
	SV* c_func
	float f0
	int i1
	double d2
	void * p3
PREINIT:
	char *(*func)(float, int, double, void *);
CODE:
	func   = INT2PTR(char *(*)(float, int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2, p3);
OUTPUT:
	RETVAL

int
nci_ifidp( c_func, f0, i1, d2, p3 )
	SV* c_func
	float f0
	int i1
	double d2
	void * p3
PREINIT:
	int(*func)(float, int, double, void *);
CODE:
	func   = INT2PTR(int(*)(float, int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2, p3);
OUTPUT:
	RETVAL

void *
nci_ptidp( c_func, t0, i1, d2, p3 )
	SV* c_func
	char * t0
	int i1
	double d2
	void * p3
PREINIT:
	void *(*func)(char *, int, double, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2, p3);
OUTPUT:
	RETVAL

void
nci_vtidp( c_func, t0, i1, d2, p3 )
	SV* c_func
	char * t0
	int i1
	double d2
	void * p3
PREINIT:
	void(*func)(char *, int, double, void *);
CODE:
	func   = INT2PTR(void(*)(char *, int, double, void *), SvIV(c_func) );
	(*func)(t0, i1, d2, p3);

double
nci_dtidp( c_func, t0, i1, d2, p3 )
	SV* c_func
	char * t0
	int i1
	double d2
	void * p3
PREINIT:
	double(*func)(char *, int, double, void *);
CODE:
	func   = INT2PTR(double(*)(char *, int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2, p3);
OUTPUT:
	RETVAL

short
nci_stidp( c_func, t0, i1, d2, p3 )
	SV* c_func
	char * t0
	int i1
	double d2
	void * p3
PREINIT:
	short(*func)(char *, int, double, void *);
CODE:
	func   = INT2PTR(short(*)(char *, int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2, p3);
OUTPUT:
	RETVAL

float
nci_ftidp( c_func, t0, i1, d2, p3 )
	SV* c_func
	char * t0
	int i1
	double d2
	void * p3
PREINIT:
	float(*func)(char *, int, double, void *);
CODE:
	func   = INT2PTR(float(*)(char *, int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2, p3);
OUTPUT:
	RETVAL

char *
nci_ttidp( c_func, t0, i1, d2, p3 )
	SV* c_func
	char * t0
	int i1
	double d2
	void * p3
PREINIT:
	char *(*func)(char *, int, double, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2, p3);
OUTPUT:
	RETVAL

int
nci_itidp( c_func, t0, i1, d2, p3 )
	SV* c_func
	char * t0
	int i1
	double d2
	void * p3
PREINIT:
	int(*func)(char *, int, double, void *);
CODE:
	func   = INT2PTR(int(*)(char *, int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2, p3);
OUTPUT:
	RETVAL

void *
nci_piidp( c_func, i0, i1, d2, p3 )
	SV* c_func
	int i0
	int i1
	double d2
	void * p3
PREINIT:
	void *(*func)(int, int, double, void *);
CODE:
	func   = INT2PTR(void *(*)(int, int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2, p3);
OUTPUT:
	RETVAL

void
nci_viidp( c_func, i0, i1, d2, p3 )
	SV* c_func
	int i0
	int i1
	double d2
	void * p3
PREINIT:
	void(*func)(int, int, double, void *);
CODE:
	func   = INT2PTR(void(*)(int, int, double, void *), SvIV(c_func) );
	(*func)(i0, i1, d2, p3);

double
nci_diidp( c_func, i0, i1, d2, p3 )
	SV* c_func
	int i0
	int i1
	double d2
	void * p3
PREINIT:
	double(*func)(int, int, double, void *);
CODE:
	func   = INT2PTR(double(*)(int, int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2, p3);
OUTPUT:
	RETVAL

short
nci_siidp( c_func, i0, i1, d2, p3 )
	SV* c_func
	int i0
	int i1
	double d2
	void * p3
PREINIT:
	short(*func)(int, int, double, void *);
CODE:
	func   = INT2PTR(short(*)(int, int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2, p3);
OUTPUT:
	RETVAL

float
nci_fiidp( c_func, i0, i1, d2, p3 )
	SV* c_func
	int i0
	int i1
	double d2
	void * p3
PREINIT:
	float(*func)(int, int, double, void *);
CODE:
	func   = INT2PTR(float(*)(int, int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2, p3);
OUTPUT:
	RETVAL

char *
nci_tiidp( c_func, i0, i1, d2, p3 )
	SV* c_func
	int i0
	int i1
	double d2
	void * p3
PREINIT:
	char *(*func)(int, int, double, void *);
CODE:
	func   = INT2PTR(char *(*)(int, int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2, p3);
OUTPUT:
	RETVAL

int
nci_iiidp( c_func, i0, i1, d2, p3 )
	SV* c_func
	int i0
	int i1
	double d2
	void * p3
PREINIT:
	int(*func)(int, int, double, void *);
CODE:
	func   = INT2PTR(int(*)(int, int, double, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2, p3);
OUTPUT:
	RETVAL

void *
nci_pppsp( c_func, p0, p1, s2, p3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	void * p3
PREINIT:
	void *(*func)(void *, void *, short, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2, p3);
OUTPUT:
	RETVAL

void
nci_vppsp( c_func, p0, p1, s2, p3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	void * p3
PREINIT:
	void(*func)(void *, void *, short, void *);
CODE:
	func   = INT2PTR(void(*)(void *, void *, short, void *), SvIV(c_func) );
	(*func)(p0, p1, s2, p3);

double
nci_dppsp( c_func, p0, p1, s2, p3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	void * p3
PREINIT:
	double(*func)(void *, void *, short, void *);
CODE:
	func   = INT2PTR(double(*)(void *, void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2, p3);
OUTPUT:
	RETVAL

short
nci_sppsp( c_func, p0, p1, s2, p3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	void * p3
PREINIT:
	short(*func)(void *, void *, short, void *);
CODE:
	func   = INT2PTR(short(*)(void *, void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2, p3);
OUTPUT:
	RETVAL

float
nci_fppsp( c_func, p0, p1, s2, p3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	void * p3
PREINIT:
	float(*func)(void *, void *, short, void *);
CODE:
	func   = INT2PTR(float(*)(void *, void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2, p3);
OUTPUT:
	RETVAL

char *
nci_tppsp( c_func, p0, p1, s2, p3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	void * p3
PREINIT:
	char *(*func)(void *, void *, short, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2, p3);
OUTPUT:
	RETVAL

int
nci_ippsp( c_func, p0, p1, s2, p3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	void * p3
PREINIT:
	int(*func)(void *, void *, short, void *);
CODE:
	func   = INT2PTR(int(*)(void *, void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2, p3);
OUTPUT:
	RETVAL

void *
nci_pvpsp( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvpsp( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvpsp( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svpsp( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvpsp( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvpsp( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivpsp( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdpsp( c_func, d0, p1, s2, p3 )
	SV* c_func
	double d0
	void * p1
	short s2
	void * p3
PREINIT:
	void *(*func)(double, void *, short, void *);
CODE:
	func   = INT2PTR(void *(*)(double, void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2, p3);
OUTPUT:
	RETVAL

void
nci_vdpsp( c_func, d0, p1, s2, p3 )
	SV* c_func
	double d0
	void * p1
	short s2
	void * p3
PREINIT:
	void(*func)(double, void *, short, void *);
CODE:
	func   = INT2PTR(void(*)(double, void *, short, void *), SvIV(c_func) );
	(*func)(d0, p1, s2, p3);

double
nci_ddpsp( c_func, d0, p1, s2, p3 )
	SV* c_func
	double d0
	void * p1
	short s2
	void * p3
PREINIT:
	double(*func)(double, void *, short, void *);
CODE:
	func   = INT2PTR(double(*)(double, void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2, p3);
OUTPUT:
	RETVAL

short
nci_sdpsp( c_func, d0, p1, s2, p3 )
	SV* c_func
	double d0
	void * p1
	short s2
	void * p3
PREINIT:
	short(*func)(double, void *, short, void *);
CODE:
	func   = INT2PTR(short(*)(double, void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2, p3);
OUTPUT:
	RETVAL

float
nci_fdpsp( c_func, d0, p1, s2, p3 )
	SV* c_func
	double d0
	void * p1
	short s2
	void * p3
PREINIT:
	float(*func)(double, void *, short, void *);
CODE:
	func   = INT2PTR(float(*)(double, void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2, p3);
OUTPUT:
	RETVAL

char *
nci_tdpsp( c_func, d0, p1, s2, p3 )
	SV* c_func
	double d0
	void * p1
	short s2
	void * p3
PREINIT:
	char *(*func)(double, void *, short, void *);
CODE:
	func   = INT2PTR(char *(*)(double, void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2, p3);
OUTPUT:
	RETVAL

int
nci_idpsp( c_func, d0, p1, s2, p3 )
	SV* c_func
	double d0
	void * p1
	short s2
	void * p3
PREINIT:
	int(*func)(double, void *, short, void *);
CODE:
	func   = INT2PTR(int(*)(double, void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2, p3);
OUTPUT:
	RETVAL

void *
nci_pspsp( c_func, s0, p1, s2, p3 )
	SV* c_func
	short s0
	void * p1
	short s2
	void * p3
PREINIT:
	void *(*func)(short, void *, short, void *);
CODE:
	func   = INT2PTR(void *(*)(short, void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2, p3);
OUTPUT:
	RETVAL

void
nci_vspsp( c_func, s0, p1, s2, p3 )
	SV* c_func
	short s0
	void * p1
	short s2
	void * p3
PREINIT:
	void(*func)(short, void *, short, void *);
CODE:
	func   = INT2PTR(void(*)(short, void *, short, void *), SvIV(c_func) );
	(*func)(s0, p1, s2, p3);

double
nci_dspsp( c_func, s0, p1, s2, p3 )
	SV* c_func
	short s0
	void * p1
	short s2
	void * p3
PREINIT:
	double(*func)(short, void *, short, void *);
CODE:
	func   = INT2PTR(double(*)(short, void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2, p3);
OUTPUT:
	RETVAL

short
nci_sspsp( c_func, s0, p1, s2, p3 )
	SV* c_func
	short s0
	void * p1
	short s2
	void * p3
PREINIT:
	short(*func)(short, void *, short, void *);
CODE:
	func   = INT2PTR(short(*)(short, void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2, p3);
OUTPUT:
	RETVAL

float
nci_fspsp( c_func, s0, p1, s2, p3 )
	SV* c_func
	short s0
	void * p1
	short s2
	void * p3
PREINIT:
	float(*func)(short, void *, short, void *);
CODE:
	func   = INT2PTR(float(*)(short, void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2, p3);
OUTPUT:
	RETVAL

char *
nci_tspsp( c_func, s0, p1, s2, p3 )
	SV* c_func
	short s0
	void * p1
	short s2
	void * p3
PREINIT:
	char *(*func)(short, void *, short, void *);
CODE:
	func   = INT2PTR(char *(*)(short, void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2, p3);
OUTPUT:
	RETVAL

int
nci_ispsp( c_func, s0, p1, s2, p3 )
	SV* c_func
	short s0
	void * p1
	short s2
	void * p3
PREINIT:
	int(*func)(short, void *, short, void *);
CODE:
	func   = INT2PTR(int(*)(short, void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2, p3);
OUTPUT:
	RETVAL

void *
nci_pfpsp( c_func, f0, p1, s2, p3 )
	SV* c_func
	float f0
	void * p1
	short s2
	void * p3
PREINIT:
	void *(*func)(float, void *, short, void *);
CODE:
	func   = INT2PTR(void *(*)(float, void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2, p3);
OUTPUT:
	RETVAL

void
nci_vfpsp( c_func, f0, p1, s2, p3 )
	SV* c_func
	float f0
	void * p1
	short s2
	void * p3
PREINIT:
	void(*func)(float, void *, short, void *);
CODE:
	func   = INT2PTR(void(*)(float, void *, short, void *), SvIV(c_func) );
	(*func)(f0, p1, s2, p3);

double
nci_dfpsp( c_func, f0, p1, s2, p3 )
	SV* c_func
	float f0
	void * p1
	short s2
	void * p3
PREINIT:
	double(*func)(float, void *, short, void *);
CODE:
	func   = INT2PTR(double(*)(float, void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2, p3);
OUTPUT:
	RETVAL

short
nci_sfpsp( c_func, f0, p1, s2, p3 )
	SV* c_func
	float f0
	void * p1
	short s2
	void * p3
PREINIT:
	short(*func)(float, void *, short, void *);
CODE:
	func   = INT2PTR(short(*)(float, void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2, p3);
OUTPUT:
	RETVAL

float
nci_ffpsp( c_func, f0, p1, s2, p3 )
	SV* c_func
	float f0
	void * p1
	short s2
	void * p3
PREINIT:
	float(*func)(float, void *, short, void *);
CODE:
	func   = INT2PTR(float(*)(float, void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2, p3);
OUTPUT:
	RETVAL

char *
nci_tfpsp( c_func, f0, p1, s2, p3 )
	SV* c_func
	float f0
	void * p1
	short s2
	void * p3
PREINIT:
	char *(*func)(float, void *, short, void *);
CODE:
	func   = INT2PTR(char *(*)(float, void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2, p3);
OUTPUT:
	RETVAL

int
nci_ifpsp( c_func, f0, p1, s2, p3 )
	SV* c_func
	float f0
	void * p1
	short s2
	void * p3
PREINIT:
	int(*func)(float, void *, short, void *);
CODE:
	func   = INT2PTR(int(*)(float, void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2, p3);
OUTPUT:
	RETVAL

void *
nci_ptpsp( c_func, t0, p1, s2, p3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	void * p3
PREINIT:
	void *(*func)(char *, void *, short, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2, p3);
OUTPUT:
	RETVAL

void
nci_vtpsp( c_func, t0, p1, s2, p3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	void * p3
PREINIT:
	void(*func)(char *, void *, short, void *);
CODE:
	func   = INT2PTR(void(*)(char *, void *, short, void *), SvIV(c_func) );
	(*func)(t0, p1, s2, p3);

double
nci_dtpsp( c_func, t0, p1, s2, p3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	void * p3
PREINIT:
	double(*func)(char *, void *, short, void *);
CODE:
	func   = INT2PTR(double(*)(char *, void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2, p3);
OUTPUT:
	RETVAL

short
nci_stpsp( c_func, t0, p1, s2, p3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	void * p3
PREINIT:
	short(*func)(char *, void *, short, void *);
CODE:
	func   = INT2PTR(short(*)(char *, void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2, p3);
OUTPUT:
	RETVAL

float
nci_ftpsp( c_func, t0, p1, s2, p3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	void * p3
PREINIT:
	float(*func)(char *, void *, short, void *);
CODE:
	func   = INT2PTR(float(*)(char *, void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2, p3);
OUTPUT:
	RETVAL

char *
nci_ttpsp( c_func, t0, p1, s2, p3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	void * p3
PREINIT:
	char *(*func)(char *, void *, short, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2, p3);
OUTPUT:
	RETVAL

int
nci_itpsp( c_func, t0, p1, s2, p3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	void * p3
PREINIT:
	int(*func)(char *, void *, short, void *);
CODE:
	func   = INT2PTR(int(*)(char *, void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2, p3);
OUTPUT:
	RETVAL

void *
nci_pipsp( c_func, i0, p1, s2, p3 )
	SV* c_func
	int i0
	void * p1
	short s2
	void * p3
PREINIT:
	void *(*func)(int, void *, short, void *);
CODE:
	func   = INT2PTR(void *(*)(int, void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2, p3);
OUTPUT:
	RETVAL

void
nci_vipsp( c_func, i0, p1, s2, p3 )
	SV* c_func
	int i0
	void * p1
	short s2
	void * p3
PREINIT:
	void(*func)(int, void *, short, void *);
CODE:
	func   = INT2PTR(void(*)(int, void *, short, void *), SvIV(c_func) );
	(*func)(i0, p1, s2, p3);

double
nci_dipsp( c_func, i0, p1, s2, p3 )
	SV* c_func
	int i0
	void * p1
	short s2
	void * p3
PREINIT:
	double(*func)(int, void *, short, void *);
CODE:
	func   = INT2PTR(double(*)(int, void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2, p3);
OUTPUT:
	RETVAL

short
nci_sipsp( c_func, i0, p1, s2, p3 )
	SV* c_func
	int i0
	void * p1
	short s2
	void * p3
PREINIT:
	short(*func)(int, void *, short, void *);
CODE:
	func   = INT2PTR(short(*)(int, void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2, p3);
OUTPUT:
	RETVAL

float
nci_fipsp( c_func, i0, p1, s2, p3 )
	SV* c_func
	int i0
	void * p1
	short s2
	void * p3
PREINIT:
	float(*func)(int, void *, short, void *);
CODE:
	func   = INT2PTR(float(*)(int, void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2, p3);
OUTPUT:
	RETVAL

char *
nci_tipsp( c_func, i0, p1, s2, p3 )
	SV* c_func
	int i0
	void * p1
	short s2
	void * p3
PREINIT:
	char *(*func)(int, void *, short, void *);
CODE:
	func   = INT2PTR(char *(*)(int, void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2, p3);
OUTPUT:
	RETVAL

int
nci_iipsp( c_func, i0, p1, s2, p3 )
	SV* c_func
	int i0
	void * p1
	short s2
	void * p3
PREINIT:
	int(*func)(int, void *, short, void *);
CODE:
	func   = INT2PTR(int(*)(int, void *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2, p3);
OUTPUT:
	RETVAL

void *
nci_ppdsp( c_func, p0, d1, s2, p3 )
	SV* c_func
	void * p0
	double d1
	short s2
	void * p3
PREINIT:
	void *(*func)(void *, double, short, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2, p3);
OUTPUT:
	RETVAL

void
nci_vpdsp( c_func, p0, d1, s2, p3 )
	SV* c_func
	void * p0
	double d1
	short s2
	void * p3
PREINIT:
	void(*func)(void *, double, short, void *);
CODE:
	func   = INT2PTR(void(*)(void *, double, short, void *), SvIV(c_func) );
	(*func)(p0, d1, s2, p3);

double
nci_dpdsp( c_func, p0, d1, s2, p3 )
	SV* c_func
	void * p0
	double d1
	short s2
	void * p3
PREINIT:
	double(*func)(void *, double, short, void *);
CODE:
	func   = INT2PTR(double(*)(void *, double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2, p3);
OUTPUT:
	RETVAL

short
nci_spdsp( c_func, p0, d1, s2, p3 )
	SV* c_func
	void * p0
	double d1
	short s2
	void * p3
PREINIT:
	short(*func)(void *, double, short, void *);
CODE:
	func   = INT2PTR(short(*)(void *, double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2, p3);
OUTPUT:
	RETVAL

float
nci_fpdsp( c_func, p0, d1, s2, p3 )
	SV* c_func
	void * p0
	double d1
	short s2
	void * p3
PREINIT:
	float(*func)(void *, double, short, void *);
CODE:
	func   = INT2PTR(float(*)(void *, double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2, p3);
OUTPUT:
	RETVAL

char *
nci_tpdsp( c_func, p0, d1, s2, p3 )
	SV* c_func
	void * p0
	double d1
	short s2
	void * p3
PREINIT:
	char *(*func)(void *, double, short, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2, p3);
OUTPUT:
	RETVAL

int
nci_ipdsp( c_func, p0, d1, s2, p3 )
	SV* c_func
	void * p0
	double d1
	short s2
	void * p3
PREINIT:
	int(*func)(void *, double, short, void *);
CODE:
	func   = INT2PTR(int(*)(void *, double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2, p3);
OUTPUT:
	RETVAL

void *
nci_pvdsp( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvdsp( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvdsp( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svdsp( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvdsp( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvdsp( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivdsp( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pddsp( c_func, d0, d1, s2, p3 )
	SV* c_func
	double d0
	double d1
	short s2
	void * p3
PREINIT:
	void *(*func)(double, double, short, void *);
CODE:
	func   = INT2PTR(void *(*)(double, double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2, p3);
OUTPUT:
	RETVAL

void
nci_vddsp( c_func, d0, d1, s2, p3 )
	SV* c_func
	double d0
	double d1
	short s2
	void * p3
PREINIT:
	void(*func)(double, double, short, void *);
CODE:
	func   = INT2PTR(void(*)(double, double, short, void *), SvIV(c_func) );
	(*func)(d0, d1, s2, p3);

double
nci_dddsp( c_func, d0, d1, s2, p3 )
	SV* c_func
	double d0
	double d1
	short s2
	void * p3
PREINIT:
	double(*func)(double, double, short, void *);
CODE:
	func   = INT2PTR(double(*)(double, double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2, p3);
OUTPUT:
	RETVAL

short
nci_sddsp( c_func, d0, d1, s2, p3 )
	SV* c_func
	double d0
	double d1
	short s2
	void * p3
PREINIT:
	short(*func)(double, double, short, void *);
CODE:
	func   = INT2PTR(short(*)(double, double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2, p3);
OUTPUT:
	RETVAL

float
nci_fddsp( c_func, d0, d1, s2, p3 )
	SV* c_func
	double d0
	double d1
	short s2
	void * p3
PREINIT:
	float(*func)(double, double, short, void *);
CODE:
	func   = INT2PTR(float(*)(double, double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2, p3);
OUTPUT:
	RETVAL

char *
nci_tddsp( c_func, d0, d1, s2, p3 )
	SV* c_func
	double d0
	double d1
	short s2
	void * p3
PREINIT:
	char *(*func)(double, double, short, void *);
CODE:
	func   = INT2PTR(char *(*)(double, double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2, p3);
OUTPUT:
	RETVAL

int
nci_iddsp( c_func, d0, d1, s2, p3 )
	SV* c_func
	double d0
	double d1
	short s2
	void * p3
PREINIT:
	int(*func)(double, double, short, void *);
CODE:
	func   = INT2PTR(int(*)(double, double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2, p3);
OUTPUT:
	RETVAL

void *
nci_psdsp( c_func, s0, d1, s2, p3 )
	SV* c_func
	short s0
	double d1
	short s2
	void * p3
PREINIT:
	void *(*func)(short, double, short, void *);
CODE:
	func   = INT2PTR(void *(*)(short, double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2, p3);
OUTPUT:
	RETVAL

void
nci_vsdsp( c_func, s0, d1, s2, p3 )
	SV* c_func
	short s0
	double d1
	short s2
	void * p3
PREINIT:
	void(*func)(short, double, short, void *);
CODE:
	func   = INT2PTR(void(*)(short, double, short, void *), SvIV(c_func) );
	(*func)(s0, d1, s2, p3);

double
nci_dsdsp( c_func, s0, d1, s2, p3 )
	SV* c_func
	short s0
	double d1
	short s2
	void * p3
PREINIT:
	double(*func)(short, double, short, void *);
CODE:
	func   = INT2PTR(double(*)(short, double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2, p3);
OUTPUT:
	RETVAL

short
nci_ssdsp( c_func, s0, d1, s2, p3 )
	SV* c_func
	short s0
	double d1
	short s2
	void * p3
PREINIT:
	short(*func)(short, double, short, void *);
CODE:
	func   = INT2PTR(short(*)(short, double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2, p3);
OUTPUT:
	RETVAL

float
nci_fsdsp( c_func, s0, d1, s2, p3 )
	SV* c_func
	short s0
	double d1
	short s2
	void * p3
PREINIT:
	float(*func)(short, double, short, void *);
CODE:
	func   = INT2PTR(float(*)(short, double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2, p3);
OUTPUT:
	RETVAL

char *
nci_tsdsp( c_func, s0, d1, s2, p3 )
	SV* c_func
	short s0
	double d1
	short s2
	void * p3
PREINIT:
	char *(*func)(short, double, short, void *);
CODE:
	func   = INT2PTR(char *(*)(short, double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2, p3);
OUTPUT:
	RETVAL

int
nci_isdsp( c_func, s0, d1, s2, p3 )
	SV* c_func
	short s0
	double d1
	short s2
	void * p3
PREINIT:
	int(*func)(short, double, short, void *);
CODE:
	func   = INT2PTR(int(*)(short, double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2, p3);
OUTPUT:
	RETVAL

void *
nci_pfdsp( c_func, f0, d1, s2, p3 )
	SV* c_func
	float f0
	double d1
	short s2
	void * p3
PREINIT:
	void *(*func)(float, double, short, void *);
CODE:
	func   = INT2PTR(void *(*)(float, double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2, p3);
OUTPUT:
	RETVAL

void
nci_vfdsp( c_func, f0, d1, s2, p3 )
	SV* c_func
	float f0
	double d1
	short s2
	void * p3
PREINIT:
	void(*func)(float, double, short, void *);
CODE:
	func   = INT2PTR(void(*)(float, double, short, void *), SvIV(c_func) );
	(*func)(f0, d1, s2, p3);

double
nci_dfdsp( c_func, f0, d1, s2, p3 )
	SV* c_func
	float f0
	double d1
	short s2
	void * p3
PREINIT:
	double(*func)(float, double, short, void *);
CODE:
	func   = INT2PTR(double(*)(float, double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2, p3);
OUTPUT:
	RETVAL

short
nci_sfdsp( c_func, f0, d1, s2, p3 )
	SV* c_func
	float f0
	double d1
	short s2
	void * p3
PREINIT:
	short(*func)(float, double, short, void *);
CODE:
	func   = INT2PTR(short(*)(float, double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2, p3);
OUTPUT:
	RETVAL

float
nci_ffdsp( c_func, f0, d1, s2, p3 )
	SV* c_func
	float f0
	double d1
	short s2
	void * p3
PREINIT:
	float(*func)(float, double, short, void *);
CODE:
	func   = INT2PTR(float(*)(float, double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2, p3);
OUTPUT:
	RETVAL

char *
nci_tfdsp( c_func, f0, d1, s2, p3 )
	SV* c_func
	float f0
	double d1
	short s2
	void * p3
PREINIT:
	char *(*func)(float, double, short, void *);
CODE:
	func   = INT2PTR(char *(*)(float, double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2, p3);
OUTPUT:
	RETVAL

int
nci_ifdsp( c_func, f0, d1, s2, p3 )
	SV* c_func
	float f0
	double d1
	short s2
	void * p3
PREINIT:
	int(*func)(float, double, short, void *);
CODE:
	func   = INT2PTR(int(*)(float, double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2, p3);
OUTPUT:
	RETVAL

void *
nci_ptdsp( c_func, t0, d1, s2, p3 )
	SV* c_func
	char * t0
	double d1
	short s2
	void * p3
PREINIT:
	void *(*func)(char *, double, short, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2, p3);
OUTPUT:
	RETVAL

void
nci_vtdsp( c_func, t0, d1, s2, p3 )
	SV* c_func
	char * t0
	double d1
	short s2
	void * p3
PREINIT:
	void(*func)(char *, double, short, void *);
CODE:
	func   = INT2PTR(void(*)(char *, double, short, void *), SvIV(c_func) );
	(*func)(t0, d1, s2, p3);

double
nci_dtdsp( c_func, t0, d1, s2, p3 )
	SV* c_func
	char * t0
	double d1
	short s2
	void * p3
PREINIT:
	double(*func)(char *, double, short, void *);
CODE:
	func   = INT2PTR(double(*)(char *, double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2, p3);
OUTPUT:
	RETVAL

short
nci_stdsp( c_func, t0, d1, s2, p3 )
	SV* c_func
	char * t0
	double d1
	short s2
	void * p3
PREINIT:
	short(*func)(char *, double, short, void *);
CODE:
	func   = INT2PTR(short(*)(char *, double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2, p3);
OUTPUT:
	RETVAL

float
nci_ftdsp( c_func, t0, d1, s2, p3 )
	SV* c_func
	char * t0
	double d1
	short s2
	void * p3
PREINIT:
	float(*func)(char *, double, short, void *);
CODE:
	func   = INT2PTR(float(*)(char *, double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2, p3);
OUTPUT:
	RETVAL

char *
nci_ttdsp( c_func, t0, d1, s2, p3 )
	SV* c_func
	char * t0
	double d1
	short s2
	void * p3
PREINIT:
	char *(*func)(char *, double, short, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2, p3);
OUTPUT:
	RETVAL

int
nci_itdsp( c_func, t0, d1, s2, p3 )
	SV* c_func
	char * t0
	double d1
	short s2
	void * p3
PREINIT:
	int(*func)(char *, double, short, void *);
CODE:
	func   = INT2PTR(int(*)(char *, double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2, p3);
OUTPUT:
	RETVAL

void *
nci_pidsp( c_func, i0, d1, s2, p3 )
	SV* c_func
	int i0
	double d1
	short s2
	void * p3
PREINIT:
	void *(*func)(int, double, short, void *);
CODE:
	func   = INT2PTR(void *(*)(int, double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2, p3);
OUTPUT:
	RETVAL

void
nci_vidsp( c_func, i0, d1, s2, p3 )
	SV* c_func
	int i0
	double d1
	short s2
	void * p3
PREINIT:
	void(*func)(int, double, short, void *);
CODE:
	func   = INT2PTR(void(*)(int, double, short, void *), SvIV(c_func) );
	(*func)(i0, d1, s2, p3);

double
nci_didsp( c_func, i0, d1, s2, p3 )
	SV* c_func
	int i0
	double d1
	short s2
	void * p3
PREINIT:
	double(*func)(int, double, short, void *);
CODE:
	func   = INT2PTR(double(*)(int, double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2, p3);
OUTPUT:
	RETVAL

short
nci_sidsp( c_func, i0, d1, s2, p3 )
	SV* c_func
	int i0
	double d1
	short s2
	void * p3
PREINIT:
	short(*func)(int, double, short, void *);
CODE:
	func   = INT2PTR(short(*)(int, double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2, p3);
OUTPUT:
	RETVAL

float
nci_fidsp( c_func, i0, d1, s2, p3 )
	SV* c_func
	int i0
	double d1
	short s2
	void * p3
PREINIT:
	float(*func)(int, double, short, void *);
CODE:
	func   = INT2PTR(float(*)(int, double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2, p3);
OUTPUT:
	RETVAL

char *
nci_tidsp( c_func, i0, d1, s2, p3 )
	SV* c_func
	int i0
	double d1
	short s2
	void * p3
PREINIT:
	char *(*func)(int, double, short, void *);
CODE:
	func   = INT2PTR(char *(*)(int, double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2, p3);
OUTPUT:
	RETVAL

int
nci_iidsp( c_func, i0, d1, s2, p3 )
	SV* c_func
	int i0
	double d1
	short s2
	void * p3
PREINIT:
	int(*func)(int, double, short, void *);
CODE:
	func   = INT2PTR(int(*)(int, double, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2, p3);
OUTPUT:
	RETVAL

void *
nci_ppssp( c_func, p0, s1, s2, p3 )
	SV* c_func
	void * p0
	short s1
	short s2
	void * p3
PREINIT:
	void *(*func)(void *, short, short, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2, p3);
OUTPUT:
	RETVAL

void
nci_vpssp( c_func, p0, s1, s2, p3 )
	SV* c_func
	void * p0
	short s1
	short s2
	void * p3
PREINIT:
	void(*func)(void *, short, short, void *);
CODE:
	func   = INT2PTR(void(*)(void *, short, short, void *), SvIV(c_func) );
	(*func)(p0, s1, s2, p3);

double
nci_dpssp( c_func, p0, s1, s2, p3 )
	SV* c_func
	void * p0
	short s1
	short s2
	void * p3
PREINIT:
	double(*func)(void *, short, short, void *);
CODE:
	func   = INT2PTR(double(*)(void *, short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2, p3);
OUTPUT:
	RETVAL

short
nci_spssp( c_func, p0, s1, s2, p3 )
	SV* c_func
	void * p0
	short s1
	short s2
	void * p3
PREINIT:
	short(*func)(void *, short, short, void *);
CODE:
	func   = INT2PTR(short(*)(void *, short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2, p3);
OUTPUT:
	RETVAL

float
nci_fpssp( c_func, p0, s1, s2, p3 )
	SV* c_func
	void * p0
	short s1
	short s2
	void * p3
PREINIT:
	float(*func)(void *, short, short, void *);
CODE:
	func   = INT2PTR(float(*)(void *, short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2, p3);
OUTPUT:
	RETVAL

char *
nci_tpssp( c_func, p0, s1, s2, p3 )
	SV* c_func
	void * p0
	short s1
	short s2
	void * p3
PREINIT:
	char *(*func)(void *, short, short, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2, p3);
OUTPUT:
	RETVAL

int
nci_ipssp( c_func, p0, s1, s2, p3 )
	SV* c_func
	void * p0
	short s1
	short s2
	void * p3
PREINIT:
	int(*func)(void *, short, short, void *);
CODE:
	func   = INT2PTR(int(*)(void *, short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2, p3);
OUTPUT:
	RETVAL

void *
nci_pvssp( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvssp( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvssp( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svssp( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvssp( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvssp( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivssp( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdssp( c_func, d0, s1, s2, p3 )
	SV* c_func
	double d0
	short s1
	short s2
	void * p3
PREINIT:
	void *(*func)(double, short, short, void *);
CODE:
	func   = INT2PTR(void *(*)(double, short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2, p3);
OUTPUT:
	RETVAL

void
nci_vdssp( c_func, d0, s1, s2, p3 )
	SV* c_func
	double d0
	short s1
	short s2
	void * p3
PREINIT:
	void(*func)(double, short, short, void *);
CODE:
	func   = INT2PTR(void(*)(double, short, short, void *), SvIV(c_func) );
	(*func)(d0, s1, s2, p3);

double
nci_ddssp( c_func, d0, s1, s2, p3 )
	SV* c_func
	double d0
	short s1
	short s2
	void * p3
PREINIT:
	double(*func)(double, short, short, void *);
CODE:
	func   = INT2PTR(double(*)(double, short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2, p3);
OUTPUT:
	RETVAL

short
nci_sdssp( c_func, d0, s1, s2, p3 )
	SV* c_func
	double d0
	short s1
	short s2
	void * p3
PREINIT:
	short(*func)(double, short, short, void *);
CODE:
	func   = INT2PTR(short(*)(double, short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2, p3);
OUTPUT:
	RETVAL

float
nci_fdssp( c_func, d0, s1, s2, p3 )
	SV* c_func
	double d0
	short s1
	short s2
	void * p3
PREINIT:
	float(*func)(double, short, short, void *);
CODE:
	func   = INT2PTR(float(*)(double, short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2, p3);
OUTPUT:
	RETVAL

char *
nci_tdssp( c_func, d0, s1, s2, p3 )
	SV* c_func
	double d0
	short s1
	short s2
	void * p3
PREINIT:
	char *(*func)(double, short, short, void *);
CODE:
	func   = INT2PTR(char *(*)(double, short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2, p3);
OUTPUT:
	RETVAL

int
nci_idssp( c_func, d0, s1, s2, p3 )
	SV* c_func
	double d0
	short s1
	short s2
	void * p3
PREINIT:
	int(*func)(double, short, short, void *);
CODE:
	func   = INT2PTR(int(*)(double, short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2, p3);
OUTPUT:
	RETVAL

void *
nci_psssp( c_func, s0, s1, s2, p3 )
	SV* c_func
	short s0
	short s1
	short s2
	void * p3
PREINIT:
	void *(*func)(short, short, short, void *);
CODE:
	func   = INT2PTR(void *(*)(short, short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2, p3);
OUTPUT:
	RETVAL

void
nci_vsssp( c_func, s0, s1, s2, p3 )
	SV* c_func
	short s0
	short s1
	short s2
	void * p3
PREINIT:
	void(*func)(short, short, short, void *);
CODE:
	func   = INT2PTR(void(*)(short, short, short, void *), SvIV(c_func) );
	(*func)(s0, s1, s2, p3);

double
nci_dsssp( c_func, s0, s1, s2, p3 )
	SV* c_func
	short s0
	short s1
	short s2
	void * p3
PREINIT:
	double(*func)(short, short, short, void *);
CODE:
	func   = INT2PTR(double(*)(short, short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2, p3);
OUTPUT:
	RETVAL

short
nci_ssssp( c_func, s0, s1, s2, p3 )
	SV* c_func
	short s0
	short s1
	short s2
	void * p3
PREINIT:
	short(*func)(short, short, short, void *);
CODE:
	func   = INT2PTR(short(*)(short, short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2, p3);
OUTPUT:
	RETVAL

float
nci_fsssp( c_func, s0, s1, s2, p3 )
	SV* c_func
	short s0
	short s1
	short s2
	void * p3
PREINIT:
	float(*func)(short, short, short, void *);
CODE:
	func   = INT2PTR(float(*)(short, short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2, p3);
OUTPUT:
	RETVAL

char *
nci_tsssp( c_func, s0, s1, s2, p3 )
	SV* c_func
	short s0
	short s1
	short s2
	void * p3
PREINIT:
	char *(*func)(short, short, short, void *);
CODE:
	func   = INT2PTR(char *(*)(short, short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2, p3);
OUTPUT:
	RETVAL

int
nci_isssp( c_func, s0, s1, s2, p3 )
	SV* c_func
	short s0
	short s1
	short s2
	void * p3
PREINIT:
	int(*func)(short, short, short, void *);
CODE:
	func   = INT2PTR(int(*)(short, short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2, p3);
OUTPUT:
	RETVAL

void *
nci_pfssp( c_func, f0, s1, s2, p3 )
	SV* c_func
	float f0
	short s1
	short s2
	void * p3
PREINIT:
	void *(*func)(float, short, short, void *);
CODE:
	func   = INT2PTR(void *(*)(float, short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2, p3);
OUTPUT:
	RETVAL

void
nci_vfssp( c_func, f0, s1, s2, p3 )
	SV* c_func
	float f0
	short s1
	short s2
	void * p3
PREINIT:
	void(*func)(float, short, short, void *);
CODE:
	func   = INT2PTR(void(*)(float, short, short, void *), SvIV(c_func) );
	(*func)(f0, s1, s2, p3);

double
nci_dfssp( c_func, f0, s1, s2, p3 )
	SV* c_func
	float f0
	short s1
	short s2
	void * p3
PREINIT:
	double(*func)(float, short, short, void *);
CODE:
	func   = INT2PTR(double(*)(float, short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2, p3);
OUTPUT:
	RETVAL

short
nci_sfssp( c_func, f0, s1, s2, p3 )
	SV* c_func
	float f0
	short s1
	short s2
	void * p3
PREINIT:
	short(*func)(float, short, short, void *);
CODE:
	func   = INT2PTR(short(*)(float, short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2, p3);
OUTPUT:
	RETVAL

float
nci_ffssp( c_func, f0, s1, s2, p3 )
	SV* c_func
	float f0
	short s1
	short s2
	void * p3
PREINIT:
	float(*func)(float, short, short, void *);
CODE:
	func   = INT2PTR(float(*)(float, short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2, p3);
OUTPUT:
	RETVAL

char *
nci_tfssp( c_func, f0, s1, s2, p3 )
	SV* c_func
	float f0
	short s1
	short s2
	void * p3
PREINIT:
	char *(*func)(float, short, short, void *);
CODE:
	func   = INT2PTR(char *(*)(float, short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2, p3);
OUTPUT:
	RETVAL

int
nci_ifssp( c_func, f0, s1, s2, p3 )
	SV* c_func
	float f0
	short s1
	short s2
	void * p3
PREINIT:
	int(*func)(float, short, short, void *);
CODE:
	func   = INT2PTR(int(*)(float, short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2, p3);
OUTPUT:
	RETVAL

void *
nci_ptssp( c_func, t0, s1, s2, p3 )
	SV* c_func
	char * t0
	short s1
	short s2
	void * p3
PREINIT:
	void *(*func)(char *, short, short, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2, p3);
OUTPUT:
	RETVAL

void
nci_vtssp( c_func, t0, s1, s2, p3 )
	SV* c_func
	char * t0
	short s1
	short s2
	void * p3
PREINIT:
	void(*func)(char *, short, short, void *);
CODE:
	func   = INT2PTR(void(*)(char *, short, short, void *), SvIV(c_func) );
	(*func)(t0, s1, s2, p3);

double
nci_dtssp( c_func, t0, s1, s2, p3 )
	SV* c_func
	char * t0
	short s1
	short s2
	void * p3
PREINIT:
	double(*func)(char *, short, short, void *);
CODE:
	func   = INT2PTR(double(*)(char *, short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2, p3);
OUTPUT:
	RETVAL

short
nci_stssp( c_func, t0, s1, s2, p3 )
	SV* c_func
	char * t0
	short s1
	short s2
	void * p3
PREINIT:
	short(*func)(char *, short, short, void *);
CODE:
	func   = INT2PTR(short(*)(char *, short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2, p3);
OUTPUT:
	RETVAL

float
nci_ftssp( c_func, t0, s1, s2, p3 )
	SV* c_func
	char * t0
	short s1
	short s2
	void * p3
PREINIT:
	float(*func)(char *, short, short, void *);
CODE:
	func   = INT2PTR(float(*)(char *, short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2, p3);
OUTPUT:
	RETVAL

char *
nci_ttssp( c_func, t0, s1, s2, p3 )
	SV* c_func
	char * t0
	short s1
	short s2
	void * p3
PREINIT:
	char *(*func)(char *, short, short, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2, p3);
OUTPUT:
	RETVAL

int
nci_itssp( c_func, t0, s1, s2, p3 )
	SV* c_func
	char * t0
	short s1
	short s2
	void * p3
PREINIT:
	int(*func)(char *, short, short, void *);
CODE:
	func   = INT2PTR(int(*)(char *, short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2, p3);
OUTPUT:
	RETVAL

void *
nci_pissp( c_func, i0, s1, s2, p3 )
	SV* c_func
	int i0
	short s1
	short s2
	void * p3
PREINIT:
	void *(*func)(int, short, short, void *);
CODE:
	func   = INT2PTR(void *(*)(int, short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2, p3);
OUTPUT:
	RETVAL

void
nci_vissp( c_func, i0, s1, s2, p3 )
	SV* c_func
	int i0
	short s1
	short s2
	void * p3
PREINIT:
	void(*func)(int, short, short, void *);
CODE:
	func   = INT2PTR(void(*)(int, short, short, void *), SvIV(c_func) );
	(*func)(i0, s1, s2, p3);

double
nci_dissp( c_func, i0, s1, s2, p3 )
	SV* c_func
	int i0
	short s1
	short s2
	void * p3
PREINIT:
	double(*func)(int, short, short, void *);
CODE:
	func   = INT2PTR(double(*)(int, short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2, p3);
OUTPUT:
	RETVAL

short
nci_sissp( c_func, i0, s1, s2, p3 )
	SV* c_func
	int i0
	short s1
	short s2
	void * p3
PREINIT:
	short(*func)(int, short, short, void *);
CODE:
	func   = INT2PTR(short(*)(int, short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2, p3);
OUTPUT:
	RETVAL

float
nci_fissp( c_func, i0, s1, s2, p3 )
	SV* c_func
	int i0
	short s1
	short s2
	void * p3
PREINIT:
	float(*func)(int, short, short, void *);
CODE:
	func   = INT2PTR(float(*)(int, short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2, p3);
OUTPUT:
	RETVAL

char *
nci_tissp( c_func, i0, s1, s2, p3 )
	SV* c_func
	int i0
	short s1
	short s2
	void * p3
PREINIT:
	char *(*func)(int, short, short, void *);
CODE:
	func   = INT2PTR(char *(*)(int, short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2, p3);
OUTPUT:
	RETVAL

int
nci_iissp( c_func, i0, s1, s2, p3 )
	SV* c_func
	int i0
	short s1
	short s2
	void * p3
PREINIT:
	int(*func)(int, short, short, void *);
CODE:
	func   = INT2PTR(int(*)(int, short, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2, p3);
OUTPUT:
	RETVAL

void *
nci_ppfsp( c_func, p0, f1, s2, p3 )
	SV* c_func
	void * p0
	float f1
	short s2
	void * p3
PREINIT:
	void *(*func)(void *, float, short, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2, p3);
OUTPUT:
	RETVAL

void
nci_vpfsp( c_func, p0, f1, s2, p3 )
	SV* c_func
	void * p0
	float f1
	short s2
	void * p3
PREINIT:
	void(*func)(void *, float, short, void *);
CODE:
	func   = INT2PTR(void(*)(void *, float, short, void *), SvIV(c_func) );
	(*func)(p0, f1, s2, p3);

double
nci_dpfsp( c_func, p0, f1, s2, p3 )
	SV* c_func
	void * p0
	float f1
	short s2
	void * p3
PREINIT:
	double(*func)(void *, float, short, void *);
CODE:
	func   = INT2PTR(double(*)(void *, float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2, p3);
OUTPUT:
	RETVAL

short
nci_spfsp( c_func, p0, f1, s2, p3 )
	SV* c_func
	void * p0
	float f1
	short s2
	void * p3
PREINIT:
	short(*func)(void *, float, short, void *);
CODE:
	func   = INT2PTR(short(*)(void *, float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2, p3);
OUTPUT:
	RETVAL

float
nci_fpfsp( c_func, p0, f1, s2, p3 )
	SV* c_func
	void * p0
	float f1
	short s2
	void * p3
PREINIT:
	float(*func)(void *, float, short, void *);
CODE:
	func   = INT2PTR(float(*)(void *, float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2, p3);
OUTPUT:
	RETVAL

char *
nci_tpfsp( c_func, p0, f1, s2, p3 )
	SV* c_func
	void * p0
	float f1
	short s2
	void * p3
PREINIT:
	char *(*func)(void *, float, short, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2, p3);
OUTPUT:
	RETVAL

int
nci_ipfsp( c_func, p0, f1, s2, p3 )
	SV* c_func
	void * p0
	float f1
	short s2
	void * p3
PREINIT:
	int(*func)(void *, float, short, void *);
CODE:
	func   = INT2PTR(int(*)(void *, float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2, p3);
OUTPUT:
	RETVAL

void *
nci_pvfsp( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvfsp( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvfsp( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svfsp( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvfsp( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvfsp( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivfsp( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdfsp( c_func, d0, f1, s2, p3 )
	SV* c_func
	double d0
	float f1
	short s2
	void * p3
PREINIT:
	void *(*func)(double, float, short, void *);
CODE:
	func   = INT2PTR(void *(*)(double, float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2, p3);
OUTPUT:
	RETVAL

void
nci_vdfsp( c_func, d0, f1, s2, p3 )
	SV* c_func
	double d0
	float f1
	short s2
	void * p3
PREINIT:
	void(*func)(double, float, short, void *);
CODE:
	func   = INT2PTR(void(*)(double, float, short, void *), SvIV(c_func) );
	(*func)(d0, f1, s2, p3);

double
nci_ddfsp( c_func, d0, f1, s2, p3 )
	SV* c_func
	double d0
	float f1
	short s2
	void * p3
PREINIT:
	double(*func)(double, float, short, void *);
CODE:
	func   = INT2PTR(double(*)(double, float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2, p3);
OUTPUT:
	RETVAL

short
nci_sdfsp( c_func, d0, f1, s2, p3 )
	SV* c_func
	double d0
	float f1
	short s2
	void * p3
PREINIT:
	short(*func)(double, float, short, void *);
CODE:
	func   = INT2PTR(short(*)(double, float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2, p3);
OUTPUT:
	RETVAL

float
nci_fdfsp( c_func, d0, f1, s2, p3 )
	SV* c_func
	double d0
	float f1
	short s2
	void * p3
PREINIT:
	float(*func)(double, float, short, void *);
CODE:
	func   = INT2PTR(float(*)(double, float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2, p3);
OUTPUT:
	RETVAL

char *
nci_tdfsp( c_func, d0, f1, s2, p3 )
	SV* c_func
	double d0
	float f1
	short s2
	void * p3
PREINIT:
	char *(*func)(double, float, short, void *);
CODE:
	func   = INT2PTR(char *(*)(double, float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2, p3);
OUTPUT:
	RETVAL

int
nci_idfsp( c_func, d0, f1, s2, p3 )
	SV* c_func
	double d0
	float f1
	short s2
	void * p3
PREINIT:
	int(*func)(double, float, short, void *);
CODE:
	func   = INT2PTR(int(*)(double, float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2, p3);
OUTPUT:
	RETVAL

void *
nci_psfsp( c_func, s0, f1, s2, p3 )
	SV* c_func
	short s0
	float f1
	short s2
	void * p3
PREINIT:
	void *(*func)(short, float, short, void *);
CODE:
	func   = INT2PTR(void *(*)(short, float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2, p3);
OUTPUT:
	RETVAL

void
nci_vsfsp( c_func, s0, f1, s2, p3 )
	SV* c_func
	short s0
	float f1
	short s2
	void * p3
PREINIT:
	void(*func)(short, float, short, void *);
CODE:
	func   = INT2PTR(void(*)(short, float, short, void *), SvIV(c_func) );
	(*func)(s0, f1, s2, p3);

double
nci_dsfsp( c_func, s0, f1, s2, p3 )
	SV* c_func
	short s0
	float f1
	short s2
	void * p3
PREINIT:
	double(*func)(short, float, short, void *);
CODE:
	func   = INT2PTR(double(*)(short, float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2, p3);
OUTPUT:
	RETVAL

short
nci_ssfsp( c_func, s0, f1, s2, p3 )
	SV* c_func
	short s0
	float f1
	short s2
	void * p3
PREINIT:
	short(*func)(short, float, short, void *);
CODE:
	func   = INT2PTR(short(*)(short, float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2, p3);
OUTPUT:
	RETVAL

float
nci_fsfsp( c_func, s0, f1, s2, p3 )
	SV* c_func
	short s0
	float f1
	short s2
	void * p3
PREINIT:
	float(*func)(short, float, short, void *);
CODE:
	func   = INT2PTR(float(*)(short, float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2, p3);
OUTPUT:
	RETVAL

char *
nci_tsfsp( c_func, s0, f1, s2, p3 )
	SV* c_func
	short s0
	float f1
	short s2
	void * p3
PREINIT:
	char *(*func)(short, float, short, void *);
CODE:
	func   = INT2PTR(char *(*)(short, float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2, p3);
OUTPUT:
	RETVAL

int
nci_isfsp( c_func, s0, f1, s2, p3 )
	SV* c_func
	short s0
	float f1
	short s2
	void * p3
PREINIT:
	int(*func)(short, float, short, void *);
CODE:
	func   = INT2PTR(int(*)(short, float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2, p3);
OUTPUT:
	RETVAL

void *
nci_pffsp( c_func, f0, f1, s2, p3 )
	SV* c_func
	float f0
	float f1
	short s2
	void * p3
PREINIT:
	void *(*func)(float, float, short, void *);
CODE:
	func   = INT2PTR(void *(*)(float, float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2, p3);
OUTPUT:
	RETVAL

void
nci_vffsp( c_func, f0, f1, s2, p3 )
	SV* c_func
	float f0
	float f1
	short s2
	void * p3
PREINIT:
	void(*func)(float, float, short, void *);
CODE:
	func   = INT2PTR(void(*)(float, float, short, void *), SvIV(c_func) );
	(*func)(f0, f1, s2, p3);

double
nci_dffsp( c_func, f0, f1, s2, p3 )
	SV* c_func
	float f0
	float f1
	short s2
	void * p3
PREINIT:
	double(*func)(float, float, short, void *);
CODE:
	func   = INT2PTR(double(*)(float, float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2, p3);
OUTPUT:
	RETVAL

short
nci_sffsp( c_func, f0, f1, s2, p3 )
	SV* c_func
	float f0
	float f1
	short s2
	void * p3
PREINIT:
	short(*func)(float, float, short, void *);
CODE:
	func   = INT2PTR(short(*)(float, float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2, p3);
OUTPUT:
	RETVAL

float
nci_fffsp( c_func, f0, f1, s2, p3 )
	SV* c_func
	float f0
	float f1
	short s2
	void * p3
PREINIT:
	float(*func)(float, float, short, void *);
CODE:
	func   = INT2PTR(float(*)(float, float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2, p3);
OUTPUT:
	RETVAL

char *
nci_tffsp( c_func, f0, f1, s2, p3 )
	SV* c_func
	float f0
	float f1
	short s2
	void * p3
PREINIT:
	char *(*func)(float, float, short, void *);
CODE:
	func   = INT2PTR(char *(*)(float, float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2, p3);
OUTPUT:
	RETVAL

int
nci_iffsp( c_func, f0, f1, s2, p3 )
	SV* c_func
	float f0
	float f1
	short s2
	void * p3
PREINIT:
	int(*func)(float, float, short, void *);
CODE:
	func   = INT2PTR(int(*)(float, float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2, p3);
OUTPUT:
	RETVAL

void *
nci_ptfsp( c_func, t0, f1, s2, p3 )
	SV* c_func
	char * t0
	float f1
	short s2
	void * p3
PREINIT:
	void *(*func)(char *, float, short, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2, p3);
OUTPUT:
	RETVAL

void
nci_vtfsp( c_func, t0, f1, s2, p3 )
	SV* c_func
	char * t0
	float f1
	short s2
	void * p3
PREINIT:
	void(*func)(char *, float, short, void *);
CODE:
	func   = INT2PTR(void(*)(char *, float, short, void *), SvIV(c_func) );
	(*func)(t0, f1, s2, p3);

double
nci_dtfsp( c_func, t0, f1, s2, p3 )
	SV* c_func
	char * t0
	float f1
	short s2
	void * p3
PREINIT:
	double(*func)(char *, float, short, void *);
CODE:
	func   = INT2PTR(double(*)(char *, float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2, p3);
OUTPUT:
	RETVAL

short
nci_stfsp( c_func, t0, f1, s2, p3 )
	SV* c_func
	char * t0
	float f1
	short s2
	void * p3
PREINIT:
	short(*func)(char *, float, short, void *);
CODE:
	func   = INT2PTR(short(*)(char *, float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2, p3);
OUTPUT:
	RETVAL

float
nci_ftfsp( c_func, t0, f1, s2, p3 )
	SV* c_func
	char * t0
	float f1
	short s2
	void * p3
PREINIT:
	float(*func)(char *, float, short, void *);
CODE:
	func   = INT2PTR(float(*)(char *, float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2, p3);
OUTPUT:
	RETVAL

char *
nci_ttfsp( c_func, t0, f1, s2, p3 )
	SV* c_func
	char * t0
	float f1
	short s2
	void * p3
PREINIT:
	char *(*func)(char *, float, short, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2, p3);
OUTPUT:
	RETVAL

int
nci_itfsp( c_func, t0, f1, s2, p3 )
	SV* c_func
	char * t0
	float f1
	short s2
	void * p3
PREINIT:
	int(*func)(char *, float, short, void *);
CODE:
	func   = INT2PTR(int(*)(char *, float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2, p3);
OUTPUT:
	RETVAL

void *
nci_pifsp( c_func, i0, f1, s2, p3 )
	SV* c_func
	int i0
	float f1
	short s2
	void * p3
PREINIT:
	void *(*func)(int, float, short, void *);
CODE:
	func   = INT2PTR(void *(*)(int, float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2, p3);
OUTPUT:
	RETVAL

void
nci_vifsp( c_func, i0, f1, s2, p3 )
	SV* c_func
	int i0
	float f1
	short s2
	void * p3
PREINIT:
	void(*func)(int, float, short, void *);
CODE:
	func   = INT2PTR(void(*)(int, float, short, void *), SvIV(c_func) );
	(*func)(i0, f1, s2, p3);

double
nci_difsp( c_func, i0, f1, s2, p3 )
	SV* c_func
	int i0
	float f1
	short s2
	void * p3
PREINIT:
	double(*func)(int, float, short, void *);
CODE:
	func   = INT2PTR(double(*)(int, float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2, p3);
OUTPUT:
	RETVAL

short
nci_sifsp( c_func, i0, f1, s2, p3 )
	SV* c_func
	int i0
	float f1
	short s2
	void * p3
PREINIT:
	short(*func)(int, float, short, void *);
CODE:
	func   = INT2PTR(short(*)(int, float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2, p3);
OUTPUT:
	RETVAL

float
nci_fifsp( c_func, i0, f1, s2, p3 )
	SV* c_func
	int i0
	float f1
	short s2
	void * p3
PREINIT:
	float(*func)(int, float, short, void *);
CODE:
	func   = INT2PTR(float(*)(int, float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2, p3);
OUTPUT:
	RETVAL

char *
nci_tifsp( c_func, i0, f1, s2, p3 )
	SV* c_func
	int i0
	float f1
	short s2
	void * p3
PREINIT:
	char *(*func)(int, float, short, void *);
CODE:
	func   = INT2PTR(char *(*)(int, float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2, p3);
OUTPUT:
	RETVAL

int
nci_iifsp( c_func, i0, f1, s2, p3 )
	SV* c_func
	int i0
	float f1
	short s2
	void * p3
PREINIT:
	int(*func)(int, float, short, void *);
CODE:
	func   = INT2PTR(int(*)(int, float, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2, p3);
OUTPUT:
	RETVAL

void *
nci_pptsp( c_func, p0, t1, s2, p3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	void * p3
PREINIT:
	void *(*func)(void *, char *, short, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2, p3);
OUTPUT:
	RETVAL

void
nci_vptsp( c_func, p0, t1, s2, p3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	void * p3
PREINIT:
	void(*func)(void *, char *, short, void *);
CODE:
	func   = INT2PTR(void(*)(void *, char *, short, void *), SvIV(c_func) );
	(*func)(p0, t1, s2, p3);

double
nci_dptsp( c_func, p0, t1, s2, p3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	void * p3
PREINIT:
	double(*func)(void *, char *, short, void *);
CODE:
	func   = INT2PTR(double(*)(void *, char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2, p3);
OUTPUT:
	RETVAL

short
nci_sptsp( c_func, p0, t1, s2, p3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	void * p3
PREINIT:
	short(*func)(void *, char *, short, void *);
CODE:
	func   = INT2PTR(short(*)(void *, char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2, p3);
OUTPUT:
	RETVAL

float
nci_fptsp( c_func, p0, t1, s2, p3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	void * p3
PREINIT:
	float(*func)(void *, char *, short, void *);
CODE:
	func   = INT2PTR(float(*)(void *, char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2, p3);
OUTPUT:
	RETVAL

char *
nci_tptsp( c_func, p0, t1, s2, p3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	void * p3
PREINIT:
	char *(*func)(void *, char *, short, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2, p3);
OUTPUT:
	RETVAL

int
nci_iptsp( c_func, p0, t1, s2, p3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	void * p3
PREINIT:
	int(*func)(void *, char *, short, void *);
CODE:
	func   = INT2PTR(int(*)(void *, char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2, p3);
OUTPUT:
	RETVAL

void *
nci_pvtsp( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvtsp( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvtsp( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svtsp( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvtsp( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvtsp( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivtsp( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdtsp( c_func, d0, t1, s2, p3 )
	SV* c_func
	double d0
	char * t1
	short s2
	void * p3
PREINIT:
	void *(*func)(double, char *, short, void *);
CODE:
	func   = INT2PTR(void *(*)(double, char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2, p3);
OUTPUT:
	RETVAL

void
nci_vdtsp( c_func, d0, t1, s2, p3 )
	SV* c_func
	double d0
	char * t1
	short s2
	void * p3
PREINIT:
	void(*func)(double, char *, short, void *);
CODE:
	func   = INT2PTR(void(*)(double, char *, short, void *), SvIV(c_func) );
	(*func)(d0, t1, s2, p3);

double
nci_ddtsp( c_func, d0, t1, s2, p3 )
	SV* c_func
	double d0
	char * t1
	short s2
	void * p3
PREINIT:
	double(*func)(double, char *, short, void *);
CODE:
	func   = INT2PTR(double(*)(double, char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2, p3);
OUTPUT:
	RETVAL

short
nci_sdtsp( c_func, d0, t1, s2, p3 )
	SV* c_func
	double d0
	char * t1
	short s2
	void * p3
PREINIT:
	short(*func)(double, char *, short, void *);
CODE:
	func   = INT2PTR(short(*)(double, char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2, p3);
OUTPUT:
	RETVAL

float
nci_fdtsp( c_func, d0, t1, s2, p3 )
	SV* c_func
	double d0
	char * t1
	short s2
	void * p3
PREINIT:
	float(*func)(double, char *, short, void *);
CODE:
	func   = INT2PTR(float(*)(double, char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2, p3);
OUTPUT:
	RETVAL

char *
nci_tdtsp( c_func, d0, t1, s2, p3 )
	SV* c_func
	double d0
	char * t1
	short s2
	void * p3
PREINIT:
	char *(*func)(double, char *, short, void *);
CODE:
	func   = INT2PTR(char *(*)(double, char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2, p3);
OUTPUT:
	RETVAL

int
nci_idtsp( c_func, d0, t1, s2, p3 )
	SV* c_func
	double d0
	char * t1
	short s2
	void * p3
PREINIT:
	int(*func)(double, char *, short, void *);
CODE:
	func   = INT2PTR(int(*)(double, char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2, p3);
OUTPUT:
	RETVAL

void *
nci_pstsp( c_func, s0, t1, s2, p3 )
	SV* c_func
	short s0
	char * t1
	short s2
	void * p3
PREINIT:
	void *(*func)(short, char *, short, void *);
CODE:
	func   = INT2PTR(void *(*)(short, char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2, p3);
OUTPUT:
	RETVAL

void
nci_vstsp( c_func, s0, t1, s2, p3 )
	SV* c_func
	short s0
	char * t1
	short s2
	void * p3
PREINIT:
	void(*func)(short, char *, short, void *);
CODE:
	func   = INT2PTR(void(*)(short, char *, short, void *), SvIV(c_func) );
	(*func)(s0, t1, s2, p3);

double
nci_dstsp( c_func, s0, t1, s2, p3 )
	SV* c_func
	short s0
	char * t1
	short s2
	void * p3
PREINIT:
	double(*func)(short, char *, short, void *);
CODE:
	func   = INT2PTR(double(*)(short, char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2, p3);
OUTPUT:
	RETVAL

short
nci_sstsp( c_func, s0, t1, s2, p3 )
	SV* c_func
	short s0
	char * t1
	short s2
	void * p3
PREINIT:
	short(*func)(short, char *, short, void *);
CODE:
	func   = INT2PTR(short(*)(short, char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2, p3);
OUTPUT:
	RETVAL

float
nci_fstsp( c_func, s0, t1, s2, p3 )
	SV* c_func
	short s0
	char * t1
	short s2
	void * p3
PREINIT:
	float(*func)(short, char *, short, void *);
CODE:
	func   = INT2PTR(float(*)(short, char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2, p3);
OUTPUT:
	RETVAL

char *
nci_tstsp( c_func, s0, t1, s2, p3 )
	SV* c_func
	short s0
	char * t1
	short s2
	void * p3
PREINIT:
	char *(*func)(short, char *, short, void *);
CODE:
	func   = INT2PTR(char *(*)(short, char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2, p3);
OUTPUT:
	RETVAL

int
nci_istsp( c_func, s0, t1, s2, p3 )
	SV* c_func
	short s0
	char * t1
	short s2
	void * p3
PREINIT:
	int(*func)(short, char *, short, void *);
CODE:
	func   = INT2PTR(int(*)(short, char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2, p3);
OUTPUT:
	RETVAL

void *
nci_pftsp( c_func, f0, t1, s2, p3 )
	SV* c_func
	float f0
	char * t1
	short s2
	void * p3
PREINIT:
	void *(*func)(float, char *, short, void *);
CODE:
	func   = INT2PTR(void *(*)(float, char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2, p3);
OUTPUT:
	RETVAL

void
nci_vftsp( c_func, f0, t1, s2, p3 )
	SV* c_func
	float f0
	char * t1
	short s2
	void * p3
PREINIT:
	void(*func)(float, char *, short, void *);
CODE:
	func   = INT2PTR(void(*)(float, char *, short, void *), SvIV(c_func) );
	(*func)(f0, t1, s2, p3);

double
nci_dftsp( c_func, f0, t1, s2, p3 )
	SV* c_func
	float f0
	char * t1
	short s2
	void * p3
PREINIT:
	double(*func)(float, char *, short, void *);
CODE:
	func   = INT2PTR(double(*)(float, char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2, p3);
OUTPUT:
	RETVAL

short
nci_sftsp( c_func, f0, t1, s2, p3 )
	SV* c_func
	float f0
	char * t1
	short s2
	void * p3
PREINIT:
	short(*func)(float, char *, short, void *);
CODE:
	func   = INT2PTR(short(*)(float, char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2, p3);
OUTPUT:
	RETVAL

float
nci_fftsp( c_func, f0, t1, s2, p3 )
	SV* c_func
	float f0
	char * t1
	short s2
	void * p3
PREINIT:
	float(*func)(float, char *, short, void *);
CODE:
	func   = INT2PTR(float(*)(float, char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2, p3);
OUTPUT:
	RETVAL

char *
nci_tftsp( c_func, f0, t1, s2, p3 )
	SV* c_func
	float f0
	char * t1
	short s2
	void * p3
PREINIT:
	char *(*func)(float, char *, short, void *);
CODE:
	func   = INT2PTR(char *(*)(float, char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2, p3);
OUTPUT:
	RETVAL

int
nci_iftsp( c_func, f0, t1, s2, p3 )
	SV* c_func
	float f0
	char * t1
	short s2
	void * p3
PREINIT:
	int(*func)(float, char *, short, void *);
CODE:
	func   = INT2PTR(int(*)(float, char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2, p3);
OUTPUT:
	RETVAL

void *
nci_pttsp( c_func, t0, t1, s2, p3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	void * p3
PREINIT:
	void *(*func)(char *, char *, short, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2, p3);
OUTPUT:
	RETVAL

void
nci_vttsp( c_func, t0, t1, s2, p3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	void * p3
PREINIT:
	void(*func)(char *, char *, short, void *);
CODE:
	func   = INT2PTR(void(*)(char *, char *, short, void *), SvIV(c_func) );
	(*func)(t0, t1, s2, p3);

double
nci_dttsp( c_func, t0, t1, s2, p3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	void * p3
PREINIT:
	double(*func)(char *, char *, short, void *);
CODE:
	func   = INT2PTR(double(*)(char *, char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2, p3);
OUTPUT:
	RETVAL

short
nci_sttsp( c_func, t0, t1, s2, p3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	void * p3
PREINIT:
	short(*func)(char *, char *, short, void *);
CODE:
	func   = INT2PTR(short(*)(char *, char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2, p3);
OUTPUT:
	RETVAL

float
nci_fttsp( c_func, t0, t1, s2, p3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	void * p3
PREINIT:
	float(*func)(char *, char *, short, void *);
CODE:
	func   = INT2PTR(float(*)(char *, char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2, p3);
OUTPUT:
	RETVAL

char *
nci_tttsp( c_func, t0, t1, s2, p3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	void * p3
PREINIT:
	char *(*func)(char *, char *, short, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2, p3);
OUTPUT:
	RETVAL

int
nci_ittsp( c_func, t0, t1, s2, p3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	void * p3
PREINIT:
	int(*func)(char *, char *, short, void *);
CODE:
	func   = INT2PTR(int(*)(char *, char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2, p3);
OUTPUT:
	RETVAL

void *
nci_pitsp( c_func, i0, t1, s2, p3 )
	SV* c_func
	int i0
	char * t1
	short s2
	void * p3
PREINIT:
	void *(*func)(int, char *, short, void *);
CODE:
	func   = INT2PTR(void *(*)(int, char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2, p3);
OUTPUT:
	RETVAL

void
nci_vitsp( c_func, i0, t1, s2, p3 )
	SV* c_func
	int i0
	char * t1
	short s2
	void * p3
PREINIT:
	void(*func)(int, char *, short, void *);
CODE:
	func   = INT2PTR(void(*)(int, char *, short, void *), SvIV(c_func) );
	(*func)(i0, t1, s2, p3);

double
nci_ditsp( c_func, i0, t1, s2, p3 )
	SV* c_func
	int i0
	char * t1
	short s2
	void * p3
PREINIT:
	double(*func)(int, char *, short, void *);
CODE:
	func   = INT2PTR(double(*)(int, char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2, p3);
OUTPUT:
	RETVAL

short
nci_sitsp( c_func, i0, t1, s2, p3 )
	SV* c_func
	int i0
	char * t1
	short s2
	void * p3
PREINIT:
	short(*func)(int, char *, short, void *);
CODE:
	func   = INT2PTR(short(*)(int, char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2, p3);
OUTPUT:
	RETVAL

float
nci_fitsp( c_func, i0, t1, s2, p3 )
	SV* c_func
	int i0
	char * t1
	short s2
	void * p3
PREINIT:
	float(*func)(int, char *, short, void *);
CODE:
	func   = INT2PTR(float(*)(int, char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2, p3);
OUTPUT:
	RETVAL

char *
nci_titsp( c_func, i0, t1, s2, p3 )
	SV* c_func
	int i0
	char * t1
	short s2
	void * p3
PREINIT:
	char *(*func)(int, char *, short, void *);
CODE:
	func   = INT2PTR(char *(*)(int, char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2, p3);
OUTPUT:
	RETVAL

int
nci_iitsp( c_func, i0, t1, s2, p3 )
	SV* c_func
	int i0
	char * t1
	short s2
	void * p3
PREINIT:
	int(*func)(int, char *, short, void *);
CODE:
	func   = INT2PTR(int(*)(int, char *, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2, p3);
OUTPUT:
	RETVAL

void *
nci_ppisp( c_func, p0, i1, s2, p3 )
	SV* c_func
	void * p0
	int i1
	short s2
	void * p3
PREINIT:
	void *(*func)(void *, int, short, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2, p3);
OUTPUT:
	RETVAL

void
nci_vpisp( c_func, p0, i1, s2, p3 )
	SV* c_func
	void * p0
	int i1
	short s2
	void * p3
PREINIT:
	void(*func)(void *, int, short, void *);
CODE:
	func   = INT2PTR(void(*)(void *, int, short, void *), SvIV(c_func) );
	(*func)(p0, i1, s2, p3);

double
nci_dpisp( c_func, p0, i1, s2, p3 )
	SV* c_func
	void * p0
	int i1
	short s2
	void * p3
PREINIT:
	double(*func)(void *, int, short, void *);
CODE:
	func   = INT2PTR(double(*)(void *, int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2, p3);
OUTPUT:
	RETVAL

short
nci_spisp( c_func, p0, i1, s2, p3 )
	SV* c_func
	void * p0
	int i1
	short s2
	void * p3
PREINIT:
	short(*func)(void *, int, short, void *);
CODE:
	func   = INT2PTR(short(*)(void *, int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2, p3);
OUTPUT:
	RETVAL

float
nci_fpisp( c_func, p0, i1, s2, p3 )
	SV* c_func
	void * p0
	int i1
	short s2
	void * p3
PREINIT:
	float(*func)(void *, int, short, void *);
CODE:
	func   = INT2PTR(float(*)(void *, int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2, p3);
OUTPUT:
	RETVAL

char *
nci_tpisp( c_func, p0, i1, s2, p3 )
	SV* c_func
	void * p0
	int i1
	short s2
	void * p3
PREINIT:
	char *(*func)(void *, int, short, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2, p3);
OUTPUT:
	RETVAL

int
nci_ipisp( c_func, p0, i1, s2, p3 )
	SV* c_func
	void * p0
	int i1
	short s2
	void * p3
PREINIT:
	int(*func)(void *, int, short, void *);
CODE:
	func   = INT2PTR(int(*)(void *, int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2, p3);
OUTPUT:
	RETVAL

void *
nci_pvisp( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvisp( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvisp( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svisp( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvisp( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvisp( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivisp( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdisp( c_func, d0, i1, s2, p3 )
	SV* c_func
	double d0
	int i1
	short s2
	void * p3
PREINIT:
	void *(*func)(double, int, short, void *);
CODE:
	func   = INT2PTR(void *(*)(double, int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2, p3);
OUTPUT:
	RETVAL

void
nci_vdisp( c_func, d0, i1, s2, p3 )
	SV* c_func
	double d0
	int i1
	short s2
	void * p3
PREINIT:
	void(*func)(double, int, short, void *);
CODE:
	func   = INT2PTR(void(*)(double, int, short, void *), SvIV(c_func) );
	(*func)(d0, i1, s2, p3);

double
nci_ddisp( c_func, d0, i1, s2, p3 )
	SV* c_func
	double d0
	int i1
	short s2
	void * p3
PREINIT:
	double(*func)(double, int, short, void *);
CODE:
	func   = INT2PTR(double(*)(double, int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2, p3);
OUTPUT:
	RETVAL

short
nci_sdisp( c_func, d0, i1, s2, p3 )
	SV* c_func
	double d0
	int i1
	short s2
	void * p3
PREINIT:
	short(*func)(double, int, short, void *);
CODE:
	func   = INT2PTR(short(*)(double, int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2, p3);
OUTPUT:
	RETVAL

float
nci_fdisp( c_func, d0, i1, s2, p3 )
	SV* c_func
	double d0
	int i1
	short s2
	void * p3
PREINIT:
	float(*func)(double, int, short, void *);
CODE:
	func   = INT2PTR(float(*)(double, int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2, p3);
OUTPUT:
	RETVAL

char *
nci_tdisp( c_func, d0, i1, s2, p3 )
	SV* c_func
	double d0
	int i1
	short s2
	void * p3
PREINIT:
	char *(*func)(double, int, short, void *);
CODE:
	func   = INT2PTR(char *(*)(double, int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2, p3);
OUTPUT:
	RETVAL

int
nci_idisp( c_func, d0, i1, s2, p3 )
	SV* c_func
	double d0
	int i1
	short s2
	void * p3
PREINIT:
	int(*func)(double, int, short, void *);
CODE:
	func   = INT2PTR(int(*)(double, int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2, p3);
OUTPUT:
	RETVAL

void *
nci_psisp( c_func, s0, i1, s2, p3 )
	SV* c_func
	short s0
	int i1
	short s2
	void * p3
PREINIT:
	void *(*func)(short, int, short, void *);
CODE:
	func   = INT2PTR(void *(*)(short, int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2, p3);
OUTPUT:
	RETVAL

void
nci_vsisp( c_func, s0, i1, s2, p3 )
	SV* c_func
	short s0
	int i1
	short s2
	void * p3
PREINIT:
	void(*func)(short, int, short, void *);
CODE:
	func   = INT2PTR(void(*)(short, int, short, void *), SvIV(c_func) );
	(*func)(s0, i1, s2, p3);

double
nci_dsisp( c_func, s0, i1, s2, p3 )
	SV* c_func
	short s0
	int i1
	short s2
	void * p3
PREINIT:
	double(*func)(short, int, short, void *);
CODE:
	func   = INT2PTR(double(*)(short, int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2, p3);
OUTPUT:
	RETVAL

short
nci_ssisp( c_func, s0, i1, s2, p3 )
	SV* c_func
	short s0
	int i1
	short s2
	void * p3
PREINIT:
	short(*func)(short, int, short, void *);
CODE:
	func   = INT2PTR(short(*)(short, int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2, p3);
OUTPUT:
	RETVAL

float
nci_fsisp( c_func, s0, i1, s2, p3 )
	SV* c_func
	short s0
	int i1
	short s2
	void * p3
PREINIT:
	float(*func)(short, int, short, void *);
CODE:
	func   = INT2PTR(float(*)(short, int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2, p3);
OUTPUT:
	RETVAL

char *
nci_tsisp( c_func, s0, i1, s2, p3 )
	SV* c_func
	short s0
	int i1
	short s2
	void * p3
PREINIT:
	char *(*func)(short, int, short, void *);
CODE:
	func   = INT2PTR(char *(*)(short, int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2, p3);
OUTPUT:
	RETVAL

int
nci_isisp( c_func, s0, i1, s2, p3 )
	SV* c_func
	short s0
	int i1
	short s2
	void * p3
PREINIT:
	int(*func)(short, int, short, void *);
CODE:
	func   = INT2PTR(int(*)(short, int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2, p3);
OUTPUT:
	RETVAL

void *
nci_pfisp( c_func, f0, i1, s2, p3 )
	SV* c_func
	float f0
	int i1
	short s2
	void * p3
PREINIT:
	void *(*func)(float, int, short, void *);
CODE:
	func   = INT2PTR(void *(*)(float, int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2, p3);
OUTPUT:
	RETVAL

void
nci_vfisp( c_func, f0, i1, s2, p3 )
	SV* c_func
	float f0
	int i1
	short s2
	void * p3
PREINIT:
	void(*func)(float, int, short, void *);
CODE:
	func   = INT2PTR(void(*)(float, int, short, void *), SvIV(c_func) );
	(*func)(f0, i1, s2, p3);

double
nci_dfisp( c_func, f0, i1, s2, p3 )
	SV* c_func
	float f0
	int i1
	short s2
	void * p3
PREINIT:
	double(*func)(float, int, short, void *);
CODE:
	func   = INT2PTR(double(*)(float, int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2, p3);
OUTPUT:
	RETVAL

short
nci_sfisp( c_func, f0, i1, s2, p3 )
	SV* c_func
	float f0
	int i1
	short s2
	void * p3
PREINIT:
	short(*func)(float, int, short, void *);
CODE:
	func   = INT2PTR(short(*)(float, int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2, p3);
OUTPUT:
	RETVAL

float
nci_ffisp( c_func, f0, i1, s2, p3 )
	SV* c_func
	float f0
	int i1
	short s2
	void * p3
PREINIT:
	float(*func)(float, int, short, void *);
CODE:
	func   = INT2PTR(float(*)(float, int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2, p3);
OUTPUT:
	RETVAL

char *
nci_tfisp( c_func, f0, i1, s2, p3 )
	SV* c_func
	float f0
	int i1
	short s2
	void * p3
PREINIT:
	char *(*func)(float, int, short, void *);
CODE:
	func   = INT2PTR(char *(*)(float, int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2, p3);
OUTPUT:
	RETVAL

int
nci_ifisp( c_func, f0, i1, s2, p3 )
	SV* c_func
	float f0
	int i1
	short s2
	void * p3
PREINIT:
	int(*func)(float, int, short, void *);
CODE:
	func   = INT2PTR(int(*)(float, int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2, p3);
OUTPUT:
	RETVAL

void *
nci_ptisp( c_func, t0, i1, s2, p3 )
	SV* c_func
	char * t0
	int i1
	short s2
	void * p3
PREINIT:
	void *(*func)(char *, int, short, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2, p3);
OUTPUT:
	RETVAL

void
nci_vtisp( c_func, t0, i1, s2, p3 )
	SV* c_func
	char * t0
	int i1
	short s2
	void * p3
PREINIT:
	void(*func)(char *, int, short, void *);
CODE:
	func   = INT2PTR(void(*)(char *, int, short, void *), SvIV(c_func) );
	(*func)(t0, i1, s2, p3);

double
nci_dtisp( c_func, t0, i1, s2, p3 )
	SV* c_func
	char * t0
	int i1
	short s2
	void * p3
PREINIT:
	double(*func)(char *, int, short, void *);
CODE:
	func   = INT2PTR(double(*)(char *, int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2, p3);
OUTPUT:
	RETVAL

short
nci_stisp( c_func, t0, i1, s2, p3 )
	SV* c_func
	char * t0
	int i1
	short s2
	void * p3
PREINIT:
	short(*func)(char *, int, short, void *);
CODE:
	func   = INT2PTR(short(*)(char *, int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2, p3);
OUTPUT:
	RETVAL

float
nci_ftisp( c_func, t0, i1, s2, p3 )
	SV* c_func
	char * t0
	int i1
	short s2
	void * p3
PREINIT:
	float(*func)(char *, int, short, void *);
CODE:
	func   = INT2PTR(float(*)(char *, int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2, p3);
OUTPUT:
	RETVAL

char *
nci_ttisp( c_func, t0, i1, s2, p3 )
	SV* c_func
	char * t0
	int i1
	short s2
	void * p3
PREINIT:
	char *(*func)(char *, int, short, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2, p3);
OUTPUT:
	RETVAL

int
nci_itisp( c_func, t0, i1, s2, p3 )
	SV* c_func
	char * t0
	int i1
	short s2
	void * p3
PREINIT:
	int(*func)(char *, int, short, void *);
CODE:
	func   = INT2PTR(int(*)(char *, int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2, p3);
OUTPUT:
	RETVAL

void *
nci_piisp( c_func, i0, i1, s2, p3 )
	SV* c_func
	int i0
	int i1
	short s2
	void * p3
PREINIT:
	void *(*func)(int, int, short, void *);
CODE:
	func   = INT2PTR(void *(*)(int, int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2, p3);
OUTPUT:
	RETVAL

void
nci_viisp( c_func, i0, i1, s2, p3 )
	SV* c_func
	int i0
	int i1
	short s2
	void * p3
PREINIT:
	void(*func)(int, int, short, void *);
CODE:
	func   = INT2PTR(void(*)(int, int, short, void *), SvIV(c_func) );
	(*func)(i0, i1, s2, p3);

double
nci_diisp( c_func, i0, i1, s2, p3 )
	SV* c_func
	int i0
	int i1
	short s2
	void * p3
PREINIT:
	double(*func)(int, int, short, void *);
CODE:
	func   = INT2PTR(double(*)(int, int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2, p3);
OUTPUT:
	RETVAL

short
nci_siisp( c_func, i0, i1, s2, p3 )
	SV* c_func
	int i0
	int i1
	short s2
	void * p3
PREINIT:
	short(*func)(int, int, short, void *);
CODE:
	func   = INT2PTR(short(*)(int, int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2, p3);
OUTPUT:
	RETVAL

float
nci_fiisp( c_func, i0, i1, s2, p3 )
	SV* c_func
	int i0
	int i1
	short s2
	void * p3
PREINIT:
	float(*func)(int, int, short, void *);
CODE:
	func   = INT2PTR(float(*)(int, int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2, p3);
OUTPUT:
	RETVAL

char *
nci_tiisp( c_func, i0, i1, s2, p3 )
	SV* c_func
	int i0
	int i1
	short s2
	void * p3
PREINIT:
	char *(*func)(int, int, short, void *);
CODE:
	func   = INT2PTR(char *(*)(int, int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2, p3);
OUTPUT:
	RETVAL

int
nci_iiisp( c_func, i0, i1, s2, p3 )
	SV* c_func
	int i0
	int i1
	short s2
	void * p3
PREINIT:
	int(*func)(int, int, short, void *);
CODE:
	func   = INT2PTR(int(*)(int, int, short, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2, p3);
OUTPUT:
	RETVAL

void *
nci_pppfp( c_func, p0, p1, f2, p3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	void * p3
PREINIT:
	void *(*func)(void *, void *, float, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2, p3);
OUTPUT:
	RETVAL

void
nci_vppfp( c_func, p0, p1, f2, p3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	void * p3
PREINIT:
	void(*func)(void *, void *, float, void *);
CODE:
	func   = INT2PTR(void(*)(void *, void *, float, void *), SvIV(c_func) );
	(*func)(p0, p1, f2, p3);

double
nci_dppfp( c_func, p0, p1, f2, p3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	void * p3
PREINIT:
	double(*func)(void *, void *, float, void *);
CODE:
	func   = INT2PTR(double(*)(void *, void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2, p3);
OUTPUT:
	RETVAL

short
nci_sppfp( c_func, p0, p1, f2, p3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	void * p3
PREINIT:
	short(*func)(void *, void *, float, void *);
CODE:
	func   = INT2PTR(short(*)(void *, void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2, p3);
OUTPUT:
	RETVAL

float
nci_fppfp( c_func, p0, p1, f2, p3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	void * p3
PREINIT:
	float(*func)(void *, void *, float, void *);
CODE:
	func   = INT2PTR(float(*)(void *, void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2, p3);
OUTPUT:
	RETVAL

char *
nci_tppfp( c_func, p0, p1, f2, p3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	void * p3
PREINIT:
	char *(*func)(void *, void *, float, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2, p3);
OUTPUT:
	RETVAL

int
nci_ippfp( c_func, p0, p1, f2, p3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	void * p3
PREINIT:
	int(*func)(void *, void *, float, void *);
CODE:
	func   = INT2PTR(int(*)(void *, void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2, p3);
OUTPUT:
	RETVAL

void *
nci_pvpfp( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvpfp( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvpfp( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svpfp( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvpfp( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvpfp( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivpfp( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdpfp( c_func, d0, p1, f2, p3 )
	SV* c_func
	double d0
	void * p1
	float f2
	void * p3
PREINIT:
	void *(*func)(double, void *, float, void *);
CODE:
	func   = INT2PTR(void *(*)(double, void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2, p3);
OUTPUT:
	RETVAL

void
nci_vdpfp( c_func, d0, p1, f2, p3 )
	SV* c_func
	double d0
	void * p1
	float f2
	void * p3
PREINIT:
	void(*func)(double, void *, float, void *);
CODE:
	func   = INT2PTR(void(*)(double, void *, float, void *), SvIV(c_func) );
	(*func)(d0, p1, f2, p3);

double
nci_ddpfp( c_func, d0, p1, f2, p3 )
	SV* c_func
	double d0
	void * p1
	float f2
	void * p3
PREINIT:
	double(*func)(double, void *, float, void *);
CODE:
	func   = INT2PTR(double(*)(double, void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2, p3);
OUTPUT:
	RETVAL

short
nci_sdpfp( c_func, d0, p1, f2, p3 )
	SV* c_func
	double d0
	void * p1
	float f2
	void * p3
PREINIT:
	short(*func)(double, void *, float, void *);
CODE:
	func   = INT2PTR(short(*)(double, void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2, p3);
OUTPUT:
	RETVAL

float
nci_fdpfp( c_func, d0, p1, f2, p3 )
	SV* c_func
	double d0
	void * p1
	float f2
	void * p3
PREINIT:
	float(*func)(double, void *, float, void *);
CODE:
	func   = INT2PTR(float(*)(double, void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2, p3);
OUTPUT:
	RETVAL

char *
nci_tdpfp( c_func, d0, p1, f2, p3 )
	SV* c_func
	double d0
	void * p1
	float f2
	void * p3
PREINIT:
	char *(*func)(double, void *, float, void *);
CODE:
	func   = INT2PTR(char *(*)(double, void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2, p3);
OUTPUT:
	RETVAL

int
nci_idpfp( c_func, d0, p1, f2, p3 )
	SV* c_func
	double d0
	void * p1
	float f2
	void * p3
PREINIT:
	int(*func)(double, void *, float, void *);
CODE:
	func   = INT2PTR(int(*)(double, void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2, p3);
OUTPUT:
	RETVAL

void *
nci_pspfp( c_func, s0, p1, f2, p3 )
	SV* c_func
	short s0
	void * p1
	float f2
	void * p3
PREINIT:
	void *(*func)(short, void *, float, void *);
CODE:
	func   = INT2PTR(void *(*)(short, void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2, p3);
OUTPUT:
	RETVAL

void
nci_vspfp( c_func, s0, p1, f2, p3 )
	SV* c_func
	short s0
	void * p1
	float f2
	void * p3
PREINIT:
	void(*func)(short, void *, float, void *);
CODE:
	func   = INT2PTR(void(*)(short, void *, float, void *), SvIV(c_func) );
	(*func)(s0, p1, f2, p3);

double
nci_dspfp( c_func, s0, p1, f2, p3 )
	SV* c_func
	short s0
	void * p1
	float f2
	void * p3
PREINIT:
	double(*func)(short, void *, float, void *);
CODE:
	func   = INT2PTR(double(*)(short, void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2, p3);
OUTPUT:
	RETVAL

short
nci_sspfp( c_func, s0, p1, f2, p3 )
	SV* c_func
	short s0
	void * p1
	float f2
	void * p3
PREINIT:
	short(*func)(short, void *, float, void *);
CODE:
	func   = INT2PTR(short(*)(short, void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2, p3);
OUTPUT:
	RETVAL

float
nci_fspfp( c_func, s0, p1, f2, p3 )
	SV* c_func
	short s0
	void * p1
	float f2
	void * p3
PREINIT:
	float(*func)(short, void *, float, void *);
CODE:
	func   = INT2PTR(float(*)(short, void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2, p3);
OUTPUT:
	RETVAL

char *
nci_tspfp( c_func, s0, p1, f2, p3 )
	SV* c_func
	short s0
	void * p1
	float f2
	void * p3
PREINIT:
	char *(*func)(short, void *, float, void *);
CODE:
	func   = INT2PTR(char *(*)(short, void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2, p3);
OUTPUT:
	RETVAL

int
nci_ispfp( c_func, s0, p1, f2, p3 )
	SV* c_func
	short s0
	void * p1
	float f2
	void * p3
PREINIT:
	int(*func)(short, void *, float, void *);
CODE:
	func   = INT2PTR(int(*)(short, void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2, p3);
OUTPUT:
	RETVAL

void *
nci_pfpfp( c_func, f0, p1, f2, p3 )
	SV* c_func
	float f0
	void * p1
	float f2
	void * p3
PREINIT:
	void *(*func)(float, void *, float, void *);
CODE:
	func   = INT2PTR(void *(*)(float, void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2, p3);
OUTPUT:
	RETVAL

void
nci_vfpfp( c_func, f0, p1, f2, p3 )
	SV* c_func
	float f0
	void * p1
	float f2
	void * p3
PREINIT:
	void(*func)(float, void *, float, void *);
CODE:
	func   = INT2PTR(void(*)(float, void *, float, void *), SvIV(c_func) );
	(*func)(f0, p1, f2, p3);

double
nci_dfpfp( c_func, f0, p1, f2, p3 )
	SV* c_func
	float f0
	void * p1
	float f2
	void * p3
PREINIT:
	double(*func)(float, void *, float, void *);
CODE:
	func   = INT2PTR(double(*)(float, void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2, p3);
OUTPUT:
	RETVAL

short
nci_sfpfp( c_func, f0, p1, f2, p3 )
	SV* c_func
	float f0
	void * p1
	float f2
	void * p3
PREINIT:
	short(*func)(float, void *, float, void *);
CODE:
	func   = INT2PTR(short(*)(float, void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2, p3);
OUTPUT:
	RETVAL

float
nci_ffpfp( c_func, f0, p1, f2, p3 )
	SV* c_func
	float f0
	void * p1
	float f2
	void * p3
PREINIT:
	float(*func)(float, void *, float, void *);
CODE:
	func   = INT2PTR(float(*)(float, void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2, p3);
OUTPUT:
	RETVAL

char *
nci_tfpfp( c_func, f0, p1, f2, p3 )
	SV* c_func
	float f0
	void * p1
	float f2
	void * p3
PREINIT:
	char *(*func)(float, void *, float, void *);
CODE:
	func   = INT2PTR(char *(*)(float, void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2, p3);
OUTPUT:
	RETVAL

int
nci_ifpfp( c_func, f0, p1, f2, p3 )
	SV* c_func
	float f0
	void * p1
	float f2
	void * p3
PREINIT:
	int(*func)(float, void *, float, void *);
CODE:
	func   = INT2PTR(int(*)(float, void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2, p3);
OUTPUT:
	RETVAL

void *
nci_ptpfp( c_func, t0, p1, f2, p3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	void * p3
PREINIT:
	void *(*func)(char *, void *, float, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2, p3);
OUTPUT:
	RETVAL

void
nci_vtpfp( c_func, t0, p1, f2, p3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	void * p3
PREINIT:
	void(*func)(char *, void *, float, void *);
CODE:
	func   = INT2PTR(void(*)(char *, void *, float, void *), SvIV(c_func) );
	(*func)(t0, p1, f2, p3);

double
nci_dtpfp( c_func, t0, p1, f2, p3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	void * p3
PREINIT:
	double(*func)(char *, void *, float, void *);
CODE:
	func   = INT2PTR(double(*)(char *, void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2, p3);
OUTPUT:
	RETVAL

short
nci_stpfp( c_func, t0, p1, f2, p3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	void * p3
PREINIT:
	short(*func)(char *, void *, float, void *);
CODE:
	func   = INT2PTR(short(*)(char *, void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2, p3);
OUTPUT:
	RETVAL

float
nci_ftpfp( c_func, t0, p1, f2, p3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	void * p3
PREINIT:
	float(*func)(char *, void *, float, void *);
CODE:
	func   = INT2PTR(float(*)(char *, void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2, p3);
OUTPUT:
	RETVAL

char *
nci_ttpfp( c_func, t0, p1, f2, p3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	void * p3
PREINIT:
	char *(*func)(char *, void *, float, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2, p3);
OUTPUT:
	RETVAL

int
nci_itpfp( c_func, t0, p1, f2, p3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	void * p3
PREINIT:
	int(*func)(char *, void *, float, void *);
CODE:
	func   = INT2PTR(int(*)(char *, void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2, p3);
OUTPUT:
	RETVAL

void *
nci_pipfp( c_func, i0, p1, f2, p3 )
	SV* c_func
	int i0
	void * p1
	float f2
	void * p3
PREINIT:
	void *(*func)(int, void *, float, void *);
CODE:
	func   = INT2PTR(void *(*)(int, void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2, p3);
OUTPUT:
	RETVAL

void
nci_vipfp( c_func, i0, p1, f2, p3 )
	SV* c_func
	int i0
	void * p1
	float f2
	void * p3
PREINIT:
	void(*func)(int, void *, float, void *);
CODE:
	func   = INT2PTR(void(*)(int, void *, float, void *), SvIV(c_func) );
	(*func)(i0, p1, f2, p3);

double
nci_dipfp( c_func, i0, p1, f2, p3 )
	SV* c_func
	int i0
	void * p1
	float f2
	void * p3
PREINIT:
	double(*func)(int, void *, float, void *);
CODE:
	func   = INT2PTR(double(*)(int, void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2, p3);
OUTPUT:
	RETVAL

short
nci_sipfp( c_func, i0, p1, f2, p3 )
	SV* c_func
	int i0
	void * p1
	float f2
	void * p3
PREINIT:
	short(*func)(int, void *, float, void *);
CODE:
	func   = INT2PTR(short(*)(int, void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2, p3);
OUTPUT:
	RETVAL

float
nci_fipfp( c_func, i0, p1, f2, p3 )
	SV* c_func
	int i0
	void * p1
	float f2
	void * p3
PREINIT:
	float(*func)(int, void *, float, void *);
CODE:
	func   = INT2PTR(float(*)(int, void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2, p3);
OUTPUT:
	RETVAL

char *
nci_tipfp( c_func, i0, p1, f2, p3 )
	SV* c_func
	int i0
	void * p1
	float f2
	void * p3
PREINIT:
	char *(*func)(int, void *, float, void *);
CODE:
	func   = INT2PTR(char *(*)(int, void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2, p3);
OUTPUT:
	RETVAL

int
nci_iipfp( c_func, i0, p1, f2, p3 )
	SV* c_func
	int i0
	void * p1
	float f2
	void * p3
PREINIT:
	int(*func)(int, void *, float, void *);
CODE:
	func   = INT2PTR(int(*)(int, void *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2, p3);
OUTPUT:
	RETVAL

void *
nci_ppdfp( c_func, p0, d1, f2, p3 )
	SV* c_func
	void * p0
	double d1
	float f2
	void * p3
PREINIT:
	void *(*func)(void *, double, float, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2, p3);
OUTPUT:
	RETVAL

void
nci_vpdfp( c_func, p0, d1, f2, p3 )
	SV* c_func
	void * p0
	double d1
	float f2
	void * p3
PREINIT:
	void(*func)(void *, double, float, void *);
CODE:
	func   = INT2PTR(void(*)(void *, double, float, void *), SvIV(c_func) );
	(*func)(p0, d1, f2, p3);

double
nci_dpdfp( c_func, p0, d1, f2, p3 )
	SV* c_func
	void * p0
	double d1
	float f2
	void * p3
PREINIT:
	double(*func)(void *, double, float, void *);
CODE:
	func   = INT2PTR(double(*)(void *, double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2, p3);
OUTPUT:
	RETVAL

short
nci_spdfp( c_func, p0, d1, f2, p3 )
	SV* c_func
	void * p0
	double d1
	float f2
	void * p3
PREINIT:
	short(*func)(void *, double, float, void *);
CODE:
	func   = INT2PTR(short(*)(void *, double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2, p3);
OUTPUT:
	RETVAL

float
nci_fpdfp( c_func, p0, d1, f2, p3 )
	SV* c_func
	void * p0
	double d1
	float f2
	void * p3
PREINIT:
	float(*func)(void *, double, float, void *);
CODE:
	func   = INT2PTR(float(*)(void *, double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2, p3);
OUTPUT:
	RETVAL

char *
nci_tpdfp( c_func, p0, d1, f2, p3 )
	SV* c_func
	void * p0
	double d1
	float f2
	void * p3
PREINIT:
	char *(*func)(void *, double, float, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2, p3);
OUTPUT:
	RETVAL

int
nci_ipdfp( c_func, p0, d1, f2, p3 )
	SV* c_func
	void * p0
	double d1
	float f2
	void * p3
PREINIT:
	int(*func)(void *, double, float, void *);
CODE:
	func   = INT2PTR(int(*)(void *, double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2, p3);
OUTPUT:
	RETVAL

void *
nci_pvdfp( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvdfp( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvdfp( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svdfp( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvdfp( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvdfp( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivdfp( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pddfp( c_func, d0, d1, f2, p3 )
	SV* c_func
	double d0
	double d1
	float f2
	void * p3
PREINIT:
	void *(*func)(double, double, float, void *);
CODE:
	func   = INT2PTR(void *(*)(double, double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2, p3);
OUTPUT:
	RETVAL

void
nci_vddfp( c_func, d0, d1, f2, p3 )
	SV* c_func
	double d0
	double d1
	float f2
	void * p3
PREINIT:
	void(*func)(double, double, float, void *);
CODE:
	func   = INT2PTR(void(*)(double, double, float, void *), SvIV(c_func) );
	(*func)(d0, d1, f2, p3);

double
nci_dddfp( c_func, d0, d1, f2, p3 )
	SV* c_func
	double d0
	double d1
	float f2
	void * p3
PREINIT:
	double(*func)(double, double, float, void *);
CODE:
	func   = INT2PTR(double(*)(double, double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2, p3);
OUTPUT:
	RETVAL

short
nci_sddfp( c_func, d0, d1, f2, p3 )
	SV* c_func
	double d0
	double d1
	float f2
	void * p3
PREINIT:
	short(*func)(double, double, float, void *);
CODE:
	func   = INT2PTR(short(*)(double, double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2, p3);
OUTPUT:
	RETVAL

float
nci_fddfp( c_func, d0, d1, f2, p3 )
	SV* c_func
	double d0
	double d1
	float f2
	void * p3
PREINIT:
	float(*func)(double, double, float, void *);
CODE:
	func   = INT2PTR(float(*)(double, double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2, p3);
OUTPUT:
	RETVAL

char *
nci_tddfp( c_func, d0, d1, f2, p3 )
	SV* c_func
	double d0
	double d1
	float f2
	void * p3
PREINIT:
	char *(*func)(double, double, float, void *);
CODE:
	func   = INT2PTR(char *(*)(double, double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2, p3);
OUTPUT:
	RETVAL

int
nci_iddfp( c_func, d0, d1, f2, p3 )
	SV* c_func
	double d0
	double d1
	float f2
	void * p3
PREINIT:
	int(*func)(double, double, float, void *);
CODE:
	func   = INT2PTR(int(*)(double, double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2, p3);
OUTPUT:
	RETVAL

void *
nci_psdfp( c_func, s0, d1, f2, p3 )
	SV* c_func
	short s0
	double d1
	float f2
	void * p3
PREINIT:
	void *(*func)(short, double, float, void *);
CODE:
	func   = INT2PTR(void *(*)(short, double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2, p3);
OUTPUT:
	RETVAL

void
nci_vsdfp( c_func, s0, d1, f2, p3 )
	SV* c_func
	short s0
	double d1
	float f2
	void * p3
PREINIT:
	void(*func)(short, double, float, void *);
CODE:
	func   = INT2PTR(void(*)(short, double, float, void *), SvIV(c_func) );
	(*func)(s0, d1, f2, p3);

double
nci_dsdfp( c_func, s0, d1, f2, p3 )
	SV* c_func
	short s0
	double d1
	float f2
	void * p3
PREINIT:
	double(*func)(short, double, float, void *);
CODE:
	func   = INT2PTR(double(*)(short, double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2, p3);
OUTPUT:
	RETVAL

short
nci_ssdfp( c_func, s0, d1, f2, p3 )
	SV* c_func
	short s0
	double d1
	float f2
	void * p3
PREINIT:
	short(*func)(short, double, float, void *);
CODE:
	func   = INT2PTR(short(*)(short, double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2, p3);
OUTPUT:
	RETVAL

float
nci_fsdfp( c_func, s0, d1, f2, p3 )
	SV* c_func
	short s0
	double d1
	float f2
	void * p3
PREINIT:
	float(*func)(short, double, float, void *);
CODE:
	func   = INT2PTR(float(*)(short, double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2, p3);
OUTPUT:
	RETVAL

char *
nci_tsdfp( c_func, s0, d1, f2, p3 )
	SV* c_func
	short s0
	double d1
	float f2
	void * p3
PREINIT:
	char *(*func)(short, double, float, void *);
CODE:
	func   = INT2PTR(char *(*)(short, double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2, p3);
OUTPUT:
	RETVAL

int
nci_isdfp( c_func, s0, d1, f2, p3 )
	SV* c_func
	short s0
	double d1
	float f2
	void * p3
PREINIT:
	int(*func)(short, double, float, void *);
CODE:
	func   = INT2PTR(int(*)(short, double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2, p3);
OUTPUT:
	RETVAL

void *
nci_pfdfp( c_func, f0, d1, f2, p3 )
	SV* c_func
	float f0
	double d1
	float f2
	void * p3
PREINIT:
	void *(*func)(float, double, float, void *);
CODE:
	func   = INT2PTR(void *(*)(float, double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2, p3);
OUTPUT:
	RETVAL

void
nci_vfdfp( c_func, f0, d1, f2, p3 )
	SV* c_func
	float f0
	double d1
	float f2
	void * p3
PREINIT:
	void(*func)(float, double, float, void *);
CODE:
	func   = INT2PTR(void(*)(float, double, float, void *), SvIV(c_func) );
	(*func)(f0, d1, f2, p3);

double
nci_dfdfp( c_func, f0, d1, f2, p3 )
	SV* c_func
	float f0
	double d1
	float f2
	void * p3
PREINIT:
	double(*func)(float, double, float, void *);
CODE:
	func   = INT2PTR(double(*)(float, double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2, p3);
OUTPUT:
	RETVAL

short
nci_sfdfp( c_func, f0, d1, f2, p3 )
	SV* c_func
	float f0
	double d1
	float f2
	void * p3
PREINIT:
	short(*func)(float, double, float, void *);
CODE:
	func   = INT2PTR(short(*)(float, double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2, p3);
OUTPUT:
	RETVAL

float
nci_ffdfp( c_func, f0, d1, f2, p3 )
	SV* c_func
	float f0
	double d1
	float f2
	void * p3
PREINIT:
	float(*func)(float, double, float, void *);
CODE:
	func   = INT2PTR(float(*)(float, double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2, p3);
OUTPUT:
	RETVAL

char *
nci_tfdfp( c_func, f0, d1, f2, p3 )
	SV* c_func
	float f0
	double d1
	float f2
	void * p3
PREINIT:
	char *(*func)(float, double, float, void *);
CODE:
	func   = INT2PTR(char *(*)(float, double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2, p3);
OUTPUT:
	RETVAL

int
nci_ifdfp( c_func, f0, d1, f2, p3 )
	SV* c_func
	float f0
	double d1
	float f2
	void * p3
PREINIT:
	int(*func)(float, double, float, void *);
CODE:
	func   = INT2PTR(int(*)(float, double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2, p3);
OUTPUT:
	RETVAL

void *
nci_ptdfp( c_func, t0, d1, f2, p3 )
	SV* c_func
	char * t0
	double d1
	float f2
	void * p3
PREINIT:
	void *(*func)(char *, double, float, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2, p3);
OUTPUT:
	RETVAL

void
nci_vtdfp( c_func, t0, d1, f2, p3 )
	SV* c_func
	char * t0
	double d1
	float f2
	void * p3
PREINIT:
	void(*func)(char *, double, float, void *);
CODE:
	func   = INT2PTR(void(*)(char *, double, float, void *), SvIV(c_func) );
	(*func)(t0, d1, f2, p3);

double
nci_dtdfp( c_func, t0, d1, f2, p3 )
	SV* c_func
	char * t0
	double d1
	float f2
	void * p3
PREINIT:
	double(*func)(char *, double, float, void *);
CODE:
	func   = INT2PTR(double(*)(char *, double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2, p3);
OUTPUT:
	RETVAL

short
nci_stdfp( c_func, t0, d1, f2, p3 )
	SV* c_func
	char * t0
	double d1
	float f2
	void * p3
PREINIT:
	short(*func)(char *, double, float, void *);
CODE:
	func   = INT2PTR(short(*)(char *, double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2, p3);
OUTPUT:
	RETVAL

float
nci_ftdfp( c_func, t0, d1, f2, p3 )
	SV* c_func
	char * t0
	double d1
	float f2
	void * p3
PREINIT:
	float(*func)(char *, double, float, void *);
CODE:
	func   = INT2PTR(float(*)(char *, double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2, p3);
OUTPUT:
	RETVAL

char *
nci_ttdfp( c_func, t0, d1, f2, p3 )
	SV* c_func
	char * t0
	double d1
	float f2
	void * p3
PREINIT:
	char *(*func)(char *, double, float, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2, p3);
OUTPUT:
	RETVAL

int
nci_itdfp( c_func, t0, d1, f2, p3 )
	SV* c_func
	char * t0
	double d1
	float f2
	void * p3
PREINIT:
	int(*func)(char *, double, float, void *);
CODE:
	func   = INT2PTR(int(*)(char *, double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2, p3);
OUTPUT:
	RETVAL

void *
nci_pidfp( c_func, i0, d1, f2, p3 )
	SV* c_func
	int i0
	double d1
	float f2
	void * p3
PREINIT:
	void *(*func)(int, double, float, void *);
CODE:
	func   = INT2PTR(void *(*)(int, double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2, p3);
OUTPUT:
	RETVAL

void
nci_vidfp( c_func, i0, d1, f2, p3 )
	SV* c_func
	int i0
	double d1
	float f2
	void * p3
PREINIT:
	void(*func)(int, double, float, void *);
CODE:
	func   = INT2PTR(void(*)(int, double, float, void *), SvIV(c_func) );
	(*func)(i0, d1, f2, p3);

double
nci_didfp( c_func, i0, d1, f2, p3 )
	SV* c_func
	int i0
	double d1
	float f2
	void * p3
PREINIT:
	double(*func)(int, double, float, void *);
CODE:
	func   = INT2PTR(double(*)(int, double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2, p3);
OUTPUT:
	RETVAL

short
nci_sidfp( c_func, i0, d1, f2, p3 )
	SV* c_func
	int i0
	double d1
	float f2
	void * p3
PREINIT:
	short(*func)(int, double, float, void *);
CODE:
	func   = INT2PTR(short(*)(int, double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2, p3);
OUTPUT:
	RETVAL

float
nci_fidfp( c_func, i0, d1, f2, p3 )
	SV* c_func
	int i0
	double d1
	float f2
	void * p3
PREINIT:
	float(*func)(int, double, float, void *);
CODE:
	func   = INT2PTR(float(*)(int, double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2, p3);
OUTPUT:
	RETVAL

char *
nci_tidfp( c_func, i0, d1, f2, p3 )
	SV* c_func
	int i0
	double d1
	float f2
	void * p3
PREINIT:
	char *(*func)(int, double, float, void *);
CODE:
	func   = INT2PTR(char *(*)(int, double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2, p3);
OUTPUT:
	RETVAL

int
nci_iidfp( c_func, i0, d1, f2, p3 )
	SV* c_func
	int i0
	double d1
	float f2
	void * p3
PREINIT:
	int(*func)(int, double, float, void *);
CODE:
	func   = INT2PTR(int(*)(int, double, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2, p3);
OUTPUT:
	RETVAL

void *
nci_ppsfp( c_func, p0, s1, f2, p3 )
	SV* c_func
	void * p0
	short s1
	float f2
	void * p3
PREINIT:
	void *(*func)(void *, short, float, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2, p3);
OUTPUT:
	RETVAL

void
nci_vpsfp( c_func, p0, s1, f2, p3 )
	SV* c_func
	void * p0
	short s1
	float f2
	void * p3
PREINIT:
	void(*func)(void *, short, float, void *);
CODE:
	func   = INT2PTR(void(*)(void *, short, float, void *), SvIV(c_func) );
	(*func)(p0, s1, f2, p3);

double
nci_dpsfp( c_func, p0, s1, f2, p3 )
	SV* c_func
	void * p0
	short s1
	float f2
	void * p3
PREINIT:
	double(*func)(void *, short, float, void *);
CODE:
	func   = INT2PTR(double(*)(void *, short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2, p3);
OUTPUT:
	RETVAL

short
nci_spsfp( c_func, p0, s1, f2, p3 )
	SV* c_func
	void * p0
	short s1
	float f2
	void * p3
PREINIT:
	short(*func)(void *, short, float, void *);
CODE:
	func   = INT2PTR(short(*)(void *, short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2, p3);
OUTPUT:
	RETVAL

float
nci_fpsfp( c_func, p0, s1, f2, p3 )
	SV* c_func
	void * p0
	short s1
	float f2
	void * p3
PREINIT:
	float(*func)(void *, short, float, void *);
CODE:
	func   = INT2PTR(float(*)(void *, short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2, p3);
OUTPUT:
	RETVAL

char *
nci_tpsfp( c_func, p0, s1, f2, p3 )
	SV* c_func
	void * p0
	short s1
	float f2
	void * p3
PREINIT:
	char *(*func)(void *, short, float, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2, p3);
OUTPUT:
	RETVAL

int
nci_ipsfp( c_func, p0, s1, f2, p3 )
	SV* c_func
	void * p0
	short s1
	float f2
	void * p3
PREINIT:
	int(*func)(void *, short, float, void *);
CODE:
	func   = INT2PTR(int(*)(void *, short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2, p3);
OUTPUT:
	RETVAL

void *
nci_pvsfp( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvsfp( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvsfp( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svsfp( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvsfp( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvsfp( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivsfp( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdsfp( c_func, d0, s1, f2, p3 )
	SV* c_func
	double d0
	short s1
	float f2
	void * p3
PREINIT:
	void *(*func)(double, short, float, void *);
CODE:
	func   = INT2PTR(void *(*)(double, short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2, p3);
OUTPUT:
	RETVAL

void
nci_vdsfp( c_func, d0, s1, f2, p3 )
	SV* c_func
	double d0
	short s1
	float f2
	void * p3
PREINIT:
	void(*func)(double, short, float, void *);
CODE:
	func   = INT2PTR(void(*)(double, short, float, void *), SvIV(c_func) );
	(*func)(d0, s1, f2, p3);

double
nci_ddsfp( c_func, d0, s1, f2, p3 )
	SV* c_func
	double d0
	short s1
	float f2
	void * p3
PREINIT:
	double(*func)(double, short, float, void *);
CODE:
	func   = INT2PTR(double(*)(double, short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2, p3);
OUTPUT:
	RETVAL

short
nci_sdsfp( c_func, d0, s1, f2, p3 )
	SV* c_func
	double d0
	short s1
	float f2
	void * p3
PREINIT:
	short(*func)(double, short, float, void *);
CODE:
	func   = INT2PTR(short(*)(double, short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2, p3);
OUTPUT:
	RETVAL

float
nci_fdsfp( c_func, d0, s1, f2, p3 )
	SV* c_func
	double d0
	short s1
	float f2
	void * p3
PREINIT:
	float(*func)(double, short, float, void *);
CODE:
	func   = INT2PTR(float(*)(double, short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2, p3);
OUTPUT:
	RETVAL

char *
nci_tdsfp( c_func, d0, s1, f2, p3 )
	SV* c_func
	double d0
	short s1
	float f2
	void * p3
PREINIT:
	char *(*func)(double, short, float, void *);
CODE:
	func   = INT2PTR(char *(*)(double, short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2, p3);
OUTPUT:
	RETVAL

int
nci_idsfp( c_func, d0, s1, f2, p3 )
	SV* c_func
	double d0
	short s1
	float f2
	void * p3
PREINIT:
	int(*func)(double, short, float, void *);
CODE:
	func   = INT2PTR(int(*)(double, short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2, p3);
OUTPUT:
	RETVAL

void *
nci_pssfp( c_func, s0, s1, f2, p3 )
	SV* c_func
	short s0
	short s1
	float f2
	void * p3
PREINIT:
	void *(*func)(short, short, float, void *);
CODE:
	func   = INT2PTR(void *(*)(short, short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2, p3);
OUTPUT:
	RETVAL

void
nci_vssfp( c_func, s0, s1, f2, p3 )
	SV* c_func
	short s0
	short s1
	float f2
	void * p3
PREINIT:
	void(*func)(short, short, float, void *);
CODE:
	func   = INT2PTR(void(*)(short, short, float, void *), SvIV(c_func) );
	(*func)(s0, s1, f2, p3);

double
nci_dssfp( c_func, s0, s1, f2, p3 )
	SV* c_func
	short s0
	short s1
	float f2
	void * p3
PREINIT:
	double(*func)(short, short, float, void *);
CODE:
	func   = INT2PTR(double(*)(short, short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2, p3);
OUTPUT:
	RETVAL

short
nci_sssfp( c_func, s0, s1, f2, p3 )
	SV* c_func
	short s0
	short s1
	float f2
	void * p3
PREINIT:
	short(*func)(short, short, float, void *);
CODE:
	func   = INT2PTR(short(*)(short, short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2, p3);
OUTPUT:
	RETVAL

float
nci_fssfp( c_func, s0, s1, f2, p3 )
	SV* c_func
	short s0
	short s1
	float f2
	void * p3
PREINIT:
	float(*func)(short, short, float, void *);
CODE:
	func   = INT2PTR(float(*)(short, short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2, p3);
OUTPUT:
	RETVAL

char *
nci_tssfp( c_func, s0, s1, f2, p3 )
	SV* c_func
	short s0
	short s1
	float f2
	void * p3
PREINIT:
	char *(*func)(short, short, float, void *);
CODE:
	func   = INT2PTR(char *(*)(short, short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2, p3);
OUTPUT:
	RETVAL

int
nci_issfp( c_func, s0, s1, f2, p3 )
	SV* c_func
	short s0
	short s1
	float f2
	void * p3
PREINIT:
	int(*func)(short, short, float, void *);
CODE:
	func   = INT2PTR(int(*)(short, short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2, p3);
OUTPUT:
	RETVAL

void *
nci_pfsfp( c_func, f0, s1, f2, p3 )
	SV* c_func
	float f0
	short s1
	float f2
	void * p3
PREINIT:
	void *(*func)(float, short, float, void *);
CODE:
	func   = INT2PTR(void *(*)(float, short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2, p3);
OUTPUT:
	RETVAL

void
nci_vfsfp( c_func, f0, s1, f2, p3 )
	SV* c_func
	float f0
	short s1
	float f2
	void * p3
PREINIT:
	void(*func)(float, short, float, void *);
CODE:
	func   = INT2PTR(void(*)(float, short, float, void *), SvIV(c_func) );
	(*func)(f0, s1, f2, p3);

double
nci_dfsfp( c_func, f0, s1, f2, p3 )
	SV* c_func
	float f0
	short s1
	float f2
	void * p3
PREINIT:
	double(*func)(float, short, float, void *);
CODE:
	func   = INT2PTR(double(*)(float, short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2, p3);
OUTPUT:
	RETVAL

short
nci_sfsfp( c_func, f0, s1, f2, p3 )
	SV* c_func
	float f0
	short s1
	float f2
	void * p3
PREINIT:
	short(*func)(float, short, float, void *);
CODE:
	func   = INT2PTR(short(*)(float, short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2, p3);
OUTPUT:
	RETVAL

float
nci_ffsfp( c_func, f0, s1, f2, p3 )
	SV* c_func
	float f0
	short s1
	float f2
	void * p3
PREINIT:
	float(*func)(float, short, float, void *);
CODE:
	func   = INT2PTR(float(*)(float, short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2, p3);
OUTPUT:
	RETVAL

char *
nci_tfsfp( c_func, f0, s1, f2, p3 )
	SV* c_func
	float f0
	short s1
	float f2
	void * p3
PREINIT:
	char *(*func)(float, short, float, void *);
CODE:
	func   = INT2PTR(char *(*)(float, short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2, p3);
OUTPUT:
	RETVAL

int
nci_ifsfp( c_func, f0, s1, f2, p3 )
	SV* c_func
	float f0
	short s1
	float f2
	void * p3
PREINIT:
	int(*func)(float, short, float, void *);
CODE:
	func   = INT2PTR(int(*)(float, short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2, p3);
OUTPUT:
	RETVAL

void *
nci_ptsfp( c_func, t0, s1, f2, p3 )
	SV* c_func
	char * t0
	short s1
	float f2
	void * p3
PREINIT:
	void *(*func)(char *, short, float, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2, p3);
OUTPUT:
	RETVAL

void
nci_vtsfp( c_func, t0, s1, f2, p3 )
	SV* c_func
	char * t0
	short s1
	float f2
	void * p3
PREINIT:
	void(*func)(char *, short, float, void *);
CODE:
	func   = INT2PTR(void(*)(char *, short, float, void *), SvIV(c_func) );
	(*func)(t0, s1, f2, p3);

double
nci_dtsfp( c_func, t0, s1, f2, p3 )
	SV* c_func
	char * t0
	short s1
	float f2
	void * p3
PREINIT:
	double(*func)(char *, short, float, void *);
CODE:
	func   = INT2PTR(double(*)(char *, short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2, p3);
OUTPUT:
	RETVAL

short
nci_stsfp( c_func, t0, s1, f2, p3 )
	SV* c_func
	char * t0
	short s1
	float f2
	void * p3
PREINIT:
	short(*func)(char *, short, float, void *);
CODE:
	func   = INT2PTR(short(*)(char *, short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2, p3);
OUTPUT:
	RETVAL

float
nci_ftsfp( c_func, t0, s1, f2, p3 )
	SV* c_func
	char * t0
	short s1
	float f2
	void * p3
PREINIT:
	float(*func)(char *, short, float, void *);
CODE:
	func   = INT2PTR(float(*)(char *, short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2, p3);
OUTPUT:
	RETVAL

char *
nci_ttsfp( c_func, t0, s1, f2, p3 )
	SV* c_func
	char * t0
	short s1
	float f2
	void * p3
PREINIT:
	char *(*func)(char *, short, float, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2, p3);
OUTPUT:
	RETVAL

int
nci_itsfp( c_func, t0, s1, f2, p3 )
	SV* c_func
	char * t0
	short s1
	float f2
	void * p3
PREINIT:
	int(*func)(char *, short, float, void *);
CODE:
	func   = INT2PTR(int(*)(char *, short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2, p3);
OUTPUT:
	RETVAL

void *
nci_pisfp( c_func, i0, s1, f2, p3 )
	SV* c_func
	int i0
	short s1
	float f2
	void * p3
PREINIT:
	void *(*func)(int, short, float, void *);
CODE:
	func   = INT2PTR(void *(*)(int, short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2, p3);
OUTPUT:
	RETVAL

void
nci_visfp( c_func, i0, s1, f2, p3 )
	SV* c_func
	int i0
	short s1
	float f2
	void * p3
PREINIT:
	void(*func)(int, short, float, void *);
CODE:
	func   = INT2PTR(void(*)(int, short, float, void *), SvIV(c_func) );
	(*func)(i0, s1, f2, p3);

double
nci_disfp( c_func, i0, s1, f2, p3 )
	SV* c_func
	int i0
	short s1
	float f2
	void * p3
PREINIT:
	double(*func)(int, short, float, void *);
CODE:
	func   = INT2PTR(double(*)(int, short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2, p3);
OUTPUT:
	RETVAL

short
nci_sisfp( c_func, i0, s1, f2, p3 )
	SV* c_func
	int i0
	short s1
	float f2
	void * p3
PREINIT:
	short(*func)(int, short, float, void *);
CODE:
	func   = INT2PTR(short(*)(int, short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2, p3);
OUTPUT:
	RETVAL

float
nci_fisfp( c_func, i0, s1, f2, p3 )
	SV* c_func
	int i0
	short s1
	float f2
	void * p3
PREINIT:
	float(*func)(int, short, float, void *);
CODE:
	func   = INT2PTR(float(*)(int, short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2, p3);
OUTPUT:
	RETVAL

char *
nci_tisfp( c_func, i0, s1, f2, p3 )
	SV* c_func
	int i0
	short s1
	float f2
	void * p3
PREINIT:
	char *(*func)(int, short, float, void *);
CODE:
	func   = INT2PTR(char *(*)(int, short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2, p3);
OUTPUT:
	RETVAL

int
nci_iisfp( c_func, i0, s1, f2, p3 )
	SV* c_func
	int i0
	short s1
	float f2
	void * p3
PREINIT:
	int(*func)(int, short, float, void *);
CODE:
	func   = INT2PTR(int(*)(int, short, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2, p3);
OUTPUT:
	RETVAL

void *
nci_ppffp( c_func, p0, f1, f2, p3 )
	SV* c_func
	void * p0
	float f1
	float f2
	void * p3
PREINIT:
	void *(*func)(void *, float, float, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2, p3);
OUTPUT:
	RETVAL

void
nci_vpffp( c_func, p0, f1, f2, p3 )
	SV* c_func
	void * p0
	float f1
	float f2
	void * p3
PREINIT:
	void(*func)(void *, float, float, void *);
CODE:
	func   = INT2PTR(void(*)(void *, float, float, void *), SvIV(c_func) );
	(*func)(p0, f1, f2, p3);

double
nci_dpffp( c_func, p0, f1, f2, p3 )
	SV* c_func
	void * p0
	float f1
	float f2
	void * p3
PREINIT:
	double(*func)(void *, float, float, void *);
CODE:
	func   = INT2PTR(double(*)(void *, float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2, p3);
OUTPUT:
	RETVAL

short
nci_spffp( c_func, p0, f1, f2, p3 )
	SV* c_func
	void * p0
	float f1
	float f2
	void * p3
PREINIT:
	short(*func)(void *, float, float, void *);
CODE:
	func   = INT2PTR(short(*)(void *, float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2, p3);
OUTPUT:
	RETVAL

float
nci_fpffp( c_func, p0, f1, f2, p3 )
	SV* c_func
	void * p0
	float f1
	float f2
	void * p3
PREINIT:
	float(*func)(void *, float, float, void *);
CODE:
	func   = INT2PTR(float(*)(void *, float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2, p3);
OUTPUT:
	RETVAL

char *
nci_tpffp( c_func, p0, f1, f2, p3 )
	SV* c_func
	void * p0
	float f1
	float f2
	void * p3
PREINIT:
	char *(*func)(void *, float, float, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2, p3);
OUTPUT:
	RETVAL

int
nci_ipffp( c_func, p0, f1, f2, p3 )
	SV* c_func
	void * p0
	float f1
	float f2
	void * p3
PREINIT:
	int(*func)(void *, float, float, void *);
CODE:
	func   = INT2PTR(int(*)(void *, float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2, p3);
OUTPUT:
	RETVAL

void *
nci_pvffp( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvffp( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvffp( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svffp( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvffp( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvffp( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivffp( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdffp( c_func, d0, f1, f2, p3 )
	SV* c_func
	double d0
	float f1
	float f2
	void * p3
PREINIT:
	void *(*func)(double, float, float, void *);
CODE:
	func   = INT2PTR(void *(*)(double, float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2, p3);
OUTPUT:
	RETVAL

void
nci_vdffp( c_func, d0, f1, f2, p3 )
	SV* c_func
	double d0
	float f1
	float f2
	void * p3
PREINIT:
	void(*func)(double, float, float, void *);
CODE:
	func   = INT2PTR(void(*)(double, float, float, void *), SvIV(c_func) );
	(*func)(d0, f1, f2, p3);

double
nci_ddffp( c_func, d0, f1, f2, p3 )
	SV* c_func
	double d0
	float f1
	float f2
	void * p3
PREINIT:
	double(*func)(double, float, float, void *);
CODE:
	func   = INT2PTR(double(*)(double, float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2, p3);
OUTPUT:
	RETVAL

short
nci_sdffp( c_func, d0, f1, f2, p3 )
	SV* c_func
	double d0
	float f1
	float f2
	void * p3
PREINIT:
	short(*func)(double, float, float, void *);
CODE:
	func   = INT2PTR(short(*)(double, float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2, p3);
OUTPUT:
	RETVAL

float
nci_fdffp( c_func, d0, f1, f2, p3 )
	SV* c_func
	double d0
	float f1
	float f2
	void * p3
PREINIT:
	float(*func)(double, float, float, void *);
CODE:
	func   = INT2PTR(float(*)(double, float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2, p3);
OUTPUT:
	RETVAL

char *
nci_tdffp( c_func, d0, f1, f2, p3 )
	SV* c_func
	double d0
	float f1
	float f2
	void * p3
PREINIT:
	char *(*func)(double, float, float, void *);
CODE:
	func   = INT2PTR(char *(*)(double, float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2, p3);
OUTPUT:
	RETVAL

int
nci_idffp( c_func, d0, f1, f2, p3 )
	SV* c_func
	double d0
	float f1
	float f2
	void * p3
PREINIT:
	int(*func)(double, float, float, void *);
CODE:
	func   = INT2PTR(int(*)(double, float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2, p3);
OUTPUT:
	RETVAL

void *
nci_psffp( c_func, s0, f1, f2, p3 )
	SV* c_func
	short s0
	float f1
	float f2
	void * p3
PREINIT:
	void *(*func)(short, float, float, void *);
CODE:
	func   = INT2PTR(void *(*)(short, float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2, p3);
OUTPUT:
	RETVAL

void
nci_vsffp( c_func, s0, f1, f2, p3 )
	SV* c_func
	short s0
	float f1
	float f2
	void * p3
PREINIT:
	void(*func)(short, float, float, void *);
CODE:
	func   = INT2PTR(void(*)(short, float, float, void *), SvIV(c_func) );
	(*func)(s0, f1, f2, p3);

double
nci_dsffp( c_func, s0, f1, f2, p3 )
	SV* c_func
	short s0
	float f1
	float f2
	void * p3
PREINIT:
	double(*func)(short, float, float, void *);
CODE:
	func   = INT2PTR(double(*)(short, float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2, p3);
OUTPUT:
	RETVAL

short
nci_ssffp( c_func, s0, f1, f2, p3 )
	SV* c_func
	short s0
	float f1
	float f2
	void * p3
PREINIT:
	short(*func)(short, float, float, void *);
CODE:
	func   = INT2PTR(short(*)(short, float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2, p3);
OUTPUT:
	RETVAL

float
nci_fsffp( c_func, s0, f1, f2, p3 )
	SV* c_func
	short s0
	float f1
	float f2
	void * p3
PREINIT:
	float(*func)(short, float, float, void *);
CODE:
	func   = INT2PTR(float(*)(short, float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2, p3);
OUTPUT:
	RETVAL

char *
nci_tsffp( c_func, s0, f1, f2, p3 )
	SV* c_func
	short s0
	float f1
	float f2
	void * p3
PREINIT:
	char *(*func)(short, float, float, void *);
CODE:
	func   = INT2PTR(char *(*)(short, float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2, p3);
OUTPUT:
	RETVAL

int
nci_isffp( c_func, s0, f1, f2, p3 )
	SV* c_func
	short s0
	float f1
	float f2
	void * p3
PREINIT:
	int(*func)(short, float, float, void *);
CODE:
	func   = INT2PTR(int(*)(short, float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2, p3);
OUTPUT:
	RETVAL

void *
nci_pfffp( c_func, f0, f1, f2, p3 )
	SV* c_func
	float f0
	float f1
	float f2
	void * p3
PREINIT:
	void *(*func)(float, float, float, void *);
CODE:
	func   = INT2PTR(void *(*)(float, float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2, p3);
OUTPUT:
	RETVAL

void
nci_vfffp( c_func, f0, f1, f2, p3 )
	SV* c_func
	float f0
	float f1
	float f2
	void * p3
PREINIT:
	void(*func)(float, float, float, void *);
CODE:
	func   = INT2PTR(void(*)(float, float, float, void *), SvIV(c_func) );
	(*func)(f0, f1, f2, p3);

double
nci_dfffp( c_func, f0, f1, f2, p3 )
	SV* c_func
	float f0
	float f1
	float f2
	void * p3
PREINIT:
	double(*func)(float, float, float, void *);
CODE:
	func   = INT2PTR(double(*)(float, float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2, p3);
OUTPUT:
	RETVAL

short
nci_sfffp( c_func, f0, f1, f2, p3 )
	SV* c_func
	float f0
	float f1
	float f2
	void * p3
PREINIT:
	short(*func)(float, float, float, void *);
CODE:
	func   = INT2PTR(short(*)(float, float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2, p3);
OUTPUT:
	RETVAL

float
nci_ffffp( c_func, f0, f1, f2, p3 )
	SV* c_func
	float f0
	float f1
	float f2
	void * p3
PREINIT:
	float(*func)(float, float, float, void *);
CODE:
	func   = INT2PTR(float(*)(float, float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2, p3);
OUTPUT:
	RETVAL

char *
nci_tfffp( c_func, f0, f1, f2, p3 )
	SV* c_func
	float f0
	float f1
	float f2
	void * p3
PREINIT:
	char *(*func)(float, float, float, void *);
CODE:
	func   = INT2PTR(char *(*)(float, float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2, p3);
OUTPUT:
	RETVAL

int
nci_ifffp( c_func, f0, f1, f2, p3 )
	SV* c_func
	float f0
	float f1
	float f2
	void * p3
PREINIT:
	int(*func)(float, float, float, void *);
CODE:
	func   = INT2PTR(int(*)(float, float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2, p3);
OUTPUT:
	RETVAL

void *
nci_ptffp( c_func, t0, f1, f2, p3 )
	SV* c_func
	char * t0
	float f1
	float f2
	void * p3
PREINIT:
	void *(*func)(char *, float, float, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2, p3);
OUTPUT:
	RETVAL

void
nci_vtffp( c_func, t0, f1, f2, p3 )
	SV* c_func
	char * t0
	float f1
	float f2
	void * p3
PREINIT:
	void(*func)(char *, float, float, void *);
CODE:
	func   = INT2PTR(void(*)(char *, float, float, void *), SvIV(c_func) );
	(*func)(t0, f1, f2, p3);

double
nci_dtffp( c_func, t0, f1, f2, p3 )
	SV* c_func
	char * t0
	float f1
	float f2
	void * p3
PREINIT:
	double(*func)(char *, float, float, void *);
CODE:
	func   = INT2PTR(double(*)(char *, float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2, p3);
OUTPUT:
	RETVAL

short
nci_stffp( c_func, t0, f1, f2, p3 )
	SV* c_func
	char * t0
	float f1
	float f2
	void * p3
PREINIT:
	short(*func)(char *, float, float, void *);
CODE:
	func   = INT2PTR(short(*)(char *, float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2, p3);
OUTPUT:
	RETVAL

float
nci_ftffp( c_func, t0, f1, f2, p3 )
	SV* c_func
	char * t0
	float f1
	float f2
	void * p3
PREINIT:
	float(*func)(char *, float, float, void *);
CODE:
	func   = INT2PTR(float(*)(char *, float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2, p3);
OUTPUT:
	RETVAL

char *
nci_ttffp( c_func, t0, f1, f2, p3 )
	SV* c_func
	char * t0
	float f1
	float f2
	void * p3
PREINIT:
	char *(*func)(char *, float, float, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2, p3);
OUTPUT:
	RETVAL

int
nci_itffp( c_func, t0, f1, f2, p3 )
	SV* c_func
	char * t0
	float f1
	float f2
	void * p3
PREINIT:
	int(*func)(char *, float, float, void *);
CODE:
	func   = INT2PTR(int(*)(char *, float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2, p3);
OUTPUT:
	RETVAL

void *
nci_piffp( c_func, i0, f1, f2, p3 )
	SV* c_func
	int i0
	float f1
	float f2
	void * p3
PREINIT:
	void *(*func)(int, float, float, void *);
CODE:
	func   = INT2PTR(void *(*)(int, float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2, p3);
OUTPUT:
	RETVAL

void
nci_viffp( c_func, i0, f1, f2, p3 )
	SV* c_func
	int i0
	float f1
	float f2
	void * p3
PREINIT:
	void(*func)(int, float, float, void *);
CODE:
	func   = INT2PTR(void(*)(int, float, float, void *), SvIV(c_func) );
	(*func)(i0, f1, f2, p3);

double
nci_diffp( c_func, i0, f1, f2, p3 )
	SV* c_func
	int i0
	float f1
	float f2
	void * p3
PREINIT:
	double(*func)(int, float, float, void *);
CODE:
	func   = INT2PTR(double(*)(int, float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2, p3);
OUTPUT:
	RETVAL

short
nci_siffp( c_func, i0, f1, f2, p3 )
	SV* c_func
	int i0
	float f1
	float f2
	void * p3
PREINIT:
	short(*func)(int, float, float, void *);
CODE:
	func   = INT2PTR(short(*)(int, float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2, p3);
OUTPUT:
	RETVAL

float
nci_fiffp( c_func, i0, f1, f2, p3 )
	SV* c_func
	int i0
	float f1
	float f2
	void * p3
PREINIT:
	float(*func)(int, float, float, void *);
CODE:
	func   = INT2PTR(float(*)(int, float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2, p3);
OUTPUT:
	RETVAL

char *
nci_tiffp( c_func, i0, f1, f2, p3 )
	SV* c_func
	int i0
	float f1
	float f2
	void * p3
PREINIT:
	char *(*func)(int, float, float, void *);
CODE:
	func   = INT2PTR(char *(*)(int, float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2, p3);
OUTPUT:
	RETVAL

int
nci_iiffp( c_func, i0, f1, f2, p3 )
	SV* c_func
	int i0
	float f1
	float f2
	void * p3
PREINIT:
	int(*func)(int, float, float, void *);
CODE:
	func   = INT2PTR(int(*)(int, float, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2, p3);
OUTPUT:
	RETVAL

void *
nci_pptfp( c_func, p0, t1, f2, p3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	void * p3
PREINIT:
	void *(*func)(void *, char *, float, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2, p3);
OUTPUT:
	RETVAL

void
nci_vptfp( c_func, p0, t1, f2, p3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	void * p3
PREINIT:
	void(*func)(void *, char *, float, void *);
CODE:
	func   = INT2PTR(void(*)(void *, char *, float, void *), SvIV(c_func) );
	(*func)(p0, t1, f2, p3);

double
nci_dptfp( c_func, p0, t1, f2, p3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	void * p3
PREINIT:
	double(*func)(void *, char *, float, void *);
CODE:
	func   = INT2PTR(double(*)(void *, char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2, p3);
OUTPUT:
	RETVAL

short
nci_sptfp( c_func, p0, t1, f2, p3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	void * p3
PREINIT:
	short(*func)(void *, char *, float, void *);
CODE:
	func   = INT2PTR(short(*)(void *, char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2, p3);
OUTPUT:
	RETVAL

float
nci_fptfp( c_func, p0, t1, f2, p3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	void * p3
PREINIT:
	float(*func)(void *, char *, float, void *);
CODE:
	func   = INT2PTR(float(*)(void *, char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2, p3);
OUTPUT:
	RETVAL

char *
nci_tptfp( c_func, p0, t1, f2, p3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	void * p3
PREINIT:
	char *(*func)(void *, char *, float, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2, p3);
OUTPUT:
	RETVAL

int
nci_iptfp( c_func, p0, t1, f2, p3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	void * p3
PREINIT:
	int(*func)(void *, char *, float, void *);
CODE:
	func   = INT2PTR(int(*)(void *, char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2, p3);
OUTPUT:
	RETVAL

void *
nci_pvtfp( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvtfp( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvtfp( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svtfp( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvtfp( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvtfp( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivtfp( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdtfp( c_func, d0, t1, f2, p3 )
	SV* c_func
	double d0
	char * t1
	float f2
	void * p3
PREINIT:
	void *(*func)(double, char *, float, void *);
CODE:
	func   = INT2PTR(void *(*)(double, char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2, p3);
OUTPUT:
	RETVAL

void
nci_vdtfp( c_func, d0, t1, f2, p3 )
	SV* c_func
	double d0
	char * t1
	float f2
	void * p3
PREINIT:
	void(*func)(double, char *, float, void *);
CODE:
	func   = INT2PTR(void(*)(double, char *, float, void *), SvIV(c_func) );
	(*func)(d0, t1, f2, p3);

double
nci_ddtfp( c_func, d0, t1, f2, p3 )
	SV* c_func
	double d0
	char * t1
	float f2
	void * p3
PREINIT:
	double(*func)(double, char *, float, void *);
CODE:
	func   = INT2PTR(double(*)(double, char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2, p3);
OUTPUT:
	RETVAL

short
nci_sdtfp( c_func, d0, t1, f2, p3 )
	SV* c_func
	double d0
	char * t1
	float f2
	void * p3
PREINIT:
	short(*func)(double, char *, float, void *);
CODE:
	func   = INT2PTR(short(*)(double, char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2, p3);
OUTPUT:
	RETVAL

float
nci_fdtfp( c_func, d0, t1, f2, p3 )
	SV* c_func
	double d0
	char * t1
	float f2
	void * p3
PREINIT:
	float(*func)(double, char *, float, void *);
CODE:
	func   = INT2PTR(float(*)(double, char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2, p3);
OUTPUT:
	RETVAL

char *
nci_tdtfp( c_func, d0, t1, f2, p3 )
	SV* c_func
	double d0
	char * t1
	float f2
	void * p3
PREINIT:
	char *(*func)(double, char *, float, void *);
CODE:
	func   = INT2PTR(char *(*)(double, char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2, p3);
OUTPUT:
	RETVAL

int
nci_idtfp( c_func, d0, t1, f2, p3 )
	SV* c_func
	double d0
	char * t1
	float f2
	void * p3
PREINIT:
	int(*func)(double, char *, float, void *);
CODE:
	func   = INT2PTR(int(*)(double, char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2, p3);
OUTPUT:
	RETVAL

void *
nci_pstfp( c_func, s0, t1, f2, p3 )
	SV* c_func
	short s0
	char * t1
	float f2
	void * p3
PREINIT:
	void *(*func)(short, char *, float, void *);
CODE:
	func   = INT2PTR(void *(*)(short, char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2, p3);
OUTPUT:
	RETVAL

void
nci_vstfp( c_func, s0, t1, f2, p3 )
	SV* c_func
	short s0
	char * t1
	float f2
	void * p3
PREINIT:
	void(*func)(short, char *, float, void *);
CODE:
	func   = INT2PTR(void(*)(short, char *, float, void *), SvIV(c_func) );
	(*func)(s0, t1, f2, p3);

double
nci_dstfp( c_func, s0, t1, f2, p3 )
	SV* c_func
	short s0
	char * t1
	float f2
	void * p3
PREINIT:
	double(*func)(short, char *, float, void *);
CODE:
	func   = INT2PTR(double(*)(short, char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2, p3);
OUTPUT:
	RETVAL

short
nci_sstfp( c_func, s0, t1, f2, p3 )
	SV* c_func
	short s0
	char * t1
	float f2
	void * p3
PREINIT:
	short(*func)(short, char *, float, void *);
CODE:
	func   = INT2PTR(short(*)(short, char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2, p3);
OUTPUT:
	RETVAL

float
nci_fstfp( c_func, s0, t1, f2, p3 )
	SV* c_func
	short s0
	char * t1
	float f2
	void * p3
PREINIT:
	float(*func)(short, char *, float, void *);
CODE:
	func   = INT2PTR(float(*)(short, char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2, p3);
OUTPUT:
	RETVAL

char *
nci_tstfp( c_func, s0, t1, f2, p3 )
	SV* c_func
	short s0
	char * t1
	float f2
	void * p3
PREINIT:
	char *(*func)(short, char *, float, void *);
CODE:
	func   = INT2PTR(char *(*)(short, char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2, p3);
OUTPUT:
	RETVAL

int
nci_istfp( c_func, s0, t1, f2, p3 )
	SV* c_func
	short s0
	char * t1
	float f2
	void * p3
PREINIT:
	int(*func)(short, char *, float, void *);
CODE:
	func   = INT2PTR(int(*)(short, char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2, p3);
OUTPUT:
	RETVAL

void *
nci_pftfp( c_func, f0, t1, f2, p3 )
	SV* c_func
	float f0
	char * t1
	float f2
	void * p3
PREINIT:
	void *(*func)(float, char *, float, void *);
CODE:
	func   = INT2PTR(void *(*)(float, char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2, p3);
OUTPUT:
	RETVAL

void
nci_vftfp( c_func, f0, t1, f2, p3 )
	SV* c_func
	float f0
	char * t1
	float f2
	void * p3
PREINIT:
	void(*func)(float, char *, float, void *);
CODE:
	func   = INT2PTR(void(*)(float, char *, float, void *), SvIV(c_func) );
	(*func)(f0, t1, f2, p3);

double
nci_dftfp( c_func, f0, t1, f2, p3 )
	SV* c_func
	float f0
	char * t1
	float f2
	void * p3
PREINIT:
	double(*func)(float, char *, float, void *);
CODE:
	func   = INT2PTR(double(*)(float, char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2, p3);
OUTPUT:
	RETVAL

short
nci_sftfp( c_func, f0, t1, f2, p3 )
	SV* c_func
	float f0
	char * t1
	float f2
	void * p3
PREINIT:
	short(*func)(float, char *, float, void *);
CODE:
	func   = INT2PTR(short(*)(float, char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2, p3);
OUTPUT:
	RETVAL

float
nci_fftfp( c_func, f0, t1, f2, p3 )
	SV* c_func
	float f0
	char * t1
	float f2
	void * p3
PREINIT:
	float(*func)(float, char *, float, void *);
CODE:
	func   = INT2PTR(float(*)(float, char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2, p3);
OUTPUT:
	RETVAL

char *
nci_tftfp( c_func, f0, t1, f2, p3 )
	SV* c_func
	float f0
	char * t1
	float f2
	void * p3
PREINIT:
	char *(*func)(float, char *, float, void *);
CODE:
	func   = INT2PTR(char *(*)(float, char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2, p3);
OUTPUT:
	RETVAL

int
nci_iftfp( c_func, f0, t1, f2, p3 )
	SV* c_func
	float f0
	char * t1
	float f2
	void * p3
PREINIT:
	int(*func)(float, char *, float, void *);
CODE:
	func   = INT2PTR(int(*)(float, char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2, p3);
OUTPUT:
	RETVAL

void *
nci_pttfp( c_func, t0, t1, f2, p3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	void * p3
PREINIT:
	void *(*func)(char *, char *, float, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2, p3);
OUTPUT:
	RETVAL

void
nci_vttfp( c_func, t0, t1, f2, p3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	void * p3
PREINIT:
	void(*func)(char *, char *, float, void *);
CODE:
	func   = INT2PTR(void(*)(char *, char *, float, void *), SvIV(c_func) );
	(*func)(t0, t1, f2, p3);

double
nci_dttfp( c_func, t0, t1, f2, p3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	void * p3
PREINIT:
	double(*func)(char *, char *, float, void *);
CODE:
	func   = INT2PTR(double(*)(char *, char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2, p3);
OUTPUT:
	RETVAL

short
nci_sttfp( c_func, t0, t1, f2, p3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	void * p3
PREINIT:
	short(*func)(char *, char *, float, void *);
CODE:
	func   = INT2PTR(short(*)(char *, char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2, p3);
OUTPUT:
	RETVAL

float
nci_fttfp( c_func, t0, t1, f2, p3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	void * p3
PREINIT:
	float(*func)(char *, char *, float, void *);
CODE:
	func   = INT2PTR(float(*)(char *, char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2, p3);
OUTPUT:
	RETVAL

char *
nci_tttfp( c_func, t0, t1, f2, p3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	void * p3
PREINIT:
	char *(*func)(char *, char *, float, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2, p3);
OUTPUT:
	RETVAL

int
nci_ittfp( c_func, t0, t1, f2, p3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	void * p3
PREINIT:
	int(*func)(char *, char *, float, void *);
CODE:
	func   = INT2PTR(int(*)(char *, char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2, p3);
OUTPUT:
	RETVAL

void *
nci_pitfp( c_func, i0, t1, f2, p3 )
	SV* c_func
	int i0
	char * t1
	float f2
	void * p3
PREINIT:
	void *(*func)(int, char *, float, void *);
CODE:
	func   = INT2PTR(void *(*)(int, char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2, p3);
OUTPUT:
	RETVAL

void
nci_vitfp( c_func, i0, t1, f2, p3 )
	SV* c_func
	int i0
	char * t1
	float f2
	void * p3
PREINIT:
	void(*func)(int, char *, float, void *);
CODE:
	func   = INT2PTR(void(*)(int, char *, float, void *), SvIV(c_func) );
	(*func)(i0, t1, f2, p3);

double
nci_ditfp( c_func, i0, t1, f2, p3 )
	SV* c_func
	int i0
	char * t1
	float f2
	void * p3
PREINIT:
	double(*func)(int, char *, float, void *);
CODE:
	func   = INT2PTR(double(*)(int, char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2, p3);
OUTPUT:
	RETVAL

short
nci_sitfp( c_func, i0, t1, f2, p3 )
	SV* c_func
	int i0
	char * t1
	float f2
	void * p3
PREINIT:
	short(*func)(int, char *, float, void *);
CODE:
	func   = INT2PTR(short(*)(int, char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2, p3);
OUTPUT:
	RETVAL

float
nci_fitfp( c_func, i0, t1, f2, p3 )
	SV* c_func
	int i0
	char * t1
	float f2
	void * p3
PREINIT:
	float(*func)(int, char *, float, void *);
CODE:
	func   = INT2PTR(float(*)(int, char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2, p3);
OUTPUT:
	RETVAL

char *
nci_titfp( c_func, i0, t1, f2, p3 )
	SV* c_func
	int i0
	char * t1
	float f2
	void * p3
PREINIT:
	char *(*func)(int, char *, float, void *);
CODE:
	func   = INT2PTR(char *(*)(int, char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2, p3);
OUTPUT:
	RETVAL

int
nci_iitfp( c_func, i0, t1, f2, p3 )
	SV* c_func
	int i0
	char * t1
	float f2
	void * p3
PREINIT:
	int(*func)(int, char *, float, void *);
CODE:
	func   = INT2PTR(int(*)(int, char *, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2, p3);
OUTPUT:
	RETVAL

void *
nci_ppifp( c_func, p0, i1, f2, p3 )
	SV* c_func
	void * p0
	int i1
	float f2
	void * p3
PREINIT:
	void *(*func)(void *, int, float, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2, p3);
OUTPUT:
	RETVAL

void
nci_vpifp( c_func, p0, i1, f2, p3 )
	SV* c_func
	void * p0
	int i1
	float f2
	void * p3
PREINIT:
	void(*func)(void *, int, float, void *);
CODE:
	func   = INT2PTR(void(*)(void *, int, float, void *), SvIV(c_func) );
	(*func)(p0, i1, f2, p3);

double
nci_dpifp( c_func, p0, i1, f2, p3 )
	SV* c_func
	void * p0
	int i1
	float f2
	void * p3
PREINIT:
	double(*func)(void *, int, float, void *);
CODE:
	func   = INT2PTR(double(*)(void *, int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2, p3);
OUTPUT:
	RETVAL

short
nci_spifp( c_func, p0, i1, f2, p3 )
	SV* c_func
	void * p0
	int i1
	float f2
	void * p3
PREINIT:
	short(*func)(void *, int, float, void *);
CODE:
	func   = INT2PTR(short(*)(void *, int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2, p3);
OUTPUT:
	RETVAL

float
nci_fpifp( c_func, p0, i1, f2, p3 )
	SV* c_func
	void * p0
	int i1
	float f2
	void * p3
PREINIT:
	float(*func)(void *, int, float, void *);
CODE:
	func   = INT2PTR(float(*)(void *, int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2, p3);
OUTPUT:
	RETVAL

char *
nci_tpifp( c_func, p0, i1, f2, p3 )
	SV* c_func
	void * p0
	int i1
	float f2
	void * p3
PREINIT:
	char *(*func)(void *, int, float, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2, p3);
OUTPUT:
	RETVAL

int
nci_ipifp( c_func, p0, i1, f2, p3 )
	SV* c_func
	void * p0
	int i1
	float f2
	void * p3
PREINIT:
	int(*func)(void *, int, float, void *);
CODE:
	func   = INT2PTR(int(*)(void *, int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2, p3);
OUTPUT:
	RETVAL

void *
nci_pvifp( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvifp( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvifp( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svifp( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvifp( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvifp( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivifp( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdifp( c_func, d0, i1, f2, p3 )
	SV* c_func
	double d0
	int i1
	float f2
	void * p3
PREINIT:
	void *(*func)(double, int, float, void *);
CODE:
	func   = INT2PTR(void *(*)(double, int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2, p3);
OUTPUT:
	RETVAL

void
nci_vdifp( c_func, d0, i1, f2, p3 )
	SV* c_func
	double d0
	int i1
	float f2
	void * p3
PREINIT:
	void(*func)(double, int, float, void *);
CODE:
	func   = INT2PTR(void(*)(double, int, float, void *), SvIV(c_func) );
	(*func)(d0, i1, f2, p3);

double
nci_ddifp( c_func, d0, i1, f2, p3 )
	SV* c_func
	double d0
	int i1
	float f2
	void * p3
PREINIT:
	double(*func)(double, int, float, void *);
CODE:
	func   = INT2PTR(double(*)(double, int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2, p3);
OUTPUT:
	RETVAL

short
nci_sdifp( c_func, d0, i1, f2, p3 )
	SV* c_func
	double d0
	int i1
	float f2
	void * p3
PREINIT:
	short(*func)(double, int, float, void *);
CODE:
	func   = INT2PTR(short(*)(double, int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2, p3);
OUTPUT:
	RETVAL

float
nci_fdifp( c_func, d0, i1, f2, p3 )
	SV* c_func
	double d0
	int i1
	float f2
	void * p3
PREINIT:
	float(*func)(double, int, float, void *);
CODE:
	func   = INT2PTR(float(*)(double, int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2, p3);
OUTPUT:
	RETVAL

char *
nci_tdifp( c_func, d0, i1, f2, p3 )
	SV* c_func
	double d0
	int i1
	float f2
	void * p3
PREINIT:
	char *(*func)(double, int, float, void *);
CODE:
	func   = INT2PTR(char *(*)(double, int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2, p3);
OUTPUT:
	RETVAL

int
nci_idifp( c_func, d0, i1, f2, p3 )
	SV* c_func
	double d0
	int i1
	float f2
	void * p3
PREINIT:
	int(*func)(double, int, float, void *);
CODE:
	func   = INT2PTR(int(*)(double, int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2, p3);
OUTPUT:
	RETVAL

void *
nci_psifp( c_func, s0, i1, f2, p3 )
	SV* c_func
	short s0
	int i1
	float f2
	void * p3
PREINIT:
	void *(*func)(short, int, float, void *);
CODE:
	func   = INT2PTR(void *(*)(short, int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2, p3);
OUTPUT:
	RETVAL

void
nci_vsifp( c_func, s0, i1, f2, p3 )
	SV* c_func
	short s0
	int i1
	float f2
	void * p3
PREINIT:
	void(*func)(short, int, float, void *);
CODE:
	func   = INT2PTR(void(*)(short, int, float, void *), SvIV(c_func) );
	(*func)(s0, i1, f2, p3);

double
nci_dsifp( c_func, s0, i1, f2, p3 )
	SV* c_func
	short s0
	int i1
	float f2
	void * p3
PREINIT:
	double(*func)(short, int, float, void *);
CODE:
	func   = INT2PTR(double(*)(short, int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2, p3);
OUTPUT:
	RETVAL

short
nci_ssifp( c_func, s0, i1, f2, p3 )
	SV* c_func
	short s0
	int i1
	float f2
	void * p3
PREINIT:
	short(*func)(short, int, float, void *);
CODE:
	func   = INT2PTR(short(*)(short, int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2, p3);
OUTPUT:
	RETVAL

float
nci_fsifp( c_func, s0, i1, f2, p3 )
	SV* c_func
	short s0
	int i1
	float f2
	void * p3
PREINIT:
	float(*func)(short, int, float, void *);
CODE:
	func   = INT2PTR(float(*)(short, int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2, p3);
OUTPUT:
	RETVAL

char *
nci_tsifp( c_func, s0, i1, f2, p3 )
	SV* c_func
	short s0
	int i1
	float f2
	void * p3
PREINIT:
	char *(*func)(short, int, float, void *);
CODE:
	func   = INT2PTR(char *(*)(short, int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2, p3);
OUTPUT:
	RETVAL

int
nci_isifp( c_func, s0, i1, f2, p3 )
	SV* c_func
	short s0
	int i1
	float f2
	void * p3
PREINIT:
	int(*func)(short, int, float, void *);
CODE:
	func   = INT2PTR(int(*)(short, int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2, p3);
OUTPUT:
	RETVAL

void *
nci_pfifp( c_func, f0, i1, f2, p3 )
	SV* c_func
	float f0
	int i1
	float f2
	void * p3
PREINIT:
	void *(*func)(float, int, float, void *);
CODE:
	func   = INT2PTR(void *(*)(float, int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2, p3);
OUTPUT:
	RETVAL

void
nci_vfifp( c_func, f0, i1, f2, p3 )
	SV* c_func
	float f0
	int i1
	float f2
	void * p3
PREINIT:
	void(*func)(float, int, float, void *);
CODE:
	func   = INT2PTR(void(*)(float, int, float, void *), SvIV(c_func) );
	(*func)(f0, i1, f2, p3);

double
nci_dfifp( c_func, f0, i1, f2, p3 )
	SV* c_func
	float f0
	int i1
	float f2
	void * p3
PREINIT:
	double(*func)(float, int, float, void *);
CODE:
	func   = INT2PTR(double(*)(float, int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2, p3);
OUTPUT:
	RETVAL

short
nci_sfifp( c_func, f0, i1, f2, p3 )
	SV* c_func
	float f0
	int i1
	float f2
	void * p3
PREINIT:
	short(*func)(float, int, float, void *);
CODE:
	func   = INT2PTR(short(*)(float, int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2, p3);
OUTPUT:
	RETVAL

float
nci_ffifp( c_func, f0, i1, f2, p3 )
	SV* c_func
	float f0
	int i1
	float f2
	void * p3
PREINIT:
	float(*func)(float, int, float, void *);
CODE:
	func   = INT2PTR(float(*)(float, int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2, p3);
OUTPUT:
	RETVAL

char *
nci_tfifp( c_func, f0, i1, f2, p3 )
	SV* c_func
	float f0
	int i1
	float f2
	void * p3
PREINIT:
	char *(*func)(float, int, float, void *);
CODE:
	func   = INT2PTR(char *(*)(float, int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2, p3);
OUTPUT:
	RETVAL

int
nci_ififp( c_func, f0, i1, f2, p3 )
	SV* c_func
	float f0
	int i1
	float f2
	void * p3
PREINIT:
	int(*func)(float, int, float, void *);
CODE:
	func   = INT2PTR(int(*)(float, int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2, p3);
OUTPUT:
	RETVAL

void *
nci_ptifp( c_func, t0, i1, f2, p3 )
	SV* c_func
	char * t0
	int i1
	float f2
	void * p3
PREINIT:
	void *(*func)(char *, int, float, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2, p3);
OUTPUT:
	RETVAL

void
nci_vtifp( c_func, t0, i1, f2, p3 )
	SV* c_func
	char * t0
	int i1
	float f2
	void * p3
PREINIT:
	void(*func)(char *, int, float, void *);
CODE:
	func   = INT2PTR(void(*)(char *, int, float, void *), SvIV(c_func) );
	(*func)(t0, i1, f2, p3);

double
nci_dtifp( c_func, t0, i1, f2, p3 )
	SV* c_func
	char * t0
	int i1
	float f2
	void * p3
PREINIT:
	double(*func)(char *, int, float, void *);
CODE:
	func   = INT2PTR(double(*)(char *, int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2, p3);
OUTPUT:
	RETVAL

short
nci_stifp( c_func, t0, i1, f2, p3 )
	SV* c_func
	char * t0
	int i1
	float f2
	void * p3
PREINIT:
	short(*func)(char *, int, float, void *);
CODE:
	func   = INT2PTR(short(*)(char *, int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2, p3);
OUTPUT:
	RETVAL

float
nci_ftifp( c_func, t0, i1, f2, p3 )
	SV* c_func
	char * t0
	int i1
	float f2
	void * p3
PREINIT:
	float(*func)(char *, int, float, void *);
CODE:
	func   = INT2PTR(float(*)(char *, int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2, p3);
OUTPUT:
	RETVAL

char *
nci_ttifp( c_func, t0, i1, f2, p3 )
	SV* c_func
	char * t0
	int i1
	float f2
	void * p3
PREINIT:
	char *(*func)(char *, int, float, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2, p3);
OUTPUT:
	RETVAL

int
nci_itifp( c_func, t0, i1, f2, p3 )
	SV* c_func
	char * t0
	int i1
	float f2
	void * p3
PREINIT:
	int(*func)(char *, int, float, void *);
CODE:
	func   = INT2PTR(int(*)(char *, int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2, p3);
OUTPUT:
	RETVAL

void *
nci_piifp( c_func, i0, i1, f2, p3 )
	SV* c_func
	int i0
	int i1
	float f2
	void * p3
PREINIT:
	void *(*func)(int, int, float, void *);
CODE:
	func   = INT2PTR(void *(*)(int, int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2, p3);
OUTPUT:
	RETVAL

void
nci_viifp( c_func, i0, i1, f2, p3 )
	SV* c_func
	int i0
	int i1
	float f2
	void * p3
PREINIT:
	void(*func)(int, int, float, void *);
CODE:
	func   = INT2PTR(void(*)(int, int, float, void *), SvIV(c_func) );
	(*func)(i0, i1, f2, p3);

double
nci_diifp( c_func, i0, i1, f2, p3 )
	SV* c_func
	int i0
	int i1
	float f2
	void * p3
PREINIT:
	double(*func)(int, int, float, void *);
CODE:
	func   = INT2PTR(double(*)(int, int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2, p3);
OUTPUT:
	RETVAL

short
nci_siifp( c_func, i0, i1, f2, p3 )
	SV* c_func
	int i0
	int i1
	float f2
	void * p3
PREINIT:
	short(*func)(int, int, float, void *);
CODE:
	func   = INT2PTR(short(*)(int, int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2, p3);
OUTPUT:
	RETVAL

float
nci_fiifp( c_func, i0, i1, f2, p3 )
	SV* c_func
	int i0
	int i1
	float f2
	void * p3
PREINIT:
	float(*func)(int, int, float, void *);
CODE:
	func   = INT2PTR(float(*)(int, int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2, p3);
OUTPUT:
	RETVAL

char *
nci_tiifp( c_func, i0, i1, f2, p3 )
	SV* c_func
	int i0
	int i1
	float f2
	void * p3
PREINIT:
	char *(*func)(int, int, float, void *);
CODE:
	func   = INT2PTR(char *(*)(int, int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2, p3);
OUTPUT:
	RETVAL

int
nci_iiifp( c_func, i0, i1, f2, p3 )
	SV* c_func
	int i0
	int i1
	float f2
	void * p3
PREINIT:
	int(*func)(int, int, float, void *);
CODE:
	func   = INT2PTR(int(*)(int, int, float, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2, p3);
OUTPUT:
	RETVAL

void *
nci_ppptp( c_func, p0, p1, t2, p3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	void * p3
PREINIT:
	void *(*func)(void *, void *, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2, p3);
OUTPUT:
	RETVAL

void
nci_vpptp( c_func, p0, p1, t2, p3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	void * p3
PREINIT:
	void(*func)(void *, void *, char *, void *);
CODE:
	func   = INT2PTR(void(*)(void *, void *, char *, void *), SvIV(c_func) );
	(*func)(p0, p1, t2, p3);

double
nci_dpptp( c_func, p0, p1, t2, p3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	void * p3
PREINIT:
	double(*func)(void *, void *, char *, void *);
CODE:
	func   = INT2PTR(double(*)(void *, void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2, p3);
OUTPUT:
	RETVAL

short
nci_spptp( c_func, p0, p1, t2, p3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	void * p3
PREINIT:
	short(*func)(void *, void *, char *, void *);
CODE:
	func   = INT2PTR(short(*)(void *, void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2, p3);
OUTPUT:
	RETVAL

float
nci_fpptp( c_func, p0, p1, t2, p3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	void * p3
PREINIT:
	float(*func)(void *, void *, char *, void *);
CODE:
	func   = INT2PTR(float(*)(void *, void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2, p3);
OUTPUT:
	RETVAL

char *
nci_tpptp( c_func, p0, p1, t2, p3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	void * p3
PREINIT:
	char *(*func)(void *, void *, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2, p3);
OUTPUT:
	RETVAL

int
nci_ipptp( c_func, p0, p1, t2, p3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	void * p3
PREINIT:
	int(*func)(void *, void *, char *, void *);
CODE:
	func   = INT2PTR(int(*)(void *, void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2, p3);
OUTPUT:
	RETVAL

void *
nci_pvptp( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvptp( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvptp( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svptp( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvptp( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvptp( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivptp( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdptp( c_func, d0, p1, t2, p3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	void * p3
PREINIT:
	void *(*func)(double, void *, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(double, void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2, p3);
OUTPUT:
	RETVAL

void
nci_vdptp( c_func, d0, p1, t2, p3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	void * p3
PREINIT:
	void(*func)(double, void *, char *, void *);
CODE:
	func   = INT2PTR(void(*)(double, void *, char *, void *), SvIV(c_func) );
	(*func)(d0, p1, t2, p3);

double
nci_ddptp( c_func, d0, p1, t2, p3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	void * p3
PREINIT:
	double(*func)(double, void *, char *, void *);
CODE:
	func   = INT2PTR(double(*)(double, void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2, p3);
OUTPUT:
	RETVAL

short
nci_sdptp( c_func, d0, p1, t2, p3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	void * p3
PREINIT:
	short(*func)(double, void *, char *, void *);
CODE:
	func   = INT2PTR(short(*)(double, void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2, p3);
OUTPUT:
	RETVAL

float
nci_fdptp( c_func, d0, p1, t2, p3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	void * p3
PREINIT:
	float(*func)(double, void *, char *, void *);
CODE:
	func   = INT2PTR(float(*)(double, void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2, p3);
OUTPUT:
	RETVAL

char *
nci_tdptp( c_func, d0, p1, t2, p3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	void * p3
PREINIT:
	char *(*func)(double, void *, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(double, void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2, p3);
OUTPUT:
	RETVAL

int
nci_idptp( c_func, d0, p1, t2, p3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	void * p3
PREINIT:
	int(*func)(double, void *, char *, void *);
CODE:
	func   = INT2PTR(int(*)(double, void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2, p3);
OUTPUT:
	RETVAL

void *
nci_psptp( c_func, s0, p1, t2, p3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	void * p3
PREINIT:
	void *(*func)(short, void *, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(short, void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2, p3);
OUTPUT:
	RETVAL

void
nci_vsptp( c_func, s0, p1, t2, p3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	void * p3
PREINIT:
	void(*func)(short, void *, char *, void *);
CODE:
	func   = INT2PTR(void(*)(short, void *, char *, void *), SvIV(c_func) );
	(*func)(s0, p1, t2, p3);

double
nci_dsptp( c_func, s0, p1, t2, p3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	void * p3
PREINIT:
	double(*func)(short, void *, char *, void *);
CODE:
	func   = INT2PTR(double(*)(short, void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2, p3);
OUTPUT:
	RETVAL

short
nci_ssptp( c_func, s0, p1, t2, p3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	void * p3
PREINIT:
	short(*func)(short, void *, char *, void *);
CODE:
	func   = INT2PTR(short(*)(short, void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2, p3);
OUTPUT:
	RETVAL

float
nci_fsptp( c_func, s0, p1, t2, p3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	void * p3
PREINIT:
	float(*func)(short, void *, char *, void *);
CODE:
	func   = INT2PTR(float(*)(short, void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2, p3);
OUTPUT:
	RETVAL

char *
nci_tsptp( c_func, s0, p1, t2, p3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	void * p3
PREINIT:
	char *(*func)(short, void *, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(short, void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2, p3);
OUTPUT:
	RETVAL

int
nci_isptp( c_func, s0, p1, t2, p3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	void * p3
PREINIT:
	int(*func)(short, void *, char *, void *);
CODE:
	func   = INT2PTR(int(*)(short, void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2, p3);
OUTPUT:
	RETVAL

void *
nci_pfptp( c_func, f0, p1, t2, p3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	void * p3
PREINIT:
	void *(*func)(float, void *, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(float, void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2, p3);
OUTPUT:
	RETVAL

void
nci_vfptp( c_func, f0, p1, t2, p3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	void * p3
PREINIT:
	void(*func)(float, void *, char *, void *);
CODE:
	func   = INT2PTR(void(*)(float, void *, char *, void *), SvIV(c_func) );
	(*func)(f0, p1, t2, p3);

double
nci_dfptp( c_func, f0, p1, t2, p3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	void * p3
PREINIT:
	double(*func)(float, void *, char *, void *);
CODE:
	func   = INT2PTR(double(*)(float, void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2, p3);
OUTPUT:
	RETVAL

short
nci_sfptp( c_func, f0, p1, t2, p3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	void * p3
PREINIT:
	short(*func)(float, void *, char *, void *);
CODE:
	func   = INT2PTR(short(*)(float, void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2, p3);
OUTPUT:
	RETVAL

float
nci_ffptp( c_func, f0, p1, t2, p3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	void * p3
PREINIT:
	float(*func)(float, void *, char *, void *);
CODE:
	func   = INT2PTR(float(*)(float, void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2, p3);
OUTPUT:
	RETVAL

char *
nci_tfptp( c_func, f0, p1, t2, p3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	void * p3
PREINIT:
	char *(*func)(float, void *, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(float, void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2, p3);
OUTPUT:
	RETVAL

int
nci_ifptp( c_func, f0, p1, t2, p3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	void * p3
PREINIT:
	int(*func)(float, void *, char *, void *);
CODE:
	func   = INT2PTR(int(*)(float, void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2, p3);
OUTPUT:
	RETVAL

void *
nci_ptptp( c_func, t0, p1, t2, p3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	void * p3
PREINIT:
	void *(*func)(char *, void *, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2, p3);
OUTPUT:
	RETVAL

void
nci_vtptp( c_func, t0, p1, t2, p3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	void * p3
PREINIT:
	void(*func)(char *, void *, char *, void *);
CODE:
	func   = INT2PTR(void(*)(char *, void *, char *, void *), SvIV(c_func) );
	(*func)(t0, p1, t2, p3);

double
nci_dtptp( c_func, t0, p1, t2, p3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	void * p3
PREINIT:
	double(*func)(char *, void *, char *, void *);
CODE:
	func   = INT2PTR(double(*)(char *, void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2, p3);
OUTPUT:
	RETVAL

short
nci_stptp( c_func, t0, p1, t2, p3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	void * p3
PREINIT:
	short(*func)(char *, void *, char *, void *);
CODE:
	func   = INT2PTR(short(*)(char *, void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2, p3);
OUTPUT:
	RETVAL

float
nci_ftptp( c_func, t0, p1, t2, p3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	void * p3
PREINIT:
	float(*func)(char *, void *, char *, void *);
CODE:
	func   = INT2PTR(float(*)(char *, void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2, p3);
OUTPUT:
	RETVAL

char *
nci_ttptp( c_func, t0, p1, t2, p3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	void * p3
PREINIT:
	char *(*func)(char *, void *, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2, p3);
OUTPUT:
	RETVAL

int
nci_itptp( c_func, t0, p1, t2, p3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	void * p3
PREINIT:
	int(*func)(char *, void *, char *, void *);
CODE:
	func   = INT2PTR(int(*)(char *, void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2, p3);
OUTPUT:
	RETVAL

void *
nci_piptp( c_func, i0, p1, t2, p3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	void * p3
PREINIT:
	void *(*func)(int, void *, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(int, void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2, p3);
OUTPUT:
	RETVAL

void
nci_viptp( c_func, i0, p1, t2, p3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	void * p3
PREINIT:
	void(*func)(int, void *, char *, void *);
CODE:
	func   = INT2PTR(void(*)(int, void *, char *, void *), SvIV(c_func) );
	(*func)(i0, p1, t2, p3);

double
nci_diptp( c_func, i0, p1, t2, p3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	void * p3
PREINIT:
	double(*func)(int, void *, char *, void *);
CODE:
	func   = INT2PTR(double(*)(int, void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2, p3);
OUTPUT:
	RETVAL

short
nci_siptp( c_func, i0, p1, t2, p3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	void * p3
PREINIT:
	short(*func)(int, void *, char *, void *);
CODE:
	func   = INT2PTR(short(*)(int, void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2, p3);
OUTPUT:
	RETVAL

float
nci_fiptp( c_func, i0, p1, t2, p3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	void * p3
PREINIT:
	float(*func)(int, void *, char *, void *);
CODE:
	func   = INT2PTR(float(*)(int, void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2, p3);
OUTPUT:
	RETVAL

char *
nci_tiptp( c_func, i0, p1, t2, p3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	void * p3
PREINIT:
	char *(*func)(int, void *, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(int, void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2, p3);
OUTPUT:
	RETVAL

int
nci_iiptp( c_func, i0, p1, t2, p3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	void * p3
PREINIT:
	int(*func)(int, void *, char *, void *);
CODE:
	func   = INT2PTR(int(*)(int, void *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2, p3);
OUTPUT:
	RETVAL

void *
nci_ppdtp( c_func, p0, d1, t2, p3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	void * p3
PREINIT:
	void *(*func)(void *, double, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2, p3);
OUTPUT:
	RETVAL

void
nci_vpdtp( c_func, p0, d1, t2, p3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	void * p3
PREINIT:
	void(*func)(void *, double, char *, void *);
CODE:
	func   = INT2PTR(void(*)(void *, double, char *, void *), SvIV(c_func) );
	(*func)(p0, d1, t2, p3);

double
nci_dpdtp( c_func, p0, d1, t2, p3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	void * p3
PREINIT:
	double(*func)(void *, double, char *, void *);
CODE:
	func   = INT2PTR(double(*)(void *, double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2, p3);
OUTPUT:
	RETVAL

short
nci_spdtp( c_func, p0, d1, t2, p3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	void * p3
PREINIT:
	short(*func)(void *, double, char *, void *);
CODE:
	func   = INT2PTR(short(*)(void *, double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2, p3);
OUTPUT:
	RETVAL

float
nci_fpdtp( c_func, p0, d1, t2, p3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	void * p3
PREINIT:
	float(*func)(void *, double, char *, void *);
CODE:
	func   = INT2PTR(float(*)(void *, double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2, p3);
OUTPUT:
	RETVAL

char *
nci_tpdtp( c_func, p0, d1, t2, p3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	void * p3
PREINIT:
	char *(*func)(void *, double, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2, p3);
OUTPUT:
	RETVAL

int
nci_ipdtp( c_func, p0, d1, t2, p3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	void * p3
PREINIT:
	int(*func)(void *, double, char *, void *);
CODE:
	func   = INT2PTR(int(*)(void *, double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2, p3);
OUTPUT:
	RETVAL

void *
nci_pvdtp( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvdtp( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvdtp( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svdtp( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvdtp( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvdtp( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivdtp( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pddtp( c_func, d0, d1, t2, p3 )
	SV* c_func
	double d0
	double d1
	char * t2
	void * p3
PREINIT:
	void *(*func)(double, double, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(double, double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2, p3);
OUTPUT:
	RETVAL

void
nci_vddtp( c_func, d0, d1, t2, p3 )
	SV* c_func
	double d0
	double d1
	char * t2
	void * p3
PREINIT:
	void(*func)(double, double, char *, void *);
CODE:
	func   = INT2PTR(void(*)(double, double, char *, void *), SvIV(c_func) );
	(*func)(d0, d1, t2, p3);

double
nci_dddtp( c_func, d0, d1, t2, p3 )
	SV* c_func
	double d0
	double d1
	char * t2
	void * p3
PREINIT:
	double(*func)(double, double, char *, void *);
CODE:
	func   = INT2PTR(double(*)(double, double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2, p3);
OUTPUT:
	RETVAL

short
nci_sddtp( c_func, d0, d1, t2, p3 )
	SV* c_func
	double d0
	double d1
	char * t2
	void * p3
PREINIT:
	short(*func)(double, double, char *, void *);
CODE:
	func   = INT2PTR(short(*)(double, double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2, p3);
OUTPUT:
	RETVAL

float
nci_fddtp( c_func, d0, d1, t2, p3 )
	SV* c_func
	double d0
	double d1
	char * t2
	void * p3
PREINIT:
	float(*func)(double, double, char *, void *);
CODE:
	func   = INT2PTR(float(*)(double, double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2, p3);
OUTPUT:
	RETVAL

char *
nci_tddtp( c_func, d0, d1, t2, p3 )
	SV* c_func
	double d0
	double d1
	char * t2
	void * p3
PREINIT:
	char *(*func)(double, double, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(double, double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2, p3);
OUTPUT:
	RETVAL

int
nci_iddtp( c_func, d0, d1, t2, p3 )
	SV* c_func
	double d0
	double d1
	char * t2
	void * p3
PREINIT:
	int(*func)(double, double, char *, void *);
CODE:
	func   = INT2PTR(int(*)(double, double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2, p3);
OUTPUT:
	RETVAL

void *
nci_psdtp( c_func, s0, d1, t2, p3 )
	SV* c_func
	short s0
	double d1
	char * t2
	void * p3
PREINIT:
	void *(*func)(short, double, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(short, double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2, p3);
OUTPUT:
	RETVAL

void
nci_vsdtp( c_func, s0, d1, t2, p3 )
	SV* c_func
	short s0
	double d1
	char * t2
	void * p3
PREINIT:
	void(*func)(short, double, char *, void *);
CODE:
	func   = INT2PTR(void(*)(short, double, char *, void *), SvIV(c_func) );
	(*func)(s0, d1, t2, p3);

double
nci_dsdtp( c_func, s0, d1, t2, p3 )
	SV* c_func
	short s0
	double d1
	char * t2
	void * p3
PREINIT:
	double(*func)(short, double, char *, void *);
CODE:
	func   = INT2PTR(double(*)(short, double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2, p3);
OUTPUT:
	RETVAL

short
nci_ssdtp( c_func, s0, d1, t2, p3 )
	SV* c_func
	short s0
	double d1
	char * t2
	void * p3
PREINIT:
	short(*func)(short, double, char *, void *);
CODE:
	func   = INT2PTR(short(*)(short, double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2, p3);
OUTPUT:
	RETVAL

float
nci_fsdtp( c_func, s0, d1, t2, p3 )
	SV* c_func
	short s0
	double d1
	char * t2
	void * p3
PREINIT:
	float(*func)(short, double, char *, void *);
CODE:
	func   = INT2PTR(float(*)(short, double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2, p3);
OUTPUT:
	RETVAL

char *
nci_tsdtp( c_func, s0, d1, t2, p3 )
	SV* c_func
	short s0
	double d1
	char * t2
	void * p3
PREINIT:
	char *(*func)(short, double, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(short, double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2, p3);
OUTPUT:
	RETVAL

int
nci_isdtp( c_func, s0, d1, t2, p3 )
	SV* c_func
	short s0
	double d1
	char * t2
	void * p3
PREINIT:
	int(*func)(short, double, char *, void *);
CODE:
	func   = INT2PTR(int(*)(short, double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2, p3);
OUTPUT:
	RETVAL

void *
nci_pfdtp( c_func, f0, d1, t2, p3 )
	SV* c_func
	float f0
	double d1
	char * t2
	void * p3
PREINIT:
	void *(*func)(float, double, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(float, double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2, p3);
OUTPUT:
	RETVAL

void
nci_vfdtp( c_func, f0, d1, t2, p3 )
	SV* c_func
	float f0
	double d1
	char * t2
	void * p3
PREINIT:
	void(*func)(float, double, char *, void *);
CODE:
	func   = INT2PTR(void(*)(float, double, char *, void *), SvIV(c_func) );
	(*func)(f0, d1, t2, p3);

double
nci_dfdtp( c_func, f0, d1, t2, p3 )
	SV* c_func
	float f0
	double d1
	char * t2
	void * p3
PREINIT:
	double(*func)(float, double, char *, void *);
CODE:
	func   = INT2PTR(double(*)(float, double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2, p3);
OUTPUT:
	RETVAL

short
nci_sfdtp( c_func, f0, d1, t2, p3 )
	SV* c_func
	float f0
	double d1
	char * t2
	void * p3
PREINIT:
	short(*func)(float, double, char *, void *);
CODE:
	func   = INT2PTR(short(*)(float, double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2, p3);
OUTPUT:
	RETVAL

float
nci_ffdtp( c_func, f0, d1, t2, p3 )
	SV* c_func
	float f0
	double d1
	char * t2
	void * p3
PREINIT:
	float(*func)(float, double, char *, void *);
CODE:
	func   = INT2PTR(float(*)(float, double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2, p3);
OUTPUT:
	RETVAL

char *
nci_tfdtp( c_func, f0, d1, t2, p3 )
	SV* c_func
	float f0
	double d1
	char * t2
	void * p3
PREINIT:
	char *(*func)(float, double, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(float, double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2, p3);
OUTPUT:
	RETVAL

int
nci_ifdtp( c_func, f0, d1, t2, p3 )
	SV* c_func
	float f0
	double d1
	char * t2
	void * p3
PREINIT:
	int(*func)(float, double, char *, void *);
CODE:
	func   = INT2PTR(int(*)(float, double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2, p3);
OUTPUT:
	RETVAL

void *
nci_ptdtp( c_func, t0, d1, t2, p3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	void * p3
PREINIT:
	void *(*func)(char *, double, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2, p3);
OUTPUT:
	RETVAL

void
nci_vtdtp( c_func, t0, d1, t2, p3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	void * p3
PREINIT:
	void(*func)(char *, double, char *, void *);
CODE:
	func   = INT2PTR(void(*)(char *, double, char *, void *), SvIV(c_func) );
	(*func)(t0, d1, t2, p3);

double
nci_dtdtp( c_func, t0, d1, t2, p3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	void * p3
PREINIT:
	double(*func)(char *, double, char *, void *);
CODE:
	func   = INT2PTR(double(*)(char *, double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2, p3);
OUTPUT:
	RETVAL

short
nci_stdtp( c_func, t0, d1, t2, p3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	void * p3
PREINIT:
	short(*func)(char *, double, char *, void *);
CODE:
	func   = INT2PTR(short(*)(char *, double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2, p3);
OUTPUT:
	RETVAL

float
nci_ftdtp( c_func, t0, d1, t2, p3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	void * p3
PREINIT:
	float(*func)(char *, double, char *, void *);
CODE:
	func   = INT2PTR(float(*)(char *, double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2, p3);
OUTPUT:
	RETVAL

char *
nci_ttdtp( c_func, t0, d1, t2, p3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	void * p3
PREINIT:
	char *(*func)(char *, double, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2, p3);
OUTPUT:
	RETVAL

int
nci_itdtp( c_func, t0, d1, t2, p3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	void * p3
PREINIT:
	int(*func)(char *, double, char *, void *);
CODE:
	func   = INT2PTR(int(*)(char *, double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2, p3);
OUTPUT:
	RETVAL

void *
nci_pidtp( c_func, i0, d1, t2, p3 )
	SV* c_func
	int i0
	double d1
	char * t2
	void * p3
PREINIT:
	void *(*func)(int, double, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(int, double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2, p3);
OUTPUT:
	RETVAL

void
nci_vidtp( c_func, i0, d1, t2, p3 )
	SV* c_func
	int i0
	double d1
	char * t2
	void * p3
PREINIT:
	void(*func)(int, double, char *, void *);
CODE:
	func   = INT2PTR(void(*)(int, double, char *, void *), SvIV(c_func) );
	(*func)(i0, d1, t2, p3);

double
nci_didtp( c_func, i0, d1, t2, p3 )
	SV* c_func
	int i0
	double d1
	char * t2
	void * p3
PREINIT:
	double(*func)(int, double, char *, void *);
CODE:
	func   = INT2PTR(double(*)(int, double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2, p3);
OUTPUT:
	RETVAL

short
nci_sidtp( c_func, i0, d1, t2, p3 )
	SV* c_func
	int i0
	double d1
	char * t2
	void * p3
PREINIT:
	short(*func)(int, double, char *, void *);
CODE:
	func   = INT2PTR(short(*)(int, double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2, p3);
OUTPUT:
	RETVAL

float
nci_fidtp( c_func, i0, d1, t2, p3 )
	SV* c_func
	int i0
	double d1
	char * t2
	void * p3
PREINIT:
	float(*func)(int, double, char *, void *);
CODE:
	func   = INT2PTR(float(*)(int, double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2, p3);
OUTPUT:
	RETVAL

char *
nci_tidtp( c_func, i0, d1, t2, p3 )
	SV* c_func
	int i0
	double d1
	char * t2
	void * p3
PREINIT:
	char *(*func)(int, double, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(int, double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2, p3);
OUTPUT:
	RETVAL

int
nci_iidtp( c_func, i0, d1, t2, p3 )
	SV* c_func
	int i0
	double d1
	char * t2
	void * p3
PREINIT:
	int(*func)(int, double, char *, void *);
CODE:
	func   = INT2PTR(int(*)(int, double, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2, p3);
OUTPUT:
	RETVAL

void *
nci_ppstp( c_func, p0, s1, t2, p3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	void * p3
PREINIT:
	void *(*func)(void *, short, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2, p3);
OUTPUT:
	RETVAL

void
nci_vpstp( c_func, p0, s1, t2, p3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	void * p3
PREINIT:
	void(*func)(void *, short, char *, void *);
CODE:
	func   = INT2PTR(void(*)(void *, short, char *, void *), SvIV(c_func) );
	(*func)(p0, s1, t2, p3);

double
nci_dpstp( c_func, p0, s1, t2, p3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	void * p3
PREINIT:
	double(*func)(void *, short, char *, void *);
CODE:
	func   = INT2PTR(double(*)(void *, short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2, p3);
OUTPUT:
	RETVAL

short
nci_spstp( c_func, p0, s1, t2, p3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	void * p3
PREINIT:
	short(*func)(void *, short, char *, void *);
CODE:
	func   = INT2PTR(short(*)(void *, short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2, p3);
OUTPUT:
	RETVAL

float
nci_fpstp( c_func, p0, s1, t2, p3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	void * p3
PREINIT:
	float(*func)(void *, short, char *, void *);
CODE:
	func   = INT2PTR(float(*)(void *, short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2, p3);
OUTPUT:
	RETVAL

char *
nci_tpstp( c_func, p0, s1, t2, p3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	void * p3
PREINIT:
	char *(*func)(void *, short, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2, p3);
OUTPUT:
	RETVAL

int
nci_ipstp( c_func, p0, s1, t2, p3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	void * p3
PREINIT:
	int(*func)(void *, short, char *, void *);
CODE:
	func   = INT2PTR(int(*)(void *, short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2, p3);
OUTPUT:
	RETVAL

void *
nci_pvstp( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvstp( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvstp( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svstp( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvstp( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvstp( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivstp( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdstp( c_func, d0, s1, t2, p3 )
	SV* c_func
	double d0
	short s1
	char * t2
	void * p3
PREINIT:
	void *(*func)(double, short, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(double, short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2, p3);
OUTPUT:
	RETVAL

void
nci_vdstp( c_func, d0, s1, t2, p3 )
	SV* c_func
	double d0
	short s1
	char * t2
	void * p3
PREINIT:
	void(*func)(double, short, char *, void *);
CODE:
	func   = INT2PTR(void(*)(double, short, char *, void *), SvIV(c_func) );
	(*func)(d0, s1, t2, p3);

double
nci_ddstp( c_func, d0, s1, t2, p3 )
	SV* c_func
	double d0
	short s1
	char * t2
	void * p3
PREINIT:
	double(*func)(double, short, char *, void *);
CODE:
	func   = INT2PTR(double(*)(double, short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2, p3);
OUTPUT:
	RETVAL

short
nci_sdstp( c_func, d0, s1, t2, p3 )
	SV* c_func
	double d0
	short s1
	char * t2
	void * p3
PREINIT:
	short(*func)(double, short, char *, void *);
CODE:
	func   = INT2PTR(short(*)(double, short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2, p3);
OUTPUT:
	RETVAL

float
nci_fdstp( c_func, d0, s1, t2, p3 )
	SV* c_func
	double d0
	short s1
	char * t2
	void * p3
PREINIT:
	float(*func)(double, short, char *, void *);
CODE:
	func   = INT2PTR(float(*)(double, short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2, p3);
OUTPUT:
	RETVAL

char *
nci_tdstp( c_func, d0, s1, t2, p3 )
	SV* c_func
	double d0
	short s1
	char * t2
	void * p3
PREINIT:
	char *(*func)(double, short, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(double, short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2, p3);
OUTPUT:
	RETVAL

int
nci_idstp( c_func, d0, s1, t2, p3 )
	SV* c_func
	double d0
	short s1
	char * t2
	void * p3
PREINIT:
	int(*func)(double, short, char *, void *);
CODE:
	func   = INT2PTR(int(*)(double, short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2, p3);
OUTPUT:
	RETVAL

void *
nci_psstp( c_func, s0, s1, t2, p3 )
	SV* c_func
	short s0
	short s1
	char * t2
	void * p3
PREINIT:
	void *(*func)(short, short, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(short, short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2, p3);
OUTPUT:
	RETVAL

void
nci_vsstp( c_func, s0, s1, t2, p3 )
	SV* c_func
	short s0
	short s1
	char * t2
	void * p3
PREINIT:
	void(*func)(short, short, char *, void *);
CODE:
	func   = INT2PTR(void(*)(short, short, char *, void *), SvIV(c_func) );
	(*func)(s0, s1, t2, p3);

double
nci_dsstp( c_func, s0, s1, t2, p3 )
	SV* c_func
	short s0
	short s1
	char * t2
	void * p3
PREINIT:
	double(*func)(short, short, char *, void *);
CODE:
	func   = INT2PTR(double(*)(short, short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2, p3);
OUTPUT:
	RETVAL

short
nci_ssstp( c_func, s0, s1, t2, p3 )
	SV* c_func
	short s0
	short s1
	char * t2
	void * p3
PREINIT:
	short(*func)(short, short, char *, void *);
CODE:
	func   = INT2PTR(short(*)(short, short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2, p3);
OUTPUT:
	RETVAL

float
nci_fsstp( c_func, s0, s1, t2, p3 )
	SV* c_func
	short s0
	short s1
	char * t2
	void * p3
PREINIT:
	float(*func)(short, short, char *, void *);
CODE:
	func   = INT2PTR(float(*)(short, short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2, p3);
OUTPUT:
	RETVAL

char *
nci_tsstp( c_func, s0, s1, t2, p3 )
	SV* c_func
	short s0
	short s1
	char * t2
	void * p3
PREINIT:
	char *(*func)(short, short, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(short, short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2, p3);
OUTPUT:
	RETVAL

int
nci_isstp( c_func, s0, s1, t2, p3 )
	SV* c_func
	short s0
	short s1
	char * t2
	void * p3
PREINIT:
	int(*func)(short, short, char *, void *);
CODE:
	func   = INT2PTR(int(*)(short, short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2, p3);
OUTPUT:
	RETVAL

void *
nci_pfstp( c_func, f0, s1, t2, p3 )
	SV* c_func
	float f0
	short s1
	char * t2
	void * p3
PREINIT:
	void *(*func)(float, short, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(float, short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2, p3);
OUTPUT:
	RETVAL

void
nci_vfstp( c_func, f0, s1, t2, p3 )
	SV* c_func
	float f0
	short s1
	char * t2
	void * p3
PREINIT:
	void(*func)(float, short, char *, void *);
CODE:
	func   = INT2PTR(void(*)(float, short, char *, void *), SvIV(c_func) );
	(*func)(f0, s1, t2, p3);

double
nci_dfstp( c_func, f0, s1, t2, p3 )
	SV* c_func
	float f0
	short s1
	char * t2
	void * p3
PREINIT:
	double(*func)(float, short, char *, void *);
CODE:
	func   = INT2PTR(double(*)(float, short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2, p3);
OUTPUT:
	RETVAL

short
nci_sfstp( c_func, f0, s1, t2, p3 )
	SV* c_func
	float f0
	short s1
	char * t2
	void * p3
PREINIT:
	short(*func)(float, short, char *, void *);
CODE:
	func   = INT2PTR(short(*)(float, short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2, p3);
OUTPUT:
	RETVAL

float
nci_ffstp( c_func, f0, s1, t2, p3 )
	SV* c_func
	float f0
	short s1
	char * t2
	void * p3
PREINIT:
	float(*func)(float, short, char *, void *);
CODE:
	func   = INT2PTR(float(*)(float, short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2, p3);
OUTPUT:
	RETVAL

char *
nci_tfstp( c_func, f0, s1, t2, p3 )
	SV* c_func
	float f0
	short s1
	char * t2
	void * p3
PREINIT:
	char *(*func)(float, short, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(float, short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2, p3);
OUTPUT:
	RETVAL

int
nci_ifstp( c_func, f0, s1, t2, p3 )
	SV* c_func
	float f0
	short s1
	char * t2
	void * p3
PREINIT:
	int(*func)(float, short, char *, void *);
CODE:
	func   = INT2PTR(int(*)(float, short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2, p3);
OUTPUT:
	RETVAL

void *
nci_ptstp( c_func, t0, s1, t2, p3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	void * p3
PREINIT:
	void *(*func)(char *, short, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2, p3);
OUTPUT:
	RETVAL

void
nci_vtstp( c_func, t0, s1, t2, p3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	void * p3
PREINIT:
	void(*func)(char *, short, char *, void *);
CODE:
	func   = INT2PTR(void(*)(char *, short, char *, void *), SvIV(c_func) );
	(*func)(t0, s1, t2, p3);

double
nci_dtstp( c_func, t0, s1, t2, p3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	void * p3
PREINIT:
	double(*func)(char *, short, char *, void *);
CODE:
	func   = INT2PTR(double(*)(char *, short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2, p3);
OUTPUT:
	RETVAL

short
nci_ststp( c_func, t0, s1, t2, p3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	void * p3
PREINIT:
	short(*func)(char *, short, char *, void *);
CODE:
	func   = INT2PTR(short(*)(char *, short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2, p3);
OUTPUT:
	RETVAL

float
nci_ftstp( c_func, t0, s1, t2, p3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	void * p3
PREINIT:
	float(*func)(char *, short, char *, void *);
CODE:
	func   = INT2PTR(float(*)(char *, short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2, p3);
OUTPUT:
	RETVAL

char *
nci_ttstp( c_func, t0, s1, t2, p3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	void * p3
PREINIT:
	char *(*func)(char *, short, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2, p3);
OUTPUT:
	RETVAL

int
nci_itstp( c_func, t0, s1, t2, p3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	void * p3
PREINIT:
	int(*func)(char *, short, char *, void *);
CODE:
	func   = INT2PTR(int(*)(char *, short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2, p3);
OUTPUT:
	RETVAL

void *
nci_pistp( c_func, i0, s1, t2, p3 )
	SV* c_func
	int i0
	short s1
	char * t2
	void * p3
PREINIT:
	void *(*func)(int, short, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(int, short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2, p3);
OUTPUT:
	RETVAL

void
nci_vistp( c_func, i0, s1, t2, p3 )
	SV* c_func
	int i0
	short s1
	char * t2
	void * p3
PREINIT:
	void(*func)(int, short, char *, void *);
CODE:
	func   = INT2PTR(void(*)(int, short, char *, void *), SvIV(c_func) );
	(*func)(i0, s1, t2, p3);

double
nci_distp( c_func, i0, s1, t2, p3 )
	SV* c_func
	int i0
	short s1
	char * t2
	void * p3
PREINIT:
	double(*func)(int, short, char *, void *);
CODE:
	func   = INT2PTR(double(*)(int, short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2, p3);
OUTPUT:
	RETVAL

short
nci_sistp( c_func, i0, s1, t2, p3 )
	SV* c_func
	int i0
	short s1
	char * t2
	void * p3
PREINIT:
	short(*func)(int, short, char *, void *);
CODE:
	func   = INT2PTR(short(*)(int, short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2, p3);
OUTPUT:
	RETVAL

float
nci_fistp( c_func, i0, s1, t2, p3 )
	SV* c_func
	int i0
	short s1
	char * t2
	void * p3
PREINIT:
	float(*func)(int, short, char *, void *);
CODE:
	func   = INT2PTR(float(*)(int, short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2, p3);
OUTPUT:
	RETVAL

char *
nci_tistp( c_func, i0, s1, t2, p3 )
	SV* c_func
	int i0
	short s1
	char * t2
	void * p3
PREINIT:
	char *(*func)(int, short, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(int, short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2, p3);
OUTPUT:
	RETVAL

int
nci_iistp( c_func, i0, s1, t2, p3 )
	SV* c_func
	int i0
	short s1
	char * t2
	void * p3
PREINIT:
	int(*func)(int, short, char *, void *);
CODE:
	func   = INT2PTR(int(*)(int, short, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2, p3);
OUTPUT:
	RETVAL

void *
nci_ppftp( c_func, p0, f1, t2, p3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	void * p3
PREINIT:
	void *(*func)(void *, float, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2, p3);
OUTPUT:
	RETVAL

void
nci_vpftp( c_func, p0, f1, t2, p3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	void * p3
PREINIT:
	void(*func)(void *, float, char *, void *);
CODE:
	func   = INT2PTR(void(*)(void *, float, char *, void *), SvIV(c_func) );
	(*func)(p0, f1, t2, p3);

double
nci_dpftp( c_func, p0, f1, t2, p3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	void * p3
PREINIT:
	double(*func)(void *, float, char *, void *);
CODE:
	func   = INT2PTR(double(*)(void *, float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2, p3);
OUTPUT:
	RETVAL

short
nci_spftp( c_func, p0, f1, t2, p3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	void * p3
PREINIT:
	short(*func)(void *, float, char *, void *);
CODE:
	func   = INT2PTR(short(*)(void *, float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2, p3);
OUTPUT:
	RETVAL

float
nci_fpftp( c_func, p0, f1, t2, p3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	void * p3
PREINIT:
	float(*func)(void *, float, char *, void *);
CODE:
	func   = INT2PTR(float(*)(void *, float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2, p3);
OUTPUT:
	RETVAL

char *
nci_tpftp( c_func, p0, f1, t2, p3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	void * p3
PREINIT:
	char *(*func)(void *, float, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2, p3);
OUTPUT:
	RETVAL

int
nci_ipftp( c_func, p0, f1, t2, p3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	void * p3
PREINIT:
	int(*func)(void *, float, char *, void *);
CODE:
	func   = INT2PTR(int(*)(void *, float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2, p3);
OUTPUT:
	RETVAL

void *
nci_pvftp( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvftp( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvftp( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svftp( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvftp( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvftp( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivftp( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdftp( c_func, d0, f1, t2, p3 )
	SV* c_func
	double d0
	float f1
	char * t2
	void * p3
PREINIT:
	void *(*func)(double, float, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(double, float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2, p3);
OUTPUT:
	RETVAL

void
nci_vdftp( c_func, d0, f1, t2, p3 )
	SV* c_func
	double d0
	float f1
	char * t2
	void * p3
PREINIT:
	void(*func)(double, float, char *, void *);
CODE:
	func   = INT2PTR(void(*)(double, float, char *, void *), SvIV(c_func) );
	(*func)(d0, f1, t2, p3);

double
nci_ddftp( c_func, d0, f1, t2, p3 )
	SV* c_func
	double d0
	float f1
	char * t2
	void * p3
PREINIT:
	double(*func)(double, float, char *, void *);
CODE:
	func   = INT2PTR(double(*)(double, float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2, p3);
OUTPUT:
	RETVAL

short
nci_sdftp( c_func, d0, f1, t2, p3 )
	SV* c_func
	double d0
	float f1
	char * t2
	void * p3
PREINIT:
	short(*func)(double, float, char *, void *);
CODE:
	func   = INT2PTR(short(*)(double, float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2, p3);
OUTPUT:
	RETVAL

float
nci_fdftp( c_func, d0, f1, t2, p3 )
	SV* c_func
	double d0
	float f1
	char * t2
	void * p3
PREINIT:
	float(*func)(double, float, char *, void *);
CODE:
	func   = INT2PTR(float(*)(double, float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2, p3);
OUTPUT:
	RETVAL

char *
nci_tdftp( c_func, d0, f1, t2, p3 )
	SV* c_func
	double d0
	float f1
	char * t2
	void * p3
PREINIT:
	char *(*func)(double, float, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(double, float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2, p3);
OUTPUT:
	RETVAL

int
nci_idftp( c_func, d0, f1, t2, p3 )
	SV* c_func
	double d0
	float f1
	char * t2
	void * p3
PREINIT:
	int(*func)(double, float, char *, void *);
CODE:
	func   = INT2PTR(int(*)(double, float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2, p3);
OUTPUT:
	RETVAL

void *
nci_psftp( c_func, s0, f1, t2, p3 )
	SV* c_func
	short s0
	float f1
	char * t2
	void * p3
PREINIT:
	void *(*func)(short, float, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(short, float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2, p3);
OUTPUT:
	RETVAL

void
nci_vsftp( c_func, s0, f1, t2, p3 )
	SV* c_func
	short s0
	float f1
	char * t2
	void * p3
PREINIT:
	void(*func)(short, float, char *, void *);
CODE:
	func   = INT2PTR(void(*)(short, float, char *, void *), SvIV(c_func) );
	(*func)(s0, f1, t2, p3);

double
nci_dsftp( c_func, s0, f1, t2, p3 )
	SV* c_func
	short s0
	float f1
	char * t2
	void * p3
PREINIT:
	double(*func)(short, float, char *, void *);
CODE:
	func   = INT2PTR(double(*)(short, float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2, p3);
OUTPUT:
	RETVAL

short
nci_ssftp( c_func, s0, f1, t2, p3 )
	SV* c_func
	short s0
	float f1
	char * t2
	void * p3
PREINIT:
	short(*func)(short, float, char *, void *);
CODE:
	func   = INT2PTR(short(*)(short, float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2, p3);
OUTPUT:
	RETVAL

float
nci_fsftp( c_func, s0, f1, t2, p3 )
	SV* c_func
	short s0
	float f1
	char * t2
	void * p3
PREINIT:
	float(*func)(short, float, char *, void *);
CODE:
	func   = INT2PTR(float(*)(short, float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2, p3);
OUTPUT:
	RETVAL

char *
nci_tsftp( c_func, s0, f1, t2, p3 )
	SV* c_func
	short s0
	float f1
	char * t2
	void * p3
PREINIT:
	char *(*func)(short, float, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(short, float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2, p3);
OUTPUT:
	RETVAL

int
nci_isftp( c_func, s0, f1, t2, p3 )
	SV* c_func
	short s0
	float f1
	char * t2
	void * p3
PREINIT:
	int(*func)(short, float, char *, void *);
CODE:
	func   = INT2PTR(int(*)(short, float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2, p3);
OUTPUT:
	RETVAL

void *
nci_pfftp( c_func, f0, f1, t2, p3 )
	SV* c_func
	float f0
	float f1
	char * t2
	void * p3
PREINIT:
	void *(*func)(float, float, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(float, float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2, p3);
OUTPUT:
	RETVAL

void
nci_vfftp( c_func, f0, f1, t2, p3 )
	SV* c_func
	float f0
	float f1
	char * t2
	void * p3
PREINIT:
	void(*func)(float, float, char *, void *);
CODE:
	func   = INT2PTR(void(*)(float, float, char *, void *), SvIV(c_func) );
	(*func)(f0, f1, t2, p3);

double
nci_dfftp( c_func, f0, f1, t2, p3 )
	SV* c_func
	float f0
	float f1
	char * t2
	void * p3
PREINIT:
	double(*func)(float, float, char *, void *);
CODE:
	func   = INT2PTR(double(*)(float, float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2, p3);
OUTPUT:
	RETVAL

short
nci_sfftp( c_func, f0, f1, t2, p3 )
	SV* c_func
	float f0
	float f1
	char * t2
	void * p3
PREINIT:
	short(*func)(float, float, char *, void *);
CODE:
	func   = INT2PTR(short(*)(float, float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2, p3);
OUTPUT:
	RETVAL

float
nci_ffftp( c_func, f0, f1, t2, p3 )
	SV* c_func
	float f0
	float f1
	char * t2
	void * p3
PREINIT:
	float(*func)(float, float, char *, void *);
CODE:
	func   = INT2PTR(float(*)(float, float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2, p3);
OUTPUT:
	RETVAL

char *
nci_tfftp( c_func, f0, f1, t2, p3 )
	SV* c_func
	float f0
	float f1
	char * t2
	void * p3
PREINIT:
	char *(*func)(float, float, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(float, float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2, p3);
OUTPUT:
	RETVAL

int
nci_ifftp( c_func, f0, f1, t2, p3 )
	SV* c_func
	float f0
	float f1
	char * t2
	void * p3
PREINIT:
	int(*func)(float, float, char *, void *);
CODE:
	func   = INT2PTR(int(*)(float, float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2, p3);
OUTPUT:
	RETVAL

void *
nci_ptftp( c_func, t0, f1, t2, p3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	void * p3
PREINIT:
	void *(*func)(char *, float, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2, p3);
OUTPUT:
	RETVAL

void
nci_vtftp( c_func, t0, f1, t2, p3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	void * p3
PREINIT:
	void(*func)(char *, float, char *, void *);
CODE:
	func   = INT2PTR(void(*)(char *, float, char *, void *), SvIV(c_func) );
	(*func)(t0, f1, t2, p3);

double
nci_dtftp( c_func, t0, f1, t2, p3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	void * p3
PREINIT:
	double(*func)(char *, float, char *, void *);
CODE:
	func   = INT2PTR(double(*)(char *, float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2, p3);
OUTPUT:
	RETVAL

short
nci_stftp( c_func, t0, f1, t2, p3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	void * p3
PREINIT:
	short(*func)(char *, float, char *, void *);
CODE:
	func   = INT2PTR(short(*)(char *, float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2, p3);
OUTPUT:
	RETVAL

float
nci_ftftp( c_func, t0, f1, t2, p3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	void * p3
PREINIT:
	float(*func)(char *, float, char *, void *);
CODE:
	func   = INT2PTR(float(*)(char *, float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2, p3);
OUTPUT:
	RETVAL

char *
nci_ttftp( c_func, t0, f1, t2, p3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	void * p3
PREINIT:
	char *(*func)(char *, float, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2, p3);
OUTPUT:
	RETVAL

int
nci_itftp( c_func, t0, f1, t2, p3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	void * p3
PREINIT:
	int(*func)(char *, float, char *, void *);
CODE:
	func   = INT2PTR(int(*)(char *, float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2, p3);
OUTPUT:
	RETVAL

void *
nci_piftp( c_func, i0, f1, t2, p3 )
	SV* c_func
	int i0
	float f1
	char * t2
	void * p3
PREINIT:
	void *(*func)(int, float, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(int, float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2, p3);
OUTPUT:
	RETVAL

void
nci_viftp( c_func, i0, f1, t2, p3 )
	SV* c_func
	int i0
	float f1
	char * t2
	void * p3
PREINIT:
	void(*func)(int, float, char *, void *);
CODE:
	func   = INT2PTR(void(*)(int, float, char *, void *), SvIV(c_func) );
	(*func)(i0, f1, t2, p3);

double
nci_diftp( c_func, i0, f1, t2, p3 )
	SV* c_func
	int i0
	float f1
	char * t2
	void * p3
PREINIT:
	double(*func)(int, float, char *, void *);
CODE:
	func   = INT2PTR(double(*)(int, float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2, p3);
OUTPUT:
	RETVAL

short
nci_siftp( c_func, i0, f1, t2, p3 )
	SV* c_func
	int i0
	float f1
	char * t2
	void * p3
PREINIT:
	short(*func)(int, float, char *, void *);
CODE:
	func   = INT2PTR(short(*)(int, float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2, p3);
OUTPUT:
	RETVAL

float
nci_fiftp( c_func, i0, f1, t2, p3 )
	SV* c_func
	int i0
	float f1
	char * t2
	void * p3
PREINIT:
	float(*func)(int, float, char *, void *);
CODE:
	func   = INT2PTR(float(*)(int, float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2, p3);
OUTPUT:
	RETVAL

char *
nci_tiftp( c_func, i0, f1, t2, p3 )
	SV* c_func
	int i0
	float f1
	char * t2
	void * p3
PREINIT:
	char *(*func)(int, float, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(int, float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2, p3);
OUTPUT:
	RETVAL

int
nci_iiftp( c_func, i0, f1, t2, p3 )
	SV* c_func
	int i0
	float f1
	char * t2
	void * p3
PREINIT:
	int(*func)(int, float, char *, void *);
CODE:
	func   = INT2PTR(int(*)(int, float, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2, p3);
OUTPUT:
	RETVAL

void *
nci_ppttp( c_func, p0, t1, t2, p3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	void * p3
PREINIT:
	void *(*func)(void *, char *, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2, p3);
OUTPUT:
	RETVAL

void
nci_vpttp( c_func, p0, t1, t2, p3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	void * p3
PREINIT:
	void(*func)(void *, char *, char *, void *);
CODE:
	func   = INT2PTR(void(*)(void *, char *, char *, void *), SvIV(c_func) );
	(*func)(p0, t1, t2, p3);

double
nci_dpttp( c_func, p0, t1, t2, p3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	void * p3
PREINIT:
	double(*func)(void *, char *, char *, void *);
CODE:
	func   = INT2PTR(double(*)(void *, char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2, p3);
OUTPUT:
	RETVAL

short
nci_spttp( c_func, p0, t1, t2, p3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	void * p3
PREINIT:
	short(*func)(void *, char *, char *, void *);
CODE:
	func   = INT2PTR(short(*)(void *, char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2, p3);
OUTPUT:
	RETVAL

float
nci_fpttp( c_func, p0, t1, t2, p3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	void * p3
PREINIT:
	float(*func)(void *, char *, char *, void *);
CODE:
	func   = INT2PTR(float(*)(void *, char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2, p3);
OUTPUT:
	RETVAL

char *
nci_tpttp( c_func, p0, t1, t2, p3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	void * p3
PREINIT:
	char *(*func)(void *, char *, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2, p3);
OUTPUT:
	RETVAL

int
nci_ipttp( c_func, p0, t1, t2, p3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	void * p3
PREINIT:
	int(*func)(void *, char *, char *, void *);
CODE:
	func   = INT2PTR(int(*)(void *, char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2, p3);
OUTPUT:
	RETVAL

void *
nci_pvttp( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvttp( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvttp( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svttp( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvttp( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvttp( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivttp( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdttp( c_func, d0, t1, t2, p3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	void * p3
PREINIT:
	void *(*func)(double, char *, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(double, char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2, p3);
OUTPUT:
	RETVAL

void
nci_vdttp( c_func, d0, t1, t2, p3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	void * p3
PREINIT:
	void(*func)(double, char *, char *, void *);
CODE:
	func   = INT2PTR(void(*)(double, char *, char *, void *), SvIV(c_func) );
	(*func)(d0, t1, t2, p3);

double
nci_ddttp( c_func, d0, t1, t2, p3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	void * p3
PREINIT:
	double(*func)(double, char *, char *, void *);
CODE:
	func   = INT2PTR(double(*)(double, char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2, p3);
OUTPUT:
	RETVAL

short
nci_sdttp( c_func, d0, t1, t2, p3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	void * p3
PREINIT:
	short(*func)(double, char *, char *, void *);
CODE:
	func   = INT2PTR(short(*)(double, char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2, p3);
OUTPUT:
	RETVAL

float
nci_fdttp( c_func, d0, t1, t2, p3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	void * p3
PREINIT:
	float(*func)(double, char *, char *, void *);
CODE:
	func   = INT2PTR(float(*)(double, char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2, p3);
OUTPUT:
	RETVAL

char *
nci_tdttp( c_func, d0, t1, t2, p3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	void * p3
PREINIT:
	char *(*func)(double, char *, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(double, char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2, p3);
OUTPUT:
	RETVAL

int
nci_idttp( c_func, d0, t1, t2, p3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	void * p3
PREINIT:
	int(*func)(double, char *, char *, void *);
CODE:
	func   = INT2PTR(int(*)(double, char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2, p3);
OUTPUT:
	RETVAL

void *
nci_psttp( c_func, s0, t1, t2, p3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	void * p3
PREINIT:
	void *(*func)(short, char *, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(short, char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2, p3);
OUTPUT:
	RETVAL

void
nci_vsttp( c_func, s0, t1, t2, p3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	void * p3
PREINIT:
	void(*func)(short, char *, char *, void *);
CODE:
	func   = INT2PTR(void(*)(short, char *, char *, void *), SvIV(c_func) );
	(*func)(s0, t1, t2, p3);

double
nci_dsttp( c_func, s0, t1, t2, p3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	void * p3
PREINIT:
	double(*func)(short, char *, char *, void *);
CODE:
	func   = INT2PTR(double(*)(short, char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2, p3);
OUTPUT:
	RETVAL

short
nci_ssttp( c_func, s0, t1, t2, p3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	void * p3
PREINIT:
	short(*func)(short, char *, char *, void *);
CODE:
	func   = INT2PTR(short(*)(short, char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2, p3);
OUTPUT:
	RETVAL

float
nci_fsttp( c_func, s0, t1, t2, p3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	void * p3
PREINIT:
	float(*func)(short, char *, char *, void *);
CODE:
	func   = INT2PTR(float(*)(short, char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2, p3);
OUTPUT:
	RETVAL

char *
nci_tsttp( c_func, s0, t1, t2, p3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	void * p3
PREINIT:
	char *(*func)(short, char *, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(short, char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2, p3);
OUTPUT:
	RETVAL

int
nci_isttp( c_func, s0, t1, t2, p3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	void * p3
PREINIT:
	int(*func)(short, char *, char *, void *);
CODE:
	func   = INT2PTR(int(*)(short, char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2, p3);
OUTPUT:
	RETVAL

void *
nci_pfttp( c_func, f0, t1, t2, p3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	void * p3
PREINIT:
	void *(*func)(float, char *, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(float, char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2, p3);
OUTPUT:
	RETVAL

void
nci_vfttp( c_func, f0, t1, t2, p3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	void * p3
PREINIT:
	void(*func)(float, char *, char *, void *);
CODE:
	func   = INT2PTR(void(*)(float, char *, char *, void *), SvIV(c_func) );
	(*func)(f0, t1, t2, p3);

double
nci_dfttp( c_func, f0, t1, t2, p3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	void * p3
PREINIT:
	double(*func)(float, char *, char *, void *);
CODE:
	func   = INT2PTR(double(*)(float, char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2, p3);
OUTPUT:
	RETVAL

short
nci_sfttp( c_func, f0, t1, t2, p3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	void * p3
PREINIT:
	short(*func)(float, char *, char *, void *);
CODE:
	func   = INT2PTR(short(*)(float, char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2, p3);
OUTPUT:
	RETVAL

float
nci_ffttp( c_func, f0, t1, t2, p3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	void * p3
PREINIT:
	float(*func)(float, char *, char *, void *);
CODE:
	func   = INT2PTR(float(*)(float, char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2, p3);
OUTPUT:
	RETVAL

char *
nci_tfttp( c_func, f0, t1, t2, p3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	void * p3
PREINIT:
	char *(*func)(float, char *, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(float, char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2, p3);
OUTPUT:
	RETVAL

int
nci_ifttp( c_func, f0, t1, t2, p3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	void * p3
PREINIT:
	int(*func)(float, char *, char *, void *);
CODE:
	func   = INT2PTR(int(*)(float, char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2, p3);
OUTPUT:
	RETVAL

void *
nci_ptttp( c_func, t0, t1, t2, p3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	void * p3
PREINIT:
	void *(*func)(char *, char *, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2, p3);
OUTPUT:
	RETVAL

void
nci_vtttp( c_func, t0, t1, t2, p3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	void * p3
PREINIT:
	void(*func)(char *, char *, char *, void *);
CODE:
	func   = INT2PTR(void(*)(char *, char *, char *, void *), SvIV(c_func) );
	(*func)(t0, t1, t2, p3);

double
nci_dtttp( c_func, t0, t1, t2, p3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	void * p3
PREINIT:
	double(*func)(char *, char *, char *, void *);
CODE:
	func   = INT2PTR(double(*)(char *, char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2, p3);
OUTPUT:
	RETVAL

short
nci_stttp( c_func, t0, t1, t2, p3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	void * p3
PREINIT:
	short(*func)(char *, char *, char *, void *);
CODE:
	func   = INT2PTR(short(*)(char *, char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2, p3);
OUTPUT:
	RETVAL

float
nci_ftttp( c_func, t0, t1, t2, p3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	void * p3
PREINIT:
	float(*func)(char *, char *, char *, void *);
CODE:
	func   = INT2PTR(float(*)(char *, char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2, p3);
OUTPUT:
	RETVAL

char *
nci_ttttp( c_func, t0, t1, t2, p3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	void * p3
PREINIT:
	char *(*func)(char *, char *, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2, p3);
OUTPUT:
	RETVAL

int
nci_itttp( c_func, t0, t1, t2, p3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	void * p3
PREINIT:
	int(*func)(char *, char *, char *, void *);
CODE:
	func   = INT2PTR(int(*)(char *, char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2, p3);
OUTPUT:
	RETVAL

void *
nci_pittp( c_func, i0, t1, t2, p3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	void * p3
PREINIT:
	void *(*func)(int, char *, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(int, char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2, p3);
OUTPUT:
	RETVAL

void
nci_vittp( c_func, i0, t1, t2, p3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	void * p3
PREINIT:
	void(*func)(int, char *, char *, void *);
CODE:
	func   = INT2PTR(void(*)(int, char *, char *, void *), SvIV(c_func) );
	(*func)(i0, t1, t2, p3);

double
nci_dittp( c_func, i0, t1, t2, p3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	void * p3
PREINIT:
	double(*func)(int, char *, char *, void *);
CODE:
	func   = INT2PTR(double(*)(int, char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2, p3);
OUTPUT:
	RETVAL

short
nci_sittp( c_func, i0, t1, t2, p3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	void * p3
PREINIT:
	short(*func)(int, char *, char *, void *);
CODE:
	func   = INT2PTR(short(*)(int, char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2, p3);
OUTPUT:
	RETVAL

float
nci_fittp( c_func, i0, t1, t2, p3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	void * p3
PREINIT:
	float(*func)(int, char *, char *, void *);
CODE:
	func   = INT2PTR(float(*)(int, char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2, p3);
OUTPUT:
	RETVAL

char *
nci_tittp( c_func, i0, t1, t2, p3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	void * p3
PREINIT:
	char *(*func)(int, char *, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(int, char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2, p3);
OUTPUT:
	RETVAL

int
nci_iittp( c_func, i0, t1, t2, p3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	void * p3
PREINIT:
	int(*func)(int, char *, char *, void *);
CODE:
	func   = INT2PTR(int(*)(int, char *, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2, p3);
OUTPUT:
	RETVAL

void *
nci_ppitp( c_func, p0, i1, t2, p3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	void * p3
PREINIT:
	void *(*func)(void *, int, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2, p3);
OUTPUT:
	RETVAL

void
nci_vpitp( c_func, p0, i1, t2, p3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	void * p3
PREINIT:
	void(*func)(void *, int, char *, void *);
CODE:
	func   = INT2PTR(void(*)(void *, int, char *, void *), SvIV(c_func) );
	(*func)(p0, i1, t2, p3);

double
nci_dpitp( c_func, p0, i1, t2, p3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	void * p3
PREINIT:
	double(*func)(void *, int, char *, void *);
CODE:
	func   = INT2PTR(double(*)(void *, int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2, p3);
OUTPUT:
	RETVAL

short
nci_spitp( c_func, p0, i1, t2, p3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	void * p3
PREINIT:
	short(*func)(void *, int, char *, void *);
CODE:
	func   = INT2PTR(short(*)(void *, int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2, p3);
OUTPUT:
	RETVAL

float
nci_fpitp( c_func, p0, i1, t2, p3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	void * p3
PREINIT:
	float(*func)(void *, int, char *, void *);
CODE:
	func   = INT2PTR(float(*)(void *, int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2, p3);
OUTPUT:
	RETVAL

char *
nci_tpitp( c_func, p0, i1, t2, p3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	void * p3
PREINIT:
	char *(*func)(void *, int, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2, p3);
OUTPUT:
	RETVAL

int
nci_ipitp( c_func, p0, i1, t2, p3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	void * p3
PREINIT:
	int(*func)(void *, int, char *, void *);
CODE:
	func   = INT2PTR(int(*)(void *, int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2, p3);
OUTPUT:
	RETVAL

void *
nci_pvitp( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvitp( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvitp( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svitp( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvitp( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvitp( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivitp( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pditp( c_func, d0, i1, t2, p3 )
	SV* c_func
	double d0
	int i1
	char * t2
	void * p3
PREINIT:
	void *(*func)(double, int, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(double, int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2, p3);
OUTPUT:
	RETVAL

void
nci_vditp( c_func, d0, i1, t2, p3 )
	SV* c_func
	double d0
	int i1
	char * t2
	void * p3
PREINIT:
	void(*func)(double, int, char *, void *);
CODE:
	func   = INT2PTR(void(*)(double, int, char *, void *), SvIV(c_func) );
	(*func)(d0, i1, t2, p3);

double
nci_dditp( c_func, d0, i1, t2, p3 )
	SV* c_func
	double d0
	int i1
	char * t2
	void * p3
PREINIT:
	double(*func)(double, int, char *, void *);
CODE:
	func   = INT2PTR(double(*)(double, int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2, p3);
OUTPUT:
	RETVAL

short
nci_sditp( c_func, d0, i1, t2, p3 )
	SV* c_func
	double d0
	int i1
	char * t2
	void * p3
PREINIT:
	short(*func)(double, int, char *, void *);
CODE:
	func   = INT2PTR(short(*)(double, int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2, p3);
OUTPUT:
	RETVAL

float
nci_fditp( c_func, d0, i1, t2, p3 )
	SV* c_func
	double d0
	int i1
	char * t2
	void * p3
PREINIT:
	float(*func)(double, int, char *, void *);
CODE:
	func   = INT2PTR(float(*)(double, int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2, p3);
OUTPUT:
	RETVAL

char *
nci_tditp( c_func, d0, i1, t2, p3 )
	SV* c_func
	double d0
	int i1
	char * t2
	void * p3
PREINIT:
	char *(*func)(double, int, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(double, int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2, p3);
OUTPUT:
	RETVAL

int
nci_iditp( c_func, d0, i1, t2, p3 )
	SV* c_func
	double d0
	int i1
	char * t2
	void * p3
PREINIT:
	int(*func)(double, int, char *, void *);
CODE:
	func   = INT2PTR(int(*)(double, int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2, p3);
OUTPUT:
	RETVAL

void *
nci_psitp( c_func, s0, i1, t2, p3 )
	SV* c_func
	short s0
	int i1
	char * t2
	void * p3
PREINIT:
	void *(*func)(short, int, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(short, int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2, p3);
OUTPUT:
	RETVAL

void
nci_vsitp( c_func, s0, i1, t2, p3 )
	SV* c_func
	short s0
	int i1
	char * t2
	void * p3
PREINIT:
	void(*func)(short, int, char *, void *);
CODE:
	func   = INT2PTR(void(*)(short, int, char *, void *), SvIV(c_func) );
	(*func)(s0, i1, t2, p3);

double
nci_dsitp( c_func, s0, i1, t2, p3 )
	SV* c_func
	short s0
	int i1
	char * t2
	void * p3
PREINIT:
	double(*func)(short, int, char *, void *);
CODE:
	func   = INT2PTR(double(*)(short, int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2, p3);
OUTPUT:
	RETVAL

short
nci_ssitp( c_func, s0, i1, t2, p3 )
	SV* c_func
	short s0
	int i1
	char * t2
	void * p3
PREINIT:
	short(*func)(short, int, char *, void *);
CODE:
	func   = INT2PTR(short(*)(short, int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2, p3);
OUTPUT:
	RETVAL

float
nci_fsitp( c_func, s0, i1, t2, p3 )
	SV* c_func
	short s0
	int i1
	char * t2
	void * p3
PREINIT:
	float(*func)(short, int, char *, void *);
CODE:
	func   = INT2PTR(float(*)(short, int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2, p3);
OUTPUT:
	RETVAL

char *
nci_tsitp( c_func, s0, i1, t2, p3 )
	SV* c_func
	short s0
	int i1
	char * t2
	void * p3
PREINIT:
	char *(*func)(short, int, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(short, int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2, p3);
OUTPUT:
	RETVAL

int
nci_isitp( c_func, s0, i1, t2, p3 )
	SV* c_func
	short s0
	int i1
	char * t2
	void * p3
PREINIT:
	int(*func)(short, int, char *, void *);
CODE:
	func   = INT2PTR(int(*)(short, int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2, p3);
OUTPUT:
	RETVAL

void *
nci_pfitp( c_func, f0, i1, t2, p3 )
	SV* c_func
	float f0
	int i1
	char * t2
	void * p3
PREINIT:
	void *(*func)(float, int, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(float, int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2, p3);
OUTPUT:
	RETVAL

void
nci_vfitp( c_func, f0, i1, t2, p3 )
	SV* c_func
	float f0
	int i1
	char * t2
	void * p3
PREINIT:
	void(*func)(float, int, char *, void *);
CODE:
	func   = INT2PTR(void(*)(float, int, char *, void *), SvIV(c_func) );
	(*func)(f0, i1, t2, p3);

double
nci_dfitp( c_func, f0, i1, t2, p3 )
	SV* c_func
	float f0
	int i1
	char * t2
	void * p3
PREINIT:
	double(*func)(float, int, char *, void *);
CODE:
	func   = INT2PTR(double(*)(float, int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2, p3);
OUTPUT:
	RETVAL

short
nci_sfitp( c_func, f0, i1, t2, p3 )
	SV* c_func
	float f0
	int i1
	char * t2
	void * p3
PREINIT:
	short(*func)(float, int, char *, void *);
CODE:
	func   = INT2PTR(short(*)(float, int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2, p3);
OUTPUT:
	RETVAL

float
nci_ffitp( c_func, f0, i1, t2, p3 )
	SV* c_func
	float f0
	int i1
	char * t2
	void * p3
PREINIT:
	float(*func)(float, int, char *, void *);
CODE:
	func   = INT2PTR(float(*)(float, int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2, p3);
OUTPUT:
	RETVAL

char *
nci_tfitp( c_func, f0, i1, t2, p3 )
	SV* c_func
	float f0
	int i1
	char * t2
	void * p3
PREINIT:
	char *(*func)(float, int, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(float, int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2, p3);
OUTPUT:
	RETVAL

int
nci_ifitp( c_func, f0, i1, t2, p3 )
	SV* c_func
	float f0
	int i1
	char * t2
	void * p3
PREINIT:
	int(*func)(float, int, char *, void *);
CODE:
	func   = INT2PTR(int(*)(float, int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2, p3);
OUTPUT:
	RETVAL

void *
nci_ptitp( c_func, t0, i1, t2, p3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	void * p3
PREINIT:
	void *(*func)(char *, int, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2, p3);
OUTPUT:
	RETVAL

void
nci_vtitp( c_func, t0, i1, t2, p3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	void * p3
PREINIT:
	void(*func)(char *, int, char *, void *);
CODE:
	func   = INT2PTR(void(*)(char *, int, char *, void *), SvIV(c_func) );
	(*func)(t0, i1, t2, p3);

double
nci_dtitp( c_func, t0, i1, t2, p3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	void * p3
PREINIT:
	double(*func)(char *, int, char *, void *);
CODE:
	func   = INT2PTR(double(*)(char *, int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2, p3);
OUTPUT:
	RETVAL

short
nci_stitp( c_func, t0, i1, t2, p3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	void * p3
PREINIT:
	short(*func)(char *, int, char *, void *);
CODE:
	func   = INT2PTR(short(*)(char *, int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2, p3);
OUTPUT:
	RETVAL

float
nci_ftitp( c_func, t0, i1, t2, p3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	void * p3
PREINIT:
	float(*func)(char *, int, char *, void *);
CODE:
	func   = INT2PTR(float(*)(char *, int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2, p3);
OUTPUT:
	RETVAL

char *
nci_ttitp( c_func, t0, i1, t2, p3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	void * p3
PREINIT:
	char *(*func)(char *, int, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2, p3);
OUTPUT:
	RETVAL

int
nci_ititp( c_func, t0, i1, t2, p3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	void * p3
PREINIT:
	int(*func)(char *, int, char *, void *);
CODE:
	func   = INT2PTR(int(*)(char *, int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2, p3);
OUTPUT:
	RETVAL

void *
nci_piitp( c_func, i0, i1, t2, p3 )
	SV* c_func
	int i0
	int i1
	char * t2
	void * p3
PREINIT:
	void *(*func)(int, int, char *, void *);
CODE:
	func   = INT2PTR(void *(*)(int, int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2, p3);
OUTPUT:
	RETVAL

void
nci_viitp( c_func, i0, i1, t2, p3 )
	SV* c_func
	int i0
	int i1
	char * t2
	void * p3
PREINIT:
	void(*func)(int, int, char *, void *);
CODE:
	func   = INT2PTR(void(*)(int, int, char *, void *), SvIV(c_func) );
	(*func)(i0, i1, t2, p3);

double
nci_diitp( c_func, i0, i1, t2, p3 )
	SV* c_func
	int i0
	int i1
	char * t2
	void * p3
PREINIT:
	double(*func)(int, int, char *, void *);
CODE:
	func   = INT2PTR(double(*)(int, int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2, p3);
OUTPUT:
	RETVAL

short
nci_siitp( c_func, i0, i1, t2, p3 )
	SV* c_func
	int i0
	int i1
	char * t2
	void * p3
PREINIT:
	short(*func)(int, int, char *, void *);
CODE:
	func   = INT2PTR(short(*)(int, int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2, p3);
OUTPUT:
	RETVAL

float
nci_fiitp( c_func, i0, i1, t2, p3 )
	SV* c_func
	int i0
	int i1
	char * t2
	void * p3
PREINIT:
	float(*func)(int, int, char *, void *);
CODE:
	func   = INT2PTR(float(*)(int, int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2, p3);
OUTPUT:
	RETVAL

char *
nci_tiitp( c_func, i0, i1, t2, p3 )
	SV* c_func
	int i0
	int i1
	char * t2
	void * p3
PREINIT:
	char *(*func)(int, int, char *, void *);
CODE:
	func   = INT2PTR(char *(*)(int, int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2, p3);
OUTPUT:
	RETVAL

int
nci_iiitp( c_func, i0, i1, t2, p3 )
	SV* c_func
	int i0
	int i1
	char * t2
	void * p3
PREINIT:
	int(*func)(int, int, char *, void *);
CODE:
	func   = INT2PTR(int(*)(int, int, char *, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2, p3);
OUTPUT:
	RETVAL

void *
nci_pppip( c_func, p0, p1, i2, p3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	void * p3
PREINIT:
	void *(*func)(void *, void *, int, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2, p3);
OUTPUT:
	RETVAL

void
nci_vppip( c_func, p0, p1, i2, p3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	void * p3
PREINIT:
	void(*func)(void *, void *, int, void *);
CODE:
	func   = INT2PTR(void(*)(void *, void *, int, void *), SvIV(c_func) );
	(*func)(p0, p1, i2, p3);

double
nci_dppip( c_func, p0, p1, i2, p3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	void * p3
PREINIT:
	double(*func)(void *, void *, int, void *);
CODE:
	func   = INT2PTR(double(*)(void *, void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2, p3);
OUTPUT:
	RETVAL

short
nci_sppip( c_func, p0, p1, i2, p3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	void * p3
PREINIT:
	short(*func)(void *, void *, int, void *);
CODE:
	func   = INT2PTR(short(*)(void *, void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2, p3);
OUTPUT:
	RETVAL

float
nci_fppip( c_func, p0, p1, i2, p3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	void * p3
PREINIT:
	float(*func)(void *, void *, int, void *);
CODE:
	func   = INT2PTR(float(*)(void *, void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2, p3);
OUTPUT:
	RETVAL

char *
nci_tppip( c_func, p0, p1, i2, p3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	void * p3
PREINIT:
	char *(*func)(void *, void *, int, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2, p3);
OUTPUT:
	RETVAL

int
nci_ippip( c_func, p0, p1, i2, p3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	void * p3
PREINIT:
	int(*func)(void *, void *, int, void *);
CODE:
	func   = INT2PTR(int(*)(void *, void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2, p3);
OUTPUT:
	RETVAL

void *
nci_pvpip( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvpip( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvpip( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svpip( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvpip( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvpip( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivpip( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdpip( c_func, d0, p1, i2, p3 )
	SV* c_func
	double d0
	void * p1
	int i2
	void * p3
PREINIT:
	void *(*func)(double, void *, int, void *);
CODE:
	func   = INT2PTR(void *(*)(double, void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2, p3);
OUTPUT:
	RETVAL

void
nci_vdpip( c_func, d0, p1, i2, p3 )
	SV* c_func
	double d0
	void * p1
	int i2
	void * p3
PREINIT:
	void(*func)(double, void *, int, void *);
CODE:
	func   = INT2PTR(void(*)(double, void *, int, void *), SvIV(c_func) );
	(*func)(d0, p1, i2, p3);

double
nci_ddpip( c_func, d0, p1, i2, p3 )
	SV* c_func
	double d0
	void * p1
	int i2
	void * p3
PREINIT:
	double(*func)(double, void *, int, void *);
CODE:
	func   = INT2PTR(double(*)(double, void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2, p3);
OUTPUT:
	RETVAL

short
nci_sdpip( c_func, d0, p1, i2, p3 )
	SV* c_func
	double d0
	void * p1
	int i2
	void * p3
PREINIT:
	short(*func)(double, void *, int, void *);
CODE:
	func   = INT2PTR(short(*)(double, void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2, p3);
OUTPUT:
	RETVAL

float
nci_fdpip( c_func, d0, p1, i2, p3 )
	SV* c_func
	double d0
	void * p1
	int i2
	void * p3
PREINIT:
	float(*func)(double, void *, int, void *);
CODE:
	func   = INT2PTR(float(*)(double, void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2, p3);
OUTPUT:
	RETVAL

char *
nci_tdpip( c_func, d0, p1, i2, p3 )
	SV* c_func
	double d0
	void * p1
	int i2
	void * p3
PREINIT:
	char *(*func)(double, void *, int, void *);
CODE:
	func   = INT2PTR(char *(*)(double, void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2, p3);
OUTPUT:
	RETVAL

int
nci_idpip( c_func, d0, p1, i2, p3 )
	SV* c_func
	double d0
	void * p1
	int i2
	void * p3
PREINIT:
	int(*func)(double, void *, int, void *);
CODE:
	func   = INT2PTR(int(*)(double, void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2, p3);
OUTPUT:
	RETVAL

void *
nci_pspip( c_func, s0, p1, i2, p3 )
	SV* c_func
	short s0
	void * p1
	int i2
	void * p3
PREINIT:
	void *(*func)(short, void *, int, void *);
CODE:
	func   = INT2PTR(void *(*)(short, void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2, p3);
OUTPUT:
	RETVAL

void
nci_vspip( c_func, s0, p1, i2, p3 )
	SV* c_func
	short s0
	void * p1
	int i2
	void * p3
PREINIT:
	void(*func)(short, void *, int, void *);
CODE:
	func   = INT2PTR(void(*)(short, void *, int, void *), SvIV(c_func) );
	(*func)(s0, p1, i2, p3);

double
nci_dspip( c_func, s0, p1, i2, p3 )
	SV* c_func
	short s0
	void * p1
	int i2
	void * p3
PREINIT:
	double(*func)(short, void *, int, void *);
CODE:
	func   = INT2PTR(double(*)(short, void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2, p3);
OUTPUT:
	RETVAL

short
nci_sspip( c_func, s0, p1, i2, p3 )
	SV* c_func
	short s0
	void * p1
	int i2
	void * p3
PREINIT:
	short(*func)(short, void *, int, void *);
CODE:
	func   = INT2PTR(short(*)(short, void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2, p3);
OUTPUT:
	RETVAL

float
nci_fspip( c_func, s0, p1, i2, p3 )
	SV* c_func
	short s0
	void * p1
	int i2
	void * p3
PREINIT:
	float(*func)(short, void *, int, void *);
CODE:
	func   = INT2PTR(float(*)(short, void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2, p3);
OUTPUT:
	RETVAL

char *
nci_tspip( c_func, s0, p1, i2, p3 )
	SV* c_func
	short s0
	void * p1
	int i2
	void * p3
PREINIT:
	char *(*func)(short, void *, int, void *);
CODE:
	func   = INT2PTR(char *(*)(short, void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2, p3);
OUTPUT:
	RETVAL

int
nci_ispip( c_func, s0, p1, i2, p3 )
	SV* c_func
	short s0
	void * p1
	int i2
	void * p3
PREINIT:
	int(*func)(short, void *, int, void *);
CODE:
	func   = INT2PTR(int(*)(short, void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2, p3);
OUTPUT:
	RETVAL

void *
nci_pfpip( c_func, f0, p1, i2, p3 )
	SV* c_func
	float f0
	void * p1
	int i2
	void * p3
PREINIT:
	void *(*func)(float, void *, int, void *);
CODE:
	func   = INT2PTR(void *(*)(float, void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2, p3);
OUTPUT:
	RETVAL

void
nci_vfpip( c_func, f0, p1, i2, p3 )
	SV* c_func
	float f0
	void * p1
	int i2
	void * p3
PREINIT:
	void(*func)(float, void *, int, void *);
CODE:
	func   = INT2PTR(void(*)(float, void *, int, void *), SvIV(c_func) );
	(*func)(f0, p1, i2, p3);

double
nci_dfpip( c_func, f0, p1, i2, p3 )
	SV* c_func
	float f0
	void * p1
	int i2
	void * p3
PREINIT:
	double(*func)(float, void *, int, void *);
CODE:
	func   = INT2PTR(double(*)(float, void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2, p3);
OUTPUT:
	RETVAL

short
nci_sfpip( c_func, f0, p1, i2, p3 )
	SV* c_func
	float f0
	void * p1
	int i2
	void * p3
PREINIT:
	short(*func)(float, void *, int, void *);
CODE:
	func   = INT2PTR(short(*)(float, void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2, p3);
OUTPUT:
	RETVAL

float
nci_ffpip( c_func, f0, p1, i2, p3 )
	SV* c_func
	float f0
	void * p1
	int i2
	void * p3
PREINIT:
	float(*func)(float, void *, int, void *);
CODE:
	func   = INT2PTR(float(*)(float, void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2, p3);
OUTPUT:
	RETVAL

char *
nci_tfpip( c_func, f0, p1, i2, p3 )
	SV* c_func
	float f0
	void * p1
	int i2
	void * p3
PREINIT:
	char *(*func)(float, void *, int, void *);
CODE:
	func   = INT2PTR(char *(*)(float, void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2, p3);
OUTPUT:
	RETVAL

int
nci_ifpip( c_func, f0, p1, i2, p3 )
	SV* c_func
	float f0
	void * p1
	int i2
	void * p3
PREINIT:
	int(*func)(float, void *, int, void *);
CODE:
	func   = INT2PTR(int(*)(float, void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2, p3);
OUTPUT:
	RETVAL

void *
nci_ptpip( c_func, t0, p1, i2, p3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	void * p3
PREINIT:
	void *(*func)(char *, void *, int, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2, p3);
OUTPUT:
	RETVAL

void
nci_vtpip( c_func, t0, p1, i2, p3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	void * p3
PREINIT:
	void(*func)(char *, void *, int, void *);
CODE:
	func   = INT2PTR(void(*)(char *, void *, int, void *), SvIV(c_func) );
	(*func)(t0, p1, i2, p3);

double
nci_dtpip( c_func, t0, p1, i2, p3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	void * p3
PREINIT:
	double(*func)(char *, void *, int, void *);
CODE:
	func   = INT2PTR(double(*)(char *, void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2, p3);
OUTPUT:
	RETVAL

short
nci_stpip( c_func, t0, p1, i2, p3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	void * p3
PREINIT:
	short(*func)(char *, void *, int, void *);
CODE:
	func   = INT2PTR(short(*)(char *, void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2, p3);
OUTPUT:
	RETVAL

float
nci_ftpip( c_func, t0, p1, i2, p3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	void * p3
PREINIT:
	float(*func)(char *, void *, int, void *);
CODE:
	func   = INT2PTR(float(*)(char *, void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2, p3);
OUTPUT:
	RETVAL

char *
nci_ttpip( c_func, t0, p1, i2, p3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	void * p3
PREINIT:
	char *(*func)(char *, void *, int, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2, p3);
OUTPUT:
	RETVAL

int
nci_itpip( c_func, t0, p1, i2, p3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	void * p3
PREINIT:
	int(*func)(char *, void *, int, void *);
CODE:
	func   = INT2PTR(int(*)(char *, void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2, p3);
OUTPUT:
	RETVAL

void *
nci_pipip( c_func, i0, p1, i2, p3 )
	SV* c_func
	int i0
	void * p1
	int i2
	void * p3
PREINIT:
	void *(*func)(int, void *, int, void *);
CODE:
	func   = INT2PTR(void *(*)(int, void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2, p3);
OUTPUT:
	RETVAL

void
nci_vipip( c_func, i0, p1, i2, p3 )
	SV* c_func
	int i0
	void * p1
	int i2
	void * p3
PREINIT:
	void(*func)(int, void *, int, void *);
CODE:
	func   = INT2PTR(void(*)(int, void *, int, void *), SvIV(c_func) );
	(*func)(i0, p1, i2, p3);

double
nci_dipip( c_func, i0, p1, i2, p3 )
	SV* c_func
	int i0
	void * p1
	int i2
	void * p3
PREINIT:
	double(*func)(int, void *, int, void *);
CODE:
	func   = INT2PTR(double(*)(int, void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2, p3);
OUTPUT:
	RETVAL

short
nci_sipip( c_func, i0, p1, i2, p3 )
	SV* c_func
	int i0
	void * p1
	int i2
	void * p3
PREINIT:
	short(*func)(int, void *, int, void *);
CODE:
	func   = INT2PTR(short(*)(int, void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2, p3);
OUTPUT:
	RETVAL

float
nci_fipip( c_func, i0, p1, i2, p3 )
	SV* c_func
	int i0
	void * p1
	int i2
	void * p3
PREINIT:
	float(*func)(int, void *, int, void *);
CODE:
	func   = INT2PTR(float(*)(int, void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2, p3);
OUTPUT:
	RETVAL

char *
nci_tipip( c_func, i0, p1, i2, p3 )
	SV* c_func
	int i0
	void * p1
	int i2
	void * p3
PREINIT:
	char *(*func)(int, void *, int, void *);
CODE:
	func   = INT2PTR(char *(*)(int, void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2, p3);
OUTPUT:
	RETVAL

int
nci_iipip( c_func, i0, p1, i2, p3 )
	SV* c_func
	int i0
	void * p1
	int i2
	void * p3
PREINIT:
	int(*func)(int, void *, int, void *);
CODE:
	func   = INT2PTR(int(*)(int, void *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2, p3);
OUTPUT:
	RETVAL

void *
nci_ppdip( c_func, p0, d1, i2, p3 )
	SV* c_func
	void * p0
	double d1
	int i2
	void * p3
PREINIT:
	void *(*func)(void *, double, int, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2, p3);
OUTPUT:
	RETVAL

void
nci_vpdip( c_func, p0, d1, i2, p3 )
	SV* c_func
	void * p0
	double d1
	int i2
	void * p3
PREINIT:
	void(*func)(void *, double, int, void *);
CODE:
	func   = INT2PTR(void(*)(void *, double, int, void *), SvIV(c_func) );
	(*func)(p0, d1, i2, p3);

double
nci_dpdip( c_func, p0, d1, i2, p3 )
	SV* c_func
	void * p0
	double d1
	int i2
	void * p3
PREINIT:
	double(*func)(void *, double, int, void *);
CODE:
	func   = INT2PTR(double(*)(void *, double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2, p3);
OUTPUT:
	RETVAL

short
nci_spdip( c_func, p0, d1, i2, p3 )
	SV* c_func
	void * p0
	double d1
	int i2
	void * p3
PREINIT:
	short(*func)(void *, double, int, void *);
CODE:
	func   = INT2PTR(short(*)(void *, double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2, p3);
OUTPUT:
	RETVAL

float
nci_fpdip( c_func, p0, d1, i2, p3 )
	SV* c_func
	void * p0
	double d1
	int i2
	void * p3
PREINIT:
	float(*func)(void *, double, int, void *);
CODE:
	func   = INT2PTR(float(*)(void *, double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2, p3);
OUTPUT:
	RETVAL

char *
nci_tpdip( c_func, p0, d1, i2, p3 )
	SV* c_func
	void * p0
	double d1
	int i2
	void * p3
PREINIT:
	char *(*func)(void *, double, int, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2, p3);
OUTPUT:
	RETVAL

int
nci_ipdip( c_func, p0, d1, i2, p3 )
	SV* c_func
	void * p0
	double d1
	int i2
	void * p3
PREINIT:
	int(*func)(void *, double, int, void *);
CODE:
	func   = INT2PTR(int(*)(void *, double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2, p3);
OUTPUT:
	RETVAL

void *
nci_pvdip( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvdip( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvdip( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svdip( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvdip( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvdip( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivdip( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pddip( c_func, d0, d1, i2, p3 )
	SV* c_func
	double d0
	double d1
	int i2
	void * p3
PREINIT:
	void *(*func)(double, double, int, void *);
CODE:
	func   = INT2PTR(void *(*)(double, double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2, p3);
OUTPUT:
	RETVAL

void
nci_vddip( c_func, d0, d1, i2, p3 )
	SV* c_func
	double d0
	double d1
	int i2
	void * p3
PREINIT:
	void(*func)(double, double, int, void *);
CODE:
	func   = INT2PTR(void(*)(double, double, int, void *), SvIV(c_func) );
	(*func)(d0, d1, i2, p3);

double
nci_dddip( c_func, d0, d1, i2, p3 )
	SV* c_func
	double d0
	double d1
	int i2
	void * p3
PREINIT:
	double(*func)(double, double, int, void *);
CODE:
	func   = INT2PTR(double(*)(double, double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2, p3);
OUTPUT:
	RETVAL

short
nci_sddip( c_func, d0, d1, i2, p3 )
	SV* c_func
	double d0
	double d1
	int i2
	void * p3
PREINIT:
	short(*func)(double, double, int, void *);
CODE:
	func   = INT2PTR(short(*)(double, double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2, p3);
OUTPUT:
	RETVAL

float
nci_fddip( c_func, d0, d1, i2, p3 )
	SV* c_func
	double d0
	double d1
	int i2
	void * p3
PREINIT:
	float(*func)(double, double, int, void *);
CODE:
	func   = INT2PTR(float(*)(double, double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2, p3);
OUTPUT:
	RETVAL

char *
nci_tddip( c_func, d0, d1, i2, p3 )
	SV* c_func
	double d0
	double d1
	int i2
	void * p3
PREINIT:
	char *(*func)(double, double, int, void *);
CODE:
	func   = INT2PTR(char *(*)(double, double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2, p3);
OUTPUT:
	RETVAL

int
nci_iddip( c_func, d0, d1, i2, p3 )
	SV* c_func
	double d0
	double d1
	int i2
	void * p3
PREINIT:
	int(*func)(double, double, int, void *);
CODE:
	func   = INT2PTR(int(*)(double, double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2, p3);
OUTPUT:
	RETVAL

void *
nci_psdip( c_func, s0, d1, i2, p3 )
	SV* c_func
	short s0
	double d1
	int i2
	void * p3
PREINIT:
	void *(*func)(short, double, int, void *);
CODE:
	func   = INT2PTR(void *(*)(short, double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2, p3);
OUTPUT:
	RETVAL

void
nci_vsdip( c_func, s0, d1, i2, p3 )
	SV* c_func
	short s0
	double d1
	int i2
	void * p3
PREINIT:
	void(*func)(short, double, int, void *);
CODE:
	func   = INT2PTR(void(*)(short, double, int, void *), SvIV(c_func) );
	(*func)(s0, d1, i2, p3);

double
nci_dsdip( c_func, s0, d1, i2, p3 )
	SV* c_func
	short s0
	double d1
	int i2
	void * p3
PREINIT:
	double(*func)(short, double, int, void *);
CODE:
	func   = INT2PTR(double(*)(short, double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2, p3);
OUTPUT:
	RETVAL

short
nci_ssdip( c_func, s0, d1, i2, p3 )
	SV* c_func
	short s0
	double d1
	int i2
	void * p3
PREINIT:
	short(*func)(short, double, int, void *);
CODE:
	func   = INT2PTR(short(*)(short, double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2, p3);
OUTPUT:
	RETVAL

float
nci_fsdip( c_func, s0, d1, i2, p3 )
	SV* c_func
	short s0
	double d1
	int i2
	void * p3
PREINIT:
	float(*func)(short, double, int, void *);
CODE:
	func   = INT2PTR(float(*)(short, double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2, p3);
OUTPUT:
	RETVAL

char *
nci_tsdip( c_func, s0, d1, i2, p3 )
	SV* c_func
	short s0
	double d1
	int i2
	void * p3
PREINIT:
	char *(*func)(short, double, int, void *);
CODE:
	func   = INT2PTR(char *(*)(short, double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2, p3);
OUTPUT:
	RETVAL

int
nci_isdip( c_func, s0, d1, i2, p3 )
	SV* c_func
	short s0
	double d1
	int i2
	void * p3
PREINIT:
	int(*func)(short, double, int, void *);
CODE:
	func   = INT2PTR(int(*)(short, double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2, p3);
OUTPUT:
	RETVAL

void *
nci_pfdip( c_func, f0, d1, i2, p3 )
	SV* c_func
	float f0
	double d1
	int i2
	void * p3
PREINIT:
	void *(*func)(float, double, int, void *);
CODE:
	func   = INT2PTR(void *(*)(float, double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2, p3);
OUTPUT:
	RETVAL

void
nci_vfdip( c_func, f0, d1, i2, p3 )
	SV* c_func
	float f0
	double d1
	int i2
	void * p3
PREINIT:
	void(*func)(float, double, int, void *);
CODE:
	func   = INT2PTR(void(*)(float, double, int, void *), SvIV(c_func) );
	(*func)(f0, d1, i2, p3);

double
nci_dfdip( c_func, f0, d1, i2, p3 )
	SV* c_func
	float f0
	double d1
	int i2
	void * p3
PREINIT:
	double(*func)(float, double, int, void *);
CODE:
	func   = INT2PTR(double(*)(float, double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2, p3);
OUTPUT:
	RETVAL

short
nci_sfdip( c_func, f0, d1, i2, p3 )
	SV* c_func
	float f0
	double d1
	int i2
	void * p3
PREINIT:
	short(*func)(float, double, int, void *);
CODE:
	func   = INT2PTR(short(*)(float, double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2, p3);
OUTPUT:
	RETVAL

float
nci_ffdip( c_func, f0, d1, i2, p3 )
	SV* c_func
	float f0
	double d1
	int i2
	void * p3
PREINIT:
	float(*func)(float, double, int, void *);
CODE:
	func   = INT2PTR(float(*)(float, double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2, p3);
OUTPUT:
	RETVAL

char *
nci_tfdip( c_func, f0, d1, i2, p3 )
	SV* c_func
	float f0
	double d1
	int i2
	void * p3
PREINIT:
	char *(*func)(float, double, int, void *);
CODE:
	func   = INT2PTR(char *(*)(float, double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2, p3);
OUTPUT:
	RETVAL

int
nci_ifdip( c_func, f0, d1, i2, p3 )
	SV* c_func
	float f0
	double d1
	int i2
	void * p3
PREINIT:
	int(*func)(float, double, int, void *);
CODE:
	func   = INT2PTR(int(*)(float, double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2, p3);
OUTPUT:
	RETVAL

void *
nci_ptdip( c_func, t0, d1, i2, p3 )
	SV* c_func
	char * t0
	double d1
	int i2
	void * p3
PREINIT:
	void *(*func)(char *, double, int, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2, p3);
OUTPUT:
	RETVAL

void
nci_vtdip( c_func, t0, d1, i2, p3 )
	SV* c_func
	char * t0
	double d1
	int i2
	void * p3
PREINIT:
	void(*func)(char *, double, int, void *);
CODE:
	func   = INT2PTR(void(*)(char *, double, int, void *), SvIV(c_func) );
	(*func)(t0, d1, i2, p3);

double
nci_dtdip( c_func, t0, d1, i2, p3 )
	SV* c_func
	char * t0
	double d1
	int i2
	void * p3
PREINIT:
	double(*func)(char *, double, int, void *);
CODE:
	func   = INT2PTR(double(*)(char *, double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2, p3);
OUTPUT:
	RETVAL

short
nci_stdip( c_func, t0, d1, i2, p3 )
	SV* c_func
	char * t0
	double d1
	int i2
	void * p3
PREINIT:
	short(*func)(char *, double, int, void *);
CODE:
	func   = INT2PTR(short(*)(char *, double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2, p3);
OUTPUT:
	RETVAL

float
nci_ftdip( c_func, t0, d1, i2, p3 )
	SV* c_func
	char * t0
	double d1
	int i2
	void * p3
PREINIT:
	float(*func)(char *, double, int, void *);
CODE:
	func   = INT2PTR(float(*)(char *, double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2, p3);
OUTPUT:
	RETVAL

char *
nci_ttdip( c_func, t0, d1, i2, p3 )
	SV* c_func
	char * t0
	double d1
	int i2
	void * p3
PREINIT:
	char *(*func)(char *, double, int, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2, p3);
OUTPUT:
	RETVAL

int
nci_itdip( c_func, t0, d1, i2, p3 )
	SV* c_func
	char * t0
	double d1
	int i2
	void * p3
PREINIT:
	int(*func)(char *, double, int, void *);
CODE:
	func   = INT2PTR(int(*)(char *, double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2, p3);
OUTPUT:
	RETVAL

void *
nci_pidip( c_func, i0, d1, i2, p3 )
	SV* c_func
	int i0
	double d1
	int i2
	void * p3
PREINIT:
	void *(*func)(int, double, int, void *);
CODE:
	func   = INT2PTR(void *(*)(int, double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2, p3);
OUTPUT:
	RETVAL

void
nci_vidip( c_func, i0, d1, i2, p3 )
	SV* c_func
	int i0
	double d1
	int i2
	void * p3
PREINIT:
	void(*func)(int, double, int, void *);
CODE:
	func   = INT2PTR(void(*)(int, double, int, void *), SvIV(c_func) );
	(*func)(i0, d1, i2, p3);

double
nci_didip( c_func, i0, d1, i2, p3 )
	SV* c_func
	int i0
	double d1
	int i2
	void * p3
PREINIT:
	double(*func)(int, double, int, void *);
CODE:
	func   = INT2PTR(double(*)(int, double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2, p3);
OUTPUT:
	RETVAL

short
nci_sidip( c_func, i0, d1, i2, p3 )
	SV* c_func
	int i0
	double d1
	int i2
	void * p3
PREINIT:
	short(*func)(int, double, int, void *);
CODE:
	func   = INT2PTR(short(*)(int, double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2, p3);
OUTPUT:
	RETVAL

float
nci_fidip( c_func, i0, d1, i2, p3 )
	SV* c_func
	int i0
	double d1
	int i2
	void * p3
PREINIT:
	float(*func)(int, double, int, void *);
CODE:
	func   = INT2PTR(float(*)(int, double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2, p3);
OUTPUT:
	RETVAL

char *
nci_tidip( c_func, i0, d1, i2, p3 )
	SV* c_func
	int i0
	double d1
	int i2
	void * p3
PREINIT:
	char *(*func)(int, double, int, void *);
CODE:
	func   = INT2PTR(char *(*)(int, double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2, p3);
OUTPUT:
	RETVAL

int
nci_iidip( c_func, i0, d1, i2, p3 )
	SV* c_func
	int i0
	double d1
	int i2
	void * p3
PREINIT:
	int(*func)(int, double, int, void *);
CODE:
	func   = INT2PTR(int(*)(int, double, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2, p3);
OUTPUT:
	RETVAL

void *
nci_ppsip( c_func, p0, s1, i2, p3 )
	SV* c_func
	void * p0
	short s1
	int i2
	void * p3
PREINIT:
	void *(*func)(void *, short, int, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2, p3);
OUTPUT:
	RETVAL

void
nci_vpsip( c_func, p0, s1, i2, p3 )
	SV* c_func
	void * p0
	short s1
	int i2
	void * p3
PREINIT:
	void(*func)(void *, short, int, void *);
CODE:
	func   = INT2PTR(void(*)(void *, short, int, void *), SvIV(c_func) );
	(*func)(p0, s1, i2, p3);

double
nci_dpsip( c_func, p0, s1, i2, p3 )
	SV* c_func
	void * p0
	short s1
	int i2
	void * p3
PREINIT:
	double(*func)(void *, short, int, void *);
CODE:
	func   = INT2PTR(double(*)(void *, short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2, p3);
OUTPUT:
	RETVAL

short
nci_spsip( c_func, p0, s1, i2, p3 )
	SV* c_func
	void * p0
	short s1
	int i2
	void * p3
PREINIT:
	short(*func)(void *, short, int, void *);
CODE:
	func   = INT2PTR(short(*)(void *, short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2, p3);
OUTPUT:
	RETVAL

float
nci_fpsip( c_func, p0, s1, i2, p3 )
	SV* c_func
	void * p0
	short s1
	int i2
	void * p3
PREINIT:
	float(*func)(void *, short, int, void *);
CODE:
	func   = INT2PTR(float(*)(void *, short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2, p3);
OUTPUT:
	RETVAL

char *
nci_tpsip( c_func, p0, s1, i2, p3 )
	SV* c_func
	void * p0
	short s1
	int i2
	void * p3
PREINIT:
	char *(*func)(void *, short, int, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2, p3);
OUTPUT:
	RETVAL

int
nci_ipsip( c_func, p0, s1, i2, p3 )
	SV* c_func
	void * p0
	short s1
	int i2
	void * p3
PREINIT:
	int(*func)(void *, short, int, void *);
CODE:
	func   = INT2PTR(int(*)(void *, short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2, p3);
OUTPUT:
	RETVAL

void *
nci_pvsip( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvsip( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvsip( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svsip( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvsip( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvsip( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivsip( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdsip( c_func, d0, s1, i2, p3 )
	SV* c_func
	double d0
	short s1
	int i2
	void * p3
PREINIT:
	void *(*func)(double, short, int, void *);
CODE:
	func   = INT2PTR(void *(*)(double, short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2, p3);
OUTPUT:
	RETVAL

void
nci_vdsip( c_func, d0, s1, i2, p3 )
	SV* c_func
	double d0
	short s1
	int i2
	void * p3
PREINIT:
	void(*func)(double, short, int, void *);
CODE:
	func   = INT2PTR(void(*)(double, short, int, void *), SvIV(c_func) );
	(*func)(d0, s1, i2, p3);

double
nci_ddsip( c_func, d0, s1, i2, p3 )
	SV* c_func
	double d0
	short s1
	int i2
	void * p3
PREINIT:
	double(*func)(double, short, int, void *);
CODE:
	func   = INT2PTR(double(*)(double, short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2, p3);
OUTPUT:
	RETVAL

short
nci_sdsip( c_func, d0, s1, i2, p3 )
	SV* c_func
	double d0
	short s1
	int i2
	void * p3
PREINIT:
	short(*func)(double, short, int, void *);
CODE:
	func   = INT2PTR(short(*)(double, short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2, p3);
OUTPUT:
	RETVAL

float
nci_fdsip( c_func, d0, s1, i2, p3 )
	SV* c_func
	double d0
	short s1
	int i2
	void * p3
PREINIT:
	float(*func)(double, short, int, void *);
CODE:
	func   = INT2PTR(float(*)(double, short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2, p3);
OUTPUT:
	RETVAL

char *
nci_tdsip( c_func, d0, s1, i2, p3 )
	SV* c_func
	double d0
	short s1
	int i2
	void * p3
PREINIT:
	char *(*func)(double, short, int, void *);
CODE:
	func   = INT2PTR(char *(*)(double, short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2, p3);
OUTPUT:
	RETVAL

int
nci_idsip( c_func, d0, s1, i2, p3 )
	SV* c_func
	double d0
	short s1
	int i2
	void * p3
PREINIT:
	int(*func)(double, short, int, void *);
CODE:
	func   = INT2PTR(int(*)(double, short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2, p3);
OUTPUT:
	RETVAL

void *
nci_pssip( c_func, s0, s1, i2, p3 )
	SV* c_func
	short s0
	short s1
	int i2
	void * p3
PREINIT:
	void *(*func)(short, short, int, void *);
CODE:
	func   = INT2PTR(void *(*)(short, short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2, p3);
OUTPUT:
	RETVAL

void
nci_vssip( c_func, s0, s1, i2, p3 )
	SV* c_func
	short s0
	short s1
	int i2
	void * p3
PREINIT:
	void(*func)(short, short, int, void *);
CODE:
	func   = INT2PTR(void(*)(short, short, int, void *), SvIV(c_func) );
	(*func)(s0, s1, i2, p3);

double
nci_dssip( c_func, s0, s1, i2, p3 )
	SV* c_func
	short s0
	short s1
	int i2
	void * p3
PREINIT:
	double(*func)(short, short, int, void *);
CODE:
	func   = INT2PTR(double(*)(short, short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2, p3);
OUTPUT:
	RETVAL

short
nci_sssip( c_func, s0, s1, i2, p3 )
	SV* c_func
	short s0
	short s1
	int i2
	void * p3
PREINIT:
	short(*func)(short, short, int, void *);
CODE:
	func   = INT2PTR(short(*)(short, short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2, p3);
OUTPUT:
	RETVAL

float
nci_fssip( c_func, s0, s1, i2, p3 )
	SV* c_func
	short s0
	short s1
	int i2
	void * p3
PREINIT:
	float(*func)(short, short, int, void *);
CODE:
	func   = INT2PTR(float(*)(short, short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2, p3);
OUTPUT:
	RETVAL

char *
nci_tssip( c_func, s0, s1, i2, p3 )
	SV* c_func
	short s0
	short s1
	int i2
	void * p3
PREINIT:
	char *(*func)(short, short, int, void *);
CODE:
	func   = INT2PTR(char *(*)(short, short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2, p3);
OUTPUT:
	RETVAL

int
nci_issip( c_func, s0, s1, i2, p3 )
	SV* c_func
	short s0
	short s1
	int i2
	void * p3
PREINIT:
	int(*func)(short, short, int, void *);
CODE:
	func   = INT2PTR(int(*)(short, short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2, p3);
OUTPUT:
	RETVAL

void *
nci_pfsip( c_func, f0, s1, i2, p3 )
	SV* c_func
	float f0
	short s1
	int i2
	void * p3
PREINIT:
	void *(*func)(float, short, int, void *);
CODE:
	func   = INT2PTR(void *(*)(float, short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2, p3);
OUTPUT:
	RETVAL

void
nci_vfsip( c_func, f0, s1, i2, p3 )
	SV* c_func
	float f0
	short s1
	int i2
	void * p3
PREINIT:
	void(*func)(float, short, int, void *);
CODE:
	func   = INT2PTR(void(*)(float, short, int, void *), SvIV(c_func) );
	(*func)(f0, s1, i2, p3);

double
nci_dfsip( c_func, f0, s1, i2, p3 )
	SV* c_func
	float f0
	short s1
	int i2
	void * p3
PREINIT:
	double(*func)(float, short, int, void *);
CODE:
	func   = INT2PTR(double(*)(float, short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2, p3);
OUTPUT:
	RETVAL

short
nci_sfsip( c_func, f0, s1, i2, p3 )
	SV* c_func
	float f0
	short s1
	int i2
	void * p3
PREINIT:
	short(*func)(float, short, int, void *);
CODE:
	func   = INT2PTR(short(*)(float, short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2, p3);
OUTPUT:
	RETVAL

float
nci_ffsip( c_func, f0, s1, i2, p3 )
	SV* c_func
	float f0
	short s1
	int i2
	void * p3
PREINIT:
	float(*func)(float, short, int, void *);
CODE:
	func   = INT2PTR(float(*)(float, short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2, p3);
OUTPUT:
	RETVAL

char *
nci_tfsip( c_func, f0, s1, i2, p3 )
	SV* c_func
	float f0
	short s1
	int i2
	void * p3
PREINIT:
	char *(*func)(float, short, int, void *);
CODE:
	func   = INT2PTR(char *(*)(float, short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2, p3);
OUTPUT:
	RETVAL

int
nci_ifsip( c_func, f0, s1, i2, p3 )
	SV* c_func
	float f0
	short s1
	int i2
	void * p3
PREINIT:
	int(*func)(float, short, int, void *);
CODE:
	func   = INT2PTR(int(*)(float, short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2, p3);
OUTPUT:
	RETVAL

void *
nci_ptsip( c_func, t0, s1, i2, p3 )
	SV* c_func
	char * t0
	short s1
	int i2
	void * p3
PREINIT:
	void *(*func)(char *, short, int, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2, p3);
OUTPUT:
	RETVAL

void
nci_vtsip( c_func, t0, s1, i2, p3 )
	SV* c_func
	char * t0
	short s1
	int i2
	void * p3
PREINIT:
	void(*func)(char *, short, int, void *);
CODE:
	func   = INT2PTR(void(*)(char *, short, int, void *), SvIV(c_func) );
	(*func)(t0, s1, i2, p3);

double
nci_dtsip( c_func, t0, s1, i2, p3 )
	SV* c_func
	char * t0
	short s1
	int i2
	void * p3
PREINIT:
	double(*func)(char *, short, int, void *);
CODE:
	func   = INT2PTR(double(*)(char *, short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2, p3);
OUTPUT:
	RETVAL

short
nci_stsip( c_func, t0, s1, i2, p3 )
	SV* c_func
	char * t0
	short s1
	int i2
	void * p3
PREINIT:
	short(*func)(char *, short, int, void *);
CODE:
	func   = INT2PTR(short(*)(char *, short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2, p3);
OUTPUT:
	RETVAL

float
nci_ftsip( c_func, t0, s1, i2, p3 )
	SV* c_func
	char * t0
	short s1
	int i2
	void * p3
PREINIT:
	float(*func)(char *, short, int, void *);
CODE:
	func   = INT2PTR(float(*)(char *, short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2, p3);
OUTPUT:
	RETVAL

char *
nci_ttsip( c_func, t0, s1, i2, p3 )
	SV* c_func
	char * t0
	short s1
	int i2
	void * p3
PREINIT:
	char *(*func)(char *, short, int, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2, p3);
OUTPUT:
	RETVAL

int
nci_itsip( c_func, t0, s1, i2, p3 )
	SV* c_func
	char * t0
	short s1
	int i2
	void * p3
PREINIT:
	int(*func)(char *, short, int, void *);
CODE:
	func   = INT2PTR(int(*)(char *, short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2, p3);
OUTPUT:
	RETVAL

void *
nci_pisip( c_func, i0, s1, i2, p3 )
	SV* c_func
	int i0
	short s1
	int i2
	void * p3
PREINIT:
	void *(*func)(int, short, int, void *);
CODE:
	func   = INT2PTR(void *(*)(int, short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2, p3);
OUTPUT:
	RETVAL

void
nci_visip( c_func, i0, s1, i2, p3 )
	SV* c_func
	int i0
	short s1
	int i2
	void * p3
PREINIT:
	void(*func)(int, short, int, void *);
CODE:
	func   = INT2PTR(void(*)(int, short, int, void *), SvIV(c_func) );
	(*func)(i0, s1, i2, p3);

double
nci_disip( c_func, i0, s1, i2, p3 )
	SV* c_func
	int i0
	short s1
	int i2
	void * p3
PREINIT:
	double(*func)(int, short, int, void *);
CODE:
	func   = INT2PTR(double(*)(int, short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2, p3);
OUTPUT:
	RETVAL

short
nci_sisip( c_func, i0, s1, i2, p3 )
	SV* c_func
	int i0
	short s1
	int i2
	void * p3
PREINIT:
	short(*func)(int, short, int, void *);
CODE:
	func   = INT2PTR(short(*)(int, short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2, p3);
OUTPUT:
	RETVAL

float
nci_fisip( c_func, i0, s1, i2, p3 )
	SV* c_func
	int i0
	short s1
	int i2
	void * p3
PREINIT:
	float(*func)(int, short, int, void *);
CODE:
	func   = INT2PTR(float(*)(int, short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2, p3);
OUTPUT:
	RETVAL

char *
nci_tisip( c_func, i0, s1, i2, p3 )
	SV* c_func
	int i0
	short s1
	int i2
	void * p3
PREINIT:
	char *(*func)(int, short, int, void *);
CODE:
	func   = INT2PTR(char *(*)(int, short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2, p3);
OUTPUT:
	RETVAL

int
nci_iisip( c_func, i0, s1, i2, p3 )
	SV* c_func
	int i0
	short s1
	int i2
	void * p3
PREINIT:
	int(*func)(int, short, int, void *);
CODE:
	func   = INT2PTR(int(*)(int, short, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2, p3);
OUTPUT:
	RETVAL

void *
nci_ppfip( c_func, p0, f1, i2, p3 )
	SV* c_func
	void * p0
	float f1
	int i2
	void * p3
PREINIT:
	void *(*func)(void *, float, int, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2, p3);
OUTPUT:
	RETVAL

void
nci_vpfip( c_func, p0, f1, i2, p3 )
	SV* c_func
	void * p0
	float f1
	int i2
	void * p3
PREINIT:
	void(*func)(void *, float, int, void *);
CODE:
	func   = INT2PTR(void(*)(void *, float, int, void *), SvIV(c_func) );
	(*func)(p0, f1, i2, p3);

double
nci_dpfip( c_func, p0, f1, i2, p3 )
	SV* c_func
	void * p0
	float f1
	int i2
	void * p3
PREINIT:
	double(*func)(void *, float, int, void *);
CODE:
	func   = INT2PTR(double(*)(void *, float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2, p3);
OUTPUT:
	RETVAL

short
nci_spfip( c_func, p0, f1, i2, p3 )
	SV* c_func
	void * p0
	float f1
	int i2
	void * p3
PREINIT:
	short(*func)(void *, float, int, void *);
CODE:
	func   = INT2PTR(short(*)(void *, float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2, p3);
OUTPUT:
	RETVAL

float
nci_fpfip( c_func, p0, f1, i2, p3 )
	SV* c_func
	void * p0
	float f1
	int i2
	void * p3
PREINIT:
	float(*func)(void *, float, int, void *);
CODE:
	func   = INT2PTR(float(*)(void *, float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2, p3);
OUTPUT:
	RETVAL

char *
nci_tpfip( c_func, p0, f1, i2, p3 )
	SV* c_func
	void * p0
	float f1
	int i2
	void * p3
PREINIT:
	char *(*func)(void *, float, int, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2, p3);
OUTPUT:
	RETVAL

int
nci_ipfip( c_func, p0, f1, i2, p3 )
	SV* c_func
	void * p0
	float f1
	int i2
	void * p3
PREINIT:
	int(*func)(void *, float, int, void *);
CODE:
	func   = INT2PTR(int(*)(void *, float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2, p3);
OUTPUT:
	RETVAL

void *
nci_pvfip( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvfip( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvfip( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svfip( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvfip( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvfip( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivfip( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdfip( c_func, d0, f1, i2, p3 )
	SV* c_func
	double d0
	float f1
	int i2
	void * p3
PREINIT:
	void *(*func)(double, float, int, void *);
CODE:
	func   = INT2PTR(void *(*)(double, float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2, p3);
OUTPUT:
	RETVAL

void
nci_vdfip( c_func, d0, f1, i2, p3 )
	SV* c_func
	double d0
	float f1
	int i2
	void * p3
PREINIT:
	void(*func)(double, float, int, void *);
CODE:
	func   = INT2PTR(void(*)(double, float, int, void *), SvIV(c_func) );
	(*func)(d0, f1, i2, p3);

double
nci_ddfip( c_func, d0, f1, i2, p3 )
	SV* c_func
	double d0
	float f1
	int i2
	void * p3
PREINIT:
	double(*func)(double, float, int, void *);
CODE:
	func   = INT2PTR(double(*)(double, float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2, p3);
OUTPUT:
	RETVAL

short
nci_sdfip( c_func, d0, f1, i2, p3 )
	SV* c_func
	double d0
	float f1
	int i2
	void * p3
PREINIT:
	short(*func)(double, float, int, void *);
CODE:
	func   = INT2PTR(short(*)(double, float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2, p3);
OUTPUT:
	RETVAL

float
nci_fdfip( c_func, d0, f1, i2, p3 )
	SV* c_func
	double d0
	float f1
	int i2
	void * p3
PREINIT:
	float(*func)(double, float, int, void *);
CODE:
	func   = INT2PTR(float(*)(double, float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2, p3);
OUTPUT:
	RETVAL

char *
nci_tdfip( c_func, d0, f1, i2, p3 )
	SV* c_func
	double d0
	float f1
	int i2
	void * p3
PREINIT:
	char *(*func)(double, float, int, void *);
CODE:
	func   = INT2PTR(char *(*)(double, float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2, p3);
OUTPUT:
	RETVAL

int
nci_idfip( c_func, d0, f1, i2, p3 )
	SV* c_func
	double d0
	float f1
	int i2
	void * p3
PREINIT:
	int(*func)(double, float, int, void *);
CODE:
	func   = INT2PTR(int(*)(double, float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2, p3);
OUTPUT:
	RETVAL

void *
nci_psfip( c_func, s0, f1, i2, p3 )
	SV* c_func
	short s0
	float f1
	int i2
	void * p3
PREINIT:
	void *(*func)(short, float, int, void *);
CODE:
	func   = INT2PTR(void *(*)(short, float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2, p3);
OUTPUT:
	RETVAL

void
nci_vsfip( c_func, s0, f1, i2, p3 )
	SV* c_func
	short s0
	float f1
	int i2
	void * p3
PREINIT:
	void(*func)(short, float, int, void *);
CODE:
	func   = INT2PTR(void(*)(short, float, int, void *), SvIV(c_func) );
	(*func)(s0, f1, i2, p3);

double
nci_dsfip( c_func, s0, f1, i2, p3 )
	SV* c_func
	short s0
	float f1
	int i2
	void * p3
PREINIT:
	double(*func)(short, float, int, void *);
CODE:
	func   = INT2PTR(double(*)(short, float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2, p3);
OUTPUT:
	RETVAL

short
nci_ssfip( c_func, s0, f1, i2, p3 )
	SV* c_func
	short s0
	float f1
	int i2
	void * p3
PREINIT:
	short(*func)(short, float, int, void *);
CODE:
	func   = INT2PTR(short(*)(short, float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2, p3);
OUTPUT:
	RETVAL

float
nci_fsfip( c_func, s0, f1, i2, p3 )
	SV* c_func
	short s0
	float f1
	int i2
	void * p3
PREINIT:
	float(*func)(short, float, int, void *);
CODE:
	func   = INT2PTR(float(*)(short, float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2, p3);
OUTPUT:
	RETVAL

char *
nci_tsfip( c_func, s0, f1, i2, p3 )
	SV* c_func
	short s0
	float f1
	int i2
	void * p3
PREINIT:
	char *(*func)(short, float, int, void *);
CODE:
	func   = INT2PTR(char *(*)(short, float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2, p3);
OUTPUT:
	RETVAL

int
nci_isfip( c_func, s0, f1, i2, p3 )
	SV* c_func
	short s0
	float f1
	int i2
	void * p3
PREINIT:
	int(*func)(short, float, int, void *);
CODE:
	func   = INT2PTR(int(*)(short, float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2, p3);
OUTPUT:
	RETVAL

void *
nci_pffip( c_func, f0, f1, i2, p3 )
	SV* c_func
	float f0
	float f1
	int i2
	void * p3
PREINIT:
	void *(*func)(float, float, int, void *);
CODE:
	func   = INT2PTR(void *(*)(float, float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2, p3);
OUTPUT:
	RETVAL

void
nci_vffip( c_func, f0, f1, i2, p3 )
	SV* c_func
	float f0
	float f1
	int i2
	void * p3
PREINIT:
	void(*func)(float, float, int, void *);
CODE:
	func   = INT2PTR(void(*)(float, float, int, void *), SvIV(c_func) );
	(*func)(f0, f1, i2, p3);

double
nci_dffip( c_func, f0, f1, i2, p3 )
	SV* c_func
	float f0
	float f1
	int i2
	void * p3
PREINIT:
	double(*func)(float, float, int, void *);
CODE:
	func   = INT2PTR(double(*)(float, float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2, p3);
OUTPUT:
	RETVAL

short
nci_sffip( c_func, f0, f1, i2, p3 )
	SV* c_func
	float f0
	float f1
	int i2
	void * p3
PREINIT:
	short(*func)(float, float, int, void *);
CODE:
	func   = INT2PTR(short(*)(float, float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2, p3);
OUTPUT:
	RETVAL

float
nci_fffip( c_func, f0, f1, i2, p3 )
	SV* c_func
	float f0
	float f1
	int i2
	void * p3
PREINIT:
	float(*func)(float, float, int, void *);
CODE:
	func   = INT2PTR(float(*)(float, float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2, p3);
OUTPUT:
	RETVAL

char *
nci_tffip( c_func, f0, f1, i2, p3 )
	SV* c_func
	float f0
	float f1
	int i2
	void * p3
PREINIT:
	char *(*func)(float, float, int, void *);
CODE:
	func   = INT2PTR(char *(*)(float, float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2, p3);
OUTPUT:
	RETVAL

int
nci_iffip( c_func, f0, f1, i2, p3 )
	SV* c_func
	float f0
	float f1
	int i2
	void * p3
PREINIT:
	int(*func)(float, float, int, void *);
CODE:
	func   = INT2PTR(int(*)(float, float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2, p3);
OUTPUT:
	RETVAL

void *
nci_ptfip( c_func, t0, f1, i2, p3 )
	SV* c_func
	char * t0
	float f1
	int i2
	void * p3
PREINIT:
	void *(*func)(char *, float, int, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2, p3);
OUTPUT:
	RETVAL

void
nci_vtfip( c_func, t0, f1, i2, p3 )
	SV* c_func
	char * t0
	float f1
	int i2
	void * p3
PREINIT:
	void(*func)(char *, float, int, void *);
CODE:
	func   = INT2PTR(void(*)(char *, float, int, void *), SvIV(c_func) );
	(*func)(t0, f1, i2, p3);

double
nci_dtfip( c_func, t0, f1, i2, p3 )
	SV* c_func
	char * t0
	float f1
	int i2
	void * p3
PREINIT:
	double(*func)(char *, float, int, void *);
CODE:
	func   = INT2PTR(double(*)(char *, float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2, p3);
OUTPUT:
	RETVAL

short
nci_stfip( c_func, t0, f1, i2, p3 )
	SV* c_func
	char * t0
	float f1
	int i2
	void * p3
PREINIT:
	short(*func)(char *, float, int, void *);
CODE:
	func   = INT2PTR(short(*)(char *, float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2, p3);
OUTPUT:
	RETVAL

float
nci_ftfip( c_func, t0, f1, i2, p3 )
	SV* c_func
	char * t0
	float f1
	int i2
	void * p3
PREINIT:
	float(*func)(char *, float, int, void *);
CODE:
	func   = INT2PTR(float(*)(char *, float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2, p3);
OUTPUT:
	RETVAL

char *
nci_ttfip( c_func, t0, f1, i2, p3 )
	SV* c_func
	char * t0
	float f1
	int i2
	void * p3
PREINIT:
	char *(*func)(char *, float, int, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2, p3);
OUTPUT:
	RETVAL

int
nci_itfip( c_func, t0, f1, i2, p3 )
	SV* c_func
	char * t0
	float f1
	int i2
	void * p3
PREINIT:
	int(*func)(char *, float, int, void *);
CODE:
	func   = INT2PTR(int(*)(char *, float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2, p3);
OUTPUT:
	RETVAL

void *
nci_pifip( c_func, i0, f1, i2, p3 )
	SV* c_func
	int i0
	float f1
	int i2
	void * p3
PREINIT:
	void *(*func)(int, float, int, void *);
CODE:
	func   = INT2PTR(void *(*)(int, float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2, p3);
OUTPUT:
	RETVAL

void
nci_vifip( c_func, i0, f1, i2, p3 )
	SV* c_func
	int i0
	float f1
	int i2
	void * p3
PREINIT:
	void(*func)(int, float, int, void *);
CODE:
	func   = INT2PTR(void(*)(int, float, int, void *), SvIV(c_func) );
	(*func)(i0, f1, i2, p3);

double
nci_difip( c_func, i0, f1, i2, p3 )
	SV* c_func
	int i0
	float f1
	int i2
	void * p3
PREINIT:
	double(*func)(int, float, int, void *);
CODE:
	func   = INT2PTR(double(*)(int, float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2, p3);
OUTPUT:
	RETVAL

short
nci_sifip( c_func, i0, f1, i2, p3 )
	SV* c_func
	int i0
	float f1
	int i2
	void * p3
PREINIT:
	short(*func)(int, float, int, void *);
CODE:
	func   = INT2PTR(short(*)(int, float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2, p3);
OUTPUT:
	RETVAL

float
nci_fifip( c_func, i0, f1, i2, p3 )
	SV* c_func
	int i0
	float f1
	int i2
	void * p3
PREINIT:
	float(*func)(int, float, int, void *);
CODE:
	func   = INT2PTR(float(*)(int, float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2, p3);
OUTPUT:
	RETVAL

char *
nci_tifip( c_func, i0, f1, i2, p3 )
	SV* c_func
	int i0
	float f1
	int i2
	void * p3
PREINIT:
	char *(*func)(int, float, int, void *);
CODE:
	func   = INT2PTR(char *(*)(int, float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2, p3);
OUTPUT:
	RETVAL

int
nci_iifip( c_func, i0, f1, i2, p3 )
	SV* c_func
	int i0
	float f1
	int i2
	void * p3
PREINIT:
	int(*func)(int, float, int, void *);
CODE:
	func   = INT2PTR(int(*)(int, float, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2, p3);
OUTPUT:
	RETVAL

void *
nci_pptip( c_func, p0, t1, i2, p3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	void * p3
PREINIT:
	void *(*func)(void *, char *, int, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2, p3);
OUTPUT:
	RETVAL

void
nci_vptip( c_func, p0, t1, i2, p3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	void * p3
PREINIT:
	void(*func)(void *, char *, int, void *);
CODE:
	func   = INT2PTR(void(*)(void *, char *, int, void *), SvIV(c_func) );
	(*func)(p0, t1, i2, p3);

double
nci_dptip( c_func, p0, t1, i2, p3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	void * p3
PREINIT:
	double(*func)(void *, char *, int, void *);
CODE:
	func   = INT2PTR(double(*)(void *, char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2, p3);
OUTPUT:
	RETVAL

short
nci_sptip( c_func, p0, t1, i2, p3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	void * p3
PREINIT:
	short(*func)(void *, char *, int, void *);
CODE:
	func   = INT2PTR(short(*)(void *, char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2, p3);
OUTPUT:
	RETVAL

float
nci_fptip( c_func, p0, t1, i2, p3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	void * p3
PREINIT:
	float(*func)(void *, char *, int, void *);
CODE:
	func   = INT2PTR(float(*)(void *, char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2, p3);
OUTPUT:
	RETVAL

char *
nci_tptip( c_func, p0, t1, i2, p3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	void * p3
PREINIT:
	char *(*func)(void *, char *, int, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2, p3);
OUTPUT:
	RETVAL

int
nci_iptip( c_func, p0, t1, i2, p3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	void * p3
PREINIT:
	int(*func)(void *, char *, int, void *);
CODE:
	func   = INT2PTR(int(*)(void *, char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2, p3);
OUTPUT:
	RETVAL

void *
nci_pvtip( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvtip( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvtip( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svtip( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvtip( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvtip( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivtip( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdtip( c_func, d0, t1, i2, p3 )
	SV* c_func
	double d0
	char * t1
	int i2
	void * p3
PREINIT:
	void *(*func)(double, char *, int, void *);
CODE:
	func   = INT2PTR(void *(*)(double, char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2, p3);
OUTPUT:
	RETVAL

void
nci_vdtip( c_func, d0, t1, i2, p3 )
	SV* c_func
	double d0
	char * t1
	int i2
	void * p3
PREINIT:
	void(*func)(double, char *, int, void *);
CODE:
	func   = INT2PTR(void(*)(double, char *, int, void *), SvIV(c_func) );
	(*func)(d0, t1, i2, p3);

double
nci_ddtip( c_func, d0, t1, i2, p3 )
	SV* c_func
	double d0
	char * t1
	int i2
	void * p3
PREINIT:
	double(*func)(double, char *, int, void *);
CODE:
	func   = INT2PTR(double(*)(double, char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2, p3);
OUTPUT:
	RETVAL

short
nci_sdtip( c_func, d0, t1, i2, p3 )
	SV* c_func
	double d0
	char * t1
	int i2
	void * p3
PREINIT:
	short(*func)(double, char *, int, void *);
CODE:
	func   = INT2PTR(short(*)(double, char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2, p3);
OUTPUT:
	RETVAL

float
nci_fdtip( c_func, d0, t1, i2, p3 )
	SV* c_func
	double d0
	char * t1
	int i2
	void * p3
PREINIT:
	float(*func)(double, char *, int, void *);
CODE:
	func   = INT2PTR(float(*)(double, char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2, p3);
OUTPUT:
	RETVAL

char *
nci_tdtip( c_func, d0, t1, i2, p3 )
	SV* c_func
	double d0
	char * t1
	int i2
	void * p3
PREINIT:
	char *(*func)(double, char *, int, void *);
CODE:
	func   = INT2PTR(char *(*)(double, char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2, p3);
OUTPUT:
	RETVAL

int
nci_idtip( c_func, d0, t1, i2, p3 )
	SV* c_func
	double d0
	char * t1
	int i2
	void * p3
PREINIT:
	int(*func)(double, char *, int, void *);
CODE:
	func   = INT2PTR(int(*)(double, char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2, p3);
OUTPUT:
	RETVAL

void *
nci_pstip( c_func, s0, t1, i2, p3 )
	SV* c_func
	short s0
	char * t1
	int i2
	void * p3
PREINIT:
	void *(*func)(short, char *, int, void *);
CODE:
	func   = INT2PTR(void *(*)(short, char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2, p3);
OUTPUT:
	RETVAL

void
nci_vstip( c_func, s0, t1, i2, p3 )
	SV* c_func
	short s0
	char * t1
	int i2
	void * p3
PREINIT:
	void(*func)(short, char *, int, void *);
CODE:
	func   = INT2PTR(void(*)(short, char *, int, void *), SvIV(c_func) );
	(*func)(s0, t1, i2, p3);

double
nci_dstip( c_func, s0, t1, i2, p3 )
	SV* c_func
	short s0
	char * t1
	int i2
	void * p3
PREINIT:
	double(*func)(short, char *, int, void *);
CODE:
	func   = INT2PTR(double(*)(short, char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2, p3);
OUTPUT:
	RETVAL

short
nci_sstip( c_func, s0, t1, i2, p3 )
	SV* c_func
	short s0
	char * t1
	int i2
	void * p3
PREINIT:
	short(*func)(short, char *, int, void *);
CODE:
	func   = INT2PTR(short(*)(short, char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2, p3);
OUTPUT:
	RETVAL

float
nci_fstip( c_func, s0, t1, i2, p3 )
	SV* c_func
	short s0
	char * t1
	int i2
	void * p3
PREINIT:
	float(*func)(short, char *, int, void *);
CODE:
	func   = INT2PTR(float(*)(short, char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2, p3);
OUTPUT:
	RETVAL

char *
nci_tstip( c_func, s0, t1, i2, p3 )
	SV* c_func
	short s0
	char * t1
	int i2
	void * p3
PREINIT:
	char *(*func)(short, char *, int, void *);
CODE:
	func   = INT2PTR(char *(*)(short, char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2, p3);
OUTPUT:
	RETVAL

int
nci_istip( c_func, s0, t1, i2, p3 )
	SV* c_func
	short s0
	char * t1
	int i2
	void * p3
PREINIT:
	int(*func)(short, char *, int, void *);
CODE:
	func   = INT2PTR(int(*)(short, char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2, p3);
OUTPUT:
	RETVAL

void *
nci_pftip( c_func, f0, t1, i2, p3 )
	SV* c_func
	float f0
	char * t1
	int i2
	void * p3
PREINIT:
	void *(*func)(float, char *, int, void *);
CODE:
	func   = INT2PTR(void *(*)(float, char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2, p3);
OUTPUT:
	RETVAL

void
nci_vftip( c_func, f0, t1, i2, p3 )
	SV* c_func
	float f0
	char * t1
	int i2
	void * p3
PREINIT:
	void(*func)(float, char *, int, void *);
CODE:
	func   = INT2PTR(void(*)(float, char *, int, void *), SvIV(c_func) );
	(*func)(f0, t1, i2, p3);

double
nci_dftip( c_func, f0, t1, i2, p3 )
	SV* c_func
	float f0
	char * t1
	int i2
	void * p3
PREINIT:
	double(*func)(float, char *, int, void *);
CODE:
	func   = INT2PTR(double(*)(float, char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2, p3);
OUTPUT:
	RETVAL

short
nci_sftip( c_func, f0, t1, i2, p3 )
	SV* c_func
	float f0
	char * t1
	int i2
	void * p3
PREINIT:
	short(*func)(float, char *, int, void *);
CODE:
	func   = INT2PTR(short(*)(float, char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2, p3);
OUTPUT:
	RETVAL

float
nci_fftip( c_func, f0, t1, i2, p3 )
	SV* c_func
	float f0
	char * t1
	int i2
	void * p3
PREINIT:
	float(*func)(float, char *, int, void *);
CODE:
	func   = INT2PTR(float(*)(float, char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2, p3);
OUTPUT:
	RETVAL

char *
nci_tftip( c_func, f0, t1, i2, p3 )
	SV* c_func
	float f0
	char * t1
	int i2
	void * p3
PREINIT:
	char *(*func)(float, char *, int, void *);
CODE:
	func   = INT2PTR(char *(*)(float, char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2, p3);
OUTPUT:
	RETVAL

int
nci_iftip( c_func, f0, t1, i2, p3 )
	SV* c_func
	float f0
	char * t1
	int i2
	void * p3
PREINIT:
	int(*func)(float, char *, int, void *);
CODE:
	func   = INT2PTR(int(*)(float, char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2, p3);
OUTPUT:
	RETVAL

void *
nci_pttip( c_func, t0, t1, i2, p3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	void * p3
PREINIT:
	void *(*func)(char *, char *, int, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2, p3);
OUTPUT:
	RETVAL

void
nci_vttip( c_func, t0, t1, i2, p3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	void * p3
PREINIT:
	void(*func)(char *, char *, int, void *);
CODE:
	func   = INT2PTR(void(*)(char *, char *, int, void *), SvIV(c_func) );
	(*func)(t0, t1, i2, p3);

double
nci_dttip( c_func, t0, t1, i2, p3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	void * p3
PREINIT:
	double(*func)(char *, char *, int, void *);
CODE:
	func   = INT2PTR(double(*)(char *, char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2, p3);
OUTPUT:
	RETVAL

short
nci_sttip( c_func, t0, t1, i2, p3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	void * p3
PREINIT:
	short(*func)(char *, char *, int, void *);
CODE:
	func   = INT2PTR(short(*)(char *, char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2, p3);
OUTPUT:
	RETVAL

float
nci_fttip( c_func, t0, t1, i2, p3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	void * p3
PREINIT:
	float(*func)(char *, char *, int, void *);
CODE:
	func   = INT2PTR(float(*)(char *, char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2, p3);
OUTPUT:
	RETVAL

char *
nci_tttip( c_func, t0, t1, i2, p3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	void * p3
PREINIT:
	char *(*func)(char *, char *, int, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2, p3);
OUTPUT:
	RETVAL

int
nci_ittip( c_func, t0, t1, i2, p3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	void * p3
PREINIT:
	int(*func)(char *, char *, int, void *);
CODE:
	func   = INT2PTR(int(*)(char *, char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2, p3);
OUTPUT:
	RETVAL

void *
nci_pitip( c_func, i0, t1, i2, p3 )
	SV* c_func
	int i0
	char * t1
	int i2
	void * p3
PREINIT:
	void *(*func)(int, char *, int, void *);
CODE:
	func   = INT2PTR(void *(*)(int, char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2, p3);
OUTPUT:
	RETVAL

void
nci_vitip( c_func, i0, t1, i2, p3 )
	SV* c_func
	int i0
	char * t1
	int i2
	void * p3
PREINIT:
	void(*func)(int, char *, int, void *);
CODE:
	func   = INT2PTR(void(*)(int, char *, int, void *), SvIV(c_func) );
	(*func)(i0, t1, i2, p3);

double
nci_ditip( c_func, i0, t1, i2, p3 )
	SV* c_func
	int i0
	char * t1
	int i2
	void * p3
PREINIT:
	double(*func)(int, char *, int, void *);
CODE:
	func   = INT2PTR(double(*)(int, char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2, p3);
OUTPUT:
	RETVAL

short
nci_sitip( c_func, i0, t1, i2, p3 )
	SV* c_func
	int i0
	char * t1
	int i2
	void * p3
PREINIT:
	short(*func)(int, char *, int, void *);
CODE:
	func   = INT2PTR(short(*)(int, char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2, p3);
OUTPUT:
	RETVAL

float
nci_fitip( c_func, i0, t1, i2, p3 )
	SV* c_func
	int i0
	char * t1
	int i2
	void * p3
PREINIT:
	float(*func)(int, char *, int, void *);
CODE:
	func   = INT2PTR(float(*)(int, char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2, p3);
OUTPUT:
	RETVAL

char *
nci_titip( c_func, i0, t1, i2, p3 )
	SV* c_func
	int i0
	char * t1
	int i2
	void * p3
PREINIT:
	char *(*func)(int, char *, int, void *);
CODE:
	func   = INT2PTR(char *(*)(int, char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2, p3);
OUTPUT:
	RETVAL

int
nci_iitip( c_func, i0, t1, i2, p3 )
	SV* c_func
	int i0
	char * t1
	int i2
	void * p3
PREINIT:
	int(*func)(int, char *, int, void *);
CODE:
	func   = INT2PTR(int(*)(int, char *, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2, p3);
OUTPUT:
	RETVAL

void *
nci_ppiip( c_func, p0, i1, i2, p3 )
	SV* c_func
	void * p0
	int i1
	int i2
	void * p3
PREINIT:
	void *(*func)(void *, int, int, void *);
CODE:
	func   = INT2PTR(void *(*)(void *, int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2, p3);
OUTPUT:
	RETVAL

void
nci_vpiip( c_func, p0, i1, i2, p3 )
	SV* c_func
	void * p0
	int i1
	int i2
	void * p3
PREINIT:
	void(*func)(void *, int, int, void *);
CODE:
	func   = INT2PTR(void(*)(void *, int, int, void *), SvIV(c_func) );
	(*func)(p0, i1, i2, p3);

double
nci_dpiip( c_func, p0, i1, i2, p3 )
	SV* c_func
	void * p0
	int i1
	int i2
	void * p3
PREINIT:
	double(*func)(void *, int, int, void *);
CODE:
	func   = INT2PTR(double(*)(void *, int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2, p3);
OUTPUT:
	RETVAL

short
nci_spiip( c_func, p0, i1, i2, p3 )
	SV* c_func
	void * p0
	int i1
	int i2
	void * p3
PREINIT:
	short(*func)(void *, int, int, void *);
CODE:
	func   = INT2PTR(short(*)(void *, int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2, p3);
OUTPUT:
	RETVAL

float
nci_fpiip( c_func, p0, i1, i2, p3 )
	SV* c_func
	void * p0
	int i1
	int i2
	void * p3
PREINIT:
	float(*func)(void *, int, int, void *);
CODE:
	func   = INT2PTR(float(*)(void *, int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2, p3);
OUTPUT:
	RETVAL

char *
nci_tpiip( c_func, p0, i1, i2, p3 )
	SV* c_func
	void * p0
	int i1
	int i2
	void * p3
PREINIT:
	char *(*func)(void *, int, int, void *);
CODE:
	func   = INT2PTR(char *(*)(void *, int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2, p3);
OUTPUT:
	RETVAL

int
nci_ipiip( c_func, p0, i1, i2, p3 )
	SV* c_func
	void * p0
	int i1
	int i2
	void * p3
PREINIT:
	int(*func)(void *, int, int, void *);
CODE:
	func   = INT2PTR(int(*)(void *, int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2, p3);
OUTPUT:
	RETVAL

void *
nci_pviip( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vviip( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dviip( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_sviip( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fviip( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tviip( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_iviip( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdiip( c_func, d0, i1, i2, p3 )
	SV* c_func
	double d0
	int i1
	int i2
	void * p3
PREINIT:
	void *(*func)(double, int, int, void *);
CODE:
	func   = INT2PTR(void *(*)(double, int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2, p3);
OUTPUT:
	RETVAL

void
nci_vdiip( c_func, d0, i1, i2, p3 )
	SV* c_func
	double d0
	int i1
	int i2
	void * p3
PREINIT:
	void(*func)(double, int, int, void *);
CODE:
	func   = INT2PTR(void(*)(double, int, int, void *), SvIV(c_func) );
	(*func)(d0, i1, i2, p3);

double
nci_ddiip( c_func, d0, i1, i2, p3 )
	SV* c_func
	double d0
	int i1
	int i2
	void * p3
PREINIT:
	double(*func)(double, int, int, void *);
CODE:
	func   = INT2PTR(double(*)(double, int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2, p3);
OUTPUT:
	RETVAL

short
nci_sdiip( c_func, d0, i1, i2, p3 )
	SV* c_func
	double d0
	int i1
	int i2
	void * p3
PREINIT:
	short(*func)(double, int, int, void *);
CODE:
	func   = INT2PTR(short(*)(double, int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2, p3);
OUTPUT:
	RETVAL

float
nci_fdiip( c_func, d0, i1, i2, p3 )
	SV* c_func
	double d0
	int i1
	int i2
	void * p3
PREINIT:
	float(*func)(double, int, int, void *);
CODE:
	func   = INT2PTR(float(*)(double, int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2, p3);
OUTPUT:
	RETVAL

char *
nci_tdiip( c_func, d0, i1, i2, p3 )
	SV* c_func
	double d0
	int i1
	int i2
	void * p3
PREINIT:
	char *(*func)(double, int, int, void *);
CODE:
	func   = INT2PTR(char *(*)(double, int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2, p3);
OUTPUT:
	RETVAL

int
nci_idiip( c_func, d0, i1, i2, p3 )
	SV* c_func
	double d0
	int i1
	int i2
	void * p3
PREINIT:
	int(*func)(double, int, int, void *);
CODE:
	func   = INT2PTR(int(*)(double, int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2, p3);
OUTPUT:
	RETVAL

void *
nci_psiip( c_func, s0, i1, i2, p3 )
	SV* c_func
	short s0
	int i1
	int i2
	void * p3
PREINIT:
	void *(*func)(short, int, int, void *);
CODE:
	func   = INT2PTR(void *(*)(short, int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2, p3);
OUTPUT:
	RETVAL

void
nci_vsiip( c_func, s0, i1, i2, p3 )
	SV* c_func
	short s0
	int i1
	int i2
	void * p3
PREINIT:
	void(*func)(short, int, int, void *);
CODE:
	func   = INT2PTR(void(*)(short, int, int, void *), SvIV(c_func) );
	(*func)(s0, i1, i2, p3);

double
nci_dsiip( c_func, s0, i1, i2, p3 )
	SV* c_func
	short s0
	int i1
	int i2
	void * p3
PREINIT:
	double(*func)(short, int, int, void *);
CODE:
	func   = INT2PTR(double(*)(short, int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2, p3);
OUTPUT:
	RETVAL

short
nci_ssiip( c_func, s0, i1, i2, p3 )
	SV* c_func
	short s0
	int i1
	int i2
	void * p3
PREINIT:
	short(*func)(short, int, int, void *);
CODE:
	func   = INT2PTR(short(*)(short, int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2, p3);
OUTPUT:
	RETVAL

float
nci_fsiip( c_func, s0, i1, i2, p3 )
	SV* c_func
	short s0
	int i1
	int i2
	void * p3
PREINIT:
	float(*func)(short, int, int, void *);
CODE:
	func   = INT2PTR(float(*)(short, int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2, p3);
OUTPUT:
	RETVAL

char *
nci_tsiip( c_func, s0, i1, i2, p3 )
	SV* c_func
	short s0
	int i1
	int i2
	void * p3
PREINIT:
	char *(*func)(short, int, int, void *);
CODE:
	func   = INT2PTR(char *(*)(short, int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2, p3);
OUTPUT:
	RETVAL

int
nci_isiip( c_func, s0, i1, i2, p3 )
	SV* c_func
	short s0
	int i1
	int i2
	void * p3
PREINIT:
	int(*func)(short, int, int, void *);
CODE:
	func   = INT2PTR(int(*)(short, int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2, p3);
OUTPUT:
	RETVAL

void *
nci_pfiip( c_func, f0, i1, i2, p3 )
	SV* c_func
	float f0
	int i1
	int i2
	void * p3
PREINIT:
	void *(*func)(float, int, int, void *);
CODE:
	func   = INT2PTR(void *(*)(float, int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2, p3);
OUTPUT:
	RETVAL

void
nci_vfiip( c_func, f0, i1, i2, p3 )
	SV* c_func
	float f0
	int i1
	int i2
	void * p3
PREINIT:
	void(*func)(float, int, int, void *);
CODE:
	func   = INT2PTR(void(*)(float, int, int, void *), SvIV(c_func) );
	(*func)(f0, i1, i2, p3);

double
nci_dfiip( c_func, f0, i1, i2, p3 )
	SV* c_func
	float f0
	int i1
	int i2
	void * p3
PREINIT:
	double(*func)(float, int, int, void *);
CODE:
	func   = INT2PTR(double(*)(float, int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2, p3);
OUTPUT:
	RETVAL

short
nci_sfiip( c_func, f0, i1, i2, p3 )
	SV* c_func
	float f0
	int i1
	int i2
	void * p3
PREINIT:
	short(*func)(float, int, int, void *);
CODE:
	func   = INT2PTR(short(*)(float, int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2, p3);
OUTPUT:
	RETVAL

float
nci_ffiip( c_func, f0, i1, i2, p3 )
	SV* c_func
	float f0
	int i1
	int i2
	void * p3
PREINIT:
	float(*func)(float, int, int, void *);
CODE:
	func   = INT2PTR(float(*)(float, int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2, p3);
OUTPUT:
	RETVAL

char *
nci_tfiip( c_func, f0, i1, i2, p3 )
	SV* c_func
	float f0
	int i1
	int i2
	void * p3
PREINIT:
	char *(*func)(float, int, int, void *);
CODE:
	func   = INT2PTR(char *(*)(float, int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2, p3);
OUTPUT:
	RETVAL

int
nci_ifiip( c_func, f0, i1, i2, p3 )
	SV* c_func
	float f0
	int i1
	int i2
	void * p3
PREINIT:
	int(*func)(float, int, int, void *);
CODE:
	func   = INT2PTR(int(*)(float, int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2, p3);
OUTPUT:
	RETVAL

void *
nci_ptiip( c_func, t0, i1, i2, p3 )
	SV* c_func
	char * t0
	int i1
	int i2
	void * p3
PREINIT:
	void *(*func)(char *, int, int, void *);
CODE:
	func   = INT2PTR(void *(*)(char *, int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2, p3);
OUTPUT:
	RETVAL

void
nci_vtiip( c_func, t0, i1, i2, p3 )
	SV* c_func
	char * t0
	int i1
	int i2
	void * p3
PREINIT:
	void(*func)(char *, int, int, void *);
CODE:
	func   = INT2PTR(void(*)(char *, int, int, void *), SvIV(c_func) );
	(*func)(t0, i1, i2, p3);

double
nci_dtiip( c_func, t0, i1, i2, p3 )
	SV* c_func
	char * t0
	int i1
	int i2
	void * p3
PREINIT:
	double(*func)(char *, int, int, void *);
CODE:
	func   = INT2PTR(double(*)(char *, int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2, p3);
OUTPUT:
	RETVAL

short
nci_stiip( c_func, t0, i1, i2, p3 )
	SV* c_func
	char * t0
	int i1
	int i2
	void * p3
PREINIT:
	short(*func)(char *, int, int, void *);
CODE:
	func   = INT2PTR(short(*)(char *, int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2, p3);
OUTPUT:
	RETVAL

float
nci_ftiip( c_func, t0, i1, i2, p3 )
	SV* c_func
	char * t0
	int i1
	int i2
	void * p3
PREINIT:
	float(*func)(char *, int, int, void *);
CODE:
	func   = INT2PTR(float(*)(char *, int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2, p3);
OUTPUT:
	RETVAL

char *
nci_ttiip( c_func, t0, i1, i2, p3 )
	SV* c_func
	char * t0
	int i1
	int i2
	void * p3
PREINIT:
	char *(*func)(char *, int, int, void *);
CODE:
	func   = INT2PTR(char *(*)(char *, int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2, p3);
OUTPUT:
	RETVAL

int
nci_itiip( c_func, t0, i1, i2, p3 )
	SV* c_func
	char * t0
	int i1
	int i2
	void * p3
PREINIT:
	int(*func)(char *, int, int, void *);
CODE:
	func   = INT2PTR(int(*)(char *, int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2, p3);
OUTPUT:
	RETVAL

void *
nci_piiip( c_func, i0, i1, i2, p3 )
	SV* c_func
	int i0
	int i1
	int i2
	void * p3
PREINIT:
	void *(*func)(int, int, int, void *);
CODE:
	func   = INT2PTR(void *(*)(int, int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2, p3);
OUTPUT:
	RETVAL

void
nci_viiip( c_func, i0, i1, i2, p3 )
	SV* c_func
	int i0
	int i1
	int i2
	void * p3
PREINIT:
	void(*func)(int, int, int, void *);
CODE:
	func   = INT2PTR(void(*)(int, int, int, void *), SvIV(c_func) );
	(*func)(i0, i1, i2, p3);

double
nci_diiip( c_func, i0, i1, i2, p3 )
	SV* c_func
	int i0
	int i1
	int i2
	void * p3
PREINIT:
	double(*func)(int, int, int, void *);
CODE:
	func   = INT2PTR(double(*)(int, int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2, p3);
OUTPUT:
	RETVAL

short
nci_siiip( c_func, i0, i1, i2, p3 )
	SV* c_func
	int i0
	int i1
	int i2
	void * p3
PREINIT:
	short(*func)(int, int, int, void *);
CODE:
	func   = INT2PTR(short(*)(int, int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2, p3);
OUTPUT:
	RETVAL

float
nci_fiiip( c_func, i0, i1, i2, p3 )
	SV* c_func
	int i0
	int i1
	int i2
	void * p3
PREINIT:
	float(*func)(int, int, int, void *);
CODE:
	func   = INT2PTR(float(*)(int, int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2, p3);
OUTPUT:
	RETVAL

char *
nci_tiiip( c_func, i0, i1, i2, p3 )
	SV* c_func
	int i0
	int i1
	int i2
	void * p3
PREINIT:
	char *(*func)(int, int, int, void *);
CODE:
	func   = INT2PTR(char *(*)(int, int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2, p3);
OUTPUT:
	RETVAL

int
nci_iiiip( c_func, i0, i1, i2, p3 )
	SV* c_func
	int i0
	int i1
	int i2
	void * p3
PREINIT:
	int(*func)(int, int, int, void *);
CODE:
	func   = INT2PTR(int(*)(int, int, int, void *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2, p3);
OUTPUT:
	RETVAL

void *
nci_ppppd( c_func, p0, p1, p2, d3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	double d3
PREINIT:
	void *(*func)(void *, void *, void *, double);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2, d3);
OUTPUT:
	RETVAL

void
nci_vpppd( c_func, p0, p1, p2, d3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	double d3
PREINIT:
	void(*func)(void *, void *, void *, double);
CODE:
	func   = INT2PTR(void(*)(void *, void *, void *, double), SvIV(c_func) );
	(*func)(p0, p1, p2, d3);

double
nci_dpppd( c_func, p0, p1, p2, d3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	double d3
PREINIT:
	double(*func)(void *, void *, void *, double);
CODE:
	func   = INT2PTR(double(*)(void *, void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2, d3);
OUTPUT:
	RETVAL

short
nci_spppd( c_func, p0, p1, p2, d3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	double d3
PREINIT:
	short(*func)(void *, void *, void *, double);
CODE:
	func   = INT2PTR(short(*)(void *, void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2, d3);
OUTPUT:
	RETVAL

float
nci_fpppd( c_func, p0, p1, p2, d3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	double d3
PREINIT:
	float(*func)(void *, void *, void *, double);
CODE:
	func   = INT2PTR(float(*)(void *, void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2, d3);
OUTPUT:
	RETVAL

char *
nci_tpppd( c_func, p0, p1, p2, d3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	double d3
PREINIT:
	char *(*func)(void *, void *, void *, double);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2, d3);
OUTPUT:
	RETVAL

int
nci_ipppd( c_func, p0, p1, p2, d3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	double d3
PREINIT:
	int(*func)(void *, void *, void *, double);
CODE:
	func   = INT2PTR(int(*)(void *, void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2, d3);
OUTPUT:
	RETVAL

void *
nci_pvppd( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvppd( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvppd( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svppd( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvppd( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvppd( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivppd( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdppd( c_func, d0, p1, p2, d3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	double d3
PREINIT:
	void *(*func)(double, void *, void *, double);
CODE:
	func   = INT2PTR(void *(*)(double, void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2, d3);
OUTPUT:
	RETVAL

void
nci_vdppd( c_func, d0, p1, p2, d3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	double d3
PREINIT:
	void(*func)(double, void *, void *, double);
CODE:
	func   = INT2PTR(void(*)(double, void *, void *, double), SvIV(c_func) );
	(*func)(d0, p1, p2, d3);

double
nci_ddppd( c_func, d0, p1, p2, d3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	double d3
PREINIT:
	double(*func)(double, void *, void *, double);
CODE:
	func   = INT2PTR(double(*)(double, void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2, d3);
OUTPUT:
	RETVAL

short
nci_sdppd( c_func, d0, p1, p2, d3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	double d3
PREINIT:
	short(*func)(double, void *, void *, double);
CODE:
	func   = INT2PTR(short(*)(double, void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2, d3);
OUTPUT:
	RETVAL

float
nci_fdppd( c_func, d0, p1, p2, d3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	double d3
PREINIT:
	float(*func)(double, void *, void *, double);
CODE:
	func   = INT2PTR(float(*)(double, void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2, d3);
OUTPUT:
	RETVAL

char *
nci_tdppd( c_func, d0, p1, p2, d3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	double d3
PREINIT:
	char *(*func)(double, void *, void *, double);
CODE:
	func   = INT2PTR(char *(*)(double, void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2, d3);
OUTPUT:
	RETVAL

int
nci_idppd( c_func, d0, p1, p2, d3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	double d3
PREINIT:
	int(*func)(double, void *, void *, double);
CODE:
	func   = INT2PTR(int(*)(double, void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2, d3);
OUTPUT:
	RETVAL

void *
nci_psppd( c_func, s0, p1, p2, d3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	double d3
PREINIT:
	void *(*func)(short, void *, void *, double);
CODE:
	func   = INT2PTR(void *(*)(short, void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2, d3);
OUTPUT:
	RETVAL

void
nci_vsppd( c_func, s0, p1, p2, d3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	double d3
PREINIT:
	void(*func)(short, void *, void *, double);
CODE:
	func   = INT2PTR(void(*)(short, void *, void *, double), SvIV(c_func) );
	(*func)(s0, p1, p2, d3);

double
nci_dsppd( c_func, s0, p1, p2, d3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	double d3
PREINIT:
	double(*func)(short, void *, void *, double);
CODE:
	func   = INT2PTR(double(*)(short, void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2, d3);
OUTPUT:
	RETVAL

short
nci_ssppd( c_func, s0, p1, p2, d3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	double d3
PREINIT:
	short(*func)(short, void *, void *, double);
CODE:
	func   = INT2PTR(short(*)(short, void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2, d3);
OUTPUT:
	RETVAL

float
nci_fsppd( c_func, s0, p1, p2, d3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	double d3
PREINIT:
	float(*func)(short, void *, void *, double);
CODE:
	func   = INT2PTR(float(*)(short, void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2, d3);
OUTPUT:
	RETVAL

char *
nci_tsppd( c_func, s0, p1, p2, d3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	double d3
PREINIT:
	char *(*func)(short, void *, void *, double);
CODE:
	func   = INT2PTR(char *(*)(short, void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2, d3);
OUTPUT:
	RETVAL

int
nci_isppd( c_func, s0, p1, p2, d3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	double d3
PREINIT:
	int(*func)(short, void *, void *, double);
CODE:
	func   = INT2PTR(int(*)(short, void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2, d3);
OUTPUT:
	RETVAL

void *
nci_pfppd( c_func, f0, p1, p2, d3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	double d3
PREINIT:
	void *(*func)(float, void *, void *, double);
CODE:
	func   = INT2PTR(void *(*)(float, void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2, d3);
OUTPUT:
	RETVAL

void
nci_vfppd( c_func, f0, p1, p2, d3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	double d3
PREINIT:
	void(*func)(float, void *, void *, double);
CODE:
	func   = INT2PTR(void(*)(float, void *, void *, double), SvIV(c_func) );
	(*func)(f0, p1, p2, d3);

double
nci_dfppd( c_func, f0, p1, p2, d3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	double d3
PREINIT:
	double(*func)(float, void *, void *, double);
CODE:
	func   = INT2PTR(double(*)(float, void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2, d3);
OUTPUT:
	RETVAL

short
nci_sfppd( c_func, f0, p1, p2, d3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	double d3
PREINIT:
	short(*func)(float, void *, void *, double);
CODE:
	func   = INT2PTR(short(*)(float, void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2, d3);
OUTPUT:
	RETVAL

float
nci_ffppd( c_func, f0, p1, p2, d3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	double d3
PREINIT:
	float(*func)(float, void *, void *, double);
CODE:
	func   = INT2PTR(float(*)(float, void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2, d3);
OUTPUT:
	RETVAL

char *
nci_tfppd( c_func, f0, p1, p2, d3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	double d3
PREINIT:
	char *(*func)(float, void *, void *, double);
CODE:
	func   = INT2PTR(char *(*)(float, void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2, d3);
OUTPUT:
	RETVAL

int
nci_ifppd( c_func, f0, p1, p2, d3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	double d3
PREINIT:
	int(*func)(float, void *, void *, double);
CODE:
	func   = INT2PTR(int(*)(float, void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2, d3);
OUTPUT:
	RETVAL

void *
nci_ptppd( c_func, t0, p1, p2, d3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	double d3
PREINIT:
	void *(*func)(char *, void *, void *, double);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2, d3);
OUTPUT:
	RETVAL

void
nci_vtppd( c_func, t0, p1, p2, d3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	double d3
PREINIT:
	void(*func)(char *, void *, void *, double);
CODE:
	func   = INT2PTR(void(*)(char *, void *, void *, double), SvIV(c_func) );
	(*func)(t0, p1, p2, d3);

double
nci_dtppd( c_func, t0, p1, p2, d3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	double d3
PREINIT:
	double(*func)(char *, void *, void *, double);
CODE:
	func   = INT2PTR(double(*)(char *, void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2, d3);
OUTPUT:
	RETVAL

short
nci_stppd( c_func, t0, p1, p2, d3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	double d3
PREINIT:
	short(*func)(char *, void *, void *, double);
CODE:
	func   = INT2PTR(short(*)(char *, void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2, d3);
OUTPUT:
	RETVAL

float
nci_ftppd( c_func, t0, p1, p2, d3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	double d3
PREINIT:
	float(*func)(char *, void *, void *, double);
CODE:
	func   = INT2PTR(float(*)(char *, void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2, d3);
OUTPUT:
	RETVAL

char *
nci_ttppd( c_func, t0, p1, p2, d3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	double d3
PREINIT:
	char *(*func)(char *, void *, void *, double);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2, d3);
OUTPUT:
	RETVAL

int
nci_itppd( c_func, t0, p1, p2, d3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	double d3
PREINIT:
	int(*func)(char *, void *, void *, double);
CODE:
	func   = INT2PTR(int(*)(char *, void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2, d3);
OUTPUT:
	RETVAL

void *
nci_pippd( c_func, i0, p1, p2, d3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	double d3
PREINIT:
	void *(*func)(int, void *, void *, double);
CODE:
	func   = INT2PTR(void *(*)(int, void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2, d3);
OUTPUT:
	RETVAL

void
nci_vippd( c_func, i0, p1, p2, d3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	double d3
PREINIT:
	void(*func)(int, void *, void *, double);
CODE:
	func   = INT2PTR(void(*)(int, void *, void *, double), SvIV(c_func) );
	(*func)(i0, p1, p2, d3);

double
nci_dippd( c_func, i0, p1, p2, d3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	double d3
PREINIT:
	double(*func)(int, void *, void *, double);
CODE:
	func   = INT2PTR(double(*)(int, void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2, d3);
OUTPUT:
	RETVAL

short
nci_sippd( c_func, i0, p1, p2, d3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	double d3
PREINIT:
	short(*func)(int, void *, void *, double);
CODE:
	func   = INT2PTR(short(*)(int, void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2, d3);
OUTPUT:
	RETVAL

float
nci_fippd( c_func, i0, p1, p2, d3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	double d3
PREINIT:
	float(*func)(int, void *, void *, double);
CODE:
	func   = INT2PTR(float(*)(int, void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2, d3);
OUTPUT:
	RETVAL

char *
nci_tippd( c_func, i0, p1, p2, d3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	double d3
PREINIT:
	char *(*func)(int, void *, void *, double);
CODE:
	func   = INT2PTR(char *(*)(int, void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2, d3);
OUTPUT:
	RETVAL

int
nci_iippd( c_func, i0, p1, p2, d3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	double d3
PREINIT:
	int(*func)(int, void *, void *, double);
CODE:
	func   = INT2PTR(int(*)(int, void *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2, d3);
OUTPUT:
	RETVAL

void *
nci_ppdpd( c_func, p0, d1, p2, d3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	double d3
PREINIT:
	void *(*func)(void *, double, void *, double);
CODE:
	func   = INT2PTR(void *(*)(void *, double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2, d3);
OUTPUT:
	RETVAL

void
nci_vpdpd( c_func, p0, d1, p2, d3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	double d3
PREINIT:
	void(*func)(void *, double, void *, double);
CODE:
	func   = INT2PTR(void(*)(void *, double, void *, double), SvIV(c_func) );
	(*func)(p0, d1, p2, d3);

double
nci_dpdpd( c_func, p0, d1, p2, d3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	double d3
PREINIT:
	double(*func)(void *, double, void *, double);
CODE:
	func   = INT2PTR(double(*)(void *, double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2, d3);
OUTPUT:
	RETVAL

short
nci_spdpd( c_func, p0, d1, p2, d3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	double d3
PREINIT:
	short(*func)(void *, double, void *, double);
CODE:
	func   = INT2PTR(short(*)(void *, double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2, d3);
OUTPUT:
	RETVAL

float
nci_fpdpd( c_func, p0, d1, p2, d3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	double d3
PREINIT:
	float(*func)(void *, double, void *, double);
CODE:
	func   = INT2PTR(float(*)(void *, double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2, d3);
OUTPUT:
	RETVAL

char *
nci_tpdpd( c_func, p0, d1, p2, d3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	double d3
PREINIT:
	char *(*func)(void *, double, void *, double);
CODE:
	func   = INT2PTR(char *(*)(void *, double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2, d3);
OUTPUT:
	RETVAL

int
nci_ipdpd( c_func, p0, d1, p2, d3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	double d3
PREINIT:
	int(*func)(void *, double, void *, double);
CODE:
	func   = INT2PTR(int(*)(void *, double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2, d3);
OUTPUT:
	RETVAL

void *
nci_pvdpd( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvdpd( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvdpd( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svdpd( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvdpd( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvdpd( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivdpd( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pddpd( c_func, d0, d1, p2, d3 )
	SV* c_func
	double d0
	double d1
	void * p2
	double d3
PREINIT:
	void *(*func)(double, double, void *, double);
CODE:
	func   = INT2PTR(void *(*)(double, double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2, d3);
OUTPUT:
	RETVAL

void
nci_vddpd( c_func, d0, d1, p2, d3 )
	SV* c_func
	double d0
	double d1
	void * p2
	double d3
PREINIT:
	void(*func)(double, double, void *, double);
CODE:
	func   = INT2PTR(void(*)(double, double, void *, double), SvIV(c_func) );
	(*func)(d0, d1, p2, d3);

double
nci_dddpd( c_func, d0, d1, p2, d3 )
	SV* c_func
	double d0
	double d1
	void * p2
	double d3
PREINIT:
	double(*func)(double, double, void *, double);
CODE:
	func   = INT2PTR(double(*)(double, double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2, d3);
OUTPUT:
	RETVAL

short
nci_sddpd( c_func, d0, d1, p2, d3 )
	SV* c_func
	double d0
	double d1
	void * p2
	double d3
PREINIT:
	short(*func)(double, double, void *, double);
CODE:
	func   = INT2PTR(short(*)(double, double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2, d3);
OUTPUT:
	RETVAL

float
nci_fddpd( c_func, d0, d1, p2, d3 )
	SV* c_func
	double d0
	double d1
	void * p2
	double d3
PREINIT:
	float(*func)(double, double, void *, double);
CODE:
	func   = INT2PTR(float(*)(double, double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2, d3);
OUTPUT:
	RETVAL

char *
nci_tddpd( c_func, d0, d1, p2, d3 )
	SV* c_func
	double d0
	double d1
	void * p2
	double d3
PREINIT:
	char *(*func)(double, double, void *, double);
CODE:
	func   = INT2PTR(char *(*)(double, double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2, d3);
OUTPUT:
	RETVAL

int
nci_iddpd( c_func, d0, d1, p2, d3 )
	SV* c_func
	double d0
	double d1
	void * p2
	double d3
PREINIT:
	int(*func)(double, double, void *, double);
CODE:
	func   = INT2PTR(int(*)(double, double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2, d3);
OUTPUT:
	RETVAL

void *
nci_psdpd( c_func, s0, d1, p2, d3 )
	SV* c_func
	short s0
	double d1
	void * p2
	double d3
PREINIT:
	void *(*func)(short, double, void *, double);
CODE:
	func   = INT2PTR(void *(*)(short, double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2, d3);
OUTPUT:
	RETVAL

void
nci_vsdpd( c_func, s0, d1, p2, d3 )
	SV* c_func
	short s0
	double d1
	void * p2
	double d3
PREINIT:
	void(*func)(short, double, void *, double);
CODE:
	func   = INT2PTR(void(*)(short, double, void *, double), SvIV(c_func) );
	(*func)(s0, d1, p2, d3);

double
nci_dsdpd( c_func, s0, d1, p2, d3 )
	SV* c_func
	short s0
	double d1
	void * p2
	double d3
PREINIT:
	double(*func)(short, double, void *, double);
CODE:
	func   = INT2PTR(double(*)(short, double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2, d3);
OUTPUT:
	RETVAL

short
nci_ssdpd( c_func, s0, d1, p2, d3 )
	SV* c_func
	short s0
	double d1
	void * p2
	double d3
PREINIT:
	short(*func)(short, double, void *, double);
CODE:
	func   = INT2PTR(short(*)(short, double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2, d3);
OUTPUT:
	RETVAL

float
nci_fsdpd( c_func, s0, d1, p2, d3 )
	SV* c_func
	short s0
	double d1
	void * p2
	double d3
PREINIT:
	float(*func)(short, double, void *, double);
CODE:
	func   = INT2PTR(float(*)(short, double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2, d3);
OUTPUT:
	RETVAL

char *
nci_tsdpd( c_func, s0, d1, p2, d3 )
	SV* c_func
	short s0
	double d1
	void * p2
	double d3
PREINIT:
	char *(*func)(short, double, void *, double);
CODE:
	func   = INT2PTR(char *(*)(short, double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2, d3);
OUTPUT:
	RETVAL

int
nci_isdpd( c_func, s0, d1, p2, d3 )
	SV* c_func
	short s0
	double d1
	void * p2
	double d3
PREINIT:
	int(*func)(short, double, void *, double);
CODE:
	func   = INT2PTR(int(*)(short, double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2, d3);
OUTPUT:
	RETVAL

void *
nci_pfdpd( c_func, f0, d1, p2, d3 )
	SV* c_func
	float f0
	double d1
	void * p2
	double d3
PREINIT:
	void *(*func)(float, double, void *, double);
CODE:
	func   = INT2PTR(void *(*)(float, double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2, d3);
OUTPUT:
	RETVAL

void
nci_vfdpd( c_func, f0, d1, p2, d3 )
	SV* c_func
	float f0
	double d1
	void * p2
	double d3
PREINIT:
	void(*func)(float, double, void *, double);
CODE:
	func   = INT2PTR(void(*)(float, double, void *, double), SvIV(c_func) );
	(*func)(f0, d1, p2, d3);

double
nci_dfdpd( c_func, f0, d1, p2, d3 )
	SV* c_func
	float f0
	double d1
	void * p2
	double d3
PREINIT:
	double(*func)(float, double, void *, double);
CODE:
	func   = INT2PTR(double(*)(float, double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2, d3);
OUTPUT:
	RETVAL

short
nci_sfdpd( c_func, f0, d1, p2, d3 )
	SV* c_func
	float f0
	double d1
	void * p2
	double d3
PREINIT:
	short(*func)(float, double, void *, double);
CODE:
	func   = INT2PTR(short(*)(float, double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2, d3);
OUTPUT:
	RETVAL

float
nci_ffdpd( c_func, f0, d1, p2, d3 )
	SV* c_func
	float f0
	double d1
	void * p2
	double d3
PREINIT:
	float(*func)(float, double, void *, double);
CODE:
	func   = INT2PTR(float(*)(float, double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2, d3);
OUTPUT:
	RETVAL

char *
nci_tfdpd( c_func, f0, d1, p2, d3 )
	SV* c_func
	float f0
	double d1
	void * p2
	double d3
PREINIT:
	char *(*func)(float, double, void *, double);
CODE:
	func   = INT2PTR(char *(*)(float, double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2, d3);
OUTPUT:
	RETVAL

int
nci_ifdpd( c_func, f0, d1, p2, d3 )
	SV* c_func
	float f0
	double d1
	void * p2
	double d3
PREINIT:
	int(*func)(float, double, void *, double);
CODE:
	func   = INT2PTR(int(*)(float, double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2, d3);
OUTPUT:
	RETVAL

void *
nci_ptdpd( c_func, t0, d1, p2, d3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	double d3
PREINIT:
	void *(*func)(char *, double, void *, double);
CODE:
	func   = INT2PTR(void *(*)(char *, double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2, d3);
OUTPUT:
	RETVAL

void
nci_vtdpd( c_func, t0, d1, p2, d3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	double d3
PREINIT:
	void(*func)(char *, double, void *, double);
CODE:
	func   = INT2PTR(void(*)(char *, double, void *, double), SvIV(c_func) );
	(*func)(t0, d1, p2, d3);

double
nci_dtdpd( c_func, t0, d1, p2, d3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	double d3
PREINIT:
	double(*func)(char *, double, void *, double);
CODE:
	func   = INT2PTR(double(*)(char *, double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2, d3);
OUTPUT:
	RETVAL

short
nci_stdpd( c_func, t0, d1, p2, d3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	double d3
PREINIT:
	short(*func)(char *, double, void *, double);
CODE:
	func   = INT2PTR(short(*)(char *, double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2, d3);
OUTPUT:
	RETVAL

float
nci_ftdpd( c_func, t0, d1, p2, d3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	double d3
PREINIT:
	float(*func)(char *, double, void *, double);
CODE:
	func   = INT2PTR(float(*)(char *, double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2, d3);
OUTPUT:
	RETVAL

char *
nci_ttdpd( c_func, t0, d1, p2, d3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	double d3
PREINIT:
	char *(*func)(char *, double, void *, double);
CODE:
	func   = INT2PTR(char *(*)(char *, double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2, d3);
OUTPUT:
	RETVAL

int
nci_itdpd( c_func, t0, d1, p2, d3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	double d3
PREINIT:
	int(*func)(char *, double, void *, double);
CODE:
	func   = INT2PTR(int(*)(char *, double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2, d3);
OUTPUT:
	RETVAL

void *
nci_pidpd( c_func, i0, d1, p2, d3 )
	SV* c_func
	int i0
	double d1
	void * p2
	double d3
PREINIT:
	void *(*func)(int, double, void *, double);
CODE:
	func   = INT2PTR(void *(*)(int, double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2, d3);
OUTPUT:
	RETVAL

void
nci_vidpd( c_func, i0, d1, p2, d3 )
	SV* c_func
	int i0
	double d1
	void * p2
	double d3
PREINIT:
	void(*func)(int, double, void *, double);
CODE:
	func   = INT2PTR(void(*)(int, double, void *, double), SvIV(c_func) );
	(*func)(i0, d1, p2, d3);

double
nci_didpd( c_func, i0, d1, p2, d3 )
	SV* c_func
	int i0
	double d1
	void * p2
	double d3
PREINIT:
	double(*func)(int, double, void *, double);
CODE:
	func   = INT2PTR(double(*)(int, double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2, d3);
OUTPUT:
	RETVAL

short
nci_sidpd( c_func, i0, d1, p2, d3 )
	SV* c_func
	int i0
	double d1
	void * p2
	double d3
PREINIT:
	short(*func)(int, double, void *, double);
CODE:
	func   = INT2PTR(short(*)(int, double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2, d3);
OUTPUT:
	RETVAL

float
nci_fidpd( c_func, i0, d1, p2, d3 )
	SV* c_func
	int i0
	double d1
	void * p2
	double d3
PREINIT:
	float(*func)(int, double, void *, double);
CODE:
	func   = INT2PTR(float(*)(int, double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2, d3);
OUTPUT:
	RETVAL

char *
nci_tidpd( c_func, i0, d1, p2, d3 )
	SV* c_func
	int i0
	double d1
	void * p2
	double d3
PREINIT:
	char *(*func)(int, double, void *, double);
CODE:
	func   = INT2PTR(char *(*)(int, double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2, d3);
OUTPUT:
	RETVAL

int
nci_iidpd( c_func, i0, d1, p2, d3 )
	SV* c_func
	int i0
	double d1
	void * p2
	double d3
PREINIT:
	int(*func)(int, double, void *, double);
CODE:
	func   = INT2PTR(int(*)(int, double, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2, d3);
OUTPUT:
	RETVAL

void *
nci_ppspd( c_func, p0, s1, p2, d3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	double d3
PREINIT:
	void *(*func)(void *, short, void *, double);
CODE:
	func   = INT2PTR(void *(*)(void *, short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2, d3);
OUTPUT:
	RETVAL

void
nci_vpspd( c_func, p0, s1, p2, d3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	double d3
PREINIT:
	void(*func)(void *, short, void *, double);
CODE:
	func   = INT2PTR(void(*)(void *, short, void *, double), SvIV(c_func) );
	(*func)(p0, s1, p2, d3);

double
nci_dpspd( c_func, p0, s1, p2, d3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	double d3
PREINIT:
	double(*func)(void *, short, void *, double);
CODE:
	func   = INT2PTR(double(*)(void *, short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2, d3);
OUTPUT:
	RETVAL

short
nci_spspd( c_func, p0, s1, p2, d3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	double d3
PREINIT:
	short(*func)(void *, short, void *, double);
CODE:
	func   = INT2PTR(short(*)(void *, short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2, d3);
OUTPUT:
	RETVAL

float
nci_fpspd( c_func, p0, s1, p2, d3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	double d3
PREINIT:
	float(*func)(void *, short, void *, double);
CODE:
	func   = INT2PTR(float(*)(void *, short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2, d3);
OUTPUT:
	RETVAL

char *
nci_tpspd( c_func, p0, s1, p2, d3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	double d3
PREINIT:
	char *(*func)(void *, short, void *, double);
CODE:
	func   = INT2PTR(char *(*)(void *, short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2, d3);
OUTPUT:
	RETVAL

int
nci_ipspd( c_func, p0, s1, p2, d3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	double d3
PREINIT:
	int(*func)(void *, short, void *, double);
CODE:
	func   = INT2PTR(int(*)(void *, short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2, d3);
OUTPUT:
	RETVAL

void *
nci_pvspd( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvspd( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvspd( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svspd( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvspd( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvspd( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivspd( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdspd( c_func, d0, s1, p2, d3 )
	SV* c_func
	double d0
	short s1
	void * p2
	double d3
PREINIT:
	void *(*func)(double, short, void *, double);
CODE:
	func   = INT2PTR(void *(*)(double, short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2, d3);
OUTPUT:
	RETVAL

void
nci_vdspd( c_func, d0, s1, p2, d3 )
	SV* c_func
	double d0
	short s1
	void * p2
	double d3
PREINIT:
	void(*func)(double, short, void *, double);
CODE:
	func   = INT2PTR(void(*)(double, short, void *, double), SvIV(c_func) );
	(*func)(d0, s1, p2, d3);

double
nci_ddspd( c_func, d0, s1, p2, d3 )
	SV* c_func
	double d0
	short s1
	void * p2
	double d3
PREINIT:
	double(*func)(double, short, void *, double);
CODE:
	func   = INT2PTR(double(*)(double, short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2, d3);
OUTPUT:
	RETVAL

short
nci_sdspd( c_func, d0, s1, p2, d3 )
	SV* c_func
	double d0
	short s1
	void * p2
	double d3
PREINIT:
	short(*func)(double, short, void *, double);
CODE:
	func   = INT2PTR(short(*)(double, short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2, d3);
OUTPUT:
	RETVAL

float
nci_fdspd( c_func, d0, s1, p2, d3 )
	SV* c_func
	double d0
	short s1
	void * p2
	double d3
PREINIT:
	float(*func)(double, short, void *, double);
CODE:
	func   = INT2PTR(float(*)(double, short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2, d3);
OUTPUT:
	RETVAL

char *
nci_tdspd( c_func, d0, s1, p2, d3 )
	SV* c_func
	double d0
	short s1
	void * p2
	double d3
PREINIT:
	char *(*func)(double, short, void *, double);
CODE:
	func   = INT2PTR(char *(*)(double, short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2, d3);
OUTPUT:
	RETVAL

int
nci_idspd( c_func, d0, s1, p2, d3 )
	SV* c_func
	double d0
	short s1
	void * p2
	double d3
PREINIT:
	int(*func)(double, short, void *, double);
CODE:
	func   = INT2PTR(int(*)(double, short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2, d3);
OUTPUT:
	RETVAL

void *
nci_psspd( c_func, s0, s1, p2, d3 )
	SV* c_func
	short s0
	short s1
	void * p2
	double d3
PREINIT:
	void *(*func)(short, short, void *, double);
CODE:
	func   = INT2PTR(void *(*)(short, short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2, d3);
OUTPUT:
	RETVAL

void
nci_vsspd( c_func, s0, s1, p2, d3 )
	SV* c_func
	short s0
	short s1
	void * p2
	double d3
PREINIT:
	void(*func)(short, short, void *, double);
CODE:
	func   = INT2PTR(void(*)(short, short, void *, double), SvIV(c_func) );
	(*func)(s0, s1, p2, d3);

double
nci_dsspd( c_func, s0, s1, p2, d3 )
	SV* c_func
	short s0
	short s1
	void * p2
	double d3
PREINIT:
	double(*func)(short, short, void *, double);
CODE:
	func   = INT2PTR(double(*)(short, short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2, d3);
OUTPUT:
	RETVAL

short
nci_ssspd( c_func, s0, s1, p2, d3 )
	SV* c_func
	short s0
	short s1
	void * p2
	double d3
PREINIT:
	short(*func)(short, short, void *, double);
CODE:
	func   = INT2PTR(short(*)(short, short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2, d3);
OUTPUT:
	RETVAL

float
nci_fsspd( c_func, s0, s1, p2, d3 )
	SV* c_func
	short s0
	short s1
	void * p2
	double d3
PREINIT:
	float(*func)(short, short, void *, double);
CODE:
	func   = INT2PTR(float(*)(short, short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2, d3);
OUTPUT:
	RETVAL

char *
nci_tsspd( c_func, s0, s1, p2, d3 )
	SV* c_func
	short s0
	short s1
	void * p2
	double d3
PREINIT:
	char *(*func)(short, short, void *, double);
CODE:
	func   = INT2PTR(char *(*)(short, short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2, d3);
OUTPUT:
	RETVAL

int
nci_isspd( c_func, s0, s1, p2, d3 )
	SV* c_func
	short s0
	short s1
	void * p2
	double d3
PREINIT:
	int(*func)(short, short, void *, double);
CODE:
	func   = INT2PTR(int(*)(short, short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2, d3);
OUTPUT:
	RETVAL

void *
nci_pfspd( c_func, f0, s1, p2, d3 )
	SV* c_func
	float f0
	short s1
	void * p2
	double d3
PREINIT:
	void *(*func)(float, short, void *, double);
CODE:
	func   = INT2PTR(void *(*)(float, short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2, d3);
OUTPUT:
	RETVAL

void
nci_vfspd( c_func, f0, s1, p2, d3 )
	SV* c_func
	float f0
	short s1
	void * p2
	double d3
PREINIT:
	void(*func)(float, short, void *, double);
CODE:
	func   = INT2PTR(void(*)(float, short, void *, double), SvIV(c_func) );
	(*func)(f0, s1, p2, d3);

double
nci_dfspd( c_func, f0, s1, p2, d3 )
	SV* c_func
	float f0
	short s1
	void * p2
	double d3
PREINIT:
	double(*func)(float, short, void *, double);
CODE:
	func   = INT2PTR(double(*)(float, short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2, d3);
OUTPUT:
	RETVAL

short
nci_sfspd( c_func, f0, s1, p2, d3 )
	SV* c_func
	float f0
	short s1
	void * p2
	double d3
PREINIT:
	short(*func)(float, short, void *, double);
CODE:
	func   = INT2PTR(short(*)(float, short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2, d3);
OUTPUT:
	RETVAL

float
nci_ffspd( c_func, f0, s1, p2, d3 )
	SV* c_func
	float f0
	short s1
	void * p2
	double d3
PREINIT:
	float(*func)(float, short, void *, double);
CODE:
	func   = INT2PTR(float(*)(float, short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2, d3);
OUTPUT:
	RETVAL

char *
nci_tfspd( c_func, f0, s1, p2, d3 )
	SV* c_func
	float f0
	short s1
	void * p2
	double d3
PREINIT:
	char *(*func)(float, short, void *, double);
CODE:
	func   = INT2PTR(char *(*)(float, short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2, d3);
OUTPUT:
	RETVAL

int
nci_ifspd( c_func, f0, s1, p2, d3 )
	SV* c_func
	float f0
	short s1
	void * p2
	double d3
PREINIT:
	int(*func)(float, short, void *, double);
CODE:
	func   = INT2PTR(int(*)(float, short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2, d3);
OUTPUT:
	RETVAL

void *
nci_ptspd( c_func, t0, s1, p2, d3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	double d3
PREINIT:
	void *(*func)(char *, short, void *, double);
CODE:
	func   = INT2PTR(void *(*)(char *, short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2, d3);
OUTPUT:
	RETVAL

void
nci_vtspd( c_func, t0, s1, p2, d3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	double d3
PREINIT:
	void(*func)(char *, short, void *, double);
CODE:
	func   = INT2PTR(void(*)(char *, short, void *, double), SvIV(c_func) );
	(*func)(t0, s1, p2, d3);

double
nci_dtspd( c_func, t0, s1, p2, d3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	double d3
PREINIT:
	double(*func)(char *, short, void *, double);
CODE:
	func   = INT2PTR(double(*)(char *, short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2, d3);
OUTPUT:
	RETVAL

short
nci_stspd( c_func, t0, s1, p2, d3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	double d3
PREINIT:
	short(*func)(char *, short, void *, double);
CODE:
	func   = INT2PTR(short(*)(char *, short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2, d3);
OUTPUT:
	RETVAL

float
nci_ftspd( c_func, t0, s1, p2, d3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	double d3
PREINIT:
	float(*func)(char *, short, void *, double);
CODE:
	func   = INT2PTR(float(*)(char *, short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2, d3);
OUTPUT:
	RETVAL

char *
nci_ttspd( c_func, t0, s1, p2, d3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	double d3
PREINIT:
	char *(*func)(char *, short, void *, double);
CODE:
	func   = INT2PTR(char *(*)(char *, short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2, d3);
OUTPUT:
	RETVAL

int
nci_itspd( c_func, t0, s1, p2, d3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	double d3
PREINIT:
	int(*func)(char *, short, void *, double);
CODE:
	func   = INT2PTR(int(*)(char *, short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2, d3);
OUTPUT:
	RETVAL

void *
nci_pispd( c_func, i0, s1, p2, d3 )
	SV* c_func
	int i0
	short s1
	void * p2
	double d3
PREINIT:
	void *(*func)(int, short, void *, double);
CODE:
	func   = INT2PTR(void *(*)(int, short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2, d3);
OUTPUT:
	RETVAL

void
nci_vispd( c_func, i0, s1, p2, d3 )
	SV* c_func
	int i0
	short s1
	void * p2
	double d3
PREINIT:
	void(*func)(int, short, void *, double);
CODE:
	func   = INT2PTR(void(*)(int, short, void *, double), SvIV(c_func) );
	(*func)(i0, s1, p2, d3);

double
nci_dispd( c_func, i0, s1, p2, d3 )
	SV* c_func
	int i0
	short s1
	void * p2
	double d3
PREINIT:
	double(*func)(int, short, void *, double);
CODE:
	func   = INT2PTR(double(*)(int, short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2, d3);
OUTPUT:
	RETVAL

short
nci_sispd( c_func, i0, s1, p2, d3 )
	SV* c_func
	int i0
	short s1
	void * p2
	double d3
PREINIT:
	short(*func)(int, short, void *, double);
CODE:
	func   = INT2PTR(short(*)(int, short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2, d3);
OUTPUT:
	RETVAL

float
nci_fispd( c_func, i0, s1, p2, d3 )
	SV* c_func
	int i0
	short s1
	void * p2
	double d3
PREINIT:
	float(*func)(int, short, void *, double);
CODE:
	func   = INT2PTR(float(*)(int, short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2, d3);
OUTPUT:
	RETVAL

char *
nci_tispd( c_func, i0, s1, p2, d3 )
	SV* c_func
	int i0
	short s1
	void * p2
	double d3
PREINIT:
	char *(*func)(int, short, void *, double);
CODE:
	func   = INT2PTR(char *(*)(int, short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2, d3);
OUTPUT:
	RETVAL

int
nci_iispd( c_func, i0, s1, p2, d3 )
	SV* c_func
	int i0
	short s1
	void * p2
	double d3
PREINIT:
	int(*func)(int, short, void *, double);
CODE:
	func   = INT2PTR(int(*)(int, short, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2, d3);
OUTPUT:
	RETVAL

void *
nci_ppfpd( c_func, p0, f1, p2, d3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	double d3
PREINIT:
	void *(*func)(void *, float, void *, double);
CODE:
	func   = INT2PTR(void *(*)(void *, float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2, d3);
OUTPUT:
	RETVAL

void
nci_vpfpd( c_func, p0, f1, p2, d3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	double d3
PREINIT:
	void(*func)(void *, float, void *, double);
CODE:
	func   = INT2PTR(void(*)(void *, float, void *, double), SvIV(c_func) );
	(*func)(p0, f1, p2, d3);

double
nci_dpfpd( c_func, p0, f1, p2, d3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	double d3
PREINIT:
	double(*func)(void *, float, void *, double);
CODE:
	func   = INT2PTR(double(*)(void *, float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2, d3);
OUTPUT:
	RETVAL

short
nci_spfpd( c_func, p0, f1, p2, d3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	double d3
PREINIT:
	short(*func)(void *, float, void *, double);
CODE:
	func   = INT2PTR(short(*)(void *, float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2, d3);
OUTPUT:
	RETVAL

float
nci_fpfpd( c_func, p0, f1, p2, d3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	double d3
PREINIT:
	float(*func)(void *, float, void *, double);
CODE:
	func   = INT2PTR(float(*)(void *, float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2, d3);
OUTPUT:
	RETVAL

char *
nci_tpfpd( c_func, p0, f1, p2, d3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	double d3
PREINIT:
	char *(*func)(void *, float, void *, double);
CODE:
	func   = INT2PTR(char *(*)(void *, float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2, d3);
OUTPUT:
	RETVAL

int
nci_ipfpd( c_func, p0, f1, p2, d3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	double d3
PREINIT:
	int(*func)(void *, float, void *, double);
CODE:
	func   = INT2PTR(int(*)(void *, float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2, d3);
OUTPUT:
	RETVAL

void *
nci_pvfpd( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvfpd( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvfpd( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svfpd( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvfpd( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvfpd( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivfpd( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdfpd( c_func, d0, f1, p2, d3 )
	SV* c_func
	double d0
	float f1
	void * p2
	double d3
PREINIT:
	void *(*func)(double, float, void *, double);
CODE:
	func   = INT2PTR(void *(*)(double, float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2, d3);
OUTPUT:
	RETVAL

void
nci_vdfpd( c_func, d0, f1, p2, d3 )
	SV* c_func
	double d0
	float f1
	void * p2
	double d3
PREINIT:
	void(*func)(double, float, void *, double);
CODE:
	func   = INT2PTR(void(*)(double, float, void *, double), SvIV(c_func) );
	(*func)(d0, f1, p2, d3);

double
nci_ddfpd( c_func, d0, f1, p2, d3 )
	SV* c_func
	double d0
	float f1
	void * p2
	double d3
PREINIT:
	double(*func)(double, float, void *, double);
CODE:
	func   = INT2PTR(double(*)(double, float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2, d3);
OUTPUT:
	RETVAL

short
nci_sdfpd( c_func, d0, f1, p2, d3 )
	SV* c_func
	double d0
	float f1
	void * p2
	double d3
PREINIT:
	short(*func)(double, float, void *, double);
CODE:
	func   = INT2PTR(short(*)(double, float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2, d3);
OUTPUT:
	RETVAL

float
nci_fdfpd( c_func, d0, f1, p2, d3 )
	SV* c_func
	double d0
	float f1
	void * p2
	double d3
PREINIT:
	float(*func)(double, float, void *, double);
CODE:
	func   = INT2PTR(float(*)(double, float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2, d3);
OUTPUT:
	RETVAL

char *
nci_tdfpd( c_func, d0, f1, p2, d3 )
	SV* c_func
	double d0
	float f1
	void * p2
	double d3
PREINIT:
	char *(*func)(double, float, void *, double);
CODE:
	func   = INT2PTR(char *(*)(double, float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2, d3);
OUTPUT:
	RETVAL

int
nci_idfpd( c_func, d0, f1, p2, d3 )
	SV* c_func
	double d0
	float f1
	void * p2
	double d3
PREINIT:
	int(*func)(double, float, void *, double);
CODE:
	func   = INT2PTR(int(*)(double, float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2, d3);
OUTPUT:
	RETVAL

void *
nci_psfpd( c_func, s0, f1, p2, d3 )
	SV* c_func
	short s0
	float f1
	void * p2
	double d3
PREINIT:
	void *(*func)(short, float, void *, double);
CODE:
	func   = INT2PTR(void *(*)(short, float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2, d3);
OUTPUT:
	RETVAL

void
nci_vsfpd( c_func, s0, f1, p2, d3 )
	SV* c_func
	short s0
	float f1
	void * p2
	double d3
PREINIT:
	void(*func)(short, float, void *, double);
CODE:
	func   = INT2PTR(void(*)(short, float, void *, double), SvIV(c_func) );
	(*func)(s0, f1, p2, d3);

double
nci_dsfpd( c_func, s0, f1, p2, d3 )
	SV* c_func
	short s0
	float f1
	void * p2
	double d3
PREINIT:
	double(*func)(short, float, void *, double);
CODE:
	func   = INT2PTR(double(*)(short, float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2, d3);
OUTPUT:
	RETVAL

short
nci_ssfpd( c_func, s0, f1, p2, d3 )
	SV* c_func
	short s0
	float f1
	void * p2
	double d3
PREINIT:
	short(*func)(short, float, void *, double);
CODE:
	func   = INT2PTR(short(*)(short, float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2, d3);
OUTPUT:
	RETVAL

float
nci_fsfpd( c_func, s0, f1, p2, d3 )
	SV* c_func
	short s0
	float f1
	void * p2
	double d3
PREINIT:
	float(*func)(short, float, void *, double);
CODE:
	func   = INT2PTR(float(*)(short, float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2, d3);
OUTPUT:
	RETVAL

char *
nci_tsfpd( c_func, s0, f1, p2, d3 )
	SV* c_func
	short s0
	float f1
	void * p2
	double d3
PREINIT:
	char *(*func)(short, float, void *, double);
CODE:
	func   = INT2PTR(char *(*)(short, float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2, d3);
OUTPUT:
	RETVAL

int
nci_isfpd( c_func, s0, f1, p2, d3 )
	SV* c_func
	short s0
	float f1
	void * p2
	double d3
PREINIT:
	int(*func)(short, float, void *, double);
CODE:
	func   = INT2PTR(int(*)(short, float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2, d3);
OUTPUT:
	RETVAL

void *
nci_pffpd( c_func, f0, f1, p2, d3 )
	SV* c_func
	float f0
	float f1
	void * p2
	double d3
PREINIT:
	void *(*func)(float, float, void *, double);
CODE:
	func   = INT2PTR(void *(*)(float, float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2, d3);
OUTPUT:
	RETVAL

void
nci_vffpd( c_func, f0, f1, p2, d3 )
	SV* c_func
	float f0
	float f1
	void * p2
	double d3
PREINIT:
	void(*func)(float, float, void *, double);
CODE:
	func   = INT2PTR(void(*)(float, float, void *, double), SvIV(c_func) );
	(*func)(f0, f1, p2, d3);

double
nci_dffpd( c_func, f0, f1, p2, d3 )
	SV* c_func
	float f0
	float f1
	void * p2
	double d3
PREINIT:
	double(*func)(float, float, void *, double);
CODE:
	func   = INT2PTR(double(*)(float, float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2, d3);
OUTPUT:
	RETVAL

short
nci_sffpd( c_func, f0, f1, p2, d3 )
	SV* c_func
	float f0
	float f1
	void * p2
	double d3
PREINIT:
	short(*func)(float, float, void *, double);
CODE:
	func   = INT2PTR(short(*)(float, float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2, d3);
OUTPUT:
	RETVAL

float
nci_fffpd( c_func, f0, f1, p2, d3 )
	SV* c_func
	float f0
	float f1
	void * p2
	double d3
PREINIT:
	float(*func)(float, float, void *, double);
CODE:
	func   = INT2PTR(float(*)(float, float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2, d3);
OUTPUT:
	RETVAL

char *
nci_tffpd( c_func, f0, f1, p2, d3 )
	SV* c_func
	float f0
	float f1
	void * p2
	double d3
PREINIT:
	char *(*func)(float, float, void *, double);
CODE:
	func   = INT2PTR(char *(*)(float, float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2, d3);
OUTPUT:
	RETVAL

int
nci_iffpd( c_func, f0, f1, p2, d3 )
	SV* c_func
	float f0
	float f1
	void * p2
	double d3
PREINIT:
	int(*func)(float, float, void *, double);
CODE:
	func   = INT2PTR(int(*)(float, float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2, d3);
OUTPUT:
	RETVAL

void *
nci_ptfpd( c_func, t0, f1, p2, d3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	double d3
PREINIT:
	void *(*func)(char *, float, void *, double);
CODE:
	func   = INT2PTR(void *(*)(char *, float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2, d3);
OUTPUT:
	RETVAL

void
nci_vtfpd( c_func, t0, f1, p2, d3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	double d3
PREINIT:
	void(*func)(char *, float, void *, double);
CODE:
	func   = INT2PTR(void(*)(char *, float, void *, double), SvIV(c_func) );
	(*func)(t0, f1, p2, d3);

double
nci_dtfpd( c_func, t0, f1, p2, d3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	double d3
PREINIT:
	double(*func)(char *, float, void *, double);
CODE:
	func   = INT2PTR(double(*)(char *, float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2, d3);
OUTPUT:
	RETVAL

short
nci_stfpd( c_func, t0, f1, p2, d3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	double d3
PREINIT:
	short(*func)(char *, float, void *, double);
CODE:
	func   = INT2PTR(short(*)(char *, float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2, d3);
OUTPUT:
	RETVAL

float
nci_ftfpd( c_func, t0, f1, p2, d3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	double d3
PREINIT:
	float(*func)(char *, float, void *, double);
CODE:
	func   = INT2PTR(float(*)(char *, float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2, d3);
OUTPUT:
	RETVAL

char *
nci_ttfpd( c_func, t0, f1, p2, d3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	double d3
PREINIT:
	char *(*func)(char *, float, void *, double);
CODE:
	func   = INT2PTR(char *(*)(char *, float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2, d3);
OUTPUT:
	RETVAL

int
nci_itfpd( c_func, t0, f1, p2, d3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	double d3
PREINIT:
	int(*func)(char *, float, void *, double);
CODE:
	func   = INT2PTR(int(*)(char *, float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2, d3);
OUTPUT:
	RETVAL

void *
nci_pifpd( c_func, i0, f1, p2, d3 )
	SV* c_func
	int i0
	float f1
	void * p2
	double d3
PREINIT:
	void *(*func)(int, float, void *, double);
CODE:
	func   = INT2PTR(void *(*)(int, float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2, d3);
OUTPUT:
	RETVAL

void
nci_vifpd( c_func, i0, f1, p2, d3 )
	SV* c_func
	int i0
	float f1
	void * p2
	double d3
PREINIT:
	void(*func)(int, float, void *, double);
CODE:
	func   = INT2PTR(void(*)(int, float, void *, double), SvIV(c_func) );
	(*func)(i0, f1, p2, d3);

double
nci_difpd( c_func, i0, f1, p2, d3 )
	SV* c_func
	int i0
	float f1
	void * p2
	double d3
PREINIT:
	double(*func)(int, float, void *, double);
CODE:
	func   = INT2PTR(double(*)(int, float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2, d3);
OUTPUT:
	RETVAL

short
nci_sifpd( c_func, i0, f1, p2, d3 )
	SV* c_func
	int i0
	float f1
	void * p2
	double d3
PREINIT:
	short(*func)(int, float, void *, double);
CODE:
	func   = INT2PTR(short(*)(int, float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2, d3);
OUTPUT:
	RETVAL

float
nci_fifpd( c_func, i0, f1, p2, d3 )
	SV* c_func
	int i0
	float f1
	void * p2
	double d3
PREINIT:
	float(*func)(int, float, void *, double);
CODE:
	func   = INT2PTR(float(*)(int, float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2, d3);
OUTPUT:
	RETVAL

char *
nci_tifpd( c_func, i0, f1, p2, d3 )
	SV* c_func
	int i0
	float f1
	void * p2
	double d3
PREINIT:
	char *(*func)(int, float, void *, double);
CODE:
	func   = INT2PTR(char *(*)(int, float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2, d3);
OUTPUT:
	RETVAL

int
nci_iifpd( c_func, i0, f1, p2, d3 )
	SV* c_func
	int i0
	float f1
	void * p2
	double d3
PREINIT:
	int(*func)(int, float, void *, double);
CODE:
	func   = INT2PTR(int(*)(int, float, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2, d3);
OUTPUT:
	RETVAL

void *
nci_pptpd( c_func, p0, t1, p2, d3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	double d3
PREINIT:
	void *(*func)(void *, char *, void *, double);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2, d3);
OUTPUT:
	RETVAL

void
nci_vptpd( c_func, p0, t1, p2, d3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	double d3
PREINIT:
	void(*func)(void *, char *, void *, double);
CODE:
	func   = INT2PTR(void(*)(void *, char *, void *, double), SvIV(c_func) );
	(*func)(p0, t1, p2, d3);

double
nci_dptpd( c_func, p0, t1, p2, d3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	double d3
PREINIT:
	double(*func)(void *, char *, void *, double);
CODE:
	func   = INT2PTR(double(*)(void *, char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2, d3);
OUTPUT:
	RETVAL

short
nci_sptpd( c_func, p0, t1, p2, d3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	double d3
PREINIT:
	short(*func)(void *, char *, void *, double);
CODE:
	func   = INT2PTR(short(*)(void *, char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2, d3);
OUTPUT:
	RETVAL

float
nci_fptpd( c_func, p0, t1, p2, d3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	double d3
PREINIT:
	float(*func)(void *, char *, void *, double);
CODE:
	func   = INT2PTR(float(*)(void *, char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2, d3);
OUTPUT:
	RETVAL

char *
nci_tptpd( c_func, p0, t1, p2, d3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	double d3
PREINIT:
	char *(*func)(void *, char *, void *, double);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2, d3);
OUTPUT:
	RETVAL

int
nci_iptpd( c_func, p0, t1, p2, d3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	double d3
PREINIT:
	int(*func)(void *, char *, void *, double);
CODE:
	func   = INT2PTR(int(*)(void *, char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2, d3);
OUTPUT:
	RETVAL

void *
nci_pvtpd( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvtpd( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvtpd( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svtpd( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvtpd( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvtpd( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivtpd( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdtpd( c_func, d0, t1, p2, d3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	double d3
PREINIT:
	void *(*func)(double, char *, void *, double);
CODE:
	func   = INT2PTR(void *(*)(double, char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2, d3);
OUTPUT:
	RETVAL

void
nci_vdtpd( c_func, d0, t1, p2, d3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	double d3
PREINIT:
	void(*func)(double, char *, void *, double);
CODE:
	func   = INT2PTR(void(*)(double, char *, void *, double), SvIV(c_func) );
	(*func)(d0, t1, p2, d3);

double
nci_ddtpd( c_func, d0, t1, p2, d3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	double d3
PREINIT:
	double(*func)(double, char *, void *, double);
CODE:
	func   = INT2PTR(double(*)(double, char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2, d3);
OUTPUT:
	RETVAL

short
nci_sdtpd( c_func, d0, t1, p2, d3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	double d3
PREINIT:
	short(*func)(double, char *, void *, double);
CODE:
	func   = INT2PTR(short(*)(double, char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2, d3);
OUTPUT:
	RETVAL

float
nci_fdtpd( c_func, d0, t1, p2, d3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	double d3
PREINIT:
	float(*func)(double, char *, void *, double);
CODE:
	func   = INT2PTR(float(*)(double, char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2, d3);
OUTPUT:
	RETVAL

char *
nci_tdtpd( c_func, d0, t1, p2, d3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	double d3
PREINIT:
	char *(*func)(double, char *, void *, double);
CODE:
	func   = INT2PTR(char *(*)(double, char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2, d3);
OUTPUT:
	RETVAL

int
nci_idtpd( c_func, d0, t1, p2, d3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	double d3
PREINIT:
	int(*func)(double, char *, void *, double);
CODE:
	func   = INT2PTR(int(*)(double, char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2, d3);
OUTPUT:
	RETVAL

void *
nci_pstpd( c_func, s0, t1, p2, d3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	double d3
PREINIT:
	void *(*func)(short, char *, void *, double);
CODE:
	func   = INT2PTR(void *(*)(short, char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2, d3);
OUTPUT:
	RETVAL

void
nci_vstpd( c_func, s0, t1, p2, d3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	double d3
PREINIT:
	void(*func)(short, char *, void *, double);
CODE:
	func   = INT2PTR(void(*)(short, char *, void *, double), SvIV(c_func) );
	(*func)(s0, t1, p2, d3);

double
nci_dstpd( c_func, s0, t1, p2, d3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	double d3
PREINIT:
	double(*func)(short, char *, void *, double);
CODE:
	func   = INT2PTR(double(*)(short, char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2, d3);
OUTPUT:
	RETVAL

short
nci_sstpd( c_func, s0, t1, p2, d3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	double d3
PREINIT:
	short(*func)(short, char *, void *, double);
CODE:
	func   = INT2PTR(short(*)(short, char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2, d3);
OUTPUT:
	RETVAL

float
nci_fstpd( c_func, s0, t1, p2, d3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	double d3
PREINIT:
	float(*func)(short, char *, void *, double);
CODE:
	func   = INT2PTR(float(*)(short, char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2, d3);
OUTPUT:
	RETVAL

char *
nci_tstpd( c_func, s0, t1, p2, d3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	double d3
PREINIT:
	char *(*func)(short, char *, void *, double);
CODE:
	func   = INT2PTR(char *(*)(short, char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2, d3);
OUTPUT:
	RETVAL

int
nci_istpd( c_func, s0, t1, p2, d3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	double d3
PREINIT:
	int(*func)(short, char *, void *, double);
CODE:
	func   = INT2PTR(int(*)(short, char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2, d3);
OUTPUT:
	RETVAL

void *
nci_pftpd( c_func, f0, t1, p2, d3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	double d3
PREINIT:
	void *(*func)(float, char *, void *, double);
CODE:
	func   = INT2PTR(void *(*)(float, char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2, d3);
OUTPUT:
	RETVAL

void
nci_vftpd( c_func, f0, t1, p2, d3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	double d3
PREINIT:
	void(*func)(float, char *, void *, double);
CODE:
	func   = INT2PTR(void(*)(float, char *, void *, double), SvIV(c_func) );
	(*func)(f0, t1, p2, d3);

double
nci_dftpd( c_func, f0, t1, p2, d3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	double d3
PREINIT:
	double(*func)(float, char *, void *, double);
CODE:
	func   = INT2PTR(double(*)(float, char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2, d3);
OUTPUT:
	RETVAL

short
nci_sftpd( c_func, f0, t1, p2, d3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	double d3
PREINIT:
	short(*func)(float, char *, void *, double);
CODE:
	func   = INT2PTR(short(*)(float, char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2, d3);
OUTPUT:
	RETVAL

float
nci_fftpd( c_func, f0, t1, p2, d3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	double d3
PREINIT:
	float(*func)(float, char *, void *, double);
CODE:
	func   = INT2PTR(float(*)(float, char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2, d3);
OUTPUT:
	RETVAL

char *
nci_tftpd( c_func, f0, t1, p2, d3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	double d3
PREINIT:
	char *(*func)(float, char *, void *, double);
CODE:
	func   = INT2PTR(char *(*)(float, char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2, d3);
OUTPUT:
	RETVAL

int
nci_iftpd( c_func, f0, t1, p2, d3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	double d3
PREINIT:
	int(*func)(float, char *, void *, double);
CODE:
	func   = INT2PTR(int(*)(float, char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2, d3);
OUTPUT:
	RETVAL

void *
nci_pttpd( c_func, t0, t1, p2, d3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	double d3
PREINIT:
	void *(*func)(char *, char *, void *, double);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2, d3);
OUTPUT:
	RETVAL

void
nci_vttpd( c_func, t0, t1, p2, d3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	double d3
PREINIT:
	void(*func)(char *, char *, void *, double);
CODE:
	func   = INT2PTR(void(*)(char *, char *, void *, double), SvIV(c_func) );
	(*func)(t0, t1, p2, d3);

double
nci_dttpd( c_func, t0, t1, p2, d3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	double d3
PREINIT:
	double(*func)(char *, char *, void *, double);
CODE:
	func   = INT2PTR(double(*)(char *, char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2, d3);
OUTPUT:
	RETVAL

short
nci_sttpd( c_func, t0, t1, p2, d3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	double d3
PREINIT:
	short(*func)(char *, char *, void *, double);
CODE:
	func   = INT2PTR(short(*)(char *, char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2, d3);
OUTPUT:
	RETVAL

float
nci_fttpd( c_func, t0, t1, p2, d3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	double d3
PREINIT:
	float(*func)(char *, char *, void *, double);
CODE:
	func   = INT2PTR(float(*)(char *, char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2, d3);
OUTPUT:
	RETVAL

char *
nci_tttpd( c_func, t0, t1, p2, d3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	double d3
PREINIT:
	char *(*func)(char *, char *, void *, double);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2, d3);
OUTPUT:
	RETVAL

int
nci_ittpd( c_func, t0, t1, p2, d3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	double d3
PREINIT:
	int(*func)(char *, char *, void *, double);
CODE:
	func   = INT2PTR(int(*)(char *, char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2, d3);
OUTPUT:
	RETVAL

void *
nci_pitpd( c_func, i0, t1, p2, d3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	double d3
PREINIT:
	void *(*func)(int, char *, void *, double);
CODE:
	func   = INT2PTR(void *(*)(int, char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2, d3);
OUTPUT:
	RETVAL

void
nci_vitpd( c_func, i0, t1, p2, d3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	double d3
PREINIT:
	void(*func)(int, char *, void *, double);
CODE:
	func   = INT2PTR(void(*)(int, char *, void *, double), SvIV(c_func) );
	(*func)(i0, t1, p2, d3);

double
nci_ditpd( c_func, i0, t1, p2, d3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	double d3
PREINIT:
	double(*func)(int, char *, void *, double);
CODE:
	func   = INT2PTR(double(*)(int, char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2, d3);
OUTPUT:
	RETVAL

short
nci_sitpd( c_func, i0, t1, p2, d3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	double d3
PREINIT:
	short(*func)(int, char *, void *, double);
CODE:
	func   = INT2PTR(short(*)(int, char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2, d3);
OUTPUT:
	RETVAL

float
nci_fitpd( c_func, i0, t1, p2, d3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	double d3
PREINIT:
	float(*func)(int, char *, void *, double);
CODE:
	func   = INT2PTR(float(*)(int, char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2, d3);
OUTPUT:
	RETVAL

char *
nci_titpd( c_func, i0, t1, p2, d3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	double d3
PREINIT:
	char *(*func)(int, char *, void *, double);
CODE:
	func   = INT2PTR(char *(*)(int, char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2, d3);
OUTPUT:
	RETVAL

int
nci_iitpd( c_func, i0, t1, p2, d3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	double d3
PREINIT:
	int(*func)(int, char *, void *, double);
CODE:
	func   = INT2PTR(int(*)(int, char *, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2, d3);
OUTPUT:
	RETVAL

void *
nci_ppipd( c_func, p0, i1, p2, d3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	double d3
PREINIT:
	void *(*func)(void *, int, void *, double);
CODE:
	func   = INT2PTR(void *(*)(void *, int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2, d3);
OUTPUT:
	RETVAL

void
nci_vpipd( c_func, p0, i1, p2, d3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	double d3
PREINIT:
	void(*func)(void *, int, void *, double);
CODE:
	func   = INT2PTR(void(*)(void *, int, void *, double), SvIV(c_func) );
	(*func)(p0, i1, p2, d3);

double
nci_dpipd( c_func, p0, i1, p2, d3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	double d3
PREINIT:
	double(*func)(void *, int, void *, double);
CODE:
	func   = INT2PTR(double(*)(void *, int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2, d3);
OUTPUT:
	RETVAL

short
nci_spipd( c_func, p0, i1, p2, d3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	double d3
PREINIT:
	short(*func)(void *, int, void *, double);
CODE:
	func   = INT2PTR(short(*)(void *, int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2, d3);
OUTPUT:
	RETVAL

float
nci_fpipd( c_func, p0, i1, p2, d3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	double d3
PREINIT:
	float(*func)(void *, int, void *, double);
CODE:
	func   = INT2PTR(float(*)(void *, int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2, d3);
OUTPUT:
	RETVAL

char *
nci_tpipd( c_func, p0, i1, p2, d3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	double d3
PREINIT:
	char *(*func)(void *, int, void *, double);
CODE:
	func   = INT2PTR(char *(*)(void *, int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2, d3);
OUTPUT:
	RETVAL

int
nci_ipipd( c_func, p0, i1, p2, d3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	double d3
PREINIT:
	int(*func)(void *, int, void *, double);
CODE:
	func   = INT2PTR(int(*)(void *, int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2, d3);
OUTPUT:
	RETVAL

void *
nci_pvipd( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvipd( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvipd( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svipd( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvipd( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvipd( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivipd( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdipd( c_func, d0, i1, p2, d3 )
	SV* c_func
	double d0
	int i1
	void * p2
	double d3
PREINIT:
	void *(*func)(double, int, void *, double);
CODE:
	func   = INT2PTR(void *(*)(double, int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2, d3);
OUTPUT:
	RETVAL

void
nci_vdipd( c_func, d0, i1, p2, d3 )
	SV* c_func
	double d0
	int i1
	void * p2
	double d3
PREINIT:
	void(*func)(double, int, void *, double);
CODE:
	func   = INT2PTR(void(*)(double, int, void *, double), SvIV(c_func) );
	(*func)(d0, i1, p2, d3);

double
nci_ddipd( c_func, d0, i1, p2, d3 )
	SV* c_func
	double d0
	int i1
	void * p2
	double d3
PREINIT:
	double(*func)(double, int, void *, double);
CODE:
	func   = INT2PTR(double(*)(double, int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2, d3);
OUTPUT:
	RETVAL

short
nci_sdipd( c_func, d0, i1, p2, d3 )
	SV* c_func
	double d0
	int i1
	void * p2
	double d3
PREINIT:
	short(*func)(double, int, void *, double);
CODE:
	func   = INT2PTR(short(*)(double, int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2, d3);
OUTPUT:
	RETVAL

float
nci_fdipd( c_func, d0, i1, p2, d3 )
	SV* c_func
	double d0
	int i1
	void * p2
	double d3
PREINIT:
	float(*func)(double, int, void *, double);
CODE:
	func   = INT2PTR(float(*)(double, int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2, d3);
OUTPUT:
	RETVAL

char *
nci_tdipd( c_func, d0, i1, p2, d3 )
	SV* c_func
	double d0
	int i1
	void * p2
	double d3
PREINIT:
	char *(*func)(double, int, void *, double);
CODE:
	func   = INT2PTR(char *(*)(double, int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2, d3);
OUTPUT:
	RETVAL

int
nci_idipd( c_func, d0, i1, p2, d3 )
	SV* c_func
	double d0
	int i1
	void * p2
	double d3
PREINIT:
	int(*func)(double, int, void *, double);
CODE:
	func   = INT2PTR(int(*)(double, int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2, d3);
OUTPUT:
	RETVAL

void *
nci_psipd( c_func, s0, i1, p2, d3 )
	SV* c_func
	short s0
	int i1
	void * p2
	double d3
PREINIT:
	void *(*func)(short, int, void *, double);
CODE:
	func   = INT2PTR(void *(*)(short, int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2, d3);
OUTPUT:
	RETVAL

void
nci_vsipd( c_func, s0, i1, p2, d3 )
	SV* c_func
	short s0
	int i1
	void * p2
	double d3
PREINIT:
	void(*func)(short, int, void *, double);
CODE:
	func   = INT2PTR(void(*)(short, int, void *, double), SvIV(c_func) );
	(*func)(s0, i1, p2, d3);

double
nci_dsipd( c_func, s0, i1, p2, d3 )
	SV* c_func
	short s0
	int i1
	void * p2
	double d3
PREINIT:
	double(*func)(short, int, void *, double);
CODE:
	func   = INT2PTR(double(*)(short, int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2, d3);
OUTPUT:
	RETVAL

short
nci_ssipd( c_func, s0, i1, p2, d3 )
	SV* c_func
	short s0
	int i1
	void * p2
	double d3
PREINIT:
	short(*func)(short, int, void *, double);
CODE:
	func   = INT2PTR(short(*)(short, int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2, d3);
OUTPUT:
	RETVAL

float
nci_fsipd( c_func, s0, i1, p2, d3 )
	SV* c_func
	short s0
	int i1
	void * p2
	double d3
PREINIT:
	float(*func)(short, int, void *, double);
CODE:
	func   = INT2PTR(float(*)(short, int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2, d3);
OUTPUT:
	RETVAL

char *
nci_tsipd( c_func, s0, i1, p2, d3 )
	SV* c_func
	short s0
	int i1
	void * p2
	double d3
PREINIT:
	char *(*func)(short, int, void *, double);
CODE:
	func   = INT2PTR(char *(*)(short, int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2, d3);
OUTPUT:
	RETVAL

int
nci_isipd( c_func, s0, i1, p2, d3 )
	SV* c_func
	short s0
	int i1
	void * p2
	double d3
PREINIT:
	int(*func)(short, int, void *, double);
CODE:
	func   = INT2PTR(int(*)(short, int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2, d3);
OUTPUT:
	RETVAL

void *
nci_pfipd( c_func, f0, i1, p2, d3 )
	SV* c_func
	float f0
	int i1
	void * p2
	double d3
PREINIT:
	void *(*func)(float, int, void *, double);
CODE:
	func   = INT2PTR(void *(*)(float, int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2, d3);
OUTPUT:
	RETVAL

void
nci_vfipd( c_func, f0, i1, p2, d3 )
	SV* c_func
	float f0
	int i1
	void * p2
	double d3
PREINIT:
	void(*func)(float, int, void *, double);
CODE:
	func   = INT2PTR(void(*)(float, int, void *, double), SvIV(c_func) );
	(*func)(f0, i1, p2, d3);

double
nci_dfipd( c_func, f0, i1, p2, d3 )
	SV* c_func
	float f0
	int i1
	void * p2
	double d3
PREINIT:
	double(*func)(float, int, void *, double);
CODE:
	func   = INT2PTR(double(*)(float, int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2, d3);
OUTPUT:
	RETVAL

short
nci_sfipd( c_func, f0, i1, p2, d3 )
	SV* c_func
	float f0
	int i1
	void * p2
	double d3
PREINIT:
	short(*func)(float, int, void *, double);
CODE:
	func   = INT2PTR(short(*)(float, int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2, d3);
OUTPUT:
	RETVAL

float
nci_ffipd( c_func, f0, i1, p2, d3 )
	SV* c_func
	float f0
	int i1
	void * p2
	double d3
PREINIT:
	float(*func)(float, int, void *, double);
CODE:
	func   = INT2PTR(float(*)(float, int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2, d3);
OUTPUT:
	RETVAL

char *
nci_tfipd( c_func, f0, i1, p2, d3 )
	SV* c_func
	float f0
	int i1
	void * p2
	double d3
PREINIT:
	char *(*func)(float, int, void *, double);
CODE:
	func   = INT2PTR(char *(*)(float, int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2, d3);
OUTPUT:
	RETVAL

int
nci_ifipd( c_func, f0, i1, p2, d3 )
	SV* c_func
	float f0
	int i1
	void * p2
	double d3
PREINIT:
	int(*func)(float, int, void *, double);
CODE:
	func   = INT2PTR(int(*)(float, int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2, d3);
OUTPUT:
	RETVAL

void *
nci_ptipd( c_func, t0, i1, p2, d3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	double d3
PREINIT:
	void *(*func)(char *, int, void *, double);
CODE:
	func   = INT2PTR(void *(*)(char *, int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2, d3);
OUTPUT:
	RETVAL

void
nci_vtipd( c_func, t0, i1, p2, d3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	double d3
PREINIT:
	void(*func)(char *, int, void *, double);
CODE:
	func   = INT2PTR(void(*)(char *, int, void *, double), SvIV(c_func) );
	(*func)(t0, i1, p2, d3);

double
nci_dtipd( c_func, t0, i1, p2, d3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	double d3
PREINIT:
	double(*func)(char *, int, void *, double);
CODE:
	func   = INT2PTR(double(*)(char *, int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2, d3);
OUTPUT:
	RETVAL

short
nci_stipd( c_func, t0, i1, p2, d3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	double d3
PREINIT:
	short(*func)(char *, int, void *, double);
CODE:
	func   = INT2PTR(short(*)(char *, int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2, d3);
OUTPUT:
	RETVAL

float
nci_ftipd( c_func, t0, i1, p2, d3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	double d3
PREINIT:
	float(*func)(char *, int, void *, double);
CODE:
	func   = INT2PTR(float(*)(char *, int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2, d3);
OUTPUT:
	RETVAL

char *
nci_ttipd( c_func, t0, i1, p2, d3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	double d3
PREINIT:
	char *(*func)(char *, int, void *, double);
CODE:
	func   = INT2PTR(char *(*)(char *, int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2, d3);
OUTPUT:
	RETVAL

int
nci_itipd( c_func, t0, i1, p2, d3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	double d3
PREINIT:
	int(*func)(char *, int, void *, double);
CODE:
	func   = INT2PTR(int(*)(char *, int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2, d3);
OUTPUT:
	RETVAL

void *
nci_piipd( c_func, i0, i1, p2, d3 )
	SV* c_func
	int i0
	int i1
	void * p2
	double d3
PREINIT:
	void *(*func)(int, int, void *, double);
CODE:
	func   = INT2PTR(void *(*)(int, int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2, d3);
OUTPUT:
	RETVAL

void
nci_viipd( c_func, i0, i1, p2, d3 )
	SV* c_func
	int i0
	int i1
	void * p2
	double d3
PREINIT:
	void(*func)(int, int, void *, double);
CODE:
	func   = INT2PTR(void(*)(int, int, void *, double), SvIV(c_func) );
	(*func)(i0, i1, p2, d3);

double
nci_diipd( c_func, i0, i1, p2, d3 )
	SV* c_func
	int i0
	int i1
	void * p2
	double d3
PREINIT:
	double(*func)(int, int, void *, double);
CODE:
	func   = INT2PTR(double(*)(int, int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2, d3);
OUTPUT:
	RETVAL

short
nci_siipd( c_func, i0, i1, p2, d3 )
	SV* c_func
	int i0
	int i1
	void * p2
	double d3
PREINIT:
	short(*func)(int, int, void *, double);
CODE:
	func   = INT2PTR(short(*)(int, int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2, d3);
OUTPUT:
	RETVAL

float
nci_fiipd( c_func, i0, i1, p2, d3 )
	SV* c_func
	int i0
	int i1
	void * p2
	double d3
PREINIT:
	float(*func)(int, int, void *, double);
CODE:
	func   = INT2PTR(float(*)(int, int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2, d3);
OUTPUT:
	RETVAL

char *
nci_tiipd( c_func, i0, i1, p2, d3 )
	SV* c_func
	int i0
	int i1
	void * p2
	double d3
PREINIT:
	char *(*func)(int, int, void *, double);
CODE:
	func   = INT2PTR(char *(*)(int, int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2, d3);
OUTPUT:
	RETVAL

int
nci_iiipd( c_func, i0, i1, p2, d3 )
	SV* c_func
	int i0
	int i1
	void * p2
	double d3
PREINIT:
	int(*func)(int, int, void *, double);
CODE:
	func   = INT2PTR(int(*)(int, int, void *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2, d3);
OUTPUT:
	RETVAL

void *
nci_pppdd( c_func, p0, p1, d2, d3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	double d3
PREINIT:
	void *(*func)(void *, void *, double, double);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2, d3);
OUTPUT:
	RETVAL

void
nci_vppdd( c_func, p0, p1, d2, d3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	double d3
PREINIT:
	void(*func)(void *, void *, double, double);
CODE:
	func   = INT2PTR(void(*)(void *, void *, double, double), SvIV(c_func) );
	(*func)(p0, p1, d2, d3);

double
nci_dppdd( c_func, p0, p1, d2, d3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	double d3
PREINIT:
	double(*func)(void *, void *, double, double);
CODE:
	func   = INT2PTR(double(*)(void *, void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2, d3);
OUTPUT:
	RETVAL

short
nci_sppdd( c_func, p0, p1, d2, d3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	double d3
PREINIT:
	short(*func)(void *, void *, double, double);
CODE:
	func   = INT2PTR(short(*)(void *, void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2, d3);
OUTPUT:
	RETVAL

float
nci_fppdd( c_func, p0, p1, d2, d3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	double d3
PREINIT:
	float(*func)(void *, void *, double, double);
CODE:
	func   = INT2PTR(float(*)(void *, void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2, d3);
OUTPUT:
	RETVAL

char *
nci_tppdd( c_func, p0, p1, d2, d3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	double d3
PREINIT:
	char *(*func)(void *, void *, double, double);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2, d3);
OUTPUT:
	RETVAL

int
nci_ippdd( c_func, p0, p1, d2, d3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	double d3
PREINIT:
	int(*func)(void *, void *, double, double);
CODE:
	func   = INT2PTR(int(*)(void *, void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2, d3);
OUTPUT:
	RETVAL

void *
nci_pvpdd( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvpdd( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvpdd( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svpdd( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvpdd( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvpdd( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivpdd( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdpdd( c_func, d0, p1, d2, d3 )
	SV* c_func
	double d0
	void * p1
	double d2
	double d3
PREINIT:
	void *(*func)(double, void *, double, double);
CODE:
	func   = INT2PTR(void *(*)(double, void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2, d3);
OUTPUT:
	RETVAL

void
nci_vdpdd( c_func, d0, p1, d2, d3 )
	SV* c_func
	double d0
	void * p1
	double d2
	double d3
PREINIT:
	void(*func)(double, void *, double, double);
CODE:
	func   = INT2PTR(void(*)(double, void *, double, double), SvIV(c_func) );
	(*func)(d0, p1, d2, d3);

double
nci_ddpdd( c_func, d0, p1, d2, d3 )
	SV* c_func
	double d0
	void * p1
	double d2
	double d3
PREINIT:
	double(*func)(double, void *, double, double);
CODE:
	func   = INT2PTR(double(*)(double, void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2, d3);
OUTPUT:
	RETVAL

short
nci_sdpdd( c_func, d0, p1, d2, d3 )
	SV* c_func
	double d0
	void * p1
	double d2
	double d3
PREINIT:
	short(*func)(double, void *, double, double);
CODE:
	func   = INT2PTR(short(*)(double, void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2, d3);
OUTPUT:
	RETVAL

float
nci_fdpdd( c_func, d0, p1, d2, d3 )
	SV* c_func
	double d0
	void * p1
	double d2
	double d3
PREINIT:
	float(*func)(double, void *, double, double);
CODE:
	func   = INT2PTR(float(*)(double, void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2, d3);
OUTPUT:
	RETVAL

char *
nci_tdpdd( c_func, d0, p1, d2, d3 )
	SV* c_func
	double d0
	void * p1
	double d2
	double d3
PREINIT:
	char *(*func)(double, void *, double, double);
CODE:
	func   = INT2PTR(char *(*)(double, void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2, d3);
OUTPUT:
	RETVAL

int
nci_idpdd( c_func, d0, p1, d2, d3 )
	SV* c_func
	double d0
	void * p1
	double d2
	double d3
PREINIT:
	int(*func)(double, void *, double, double);
CODE:
	func   = INT2PTR(int(*)(double, void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2, d3);
OUTPUT:
	RETVAL

void *
nci_pspdd( c_func, s0, p1, d2, d3 )
	SV* c_func
	short s0
	void * p1
	double d2
	double d3
PREINIT:
	void *(*func)(short, void *, double, double);
CODE:
	func   = INT2PTR(void *(*)(short, void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2, d3);
OUTPUT:
	RETVAL

void
nci_vspdd( c_func, s0, p1, d2, d3 )
	SV* c_func
	short s0
	void * p1
	double d2
	double d3
PREINIT:
	void(*func)(short, void *, double, double);
CODE:
	func   = INT2PTR(void(*)(short, void *, double, double), SvIV(c_func) );
	(*func)(s0, p1, d2, d3);

double
nci_dspdd( c_func, s0, p1, d2, d3 )
	SV* c_func
	short s0
	void * p1
	double d2
	double d3
PREINIT:
	double(*func)(short, void *, double, double);
CODE:
	func   = INT2PTR(double(*)(short, void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2, d3);
OUTPUT:
	RETVAL

short
nci_sspdd( c_func, s0, p1, d2, d3 )
	SV* c_func
	short s0
	void * p1
	double d2
	double d3
PREINIT:
	short(*func)(short, void *, double, double);
CODE:
	func   = INT2PTR(short(*)(short, void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2, d3);
OUTPUT:
	RETVAL

float
nci_fspdd( c_func, s0, p1, d2, d3 )
	SV* c_func
	short s0
	void * p1
	double d2
	double d3
PREINIT:
	float(*func)(short, void *, double, double);
CODE:
	func   = INT2PTR(float(*)(short, void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2, d3);
OUTPUT:
	RETVAL

char *
nci_tspdd( c_func, s0, p1, d2, d3 )
	SV* c_func
	short s0
	void * p1
	double d2
	double d3
PREINIT:
	char *(*func)(short, void *, double, double);
CODE:
	func   = INT2PTR(char *(*)(short, void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2, d3);
OUTPUT:
	RETVAL

int
nci_ispdd( c_func, s0, p1, d2, d3 )
	SV* c_func
	short s0
	void * p1
	double d2
	double d3
PREINIT:
	int(*func)(short, void *, double, double);
CODE:
	func   = INT2PTR(int(*)(short, void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2, d3);
OUTPUT:
	RETVAL

void *
nci_pfpdd( c_func, f0, p1, d2, d3 )
	SV* c_func
	float f0
	void * p1
	double d2
	double d3
PREINIT:
	void *(*func)(float, void *, double, double);
CODE:
	func   = INT2PTR(void *(*)(float, void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2, d3);
OUTPUT:
	RETVAL

void
nci_vfpdd( c_func, f0, p1, d2, d3 )
	SV* c_func
	float f0
	void * p1
	double d2
	double d3
PREINIT:
	void(*func)(float, void *, double, double);
CODE:
	func   = INT2PTR(void(*)(float, void *, double, double), SvIV(c_func) );
	(*func)(f0, p1, d2, d3);

double
nci_dfpdd( c_func, f0, p1, d2, d3 )
	SV* c_func
	float f0
	void * p1
	double d2
	double d3
PREINIT:
	double(*func)(float, void *, double, double);
CODE:
	func   = INT2PTR(double(*)(float, void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2, d3);
OUTPUT:
	RETVAL

short
nci_sfpdd( c_func, f0, p1, d2, d3 )
	SV* c_func
	float f0
	void * p1
	double d2
	double d3
PREINIT:
	short(*func)(float, void *, double, double);
CODE:
	func   = INT2PTR(short(*)(float, void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2, d3);
OUTPUT:
	RETVAL

float
nci_ffpdd( c_func, f0, p1, d2, d3 )
	SV* c_func
	float f0
	void * p1
	double d2
	double d3
PREINIT:
	float(*func)(float, void *, double, double);
CODE:
	func   = INT2PTR(float(*)(float, void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2, d3);
OUTPUT:
	RETVAL

char *
nci_tfpdd( c_func, f0, p1, d2, d3 )
	SV* c_func
	float f0
	void * p1
	double d2
	double d3
PREINIT:
	char *(*func)(float, void *, double, double);
CODE:
	func   = INT2PTR(char *(*)(float, void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2, d3);
OUTPUT:
	RETVAL

int
nci_ifpdd( c_func, f0, p1, d2, d3 )
	SV* c_func
	float f0
	void * p1
	double d2
	double d3
PREINIT:
	int(*func)(float, void *, double, double);
CODE:
	func   = INT2PTR(int(*)(float, void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2, d3);
OUTPUT:
	RETVAL

void *
nci_ptpdd( c_func, t0, p1, d2, d3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	double d3
PREINIT:
	void *(*func)(char *, void *, double, double);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2, d3);
OUTPUT:
	RETVAL

void
nci_vtpdd( c_func, t0, p1, d2, d3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	double d3
PREINIT:
	void(*func)(char *, void *, double, double);
CODE:
	func   = INT2PTR(void(*)(char *, void *, double, double), SvIV(c_func) );
	(*func)(t0, p1, d2, d3);

double
nci_dtpdd( c_func, t0, p1, d2, d3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	double d3
PREINIT:
	double(*func)(char *, void *, double, double);
CODE:
	func   = INT2PTR(double(*)(char *, void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2, d3);
OUTPUT:
	RETVAL

short
nci_stpdd( c_func, t0, p1, d2, d3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	double d3
PREINIT:
	short(*func)(char *, void *, double, double);
CODE:
	func   = INT2PTR(short(*)(char *, void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2, d3);
OUTPUT:
	RETVAL

float
nci_ftpdd( c_func, t0, p1, d2, d3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	double d3
PREINIT:
	float(*func)(char *, void *, double, double);
CODE:
	func   = INT2PTR(float(*)(char *, void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2, d3);
OUTPUT:
	RETVAL

char *
nci_ttpdd( c_func, t0, p1, d2, d3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	double d3
PREINIT:
	char *(*func)(char *, void *, double, double);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2, d3);
OUTPUT:
	RETVAL

int
nci_itpdd( c_func, t0, p1, d2, d3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	double d3
PREINIT:
	int(*func)(char *, void *, double, double);
CODE:
	func   = INT2PTR(int(*)(char *, void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2, d3);
OUTPUT:
	RETVAL

void *
nci_pipdd( c_func, i0, p1, d2, d3 )
	SV* c_func
	int i0
	void * p1
	double d2
	double d3
PREINIT:
	void *(*func)(int, void *, double, double);
CODE:
	func   = INT2PTR(void *(*)(int, void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2, d3);
OUTPUT:
	RETVAL

void
nci_vipdd( c_func, i0, p1, d2, d3 )
	SV* c_func
	int i0
	void * p1
	double d2
	double d3
PREINIT:
	void(*func)(int, void *, double, double);
CODE:
	func   = INT2PTR(void(*)(int, void *, double, double), SvIV(c_func) );
	(*func)(i0, p1, d2, d3);

double
nci_dipdd( c_func, i0, p1, d2, d3 )
	SV* c_func
	int i0
	void * p1
	double d2
	double d3
PREINIT:
	double(*func)(int, void *, double, double);
CODE:
	func   = INT2PTR(double(*)(int, void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2, d3);
OUTPUT:
	RETVAL

short
nci_sipdd( c_func, i0, p1, d2, d3 )
	SV* c_func
	int i0
	void * p1
	double d2
	double d3
PREINIT:
	short(*func)(int, void *, double, double);
CODE:
	func   = INT2PTR(short(*)(int, void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2, d3);
OUTPUT:
	RETVAL

float
nci_fipdd( c_func, i0, p1, d2, d3 )
	SV* c_func
	int i0
	void * p1
	double d2
	double d3
PREINIT:
	float(*func)(int, void *, double, double);
CODE:
	func   = INT2PTR(float(*)(int, void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2, d3);
OUTPUT:
	RETVAL

char *
nci_tipdd( c_func, i0, p1, d2, d3 )
	SV* c_func
	int i0
	void * p1
	double d2
	double d3
PREINIT:
	char *(*func)(int, void *, double, double);
CODE:
	func   = INT2PTR(char *(*)(int, void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2, d3);
OUTPUT:
	RETVAL

int
nci_iipdd( c_func, i0, p1, d2, d3 )
	SV* c_func
	int i0
	void * p1
	double d2
	double d3
PREINIT:
	int(*func)(int, void *, double, double);
CODE:
	func   = INT2PTR(int(*)(int, void *, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2, d3);
OUTPUT:
	RETVAL

void *
nci_ppddd( c_func, p0, d1, d2, d3 )
	SV* c_func
	void * p0
	double d1
	double d2
	double d3
PREINIT:
	void *(*func)(void *, double, double, double);
CODE:
	func   = INT2PTR(void *(*)(void *, double, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2, d3);
OUTPUT:
	RETVAL

void
nci_vpddd( c_func, p0, d1, d2, d3 )
	SV* c_func
	void * p0
	double d1
	double d2
	double d3
PREINIT:
	void(*func)(void *, double, double, double);
CODE:
	func   = INT2PTR(void(*)(void *, double, double, double), SvIV(c_func) );
	(*func)(p0, d1, d2, d3);

double
nci_dpddd( c_func, p0, d1, d2, d3 )
	SV* c_func
	void * p0
	double d1
	double d2
	double d3
PREINIT:
	double(*func)(void *, double, double, double);
CODE:
	func   = INT2PTR(double(*)(void *, double, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2, d3);
OUTPUT:
	RETVAL

short
nci_spddd( c_func, p0, d1, d2, d3 )
	SV* c_func
	void * p0
	double d1
	double d2
	double d3
PREINIT:
	short(*func)(void *, double, double, double);
CODE:
	func   = INT2PTR(short(*)(void *, double, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2, d3);
OUTPUT:
	RETVAL

float
nci_fpddd( c_func, p0, d1, d2, d3 )
	SV* c_func
	void * p0
	double d1
	double d2
	double d3
PREINIT:
	float(*func)(void *, double, double, double);
CODE:
	func   = INT2PTR(float(*)(void *, double, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2, d3);
OUTPUT:
	RETVAL

char *
nci_tpddd( c_func, p0, d1, d2, d3 )
	SV* c_func
	void * p0
	double d1
	double d2
	double d3
PREINIT:
	char *(*func)(void *, double, double, double);
CODE:
	func   = INT2PTR(char *(*)(void *, double, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2, d3);
OUTPUT:
	RETVAL

int
nci_ipddd( c_func, p0, d1, d2, d3 )
	SV* c_func
	void * p0
	double d1
	double d2
	double d3
PREINIT:
	int(*func)(void *, double, double, double);
CODE:
	func   = INT2PTR(int(*)(void *, double, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2, d3);
OUTPUT:
	RETVAL

void *
nci_pvddd( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvddd( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvddd( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svddd( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvddd( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvddd( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivddd( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdddd( c_func, d0, d1, d2, d3 )
	SV* c_func
	double d0
	double d1
	double d2
	double d3
PREINIT:
	void *(*func)(double, double, double, double);
CODE:
	func   = INT2PTR(void *(*)(double, double, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2, d3);
OUTPUT:
	RETVAL

void
nci_vdddd( c_func, d0, d1, d2, d3 )
	SV* c_func
	double d0
	double d1
	double d2
	double d3
PREINIT:
	void(*func)(double, double, double, double);
CODE:
	func   = INT2PTR(void(*)(double, double, double, double), SvIV(c_func) );
	(*func)(d0, d1, d2, d3);

double
nci_ddddd( c_func, d0, d1, d2, d3 )
	SV* c_func
	double d0
	double d1
	double d2
	double d3
PREINIT:
	double(*func)(double, double, double, double);
CODE:
	func   = INT2PTR(double(*)(double, double, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2, d3);
OUTPUT:
	RETVAL

short
nci_sdddd( c_func, d0, d1, d2, d3 )
	SV* c_func
	double d0
	double d1
	double d2
	double d3
PREINIT:
	short(*func)(double, double, double, double);
CODE:
	func   = INT2PTR(short(*)(double, double, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2, d3);
OUTPUT:
	RETVAL

float
nci_fdddd( c_func, d0, d1, d2, d3 )
	SV* c_func
	double d0
	double d1
	double d2
	double d3
PREINIT:
	float(*func)(double, double, double, double);
CODE:
	func   = INT2PTR(float(*)(double, double, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2, d3);
OUTPUT:
	RETVAL

char *
nci_tdddd( c_func, d0, d1, d2, d3 )
	SV* c_func
	double d0
	double d1
	double d2
	double d3
PREINIT:
	char *(*func)(double, double, double, double);
CODE:
	func   = INT2PTR(char *(*)(double, double, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2, d3);
OUTPUT:
	RETVAL

int
nci_idddd( c_func, d0, d1, d2, d3 )
	SV* c_func
	double d0
	double d1
	double d2
	double d3
PREINIT:
	int(*func)(double, double, double, double);
CODE:
	func   = INT2PTR(int(*)(double, double, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2, d3);
OUTPUT:
	RETVAL

void *
nci_psddd( c_func, s0, d1, d2, d3 )
	SV* c_func
	short s0
	double d1
	double d2
	double d3
PREINIT:
	void *(*func)(short, double, double, double);
CODE:
	func   = INT2PTR(void *(*)(short, double, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2, d3);
OUTPUT:
	RETVAL

void
nci_vsddd( c_func, s0, d1, d2, d3 )
	SV* c_func
	short s0
	double d1
	double d2
	double d3
PREINIT:
	void(*func)(short, double, double, double);
CODE:
	func   = INT2PTR(void(*)(short, double, double, double), SvIV(c_func) );
	(*func)(s0, d1, d2, d3);

double
nci_dsddd( c_func, s0, d1, d2, d3 )
	SV* c_func
	short s0
	double d1
	double d2
	double d3
PREINIT:
	double(*func)(short, double, double, double);
CODE:
	func   = INT2PTR(double(*)(short, double, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2, d3);
OUTPUT:
	RETVAL

short
nci_ssddd( c_func, s0, d1, d2, d3 )
	SV* c_func
	short s0
	double d1
	double d2
	double d3
PREINIT:
	short(*func)(short, double, double, double);
CODE:
	func   = INT2PTR(short(*)(short, double, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2, d3);
OUTPUT:
	RETVAL

float
nci_fsddd( c_func, s0, d1, d2, d3 )
	SV* c_func
	short s0
	double d1
	double d2
	double d3
PREINIT:
	float(*func)(short, double, double, double);
CODE:
	func   = INT2PTR(float(*)(short, double, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2, d3);
OUTPUT:
	RETVAL

char *
nci_tsddd( c_func, s0, d1, d2, d3 )
	SV* c_func
	short s0
	double d1
	double d2
	double d3
PREINIT:
	char *(*func)(short, double, double, double);
CODE:
	func   = INT2PTR(char *(*)(short, double, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2, d3);
OUTPUT:
	RETVAL

int
nci_isddd( c_func, s0, d1, d2, d3 )
	SV* c_func
	short s0
	double d1
	double d2
	double d3
PREINIT:
	int(*func)(short, double, double, double);
CODE:
	func   = INT2PTR(int(*)(short, double, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2, d3);
OUTPUT:
	RETVAL

void *
nci_pfddd( c_func, f0, d1, d2, d3 )
	SV* c_func
	float f0
	double d1
	double d2
	double d3
PREINIT:
	void *(*func)(float, double, double, double);
CODE:
	func   = INT2PTR(void *(*)(float, double, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2, d3);
OUTPUT:
	RETVAL

void
nci_vfddd( c_func, f0, d1, d2, d3 )
	SV* c_func
	float f0
	double d1
	double d2
	double d3
PREINIT:
	void(*func)(float, double, double, double);
CODE:
	func   = INT2PTR(void(*)(float, double, double, double), SvIV(c_func) );
	(*func)(f0, d1, d2, d3);

double
nci_dfddd( c_func, f0, d1, d2, d3 )
	SV* c_func
	float f0
	double d1
	double d2
	double d3
PREINIT:
	double(*func)(float, double, double, double);
CODE:
	func   = INT2PTR(double(*)(float, double, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2, d3);
OUTPUT:
	RETVAL

short
nci_sfddd( c_func, f0, d1, d2, d3 )
	SV* c_func
	float f0
	double d1
	double d2
	double d3
PREINIT:
	short(*func)(float, double, double, double);
CODE:
	func   = INT2PTR(short(*)(float, double, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2, d3);
OUTPUT:
	RETVAL

float
nci_ffddd( c_func, f0, d1, d2, d3 )
	SV* c_func
	float f0
	double d1
	double d2
	double d3
PREINIT:
	float(*func)(float, double, double, double);
CODE:
	func   = INT2PTR(float(*)(float, double, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2, d3);
OUTPUT:
	RETVAL

char *
nci_tfddd( c_func, f0, d1, d2, d3 )
	SV* c_func
	float f0
	double d1
	double d2
	double d3
PREINIT:
	char *(*func)(float, double, double, double);
CODE:
	func   = INT2PTR(char *(*)(float, double, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2, d3);
OUTPUT:
	RETVAL

int
nci_ifddd( c_func, f0, d1, d2, d3 )
	SV* c_func
	float f0
	double d1
	double d2
	double d3
PREINIT:
	int(*func)(float, double, double, double);
CODE:
	func   = INT2PTR(int(*)(float, double, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2, d3);
OUTPUT:
	RETVAL

void *
nci_ptddd( c_func, t0, d1, d2, d3 )
	SV* c_func
	char * t0
	double d1
	double d2
	double d3
PREINIT:
	void *(*func)(char *, double, double, double);
CODE:
	func   = INT2PTR(void *(*)(char *, double, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2, d3);
OUTPUT:
	RETVAL

void
nci_vtddd( c_func, t0, d1, d2, d3 )
	SV* c_func
	char * t0
	double d1
	double d2
	double d3
PREINIT:
	void(*func)(char *, double, double, double);
CODE:
	func   = INT2PTR(void(*)(char *, double, double, double), SvIV(c_func) );
	(*func)(t0, d1, d2, d3);

double
nci_dtddd( c_func, t0, d1, d2, d3 )
	SV* c_func
	char * t0
	double d1
	double d2
	double d3
PREINIT:
	double(*func)(char *, double, double, double);
CODE:
	func   = INT2PTR(double(*)(char *, double, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2, d3);
OUTPUT:
	RETVAL

short
nci_stddd( c_func, t0, d1, d2, d3 )
	SV* c_func
	char * t0
	double d1
	double d2
	double d3
PREINIT:
	short(*func)(char *, double, double, double);
CODE:
	func   = INT2PTR(short(*)(char *, double, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2, d3);
OUTPUT:
	RETVAL

float
nci_ftddd( c_func, t0, d1, d2, d3 )
	SV* c_func
	char * t0
	double d1
	double d2
	double d3
PREINIT:
	float(*func)(char *, double, double, double);
CODE:
	func   = INT2PTR(float(*)(char *, double, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2, d3);
OUTPUT:
	RETVAL

char *
nci_ttddd( c_func, t0, d1, d2, d3 )
	SV* c_func
	char * t0
	double d1
	double d2
	double d3
PREINIT:
	char *(*func)(char *, double, double, double);
CODE:
	func   = INT2PTR(char *(*)(char *, double, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2, d3);
OUTPUT:
	RETVAL

int
nci_itddd( c_func, t0, d1, d2, d3 )
	SV* c_func
	char * t0
	double d1
	double d2
	double d3
PREINIT:
	int(*func)(char *, double, double, double);
CODE:
	func   = INT2PTR(int(*)(char *, double, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2, d3);
OUTPUT:
	RETVAL

void *
nci_piddd( c_func, i0, d1, d2, d3 )
	SV* c_func
	int i0
	double d1
	double d2
	double d3
PREINIT:
	void *(*func)(int, double, double, double);
CODE:
	func   = INT2PTR(void *(*)(int, double, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2, d3);
OUTPUT:
	RETVAL

void
nci_viddd( c_func, i0, d1, d2, d3 )
	SV* c_func
	int i0
	double d1
	double d2
	double d3
PREINIT:
	void(*func)(int, double, double, double);
CODE:
	func   = INT2PTR(void(*)(int, double, double, double), SvIV(c_func) );
	(*func)(i0, d1, d2, d3);

double
nci_diddd( c_func, i0, d1, d2, d3 )
	SV* c_func
	int i0
	double d1
	double d2
	double d3
PREINIT:
	double(*func)(int, double, double, double);
CODE:
	func   = INT2PTR(double(*)(int, double, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2, d3);
OUTPUT:
	RETVAL

short
nci_siddd( c_func, i0, d1, d2, d3 )
	SV* c_func
	int i0
	double d1
	double d2
	double d3
PREINIT:
	short(*func)(int, double, double, double);
CODE:
	func   = INT2PTR(short(*)(int, double, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2, d3);
OUTPUT:
	RETVAL

float
nci_fiddd( c_func, i0, d1, d2, d3 )
	SV* c_func
	int i0
	double d1
	double d2
	double d3
PREINIT:
	float(*func)(int, double, double, double);
CODE:
	func   = INT2PTR(float(*)(int, double, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2, d3);
OUTPUT:
	RETVAL

char *
nci_tiddd( c_func, i0, d1, d2, d3 )
	SV* c_func
	int i0
	double d1
	double d2
	double d3
PREINIT:
	char *(*func)(int, double, double, double);
CODE:
	func   = INT2PTR(char *(*)(int, double, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2, d3);
OUTPUT:
	RETVAL

int
nci_iiddd( c_func, i0, d1, d2, d3 )
	SV* c_func
	int i0
	double d1
	double d2
	double d3
PREINIT:
	int(*func)(int, double, double, double);
CODE:
	func   = INT2PTR(int(*)(int, double, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2, d3);
OUTPUT:
	RETVAL

void *
nci_ppsdd( c_func, p0, s1, d2, d3 )
	SV* c_func
	void * p0
	short s1
	double d2
	double d3
PREINIT:
	void *(*func)(void *, short, double, double);
CODE:
	func   = INT2PTR(void *(*)(void *, short, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2, d3);
OUTPUT:
	RETVAL

void
nci_vpsdd( c_func, p0, s1, d2, d3 )
	SV* c_func
	void * p0
	short s1
	double d2
	double d3
PREINIT:
	void(*func)(void *, short, double, double);
CODE:
	func   = INT2PTR(void(*)(void *, short, double, double), SvIV(c_func) );
	(*func)(p0, s1, d2, d3);

double
nci_dpsdd( c_func, p0, s1, d2, d3 )
	SV* c_func
	void * p0
	short s1
	double d2
	double d3
PREINIT:
	double(*func)(void *, short, double, double);
CODE:
	func   = INT2PTR(double(*)(void *, short, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2, d3);
OUTPUT:
	RETVAL

short
nci_spsdd( c_func, p0, s1, d2, d3 )
	SV* c_func
	void * p0
	short s1
	double d2
	double d3
PREINIT:
	short(*func)(void *, short, double, double);
CODE:
	func   = INT2PTR(short(*)(void *, short, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2, d3);
OUTPUT:
	RETVAL

float
nci_fpsdd( c_func, p0, s1, d2, d3 )
	SV* c_func
	void * p0
	short s1
	double d2
	double d3
PREINIT:
	float(*func)(void *, short, double, double);
CODE:
	func   = INT2PTR(float(*)(void *, short, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2, d3);
OUTPUT:
	RETVAL

char *
nci_tpsdd( c_func, p0, s1, d2, d3 )
	SV* c_func
	void * p0
	short s1
	double d2
	double d3
PREINIT:
	char *(*func)(void *, short, double, double);
CODE:
	func   = INT2PTR(char *(*)(void *, short, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2, d3);
OUTPUT:
	RETVAL

int
nci_ipsdd( c_func, p0, s1, d2, d3 )
	SV* c_func
	void * p0
	short s1
	double d2
	double d3
PREINIT:
	int(*func)(void *, short, double, double);
CODE:
	func   = INT2PTR(int(*)(void *, short, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2, d3);
OUTPUT:
	RETVAL

void *
nci_pvsdd( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvsdd( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvsdd( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svsdd( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvsdd( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvsdd( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivsdd( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdsdd( c_func, d0, s1, d2, d3 )
	SV* c_func
	double d0
	short s1
	double d2
	double d3
PREINIT:
	void *(*func)(double, short, double, double);
CODE:
	func   = INT2PTR(void *(*)(double, short, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2, d3);
OUTPUT:
	RETVAL

void
nci_vdsdd( c_func, d0, s1, d2, d3 )
	SV* c_func
	double d0
	short s1
	double d2
	double d3
PREINIT:
	void(*func)(double, short, double, double);
CODE:
	func   = INT2PTR(void(*)(double, short, double, double), SvIV(c_func) );
	(*func)(d0, s1, d2, d3);

double
nci_ddsdd( c_func, d0, s1, d2, d3 )
	SV* c_func
	double d0
	short s1
	double d2
	double d3
PREINIT:
	double(*func)(double, short, double, double);
CODE:
	func   = INT2PTR(double(*)(double, short, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2, d3);
OUTPUT:
	RETVAL

short
nci_sdsdd( c_func, d0, s1, d2, d3 )
	SV* c_func
	double d0
	short s1
	double d2
	double d3
PREINIT:
	short(*func)(double, short, double, double);
CODE:
	func   = INT2PTR(short(*)(double, short, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2, d3);
OUTPUT:
	RETVAL

float
nci_fdsdd( c_func, d0, s1, d2, d3 )
	SV* c_func
	double d0
	short s1
	double d2
	double d3
PREINIT:
	float(*func)(double, short, double, double);
CODE:
	func   = INT2PTR(float(*)(double, short, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2, d3);
OUTPUT:
	RETVAL

char *
nci_tdsdd( c_func, d0, s1, d2, d3 )
	SV* c_func
	double d0
	short s1
	double d2
	double d3
PREINIT:
	char *(*func)(double, short, double, double);
CODE:
	func   = INT2PTR(char *(*)(double, short, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2, d3);
OUTPUT:
	RETVAL

int
nci_idsdd( c_func, d0, s1, d2, d3 )
	SV* c_func
	double d0
	short s1
	double d2
	double d3
PREINIT:
	int(*func)(double, short, double, double);
CODE:
	func   = INT2PTR(int(*)(double, short, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2, d3);
OUTPUT:
	RETVAL

void *
nci_pssdd( c_func, s0, s1, d2, d3 )
	SV* c_func
	short s0
	short s1
	double d2
	double d3
PREINIT:
	void *(*func)(short, short, double, double);
CODE:
	func   = INT2PTR(void *(*)(short, short, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2, d3);
OUTPUT:
	RETVAL

void
nci_vssdd( c_func, s0, s1, d2, d3 )
	SV* c_func
	short s0
	short s1
	double d2
	double d3
PREINIT:
	void(*func)(short, short, double, double);
CODE:
	func   = INT2PTR(void(*)(short, short, double, double), SvIV(c_func) );
	(*func)(s0, s1, d2, d3);

double
nci_dssdd( c_func, s0, s1, d2, d3 )
	SV* c_func
	short s0
	short s1
	double d2
	double d3
PREINIT:
	double(*func)(short, short, double, double);
CODE:
	func   = INT2PTR(double(*)(short, short, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2, d3);
OUTPUT:
	RETVAL

short
nci_sssdd( c_func, s0, s1, d2, d3 )
	SV* c_func
	short s0
	short s1
	double d2
	double d3
PREINIT:
	short(*func)(short, short, double, double);
CODE:
	func   = INT2PTR(short(*)(short, short, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2, d3);
OUTPUT:
	RETVAL

float
nci_fssdd( c_func, s0, s1, d2, d3 )
	SV* c_func
	short s0
	short s1
	double d2
	double d3
PREINIT:
	float(*func)(short, short, double, double);
CODE:
	func   = INT2PTR(float(*)(short, short, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2, d3);
OUTPUT:
	RETVAL

char *
nci_tssdd( c_func, s0, s1, d2, d3 )
	SV* c_func
	short s0
	short s1
	double d2
	double d3
PREINIT:
	char *(*func)(short, short, double, double);
CODE:
	func   = INT2PTR(char *(*)(short, short, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2, d3);
OUTPUT:
	RETVAL

int
nci_issdd( c_func, s0, s1, d2, d3 )
	SV* c_func
	short s0
	short s1
	double d2
	double d3
PREINIT:
	int(*func)(short, short, double, double);
CODE:
	func   = INT2PTR(int(*)(short, short, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2, d3);
OUTPUT:
	RETVAL

void *
nci_pfsdd( c_func, f0, s1, d2, d3 )
	SV* c_func
	float f0
	short s1
	double d2
	double d3
PREINIT:
	void *(*func)(float, short, double, double);
CODE:
	func   = INT2PTR(void *(*)(float, short, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2, d3);
OUTPUT:
	RETVAL

void
nci_vfsdd( c_func, f0, s1, d2, d3 )
	SV* c_func
	float f0
	short s1
	double d2
	double d3
PREINIT:
	void(*func)(float, short, double, double);
CODE:
	func   = INT2PTR(void(*)(float, short, double, double), SvIV(c_func) );
	(*func)(f0, s1, d2, d3);

double
nci_dfsdd( c_func, f0, s1, d2, d3 )
	SV* c_func
	float f0
	short s1
	double d2
	double d3
PREINIT:
	double(*func)(float, short, double, double);
CODE:
	func   = INT2PTR(double(*)(float, short, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2, d3);
OUTPUT:
	RETVAL

short
nci_sfsdd( c_func, f0, s1, d2, d3 )
	SV* c_func
	float f0
	short s1
	double d2
	double d3
PREINIT:
	short(*func)(float, short, double, double);
CODE:
	func   = INT2PTR(short(*)(float, short, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2, d3);
OUTPUT:
	RETVAL

float
nci_ffsdd( c_func, f0, s1, d2, d3 )
	SV* c_func
	float f0
	short s1
	double d2
	double d3
PREINIT:
	float(*func)(float, short, double, double);
CODE:
	func   = INT2PTR(float(*)(float, short, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2, d3);
OUTPUT:
	RETVAL

char *
nci_tfsdd( c_func, f0, s1, d2, d3 )
	SV* c_func
	float f0
	short s1
	double d2
	double d3
PREINIT:
	char *(*func)(float, short, double, double);
CODE:
	func   = INT2PTR(char *(*)(float, short, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2, d3);
OUTPUT:
	RETVAL

int
nci_ifsdd( c_func, f0, s1, d2, d3 )
	SV* c_func
	float f0
	short s1
	double d2
	double d3
PREINIT:
	int(*func)(float, short, double, double);
CODE:
	func   = INT2PTR(int(*)(float, short, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2, d3);
OUTPUT:
	RETVAL

void *
nci_ptsdd( c_func, t0, s1, d2, d3 )
	SV* c_func
	char * t0
	short s1
	double d2
	double d3
PREINIT:
	void *(*func)(char *, short, double, double);
CODE:
	func   = INT2PTR(void *(*)(char *, short, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2, d3);
OUTPUT:
	RETVAL

void
nci_vtsdd( c_func, t0, s1, d2, d3 )
	SV* c_func
	char * t0
	short s1
	double d2
	double d3
PREINIT:
	void(*func)(char *, short, double, double);
CODE:
	func   = INT2PTR(void(*)(char *, short, double, double), SvIV(c_func) );
	(*func)(t0, s1, d2, d3);

double
nci_dtsdd( c_func, t0, s1, d2, d3 )
	SV* c_func
	char * t0
	short s1
	double d2
	double d3
PREINIT:
	double(*func)(char *, short, double, double);
CODE:
	func   = INT2PTR(double(*)(char *, short, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2, d3);
OUTPUT:
	RETVAL

short
nci_stsdd( c_func, t0, s1, d2, d3 )
	SV* c_func
	char * t0
	short s1
	double d2
	double d3
PREINIT:
	short(*func)(char *, short, double, double);
CODE:
	func   = INT2PTR(short(*)(char *, short, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2, d3);
OUTPUT:
	RETVAL

float
nci_ftsdd( c_func, t0, s1, d2, d3 )
	SV* c_func
	char * t0
	short s1
	double d2
	double d3
PREINIT:
	float(*func)(char *, short, double, double);
CODE:
	func   = INT2PTR(float(*)(char *, short, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2, d3);
OUTPUT:
	RETVAL

char *
nci_ttsdd( c_func, t0, s1, d2, d3 )
	SV* c_func
	char * t0
	short s1
	double d2
	double d3
PREINIT:
	char *(*func)(char *, short, double, double);
CODE:
	func   = INT2PTR(char *(*)(char *, short, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2, d3);
OUTPUT:
	RETVAL

int
nci_itsdd( c_func, t0, s1, d2, d3 )
	SV* c_func
	char * t0
	short s1
	double d2
	double d3
PREINIT:
	int(*func)(char *, short, double, double);
CODE:
	func   = INT2PTR(int(*)(char *, short, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2, d3);
OUTPUT:
	RETVAL

void *
nci_pisdd( c_func, i0, s1, d2, d3 )
	SV* c_func
	int i0
	short s1
	double d2
	double d3
PREINIT:
	void *(*func)(int, short, double, double);
CODE:
	func   = INT2PTR(void *(*)(int, short, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2, d3);
OUTPUT:
	RETVAL

void
nci_visdd( c_func, i0, s1, d2, d3 )
	SV* c_func
	int i0
	short s1
	double d2
	double d3
PREINIT:
	void(*func)(int, short, double, double);
CODE:
	func   = INT2PTR(void(*)(int, short, double, double), SvIV(c_func) );
	(*func)(i0, s1, d2, d3);

double
nci_disdd( c_func, i0, s1, d2, d3 )
	SV* c_func
	int i0
	short s1
	double d2
	double d3
PREINIT:
	double(*func)(int, short, double, double);
CODE:
	func   = INT2PTR(double(*)(int, short, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2, d3);
OUTPUT:
	RETVAL

short
nci_sisdd( c_func, i0, s1, d2, d3 )
	SV* c_func
	int i0
	short s1
	double d2
	double d3
PREINIT:
	short(*func)(int, short, double, double);
CODE:
	func   = INT2PTR(short(*)(int, short, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2, d3);
OUTPUT:
	RETVAL

float
nci_fisdd( c_func, i0, s1, d2, d3 )
	SV* c_func
	int i0
	short s1
	double d2
	double d3
PREINIT:
	float(*func)(int, short, double, double);
CODE:
	func   = INT2PTR(float(*)(int, short, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2, d3);
OUTPUT:
	RETVAL

char *
nci_tisdd( c_func, i0, s1, d2, d3 )
	SV* c_func
	int i0
	short s1
	double d2
	double d3
PREINIT:
	char *(*func)(int, short, double, double);
CODE:
	func   = INT2PTR(char *(*)(int, short, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2, d3);
OUTPUT:
	RETVAL

int
nci_iisdd( c_func, i0, s1, d2, d3 )
	SV* c_func
	int i0
	short s1
	double d2
	double d3
PREINIT:
	int(*func)(int, short, double, double);
CODE:
	func   = INT2PTR(int(*)(int, short, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2, d3);
OUTPUT:
	RETVAL

void *
nci_ppfdd( c_func, p0, f1, d2, d3 )
	SV* c_func
	void * p0
	float f1
	double d2
	double d3
PREINIT:
	void *(*func)(void *, float, double, double);
CODE:
	func   = INT2PTR(void *(*)(void *, float, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2, d3);
OUTPUT:
	RETVAL

void
nci_vpfdd( c_func, p0, f1, d2, d3 )
	SV* c_func
	void * p0
	float f1
	double d2
	double d3
PREINIT:
	void(*func)(void *, float, double, double);
CODE:
	func   = INT2PTR(void(*)(void *, float, double, double), SvIV(c_func) );
	(*func)(p0, f1, d2, d3);

double
nci_dpfdd( c_func, p0, f1, d2, d3 )
	SV* c_func
	void * p0
	float f1
	double d2
	double d3
PREINIT:
	double(*func)(void *, float, double, double);
CODE:
	func   = INT2PTR(double(*)(void *, float, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2, d3);
OUTPUT:
	RETVAL

short
nci_spfdd( c_func, p0, f1, d2, d3 )
	SV* c_func
	void * p0
	float f1
	double d2
	double d3
PREINIT:
	short(*func)(void *, float, double, double);
CODE:
	func   = INT2PTR(short(*)(void *, float, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2, d3);
OUTPUT:
	RETVAL

float
nci_fpfdd( c_func, p0, f1, d2, d3 )
	SV* c_func
	void * p0
	float f1
	double d2
	double d3
PREINIT:
	float(*func)(void *, float, double, double);
CODE:
	func   = INT2PTR(float(*)(void *, float, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2, d3);
OUTPUT:
	RETVAL

char *
nci_tpfdd( c_func, p0, f1, d2, d3 )
	SV* c_func
	void * p0
	float f1
	double d2
	double d3
PREINIT:
	char *(*func)(void *, float, double, double);
CODE:
	func   = INT2PTR(char *(*)(void *, float, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2, d3);
OUTPUT:
	RETVAL

int
nci_ipfdd( c_func, p0, f1, d2, d3 )
	SV* c_func
	void * p0
	float f1
	double d2
	double d3
PREINIT:
	int(*func)(void *, float, double, double);
CODE:
	func   = INT2PTR(int(*)(void *, float, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2, d3);
OUTPUT:
	RETVAL

void *
nci_pvfdd( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvfdd( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvfdd( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svfdd( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvfdd( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvfdd( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivfdd( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdfdd( c_func, d0, f1, d2, d3 )
	SV* c_func
	double d0
	float f1
	double d2
	double d3
PREINIT:
	void *(*func)(double, float, double, double);
CODE:
	func   = INT2PTR(void *(*)(double, float, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2, d3);
OUTPUT:
	RETVAL

void
nci_vdfdd( c_func, d0, f1, d2, d3 )
	SV* c_func
	double d0
	float f1
	double d2
	double d3
PREINIT:
	void(*func)(double, float, double, double);
CODE:
	func   = INT2PTR(void(*)(double, float, double, double), SvIV(c_func) );
	(*func)(d0, f1, d2, d3);

double
nci_ddfdd( c_func, d0, f1, d2, d3 )
	SV* c_func
	double d0
	float f1
	double d2
	double d3
PREINIT:
	double(*func)(double, float, double, double);
CODE:
	func   = INT2PTR(double(*)(double, float, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2, d3);
OUTPUT:
	RETVAL

short
nci_sdfdd( c_func, d0, f1, d2, d3 )
	SV* c_func
	double d0
	float f1
	double d2
	double d3
PREINIT:
	short(*func)(double, float, double, double);
CODE:
	func   = INT2PTR(short(*)(double, float, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2, d3);
OUTPUT:
	RETVAL

float
nci_fdfdd( c_func, d0, f1, d2, d3 )
	SV* c_func
	double d0
	float f1
	double d2
	double d3
PREINIT:
	float(*func)(double, float, double, double);
CODE:
	func   = INT2PTR(float(*)(double, float, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2, d3);
OUTPUT:
	RETVAL

char *
nci_tdfdd( c_func, d0, f1, d2, d3 )
	SV* c_func
	double d0
	float f1
	double d2
	double d3
PREINIT:
	char *(*func)(double, float, double, double);
CODE:
	func   = INT2PTR(char *(*)(double, float, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2, d3);
OUTPUT:
	RETVAL

int
nci_idfdd( c_func, d0, f1, d2, d3 )
	SV* c_func
	double d0
	float f1
	double d2
	double d3
PREINIT:
	int(*func)(double, float, double, double);
CODE:
	func   = INT2PTR(int(*)(double, float, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2, d3);
OUTPUT:
	RETVAL

void *
nci_psfdd( c_func, s0, f1, d2, d3 )
	SV* c_func
	short s0
	float f1
	double d2
	double d3
PREINIT:
	void *(*func)(short, float, double, double);
CODE:
	func   = INT2PTR(void *(*)(short, float, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2, d3);
OUTPUT:
	RETVAL

void
nci_vsfdd( c_func, s0, f1, d2, d3 )
	SV* c_func
	short s0
	float f1
	double d2
	double d3
PREINIT:
	void(*func)(short, float, double, double);
CODE:
	func   = INT2PTR(void(*)(short, float, double, double), SvIV(c_func) );
	(*func)(s0, f1, d2, d3);

double
nci_dsfdd( c_func, s0, f1, d2, d3 )
	SV* c_func
	short s0
	float f1
	double d2
	double d3
PREINIT:
	double(*func)(short, float, double, double);
CODE:
	func   = INT2PTR(double(*)(short, float, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2, d3);
OUTPUT:
	RETVAL

short
nci_ssfdd( c_func, s0, f1, d2, d3 )
	SV* c_func
	short s0
	float f1
	double d2
	double d3
PREINIT:
	short(*func)(short, float, double, double);
CODE:
	func   = INT2PTR(short(*)(short, float, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2, d3);
OUTPUT:
	RETVAL

float
nci_fsfdd( c_func, s0, f1, d2, d3 )
	SV* c_func
	short s0
	float f1
	double d2
	double d3
PREINIT:
	float(*func)(short, float, double, double);
CODE:
	func   = INT2PTR(float(*)(short, float, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2, d3);
OUTPUT:
	RETVAL

char *
nci_tsfdd( c_func, s0, f1, d2, d3 )
	SV* c_func
	short s0
	float f1
	double d2
	double d3
PREINIT:
	char *(*func)(short, float, double, double);
CODE:
	func   = INT2PTR(char *(*)(short, float, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2, d3);
OUTPUT:
	RETVAL

int
nci_isfdd( c_func, s0, f1, d2, d3 )
	SV* c_func
	short s0
	float f1
	double d2
	double d3
PREINIT:
	int(*func)(short, float, double, double);
CODE:
	func   = INT2PTR(int(*)(short, float, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2, d3);
OUTPUT:
	RETVAL

void *
nci_pffdd( c_func, f0, f1, d2, d3 )
	SV* c_func
	float f0
	float f1
	double d2
	double d3
PREINIT:
	void *(*func)(float, float, double, double);
CODE:
	func   = INT2PTR(void *(*)(float, float, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2, d3);
OUTPUT:
	RETVAL

void
nci_vffdd( c_func, f0, f1, d2, d3 )
	SV* c_func
	float f0
	float f1
	double d2
	double d3
PREINIT:
	void(*func)(float, float, double, double);
CODE:
	func   = INT2PTR(void(*)(float, float, double, double), SvIV(c_func) );
	(*func)(f0, f1, d2, d3);

double
nci_dffdd( c_func, f0, f1, d2, d3 )
	SV* c_func
	float f0
	float f1
	double d2
	double d3
PREINIT:
	double(*func)(float, float, double, double);
CODE:
	func   = INT2PTR(double(*)(float, float, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2, d3);
OUTPUT:
	RETVAL

short
nci_sffdd( c_func, f0, f1, d2, d3 )
	SV* c_func
	float f0
	float f1
	double d2
	double d3
PREINIT:
	short(*func)(float, float, double, double);
CODE:
	func   = INT2PTR(short(*)(float, float, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2, d3);
OUTPUT:
	RETVAL

float
nci_fffdd( c_func, f0, f1, d2, d3 )
	SV* c_func
	float f0
	float f1
	double d2
	double d3
PREINIT:
	float(*func)(float, float, double, double);
CODE:
	func   = INT2PTR(float(*)(float, float, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2, d3);
OUTPUT:
	RETVAL

char *
nci_tffdd( c_func, f0, f1, d2, d3 )
	SV* c_func
	float f0
	float f1
	double d2
	double d3
PREINIT:
	char *(*func)(float, float, double, double);
CODE:
	func   = INT2PTR(char *(*)(float, float, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2, d3);
OUTPUT:
	RETVAL

int
nci_iffdd( c_func, f0, f1, d2, d3 )
	SV* c_func
	float f0
	float f1
	double d2
	double d3
PREINIT:
	int(*func)(float, float, double, double);
CODE:
	func   = INT2PTR(int(*)(float, float, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2, d3);
OUTPUT:
	RETVAL

void *
nci_ptfdd( c_func, t0, f1, d2, d3 )
	SV* c_func
	char * t0
	float f1
	double d2
	double d3
PREINIT:
	void *(*func)(char *, float, double, double);
CODE:
	func   = INT2PTR(void *(*)(char *, float, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2, d3);
OUTPUT:
	RETVAL

void
nci_vtfdd( c_func, t0, f1, d2, d3 )
	SV* c_func
	char * t0
	float f1
	double d2
	double d3
PREINIT:
	void(*func)(char *, float, double, double);
CODE:
	func   = INT2PTR(void(*)(char *, float, double, double), SvIV(c_func) );
	(*func)(t0, f1, d2, d3);

double
nci_dtfdd( c_func, t0, f1, d2, d3 )
	SV* c_func
	char * t0
	float f1
	double d2
	double d3
PREINIT:
	double(*func)(char *, float, double, double);
CODE:
	func   = INT2PTR(double(*)(char *, float, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2, d3);
OUTPUT:
	RETVAL

short
nci_stfdd( c_func, t0, f1, d2, d3 )
	SV* c_func
	char * t0
	float f1
	double d2
	double d3
PREINIT:
	short(*func)(char *, float, double, double);
CODE:
	func   = INT2PTR(short(*)(char *, float, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2, d3);
OUTPUT:
	RETVAL

float
nci_ftfdd( c_func, t0, f1, d2, d3 )
	SV* c_func
	char * t0
	float f1
	double d2
	double d3
PREINIT:
	float(*func)(char *, float, double, double);
CODE:
	func   = INT2PTR(float(*)(char *, float, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2, d3);
OUTPUT:
	RETVAL

char *
nci_ttfdd( c_func, t0, f1, d2, d3 )
	SV* c_func
	char * t0
	float f1
	double d2
	double d3
PREINIT:
	char *(*func)(char *, float, double, double);
CODE:
	func   = INT2PTR(char *(*)(char *, float, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2, d3);
OUTPUT:
	RETVAL

int
nci_itfdd( c_func, t0, f1, d2, d3 )
	SV* c_func
	char * t0
	float f1
	double d2
	double d3
PREINIT:
	int(*func)(char *, float, double, double);
CODE:
	func   = INT2PTR(int(*)(char *, float, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2, d3);
OUTPUT:
	RETVAL

void *
nci_pifdd( c_func, i0, f1, d2, d3 )
	SV* c_func
	int i0
	float f1
	double d2
	double d3
PREINIT:
	void *(*func)(int, float, double, double);
CODE:
	func   = INT2PTR(void *(*)(int, float, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2, d3);
OUTPUT:
	RETVAL

void
nci_vifdd( c_func, i0, f1, d2, d3 )
	SV* c_func
	int i0
	float f1
	double d2
	double d3
PREINIT:
	void(*func)(int, float, double, double);
CODE:
	func   = INT2PTR(void(*)(int, float, double, double), SvIV(c_func) );
	(*func)(i0, f1, d2, d3);

double
nci_difdd( c_func, i0, f1, d2, d3 )
	SV* c_func
	int i0
	float f1
	double d2
	double d3
PREINIT:
	double(*func)(int, float, double, double);
CODE:
	func   = INT2PTR(double(*)(int, float, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2, d3);
OUTPUT:
	RETVAL

short
nci_sifdd( c_func, i0, f1, d2, d3 )
	SV* c_func
	int i0
	float f1
	double d2
	double d3
PREINIT:
	short(*func)(int, float, double, double);
CODE:
	func   = INT2PTR(short(*)(int, float, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2, d3);
OUTPUT:
	RETVAL

float
nci_fifdd( c_func, i0, f1, d2, d3 )
	SV* c_func
	int i0
	float f1
	double d2
	double d3
PREINIT:
	float(*func)(int, float, double, double);
CODE:
	func   = INT2PTR(float(*)(int, float, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2, d3);
OUTPUT:
	RETVAL

char *
nci_tifdd( c_func, i0, f1, d2, d3 )
	SV* c_func
	int i0
	float f1
	double d2
	double d3
PREINIT:
	char *(*func)(int, float, double, double);
CODE:
	func   = INT2PTR(char *(*)(int, float, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2, d3);
OUTPUT:
	RETVAL

int
nci_iifdd( c_func, i0, f1, d2, d3 )
	SV* c_func
	int i0
	float f1
	double d2
	double d3
PREINIT:
	int(*func)(int, float, double, double);
CODE:
	func   = INT2PTR(int(*)(int, float, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2, d3);
OUTPUT:
	RETVAL

void *
nci_pptdd( c_func, p0, t1, d2, d3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	double d3
PREINIT:
	void *(*func)(void *, char *, double, double);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2, d3);
OUTPUT:
	RETVAL

void
nci_vptdd( c_func, p0, t1, d2, d3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	double d3
PREINIT:
	void(*func)(void *, char *, double, double);
CODE:
	func   = INT2PTR(void(*)(void *, char *, double, double), SvIV(c_func) );
	(*func)(p0, t1, d2, d3);

double
nci_dptdd( c_func, p0, t1, d2, d3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	double d3
PREINIT:
	double(*func)(void *, char *, double, double);
CODE:
	func   = INT2PTR(double(*)(void *, char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2, d3);
OUTPUT:
	RETVAL

short
nci_sptdd( c_func, p0, t1, d2, d3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	double d3
PREINIT:
	short(*func)(void *, char *, double, double);
CODE:
	func   = INT2PTR(short(*)(void *, char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2, d3);
OUTPUT:
	RETVAL

float
nci_fptdd( c_func, p0, t1, d2, d3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	double d3
PREINIT:
	float(*func)(void *, char *, double, double);
CODE:
	func   = INT2PTR(float(*)(void *, char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2, d3);
OUTPUT:
	RETVAL

char *
nci_tptdd( c_func, p0, t1, d2, d3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	double d3
PREINIT:
	char *(*func)(void *, char *, double, double);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2, d3);
OUTPUT:
	RETVAL

int
nci_iptdd( c_func, p0, t1, d2, d3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	double d3
PREINIT:
	int(*func)(void *, char *, double, double);
CODE:
	func   = INT2PTR(int(*)(void *, char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2, d3);
OUTPUT:
	RETVAL

void *
nci_pvtdd( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvtdd( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvtdd( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svtdd( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvtdd( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvtdd( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivtdd( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdtdd( c_func, d0, t1, d2, d3 )
	SV* c_func
	double d0
	char * t1
	double d2
	double d3
PREINIT:
	void *(*func)(double, char *, double, double);
CODE:
	func   = INT2PTR(void *(*)(double, char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2, d3);
OUTPUT:
	RETVAL

void
nci_vdtdd( c_func, d0, t1, d2, d3 )
	SV* c_func
	double d0
	char * t1
	double d2
	double d3
PREINIT:
	void(*func)(double, char *, double, double);
CODE:
	func   = INT2PTR(void(*)(double, char *, double, double), SvIV(c_func) );
	(*func)(d0, t1, d2, d3);

double
nci_ddtdd( c_func, d0, t1, d2, d3 )
	SV* c_func
	double d0
	char * t1
	double d2
	double d3
PREINIT:
	double(*func)(double, char *, double, double);
CODE:
	func   = INT2PTR(double(*)(double, char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2, d3);
OUTPUT:
	RETVAL

short
nci_sdtdd( c_func, d0, t1, d2, d3 )
	SV* c_func
	double d0
	char * t1
	double d2
	double d3
PREINIT:
	short(*func)(double, char *, double, double);
CODE:
	func   = INT2PTR(short(*)(double, char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2, d3);
OUTPUT:
	RETVAL

float
nci_fdtdd( c_func, d0, t1, d2, d3 )
	SV* c_func
	double d0
	char * t1
	double d2
	double d3
PREINIT:
	float(*func)(double, char *, double, double);
CODE:
	func   = INT2PTR(float(*)(double, char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2, d3);
OUTPUT:
	RETVAL

char *
nci_tdtdd( c_func, d0, t1, d2, d3 )
	SV* c_func
	double d0
	char * t1
	double d2
	double d3
PREINIT:
	char *(*func)(double, char *, double, double);
CODE:
	func   = INT2PTR(char *(*)(double, char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2, d3);
OUTPUT:
	RETVAL

int
nci_idtdd( c_func, d0, t1, d2, d3 )
	SV* c_func
	double d0
	char * t1
	double d2
	double d3
PREINIT:
	int(*func)(double, char *, double, double);
CODE:
	func   = INT2PTR(int(*)(double, char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2, d3);
OUTPUT:
	RETVAL

void *
nci_pstdd( c_func, s0, t1, d2, d3 )
	SV* c_func
	short s0
	char * t1
	double d2
	double d3
PREINIT:
	void *(*func)(short, char *, double, double);
CODE:
	func   = INT2PTR(void *(*)(short, char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2, d3);
OUTPUT:
	RETVAL

void
nci_vstdd( c_func, s0, t1, d2, d3 )
	SV* c_func
	short s0
	char * t1
	double d2
	double d3
PREINIT:
	void(*func)(short, char *, double, double);
CODE:
	func   = INT2PTR(void(*)(short, char *, double, double), SvIV(c_func) );
	(*func)(s0, t1, d2, d3);

double
nci_dstdd( c_func, s0, t1, d2, d3 )
	SV* c_func
	short s0
	char * t1
	double d2
	double d3
PREINIT:
	double(*func)(short, char *, double, double);
CODE:
	func   = INT2PTR(double(*)(short, char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2, d3);
OUTPUT:
	RETVAL

short
nci_sstdd( c_func, s0, t1, d2, d3 )
	SV* c_func
	short s0
	char * t1
	double d2
	double d3
PREINIT:
	short(*func)(short, char *, double, double);
CODE:
	func   = INT2PTR(short(*)(short, char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2, d3);
OUTPUT:
	RETVAL

float
nci_fstdd( c_func, s0, t1, d2, d3 )
	SV* c_func
	short s0
	char * t1
	double d2
	double d3
PREINIT:
	float(*func)(short, char *, double, double);
CODE:
	func   = INT2PTR(float(*)(short, char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2, d3);
OUTPUT:
	RETVAL

char *
nci_tstdd( c_func, s0, t1, d2, d3 )
	SV* c_func
	short s0
	char * t1
	double d2
	double d3
PREINIT:
	char *(*func)(short, char *, double, double);
CODE:
	func   = INT2PTR(char *(*)(short, char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2, d3);
OUTPUT:
	RETVAL

int
nci_istdd( c_func, s0, t1, d2, d3 )
	SV* c_func
	short s0
	char * t1
	double d2
	double d3
PREINIT:
	int(*func)(short, char *, double, double);
CODE:
	func   = INT2PTR(int(*)(short, char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2, d3);
OUTPUT:
	RETVAL

void *
nci_pftdd( c_func, f0, t1, d2, d3 )
	SV* c_func
	float f0
	char * t1
	double d2
	double d3
PREINIT:
	void *(*func)(float, char *, double, double);
CODE:
	func   = INT2PTR(void *(*)(float, char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2, d3);
OUTPUT:
	RETVAL

void
nci_vftdd( c_func, f0, t1, d2, d3 )
	SV* c_func
	float f0
	char * t1
	double d2
	double d3
PREINIT:
	void(*func)(float, char *, double, double);
CODE:
	func   = INT2PTR(void(*)(float, char *, double, double), SvIV(c_func) );
	(*func)(f0, t1, d2, d3);

double
nci_dftdd( c_func, f0, t1, d2, d3 )
	SV* c_func
	float f0
	char * t1
	double d2
	double d3
PREINIT:
	double(*func)(float, char *, double, double);
CODE:
	func   = INT2PTR(double(*)(float, char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2, d3);
OUTPUT:
	RETVAL

short
nci_sftdd( c_func, f0, t1, d2, d3 )
	SV* c_func
	float f0
	char * t1
	double d2
	double d3
PREINIT:
	short(*func)(float, char *, double, double);
CODE:
	func   = INT2PTR(short(*)(float, char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2, d3);
OUTPUT:
	RETVAL

float
nci_fftdd( c_func, f0, t1, d2, d3 )
	SV* c_func
	float f0
	char * t1
	double d2
	double d3
PREINIT:
	float(*func)(float, char *, double, double);
CODE:
	func   = INT2PTR(float(*)(float, char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2, d3);
OUTPUT:
	RETVAL

char *
nci_tftdd( c_func, f0, t1, d2, d3 )
	SV* c_func
	float f0
	char * t1
	double d2
	double d3
PREINIT:
	char *(*func)(float, char *, double, double);
CODE:
	func   = INT2PTR(char *(*)(float, char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2, d3);
OUTPUT:
	RETVAL

int
nci_iftdd( c_func, f0, t1, d2, d3 )
	SV* c_func
	float f0
	char * t1
	double d2
	double d3
PREINIT:
	int(*func)(float, char *, double, double);
CODE:
	func   = INT2PTR(int(*)(float, char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2, d3);
OUTPUT:
	RETVAL

void *
nci_pttdd( c_func, t0, t1, d2, d3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	double d3
PREINIT:
	void *(*func)(char *, char *, double, double);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2, d3);
OUTPUT:
	RETVAL

void
nci_vttdd( c_func, t0, t1, d2, d3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	double d3
PREINIT:
	void(*func)(char *, char *, double, double);
CODE:
	func   = INT2PTR(void(*)(char *, char *, double, double), SvIV(c_func) );
	(*func)(t0, t1, d2, d3);

double
nci_dttdd( c_func, t0, t1, d2, d3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	double d3
PREINIT:
	double(*func)(char *, char *, double, double);
CODE:
	func   = INT2PTR(double(*)(char *, char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2, d3);
OUTPUT:
	RETVAL

short
nci_sttdd( c_func, t0, t1, d2, d3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	double d3
PREINIT:
	short(*func)(char *, char *, double, double);
CODE:
	func   = INT2PTR(short(*)(char *, char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2, d3);
OUTPUT:
	RETVAL

float
nci_fttdd( c_func, t0, t1, d2, d3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	double d3
PREINIT:
	float(*func)(char *, char *, double, double);
CODE:
	func   = INT2PTR(float(*)(char *, char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2, d3);
OUTPUT:
	RETVAL

char *
nci_tttdd( c_func, t0, t1, d2, d3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	double d3
PREINIT:
	char *(*func)(char *, char *, double, double);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2, d3);
OUTPUT:
	RETVAL

int
nci_ittdd( c_func, t0, t1, d2, d3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	double d3
PREINIT:
	int(*func)(char *, char *, double, double);
CODE:
	func   = INT2PTR(int(*)(char *, char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2, d3);
OUTPUT:
	RETVAL

void *
nci_pitdd( c_func, i0, t1, d2, d3 )
	SV* c_func
	int i0
	char * t1
	double d2
	double d3
PREINIT:
	void *(*func)(int, char *, double, double);
CODE:
	func   = INT2PTR(void *(*)(int, char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2, d3);
OUTPUT:
	RETVAL

void
nci_vitdd( c_func, i0, t1, d2, d3 )
	SV* c_func
	int i0
	char * t1
	double d2
	double d3
PREINIT:
	void(*func)(int, char *, double, double);
CODE:
	func   = INT2PTR(void(*)(int, char *, double, double), SvIV(c_func) );
	(*func)(i0, t1, d2, d3);

double
nci_ditdd( c_func, i0, t1, d2, d3 )
	SV* c_func
	int i0
	char * t1
	double d2
	double d3
PREINIT:
	double(*func)(int, char *, double, double);
CODE:
	func   = INT2PTR(double(*)(int, char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2, d3);
OUTPUT:
	RETVAL

short
nci_sitdd( c_func, i0, t1, d2, d3 )
	SV* c_func
	int i0
	char * t1
	double d2
	double d3
PREINIT:
	short(*func)(int, char *, double, double);
CODE:
	func   = INT2PTR(short(*)(int, char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2, d3);
OUTPUT:
	RETVAL

float
nci_fitdd( c_func, i0, t1, d2, d3 )
	SV* c_func
	int i0
	char * t1
	double d2
	double d3
PREINIT:
	float(*func)(int, char *, double, double);
CODE:
	func   = INT2PTR(float(*)(int, char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2, d3);
OUTPUT:
	RETVAL

char *
nci_titdd( c_func, i0, t1, d2, d3 )
	SV* c_func
	int i0
	char * t1
	double d2
	double d3
PREINIT:
	char *(*func)(int, char *, double, double);
CODE:
	func   = INT2PTR(char *(*)(int, char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2, d3);
OUTPUT:
	RETVAL

int
nci_iitdd( c_func, i0, t1, d2, d3 )
	SV* c_func
	int i0
	char * t1
	double d2
	double d3
PREINIT:
	int(*func)(int, char *, double, double);
CODE:
	func   = INT2PTR(int(*)(int, char *, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2, d3);
OUTPUT:
	RETVAL

void *
nci_ppidd( c_func, p0, i1, d2, d3 )
	SV* c_func
	void * p0
	int i1
	double d2
	double d3
PREINIT:
	void *(*func)(void *, int, double, double);
CODE:
	func   = INT2PTR(void *(*)(void *, int, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2, d3);
OUTPUT:
	RETVAL

void
nci_vpidd( c_func, p0, i1, d2, d3 )
	SV* c_func
	void * p0
	int i1
	double d2
	double d3
PREINIT:
	void(*func)(void *, int, double, double);
CODE:
	func   = INT2PTR(void(*)(void *, int, double, double), SvIV(c_func) );
	(*func)(p0, i1, d2, d3);

double
nci_dpidd( c_func, p0, i1, d2, d3 )
	SV* c_func
	void * p0
	int i1
	double d2
	double d3
PREINIT:
	double(*func)(void *, int, double, double);
CODE:
	func   = INT2PTR(double(*)(void *, int, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2, d3);
OUTPUT:
	RETVAL

short
nci_spidd( c_func, p0, i1, d2, d3 )
	SV* c_func
	void * p0
	int i1
	double d2
	double d3
PREINIT:
	short(*func)(void *, int, double, double);
CODE:
	func   = INT2PTR(short(*)(void *, int, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2, d3);
OUTPUT:
	RETVAL

float
nci_fpidd( c_func, p0, i1, d2, d3 )
	SV* c_func
	void * p0
	int i1
	double d2
	double d3
PREINIT:
	float(*func)(void *, int, double, double);
CODE:
	func   = INT2PTR(float(*)(void *, int, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2, d3);
OUTPUT:
	RETVAL

char *
nci_tpidd( c_func, p0, i1, d2, d3 )
	SV* c_func
	void * p0
	int i1
	double d2
	double d3
PREINIT:
	char *(*func)(void *, int, double, double);
CODE:
	func   = INT2PTR(char *(*)(void *, int, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2, d3);
OUTPUT:
	RETVAL

int
nci_ipidd( c_func, p0, i1, d2, d3 )
	SV* c_func
	void * p0
	int i1
	double d2
	double d3
PREINIT:
	int(*func)(void *, int, double, double);
CODE:
	func   = INT2PTR(int(*)(void *, int, double, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2, d3);
OUTPUT:
	RETVAL

void *
nci_pvidd( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvidd( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvidd( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svidd( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvidd( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvidd( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ividd( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdidd( c_func, d0, i1, d2, d3 )
	SV* c_func
	double d0
	int i1
	double d2
	double d3
PREINIT:
	void *(*func)(double, int, double, double);
CODE:
	func   = INT2PTR(void *(*)(double, int, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2, d3);
OUTPUT:
	RETVAL

void
nci_vdidd( c_func, d0, i1, d2, d3 )
	SV* c_func
	double d0
	int i1
	double d2
	double d3
PREINIT:
	void(*func)(double, int, double, double);
CODE:
	func   = INT2PTR(void(*)(double, int, double, double), SvIV(c_func) );
	(*func)(d0, i1, d2, d3);

double
nci_ddidd( c_func, d0, i1, d2, d3 )
	SV* c_func
	double d0
	int i1
	double d2
	double d3
PREINIT:
	double(*func)(double, int, double, double);
CODE:
	func   = INT2PTR(double(*)(double, int, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2, d3);
OUTPUT:
	RETVAL

short
nci_sdidd( c_func, d0, i1, d2, d3 )
	SV* c_func
	double d0
	int i1
	double d2
	double d3
PREINIT:
	short(*func)(double, int, double, double);
CODE:
	func   = INT2PTR(short(*)(double, int, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2, d3);
OUTPUT:
	RETVAL

float
nci_fdidd( c_func, d0, i1, d2, d3 )
	SV* c_func
	double d0
	int i1
	double d2
	double d3
PREINIT:
	float(*func)(double, int, double, double);
CODE:
	func   = INT2PTR(float(*)(double, int, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2, d3);
OUTPUT:
	RETVAL

char *
nci_tdidd( c_func, d0, i1, d2, d3 )
	SV* c_func
	double d0
	int i1
	double d2
	double d3
PREINIT:
	char *(*func)(double, int, double, double);
CODE:
	func   = INT2PTR(char *(*)(double, int, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2, d3);
OUTPUT:
	RETVAL

int
nci_ididd( c_func, d0, i1, d2, d3 )
	SV* c_func
	double d0
	int i1
	double d2
	double d3
PREINIT:
	int(*func)(double, int, double, double);
CODE:
	func   = INT2PTR(int(*)(double, int, double, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2, d3);
OUTPUT:
	RETVAL

void *
nci_psidd( c_func, s0, i1, d2, d3 )
	SV* c_func
	short s0
	int i1
	double d2
	double d3
PREINIT:
	void *(*func)(short, int, double, double);
CODE:
	func   = INT2PTR(void *(*)(short, int, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2, d3);
OUTPUT:
	RETVAL

void
nci_vsidd( c_func, s0, i1, d2, d3 )
	SV* c_func
	short s0
	int i1
	double d2
	double d3
PREINIT:
	void(*func)(short, int, double, double);
CODE:
	func   = INT2PTR(void(*)(short, int, double, double), SvIV(c_func) );
	(*func)(s0, i1, d2, d3);

double
nci_dsidd( c_func, s0, i1, d2, d3 )
	SV* c_func
	short s0
	int i1
	double d2
	double d3
PREINIT:
	double(*func)(short, int, double, double);
CODE:
	func   = INT2PTR(double(*)(short, int, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2, d3);
OUTPUT:
	RETVAL

short
nci_ssidd( c_func, s0, i1, d2, d3 )
	SV* c_func
	short s0
	int i1
	double d2
	double d3
PREINIT:
	short(*func)(short, int, double, double);
CODE:
	func   = INT2PTR(short(*)(short, int, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2, d3);
OUTPUT:
	RETVAL

float
nci_fsidd( c_func, s0, i1, d2, d3 )
	SV* c_func
	short s0
	int i1
	double d2
	double d3
PREINIT:
	float(*func)(short, int, double, double);
CODE:
	func   = INT2PTR(float(*)(short, int, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2, d3);
OUTPUT:
	RETVAL

char *
nci_tsidd( c_func, s0, i1, d2, d3 )
	SV* c_func
	short s0
	int i1
	double d2
	double d3
PREINIT:
	char *(*func)(short, int, double, double);
CODE:
	func   = INT2PTR(char *(*)(short, int, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2, d3);
OUTPUT:
	RETVAL

int
nci_isidd( c_func, s0, i1, d2, d3 )
	SV* c_func
	short s0
	int i1
	double d2
	double d3
PREINIT:
	int(*func)(short, int, double, double);
CODE:
	func   = INT2PTR(int(*)(short, int, double, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2, d3);
OUTPUT:
	RETVAL

void *
nci_pfidd( c_func, f0, i1, d2, d3 )
	SV* c_func
	float f0
	int i1
	double d2
	double d3
PREINIT:
	void *(*func)(float, int, double, double);
CODE:
	func   = INT2PTR(void *(*)(float, int, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2, d3);
OUTPUT:
	RETVAL

void
nci_vfidd( c_func, f0, i1, d2, d3 )
	SV* c_func
	float f0
	int i1
	double d2
	double d3
PREINIT:
	void(*func)(float, int, double, double);
CODE:
	func   = INT2PTR(void(*)(float, int, double, double), SvIV(c_func) );
	(*func)(f0, i1, d2, d3);

double
nci_dfidd( c_func, f0, i1, d2, d3 )
	SV* c_func
	float f0
	int i1
	double d2
	double d3
PREINIT:
	double(*func)(float, int, double, double);
CODE:
	func   = INT2PTR(double(*)(float, int, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2, d3);
OUTPUT:
	RETVAL

short
nci_sfidd( c_func, f0, i1, d2, d3 )
	SV* c_func
	float f0
	int i1
	double d2
	double d3
PREINIT:
	short(*func)(float, int, double, double);
CODE:
	func   = INT2PTR(short(*)(float, int, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2, d3);
OUTPUT:
	RETVAL

float
nci_ffidd( c_func, f0, i1, d2, d3 )
	SV* c_func
	float f0
	int i1
	double d2
	double d3
PREINIT:
	float(*func)(float, int, double, double);
CODE:
	func   = INT2PTR(float(*)(float, int, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2, d3);
OUTPUT:
	RETVAL

char *
nci_tfidd( c_func, f0, i1, d2, d3 )
	SV* c_func
	float f0
	int i1
	double d2
	double d3
PREINIT:
	char *(*func)(float, int, double, double);
CODE:
	func   = INT2PTR(char *(*)(float, int, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2, d3);
OUTPUT:
	RETVAL

int
nci_ifidd( c_func, f0, i1, d2, d3 )
	SV* c_func
	float f0
	int i1
	double d2
	double d3
PREINIT:
	int(*func)(float, int, double, double);
CODE:
	func   = INT2PTR(int(*)(float, int, double, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2, d3);
OUTPUT:
	RETVAL

void *
nci_ptidd( c_func, t0, i1, d2, d3 )
	SV* c_func
	char * t0
	int i1
	double d2
	double d3
PREINIT:
	void *(*func)(char *, int, double, double);
CODE:
	func   = INT2PTR(void *(*)(char *, int, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2, d3);
OUTPUT:
	RETVAL

void
nci_vtidd( c_func, t0, i1, d2, d3 )
	SV* c_func
	char * t0
	int i1
	double d2
	double d3
PREINIT:
	void(*func)(char *, int, double, double);
CODE:
	func   = INT2PTR(void(*)(char *, int, double, double), SvIV(c_func) );
	(*func)(t0, i1, d2, d3);

double
nci_dtidd( c_func, t0, i1, d2, d3 )
	SV* c_func
	char * t0
	int i1
	double d2
	double d3
PREINIT:
	double(*func)(char *, int, double, double);
CODE:
	func   = INT2PTR(double(*)(char *, int, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2, d3);
OUTPUT:
	RETVAL

short
nci_stidd( c_func, t0, i1, d2, d3 )
	SV* c_func
	char * t0
	int i1
	double d2
	double d3
PREINIT:
	short(*func)(char *, int, double, double);
CODE:
	func   = INT2PTR(short(*)(char *, int, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2, d3);
OUTPUT:
	RETVAL

float
nci_ftidd( c_func, t0, i1, d2, d3 )
	SV* c_func
	char * t0
	int i1
	double d2
	double d3
PREINIT:
	float(*func)(char *, int, double, double);
CODE:
	func   = INT2PTR(float(*)(char *, int, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2, d3);
OUTPUT:
	RETVAL

char *
nci_ttidd( c_func, t0, i1, d2, d3 )
	SV* c_func
	char * t0
	int i1
	double d2
	double d3
PREINIT:
	char *(*func)(char *, int, double, double);
CODE:
	func   = INT2PTR(char *(*)(char *, int, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2, d3);
OUTPUT:
	RETVAL

int
nci_itidd( c_func, t0, i1, d2, d3 )
	SV* c_func
	char * t0
	int i1
	double d2
	double d3
PREINIT:
	int(*func)(char *, int, double, double);
CODE:
	func   = INT2PTR(int(*)(char *, int, double, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2, d3);
OUTPUT:
	RETVAL

void *
nci_piidd( c_func, i0, i1, d2, d3 )
	SV* c_func
	int i0
	int i1
	double d2
	double d3
PREINIT:
	void *(*func)(int, int, double, double);
CODE:
	func   = INT2PTR(void *(*)(int, int, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2, d3);
OUTPUT:
	RETVAL

void
nci_viidd( c_func, i0, i1, d2, d3 )
	SV* c_func
	int i0
	int i1
	double d2
	double d3
PREINIT:
	void(*func)(int, int, double, double);
CODE:
	func   = INT2PTR(void(*)(int, int, double, double), SvIV(c_func) );
	(*func)(i0, i1, d2, d3);

double
nci_diidd( c_func, i0, i1, d2, d3 )
	SV* c_func
	int i0
	int i1
	double d2
	double d3
PREINIT:
	double(*func)(int, int, double, double);
CODE:
	func   = INT2PTR(double(*)(int, int, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2, d3);
OUTPUT:
	RETVAL

short
nci_siidd( c_func, i0, i1, d2, d3 )
	SV* c_func
	int i0
	int i1
	double d2
	double d3
PREINIT:
	short(*func)(int, int, double, double);
CODE:
	func   = INT2PTR(short(*)(int, int, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2, d3);
OUTPUT:
	RETVAL

float
nci_fiidd( c_func, i0, i1, d2, d3 )
	SV* c_func
	int i0
	int i1
	double d2
	double d3
PREINIT:
	float(*func)(int, int, double, double);
CODE:
	func   = INT2PTR(float(*)(int, int, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2, d3);
OUTPUT:
	RETVAL

char *
nci_tiidd( c_func, i0, i1, d2, d3 )
	SV* c_func
	int i0
	int i1
	double d2
	double d3
PREINIT:
	char *(*func)(int, int, double, double);
CODE:
	func   = INT2PTR(char *(*)(int, int, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2, d3);
OUTPUT:
	RETVAL

int
nci_iiidd( c_func, i0, i1, d2, d3 )
	SV* c_func
	int i0
	int i1
	double d2
	double d3
PREINIT:
	int(*func)(int, int, double, double);
CODE:
	func   = INT2PTR(int(*)(int, int, double, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2, d3);
OUTPUT:
	RETVAL

void *
nci_pppsd( c_func, p0, p1, s2, d3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	double d3
PREINIT:
	void *(*func)(void *, void *, short, double);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2, d3);
OUTPUT:
	RETVAL

void
nci_vppsd( c_func, p0, p1, s2, d3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	double d3
PREINIT:
	void(*func)(void *, void *, short, double);
CODE:
	func   = INT2PTR(void(*)(void *, void *, short, double), SvIV(c_func) );
	(*func)(p0, p1, s2, d3);

double
nci_dppsd( c_func, p0, p1, s2, d3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	double d3
PREINIT:
	double(*func)(void *, void *, short, double);
CODE:
	func   = INT2PTR(double(*)(void *, void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2, d3);
OUTPUT:
	RETVAL

short
nci_sppsd( c_func, p0, p1, s2, d3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	double d3
PREINIT:
	short(*func)(void *, void *, short, double);
CODE:
	func   = INT2PTR(short(*)(void *, void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2, d3);
OUTPUT:
	RETVAL

float
nci_fppsd( c_func, p0, p1, s2, d3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	double d3
PREINIT:
	float(*func)(void *, void *, short, double);
CODE:
	func   = INT2PTR(float(*)(void *, void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2, d3);
OUTPUT:
	RETVAL

char *
nci_tppsd( c_func, p0, p1, s2, d3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	double d3
PREINIT:
	char *(*func)(void *, void *, short, double);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2, d3);
OUTPUT:
	RETVAL

int
nci_ippsd( c_func, p0, p1, s2, d3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	double d3
PREINIT:
	int(*func)(void *, void *, short, double);
CODE:
	func   = INT2PTR(int(*)(void *, void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2, d3);
OUTPUT:
	RETVAL

void *
nci_pvpsd( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvpsd( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvpsd( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svpsd( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvpsd( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvpsd( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivpsd( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdpsd( c_func, d0, p1, s2, d3 )
	SV* c_func
	double d0
	void * p1
	short s2
	double d3
PREINIT:
	void *(*func)(double, void *, short, double);
CODE:
	func   = INT2PTR(void *(*)(double, void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2, d3);
OUTPUT:
	RETVAL

void
nci_vdpsd( c_func, d0, p1, s2, d3 )
	SV* c_func
	double d0
	void * p1
	short s2
	double d3
PREINIT:
	void(*func)(double, void *, short, double);
CODE:
	func   = INT2PTR(void(*)(double, void *, short, double), SvIV(c_func) );
	(*func)(d0, p1, s2, d3);

double
nci_ddpsd( c_func, d0, p1, s2, d3 )
	SV* c_func
	double d0
	void * p1
	short s2
	double d3
PREINIT:
	double(*func)(double, void *, short, double);
CODE:
	func   = INT2PTR(double(*)(double, void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2, d3);
OUTPUT:
	RETVAL

short
nci_sdpsd( c_func, d0, p1, s2, d3 )
	SV* c_func
	double d0
	void * p1
	short s2
	double d3
PREINIT:
	short(*func)(double, void *, short, double);
CODE:
	func   = INT2PTR(short(*)(double, void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2, d3);
OUTPUT:
	RETVAL

float
nci_fdpsd( c_func, d0, p1, s2, d3 )
	SV* c_func
	double d0
	void * p1
	short s2
	double d3
PREINIT:
	float(*func)(double, void *, short, double);
CODE:
	func   = INT2PTR(float(*)(double, void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2, d3);
OUTPUT:
	RETVAL

char *
nci_tdpsd( c_func, d0, p1, s2, d3 )
	SV* c_func
	double d0
	void * p1
	short s2
	double d3
PREINIT:
	char *(*func)(double, void *, short, double);
CODE:
	func   = INT2PTR(char *(*)(double, void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2, d3);
OUTPUT:
	RETVAL

int
nci_idpsd( c_func, d0, p1, s2, d3 )
	SV* c_func
	double d0
	void * p1
	short s2
	double d3
PREINIT:
	int(*func)(double, void *, short, double);
CODE:
	func   = INT2PTR(int(*)(double, void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2, d3);
OUTPUT:
	RETVAL

void *
nci_pspsd( c_func, s0, p1, s2, d3 )
	SV* c_func
	short s0
	void * p1
	short s2
	double d3
PREINIT:
	void *(*func)(short, void *, short, double);
CODE:
	func   = INT2PTR(void *(*)(short, void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2, d3);
OUTPUT:
	RETVAL

void
nci_vspsd( c_func, s0, p1, s2, d3 )
	SV* c_func
	short s0
	void * p1
	short s2
	double d3
PREINIT:
	void(*func)(short, void *, short, double);
CODE:
	func   = INT2PTR(void(*)(short, void *, short, double), SvIV(c_func) );
	(*func)(s0, p1, s2, d3);

double
nci_dspsd( c_func, s0, p1, s2, d3 )
	SV* c_func
	short s0
	void * p1
	short s2
	double d3
PREINIT:
	double(*func)(short, void *, short, double);
CODE:
	func   = INT2PTR(double(*)(short, void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2, d3);
OUTPUT:
	RETVAL

short
nci_sspsd( c_func, s0, p1, s2, d3 )
	SV* c_func
	short s0
	void * p1
	short s2
	double d3
PREINIT:
	short(*func)(short, void *, short, double);
CODE:
	func   = INT2PTR(short(*)(short, void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2, d3);
OUTPUT:
	RETVAL

float
nci_fspsd( c_func, s0, p1, s2, d3 )
	SV* c_func
	short s0
	void * p1
	short s2
	double d3
PREINIT:
	float(*func)(short, void *, short, double);
CODE:
	func   = INT2PTR(float(*)(short, void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2, d3);
OUTPUT:
	RETVAL

char *
nci_tspsd( c_func, s0, p1, s2, d3 )
	SV* c_func
	short s0
	void * p1
	short s2
	double d3
PREINIT:
	char *(*func)(short, void *, short, double);
CODE:
	func   = INT2PTR(char *(*)(short, void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2, d3);
OUTPUT:
	RETVAL

int
nci_ispsd( c_func, s0, p1, s2, d3 )
	SV* c_func
	short s0
	void * p1
	short s2
	double d3
PREINIT:
	int(*func)(short, void *, short, double);
CODE:
	func   = INT2PTR(int(*)(short, void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2, d3);
OUTPUT:
	RETVAL

void *
nci_pfpsd( c_func, f0, p1, s2, d3 )
	SV* c_func
	float f0
	void * p1
	short s2
	double d3
PREINIT:
	void *(*func)(float, void *, short, double);
CODE:
	func   = INT2PTR(void *(*)(float, void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2, d3);
OUTPUT:
	RETVAL

void
nci_vfpsd( c_func, f0, p1, s2, d3 )
	SV* c_func
	float f0
	void * p1
	short s2
	double d3
PREINIT:
	void(*func)(float, void *, short, double);
CODE:
	func   = INT2PTR(void(*)(float, void *, short, double), SvIV(c_func) );
	(*func)(f0, p1, s2, d3);

double
nci_dfpsd( c_func, f0, p1, s2, d3 )
	SV* c_func
	float f0
	void * p1
	short s2
	double d3
PREINIT:
	double(*func)(float, void *, short, double);
CODE:
	func   = INT2PTR(double(*)(float, void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2, d3);
OUTPUT:
	RETVAL

short
nci_sfpsd( c_func, f0, p1, s2, d3 )
	SV* c_func
	float f0
	void * p1
	short s2
	double d3
PREINIT:
	short(*func)(float, void *, short, double);
CODE:
	func   = INT2PTR(short(*)(float, void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2, d3);
OUTPUT:
	RETVAL

float
nci_ffpsd( c_func, f0, p1, s2, d3 )
	SV* c_func
	float f0
	void * p1
	short s2
	double d3
PREINIT:
	float(*func)(float, void *, short, double);
CODE:
	func   = INT2PTR(float(*)(float, void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2, d3);
OUTPUT:
	RETVAL

char *
nci_tfpsd( c_func, f0, p1, s2, d3 )
	SV* c_func
	float f0
	void * p1
	short s2
	double d3
PREINIT:
	char *(*func)(float, void *, short, double);
CODE:
	func   = INT2PTR(char *(*)(float, void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2, d3);
OUTPUT:
	RETVAL

int
nci_ifpsd( c_func, f0, p1, s2, d3 )
	SV* c_func
	float f0
	void * p1
	short s2
	double d3
PREINIT:
	int(*func)(float, void *, short, double);
CODE:
	func   = INT2PTR(int(*)(float, void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2, d3);
OUTPUT:
	RETVAL

void *
nci_ptpsd( c_func, t0, p1, s2, d3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	double d3
PREINIT:
	void *(*func)(char *, void *, short, double);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2, d3);
OUTPUT:
	RETVAL

void
nci_vtpsd( c_func, t0, p1, s2, d3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	double d3
PREINIT:
	void(*func)(char *, void *, short, double);
CODE:
	func   = INT2PTR(void(*)(char *, void *, short, double), SvIV(c_func) );
	(*func)(t0, p1, s2, d3);

double
nci_dtpsd( c_func, t0, p1, s2, d3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	double d3
PREINIT:
	double(*func)(char *, void *, short, double);
CODE:
	func   = INT2PTR(double(*)(char *, void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2, d3);
OUTPUT:
	RETVAL

short
nci_stpsd( c_func, t0, p1, s2, d3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	double d3
PREINIT:
	short(*func)(char *, void *, short, double);
CODE:
	func   = INT2PTR(short(*)(char *, void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2, d3);
OUTPUT:
	RETVAL

float
nci_ftpsd( c_func, t0, p1, s2, d3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	double d3
PREINIT:
	float(*func)(char *, void *, short, double);
CODE:
	func   = INT2PTR(float(*)(char *, void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2, d3);
OUTPUT:
	RETVAL

char *
nci_ttpsd( c_func, t0, p1, s2, d3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	double d3
PREINIT:
	char *(*func)(char *, void *, short, double);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2, d3);
OUTPUT:
	RETVAL

int
nci_itpsd( c_func, t0, p1, s2, d3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	double d3
PREINIT:
	int(*func)(char *, void *, short, double);
CODE:
	func   = INT2PTR(int(*)(char *, void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2, d3);
OUTPUT:
	RETVAL

void *
nci_pipsd( c_func, i0, p1, s2, d3 )
	SV* c_func
	int i0
	void * p1
	short s2
	double d3
PREINIT:
	void *(*func)(int, void *, short, double);
CODE:
	func   = INT2PTR(void *(*)(int, void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2, d3);
OUTPUT:
	RETVAL

void
nci_vipsd( c_func, i0, p1, s2, d3 )
	SV* c_func
	int i0
	void * p1
	short s2
	double d3
PREINIT:
	void(*func)(int, void *, short, double);
CODE:
	func   = INT2PTR(void(*)(int, void *, short, double), SvIV(c_func) );
	(*func)(i0, p1, s2, d3);

double
nci_dipsd( c_func, i0, p1, s2, d3 )
	SV* c_func
	int i0
	void * p1
	short s2
	double d3
PREINIT:
	double(*func)(int, void *, short, double);
CODE:
	func   = INT2PTR(double(*)(int, void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2, d3);
OUTPUT:
	RETVAL

short
nci_sipsd( c_func, i0, p1, s2, d3 )
	SV* c_func
	int i0
	void * p1
	short s2
	double d3
PREINIT:
	short(*func)(int, void *, short, double);
CODE:
	func   = INT2PTR(short(*)(int, void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2, d3);
OUTPUT:
	RETVAL

float
nci_fipsd( c_func, i0, p1, s2, d3 )
	SV* c_func
	int i0
	void * p1
	short s2
	double d3
PREINIT:
	float(*func)(int, void *, short, double);
CODE:
	func   = INT2PTR(float(*)(int, void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2, d3);
OUTPUT:
	RETVAL

char *
nci_tipsd( c_func, i0, p1, s2, d3 )
	SV* c_func
	int i0
	void * p1
	short s2
	double d3
PREINIT:
	char *(*func)(int, void *, short, double);
CODE:
	func   = INT2PTR(char *(*)(int, void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2, d3);
OUTPUT:
	RETVAL

int
nci_iipsd( c_func, i0, p1, s2, d3 )
	SV* c_func
	int i0
	void * p1
	short s2
	double d3
PREINIT:
	int(*func)(int, void *, short, double);
CODE:
	func   = INT2PTR(int(*)(int, void *, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2, d3);
OUTPUT:
	RETVAL

void *
nci_ppdsd( c_func, p0, d1, s2, d3 )
	SV* c_func
	void * p0
	double d1
	short s2
	double d3
PREINIT:
	void *(*func)(void *, double, short, double);
CODE:
	func   = INT2PTR(void *(*)(void *, double, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2, d3);
OUTPUT:
	RETVAL

void
nci_vpdsd( c_func, p0, d1, s2, d3 )
	SV* c_func
	void * p0
	double d1
	short s2
	double d3
PREINIT:
	void(*func)(void *, double, short, double);
CODE:
	func   = INT2PTR(void(*)(void *, double, short, double), SvIV(c_func) );
	(*func)(p0, d1, s2, d3);

double
nci_dpdsd( c_func, p0, d1, s2, d3 )
	SV* c_func
	void * p0
	double d1
	short s2
	double d3
PREINIT:
	double(*func)(void *, double, short, double);
CODE:
	func   = INT2PTR(double(*)(void *, double, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2, d3);
OUTPUT:
	RETVAL

short
nci_spdsd( c_func, p0, d1, s2, d3 )
	SV* c_func
	void * p0
	double d1
	short s2
	double d3
PREINIT:
	short(*func)(void *, double, short, double);
CODE:
	func   = INT2PTR(short(*)(void *, double, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2, d3);
OUTPUT:
	RETVAL

float
nci_fpdsd( c_func, p0, d1, s2, d3 )
	SV* c_func
	void * p0
	double d1
	short s2
	double d3
PREINIT:
	float(*func)(void *, double, short, double);
CODE:
	func   = INT2PTR(float(*)(void *, double, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2, d3);
OUTPUT:
	RETVAL

char *
nci_tpdsd( c_func, p0, d1, s2, d3 )
	SV* c_func
	void * p0
	double d1
	short s2
	double d3
PREINIT:
	char *(*func)(void *, double, short, double);
CODE:
	func   = INT2PTR(char *(*)(void *, double, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2, d3);
OUTPUT:
	RETVAL

int
nci_ipdsd( c_func, p0, d1, s2, d3 )
	SV* c_func
	void * p0
	double d1
	short s2
	double d3
PREINIT:
	int(*func)(void *, double, short, double);
CODE:
	func   = INT2PTR(int(*)(void *, double, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2, d3);
OUTPUT:
	RETVAL

void *
nci_pvdsd( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvdsd( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvdsd( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svdsd( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvdsd( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvdsd( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivdsd( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pddsd( c_func, d0, d1, s2, d3 )
	SV* c_func
	double d0
	double d1
	short s2
	double d3
PREINIT:
	void *(*func)(double, double, short, double);
CODE:
	func   = INT2PTR(void *(*)(double, double, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2, d3);
OUTPUT:
	RETVAL

void
nci_vddsd( c_func, d0, d1, s2, d3 )
	SV* c_func
	double d0
	double d1
	short s2
	double d3
PREINIT:
	void(*func)(double, double, short, double);
CODE:
	func   = INT2PTR(void(*)(double, double, short, double), SvIV(c_func) );
	(*func)(d0, d1, s2, d3);

double
nci_dddsd( c_func, d0, d1, s2, d3 )
	SV* c_func
	double d0
	double d1
	short s2
	double d3
PREINIT:
	double(*func)(double, double, short, double);
CODE:
	func   = INT2PTR(double(*)(double, double, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2, d3);
OUTPUT:
	RETVAL

short
nci_sddsd( c_func, d0, d1, s2, d3 )
	SV* c_func
	double d0
	double d1
	short s2
	double d3
PREINIT:
	short(*func)(double, double, short, double);
CODE:
	func   = INT2PTR(short(*)(double, double, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2, d3);
OUTPUT:
	RETVAL

float
nci_fddsd( c_func, d0, d1, s2, d3 )
	SV* c_func
	double d0
	double d1
	short s2
	double d3
PREINIT:
	float(*func)(double, double, short, double);
CODE:
	func   = INT2PTR(float(*)(double, double, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2, d3);
OUTPUT:
	RETVAL

char *
nci_tddsd( c_func, d0, d1, s2, d3 )
	SV* c_func
	double d0
	double d1
	short s2
	double d3
PREINIT:
	char *(*func)(double, double, short, double);
CODE:
	func   = INT2PTR(char *(*)(double, double, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2, d3);
OUTPUT:
	RETVAL

int
nci_iddsd( c_func, d0, d1, s2, d3 )
	SV* c_func
	double d0
	double d1
	short s2
	double d3
PREINIT:
	int(*func)(double, double, short, double);
CODE:
	func   = INT2PTR(int(*)(double, double, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2, d3);
OUTPUT:
	RETVAL

void *
nci_psdsd( c_func, s0, d1, s2, d3 )
	SV* c_func
	short s0
	double d1
	short s2
	double d3
PREINIT:
	void *(*func)(short, double, short, double);
CODE:
	func   = INT2PTR(void *(*)(short, double, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2, d3);
OUTPUT:
	RETVAL

void
nci_vsdsd( c_func, s0, d1, s2, d3 )
	SV* c_func
	short s0
	double d1
	short s2
	double d3
PREINIT:
	void(*func)(short, double, short, double);
CODE:
	func   = INT2PTR(void(*)(short, double, short, double), SvIV(c_func) );
	(*func)(s0, d1, s2, d3);

double
nci_dsdsd( c_func, s0, d1, s2, d3 )
	SV* c_func
	short s0
	double d1
	short s2
	double d3
PREINIT:
	double(*func)(short, double, short, double);
CODE:
	func   = INT2PTR(double(*)(short, double, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2, d3);
OUTPUT:
	RETVAL

short
nci_ssdsd( c_func, s0, d1, s2, d3 )
	SV* c_func
	short s0
	double d1
	short s2
	double d3
PREINIT:
	short(*func)(short, double, short, double);
CODE:
	func   = INT2PTR(short(*)(short, double, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2, d3);
OUTPUT:
	RETVAL

float
nci_fsdsd( c_func, s0, d1, s2, d3 )
	SV* c_func
	short s0
	double d1
	short s2
	double d3
PREINIT:
	float(*func)(short, double, short, double);
CODE:
	func   = INT2PTR(float(*)(short, double, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2, d3);
OUTPUT:
	RETVAL

char *
nci_tsdsd( c_func, s0, d1, s2, d3 )
	SV* c_func
	short s0
	double d1
	short s2
	double d3
PREINIT:
	char *(*func)(short, double, short, double);
CODE:
	func   = INT2PTR(char *(*)(short, double, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2, d3);
OUTPUT:
	RETVAL

int
nci_isdsd( c_func, s0, d1, s2, d3 )
	SV* c_func
	short s0
	double d1
	short s2
	double d3
PREINIT:
	int(*func)(short, double, short, double);
CODE:
	func   = INT2PTR(int(*)(short, double, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2, d3);
OUTPUT:
	RETVAL

void *
nci_pfdsd( c_func, f0, d1, s2, d3 )
	SV* c_func
	float f0
	double d1
	short s2
	double d3
PREINIT:
	void *(*func)(float, double, short, double);
CODE:
	func   = INT2PTR(void *(*)(float, double, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2, d3);
OUTPUT:
	RETVAL

void
nci_vfdsd( c_func, f0, d1, s2, d3 )
	SV* c_func
	float f0
	double d1
	short s2
	double d3
PREINIT:
	void(*func)(float, double, short, double);
CODE:
	func   = INT2PTR(void(*)(float, double, short, double), SvIV(c_func) );
	(*func)(f0, d1, s2, d3);

double
nci_dfdsd( c_func, f0, d1, s2, d3 )
	SV* c_func
	float f0
	double d1
	short s2
	double d3
PREINIT:
	double(*func)(float, double, short, double);
CODE:
	func   = INT2PTR(double(*)(float, double, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2, d3);
OUTPUT:
	RETVAL

short
nci_sfdsd( c_func, f0, d1, s2, d3 )
	SV* c_func
	float f0
	double d1
	short s2
	double d3
PREINIT:
	short(*func)(float, double, short, double);
CODE:
	func   = INT2PTR(short(*)(float, double, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2, d3);
OUTPUT:
	RETVAL

float
nci_ffdsd( c_func, f0, d1, s2, d3 )
	SV* c_func
	float f0
	double d1
	short s2
	double d3
PREINIT:
	float(*func)(float, double, short, double);
CODE:
	func   = INT2PTR(float(*)(float, double, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2, d3);
OUTPUT:
	RETVAL

char *
nci_tfdsd( c_func, f0, d1, s2, d3 )
	SV* c_func
	float f0
	double d1
	short s2
	double d3
PREINIT:
	char *(*func)(float, double, short, double);
CODE:
	func   = INT2PTR(char *(*)(float, double, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2, d3);
OUTPUT:
	RETVAL

int
nci_ifdsd( c_func, f0, d1, s2, d3 )
	SV* c_func
	float f0
	double d1
	short s2
	double d3
PREINIT:
	int(*func)(float, double, short, double);
CODE:
	func   = INT2PTR(int(*)(float, double, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2, d3);
OUTPUT:
	RETVAL

void *
nci_ptdsd( c_func, t0, d1, s2, d3 )
	SV* c_func
	char * t0
	double d1
	short s2
	double d3
PREINIT:
	void *(*func)(char *, double, short, double);
CODE:
	func   = INT2PTR(void *(*)(char *, double, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2, d3);
OUTPUT:
	RETVAL

void
nci_vtdsd( c_func, t0, d1, s2, d3 )
	SV* c_func
	char * t0
	double d1
	short s2
	double d3
PREINIT:
	void(*func)(char *, double, short, double);
CODE:
	func   = INT2PTR(void(*)(char *, double, short, double), SvIV(c_func) );
	(*func)(t0, d1, s2, d3);

double
nci_dtdsd( c_func, t0, d1, s2, d3 )
	SV* c_func
	char * t0
	double d1
	short s2
	double d3
PREINIT:
	double(*func)(char *, double, short, double);
CODE:
	func   = INT2PTR(double(*)(char *, double, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2, d3);
OUTPUT:
	RETVAL

short
nci_stdsd( c_func, t0, d1, s2, d3 )
	SV* c_func
	char * t0
	double d1
	short s2
	double d3
PREINIT:
	short(*func)(char *, double, short, double);
CODE:
	func   = INT2PTR(short(*)(char *, double, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2, d3);
OUTPUT:
	RETVAL

float
nci_ftdsd( c_func, t0, d1, s2, d3 )
	SV* c_func
	char * t0
	double d1
	short s2
	double d3
PREINIT:
	float(*func)(char *, double, short, double);
CODE:
	func   = INT2PTR(float(*)(char *, double, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2, d3);
OUTPUT:
	RETVAL

char *
nci_ttdsd( c_func, t0, d1, s2, d3 )
	SV* c_func
	char * t0
	double d1
	short s2
	double d3
PREINIT:
	char *(*func)(char *, double, short, double);
CODE:
	func   = INT2PTR(char *(*)(char *, double, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2, d3);
OUTPUT:
	RETVAL

int
nci_itdsd( c_func, t0, d1, s2, d3 )
	SV* c_func
	char * t0
	double d1
	short s2
	double d3
PREINIT:
	int(*func)(char *, double, short, double);
CODE:
	func   = INT2PTR(int(*)(char *, double, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2, d3);
OUTPUT:
	RETVAL

void *
nci_pidsd( c_func, i0, d1, s2, d3 )
	SV* c_func
	int i0
	double d1
	short s2
	double d3
PREINIT:
	void *(*func)(int, double, short, double);
CODE:
	func   = INT2PTR(void *(*)(int, double, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2, d3);
OUTPUT:
	RETVAL

void
nci_vidsd( c_func, i0, d1, s2, d3 )
	SV* c_func
	int i0
	double d1
	short s2
	double d3
PREINIT:
	void(*func)(int, double, short, double);
CODE:
	func   = INT2PTR(void(*)(int, double, short, double), SvIV(c_func) );
	(*func)(i0, d1, s2, d3);

double
nci_didsd( c_func, i0, d1, s2, d3 )
	SV* c_func
	int i0
	double d1
	short s2
	double d3
PREINIT:
	double(*func)(int, double, short, double);
CODE:
	func   = INT2PTR(double(*)(int, double, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2, d3);
OUTPUT:
	RETVAL

short
nci_sidsd( c_func, i0, d1, s2, d3 )
	SV* c_func
	int i0
	double d1
	short s2
	double d3
PREINIT:
	short(*func)(int, double, short, double);
CODE:
	func   = INT2PTR(short(*)(int, double, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2, d3);
OUTPUT:
	RETVAL

float
nci_fidsd( c_func, i0, d1, s2, d3 )
	SV* c_func
	int i0
	double d1
	short s2
	double d3
PREINIT:
	float(*func)(int, double, short, double);
CODE:
	func   = INT2PTR(float(*)(int, double, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2, d3);
OUTPUT:
	RETVAL

char *
nci_tidsd( c_func, i0, d1, s2, d3 )
	SV* c_func
	int i0
	double d1
	short s2
	double d3
PREINIT:
	char *(*func)(int, double, short, double);
CODE:
	func   = INT2PTR(char *(*)(int, double, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2, d3);
OUTPUT:
	RETVAL

int
nci_iidsd( c_func, i0, d1, s2, d3 )
	SV* c_func
	int i0
	double d1
	short s2
	double d3
PREINIT:
	int(*func)(int, double, short, double);
CODE:
	func   = INT2PTR(int(*)(int, double, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2, d3);
OUTPUT:
	RETVAL

void *
nci_ppssd( c_func, p0, s1, s2, d3 )
	SV* c_func
	void * p0
	short s1
	short s2
	double d3
PREINIT:
	void *(*func)(void *, short, short, double);
CODE:
	func   = INT2PTR(void *(*)(void *, short, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2, d3);
OUTPUT:
	RETVAL

void
nci_vpssd( c_func, p0, s1, s2, d3 )
	SV* c_func
	void * p0
	short s1
	short s2
	double d3
PREINIT:
	void(*func)(void *, short, short, double);
CODE:
	func   = INT2PTR(void(*)(void *, short, short, double), SvIV(c_func) );
	(*func)(p0, s1, s2, d3);

double
nci_dpssd( c_func, p0, s1, s2, d3 )
	SV* c_func
	void * p0
	short s1
	short s2
	double d3
PREINIT:
	double(*func)(void *, short, short, double);
CODE:
	func   = INT2PTR(double(*)(void *, short, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2, d3);
OUTPUT:
	RETVAL

short
nci_spssd( c_func, p0, s1, s2, d3 )
	SV* c_func
	void * p0
	short s1
	short s2
	double d3
PREINIT:
	short(*func)(void *, short, short, double);
CODE:
	func   = INT2PTR(short(*)(void *, short, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2, d3);
OUTPUT:
	RETVAL

float
nci_fpssd( c_func, p0, s1, s2, d3 )
	SV* c_func
	void * p0
	short s1
	short s2
	double d3
PREINIT:
	float(*func)(void *, short, short, double);
CODE:
	func   = INT2PTR(float(*)(void *, short, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2, d3);
OUTPUT:
	RETVAL

char *
nci_tpssd( c_func, p0, s1, s2, d3 )
	SV* c_func
	void * p0
	short s1
	short s2
	double d3
PREINIT:
	char *(*func)(void *, short, short, double);
CODE:
	func   = INT2PTR(char *(*)(void *, short, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2, d3);
OUTPUT:
	RETVAL

int
nci_ipssd( c_func, p0, s1, s2, d3 )
	SV* c_func
	void * p0
	short s1
	short s2
	double d3
PREINIT:
	int(*func)(void *, short, short, double);
CODE:
	func   = INT2PTR(int(*)(void *, short, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2, d3);
OUTPUT:
	RETVAL

void *
nci_pvssd( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvssd( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvssd( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svssd( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvssd( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvssd( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivssd( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdssd( c_func, d0, s1, s2, d3 )
	SV* c_func
	double d0
	short s1
	short s2
	double d3
PREINIT:
	void *(*func)(double, short, short, double);
CODE:
	func   = INT2PTR(void *(*)(double, short, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2, d3);
OUTPUT:
	RETVAL

void
nci_vdssd( c_func, d0, s1, s2, d3 )
	SV* c_func
	double d0
	short s1
	short s2
	double d3
PREINIT:
	void(*func)(double, short, short, double);
CODE:
	func   = INT2PTR(void(*)(double, short, short, double), SvIV(c_func) );
	(*func)(d0, s1, s2, d3);

double
nci_ddssd( c_func, d0, s1, s2, d3 )
	SV* c_func
	double d0
	short s1
	short s2
	double d3
PREINIT:
	double(*func)(double, short, short, double);
CODE:
	func   = INT2PTR(double(*)(double, short, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2, d3);
OUTPUT:
	RETVAL

short
nci_sdssd( c_func, d0, s1, s2, d3 )
	SV* c_func
	double d0
	short s1
	short s2
	double d3
PREINIT:
	short(*func)(double, short, short, double);
CODE:
	func   = INT2PTR(short(*)(double, short, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2, d3);
OUTPUT:
	RETVAL

float
nci_fdssd( c_func, d0, s1, s2, d3 )
	SV* c_func
	double d0
	short s1
	short s2
	double d3
PREINIT:
	float(*func)(double, short, short, double);
CODE:
	func   = INT2PTR(float(*)(double, short, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2, d3);
OUTPUT:
	RETVAL

char *
nci_tdssd( c_func, d0, s1, s2, d3 )
	SV* c_func
	double d0
	short s1
	short s2
	double d3
PREINIT:
	char *(*func)(double, short, short, double);
CODE:
	func   = INT2PTR(char *(*)(double, short, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2, d3);
OUTPUT:
	RETVAL

int
nci_idssd( c_func, d0, s1, s2, d3 )
	SV* c_func
	double d0
	short s1
	short s2
	double d3
PREINIT:
	int(*func)(double, short, short, double);
CODE:
	func   = INT2PTR(int(*)(double, short, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2, d3);
OUTPUT:
	RETVAL

void *
nci_psssd( c_func, s0, s1, s2, d3 )
	SV* c_func
	short s0
	short s1
	short s2
	double d3
PREINIT:
	void *(*func)(short, short, short, double);
CODE:
	func   = INT2PTR(void *(*)(short, short, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2, d3);
OUTPUT:
	RETVAL

void
nci_vsssd( c_func, s0, s1, s2, d3 )
	SV* c_func
	short s0
	short s1
	short s2
	double d3
PREINIT:
	void(*func)(short, short, short, double);
CODE:
	func   = INT2PTR(void(*)(short, short, short, double), SvIV(c_func) );
	(*func)(s0, s1, s2, d3);

double
nci_dsssd( c_func, s0, s1, s2, d3 )
	SV* c_func
	short s0
	short s1
	short s2
	double d3
PREINIT:
	double(*func)(short, short, short, double);
CODE:
	func   = INT2PTR(double(*)(short, short, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2, d3);
OUTPUT:
	RETVAL

short
nci_ssssd( c_func, s0, s1, s2, d3 )
	SV* c_func
	short s0
	short s1
	short s2
	double d3
PREINIT:
	short(*func)(short, short, short, double);
CODE:
	func   = INT2PTR(short(*)(short, short, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2, d3);
OUTPUT:
	RETVAL

float
nci_fsssd( c_func, s0, s1, s2, d3 )
	SV* c_func
	short s0
	short s1
	short s2
	double d3
PREINIT:
	float(*func)(short, short, short, double);
CODE:
	func   = INT2PTR(float(*)(short, short, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2, d3);
OUTPUT:
	RETVAL

char *
nci_tsssd( c_func, s0, s1, s2, d3 )
	SV* c_func
	short s0
	short s1
	short s2
	double d3
PREINIT:
	char *(*func)(short, short, short, double);
CODE:
	func   = INT2PTR(char *(*)(short, short, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2, d3);
OUTPUT:
	RETVAL

int
nci_isssd( c_func, s0, s1, s2, d3 )
	SV* c_func
	short s0
	short s1
	short s2
	double d3
PREINIT:
	int(*func)(short, short, short, double);
CODE:
	func   = INT2PTR(int(*)(short, short, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2, d3);
OUTPUT:
	RETVAL

void *
nci_pfssd( c_func, f0, s1, s2, d3 )
	SV* c_func
	float f0
	short s1
	short s2
	double d3
PREINIT:
	void *(*func)(float, short, short, double);
CODE:
	func   = INT2PTR(void *(*)(float, short, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2, d3);
OUTPUT:
	RETVAL

void
nci_vfssd( c_func, f0, s1, s2, d3 )
	SV* c_func
	float f0
	short s1
	short s2
	double d3
PREINIT:
	void(*func)(float, short, short, double);
CODE:
	func   = INT2PTR(void(*)(float, short, short, double), SvIV(c_func) );
	(*func)(f0, s1, s2, d3);

double
nci_dfssd( c_func, f0, s1, s2, d3 )
	SV* c_func
	float f0
	short s1
	short s2
	double d3
PREINIT:
	double(*func)(float, short, short, double);
CODE:
	func   = INT2PTR(double(*)(float, short, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2, d3);
OUTPUT:
	RETVAL

short
nci_sfssd( c_func, f0, s1, s2, d3 )
	SV* c_func
	float f0
	short s1
	short s2
	double d3
PREINIT:
	short(*func)(float, short, short, double);
CODE:
	func   = INT2PTR(short(*)(float, short, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2, d3);
OUTPUT:
	RETVAL

float
nci_ffssd( c_func, f0, s1, s2, d3 )
	SV* c_func
	float f0
	short s1
	short s2
	double d3
PREINIT:
	float(*func)(float, short, short, double);
CODE:
	func   = INT2PTR(float(*)(float, short, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2, d3);
OUTPUT:
	RETVAL

char *
nci_tfssd( c_func, f0, s1, s2, d3 )
	SV* c_func
	float f0
	short s1
	short s2
	double d3
PREINIT:
	char *(*func)(float, short, short, double);
CODE:
	func   = INT2PTR(char *(*)(float, short, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2, d3);
OUTPUT:
	RETVAL

int
nci_ifssd( c_func, f0, s1, s2, d3 )
	SV* c_func
	float f0
	short s1
	short s2
	double d3
PREINIT:
	int(*func)(float, short, short, double);
CODE:
	func   = INT2PTR(int(*)(float, short, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2, d3);
OUTPUT:
	RETVAL

void *
nci_ptssd( c_func, t0, s1, s2, d3 )
	SV* c_func
	char * t0
	short s1
	short s2
	double d3
PREINIT:
	void *(*func)(char *, short, short, double);
CODE:
	func   = INT2PTR(void *(*)(char *, short, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2, d3);
OUTPUT:
	RETVAL

void
nci_vtssd( c_func, t0, s1, s2, d3 )
	SV* c_func
	char * t0
	short s1
	short s2
	double d3
PREINIT:
	void(*func)(char *, short, short, double);
CODE:
	func   = INT2PTR(void(*)(char *, short, short, double), SvIV(c_func) );
	(*func)(t0, s1, s2, d3);

double
nci_dtssd( c_func, t0, s1, s2, d3 )
	SV* c_func
	char * t0
	short s1
	short s2
	double d3
PREINIT:
	double(*func)(char *, short, short, double);
CODE:
	func   = INT2PTR(double(*)(char *, short, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2, d3);
OUTPUT:
	RETVAL

short
nci_stssd( c_func, t0, s1, s2, d3 )
	SV* c_func
	char * t0
	short s1
	short s2
	double d3
PREINIT:
	short(*func)(char *, short, short, double);
CODE:
	func   = INT2PTR(short(*)(char *, short, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2, d3);
OUTPUT:
	RETVAL

float
nci_ftssd( c_func, t0, s1, s2, d3 )
	SV* c_func
	char * t0
	short s1
	short s2
	double d3
PREINIT:
	float(*func)(char *, short, short, double);
CODE:
	func   = INT2PTR(float(*)(char *, short, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2, d3);
OUTPUT:
	RETVAL

char *
nci_ttssd( c_func, t0, s1, s2, d3 )
	SV* c_func
	char * t0
	short s1
	short s2
	double d3
PREINIT:
	char *(*func)(char *, short, short, double);
CODE:
	func   = INT2PTR(char *(*)(char *, short, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2, d3);
OUTPUT:
	RETVAL

int
nci_itssd( c_func, t0, s1, s2, d3 )
	SV* c_func
	char * t0
	short s1
	short s2
	double d3
PREINIT:
	int(*func)(char *, short, short, double);
CODE:
	func   = INT2PTR(int(*)(char *, short, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2, d3);
OUTPUT:
	RETVAL

void *
nci_pissd( c_func, i0, s1, s2, d3 )
	SV* c_func
	int i0
	short s1
	short s2
	double d3
PREINIT:
	void *(*func)(int, short, short, double);
CODE:
	func   = INT2PTR(void *(*)(int, short, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2, d3);
OUTPUT:
	RETVAL

void
nci_vissd( c_func, i0, s1, s2, d3 )
	SV* c_func
	int i0
	short s1
	short s2
	double d3
PREINIT:
	void(*func)(int, short, short, double);
CODE:
	func   = INT2PTR(void(*)(int, short, short, double), SvIV(c_func) );
	(*func)(i0, s1, s2, d3);

double
nci_dissd( c_func, i0, s1, s2, d3 )
	SV* c_func
	int i0
	short s1
	short s2
	double d3
PREINIT:
	double(*func)(int, short, short, double);
CODE:
	func   = INT2PTR(double(*)(int, short, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2, d3);
OUTPUT:
	RETVAL

short
nci_sissd( c_func, i0, s1, s2, d3 )
	SV* c_func
	int i0
	short s1
	short s2
	double d3
PREINIT:
	short(*func)(int, short, short, double);
CODE:
	func   = INT2PTR(short(*)(int, short, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2, d3);
OUTPUT:
	RETVAL

float
nci_fissd( c_func, i0, s1, s2, d3 )
	SV* c_func
	int i0
	short s1
	short s2
	double d3
PREINIT:
	float(*func)(int, short, short, double);
CODE:
	func   = INT2PTR(float(*)(int, short, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2, d3);
OUTPUT:
	RETVAL

char *
nci_tissd( c_func, i0, s1, s2, d3 )
	SV* c_func
	int i0
	short s1
	short s2
	double d3
PREINIT:
	char *(*func)(int, short, short, double);
CODE:
	func   = INT2PTR(char *(*)(int, short, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2, d3);
OUTPUT:
	RETVAL

int
nci_iissd( c_func, i0, s1, s2, d3 )
	SV* c_func
	int i0
	short s1
	short s2
	double d3
PREINIT:
	int(*func)(int, short, short, double);
CODE:
	func   = INT2PTR(int(*)(int, short, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2, d3);
OUTPUT:
	RETVAL

void *
nci_ppfsd( c_func, p0, f1, s2, d3 )
	SV* c_func
	void * p0
	float f1
	short s2
	double d3
PREINIT:
	void *(*func)(void *, float, short, double);
CODE:
	func   = INT2PTR(void *(*)(void *, float, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2, d3);
OUTPUT:
	RETVAL

void
nci_vpfsd( c_func, p0, f1, s2, d3 )
	SV* c_func
	void * p0
	float f1
	short s2
	double d3
PREINIT:
	void(*func)(void *, float, short, double);
CODE:
	func   = INT2PTR(void(*)(void *, float, short, double), SvIV(c_func) );
	(*func)(p0, f1, s2, d3);

double
nci_dpfsd( c_func, p0, f1, s2, d3 )
	SV* c_func
	void * p0
	float f1
	short s2
	double d3
PREINIT:
	double(*func)(void *, float, short, double);
CODE:
	func   = INT2PTR(double(*)(void *, float, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2, d3);
OUTPUT:
	RETVAL

short
nci_spfsd( c_func, p0, f1, s2, d3 )
	SV* c_func
	void * p0
	float f1
	short s2
	double d3
PREINIT:
	short(*func)(void *, float, short, double);
CODE:
	func   = INT2PTR(short(*)(void *, float, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2, d3);
OUTPUT:
	RETVAL

float
nci_fpfsd( c_func, p0, f1, s2, d3 )
	SV* c_func
	void * p0
	float f1
	short s2
	double d3
PREINIT:
	float(*func)(void *, float, short, double);
CODE:
	func   = INT2PTR(float(*)(void *, float, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2, d3);
OUTPUT:
	RETVAL

char *
nci_tpfsd( c_func, p0, f1, s2, d3 )
	SV* c_func
	void * p0
	float f1
	short s2
	double d3
PREINIT:
	char *(*func)(void *, float, short, double);
CODE:
	func   = INT2PTR(char *(*)(void *, float, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2, d3);
OUTPUT:
	RETVAL

int
nci_ipfsd( c_func, p0, f1, s2, d3 )
	SV* c_func
	void * p0
	float f1
	short s2
	double d3
PREINIT:
	int(*func)(void *, float, short, double);
CODE:
	func   = INT2PTR(int(*)(void *, float, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2, d3);
OUTPUT:
	RETVAL

void *
nci_pvfsd( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvfsd( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvfsd( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svfsd( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvfsd( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvfsd( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivfsd( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdfsd( c_func, d0, f1, s2, d3 )
	SV* c_func
	double d0
	float f1
	short s2
	double d3
PREINIT:
	void *(*func)(double, float, short, double);
CODE:
	func   = INT2PTR(void *(*)(double, float, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2, d3);
OUTPUT:
	RETVAL

void
nci_vdfsd( c_func, d0, f1, s2, d3 )
	SV* c_func
	double d0
	float f1
	short s2
	double d3
PREINIT:
	void(*func)(double, float, short, double);
CODE:
	func   = INT2PTR(void(*)(double, float, short, double), SvIV(c_func) );
	(*func)(d0, f1, s2, d3);

double
nci_ddfsd( c_func, d0, f1, s2, d3 )
	SV* c_func
	double d0
	float f1
	short s2
	double d3
PREINIT:
	double(*func)(double, float, short, double);
CODE:
	func   = INT2PTR(double(*)(double, float, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2, d3);
OUTPUT:
	RETVAL

short
nci_sdfsd( c_func, d0, f1, s2, d3 )
	SV* c_func
	double d0
	float f1
	short s2
	double d3
PREINIT:
	short(*func)(double, float, short, double);
CODE:
	func   = INT2PTR(short(*)(double, float, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2, d3);
OUTPUT:
	RETVAL

float
nci_fdfsd( c_func, d0, f1, s2, d3 )
	SV* c_func
	double d0
	float f1
	short s2
	double d3
PREINIT:
	float(*func)(double, float, short, double);
CODE:
	func   = INT2PTR(float(*)(double, float, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2, d3);
OUTPUT:
	RETVAL

char *
nci_tdfsd( c_func, d0, f1, s2, d3 )
	SV* c_func
	double d0
	float f1
	short s2
	double d3
PREINIT:
	char *(*func)(double, float, short, double);
CODE:
	func   = INT2PTR(char *(*)(double, float, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2, d3);
OUTPUT:
	RETVAL

int
nci_idfsd( c_func, d0, f1, s2, d3 )
	SV* c_func
	double d0
	float f1
	short s2
	double d3
PREINIT:
	int(*func)(double, float, short, double);
CODE:
	func   = INT2PTR(int(*)(double, float, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2, d3);
OUTPUT:
	RETVAL

void *
nci_psfsd( c_func, s0, f1, s2, d3 )
	SV* c_func
	short s0
	float f1
	short s2
	double d3
PREINIT:
	void *(*func)(short, float, short, double);
CODE:
	func   = INT2PTR(void *(*)(short, float, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2, d3);
OUTPUT:
	RETVAL

void
nci_vsfsd( c_func, s0, f1, s2, d3 )
	SV* c_func
	short s0
	float f1
	short s2
	double d3
PREINIT:
	void(*func)(short, float, short, double);
CODE:
	func   = INT2PTR(void(*)(short, float, short, double), SvIV(c_func) );
	(*func)(s0, f1, s2, d3);

double
nci_dsfsd( c_func, s0, f1, s2, d3 )
	SV* c_func
	short s0
	float f1
	short s2
	double d3
PREINIT:
	double(*func)(short, float, short, double);
CODE:
	func   = INT2PTR(double(*)(short, float, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2, d3);
OUTPUT:
	RETVAL

short
nci_ssfsd( c_func, s0, f1, s2, d3 )
	SV* c_func
	short s0
	float f1
	short s2
	double d3
PREINIT:
	short(*func)(short, float, short, double);
CODE:
	func   = INT2PTR(short(*)(short, float, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2, d3);
OUTPUT:
	RETVAL

float
nci_fsfsd( c_func, s0, f1, s2, d3 )
	SV* c_func
	short s0
	float f1
	short s2
	double d3
PREINIT:
	float(*func)(short, float, short, double);
CODE:
	func   = INT2PTR(float(*)(short, float, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2, d3);
OUTPUT:
	RETVAL

char *
nci_tsfsd( c_func, s0, f1, s2, d3 )
	SV* c_func
	short s0
	float f1
	short s2
	double d3
PREINIT:
	char *(*func)(short, float, short, double);
CODE:
	func   = INT2PTR(char *(*)(short, float, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2, d3);
OUTPUT:
	RETVAL

int
nci_isfsd( c_func, s0, f1, s2, d3 )
	SV* c_func
	short s0
	float f1
	short s2
	double d3
PREINIT:
	int(*func)(short, float, short, double);
CODE:
	func   = INT2PTR(int(*)(short, float, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2, d3);
OUTPUT:
	RETVAL

void *
nci_pffsd( c_func, f0, f1, s2, d3 )
	SV* c_func
	float f0
	float f1
	short s2
	double d3
PREINIT:
	void *(*func)(float, float, short, double);
CODE:
	func   = INT2PTR(void *(*)(float, float, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2, d3);
OUTPUT:
	RETVAL

void
nci_vffsd( c_func, f0, f1, s2, d3 )
	SV* c_func
	float f0
	float f1
	short s2
	double d3
PREINIT:
	void(*func)(float, float, short, double);
CODE:
	func   = INT2PTR(void(*)(float, float, short, double), SvIV(c_func) );
	(*func)(f0, f1, s2, d3);

double
nci_dffsd( c_func, f0, f1, s2, d3 )
	SV* c_func
	float f0
	float f1
	short s2
	double d3
PREINIT:
	double(*func)(float, float, short, double);
CODE:
	func   = INT2PTR(double(*)(float, float, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2, d3);
OUTPUT:
	RETVAL

short
nci_sffsd( c_func, f0, f1, s2, d3 )
	SV* c_func
	float f0
	float f1
	short s2
	double d3
PREINIT:
	short(*func)(float, float, short, double);
CODE:
	func   = INT2PTR(short(*)(float, float, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2, d3);
OUTPUT:
	RETVAL

float
nci_fffsd( c_func, f0, f1, s2, d3 )
	SV* c_func
	float f0
	float f1
	short s2
	double d3
PREINIT:
	float(*func)(float, float, short, double);
CODE:
	func   = INT2PTR(float(*)(float, float, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2, d3);
OUTPUT:
	RETVAL

char *
nci_tffsd( c_func, f0, f1, s2, d3 )
	SV* c_func
	float f0
	float f1
	short s2
	double d3
PREINIT:
	char *(*func)(float, float, short, double);
CODE:
	func   = INT2PTR(char *(*)(float, float, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2, d3);
OUTPUT:
	RETVAL

int
nci_iffsd( c_func, f0, f1, s2, d3 )
	SV* c_func
	float f0
	float f1
	short s2
	double d3
PREINIT:
	int(*func)(float, float, short, double);
CODE:
	func   = INT2PTR(int(*)(float, float, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2, d3);
OUTPUT:
	RETVAL

void *
nci_ptfsd( c_func, t0, f1, s2, d3 )
	SV* c_func
	char * t0
	float f1
	short s2
	double d3
PREINIT:
	void *(*func)(char *, float, short, double);
CODE:
	func   = INT2PTR(void *(*)(char *, float, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2, d3);
OUTPUT:
	RETVAL

void
nci_vtfsd( c_func, t0, f1, s2, d3 )
	SV* c_func
	char * t0
	float f1
	short s2
	double d3
PREINIT:
	void(*func)(char *, float, short, double);
CODE:
	func   = INT2PTR(void(*)(char *, float, short, double), SvIV(c_func) );
	(*func)(t0, f1, s2, d3);

double
nci_dtfsd( c_func, t0, f1, s2, d3 )
	SV* c_func
	char * t0
	float f1
	short s2
	double d3
PREINIT:
	double(*func)(char *, float, short, double);
CODE:
	func   = INT2PTR(double(*)(char *, float, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2, d3);
OUTPUT:
	RETVAL

short
nci_stfsd( c_func, t0, f1, s2, d3 )
	SV* c_func
	char * t0
	float f1
	short s2
	double d3
PREINIT:
	short(*func)(char *, float, short, double);
CODE:
	func   = INT2PTR(short(*)(char *, float, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2, d3);
OUTPUT:
	RETVAL

float
nci_ftfsd( c_func, t0, f1, s2, d3 )
	SV* c_func
	char * t0
	float f1
	short s2
	double d3
PREINIT:
	float(*func)(char *, float, short, double);
CODE:
	func   = INT2PTR(float(*)(char *, float, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2, d3);
OUTPUT:
	RETVAL

char *
nci_ttfsd( c_func, t0, f1, s2, d3 )
	SV* c_func
	char * t0
	float f1
	short s2
	double d3
PREINIT:
	char *(*func)(char *, float, short, double);
CODE:
	func   = INT2PTR(char *(*)(char *, float, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2, d3);
OUTPUT:
	RETVAL

int
nci_itfsd( c_func, t0, f1, s2, d3 )
	SV* c_func
	char * t0
	float f1
	short s2
	double d3
PREINIT:
	int(*func)(char *, float, short, double);
CODE:
	func   = INT2PTR(int(*)(char *, float, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2, d3);
OUTPUT:
	RETVAL

void *
nci_pifsd( c_func, i0, f1, s2, d3 )
	SV* c_func
	int i0
	float f1
	short s2
	double d3
PREINIT:
	void *(*func)(int, float, short, double);
CODE:
	func   = INT2PTR(void *(*)(int, float, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2, d3);
OUTPUT:
	RETVAL

void
nci_vifsd( c_func, i0, f1, s2, d3 )
	SV* c_func
	int i0
	float f1
	short s2
	double d3
PREINIT:
	void(*func)(int, float, short, double);
CODE:
	func   = INT2PTR(void(*)(int, float, short, double), SvIV(c_func) );
	(*func)(i0, f1, s2, d3);

double
nci_difsd( c_func, i0, f1, s2, d3 )
	SV* c_func
	int i0
	float f1
	short s2
	double d3
PREINIT:
	double(*func)(int, float, short, double);
CODE:
	func   = INT2PTR(double(*)(int, float, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2, d3);
OUTPUT:
	RETVAL

short
nci_sifsd( c_func, i0, f1, s2, d3 )
	SV* c_func
	int i0
	float f1
	short s2
	double d3
PREINIT:
	short(*func)(int, float, short, double);
CODE:
	func   = INT2PTR(short(*)(int, float, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2, d3);
OUTPUT:
	RETVAL

float
nci_fifsd( c_func, i0, f1, s2, d3 )
	SV* c_func
	int i0
	float f1
	short s2
	double d3
PREINIT:
	float(*func)(int, float, short, double);
CODE:
	func   = INT2PTR(float(*)(int, float, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2, d3);
OUTPUT:
	RETVAL

char *
nci_tifsd( c_func, i0, f1, s2, d3 )
	SV* c_func
	int i0
	float f1
	short s2
	double d3
PREINIT:
	char *(*func)(int, float, short, double);
CODE:
	func   = INT2PTR(char *(*)(int, float, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2, d3);
OUTPUT:
	RETVAL

int
nci_iifsd( c_func, i0, f1, s2, d3 )
	SV* c_func
	int i0
	float f1
	short s2
	double d3
PREINIT:
	int(*func)(int, float, short, double);
CODE:
	func   = INT2PTR(int(*)(int, float, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2, d3);
OUTPUT:
	RETVAL

void *
nci_pptsd( c_func, p0, t1, s2, d3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	double d3
PREINIT:
	void *(*func)(void *, char *, short, double);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2, d3);
OUTPUT:
	RETVAL

void
nci_vptsd( c_func, p0, t1, s2, d3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	double d3
PREINIT:
	void(*func)(void *, char *, short, double);
CODE:
	func   = INT2PTR(void(*)(void *, char *, short, double), SvIV(c_func) );
	(*func)(p0, t1, s2, d3);

double
nci_dptsd( c_func, p0, t1, s2, d3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	double d3
PREINIT:
	double(*func)(void *, char *, short, double);
CODE:
	func   = INT2PTR(double(*)(void *, char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2, d3);
OUTPUT:
	RETVAL

short
nci_sptsd( c_func, p0, t1, s2, d3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	double d3
PREINIT:
	short(*func)(void *, char *, short, double);
CODE:
	func   = INT2PTR(short(*)(void *, char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2, d3);
OUTPUT:
	RETVAL

float
nci_fptsd( c_func, p0, t1, s2, d3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	double d3
PREINIT:
	float(*func)(void *, char *, short, double);
CODE:
	func   = INT2PTR(float(*)(void *, char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2, d3);
OUTPUT:
	RETVAL

char *
nci_tptsd( c_func, p0, t1, s2, d3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	double d3
PREINIT:
	char *(*func)(void *, char *, short, double);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2, d3);
OUTPUT:
	RETVAL

int
nci_iptsd( c_func, p0, t1, s2, d3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	double d3
PREINIT:
	int(*func)(void *, char *, short, double);
CODE:
	func   = INT2PTR(int(*)(void *, char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2, d3);
OUTPUT:
	RETVAL

void *
nci_pvtsd( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvtsd( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvtsd( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svtsd( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvtsd( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvtsd( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivtsd( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdtsd( c_func, d0, t1, s2, d3 )
	SV* c_func
	double d0
	char * t1
	short s2
	double d3
PREINIT:
	void *(*func)(double, char *, short, double);
CODE:
	func   = INT2PTR(void *(*)(double, char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2, d3);
OUTPUT:
	RETVAL

void
nci_vdtsd( c_func, d0, t1, s2, d3 )
	SV* c_func
	double d0
	char * t1
	short s2
	double d3
PREINIT:
	void(*func)(double, char *, short, double);
CODE:
	func   = INT2PTR(void(*)(double, char *, short, double), SvIV(c_func) );
	(*func)(d0, t1, s2, d3);

double
nci_ddtsd( c_func, d0, t1, s2, d3 )
	SV* c_func
	double d0
	char * t1
	short s2
	double d3
PREINIT:
	double(*func)(double, char *, short, double);
CODE:
	func   = INT2PTR(double(*)(double, char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2, d3);
OUTPUT:
	RETVAL

short
nci_sdtsd( c_func, d0, t1, s2, d3 )
	SV* c_func
	double d0
	char * t1
	short s2
	double d3
PREINIT:
	short(*func)(double, char *, short, double);
CODE:
	func   = INT2PTR(short(*)(double, char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2, d3);
OUTPUT:
	RETVAL

float
nci_fdtsd( c_func, d0, t1, s2, d3 )
	SV* c_func
	double d0
	char * t1
	short s2
	double d3
PREINIT:
	float(*func)(double, char *, short, double);
CODE:
	func   = INT2PTR(float(*)(double, char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2, d3);
OUTPUT:
	RETVAL

char *
nci_tdtsd( c_func, d0, t1, s2, d3 )
	SV* c_func
	double d0
	char * t1
	short s2
	double d3
PREINIT:
	char *(*func)(double, char *, short, double);
CODE:
	func   = INT2PTR(char *(*)(double, char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2, d3);
OUTPUT:
	RETVAL

int
nci_idtsd( c_func, d0, t1, s2, d3 )
	SV* c_func
	double d0
	char * t1
	short s2
	double d3
PREINIT:
	int(*func)(double, char *, short, double);
CODE:
	func   = INT2PTR(int(*)(double, char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2, d3);
OUTPUT:
	RETVAL

void *
nci_pstsd( c_func, s0, t1, s2, d3 )
	SV* c_func
	short s0
	char * t1
	short s2
	double d3
PREINIT:
	void *(*func)(short, char *, short, double);
CODE:
	func   = INT2PTR(void *(*)(short, char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2, d3);
OUTPUT:
	RETVAL

void
nci_vstsd( c_func, s0, t1, s2, d3 )
	SV* c_func
	short s0
	char * t1
	short s2
	double d3
PREINIT:
	void(*func)(short, char *, short, double);
CODE:
	func   = INT2PTR(void(*)(short, char *, short, double), SvIV(c_func) );
	(*func)(s0, t1, s2, d3);

double
nci_dstsd( c_func, s0, t1, s2, d3 )
	SV* c_func
	short s0
	char * t1
	short s2
	double d3
PREINIT:
	double(*func)(short, char *, short, double);
CODE:
	func   = INT2PTR(double(*)(short, char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2, d3);
OUTPUT:
	RETVAL

short
nci_sstsd( c_func, s0, t1, s2, d3 )
	SV* c_func
	short s0
	char * t1
	short s2
	double d3
PREINIT:
	short(*func)(short, char *, short, double);
CODE:
	func   = INT2PTR(short(*)(short, char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2, d3);
OUTPUT:
	RETVAL

float
nci_fstsd( c_func, s0, t1, s2, d3 )
	SV* c_func
	short s0
	char * t1
	short s2
	double d3
PREINIT:
	float(*func)(short, char *, short, double);
CODE:
	func   = INT2PTR(float(*)(short, char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2, d3);
OUTPUT:
	RETVAL

char *
nci_tstsd( c_func, s0, t1, s2, d3 )
	SV* c_func
	short s0
	char * t1
	short s2
	double d3
PREINIT:
	char *(*func)(short, char *, short, double);
CODE:
	func   = INT2PTR(char *(*)(short, char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2, d3);
OUTPUT:
	RETVAL

int
nci_istsd( c_func, s0, t1, s2, d3 )
	SV* c_func
	short s0
	char * t1
	short s2
	double d3
PREINIT:
	int(*func)(short, char *, short, double);
CODE:
	func   = INT2PTR(int(*)(short, char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2, d3);
OUTPUT:
	RETVAL

void *
nci_pftsd( c_func, f0, t1, s2, d3 )
	SV* c_func
	float f0
	char * t1
	short s2
	double d3
PREINIT:
	void *(*func)(float, char *, short, double);
CODE:
	func   = INT2PTR(void *(*)(float, char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2, d3);
OUTPUT:
	RETVAL

void
nci_vftsd( c_func, f0, t1, s2, d3 )
	SV* c_func
	float f0
	char * t1
	short s2
	double d3
PREINIT:
	void(*func)(float, char *, short, double);
CODE:
	func   = INT2PTR(void(*)(float, char *, short, double), SvIV(c_func) );
	(*func)(f0, t1, s2, d3);

double
nci_dftsd( c_func, f0, t1, s2, d3 )
	SV* c_func
	float f0
	char * t1
	short s2
	double d3
PREINIT:
	double(*func)(float, char *, short, double);
CODE:
	func   = INT2PTR(double(*)(float, char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2, d3);
OUTPUT:
	RETVAL

short
nci_sftsd( c_func, f0, t1, s2, d3 )
	SV* c_func
	float f0
	char * t1
	short s2
	double d3
PREINIT:
	short(*func)(float, char *, short, double);
CODE:
	func   = INT2PTR(short(*)(float, char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2, d3);
OUTPUT:
	RETVAL

float
nci_fftsd( c_func, f0, t1, s2, d3 )
	SV* c_func
	float f0
	char * t1
	short s2
	double d3
PREINIT:
	float(*func)(float, char *, short, double);
CODE:
	func   = INT2PTR(float(*)(float, char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2, d3);
OUTPUT:
	RETVAL

char *
nci_tftsd( c_func, f0, t1, s2, d3 )
	SV* c_func
	float f0
	char * t1
	short s2
	double d3
PREINIT:
	char *(*func)(float, char *, short, double);
CODE:
	func   = INT2PTR(char *(*)(float, char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2, d3);
OUTPUT:
	RETVAL

int
nci_iftsd( c_func, f0, t1, s2, d3 )
	SV* c_func
	float f0
	char * t1
	short s2
	double d3
PREINIT:
	int(*func)(float, char *, short, double);
CODE:
	func   = INT2PTR(int(*)(float, char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2, d3);
OUTPUT:
	RETVAL

void *
nci_pttsd( c_func, t0, t1, s2, d3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	double d3
PREINIT:
	void *(*func)(char *, char *, short, double);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2, d3);
OUTPUT:
	RETVAL

void
nci_vttsd( c_func, t0, t1, s2, d3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	double d3
PREINIT:
	void(*func)(char *, char *, short, double);
CODE:
	func   = INT2PTR(void(*)(char *, char *, short, double), SvIV(c_func) );
	(*func)(t0, t1, s2, d3);

double
nci_dttsd( c_func, t0, t1, s2, d3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	double d3
PREINIT:
	double(*func)(char *, char *, short, double);
CODE:
	func   = INT2PTR(double(*)(char *, char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2, d3);
OUTPUT:
	RETVAL

short
nci_sttsd( c_func, t0, t1, s2, d3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	double d3
PREINIT:
	short(*func)(char *, char *, short, double);
CODE:
	func   = INT2PTR(short(*)(char *, char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2, d3);
OUTPUT:
	RETVAL

float
nci_fttsd( c_func, t0, t1, s2, d3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	double d3
PREINIT:
	float(*func)(char *, char *, short, double);
CODE:
	func   = INT2PTR(float(*)(char *, char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2, d3);
OUTPUT:
	RETVAL

char *
nci_tttsd( c_func, t0, t1, s2, d3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	double d3
PREINIT:
	char *(*func)(char *, char *, short, double);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2, d3);
OUTPUT:
	RETVAL

int
nci_ittsd( c_func, t0, t1, s2, d3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	double d3
PREINIT:
	int(*func)(char *, char *, short, double);
CODE:
	func   = INT2PTR(int(*)(char *, char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2, d3);
OUTPUT:
	RETVAL

void *
nci_pitsd( c_func, i0, t1, s2, d3 )
	SV* c_func
	int i0
	char * t1
	short s2
	double d3
PREINIT:
	void *(*func)(int, char *, short, double);
CODE:
	func   = INT2PTR(void *(*)(int, char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2, d3);
OUTPUT:
	RETVAL

void
nci_vitsd( c_func, i0, t1, s2, d3 )
	SV* c_func
	int i0
	char * t1
	short s2
	double d3
PREINIT:
	void(*func)(int, char *, short, double);
CODE:
	func   = INT2PTR(void(*)(int, char *, short, double), SvIV(c_func) );
	(*func)(i0, t1, s2, d3);

double
nci_ditsd( c_func, i0, t1, s2, d3 )
	SV* c_func
	int i0
	char * t1
	short s2
	double d3
PREINIT:
	double(*func)(int, char *, short, double);
CODE:
	func   = INT2PTR(double(*)(int, char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2, d3);
OUTPUT:
	RETVAL

short
nci_sitsd( c_func, i0, t1, s2, d3 )
	SV* c_func
	int i0
	char * t1
	short s2
	double d3
PREINIT:
	short(*func)(int, char *, short, double);
CODE:
	func   = INT2PTR(short(*)(int, char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2, d3);
OUTPUT:
	RETVAL

float
nci_fitsd( c_func, i0, t1, s2, d3 )
	SV* c_func
	int i0
	char * t1
	short s2
	double d3
PREINIT:
	float(*func)(int, char *, short, double);
CODE:
	func   = INT2PTR(float(*)(int, char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2, d3);
OUTPUT:
	RETVAL

char *
nci_titsd( c_func, i0, t1, s2, d3 )
	SV* c_func
	int i0
	char * t1
	short s2
	double d3
PREINIT:
	char *(*func)(int, char *, short, double);
CODE:
	func   = INT2PTR(char *(*)(int, char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2, d3);
OUTPUT:
	RETVAL

int
nci_iitsd( c_func, i0, t1, s2, d3 )
	SV* c_func
	int i0
	char * t1
	short s2
	double d3
PREINIT:
	int(*func)(int, char *, short, double);
CODE:
	func   = INT2PTR(int(*)(int, char *, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2, d3);
OUTPUT:
	RETVAL

void *
nci_ppisd( c_func, p0, i1, s2, d3 )
	SV* c_func
	void * p0
	int i1
	short s2
	double d3
PREINIT:
	void *(*func)(void *, int, short, double);
CODE:
	func   = INT2PTR(void *(*)(void *, int, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2, d3);
OUTPUT:
	RETVAL

void
nci_vpisd( c_func, p0, i1, s2, d3 )
	SV* c_func
	void * p0
	int i1
	short s2
	double d3
PREINIT:
	void(*func)(void *, int, short, double);
CODE:
	func   = INT2PTR(void(*)(void *, int, short, double), SvIV(c_func) );
	(*func)(p0, i1, s2, d3);

double
nci_dpisd( c_func, p0, i1, s2, d3 )
	SV* c_func
	void * p0
	int i1
	short s2
	double d3
PREINIT:
	double(*func)(void *, int, short, double);
CODE:
	func   = INT2PTR(double(*)(void *, int, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2, d3);
OUTPUT:
	RETVAL

short
nci_spisd( c_func, p0, i1, s2, d3 )
	SV* c_func
	void * p0
	int i1
	short s2
	double d3
PREINIT:
	short(*func)(void *, int, short, double);
CODE:
	func   = INT2PTR(short(*)(void *, int, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2, d3);
OUTPUT:
	RETVAL

float
nci_fpisd( c_func, p0, i1, s2, d3 )
	SV* c_func
	void * p0
	int i1
	short s2
	double d3
PREINIT:
	float(*func)(void *, int, short, double);
CODE:
	func   = INT2PTR(float(*)(void *, int, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2, d3);
OUTPUT:
	RETVAL

char *
nci_tpisd( c_func, p0, i1, s2, d3 )
	SV* c_func
	void * p0
	int i1
	short s2
	double d3
PREINIT:
	char *(*func)(void *, int, short, double);
CODE:
	func   = INT2PTR(char *(*)(void *, int, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2, d3);
OUTPUT:
	RETVAL

int
nci_ipisd( c_func, p0, i1, s2, d3 )
	SV* c_func
	void * p0
	int i1
	short s2
	double d3
PREINIT:
	int(*func)(void *, int, short, double);
CODE:
	func   = INT2PTR(int(*)(void *, int, short, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2, d3);
OUTPUT:
	RETVAL

void *
nci_pvisd( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvisd( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvisd( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svisd( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvisd( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvisd( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivisd( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdisd( c_func, d0, i1, s2, d3 )
	SV* c_func
	double d0
	int i1
	short s2
	double d3
PREINIT:
	void *(*func)(double, int, short, double);
CODE:
	func   = INT2PTR(void *(*)(double, int, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2, d3);
OUTPUT:
	RETVAL

void
nci_vdisd( c_func, d0, i1, s2, d3 )
	SV* c_func
	double d0
	int i1
	short s2
	double d3
PREINIT:
	void(*func)(double, int, short, double);
CODE:
	func   = INT2PTR(void(*)(double, int, short, double), SvIV(c_func) );
	(*func)(d0, i1, s2, d3);

double
nci_ddisd( c_func, d0, i1, s2, d3 )
	SV* c_func
	double d0
	int i1
	short s2
	double d3
PREINIT:
	double(*func)(double, int, short, double);
CODE:
	func   = INT2PTR(double(*)(double, int, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2, d3);
OUTPUT:
	RETVAL

short
nci_sdisd( c_func, d0, i1, s2, d3 )
	SV* c_func
	double d0
	int i1
	short s2
	double d3
PREINIT:
	short(*func)(double, int, short, double);
CODE:
	func   = INT2PTR(short(*)(double, int, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2, d3);
OUTPUT:
	RETVAL

float
nci_fdisd( c_func, d0, i1, s2, d3 )
	SV* c_func
	double d0
	int i1
	short s2
	double d3
PREINIT:
	float(*func)(double, int, short, double);
CODE:
	func   = INT2PTR(float(*)(double, int, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2, d3);
OUTPUT:
	RETVAL

char *
nci_tdisd( c_func, d0, i1, s2, d3 )
	SV* c_func
	double d0
	int i1
	short s2
	double d3
PREINIT:
	char *(*func)(double, int, short, double);
CODE:
	func   = INT2PTR(char *(*)(double, int, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2, d3);
OUTPUT:
	RETVAL

int
nci_idisd( c_func, d0, i1, s2, d3 )
	SV* c_func
	double d0
	int i1
	short s2
	double d3
PREINIT:
	int(*func)(double, int, short, double);
CODE:
	func   = INT2PTR(int(*)(double, int, short, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2, d3);
OUTPUT:
	RETVAL

void *
nci_psisd( c_func, s0, i1, s2, d3 )
	SV* c_func
	short s0
	int i1
	short s2
	double d3
PREINIT:
	void *(*func)(short, int, short, double);
CODE:
	func   = INT2PTR(void *(*)(short, int, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2, d3);
OUTPUT:
	RETVAL

void
nci_vsisd( c_func, s0, i1, s2, d3 )
	SV* c_func
	short s0
	int i1
	short s2
	double d3
PREINIT:
	void(*func)(short, int, short, double);
CODE:
	func   = INT2PTR(void(*)(short, int, short, double), SvIV(c_func) );
	(*func)(s0, i1, s2, d3);

double
nci_dsisd( c_func, s0, i1, s2, d3 )
	SV* c_func
	short s0
	int i1
	short s2
	double d3
PREINIT:
	double(*func)(short, int, short, double);
CODE:
	func   = INT2PTR(double(*)(short, int, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2, d3);
OUTPUT:
	RETVAL

short
nci_ssisd( c_func, s0, i1, s2, d3 )
	SV* c_func
	short s0
	int i1
	short s2
	double d3
PREINIT:
	short(*func)(short, int, short, double);
CODE:
	func   = INT2PTR(short(*)(short, int, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2, d3);
OUTPUT:
	RETVAL

float
nci_fsisd( c_func, s0, i1, s2, d3 )
	SV* c_func
	short s0
	int i1
	short s2
	double d3
PREINIT:
	float(*func)(short, int, short, double);
CODE:
	func   = INT2PTR(float(*)(short, int, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2, d3);
OUTPUT:
	RETVAL

char *
nci_tsisd( c_func, s0, i1, s2, d3 )
	SV* c_func
	short s0
	int i1
	short s2
	double d3
PREINIT:
	char *(*func)(short, int, short, double);
CODE:
	func   = INT2PTR(char *(*)(short, int, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2, d3);
OUTPUT:
	RETVAL

int
nci_isisd( c_func, s0, i1, s2, d3 )
	SV* c_func
	short s0
	int i1
	short s2
	double d3
PREINIT:
	int(*func)(short, int, short, double);
CODE:
	func   = INT2PTR(int(*)(short, int, short, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2, d3);
OUTPUT:
	RETVAL

void *
nci_pfisd( c_func, f0, i1, s2, d3 )
	SV* c_func
	float f0
	int i1
	short s2
	double d3
PREINIT:
	void *(*func)(float, int, short, double);
CODE:
	func   = INT2PTR(void *(*)(float, int, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2, d3);
OUTPUT:
	RETVAL

void
nci_vfisd( c_func, f0, i1, s2, d3 )
	SV* c_func
	float f0
	int i1
	short s2
	double d3
PREINIT:
	void(*func)(float, int, short, double);
CODE:
	func   = INT2PTR(void(*)(float, int, short, double), SvIV(c_func) );
	(*func)(f0, i1, s2, d3);

double
nci_dfisd( c_func, f0, i1, s2, d3 )
	SV* c_func
	float f0
	int i1
	short s2
	double d3
PREINIT:
	double(*func)(float, int, short, double);
CODE:
	func   = INT2PTR(double(*)(float, int, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2, d3);
OUTPUT:
	RETVAL

short
nci_sfisd( c_func, f0, i1, s2, d3 )
	SV* c_func
	float f0
	int i1
	short s2
	double d3
PREINIT:
	short(*func)(float, int, short, double);
CODE:
	func   = INT2PTR(short(*)(float, int, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2, d3);
OUTPUT:
	RETVAL

float
nci_ffisd( c_func, f0, i1, s2, d3 )
	SV* c_func
	float f0
	int i1
	short s2
	double d3
PREINIT:
	float(*func)(float, int, short, double);
CODE:
	func   = INT2PTR(float(*)(float, int, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2, d3);
OUTPUT:
	RETVAL

char *
nci_tfisd( c_func, f0, i1, s2, d3 )
	SV* c_func
	float f0
	int i1
	short s2
	double d3
PREINIT:
	char *(*func)(float, int, short, double);
CODE:
	func   = INT2PTR(char *(*)(float, int, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2, d3);
OUTPUT:
	RETVAL

int
nci_ifisd( c_func, f0, i1, s2, d3 )
	SV* c_func
	float f0
	int i1
	short s2
	double d3
PREINIT:
	int(*func)(float, int, short, double);
CODE:
	func   = INT2PTR(int(*)(float, int, short, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2, d3);
OUTPUT:
	RETVAL

void *
nci_ptisd( c_func, t0, i1, s2, d3 )
	SV* c_func
	char * t0
	int i1
	short s2
	double d3
PREINIT:
	void *(*func)(char *, int, short, double);
CODE:
	func   = INT2PTR(void *(*)(char *, int, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2, d3);
OUTPUT:
	RETVAL

void
nci_vtisd( c_func, t0, i1, s2, d3 )
	SV* c_func
	char * t0
	int i1
	short s2
	double d3
PREINIT:
	void(*func)(char *, int, short, double);
CODE:
	func   = INT2PTR(void(*)(char *, int, short, double), SvIV(c_func) );
	(*func)(t0, i1, s2, d3);

double
nci_dtisd( c_func, t0, i1, s2, d3 )
	SV* c_func
	char * t0
	int i1
	short s2
	double d3
PREINIT:
	double(*func)(char *, int, short, double);
CODE:
	func   = INT2PTR(double(*)(char *, int, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2, d3);
OUTPUT:
	RETVAL

short
nci_stisd( c_func, t0, i1, s2, d3 )
	SV* c_func
	char * t0
	int i1
	short s2
	double d3
PREINIT:
	short(*func)(char *, int, short, double);
CODE:
	func   = INT2PTR(short(*)(char *, int, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2, d3);
OUTPUT:
	RETVAL

float
nci_ftisd( c_func, t0, i1, s2, d3 )
	SV* c_func
	char * t0
	int i1
	short s2
	double d3
PREINIT:
	float(*func)(char *, int, short, double);
CODE:
	func   = INT2PTR(float(*)(char *, int, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2, d3);
OUTPUT:
	RETVAL

char *
nci_ttisd( c_func, t0, i1, s2, d3 )
	SV* c_func
	char * t0
	int i1
	short s2
	double d3
PREINIT:
	char *(*func)(char *, int, short, double);
CODE:
	func   = INT2PTR(char *(*)(char *, int, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2, d3);
OUTPUT:
	RETVAL

int
nci_itisd( c_func, t0, i1, s2, d3 )
	SV* c_func
	char * t0
	int i1
	short s2
	double d3
PREINIT:
	int(*func)(char *, int, short, double);
CODE:
	func   = INT2PTR(int(*)(char *, int, short, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2, d3);
OUTPUT:
	RETVAL

void *
nci_piisd( c_func, i0, i1, s2, d3 )
	SV* c_func
	int i0
	int i1
	short s2
	double d3
PREINIT:
	void *(*func)(int, int, short, double);
CODE:
	func   = INT2PTR(void *(*)(int, int, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2, d3);
OUTPUT:
	RETVAL

void
nci_viisd( c_func, i0, i1, s2, d3 )
	SV* c_func
	int i0
	int i1
	short s2
	double d3
PREINIT:
	void(*func)(int, int, short, double);
CODE:
	func   = INT2PTR(void(*)(int, int, short, double), SvIV(c_func) );
	(*func)(i0, i1, s2, d3);

double
nci_diisd( c_func, i0, i1, s2, d3 )
	SV* c_func
	int i0
	int i1
	short s2
	double d3
PREINIT:
	double(*func)(int, int, short, double);
CODE:
	func   = INT2PTR(double(*)(int, int, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2, d3);
OUTPUT:
	RETVAL

short
nci_siisd( c_func, i0, i1, s2, d3 )
	SV* c_func
	int i0
	int i1
	short s2
	double d3
PREINIT:
	short(*func)(int, int, short, double);
CODE:
	func   = INT2PTR(short(*)(int, int, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2, d3);
OUTPUT:
	RETVAL

float
nci_fiisd( c_func, i0, i1, s2, d3 )
	SV* c_func
	int i0
	int i1
	short s2
	double d3
PREINIT:
	float(*func)(int, int, short, double);
CODE:
	func   = INT2PTR(float(*)(int, int, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2, d3);
OUTPUT:
	RETVAL

char *
nci_tiisd( c_func, i0, i1, s2, d3 )
	SV* c_func
	int i0
	int i1
	short s2
	double d3
PREINIT:
	char *(*func)(int, int, short, double);
CODE:
	func   = INT2PTR(char *(*)(int, int, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2, d3);
OUTPUT:
	RETVAL

int
nci_iiisd( c_func, i0, i1, s2, d3 )
	SV* c_func
	int i0
	int i1
	short s2
	double d3
PREINIT:
	int(*func)(int, int, short, double);
CODE:
	func   = INT2PTR(int(*)(int, int, short, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2, d3);
OUTPUT:
	RETVAL

void *
nci_pppfd( c_func, p0, p1, f2, d3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	double d3
PREINIT:
	void *(*func)(void *, void *, float, double);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2, d3);
OUTPUT:
	RETVAL

void
nci_vppfd( c_func, p0, p1, f2, d3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	double d3
PREINIT:
	void(*func)(void *, void *, float, double);
CODE:
	func   = INT2PTR(void(*)(void *, void *, float, double), SvIV(c_func) );
	(*func)(p0, p1, f2, d3);

double
nci_dppfd( c_func, p0, p1, f2, d3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	double d3
PREINIT:
	double(*func)(void *, void *, float, double);
CODE:
	func   = INT2PTR(double(*)(void *, void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2, d3);
OUTPUT:
	RETVAL

short
nci_sppfd( c_func, p0, p1, f2, d3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	double d3
PREINIT:
	short(*func)(void *, void *, float, double);
CODE:
	func   = INT2PTR(short(*)(void *, void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2, d3);
OUTPUT:
	RETVAL

float
nci_fppfd( c_func, p0, p1, f2, d3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	double d3
PREINIT:
	float(*func)(void *, void *, float, double);
CODE:
	func   = INT2PTR(float(*)(void *, void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2, d3);
OUTPUT:
	RETVAL

char *
nci_tppfd( c_func, p0, p1, f2, d3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	double d3
PREINIT:
	char *(*func)(void *, void *, float, double);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2, d3);
OUTPUT:
	RETVAL

int
nci_ippfd( c_func, p0, p1, f2, d3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	double d3
PREINIT:
	int(*func)(void *, void *, float, double);
CODE:
	func   = INT2PTR(int(*)(void *, void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2, d3);
OUTPUT:
	RETVAL

void *
nci_pvpfd( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvpfd( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvpfd( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svpfd( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvpfd( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvpfd( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivpfd( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdpfd( c_func, d0, p1, f2, d3 )
	SV* c_func
	double d0
	void * p1
	float f2
	double d3
PREINIT:
	void *(*func)(double, void *, float, double);
CODE:
	func   = INT2PTR(void *(*)(double, void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2, d3);
OUTPUT:
	RETVAL

void
nci_vdpfd( c_func, d0, p1, f2, d3 )
	SV* c_func
	double d0
	void * p1
	float f2
	double d3
PREINIT:
	void(*func)(double, void *, float, double);
CODE:
	func   = INT2PTR(void(*)(double, void *, float, double), SvIV(c_func) );
	(*func)(d0, p1, f2, d3);

double
nci_ddpfd( c_func, d0, p1, f2, d3 )
	SV* c_func
	double d0
	void * p1
	float f2
	double d3
PREINIT:
	double(*func)(double, void *, float, double);
CODE:
	func   = INT2PTR(double(*)(double, void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2, d3);
OUTPUT:
	RETVAL

short
nci_sdpfd( c_func, d0, p1, f2, d3 )
	SV* c_func
	double d0
	void * p1
	float f2
	double d3
PREINIT:
	short(*func)(double, void *, float, double);
CODE:
	func   = INT2PTR(short(*)(double, void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2, d3);
OUTPUT:
	RETVAL

float
nci_fdpfd( c_func, d0, p1, f2, d3 )
	SV* c_func
	double d0
	void * p1
	float f2
	double d3
PREINIT:
	float(*func)(double, void *, float, double);
CODE:
	func   = INT2PTR(float(*)(double, void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2, d3);
OUTPUT:
	RETVAL

char *
nci_tdpfd( c_func, d0, p1, f2, d3 )
	SV* c_func
	double d0
	void * p1
	float f2
	double d3
PREINIT:
	char *(*func)(double, void *, float, double);
CODE:
	func   = INT2PTR(char *(*)(double, void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2, d3);
OUTPUT:
	RETVAL

int
nci_idpfd( c_func, d0, p1, f2, d3 )
	SV* c_func
	double d0
	void * p1
	float f2
	double d3
PREINIT:
	int(*func)(double, void *, float, double);
CODE:
	func   = INT2PTR(int(*)(double, void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2, d3);
OUTPUT:
	RETVAL

void *
nci_pspfd( c_func, s0, p1, f2, d3 )
	SV* c_func
	short s0
	void * p1
	float f2
	double d3
PREINIT:
	void *(*func)(short, void *, float, double);
CODE:
	func   = INT2PTR(void *(*)(short, void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2, d3);
OUTPUT:
	RETVAL

void
nci_vspfd( c_func, s0, p1, f2, d3 )
	SV* c_func
	short s0
	void * p1
	float f2
	double d3
PREINIT:
	void(*func)(short, void *, float, double);
CODE:
	func   = INT2PTR(void(*)(short, void *, float, double), SvIV(c_func) );
	(*func)(s0, p1, f2, d3);

double
nci_dspfd( c_func, s0, p1, f2, d3 )
	SV* c_func
	short s0
	void * p1
	float f2
	double d3
PREINIT:
	double(*func)(short, void *, float, double);
CODE:
	func   = INT2PTR(double(*)(short, void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2, d3);
OUTPUT:
	RETVAL

short
nci_sspfd( c_func, s0, p1, f2, d3 )
	SV* c_func
	short s0
	void * p1
	float f2
	double d3
PREINIT:
	short(*func)(short, void *, float, double);
CODE:
	func   = INT2PTR(short(*)(short, void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2, d3);
OUTPUT:
	RETVAL

float
nci_fspfd( c_func, s0, p1, f2, d3 )
	SV* c_func
	short s0
	void * p1
	float f2
	double d3
PREINIT:
	float(*func)(short, void *, float, double);
CODE:
	func   = INT2PTR(float(*)(short, void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2, d3);
OUTPUT:
	RETVAL

char *
nci_tspfd( c_func, s0, p1, f2, d3 )
	SV* c_func
	short s0
	void * p1
	float f2
	double d3
PREINIT:
	char *(*func)(short, void *, float, double);
CODE:
	func   = INT2PTR(char *(*)(short, void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2, d3);
OUTPUT:
	RETVAL

int
nci_ispfd( c_func, s0, p1, f2, d3 )
	SV* c_func
	short s0
	void * p1
	float f2
	double d3
PREINIT:
	int(*func)(short, void *, float, double);
CODE:
	func   = INT2PTR(int(*)(short, void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2, d3);
OUTPUT:
	RETVAL

void *
nci_pfpfd( c_func, f0, p1, f2, d3 )
	SV* c_func
	float f0
	void * p1
	float f2
	double d3
PREINIT:
	void *(*func)(float, void *, float, double);
CODE:
	func   = INT2PTR(void *(*)(float, void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2, d3);
OUTPUT:
	RETVAL

void
nci_vfpfd( c_func, f0, p1, f2, d3 )
	SV* c_func
	float f0
	void * p1
	float f2
	double d3
PREINIT:
	void(*func)(float, void *, float, double);
CODE:
	func   = INT2PTR(void(*)(float, void *, float, double), SvIV(c_func) );
	(*func)(f0, p1, f2, d3);

double
nci_dfpfd( c_func, f0, p1, f2, d3 )
	SV* c_func
	float f0
	void * p1
	float f2
	double d3
PREINIT:
	double(*func)(float, void *, float, double);
CODE:
	func   = INT2PTR(double(*)(float, void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2, d3);
OUTPUT:
	RETVAL

short
nci_sfpfd( c_func, f0, p1, f2, d3 )
	SV* c_func
	float f0
	void * p1
	float f2
	double d3
PREINIT:
	short(*func)(float, void *, float, double);
CODE:
	func   = INT2PTR(short(*)(float, void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2, d3);
OUTPUT:
	RETVAL

float
nci_ffpfd( c_func, f0, p1, f2, d3 )
	SV* c_func
	float f0
	void * p1
	float f2
	double d3
PREINIT:
	float(*func)(float, void *, float, double);
CODE:
	func   = INT2PTR(float(*)(float, void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2, d3);
OUTPUT:
	RETVAL

char *
nci_tfpfd( c_func, f0, p1, f2, d3 )
	SV* c_func
	float f0
	void * p1
	float f2
	double d3
PREINIT:
	char *(*func)(float, void *, float, double);
CODE:
	func   = INT2PTR(char *(*)(float, void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2, d3);
OUTPUT:
	RETVAL

int
nci_ifpfd( c_func, f0, p1, f2, d3 )
	SV* c_func
	float f0
	void * p1
	float f2
	double d3
PREINIT:
	int(*func)(float, void *, float, double);
CODE:
	func   = INT2PTR(int(*)(float, void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2, d3);
OUTPUT:
	RETVAL

void *
nci_ptpfd( c_func, t0, p1, f2, d3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	double d3
PREINIT:
	void *(*func)(char *, void *, float, double);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2, d3);
OUTPUT:
	RETVAL

void
nci_vtpfd( c_func, t0, p1, f2, d3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	double d3
PREINIT:
	void(*func)(char *, void *, float, double);
CODE:
	func   = INT2PTR(void(*)(char *, void *, float, double), SvIV(c_func) );
	(*func)(t0, p1, f2, d3);

double
nci_dtpfd( c_func, t0, p1, f2, d3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	double d3
PREINIT:
	double(*func)(char *, void *, float, double);
CODE:
	func   = INT2PTR(double(*)(char *, void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2, d3);
OUTPUT:
	RETVAL

short
nci_stpfd( c_func, t0, p1, f2, d3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	double d3
PREINIT:
	short(*func)(char *, void *, float, double);
CODE:
	func   = INT2PTR(short(*)(char *, void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2, d3);
OUTPUT:
	RETVAL

float
nci_ftpfd( c_func, t0, p1, f2, d3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	double d3
PREINIT:
	float(*func)(char *, void *, float, double);
CODE:
	func   = INT2PTR(float(*)(char *, void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2, d3);
OUTPUT:
	RETVAL

char *
nci_ttpfd( c_func, t0, p1, f2, d3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	double d3
PREINIT:
	char *(*func)(char *, void *, float, double);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2, d3);
OUTPUT:
	RETVAL

int
nci_itpfd( c_func, t0, p1, f2, d3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	double d3
PREINIT:
	int(*func)(char *, void *, float, double);
CODE:
	func   = INT2PTR(int(*)(char *, void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2, d3);
OUTPUT:
	RETVAL

void *
nci_pipfd( c_func, i0, p1, f2, d3 )
	SV* c_func
	int i0
	void * p1
	float f2
	double d3
PREINIT:
	void *(*func)(int, void *, float, double);
CODE:
	func   = INT2PTR(void *(*)(int, void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2, d3);
OUTPUT:
	RETVAL

void
nci_vipfd( c_func, i0, p1, f2, d3 )
	SV* c_func
	int i0
	void * p1
	float f2
	double d3
PREINIT:
	void(*func)(int, void *, float, double);
CODE:
	func   = INT2PTR(void(*)(int, void *, float, double), SvIV(c_func) );
	(*func)(i0, p1, f2, d3);

double
nci_dipfd( c_func, i0, p1, f2, d3 )
	SV* c_func
	int i0
	void * p1
	float f2
	double d3
PREINIT:
	double(*func)(int, void *, float, double);
CODE:
	func   = INT2PTR(double(*)(int, void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2, d3);
OUTPUT:
	RETVAL

short
nci_sipfd( c_func, i0, p1, f2, d3 )
	SV* c_func
	int i0
	void * p1
	float f2
	double d3
PREINIT:
	short(*func)(int, void *, float, double);
CODE:
	func   = INT2PTR(short(*)(int, void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2, d3);
OUTPUT:
	RETVAL

float
nci_fipfd( c_func, i0, p1, f2, d3 )
	SV* c_func
	int i0
	void * p1
	float f2
	double d3
PREINIT:
	float(*func)(int, void *, float, double);
CODE:
	func   = INT2PTR(float(*)(int, void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2, d3);
OUTPUT:
	RETVAL

char *
nci_tipfd( c_func, i0, p1, f2, d3 )
	SV* c_func
	int i0
	void * p1
	float f2
	double d3
PREINIT:
	char *(*func)(int, void *, float, double);
CODE:
	func   = INT2PTR(char *(*)(int, void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2, d3);
OUTPUT:
	RETVAL

int
nci_iipfd( c_func, i0, p1, f2, d3 )
	SV* c_func
	int i0
	void * p1
	float f2
	double d3
PREINIT:
	int(*func)(int, void *, float, double);
CODE:
	func   = INT2PTR(int(*)(int, void *, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2, d3);
OUTPUT:
	RETVAL

void *
nci_ppdfd( c_func, p0, d1, f2, d3 )
	SV* c_func
	void * p0
	double d1
	float f2
	double d3
PREINIT:
	void *(*func)(void *, double, float, double);
CODE:
	func   = INT2PTR(void *(*)(void *, double, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2, d3);
OUTPUT:
	RETVAL

void
nci_vpdfd( c_func, p0, d1, f2, d3 )
	SV* c_func
	void * p0
	double d1
	float f2
	double d3
PREINIT:
	void(*func)(void *, double, float, double);
CODE:
	func   = INT2PTR(void(*)(void *, double, float, double), SvIV(c_func) );
	(*func)(p0, d1, f2, d3);

double
nci_dpdfd( c_func, p0, d1, f2, d3 )
	SV* c_func
	void * p0
	double d1
	float f2
	double d3
PREINIT:
	double(*func)(void *, double, float, double);
CODE:
	func   = INT2PTR(double(*)(void *, double, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2, d3);
OUTPUT:
	RETVAL

short
nci_spdfd( c_func, p0, d1, f2, d3 )
	SV* c_func
	void * p0
	double d1
	float f2
	double d3
PREINIT:
	short(*func)(void *, double, float, double);
CODE:
	func   = INT2PTR(short(*)(void *, double, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2, d3);
OUTPUT:
	RETVAL

float
nci_fpdfd( c_func, p0, d1, f2, d3 )
	SV* c_func
	void * p0
	double d1
	float f2
	double d3
PREINIT:
	float(*func)(void *, double, float, double);
CODE:
	func   = INT2PTR(float(*)(void *, double, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2, d3);
OUTPUT:
	RETVAL

char *
nci_tpdfd( c_func, p0, d1, f2, d3 )
	SV* c_func
	void * p0
	double d1
	float f2
	double d3
PREINIT:
	char *(*func)(void *, double, float, double);
CODE:
	func   = INT2PTR(char *(*)(void *, double, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2, d3);
OUTPUT:
	RETVAL

int
nci_ipdfd( c_func, p0, d1, f2, d3 )
	SV* c_func
	void * p0
	double d1
	float f2
	double d3
PREINIT:
	int(*func)(void *, double, float, double);
CODE:
	func   = INT2PTR(int(*)(void *, double, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2, d3);
OUTPUT:
	RETVAL

void *
nci_pvdfd( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvdfd( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvdfd( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svdfd( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvdfd( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvdfd( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivdfd( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pddfd( c_func, d0, d1, f2, d3 )
	SV* c_func
	double d0
	double d1
	float f2
	double d3
PREINIT:
	void *(*func)(double, double, float, double);
CODE:
	func   = INT2PTR(void *(*)(double, double, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2, d3);
OUTPUT:
	RETVAL

void
nci_vddfd( c_func, d0, d1, f2, d3 )
	SV* c_func
	double d0
	double d1
	float f2
	double d3
PREINIT:
	void(*func)(double, double, float, double);
CODE:
	func   = INT2PTR(void(*)(double, double, float, double), SvIV(c_func) );
	(*func)(d0, d1, f2, d3);

double
nci_dddfd( c_func, d0, d1, f2, d3 )
	SV* c_func
	double d0
	double d1
	float f2
	double d3
PREINIT:
	double(*func)(double, double, float, double);
CODE:
	func   = INT2PTR(double(*)(double, double, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2, d3);
OUTPUT:
	RETVAL

short
nci_sddfd( c_func, d0, d1, f2, d3 )
	SV* c_func
	double d0
	double d1
	float f2
	double d3
PREINIT:
	short(*func)(double, double, float, double);
CODE:
	func   = INT2PTR(short(*)(double, double, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2, d3);
OUTPUT:
	RETVAL

float
nci_fddfd( c_func, d0, d1, f2, d3 )
	SV* c_func
	double d0
	double d1
	float f2
	double d3
PREINIT:
	float(*func)(double, double, float, double);
CODE:
	func   = INT2PTR(float(*)(double, double, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2, d3);
OUTPUT:
	RETVAL

char *
nci_tddfd( c_func, d0, d1, f2, d3 )
	SV* c_func
	double d0
	double d1
	float f2
	double d3
PREINIT:
	char *(*func)(double, double, float, double);
CODE:
	func   = INT2PTR(char *(*)(double, double, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2, d3);
OUTPUT:
	RETVAL

int
nci_iddfd( c_func, d0, d1, f2, d3 )
	SV* c_func
	double d0
	double d1
	float f2
	double d3
PREINIT:
	int(*func)(double, double, float, double);
CODE:
	func   = INT2PTR(int(*)(double, double, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2, d3);
OUTPUT:
	RETVAL

void *
nci_psdfd( c_func, s0, d1, f2, d3 )
	SV* c_func
	short s0
	double d1
	float f2
	double d3
PREINIT:
	void *(*func)(short, double, float, double);
CODE:
	func   = INT2PTR(void *(*)(short, double, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2, d3);
OUTPUT:
	RETVAL

void
nci_vsdfd( c_func, s0, d1, f2, d3 )
	SV* c_func
	short s0
	double d1
	float f2
	double d3
PREINIT:
	void(*func)(short, double, float, double);
CODE:
	func   = INT2PTR(void(*)(short, double, float, double), SvIV(c_func) );
	(*func)(s0, d1, f2, d3);

double
nci_dsdfd( c_func, s0, d1, f2, d3 )
	SV* c_func
	short s0
	double d1
	float f2
	double d3
PREINIT:
	double(*func)(short, double, float, double);
CODE:
	func   = INT2PTR(double(*)(short, double, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2, d3);
OUTPUT:
	RETVAL

short
nci_ssdfd( c_func, s0, d1, f2, d3 )
	SV* c_func
	short s0
	double d1
	float f2
	double d3
PREINIT:
	short(*func)(short, double, float, double);
CODE:
	func   = INT2PTR(short(*)(short, double, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2, d3);
OUTPUT:
	RETVAL

float
nci_fsdfd( c_func, s0, d1, f2, d3 )
	SV* c_func
	short s0
	double d1
	float f2
	double d3
PREINIT:
	float(*func)(short, double, float, double);
CODE:
	func   = INT2PTR(float(*)(short, double, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2, d3);
OUTPUT:
	RETVAL

char *
nci_tsdfd( c_func, s0, d1, f2, d3 )
	SV* c_func
	short s0
	double d1
	float f2
	double d3
PREINIT:
	char *(*func)(short, double, float, double);
CODE:
	func   = INT2PTR(char *(*)(short, double, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2, d3);
OUTPUT:
	RETVAL

int
nci_isdfd( c_func, s0, d1, f2, d3 )
	SV* c_func
	short s0
	double d1
	float f2
	double d3
PREINIT:
	int(*func)(short, double, float, double);
CODE:
	func   = INT2PTR(int(*)(short, double, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2, d3);
OUTPUT:
	RETVAL

void *
nci_pfdfd( c_func, f0, d1, f2, d3 )
	SV* c_func
	float f0
	double d1
	float f2
	double d3
PREINIT:
	void *(*func)(float, double, float, double);
CODE:
	func   = INT2PTR(void *(*)(float, double, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2, d3);
OUTPUT:
	RETVAL

void
nci_vfdfd( c_func, f0, d1, f2, d3 )
	SV* c_func
	float f0
	double d1
	float f2
	double d3
PREINIT:
	void(*func)(float, double, float, double);
CODE:
	func   = INT2PTR(void(*)(float, double, float, double), SvIV(c_func) );
	(*func)(f0, d1, f2, d3);

double
nci_dfdfd( c_func, f0, d1, f2, d3 )
	SV* c_func
	float f0
	double d1
	float f2
	double d3
PREINIT:
	double(*func)(float, double, float, double);
CODE:
	func   = INT2PTR(double(*)(float, double, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2, d3);
OUTPUT:
	RETVAL

short
nci_sfdfd( c_func, f0, d1, f2, d3 )
	SV* c_func
	float f0
	double d1
	float f2
	double d3
PREINIT:
	short(*func)(float, double, float, double);
CODE:
	func   = INT2PTR(short(*)(float, double, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2, d3);
OUTPUT:
	RETVAL

float
nci_ffdfd( c_func, f0, d1, f2, d3 )
	SV* c_func
	float f0
	double d1
	float f2
	double d3
PREINIT:
	float(*func)(float, double, float, double);
CODE:
	func   = INT2PTR(float(*)(float, double, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2, d3);
OUTPUT:
	RETVAL

char *
nci_tfdfd( c_func, f0, d1, f2, d3 )
	SV* c_func
	float f0
	double d1
	float f2
	double d3
PREINIT:
	char *(*func)(float, double, float, double);
CODE:
	func   = INT2PTR(char *(*)(float, double, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2, d3);
OUTPUT:
	RETVAL

int
nci_ifdfd( c_func, f0, d1, f2, d3 )
	SV* c_func
	float f0
	double d1
	float f2
	double d3
PREINIT:
	int(*func)(float, double, float, double);
CODE:
	func   = INT2PTR(int(*)(float, double, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2, d3);
OUTPUT:
	RETVAL

void *
nci_ptdfd( c_func, t0, d1, f2, d3 )
	SV* c_func
	char * t0
	double d1
	float f2
	double d3
PREINIT:
	void *(*func)(char *, double, float, double);
CODE:
	func   = INT2PTR(void *(*)(char *, double, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2, d3);
OUTPUT:
	RETVAL

void
nci_vtdfd( c_func, t0, d1, f2, d3 )
	SV* c_func
	char * t0
	double d1
	float f2
	double d3
PREINIT:
	void(*func)(char *, double, float, double);
CODE:
	func   = INT2PTR(void(*)(char *, double, float, double), SvIV(c_func) );
	(*func)(t0, d1, f2, d3);

double
nci_dtdfd( c_func, t0, d1, f2, d3 )
	SV* c_func
	char * t0
	double d1
	float f2
	double d3
PREINIT:
	double(*func)(char *, double, float, double);
CODE:
	func   = INT2PTR(double(*)(char *, double, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2, d3);
OUTPUT:
	RETVAL

short
nci_stdfd( c_func, t0, d1, f2, d3 )
	SV* c_func
	char * t0
	double d1
	float f2
	double d3
PREINIT:
	short(*func)(char *, double, float, double);
CODE:
	func   = INT2PTR(short(*)(char *, double, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2, d3);
OUTPUT:
	RETVAL

float
nci_ftdfd( c_func, t0, d1, f2, d3 )
	SV* c_func
	char * t0
	double d1
	float f2
	double d3
PREINIT:
	float(*func)(char *, double, float, double);
CODE:
	func   = INT2PTR(float(*)(char *, double, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2, d3);
OUTPUT:
	RETVAL

char *
nci_ttdfd( c_func, t0, d1, f2, d3 )
	SV* c_func
	char * t0
	double d1
	float f2
	double d3
PREINIT:
	char *(*func)(char *, double, float, double);
CODE:
	func   = INT2PTR(char *(*)(char *, double, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2, d3);
OUTPUT:
	RETVAL

int
nci_itdfd( c_func, t0, d1, f2, d3 )
	SV* c_func
	char * t0
	double d1
	float f2
	double d3
PREINIT:
	int(*func)(char *, double, float, double);
CODE:
	func   = INT2PTR(int(*)(char *, double, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2, d3);
OUTPUT:
	RETVAL

void *
nci_pidfd( c_func, i0, d1, f2, d3 )
	SV* c_func
	int i0
	double d1
	float f2
	double d3
PREINIT:
	void *(*func)(int, double, float, double);
CODE:
	func   = INT2PTR(void *(*)(int, double, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2, d3);
OUTPUT:
	RETVAL

void
nci_vidfd( c_func, i0, d1, f2, d3 )
	SV* c_func
	int i0
	double d1
	float f2
	double d3
PREINIT:
	void(*func)(int, double, float, double);
CODE:
	func   = INT2PTR(void(*)(int, double, float, double), SvIV(c_func) );
	(*func)(i0, d1, f2, d3);

double
nci_didfd( c_func, i0, d1, f2, d3 )
	SV* c_func
	int i0
	double d1
	float f2
	double d3
PREINIT:
	double(*func)(int, double, float, double);
CODE:
	func   = INT2PTR(double(*)(int, double, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2, d3);
OUTPUT:
	RETVAL

short
nci_sidfd( c_func, i0, d1, f2, d3 )
	SV* c_func
	int i0
	double d1
	float f2
	double d3
PREINIT:
	short(*func)(int, double, float, double);
CODE:
	func   = INT2PTR(short(*)(int, double, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2, d3);
OUTPUT:
	RETVAL

float
nci_fidfd( c_func, i0, d1, f2, d3 )
	SV* c_func
	int i0
	double d1
	float f2
	double d3
PREINIT:
	float(*func)(int, double, float, double);
CODE:
	func   = INT2PTR(float(*)(int, double, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2, d3);
OUTPUT:
	RETVAL

char *
nci_tidfd( c_func, i0, d1, f2, d3 )
	SV* c_func
	int i0
	double d1
	float f2
	double d3
PREINIT:
	char *(*func)(int, double, float, double);
CODE:
	func   = INT2PTR(char *(*)(int, double, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2, d3);
OUTPUT:
	RETVAL

int
nci_iidfd( c_func, i0, d1, f2, d3 )
	SV* c_func
	int i0
	double d1
	float f2
	double d3
PREINIT:
	int(*func)(int, double, float, double);
CODE:
	func   = INT2PTR(int(*)(int, double, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2, d3);
OUTPUT:
	RETVAL

void *
nci_ppsfd( c_func, p0, s1, f2, d3 )
	SV* c_func
	void * p0
	short s1
	float f2
	double d3
PREINIT:
	void *(*func)(void *, short, float, double);
CODE:
	func   = INT2PTR(void *(*)(void *, short, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2, d3);
OUTPUT:
	RETVAL

void
nci_vpsfd( c_func, p0, s1, f2, d3 )
	SV* c_func
	void * p0
	short s1
	float f2
	double d3
PREINIT:
	void(*func)(void *, short, float, double);
CODE:
	func   = INT2PTR(void(*)(void *, short, float, double), SvIV(c_func) );
	(*func)(p0, s1, f2, d3);

double
nci_dpsfd( c_func, p0, s1, f2, d3 )
	SV* c_func
	void * p0
	short s1
	float f2
	double d3
PREINIT:
	double(*func)(void *, short, float, double);
CODE:
	func   = INT2PTR(double(*)(void *, short, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2, d3);
OUTPUT:
	RETVAL

short
nci_spsfd( c_func, p0, s1, f2, d3 )
	SV* c_func
	void * p0
	short s1
	float f2
	double d3
PREINIT:
	short(*func)(void *, short, float, double);
CODE:
	func   = INT2PTR(short(*)(void *, short, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2, d3);
OUTPUT:
	RETVAL

float
nci_fpsfd( c_func, p0, s1, f2, d3 )
	SV* c_func
	void * p0
	short s1
	float f2
	double d3
PREINIT:
	float(*func)(void *, short, float, double);
CODE:
	func   = INT2PTR(float(*)(void *, short, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2, d3);
OUTPUT:
	RETVAL

char *
nci_tpsfd( c_func, p0, s1, f2, d3 )
	SV* c_func
	void * p0
	short s1
	float f2
	double d3
PREINIT:
	char *(*func)(void *, short, float, double);
CODE:
	func   = INT2PTR(char *(*)(void *, short, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2, d3);
OUTPUT:
	RETVAL

int
nci_ipsfd( c_func, p0, s1, f2, d3 )
	SV* c_func
	void * p0
	short s1
	float f2
	double d3
PREINIT:
	int(*func)(void *, short, float, double);
CODE:
	func   = INT2PTR(int(*)(void *, short, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2, d3);
OUTPUT:
	RETVAL

void *
nci_pvsfd( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvsfd( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvsfd( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svsfd( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvsfd( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvsfd( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivsfd( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdsfd( c_func, d0, s1, f2, d3 )
	SV* c_func
	double d0
	short s1
	float f2
	double d3
PREINIT:
	void *(*func)(double, short, float, double);
CODE:
	func   = INT2PTR(void *(*)(double, short, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2, d3);
OUTPUT:
	RETVAL

void
nci_vdsfd( c_func, d0, s1, f2, d3 )
	SV* c_func
	double d0
	short s1
	float f2
	double d3
PREINIT:
	void(*func)(double, short, float, double);
CODE:
	func   = INT2PTR(void(*)(double, short, float, double), SvIV(c_func) );
	(*func)(d0, s1, f2, d3);

double
nci_ddsfd( c_func, d0, s1, f2, d3 )
	SV* c_func
	double d0
	short s1
	float f2
	double d3
PREINIT:
	double(*func)(double, short, float, double);
CODE:
	func   = INT2PTR(double(*)(double, short, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2, d3);
OUTPUT:
	RETVAL

short
nci_sdsfd( c_func, d0, s1, f2, d3 )
	SV* c_func
	double d0
	short s1
	float f2
	double d3
PREINIT:
	short(*func)(double, short, float, double);
CODE:
	func   = INT2PTR(short(*)(double, short, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2, d3);
OUTPUT:
	RETVAL

float
nci_fdsfd( c_func, d0, s1, f2, d3 )
	SV* c_func
	double d0
	short s1
	float f2
	double d3
PREINIT:
	float(*func)(double, short, float, double);
CODE:
	func   = INT2PTR(float(*)(double, short, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2, d3);
OUTPUT:
	RETVAL

char *
nci_tdsfd( c_func, d0, s1, f2, d3 )
	SV* c_func
	double d0
	short s1
	float f2
	double d3
PREINIT:
	char *(*func)(double, short, float, double);
CODE:
	func   = INT2PTR(char *(*)(double, short, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2, d3);
OUTPUT:
	RETVAL

int
nci_idsfd( c_func, d0, s1, f2, d3 )
	SV* c_func
	double d0
	short s1
	float f2
	double d3
PREINIT:
	int(*func)(double, short, float, double);
CODE:
	func   = INT2PTR(int(*)(double, short, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2, d3);
OUTPUT:
	RETVAL

void *
nci_pssfd( c_func, s0, s1, f2, d3 )
	SV* c_func
	short s0
	short s1
	float f2
	double d3
PREINIT:
	void *(*func)(short, short, float, double);
CODE:
	func   = INT2PTR(void *(*)(short, short, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2, d3);
OUTPUT:
	RETVAL

void
nci_vssfd( c_func, s0, s1, f2, d3 )
	SV* c_func
	short s0
	short s1
	float f2
	double d3
PREINIT:
	void(*func)(short, short, float, double);
CODE:
	func   = INT2PTR(void(*)(short, short, float, double), SvIV(c_func) );
	(*func)(s0, s1, f2, d3);

double
nci_dssfd( c_func, s0, s1, f2, d3 )
	SV* c_func
	short s0
	short s1
	float f2
	double d3
PREINIT:
	double(*func)(short, short, float, double);
CODE:
	func   = INT2PTR(double(*)(short, short, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2, d3);
OUTPUT:
	RETVAL

short
nci_sssfd( c_func, s0, s1, f2, d3 )
	SV* c_func
	short s0
	short s1
	float f2
	double d3
PREINIT:
	short(*func)(short, short, float, double);
CODE:
	func   = INT2PTR(short(*)(short, short, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2, d3);
OUTPUT:
	RETVAL

float
nci_fssfd( c_func, s0, s1, f2, d3 )
	SV* c_func
	short s0
	short s1
	float f2
	double d3
PREINIT:
	float(*func)(short, short, float, double);
CODE:
	func   = INT2PTR(float(*)(short, short, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2, d3);
OUTPUT:
	RETVAL

char *
nci_tssfd( c_func, s0, s1, f2, d3 )
	SV* c_func
	short s0
	short s1
	float f2
	double d3
PREINIT:
	char *(*func)(short, short, float, double);
CODE:
	func   = INT2PTR(char *(*)(short, short, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2, d3);
OUTPUT:
	RETVAL

int
nci_issfd( c_func, s0, s1, f2, d3 )
	SV* c_func
	short s0
	short s1
	float f2
	double d3
PREINIT:
	int(*func)(short, short, float, double);
CODE:
	func   = INT2PTR(int(*)(short, short, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2, d3);
OUTPUT:
	RETVAL

void *
nci_pfsfd( c_func, f0, s1, f2, d3 )
	SV* c_func
	float f0
	short s1
	float f2
	double d3
PREINIT:
	void *(*func)(float, short, float, double);
CODE:
	func   = INT2PTR(void *(*)(float, short, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2, d3);
OUTPUT:
	RETVAL

void
nci_vfsfd( c_func, f0, s1, f2, d3 )
	SV* c_func
	float f0
	short s1
	float f2
	double d3
PREINIT:
	void(*func)(float, short, float, double);
CODE:
	func   = INT2PTR(void(*)(float, short, float, double), SvIV(c_func) );
	(*func)(f0, s1, f2, d3);

double
nci_dfsfd( c_func, f0, s1, f2, d3 )
	SV* c_func
	float f0
	short s1
	float f2
	double d3
PREINIT:
	double(*func)(float, short, float, double);
CODE:
	func   = INT2PTR(double(*)(float, short, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2, d3);
OUTPUT:
	RETVAL

short
nci_sfsfd( c_func, f0, s1, f2, d3 )
	SV* c_func
	float f0
	short s1
	float f2
	double d3
PREINIT:
	short(*func)(float, short, float, double);
CODE:
	func   = INT2PTR(short(*)(float, short, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2, d3);
OUTPUT:
	RETVAL

float
nci_ffsfd( c_func, f0, s1, f2, d3 )
	SV* c_func
	float f0
	short s1
	float f2
	double d3
PREINIT:
	float(*func)(float, short, float, double);
CODE:
	func   = INT2PTR(float(*)(float, short, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2, d3);
OUTPUT:
	RETVAL

char *
nci_tfsfd( c_func, f0, s1, f2, d3 )
	SV* c_func
	float f0
	short s1
	float f2
	double d3
PREINIT:
	char *(*func)(float, short, float, double);
CODE:
	func   = INT2PTR(char *(*)(float, short, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2, d3);
OUTPUT:
	RETVAL

int
nci_ifsfd( c_func, f0, s1, f2, d3 )
	SV* c_func
	float f0
	short s1
	float f2
	double d3
PREINIT:
	int(*func)(float, short, float, double);
CODE:
	func   = INT2PTR(int(*)(float, short, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2, d3);
OUTPUT:
	RETVAL

void *
nci_ptsfd( c_func, t0, s1, f2, d3 )
	SV* c_func
	char * t0
	short s1
	float f2
	double d3
PREINIT:
	void *(*func)(char *, short, float, double);
CODE:
	func   = INT2PTR(void *(*)(char *, short, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2, d3);
OUTPUT:
	RETVAL

void
nci_vtsfd( c_func, t0, s1, f2, d3 )
	SV* c_func
	char * t0
	short s1
	float f2
	double d3
PREINIT:
	void(*func)(char *, short, float, double);
CODE:
	func   = INT2PTR(void(*)(char *, short, float, double), SvIV(c_func) );
	(*func)(t0, s1, f2, d3);

double
nci_dtsfd( c_func, t0, s1, f2, d3 )
	SV* c_func
	char * t0
	short s1
	float f2
	double d3
PREINIT:
	double(*func)(char *, short, float, double);
CODE:
	func   = INT2PTR(double(*)(char *, short, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2, d3);
OUTPUT:
	RETVAL

short
nci_stsfd( c_func, t0, s1, f2, d3 )
	SV* c_func
	char * t0
	short s1
	float f2
	double d3
PREINIT:
	short(*func)(char *, short, float, double);
CODE:
	func   = INT2PTR(short(*)(char *, short, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2, d3);
OUTPUT:
	RETVAL

float
nci_ftsfd( c_func, t0, s1, f2, d3 )
	SV* c_func
	char * t0
	short s1
	float f2
	double d3
PREINIT:
	float(*func)(char *, short, float, double);
CODE:
	func   = INT2PTR(float(*)(char *, short, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2, d3);
OUTPUT:
	RETVAL

char *
nci_ttsfd( c_func, t0, s1, f2, d3 )
	SV* c_func
	char * t0
	short s1
	float f2
	double d3
PREINIT:
	char *(*func)(char *, short, float, double);
CODE:
	func   = INT2PTR(char *(*)(char *, short, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2, d3);
OUTPUT:
	RETVAL

int
nci_itsfd( c_func, t0, s1, f2, d3 )
	SV* c_func
	char * t0
	short s1
	float f2
	double d3
PREINIT:
	int(*func)(char *, short, float, double);
CODE:
	func   = INT2PTR(int(*)(char *, short, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2, d3);
OUTPUT:
	RETVAL

void *
nci_pisfd( c_func, i0, s1, f2, d3 )
	SV* c_func
	int i0
	short s1
	float f2
	double d3
PREINIT:
	void *(*func)(int, short, float, double);
CODE:
	func   = INT2PTR(void *(*)(int, short, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2, d3);
OUTPUT:
	RETVAL

void
nci_visfd( c_func, i0, s1, f2, d3 )
	SV* c_func
	int i0
	short s1
	float f2
	double d3
PREINIT:
	void(*func)(int, short, float, double);
CODE:
	func   = INT2PTR(void(*)(int, short, float, double), SvIV(c_func) );
	(*func)(i0, s1, f2, d3);

double
nci_disfd( c_func, i0, s1, f2, d3 )
	SV* c_func
	int i0
	short s1
	float f2
	double d3
PREINIT:
	double(*func)(int, short, float, double);
CODE:
	func   = INT2PTR(double(*)(int, short, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2, d3);
OUTPUT:
	RETVAL

short
nci_sisfd( c_func, i0, s1, f2, d3 )
	SV* c_func
	int i0
	short s1
	float f2
	double d3
PREINIT:
	short(*func)(int, short, float, double);
CODE:
	func   = INT2PTR(short(*)(int, short, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2, d3);
OUTPUT:
	RETVAL

float
nci_fisfd( c_func, i0, s1, f2, d3 )
	SV* c_func
	int i0
	short s1
	float f2
	double d3
PREINIT:
	float(*func)(int, short, float, double);
CODE:
	func   = INT2PTR(float(*)(int, short, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2, d3);
OUTPUT:
	RETVAL

char *
nci_tisfd( c_func, i0, s1, f2, d3 )
	SV* c_func
	int i0
	short s1
	float f2
	double d3
PREINIT:
	char *(*func)(int, short, float, double);
CODE:
	func   = INT2PTR(char *(*)(int, short, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2, d3);
OUTPUT:
	RETVAL

int
nci_iisfd( c_func, i0, s1, f2, d3 )
	SV* c_func
	int i0
	short s1
	float f2
	double d3
PREINIT:
	int(*func)(int, short, float, double);
CODE:
	func   = INT2PTR(int(*)(int, short, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2, d3);
OUTPUT:
	RETVAL

void *
nci_ppffd( c_func, p0, f1, f2, d3 )
	SV* c_func
	void * p0
	float f1
	float f2
	double d3
PREINIT:
	void *(*func)(void *, float, float, double);
CODE:
	func   = INT2PTR(void *(*)(void *, float, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2, d3);
OUTPUT:
	RETVAL

void
nci_vpffd( c_func, p0, f1, f2, d3 )
	SV* c_func
	void * p0
	float f1
	float f2
	double d3
PREINIT:
	void(*func)(void *, float, float, double);
CODE:
	func   = INT2PTR(void(*)(void *, float, float, double), SvIV(c_func) );
	(*func)(p0, f1, f2, d3);

double
nci_dpffd( c_func, p0, f1, f2, d3 )
	SV* c_func
	void * p0
	float f1
	float f2
	double d3
PREINIT:
	double(*func)(void *, float, float, double);
CODE:
	func   = INT2PTR(double(*)(void *, float, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2, d3);
OUTPUT:
	RETVAL

short
nci_spffd( c_func, p0, f1, f2, d3 )
	SV* c_func
	void * p0
	float f1
	float f2
	double d3
PREINIT:
	short(*func)(void *, float, float, double);
CODE:
	func   = INT2PTR(short(*)(void *, float, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2, d3);
OUTPUT:
	RETVAL

float
nci_fpffd( c_func, p0, f1, f2, d3 )
	SV* c_func
	void * p0
	float f1
	float f2
	double d3
PREINIT:
	float(*func)(void *, float, float, double);
CODE:
	func   = INT2PTR(float(*)(void *, float, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2, d3);
OUTPUT:
	RETVAL

char *
nci_tpffd( c_func, p0, f1, f2, d3 )
	SV* c_func
	void * p0
	float f1
	float f2
	double d3
PREINIT:
	char *(*func)(void *, float, float, double);
CODE:
	func   = INT2PTR(char *(*)(void *, float, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2, d3);
OUTPUT:
	RETVAL

int
nci_ipffd( c_func, p0, f1, f2, d3 )
	SV* c_func
	void * p0
	float f1
	float f2
	double d3
PREINIT:
	int(*func)(void *, float, float, double);
CODE:
	func   = INT2PTR(int(*)(void *, float, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2, d3);
OUTPUT:
	RETVAL

void *
nci_pvffd( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvffd( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvffd( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svffd( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvffd( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvffd( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivffd( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdffd( c_func, d0, f1, f2, d3 )
	SV* c_func
	double d0
	float f1
	float f2
	double d3
PREINIT:
	void *(*func)(double, float, float, double);
CODE:
	func   = INT2PTR(void *(*)(double, float, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2, d3);
OUTPUT:
	RETVAL

void
nci_vdffd( c_func, d0, f1, f2, d3 )
	SV* c_func
	double d0
	float f1
	float f2
	double d3
PREINIT:
	void(*func)(double, float, float, double);
CODE:
	func   = INT2PTR(void(*)(double, float, float, double), SvIV(c_func) );
	(*func)(d0, f1, f2, d3);

double
nci_ddffd( c_func, d0, f1, f2, d3 )
	SV* c_func
	double d0
	float f1
	float f2
	double d3
PREINIT:
	double(*func)(double, float, float, double);
CODE:
	func   = INT2PTR(double(*)(double, float, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2, d3);
OUTPUT:
	RETVAL

short
nci_sdffd( c_func, d0, f1, f2, d3 )
	SV* c_func
	double d0
	float f1
	float f2
	double d3
PREINIT:
	short(*func)(double, float, float, double);
CODE:
	func   = INT2PTR(short(*)(double, float, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2, d3);
OUTPUT:
	RETVAL

float
nci_fdffd( c_func, d0, f1, f2, d3 )
	SV* c_func
	double d0
	float f1
	float f2
	double d3
PREINIT:
	float(*func)(double, float, float, double);
CODE:
	func   = INT2PTR(float(*)(double, float, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2, d3);
OUTPUT:
	RETVAL

char *
nci_tdffd( c_func, d0, f1, f2, d3 )
	SV* c_func
	double d0
	float f1
	float f2
	double d3
PREINIT:
	char *(*func)(double, float, float, double);
CODE:
	func   = INT2PTR(char *(*)(double, float, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2, d3);
OUTPUT:
	RETVAL

int
nci_idffd( c_func, d0, f1, f2, d3 )
	SV* c_func
	double d0
	float f1
	float f2
	double d3
PREINIT:
	int(*func)(double, float, float, double);
CODE:
	func   = INT2PTR(int(*)(double, float, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2, d3);
OUTPUT:
	RETVAL

void *
nci_psffd( c_func, s0, f1, f2, d3 )
	SV* c_func
	short s0
	float f1
	float f2
	double d3
PREINIT:
	void *(*func)(short, float, float, double);
CODE:
	func   = INT2PTR(void *(*)(short, float, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2, d3);
OUTPUT:
	RETVAL

void
nci_vsffd( c_func, s0, f1, f2, d3 )
	SV* c_func
	short s0
	float f1
	float f2
	double d3
PREINIT:
	void(*func)(short, float, float, double);
CODE:
	func   = INT2PTR(void(*)(short, float, float, double), SvIV(c_func) );
	(*func)(s0, f1, f2, d3);

double
nci_dsffd( c_func, s0, f1, f2, d3 )
	SV* c_func
	short s0
	float f1
	float f2
	double d3
PREINIT:
	double(*func)(short, float, float, double);
CODE:
	func   = INT2PTR(double(*)(short, float, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2, d3);
OUTPUT:
	RETVAL

short
nci_ssffd( c_func, s0, f1, f2, d3 )
	SV* c_func
	short s0
	float f1
	float f2
	double d3
PREINIT:
	short(*func)(short, float, float, double);
CODE:
	func   = INT2PTR(short(*)(short, float, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2, d3);
OUTPUT:
	RETVAL

float
nci_fsffd( c_func, s0, f1, f2, d3 )
	SV* c_func
	short s0
	float f1
	float f2
	double d3
PREINIT:
	float(*func)(short, float, float, double);
CODE:
	func   = INT2PTR(float(*)(short, float, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2, d3);
OUTPUT:
	RETVAL

char *
nci_tsffd( c_func, s0, f1, f2, d3 )
	SV* c_func
	short s0
	float f1
	float f2
	double d3
PREINIT:
	char *(*func)(short, float, float, double);
CODE:
	func   = INT2PTR(char *(*)(short, float, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2, d3);
OUTPUT:
	RETVAL

int
nci_isffd( c_func, s0, f1, f2, d3 )
	SV* c_func
	short s0
	float f1
	float f2
	double d3
PREINIT:
	int(*func)(short, float, float, double);
CODE:
	func   = INT2PTR(int(*)(short, float, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2, d3);
OUTPUT:
	RETVAL

void *
nci_pfffd( c_func, f0, f1, f2, d3 )
	SV* c_func
	float f0
	float f1
	float f2
	double d3
PREINIT:
	void *(*func)(float, float, float, double);
CODE:
	func   = INT2PTR(void *(*)(float, float, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2, d3);
OUTPUT:
	RETVAL

void
nci_vfffd( c_func, f0, f1, f2, d3 )
	SV* c_func
	float f0
	float f1
	float f2
	double d3
PREINIT:
	void(*func)(float, float, float, double);
CODE:
	func   = INT2PTR(void(*)(float, float, float, double), SvIV(c_func) );
	(*func)(f0, f1, f2, d3);

double
nci_dfffd( c_func, f0, f1, f2, d3 )
	SV* c_func
	float f0
	float f1
	float f2
	double d3
PREINIT:
	double(*func)(float, float, float, double);
CODE:
	func   = INT2PTR(double(*)(float, float, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2, d3);
OUTPUT:
	RETVAL

short
nci_sfffd( c_func, f0, f1, f2, d3 )
	SV* c_func
	float f0
	float f1
	float f2
	double d3
PREINIT:
	short(*func)(float, float, float, double);
CODE:
	func   = INT2PTR(short(*)(float, float, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2, d3);
OUTPUT:
	RETVAL

float
nci_ffffd( c_func, f0, f1, f2, d3 )
	SV* c_func
	float f0
	float f1
	float f2
	double d3
PREINIT:
	float(*func)(float, float, float, double);
CODE:
	func   = INT2PTR(float(*)(float, float, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2, d3);
OUTPUT:
	RETVAL

char *
nci_tfffd( c_func, f0, f1, f2, d3 )
	SV* c_func
	float f0
	float f1
	float f2
	double d3
PREINIT:
	char *(*func)(float, float, float, double);
CODE:
	func   = INT2PTR(char *(*)(float, float, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2, d3);
OUTPUT:
	RETVAL

int
nci_ifffd( c_func, f0, f1, f2, d3 )
	SV* c_func
	float f0
	float f1
	float f2
	double d3
PREINIT:
	int(*func)(float, float, float, double);
CODE:
	func   = INT2PTR(int(*)(float, float, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2, d3);
OUTPUT:
	RETVAL

void *
nci_ptffd( c_func, t0, f1, f2, d3 )
	SV* c_func
	char * t0
	float f1
	float f2
	double d3
PREINIT:
	void *(*func)(char *, float, float, double);
CODE:
	func   = INT2PTR(void *(*)(char *, float, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2, d3);
OUTPUT:
	RETVAL

void
nci_vtffd( c_func, t0, f1, f2, d3 )
	SV* c_func
	char * t0
	float f1
	float f2
	double d3
PREINIT:
	void(*func)(char *, float, float, double);
CODE:
	func   = INT2PTR(void(*)(char *, float, float, double), SvIV(c_func) );
	(*func)(t0, f1, f2, d3);

double
nci_dtffd( c_func, t0, f1, f2, d3 )
	SV* c_func
	char * t0
	float f1
	float f2
	double d3
PREINIT:
	double(*func)(char *, float, float, double);
CODE:
	func   = INT2PTR(double(*)(char *, float, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2, d3);
OUTPUT:
	RETVAL

short
nci_stffd( c_func, t0, f1, f2, d3 )
	SV* c_func
	char * t0
	float f1
	float f2
	double d3
PREINIT:
	short(*func)(char *, float, float, double);
CODE:
	func   = INT2PTR(short(*)(char *, float, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2, d3);
OUTPUT:
	RETVAL

float
nci_ftffd( c_func, t0, f1, f2, d3 )
	SV* c_func
	char * t0
	float f1
	float f2
	double d3
PREINIT:
	float(*func)(char *, float, float, double);
CODE:
	func   = INT2PTR(float(*)(char *, float, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2, d3);
OUTPUT:
	RETVAL

char *
nci_ttffd( c_func, t0, f1, f2, d3 )
	SV* c_func
	char * t0
	float f1
	float f2
	double d3
PREINIT:
	char *(*func)(char *, float, float, double);
CODE:
	func   = INT2PTR(char *(*)(char *, float, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2, d3);
OUTPUT:
	RETVAL

int
nci_itffd( c_func, t0, f1, f2, d3 )
	SV* c_func
	char * t0
	float f1
	float f2
	double d3
PREINIT:
	int(*func)(char *, float, float, double);
CODE:
	func   = INT2PTR(int(*)(char *, float, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2, d3);
OUTPUT:
	RETVAL

void *
nci_piffd( c_func, i0, f1, f2, d3 )
	SV* c_func
	int i0
	float f1
	float f2
	double d3
PREINIT:
	void *(*func)(int, float, float, double);
CODE:
	func   = INT2PTR(void *(*)(int, float, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2, d3);
OUTPUT:
	RETVAL

void
nci_viffd( c_func, i0, f1, f2, d3 )
	SV* c_func
	int i0
	float f1
	float f2
	double d3
PREINIT:
	void(*func)(int, float, float, double);
CODE:
	func   = INT2PTR(void(*)(int, float, float, double), SvIV(c_func) );
	(*func)(i0, f1, f2, d3);

double
nci_diffd( c_func, i0, f1, f2, d3 )
	SV* c_func
	int i0
	float f1
	float f2
	double d3
PREINIT:
	double(*func)(int, float, float, double);
CODE:
	func   = INT2PTR(double(*)(int, float, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2, d3);
OUTPUT:
	RETVAL

short
nci_siffd( c_func, i0, f1, f2, d3 )
	SV* c_func
	int i0
	float f1
	float f2
	double d3
PREINIT:
	short(*func)(int, float, float, double);
CODE:
	func   = INT2PTR(short(*)(int, float, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2, d3);
OUTPUT:
	RETVAL

float
nci_fiffd( c_func, i0, f1, f2, d3 )
	SV* c_func
	int i0
	float f1
	float f2
	double d3
PREINIT:
	float(*func)(int, float, float, double);
CODE:
	func   = INT2PTR(float(*)(int, float, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2, d3);
OUTPUT:
	RETVAL

char *
nci_tiffd( c_func, i0, f1, f2, d3 )
	SV* c_func
	int i0
	float f1
	float f2
	double d3
PREINIT:
	char *(*func)(int, float, float, double);
CODE:
	func   = INT2PTR(char *(*)(int, float, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2, d3);
OUTPUT:
	RETVAL

int
nci_iiffd( c_func, i0, f1, f2, d3 )
	SV* c_func
	int i0
	float f1
	float f2
	double d3
PREINIT:
	int(*func)(int, float, float, double);
CODE:
	func   = INT2PTR(int(*)(int, float, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2, d3);
OUTPUT:
	RETVAL

void *
nci_pptfd( c_func, p0, t1, f2, d3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	double d3
PREINIT:
	void *(*func)(void *, char *, float, double);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2, d3);
OUTPUT:
	RETVAL

void
nci_vptfd( c_func, p0, t1, f2, d3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	double d3
PREINIT:
	void(*func)(void *, char *, float, double);
CODE:
	func   = INT2PTR(void(*)(void *, char *, float, double), SvIV(c_func) );
	(*func)(p0, t1, f2, d3);

double
nci_dptfd( c_func, p0, t1, f2, d3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	double d3
PREINIT:
	double(*func)(void *, char *, float, double);
CODE:
	func   = INT2PTR(double(*)(void *, char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2, d3);
OUTPUT:
	RETVAL

short
nci_sptfd( c_func, p0, t1, f2, d3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	double d3
PREINIT:
	short(*func)(void *, char *, float, double);
CODE:
	func   = INT2PTR(short(*)(void *, char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2, d3);
OUTPUT:
	RETVAL

float
nci_fptfd( c_func, p0, t1, f2, d3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	double d3
PREINIT:
	float(*func)(void *, char *, float, double);
CODE:
	func   = INT2PTR(float(*)(void *, char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2, d3);
OUTPUT:
	RETVAL

char *
nci_tptfd( c_func, p0, t1, f2, d3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	double d3
PREINIT:
	char *(*func)(void *, char *, float, double);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2, d3);
OUTPUT:
	RETVAL

int
nci_iptfd( c_func, p0, t1, f2, d3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	double d3
PREINIT:
	int(*func)(void *, char *, float, double);
CODE:
	func   = INT2PTR(int(*)(void *, char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2, d3);
OUTPUT:
	RETVAL

void *
nci_pvtfd( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvtfd( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvtfd( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svtfd( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvtfd( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvtfd( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivtfd( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdtfd( c_func, d0, t1, f2, d3 )
	SV* c_func
	double d0
	char * t1
	float f2
	double d3
PREINIT:
	void *(*func)(double, char *, float, double);
CODE:
	func   = INT2PTR(void *(*)(double, char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2, d3);
OUTPUT:
	RETVAL

void
nci_vdtfd( c_func, d0, t1, f2, d3 )
	SV* c_func
	double d0
	char * t1
	float f2
	double d3
PREINIT:
	void(*func)(double, char *, float, double);
CODE:
	func   = INT2PTR(void(*)(double, char *, float, double), SvIV(c_func) );
	(*func)(d0, t1, f2, d3);

double
nci_ddtfd( c_func, d0, t1, f2, d3 )
	SV* c_func
	double d0
	char * t1
	float f2
	double d3
PREINIT:
	double(*func)(double, char *, float, double);
CODE:
	func   = INT2PTR(double(*)(double, char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2, d3);
OUTPUT:
	RETVAL

short
nci_sdtfd( c_func, d0, t1, f2, d3 )
	SV* c_func
	double d0
	char * t1
	float f2
	double d3
PREINIT:
	short(*func)(double, char *, float, double);
CODE:
	func   = INT2PTR(short(*)(double, char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2, d3);
OUTPUT:
	RETVAL

float
nci_fdtfd( c_func, d0, t1, f2, d3 )
	SV* c_func
	double d0
	char * t1
	float f2
	double d3
PREINIT:
	float(*func)(double, char *, float, double);
CODE:
	func   = INT2PTR(float(*)(double, char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2, d3);
OUTPUT:
	RETVAL

char *
nci_tdtfd( c_func, d0, t1, f2, d3 )
	SV* c_func
	double d0
	char * t1
	float f2
	double d3
PREINIT:
	char *(*func)(double, char *, float, double);
CODE:
	func   = INT2PTR(char *(*)(double, char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2, d3);
OUTPUT:
	RETVAL

int
nci_idtfd( c_func, d0, t1, f2, d3 )
	SV* c_func
	double d0
	char * t1
	float f2
	double d3
PREINIT:
	int(*func)(double, char *, float, double);
CODE:
	func   = INT2PTR(int(*)(double, char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2, d3);
OUTPUT:
	RETVAL

void *
nci_pstfd( c_func, s0, t1, f2, d3 )
	SV* c_func
	short s0
	char * t1
	float f2
	double d3
PREINIT:
	void *(*func)(short, char *, float, double);
CODE:
	func   = INT2PTR(void *(*)(short, char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2, d3);
OUTPUT:
	RETVAL

void
nci_vstfd( c_func, s0, t1, f2, d3 )
	SV* c_func
	short s0
	char * t1
	float f2
	double d3
PREINIT:
	void(*func)(short, char *, float, double);
CODE:
	func   = INT2PTR(void(*)(short, char *, float, double), SvIV(c_func) );
	(*func)(s0, t1, f2, d3);

double
nci_dstfd( c_func, s0, t1, f2, d3 )
	SV* c_func
	short s0
	char * t1
	float f2
	double d3
PREINIT:
	double(*func)(short, char *, float, double);
CODE:
	func   = INT2PTR(double(*)(short, char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2, d3);
OUTPUT:
	RETVAL

short
nci_sstfd( c_func, s0, t1, f2, d3 )
	SV* c_func
	short s0
	char * t1
	float f2
	double d3
PREINIT:
	short(*func)(short, char *, float, double);
CODE:
	func   = INT2PTR(short(*)(short, char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2, d3);
OUTPUT:
	RETVAL

float
nci_fstfd( c_func, s0, t1, f2, d3 )
	SV* c_func
	short s0
	char * t1
	float f2
	double d3
PREINIT:
	float(*func)(short, char *, float, double);
CODE:
	func   = INT2PTR(float(*)(short, char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2, d3);
OUTPUT:
	RETVAL

char *
nci_tstfd( c_func, s0, t1, f2, d3 )
	SV* c_func
	short s0
	char * t1
	float f2
	double d3
PREINIT:
	char *(*func)(short, char *, float, double);
CODE:
	func   = INT2PTR(char *(*)(short, char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2, d3);
OUTPUT:
	RETVAL

int
nci_istfd( c_func, s0, t1, f2, d3 )
	SV* c_func
	short s0
	char * t1
	float f2
	double d3
PREINIT:
	int(*func)(short, char *, float, double);
CODE:
	func   = INT2PTR(int(*)(short, char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2, d3);
OUTPUT:
	RETVAL

void *
nci_pftfd( c_func, f0, t1, f2, d3 )
	SV* c_func
	float f0
	char * t1
	float f2
	double d3
PREINIT:
	void *(*func)(float, char *, float, double);
CODE:
	func   = INT2PTR(void *(*)(float, char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2, d3);
OUTPUT:
	RETVAL

void
nci_vftfd( c_func, f0, t1, f2, d3 )
	SV* c_func
	float f0
	char * t1
	float f2
	double d3
PREINIT:
	void(*func)(float, char *, float, double);
CODE:
	func   = INT2PTR(void(*)(float, char *, float, double), SvIV(c_func) );
	(*func)(f0, t1, f2, d3);

double
nci_dftfd( c_func, f0, t1, f2, d3 )
	SV* c_func
	float f0
	char * t1
	float f2
	double d3
PREINIT:
	double(*func)(float, char *, float, double);
CODE:
	func   = INT2PTR(double(*)(float, char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2, d3);
OUTPUT:
	RETVAL

short
nci_sftfd( c_func, f0, t1, f2, d3 )
	SV* c_func
	float f0
	char * t1
	float f2
	double d3
PREINIT:
	short(*func)(float, char *, float, double);
CODE:
	func   = INT2PTR(short(*)(float, char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2, d3);
OUTPUT:
	RETVAL

float
nci_fftfd( c_func, f0, t1, f2, d3 )
	SV* c_func
	float f0
	char * t1
	float f2
	double d3
PREINIT:
	float(*func)(float, char *, float, double);
CODE:
	func   = INT2PTR(float(*)(float, char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2, d3);
OUTPUT:
	RETVAL

char *
nci_tftfd( c_func, f0, t1, f2, d3 )
	SV* c_func
	float f0
	char * t1
	float f2
	double d3
PREINIT:
	char *(*func)(float, char *, float, double);
CODE:
	func   = INT2PTR(char *(*)(float, char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2, d3);
OUTPUT:
	RETVAL

int
nci_iftfd( c_func, f0, t1, f2, d3 )
	SV* c_func
	float f0
	char * t1
	float f2
	double d3
PREINIT:
	int(*func)(float, char *, float, double);
CODE:
	func   = INT2PTR(int(*)(float, char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2, d3);
OUTPUT:
	RETVAL

void *
nci_pttfd( c_func, t0, t1, f2, d3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	double d3
PREINIT:
	void *(*func)(char *, char *, float, double);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2, d3);
OUTPUT:
	RETVAL

void
nci_vttfd( c_func, t0, t1, f2, d3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	double d3
PREINIT:
	void(*func)(char *, char *, float, double);
CODE:
	func   = INT2PTR(void(*)(char *, char *, float, double), SvIV(c_func) );
	(*func)(t0, t1, f2, d3);

double
nci_dttfd( c_func, t0, t1, f2, d3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	double d3
PREINIT:
	double(*func)(char *, char *, float, double);
CODE:
	func   = INT2PTR(double(*)(char *, char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2, d3);
OUTPUT:
	RETVAL

short
nci_sttfd( c_func, t0, t1, f2, d3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	double d3
PREINIT:
	short(*func)(char *, char *, float, double);
CODE:
	func   = INT2PTR(short(*)(char *, char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2, d3);
OUTPUT:
	RETVAL

float
nci_fttfd( c_func, t0, t1, f2, d3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	double d3
PREINIT:
	float(*func)(char *, char *, float, double);
CODE:
	func   = INT2PTR(float(*)(char *, char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2, d3);
OUTPUT:
	RETVAL

char *
nci_tttfd( c_func, t0, t1, f2, d3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	double d3
PREINIT:
	char *(*func)(char *, char *, float, double);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2, d3);
OUTPUT:
	RETVAL

int
nci_ittfd( c_func, t0, t1, f2, d3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	double d3
PREINIT:
	int(*func)(char *, char *, float, double);
CODE:
	func   = INT2PTR(int(*)(char *, char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2, d3);
OUTPUT:
	RETVAL

void *
nci_pitfd( c_func, i0, t1, f2, d3 )
	SV* c_func
	int i0
	char * t1
	float f2
	double d3
PREINIT:
	void *(*func)(int, char *, float, double);
CODE:
	func   = INT2PTR(void *(*)(int, char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2, d3);
OUTPUT:
	RETVAL

void
nci_vitfd( c_func, i0, t1, f2, d3 )
	SV* c_func
	int i0
	char * t1
	float f2
	double d3
PREINIT:
	void(*func)(int, char *, float, double);
CODE:
	func   = INT2PTR(void(*)(int, char *, float, double), SvIV(c_func) );
	(*func)(i0, t1, f2, d3);

double
nci_ditfd( c_func, i0, t1, f2, d3 )
	SV* c_func
	int i0
	char * t1
	float f2
	double d3
PREINIT:
	double(*func)(int, char *, float, double);
CODE:
	func   = INT2PTR(double(*)(int, char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2, d3);
OUTPUT:
	RETVAL

short
nci_sitfd( c_func, i0, t1, f2, d3 )
	SV* c_func
	int i0
	char * t1
	float f2
	double d3
PREINIT:
	short(*func)(int, char *, float, double);
CODE:
	func   = INT2PTR(short(*)(int, char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2, d3);
OUTPUT:
	RETVAL

float
nci_fitfd( c_func, i0, t1, f2, d3 )
	SV* c_func
	int i0
	char * t1
	float f2
	double d3
PREINIT:
	float(*func)(int, char *, float, double);
CODE:
	func   = INT2PTR(float(*)(int, char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2, d3);
OUTPUT:
	RETVAL

char *
nci_titfd( c_func, i0, t1, f2, d3 )
	SV* c_func
	int i0
	char * t1
	float f2
	double d3
PREINIT:
	char *(*func)(int, char *, float, double);
CODE:
	func   = INT2PTR(char *(*)(int, char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2, d3);
OUTPUT:
	RETVAL

int
nci_iitfd( c_func, i0, t1, f2, d3 )
	SV* c_func
	int i0
	char * t1
	float f2
	double d3
PREINIT:
	int(*func)(int, char *, float, double);
CODE:
	func   = INT2PTR(int(*)(int, char *, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2, d3);
OUTPUT:
	RETVAL

void *
nci_ppifd( c_func, p0, i1, f2, d3 )
	SV* c_func
	void * p0
	int i1
	float f2
	double d3
PREINIT:
	void *(*func)(void *, int, float, double);
CODE:
	func   = INT2PTR(void *(*)(void *, int, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2, d3);
OUTPUT:
	RETVAL

void
nci_vpifd( c_func, p0, i1, f2, d3 )
	SV* c_func
	void * p0
	int i1
	float f2
	double d3
PREINIT:
	void(*func)(void *, int, float, double);
CODE:
	func   = INT2PTR(void(*)(void *, int, float, double), SvIV(c_func) );
	(*func)(p0, i1, f2, d3);

double
nci_dpifd( c_func, p0, i1, f2, d3 )
	SV* c_func
	void * p0
	int i1
	float f2
	double d3
PREINIT:
	double(*func)(void *, int, float, double);
CODE:
	func   = INT2PTR(double(*)(void *, int, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2, d3);
OUTPUT:
	RETVAL

short
nci_spifd( c_func, p0, i1, f2, d3 )
	SV* c_func
	void * p0
	int i1
	float f2
	double d3
PREINIT:
	short(*func)(void *, int, float, double);
CODE:
	func   = INT2PTR(short(*)(void *, int, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2, d3);
OUTPUT:
	RETVAL

float
nci_fpifd( c_func, p0, i1, f2, d3 )
	SV* c_func
	void * p0
	int i1
	float f2
	double d3
PREINIT:
	float(*func)(void *, int, float, double);
CODE:
	func   = INT2PTR(float(*)(void *, int, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2, d3);
OUTPUT:
	RETVAL

char *
nci_tpifd( c_func, p0, i1, f2, d3 )
	SV* c_func
	void * p0
	int i1
	float f2
	double d3
PREINIT:
	char *(*func)(void *, int, float, double);
CODE:
	func   = INT2PTR(char *(*)(void *, int, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2, d3);
OUTPUT:
	RETVAL

int
nci_ipifd( c_func, p0, i1, f2, d3 )
	SV* c_func
	void * p0
	int i1
	float f2
	double d3
PREINIT:
	int(*func)(void *, int, float, double);
CODE:
	func   = INT2PTR(int(*)(void *, int, float, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2, d3);
OUTPUT:
	RETVAL

void *
nci_pvifd( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvifd( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvifd( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svifd( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvifd( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvifd( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivifd( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdifd( c_func, d0, i1, f2, d3 )
	SV* c_func
	double d0
	int i1
	float f2
	double d3
PREINIT:
	void *(*func)(double, int, float, double);
CODE:
	func   = INT2PTR(void *(*)(double, int, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2, d3);
OUTPUT:
	RETVAL

void
nci_vdifd( c_func, d0, i1, f2, d3 )
	SV* c_func
	double d0
	int i1
	float f2
	double d3
PREINIT:
	void(*func)(double, int, float, double);
CODE:
	func   = INT2PTR(void(*)(double, int, float, double), SvIV(c_func) );
	(*func)(d0, i1, f2, d3);

double
nci_ddifd( c_func, d0, i1, f2, d3 )
	SV* c_func
	double d0
	int i1
	float f2
	double d3
PREINIT:
	double(*func)(double, int, float, double);
CODE:
	func   = INT2PTR(double(*)(double, int, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2, d3);
OUTPUT:
	RETVAL

short
nci_sdifd( c_func, d0, i1, f2, d3 )
	SV* c_func
	double d0
	int i1
	float f2
	double d3
PREINIT:
	short(*func)(double, int, float, double);
CODE:
	func   = INT2PTR(short(*)(double, int, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2, d3);
OUTPUT:
	RETVAL

float
nci_fdifd( c_func, d0, i1, f2, d3 )
	SV* c_func
	double d0
	int i1
	float f2
	double d3
PREINIT:
	float(*func)(double, int, float, double);
CODE:
	func   = INT2PTR(float(*)(double, int, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2, d3);
OUTPUT:
	RETVAL

char *
nci_tdifd( c_func, d0, i1, f2, d3 )
	SV* c_func
	double d0
	int i1
	float f2
	double d3
PREINIT:
	char *(*func)(double, int, float, double);
CODE:
	func   = INT2PTR(char *(*)(double, int, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2, d3);
OUTPUT:
	RETVAL

int
nci_idifd( c_func, d0, i1, f2, d3 )
	SV* c_func
	double d0
	int i1
	float f2
	double d3
PREINIT:
	int(*func)(double, int, float, double);
CODE:
	func   = INT2PTR(int(*)(double, int, float, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2, d3);
OUTPUT:
	RETVAL

void *
nci_psifd( c_func, s0, i1, f2, d3 )
	SV* c_func
	short s0
	int i1
	float f2
	double d3
PREINIT:
	void *(*func)(short, int, float, double);
CODE:
	func   = INT2PTR(void *(*)(short, int, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2, d3);
OUTPUT:
	RETVAL

void
nci_vsifd( c_func, s0, i1, f2, d3 )
	SV* c_func
	short s0
	int i1
	float f2
	double d3
PREINIT:
	void(*func)(short, int, float, double);
CODE:
	func   = INT2PTR(void(*)(short, int, float, double), SvIV(c_func) );
	(*func)(s0, i1, f2, d3);

double
nci_dsifd( c_func, s0, i1, f2, d3 )
	SV* c_func
	short s0
	int i1
	float f2
	double d3
PREINIT:
	double(*func)(short, int, float, double);
CODE:
	func   = INT2PTR(double(*)(short, int, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2, d3);
OUTPUT:
	RETVAL

short
nci_ssifd( c_func, s0, i1, f2, d3 )
	SV* c_func
	short s0
	int i1
	float f2
	double d3
PREINIT:
	short(*func)(short, int, float, double);
CODE:
	func   = INT2PTR(short(*)(short, int, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2, d3);
OUTPUT:
	RETVAL

float
nci_fsifd( c_func, s0, i1, f2, d3 )
	SV* c_func
	short s0
	int i1
	float f2
	double d3
PREINIT:
	float(*func)(short, int, float, double);
CODE:
	func   = INT2PTR(float(*)(short, int, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2, d3);
OUTPUT:
	RETVAL

char *
nci_tsifd( c_func, s0, i1, f2, d3 )
	SV* c_func
	short s0
	int i1
	float f2
	double d3
PREINIT:
	char *(*func)(short, int, float, double);
CODE:
	func   = INT2PTR(char *(*)(short, int, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2, d3);
OUTPUT:
	RETVAL

int
nci_isifd( c_func, s0, i1, f2, d3 )
	SV* c_func
	short s0
	int i1
	float f2
	double d3
PREINIT:
	int(*func)(short, int, float, double);
CODE:
	func   = INT2PTR(int(*)(short, int, float, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2, d3);
OUTPUT:
	RETVAL

void *
nci_pfifd( c_func, f0, i1, f2, d3 )
	SV* c_func
	float f0
	int i1
	float f2
	double d3
PREINIT:
	void *(*func)(float, int, float, double);
CODE:
	func   = INT2PTR(void *(*)(float, int, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2, d3);
OUTPUT:
	RETVAL

void
nci_vfifd( c_func, f0, i1, f2, d3 )
	SV* c_func
	float f0
	int i1
	float f2
	double d3
PREINIT:
	void(*func)(float, int, float, double);
CODE:
	func   = INT2PTR(void(*)(float, int, float, double), SvIV(c_func) );
	(*func)(f0, i1, f2, d3);

double
nci_dfifd( c_func, f0, i1, f2, d3 )
	SV* c_func
	float f0
	int i1
	float f2
	double d3
PREINIT:
	double(*func)(float, int, float, double);
CODE:
	func   = INT2PTR(double(*)(float, int, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2, d3);
OUTPUT:
	RETVAL

short
nci_sfifd( c_func, f0, i1, f2, d3 )
	SV* c_func
	float f0
	int i1
	float f2
	double d3
PREINIT:
	short(*func)(float, int, float, double);
CODE:
	func   = INT2PTR(short(*)(float, int, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2, d3);
OUTPUT:
	RETVAL

float
nci_ffifd( c_func, f0, i1, f2, d3 )
	SV* c_func
	float f0
	int i1
	float f2
	double d3
PREINIT:
	float(*func)(float, int, float, double);
CODE:
	func   = INT2PTR(float(*)(float, int, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2, d3);
OUTPUT:
	RETVAL

char *
nci_tfifd( c_func, f0, i1, f2, d3 )
	SV* c_func
	float f0
	int i1
	float f2
	double d3
PREINIT:
	char *(*func)(float, int, float, double);
CODE:
	func   = INT2PTR(char *(*)(float, int, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2, d3);
OUTPUT:
	RETVAL

int
nci_ififd( c_func, f0, i1, f2, d3 )
	SV* c_func
	float f0
	int i1
	float f2
	double d3
PREINIT:
	int(*func)(float, int, float, double);
CODE:
	func   = INT2PTR(int(*)(float, int, float, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2, d3);
OUTPUT:
	RETVAL

void *
nci_ptifd( c_func, t0, i1, f2, d3 )
	SV* c_func
	char * t0
	int i1
	float f2
	double d3
PREINIT:
	void *(*func)(char *, int, float, double);
CODE:
	func   = INT2PTR(void *(*)(char *, int, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2, d3);
OUTPUT:
	RETVAL

void
nci_vtifd( c_func, t0, i1, f2, d3 )
	SV* c_func
	char * t0
	int i1
	float f2
	double d3
PREINIT:
	void(*func)(char *, int, float, double);
CODE:
	func   = INT2PTR(void(*)(char *, int, float, double), SvIV(c_func) );
	(*func)(t0, i1, f2, d3);

double
nci_dtifd( c_func, t0, i1, f2, d3 )
	SV* c_func
	char * t0
	int i1
	float f2
	double d3
PREINIT:
	double(*func)(char *, int, float, double);
CODE:
	func   = INT2PTR(double(*)(char *, int, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2, d3);
OUTPUT:
	RETVAL

short
nci_stifd( c_func, t0, i1, f2, d3 )
	SV* c_func
	char * t0
	int i1
	float f2
	double d3
PREINIT:
	short(*func)(char *, int, float, double);
CODE:
	func   = INT2PTR(short(*)(char *, int, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2, d3);
OUTPUT:
	RETVAL

float
nci_ftifd( c_func, t0, i1, f2, d3 )
	SV* c_func
	char * t0
	int i1
	float f2
	double d3
PREINIT:
	float(*func)(char *, int, float, double);
CODE:
	func   = INT2PTR(float(*)(char *, int, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2, d3);
OUTPUT:
	RETVAL

char *
nci_ttifd( c_func, t0, i1, f2, d3 )
	SV* c_func
	char * t0
	int i1
	float f2
	double d3
PREINIT:
	char *(*func)(char *, int, float, double);
CODE:
	func   = INT2PTR(char *(*)(char *, int, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2, d3);
OUTPUT:
	RETVAL

int
nci_itifd( c_func, t0, i1, f2, d3 )
	SV* c_func
	char * t0
	int i1
	float f2
	double d3
PREINIT:
	int(*func)(char *, int, float, double);
CODE:
	func   = INT2PTR(int(*)(char *, int, float, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2, d3);
OUTPUT:
	RETVAL

void *
nci_piifd( c_func, i0, i1, f2, d3 )
	SV* c_func
	int i0
	int i1
	float f2
	double d3
PREINIT:
	void *(*func)(int, int, float, double);
CODE:
	func   = INT2PTR(void *(*)(int, int, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2, d3);
OUTPUT:
	RETVAL

void
nci_viifd( c_func, i0, i1, f2, d3 )
	SV* c_func
	int i0
	int i1
	float f2
	double d3
PREINIT:
	void(*func)(int, int, float, double);
CODE:
	func   = INT2PTR(void(*)(int, int, float, double), SvIV(c_func) );
	(*func)(i0, i1, f2, d3);

double
nci_diifd( c_func, i0, i1, f2, d3 )
	SV* c_func
	int i0
	int i1
	float f2
	double d3
PREINIT:
	double(*func)(int, int, float, double);
CODE:
	func   = INT2PTR(double(*)(int, int, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2, d3);
OUTPUT:
	RETVAL

short
nci_siifd( c_func, i0, i1, f2, d3 )
	SV* c_func
	int i0
	int i1
	float f2
	double d3
PREINIT:
	short(*func)(int, int, float, double);
CODE:
	func   = INT2PTR(short(*)(int, int, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2, d3);
OUTPUT:
	RETVAL

float
nci_fiifd( c_func, i0, i1, f2, d3 )
	SV* c_func
	int i0
	int i1
	float f2
	double d3
PREINIT:
	float(*func)(int, int, float, double);
CODE:
	func   = INT2PTR(float(*)(int, int, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2, d3);
OUTPUT:
	RETVAL

char *
nci_tiifd( c_func, i0, i1, f2, d3 )
	SV* c_func
	int i0
	int i1
	float f2
	double d3
PREINIT:
	char *(*func)(int, int, float, double);
CODE:
	func   = INT2PTR(char *(*)(int, int, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2, d3);
OUTPUT:
	RETVAL

int
nci_iiifd( c_func, i0, i1, f2, d3 )
	SV* c_func
	int i0
	int i1
	float f2
	double d3
PREINIT:
	int(*func)(int, int, float, double);
CODE:
	func   = INT2PTR(int(*)(int, int, float, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2, d3);
OUTPUT:
	RETVAL

void *
nci_ppptd( c_func, p0, p1, t2, d3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	double d3
PREINIT:
	void *(*func)(void *, void *, char *, double);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2, d3);
OUTPUT:
	RETVAL

void
nci_vpptd( c_func, p0, p1, t2, d3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	double d3
PREINIT:
	void(*func)(void *, void *, char *, double);
CODE:
	func   = INT2PTR(void(*)(void *, void *, char *, double), SvIV(c_func) );
	(*func)(p0, p1, t2, d3);

double
nci_dpptd( c_func, p0, p1, t2, d3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	double d3
PREINIT:
	double(*func)(void *, void *, char *, double);
CODE:
	func   = INT2PTR(double(*)(void *, void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2, d3);
OUTPUT:
	RETVAL

short
nci_spptd( c_func, p0, p1, t2, d3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	double d3
PREINIT:
	short(*func)(void *, void *, char *, double);
CODE:
	func   = INT2PTR(short(*)(void *, void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2, d3);
OUTPUT:
	RETVAL

float
nci_fpptd( c_func, p0, p1, t2, d3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	double d3
PREINIT:
	float(*func)(void *, void *, char *, double);
CODE:
	func   = INT2PTR(float(*)(void *, void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2, d3);
OUTPUT:
	RETVAL

char *
nci_tpptd( c_func, p0, p1, t2, d3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	double d3
PREINIT:
	char *(*func)(void *, void *, char *, double);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2, d3);
OUTPUT:
	RETVAL

int
nci_ipptd( c_func, p0, p1, t2, d3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	double d3
PREINIT:
	int(*func)(void *, void *, char *, double);
CODE:
	func   = INT2PTR(int(*)(void *, void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2, d3);
OUTPUT:
	RETVAL

void *
nci_pvptd( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvptd( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvptd( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svptd( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvptd( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvptd( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivptd( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdptd( c_func, d0, p1, t2, d3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	double d3
PREINIT:
	void *(*func)(double, void *, char *, double);
CODE:
	func   = INT2PTR(void *(*)(double, void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2, d3);
OUTPUT:
	RETVAL

void
nci_vdptd( c_func, d0, p1, t2, d3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	double d3
PREINIT:
	void(*func)(double, void *, char *, double);
CODE:
	func   = INT2PTR(void(*)(double, void *, char *, double), SvIV(c_func) );
	(*func)(d0, p1, t2, d3);

double
nci_ddptd( c_func, d0, p1, t2, d3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	double d3
PREINIT:
	double(*func)(double, void *, char *, double);
CODE:
	func   = INT2PTR(double(*)(double, void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2, d3);
OUTPUT:
	RETVAL

short
nci_sdptd( c_func, d0, p1, t2, d3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	double d3
PREINIT:
	short(*func)(double, void *, char *, double);
CODE:
	func   = INT2PTR(short(*)(double, void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2, d3);
OUTPUT:
	RETVAL

float
nci_fdptd( c_func, d0, p1, t2, d3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	double d3
PREINIT:
	float(*func)(double, void *, char *, double);
CODE:
	func   = INT2PTR(float(*)(double, void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2, d3);
OUTPUT:
	RETVAL

char *
nci_tdptd( c_func, d0, p1, t2, d3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	double d3
PREINIT:
	char *(*func)(double, void *, char *, double);
CODE:
	func   = INT2PTR(char *(*)(double, void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2, d3);
OUTPUT:
	RETVAL

int
nci_idptd( c_func, d0, p1, t2, d3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	double d3
PREINIT:
	int(*func)(double, void *, char *, double);
CODE:
	func   = INT2PTR(int(*)(double, void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2, d3);
OUTPUT:
	RETVAL

void *
nci_psptd( c_func, s0, p1, t2, d3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	double d3
PREINIT:
	void *(*func)(short, void *, char *, double);
CODE:
	func   = INT2PTR(void *(*)(short, void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2, d3);
OUTPUT:
	RETVAL

void
nci_vsptd( c_func, s0, p1, t2, d3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	double d3
PREINIT:
	void(*func)(short, void *, char *, double);
CODE:
	func   = INT2PTR(void(*)(short, void *, char *, double), SvIV(c_func) );
	(*func)(s0, p1, t2, d3);

double
nci_dsptd( c_func, s0, p1, t2, d3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	double d3
PREINIT:
	double(*func)(short, void *, char *, double);
CODE:
	func   = INT2PTR(double(*)(short, void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2, d3);
OUTPUT:
	RETVAL

short
nci_ssptd( c_func, s0, p1, t2, d3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	double d3
PREINIT:
	short(*func)(short, void *, char *, double);
CODE:
	func   = INT2PTR(short(*)(short, void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2, d3);
OUTPUT:
	RETVAL

float
nci_fsptd( c_func, s0, p1, t2, d3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	double d3
PREINIT:
	float(*func)(short, void *, char *, double);
CODE:
	func   = INT2PTR(float(*)(short, void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2, d3);
OUTPUT:
	RETVAL

char *
nci_tsptd( c_func, s0, p1, t2, d3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	double d3
PREINIT:
	char *(*func)(short, void *, char *, double);
CODE:
	func   = INT2PTR(char *(*)(short, void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2, d3);
OUTPUT:
	RETVAL

int
nci_isptd( c_func, s0, p1, t2, d3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	double d3
PREINIT:
	int(*func)(short, void *, char *, double);
CODE:
	func   = INT2PTR(int(*)(short, void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2, d3);
OUTPUT:
	RETVAL

void *
nci_pfptd( c_func, f0, p1, t2, d3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	double d3
PREINIT:
	void *(*func)(float, void *, char *, double);
CODE:
	func   = INT2PTR(void *(*)(float, void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2, d3);
OUTPUT:
	RETVAL

void
nci_vfptd( c_func, f0, p1, t2, d3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	double d3
PREINIT:
	void(*func)(float, void *, char *, double);
CODE:
	func   = INT2PTR(void(*)(float, void *, char *, double), SvIV(c_func) );
	(*func)(f0, p1, t2, d3);

double
nci_dfptd( c_func, f0, p1, t2, d3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	double d3
PREINIT:
	double(*func)(float, void *, char *, double);
CODE:
	func   = INT2PTR(double(*)(float, void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2, d3);
OUTPUT:
	RETVAL

short
nci_sfptd( c_func, f0, p1, t2, d3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	double d3
PREINIT:
	short(*func)(float, void *, char *, double);
CODE:
	func   = INT2PTR(short(*)(float, void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2, d3);
OUTPUT:
	RETVAL

float
nci_ffptd( c_func, f0, p1, t2, d3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	double d3
PREINIT:
	float(*func)(float, void *, char *, double);
CODE:
	func   = INT2PTR(float(*)(float, void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2, d3);
OUTPUT:
	RETVAL

char *
nci_tfptd( c_func, f0, p1, t2, d3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	double d3
PREINIT:
	char *(*func)(float, void *, char *, double);
CODE:
	func   = INT2PTR(char *(*)(float, void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2, d3);
OUTPUT:
	RETVAL

int
nci_ifptd( c_func, f0, p1, t2, d3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	double d3
PREINIT:
	int(*func)(float, void *, char *, double);
CODE:
	func   = INT2PTR(int(*)(float, void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2, d3);
OUTPUT:
	RETVAL

void *
nci_ptptd( c_func, t0, p1, t2, d3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	double d3
PREINIT:
	void *(*func)(char *, void *, char *, double);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2, d3);
OUTPUT:
	RETVAL

void
nci_vtptd( c_func, t0, p1, t2, d3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	double d3
PREINIT:
	void(*func)(char *, void *, char *, double);
CODE:
	func   = INT2PTR(void(*)(char *, void *, char *, double), SvIV(c_func) );
	(*func)(t0, p1, t2, d3);

double
nci_dtptd( c_func, t0, p1, t2, d3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	double d3
PREINIT:
	double(*func)(char *, void *, char *, double);
CODE:
	func   = INT2PTR(double(*)(char *, void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2, d3);
OUTPUT:
	RETVAL

short
nci_stptd( c_func, t0, p1, t2, d3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	double d3
PREINIT:
	short(*func)(char *, void *, char *, double);
CODE:
	func   = INT2PTR(short(*)(char *, void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2, d3);
OUTPUT:
	RETVAL

float
nci_ftptd( c_func, t0, p1, t2, d3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	double d3
PREINIT:
	float(*func)(char *, void *, char *, double);
CODE:
	func   = INT2PTR(float(*)(char *, void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2, d3);
OUTPUT:
	RETVAL

char *
nci_ttptd( c_func, t0, p1, t2, d3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	double d3
PREINIT:
	char *(*func)(char *, void *, char *, double);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2, d3);
OUTPUT:
	RETVAL

int
nci_itptd( c_func, t0, p1, t2, d3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	double d3
PREINIT:
	int(*func)(char *, void *, char *, double);
CODE:
	func   = INT2PTR(int(*)(char *, void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2, d3);
OUTPUT:
	RETVAL

void *
nci_piptd( c_func, i0, p1, t2, d3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	double d3
PREINIT:
	void *(*func)(int, void *, char *, double);
CODE:
	func   = INT2PTR(void *(*)(int, void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2, d3);
OUTPUT:
	RETVAL

void
nci_viptd( c_func, i0, p1, t2, d3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	double d3
PREINIT:
	void(*func)(int, void *, char *, double);
CODE:
	func   = INT2PTR(void(*)(int, void *, char *, double), SvIV(c_func) );
	(*func)(i0, p1, t2, d3);

double
nci_diptd( c_func, i0, p1, t2, d3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	double d3
PREINIT:
	double(*func)(int, void *, char *, double);
CODE:
	func   = INT2PTR(double(*)(int, void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2, d3);
OUTPUT:
	RETVAL

short
nci_siptd( c_func, i0, p1, t2, d3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	double d3
PREINIT:
	short(*func)(int, void *, char *, double);
CODE:
	func   = INT2PTR(short(*)(int, void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2, d3);
OUTPUT:
	RETVAL

float
nci_fiptd( c_func, i0, p1, t2, d3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	double d3
PREINIT:
	float(*func)(int, void *, char *, double);
CODE:
	func   = INT2PTR(float(*)(int, void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2, d3);
OUTPUT:
	RETVAL

char *
nci_tiptd( c_func, i0, p1, t2, d3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	double d3
PREINIT:
	char *(*func)(int, void *, char *, double);
CODE:
	func   = INT2PTR(char *(*)(int, void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2, d3);
OUTPUT:
	RETVAL

int
nci_iiptd( c_func, i0, p1, t2, d3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	double d3
PREINIT:
	int(*func)(int, void *, char *, double);
CODE:
	func   = INT2PTR(int(*)(int, void *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2, d3);
OUTPUT:
	RETVAL

void *
nci_ppdtd( c_func, p0, d1, t2, d3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	double d3
PREINIT:
	void *(*func)(void *, double, char *, double);
CODE:
	func   = INT2PTR(void *(*)(void *, double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2, d3);
OUTPUT:
	RETVAL

void
nci_vpdtd( c_func, p0, d1, t2, d3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	double d3
PREINIT:
	void(*func)(void *, double, char *, double);
CODE:
	func   = INT2PTR(void(*)(void *, double, char *, double), SvIV(c_func) );
	(*func)(p0, d1, t2, d3);

double
nci_dpdtd( c_func, p0, d1, t2, d3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	double d3
PREINIT:
	double(*func)(void *, double, char *, double);
CODE:
	func   = INT2PTR(double(*)(void *, double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2, d3);
OUTPUT:
	RETVAL

short
nci_spdtd( c_func, p0, d1, t2, d3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	double d3
PREINIT:
	short(*func)(void *, double, char *, double);
CODE:
	func   = INT2PTR(short(*)(void *, double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2, d3);
OUTPUT:
	RETVAL

float
nci_fpdtd( c_func, p0, d1, t2, d3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	double d3
PREINIT:
	float(*func)(void *, double, char *, double);
CODE:
	func   = INT2PTR(float(*)(void *, double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2, d3);
OUTPUT:
	RETVAL

char *
nci_tpdtd( c_func, p0, d1, t2, d3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	double d3
PREINIT:
	char *(*func)(void *, double, char *, double);
CODE:
	func   = INT2PTR(char *(*)(void *, double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2, d3);
OUTPUT:
	RETVAL

int
nci_ipdtd( c_func, p0, d1, t2, d3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	double d3
PREINIT:
	int(*func)(void *, double, char *, double);
CODE:
	func   = INT2PTR(int(*)(void *, double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2, d3);
OUTPUT:
	RETVAL

void *
nci_pvdtd( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvdtd( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvdtd( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svdtd( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvdtd( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvdtd( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivdtd( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pddtd( c_func, d0, d1, t2, d3 )
	SV* c_func
	double d0
	double d1
	char * t2
	double d3
PREINIT:
	void *(*func)(double, double, char *, double);
CODE:
	func   = INT2PTR(void *(*)(double, double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2, d3);
OUTPUT:
	RETVAL

void
nci_vddtd( c_func, d0, d1, t2, d3 )
	SV* c_func
	double d0
	double d1
	char * t2
	double d3
PREINIT:
	void(*func)(double, double, char *, double);
CODE:
	func   = INT2PTR(void(*)(double, double, char *, double), SvIV(c_func) );
	(*func)(d0, d1, t2, d3);

double
nci_dddtd( c_func, d0, d1, t2, d3 )
	SV* c_func
	double d0
	double d1
	char * t2
	double d3
PREINIT:
	double(*func)(double, double, char *, double);
CODE:
	func   = INT2PTR(double(*)(double, double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2, d3);
OUTPUT:
	RETVAL

short
nci_sddtd( c_func, d0, d1, t2, d3 )
	SV* c_func
	double d0
	double d1
	char * t2
	double d3
PREINIT:
	short(*func)(double, double, char *, double);
CODE:
	func   = INT2PTR(short(*)(double, double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2, d3);
OUTPUT:
	RETVAL

float
nci_fddtd( c_func, d0, d1, t2, d3 )
	SV* c_func
	double d0
	double d1
	char * t2
	double d3
PREINIT:
	float(*func)(double, double, char *, double);
CODE:
	func   = INT2PTR(float(*)(double, double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2, d3);
OUTPUT:
	RETVAL

char *
nci_tddtd( c_func, d0, d1, t2, d3 )
	SV* c_func
	double d0
	double d1
	char * t2
	double d3
PREINIT:
	char *(*func)(double, double, char *, double);
CODE:
	func   = INT2PTR(char *(*)(double, double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2, d3);
OUTPUT:
	RETVAL

int
nci_iddtd( c_func, d0, d1, t2, d3 )
	SV* c_func
	double d0
	double d1
	char * t2
	double d3
PREINIT:
	int(*func)(double, double, char *, double);
CODE:
	func   = INT2PTR(int(*)(double, double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2, d3);
OUTPUT:
	RETVAL

void *
nci_psdtd( c_func, s0, d1, t2, d3 )
	SV* c_func
	short s0
	double d1
	char * t2
	double d3
PREINIT:
	void *(*func)(short, double, char *, double);
CODE:
	func   = INT2PTR(void *(*)(short, double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2, d3);
OUTPUT:
	RETVAL

void
nci_vsdtd( c_func, s0, d1, t2, d3 )
	SV* c_func
	short s0
	double d1
	char * t2
	double d3
PREINIT:
	void(*func)(short, double, char *, double);
CODE:
	func   = INT2PTR(void(*)(short, double, char *, double), SvIV(c_func) );
	(*func)(s0, d1, t2, d3);

double
nci_dsdtd( c_func, s0, d1, t2, d3 )
	SV* c_func
	short s0
	double d1
	char * t2
	double d3
PREINIT:
	double(*func)(short, double, char *, double);
CODE:
	func   = INT2PTR(double(*)(short, double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2, d3);
OUTPUT:
	RETVAL

short
nci_ssdtd( c_func, s0, d1, t2, d3 )
	SV* c_func
	short s0
	double d1
	char * t2
	double d3
PREINIT:
	short(*func)(short, double, char *, double);
CODE:
	func   = INT2PTR(short(*)(short, double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2, d3);
OUTPUT:
	RETVAL

float
nci_fsdtd( c_func, s0, d1, t2, d3 )
	SV* c_func
	short s0
	double d1
	char * t2
	double d3
PREINIT:
	float(*func)(short, double, char *, double);
CODE:
	func   = INT2PTR(float(*)(short, double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2, d3);
OUTPUT:
	RETVAL

char *
nci_tsdtd( c_func, s0, d1, t2, d3 )
	SV* c_func
	short s0
	double d1
	char * t2
	double d3
PREINIT:
	char *(*func)(short, double, char *, double);
CODE:
	func   = INT2PTR(char *(*)(short, double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2, d3);
OUTPUT:
	RETVAL

int
nci_isdtd( c_func, s0, d1, t2, d3 )
	SV* c_func
	short s0
	double d1
	char * t2
	double d3
PREINIT:
	int(*func)(short, double, char *, double);
CODE:
	func   = INT2PTR(int(*)(short, double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2, d3);
OUTPUT:
	RETVAL

void *
nci_pfdtd( c_func, f0, d1, t2, d3 )
	SV* c_func
	float f0
	double d1
	char * t2
	double d3
PREINIT:
	void *(*func)(float, double, char *, double);
CODE:
	func   = INT2PTR(void *(*)(float, double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2, d3);
OUTPUT:
	RETVAL

void
nci_vfdtd( c_func, f0, d1, t2, d3 )
	SV* c_func
	float f0
	double d1
	char * t2
	double d3
PREINIT:
	void(*func)(float, double, char *, double);
CODE:
	func   = INT2PTR(void(*)(float, double, char *, double), SvIV(c_func) );
	(*func)(f0, d1, t2, d3);

double
nci_dfdtd( c_func, f0, d1, t2, d3 )
	SV* c_func
	float f0
	double d1
	char * t2
	double d3
PREINIT:
	double(*func)(float, double, char *, double);
CODE:
	func   = INT2PTR(double(*)(float, double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2, d3);
OUTPUT:
	RETVAL

short
nci_sfdtd( c_func, f0, d1, t2, d3 )
	SV* c_func
	float f0
	double d1
	char * t2
	double d3
PREINIT:
	short(*func)(float, double, char *, double);
CODE:
	func   = INT2PTR(short(*)(float, double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2, d3);
OUTPUT:
	RETVAL

float
nci_ffdtd( c_func, f0, d1, t2, d3 )
	SV* c_func
	float f0
	double d1
	char * t2
	double d3
PREINIT:
	float(*func)(float, double, char *, double);
CODE:
	func   = INT2PTR(float(*)(float, double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2, d3);
OUTPUT:
	RETVAL

char *
nci_tfdtd( c_func, f0, d1, t2, d3 )
	SV* c_func
	float f0
	double d1
	char * t2
	double d3
PREINIT:
	char *(*func)(float, double, char *, double);
CODE:
	func   = INT2PTR(char *(*)(float, double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2, d3);
OUTPUT:
	RETVAL

int
nci_ifdtd( c_func, f0, d1, t2, d3 )
	SV* c_func
	float f0
	double d1
	char * t2
	double d3
PREINIT:
	int(*func)(float, double, char *, double);
CODE:
	func   = INT2PTR(int(*)(float, double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2, d3);
OUTPUT:
	RETVAL

void *
nci_ptdtd( c_func, t0, d1, t2, d3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	double d3
PREINIT:
	void *(*func)(char *, double, char *, double);
CODE:
	func   = INT2PTR(void *(*)(char *, double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2, d3);
OUTPUT:
	RETVAL

void
nci_vtdtd( c_func, t0, d1, t2, d3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	double d3
PREINIT:
	void(*func)(char *, double, char *, double);
CODE:
	func   = INT2PTR(void(*)(char *, double, char *, double), SvIV(c_func) );
	(*func)(t0, d1, t2, d3);

double
nci_dtdtd( c_func, t0, d1, t2, d3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	double d3
PREINIT:
	double(*func)(char *, double, char *, double);
CODE:
	func   = INT2PTR(double(*)(char *, double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2, d3);
OUTPUT:
	RETVAL

short
nci_stdtd( c_func, t0, d1, t2, d3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	double d3
PREINIT:
	short(*func)(char *, double, char *, double);
CODE:
	func   = INT2PTR(short(*)(char *, double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2, d3);
OUTPUT:
	RETVAL

float
nci_ftdtd( c_func, t0, d1, t2, d3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	double d3
PREINIT:
	float(*func)(char *, double, char *, double);
CODE:
	func   = INT2PTR(float(*)(char *, double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2, d3);
OUTPUT:
	RETVAL

char *
nci_ttdtd( c_func, t0, d1, t2, d3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	double d3
PREINIT:
	char *(*func)(char *, double, char *, double);
CODE:
	func   = INT2PTR(char *(*)(char *, double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2, d3);
OUTPUT:
	RETVAL

int
nci_itdtd( c_func, t0, d1, t2, d3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	double d3
PREINIT:
	int(*func)(char *, double, char *, double);
CODE:
	func   = INT2PTR(int(*)(char *, double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2, d3);
OUTPUT:
	RETVAL

void *
nci_pidtd( c_func, i0, d1, t2, d3 )
	SV* c_func
	int i0
	double d1
	char * t2
	double d3
PREINIT:
	void *(*func)(int, double, char *, double);
CODE:
	func   = INT2PTR(void *(*)(int, double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2, d3);
OUTPUT:
	RETVAL

void
nci_vidtd( c_func, i0, d1, t2, d3 )
	SV* c_func
	int i0
	double d1
	char * t2
	double d3
PREINIT:
	void(*func)(int, double, char *, double);
CODE:
	func   = INT2PTR(void(*)(int, double, char *, double), SvIV(c_func) );
	(*func)(i0, d1, t2, d3);

double
nci_didtd( c_func, i0, d1, t2, d3 )
	SV* c_func
	int i0
	double d1
	char * t2
	double d3
PREINIT:
	double(*func)(int, double, char *, double);
CODE:
	func   = INT2PTR(double(*)(int, double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2, d3);
OUTPUT:
	RETVAL

short
nci_sidtd( c_func, i0, d1, t2, d3 )
	SV* c_func
	int i0
	double d1
	char * t2
	double d3
PREINIT:
	short(*func)(int, double, char *, double);
CODE:
	func   = INT2PTR(short(*)(int, double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2, d3);
OUTPUT:
	RETVAL

float
nci_fidtd( c_func, i0, d1, t2, d3 )
	SV* c_func
	int i0
	double d1
	char * t2
	double d3
PREINIT:
	float(*func)(int, double, char *, double);
CODE:
	func   = INT2PTR(float(*)(int, double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2, d3);
OUTPUT:
	RETVAL

char *
nci_tidtd( c_func, i0, d1, t2, d3 )
	SV* c_func
	int i0
	double d1
	char * t2
	double d3
PREINIT:
	char *(*func)(int, double, char *, double);
CODE:
	func   = INT2PTR(char *(*)(int, double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2, d3);
OUTPUT:
	RETVAL

int
nci_iidtd( c_func, i0, d1, t2, d3 )
	SV* c_func
	int i0
	double d1
	char * t2
	double d3
PREINIT:
	int(*func)(int, double, char *, double);
CODE:
	func   = INT2PTR(int(*)(int, double, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2, d3);
OUTPUT:
	RETVAL

void *
nci_ppstd( c_func, p0, s1, t2, d3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	double d3
PREINIT:
	void *(*func)(void *, short, char *, double);
CODE:
	func   = INT2PTR(void *(*)(void *, short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2, d3);
OUTPUT:
	RETVAL

void
nci_vpstd( c_func, p0, s1, t2, d3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	double d3
PREINIT:
	void(*func)(void *, short, char *, double);
CODE:
	func   = INT2PTR(void(*)(void *, short, char *, double), SvIV(c_func) );
	(*func)(p0, s1, t2, d3);

double
nci_dpstd( c_func, p0, s1, t2, d3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	double d3
PREINIT:
	double(*func)(void *, short, char *, double);
CODE:
	func   = INT2PTR(double(*)(void *, short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2, d3);
OUTPUT:
	RETVAL

short
nci_spstd( c_func, p0, s1, t2, d3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	double d3
PREINIT:
	short(*func)(void *, short, char *, double);
CODE:
	func   = INT2PTR(short(*)(void *, short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2, d3);
OUTPUT:
	RETVAL

float
nci_fpstd( c_func, p0, s1, t2, d3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	double d3
PREINIT:
	float(*func)(void *, short, char *, double);
CODE:
	func   = INT2PTR(float(*)(void *, short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2, d3);
OUTPUT:
	RETVAL

char *
nci_tpstd( c_func, p0, s1, t2, d3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	double d3
PREINIT:
	char *(*func)(void *, short, char *, double);
CODE:
	func   = INT2PTR(char *(*)(void *, short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2, d3);
OUTPUT:
	RETVAL

int
nci_ipstd( c_func, p0, s1, t2, d3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	double d3
PREINIT:
	int(*func)(void *, short, char *, double);
CODE:
	func   = INT2PTR(int(*)(void *, short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2, d3);
OUTPUT:
	RETVAL

void *
nci_pvstd( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvstd( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvstd( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svstd( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvstd( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvstd( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivstd( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdstd( c_func, d0, s1, t2, d3 )
	SV* c_func
	double d0
	short s1
	char * t2
	double d3
PREINIT:
	void *(*func)(double, short, char *, double);
CODE:
	func   = INT2PTR(void *(*)(double, short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2, d3);
OUTPUT:
	RETVAL

void
nci_vdstd( c_func, d0, s1, t2, d3 )
	SV* c_func
	double d0
	short s1
	char * t2
	double d3
PREINIT:
	void(*func)(double, short, char *, double);
CODE:
	func   = INT2PTR(void(*)(double, short, char *, double), SvIV(c_func) );
	(*func)(d0, s1, t2, d3);

double
nci_ddstd( c_func, d0, s1, t2, d3 )
	SV* c_func
	double d0
	short s1
	char * t2
	double d3
PREINIT:
	double(*func)(double, short, char *, double);
CODE:
	func   = INT2PTR(double(*)(double, short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2, d3);
OUTPUT:
	RETVAL

short
nci_sdstd( c_func, d0, s1, t2, d3 )
	SV* c_func
	double d0
	short s1
	char * t2
	double d3
PREINIT:
	short(*func)(double, short, char *, double);
CODE:
	func   = INT2PTR(short(*)(double, short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2, d3);
OUTPUT:
	RETVAL

float
nci_fdstd( c_func, d0, s1, t2, d3 )
	SV* c_func
	double d0
	short s1
	char * t2
	double d3
PREINIT:
	float(*func)(double, short, char *, double);
CODE:
	func   = INT2PTR(float(*)(double, short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2, d3);
OUTPUT:
	RETVAL

char *
nci_tdstd( c_func, d0, s1, t2, d3 )
	SV* c_func
	double d0
	short s1
	char * t2
	double d3
PREINIT:
	char *(*func)(double, short, char *, double);
CODE:
	func   = INT2PTR(char *(*)(double, short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2, d3);
OUTPUT:
	RETVAL

int
nci_idstd( c_func, d0, s1, t2, d3 )
	SV* c_func
	double d0
	short s1
	char * t2
	double d3
PREINIT:
	int(*func)(double, short, char *, double);
CODE:
	func   = INT2PTR(int(*)(double, short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2, d3);
OUTPUT:
	RETVAL

void *
nci_psstd( c_func, s0, s1, t2, d3 )
	SV* c_func
	short s0
	short s1
	char * t2
	double d3
PREINIT:
	void *(*func)(short, short, char *, double);
CODE:
	func   = INT2PTR(void *(*)(short, short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2, d3);
OUTPUT:
	RETVAL

void
nci_vsstd( c_func, s0, s1, t2, d3 )
	SV* c_func
	short s0
	short s1
	char * t2
	double d3
PREINIT:
	void(*func)(short, short, char *, double);
CODE:
	func   = INT2PTR(void(*)(short, short, char *, double), SvIV(c_func) );
	(*func)(s0, s1, t2, d3);

double
nci_dsstd( c_func, s0, s1, t2, d3 )
	SV* c_func
	short s0
	short s1
	char * t2
	double d3
PREINIT:
	double(*func)(short, short, char *, double);
CODE:
	func   = INT2PTR(double(*)(short, short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2, d3);
OUTPUT:
	RETVAL

short
nci_ssstd( c_func, s0, s1, t2, d3 )
	SV* c_func
	short s0
	short s1
	char * t2
	double d3
PREINIT:
	short(*func)(short, short, char *, double);
CODE:
	func   = INT2PTR(short(*)(short, short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2, d3);
OUTPUT:
	RETVAL

float
nci_fsstd( c_func, s0, s1, t2, d3 )
	SV* c_func
	short s0
	short s1
	char * t2
	double d3
PREINIT:
	float(*func)(short, short, char *, double);
CODE:
	func   = INT2PTR(float(*)(short, short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2, d3);
OUTPUT:
	RETVAL

char *
nci_tsstd( c_func, s0, s1, t2, d3 )
	SV* c_func
	short s0
	short s1
	char * t2
	double d3
PREINIT:
	char *(*func)(short, short, char *, double);
CODE:
	func   = INT2PTR(char *(*)(short, short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2, d3);
OUTPUT:
	RETVAL

int
nci_isstd( c_func, s0, s1, t2, d3 )
	SV* c_func
	short s0
	short s1
	char * t2
	double d3
PREINIT:
	int(*func)(short, short, char *, double);
CODE:
	func   = INT2PTR(int(*)(short, short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2, d3);
OUTPUT:
	RETVAL

void *
nci_pfstd( c_func, f0, s1, t2, d3 )
	SV* c_func
	float f0
	short s1
	char * t2
	double d3
PREINIT:
	void *(*func)(float, short, char *, double);
CODE:
	func   = INT2PTR(void *(*)(float, short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2, d3);
OUTPUT:
	RETVAL

void
nci_vfstd( c_func, f0, s1, t2, d3 )
	SV* c_func
	float f0
	short s1
	char * t2
	double d3
PREINIT:
	void(*func)(float, short, char *, double);
CODE:
	func   = INT2PTR(void(*)(float, short, char *, double), SvIV(c_func) );
	(*func)(f0, s1, t2, d3);

double
nci_dfstd( c_func, f0, s1, t2, d3 )
	SV* c_func
	float f0
	short s1
	char * t2
	double d3
PREINIT:
	double(*func)(float, short, char *, double);
CODE:
	func   = INT2PTR(double(*)(float, short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2, d3);
OUTPUT:
	RETVAL

short
nci_sfstd( c_func, f0, s1, t2, d3 )
	SV* c_func
	float f0
	short s1
	char * t2
	double d3
PREINIT:
	short(*func)(float, short, char *, double);
CODE:
	func   = INT2PTR(short(*)(float, short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2, d3);
OUTPUT:
	RETVAL

float
nci_ffstd( c_func, f0, s1, t2, d3 )
	SV* c_func
	float f0
	short s1
	char * t2
	double d3
PREINIT:
	float(*func)(float, short, char *, double);
CODE:
	func   = INT2PTR(float(*)(float, short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2, d3);
OUTPUT:
	RETVAL

char *
nci_tfstd( c_func, f0, s1, t2, d3 )
	SV* c_func
	float f0
	short s1
	char * t2
	double d3
PREINIT:
	char *(*func)(float, short, char *, double);
CODE:
	func   = INT2PTR(char *(*)(float, short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2, d3);
OUTPUT:
	RETVAL

int
nci_ifstd( c_func, f0, s1, t2, d3 )
	SV* c_func
	float f0
	short s1
	char * t2
	double d3
PREINIT:
	int(*func)(float, short, char *, double);
CODE:
	func   = INT2PTR(int(*)(float, short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2, d3);
OUTPUT:
	RETVAL

void *
nci_ptstd( c_func, t0, s1, t2, d3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	double d3
PREINIT:
	void *(*func)(char *, short, char *, double);
CODE:
	func   = INT2PTR(void *(*)(char *, short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2, d3);
OUTPUT:
	RETVAL

void
nci_vtstd( c_func, t0, s1, t2, d3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	double d3
PREINIT:
	void(*func)(char *, short, char *, double);
CODE:
	func   = INT2PTR(void(*)(char *, short, char *, double), SvIV(c_func) );
	(*func)(t0, s1, t2, d3);

double
nci_dtstd( c_func, t0, s1, t2, d3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	double d3
PREINIT:
	double(*func)(char *, short, char *, double);
CODE:
	func   = INT2PTR(double(*)(char *, short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2, d3);
OUTPUT:
	RETVAL

short
nci_ststd( c_func, t0, s1, t2, d3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	double d3
PREINIT:
	short(*func)(char *, short, char *, double);
CODE:
	func   = INT2PTR(short(*)(char *, short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2, d3);
OUTPUT:
	RETVAL

float
nci_ftstd( c_func, t0, s1, t2, d3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	double d3
PREINIT:
	float(*func)(char *, short, char *, double);
CODE:
	func   = INT2PTR(float(*)(char *, short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2, d3);
OUTPUT:
	RETVAL

char *
nci_ttstd( c_func, t0, s1, t2, d3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	double d3
PREINIT:
	char *(*func)(char *, short, char *, double);
CODE:
	func   = INT2PTR(char *(*)(char *, short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2, d3);
OUTPUT:
	RETVAL

int
nci_itstd( c_func, t0, s1, t2, d3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	double d3
PREINIT:
	int(*func)(char *, short, char *, double);
CODE:
	func   = INT2PTR(int(*)(char *, short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2, d3);
OUTPUT:
	RETVAL

void *
nci_pistd( c_func, i0, s1, t2, d3 )
	SV* c_func
	int i0
	short s1
	char * t2
	double d3
PREINIT:
	void *(*func)(int, short, char *, double);
CODE:
	func   = INT2PTR(void *(*)(int, short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2, d3);
OUTPUT:
	RETVAL

void
nci_vistd( c_func, i0, s1, t2, d3 )
	SV* c_func
	int i0
	short s1
	char * t2
	double d3
PREINIT:
	void(*func)(int, short, char *, double);
CODE:
	func   = INT2PTR(void(*)(int, short, char *, double), SvIV(c_func) );
	(*func)(i0, s1, t2, d3);

double
nci_distd( c_func, i0, s1, t2, d3 )
	SV* c_func
	int i0
	short s1
	char * t2
	double d3
PREINIT:
	double(*func)(int, short, char *, double);
CODE:
	func   = INT2PTR(double(*)(int, short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2, d3);
OUTPUT:
	RETVAL

short
nci_sistd( c_func, i0, s1, t2, d3 )
	SV* c_func
	int i0
	short s1
	char * t2
	double d3
PREINIT:
	short(*func)(int, short, char *, double);
CODE:
	func   = INT2PTR(short(*)(int, short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2, d3);
OUTPUT:
	RETVAL

float
nci_fistd( c_func, i0, s1, t2, d3 )
	SV* c_func
	int i0
	short s1
	char * t2
	double d3
PREINIT:
	float(*func)(int, short, char *, double);
CODE:
	func   = INT2PTR(float(*)(int, short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2, d3);
OUTPUT:
	RETVAL

char *
nci_tistd( c_func, i0, s1, t2, d3 )
	SV* c_func
	int i0
	short s1
	char * t2
	double d3
PREINIT:
	char *(*func)(int, short, char *, double);
CODE:
	func   = INT2PTR(char *(*)(int, short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2, d3);
OUTPUT:
	RETVAL

int
nci_iistd( c_func, i0, s1, t2, d3 )
	SV* c_func
	int i0
	short s1
	char * t2
	double d3
PREINIT:
	int(*func)(int, short, char *, double);
CODE:
	func   = INT2PTR(int(*)(int, short, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2, d3);
OUTPUT:
	RETVAL

void *
nci_ppftd( c_func, p0, f1, t2, d3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	double d3
PREINIT:
	void *(*func)(void *, float, char *, double);
CODE:
	func   = INT2PTR(void *(*)(void *, float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2, d3);
OUTPUT:
	RETVAL

void
nci_vpftd( c_func, p0, f1, t2, d3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	double d3
PREINIT:
	void(*func)(void *, float, char *, double);
CODE:
	func   = INT2PTR(void(*)(void *, float, char *, double), SvIV(c_func) );
	(*func)(p0, f1, t2, d3);

double
nci_dpftd( c_func, p0, f1, t2, d3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	double d3
PREINIT:
	double(*func)(void *, float, char *, double);
CODE:
	func   = INT2PTR(double(*)(void *, float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2, d3);
OUTPUT:
	RETVAL

short
nci_spftd( c_func, p0, f1, t2, d3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	double d3
PREINIT:
	short(*func)(void *, float, char *, double);
CODE:
	func   = INT2PTR(short(*)(void *, float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2, d3);
OUTPUT:
	RETVAL

float
nci_fpftd( c_func, p0, f1, t2, d3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	double d3
PREINIT:
	float(*func)(void *, float, char *, double);
CODE:
	func   = INT2PTR(float(*)(void *, float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2, d3);
OUTPUT:
	RETVAL

char *
nci_tpftd( c_func, p0, f1, t2, d3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	double d3
PREINIT:
	char *(*func)(void *, float, char *, double);
CODE:
	func   = INT2PTR(char *(*)(void *, float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2, d3);
OUTPUT:
	RETVAL

int
nci_ipftd( c_func, p0, f1, t2, d3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	double d3
PREINIT:
	int(*func)(void *, float, char *, double);
CODE:
	func   = INT2PTR(int(*)(void *, float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2, d3);
OUTPUT:
	RETVAL

void *
nci_pvftd( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvftd( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvftd( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svftd( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvftd( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvftd( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivftd( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdftd( c_func, d0, f1, t2, d3 )
	SV* c_func
	double d0
	float f1
	char * t2
	double d3
PREINIT:
	void *(*func)(double, float, char *, double);
CODE:
	func   = INT2PTR(void *(*)(double, float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2, d3);
OUTPUT:
	RETVAL

void
nci_vdftd( c_func, d0, f1, t2, d3 )
	SV* c_func
	double d0
	float f1
	char * t2
	double d3
PREINIT:
	void(*func)(double, float, char *, double);
CODE:
	func   = INT2PTR(void(*)(double, float, char *, double), SvIV(c_func) );
	(*func)(d0, f1, t2, d3);

double
nci_ddftd( c_func, d0, f1, t2, d3 )
	SV* c_func
	double d0
	float f1
	char * t2
	double d3
PREINIT:
	double(*func)(double, float, char *, double);
CODE:
	func   = INT2PTR(double(*)(double, float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2, d3);
OUTPUT:
	RETVAL

short
nci_sdftd( c_func, d0, f1, t2, d3 )
	SV* c_func
	double d0
	float f1
	char * t2
	double d3
PREINIT:
	short(*func)(double, float, char *, double);
CODE:
	func   = INT2PTR(short(*)(double, float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2, d3);
OUTPUT:
	RETVAL

float
nci_fdftd( c_func, d0, f1, t2, d3 )
	SV* c_func
	double d0
	float f1
	char * t2
	double d3
PREINIT:
	float(*func)(double, float, char *, double);
CODE:
	func   = INT2PTR(float(*)(double, float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2, d3);
OUTPUT:
	RETVAL

char *
nci_tdftd( c_func, d0, f1, t2, d3 )
	SV* c_func
	double d0
	float f1
	char * t2
	double d3
PREINIT:
	char *(*func)(double, float, char *, double);
CODE:
	func   = INT2PTR(char *(*)(double, float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2, d3);
OUTPUT:
	RETVAL

int
nci_idftd( c_func, d0, f1, t2, d3 )
	SV* c_func
	double d0
	float f1
	char * t2
	double d3
PREINIT:
	int(*func)(double, float, char *, double);
CODE:
	func   = INT2PTR(int(*)(double, float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2, d3);
OUTPUT:
	RETVAL

void *
nci_psftd( c_func, s0, f1, t2, d3 )
	SV* c_func
	short s0
	float f1
	char * t2
	double d3
PREINIT:
	void *(*func)(short, float, char *, double);
CODE:
	func   = INT2PTR(void *(*)(short, float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2, d3);
OUTPUT:
	RETVAL

void
nci_vsftd( c_func, s0, f1, t2, d3 )
	SV* c_func
	short s0
	float f1
	char * t2
	double d3
PREINIT:
	void(*func)(short, float, char *, double);
CODE:
	func   = INT2PTR(void(*)(short, float, char *, double), SvIV(c_func) );
	(*func)(s0, f1, t2, d3);

double
nci_dsftd( c_func, s0, f1, t2, d3 )
	SV* c_func
	short s0
	float f1
	char * t2
	double d3
PREINIT:
	double(*func)(short, float, char *, double);
CODE:
	func   = INT2PTR(double(*)(short, float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2, d3);
OUTPUT:
	RETVAL

short
nci_ssftd( c_func, s0, f1, t2, d3 )
	SV* c_func
	short s0
	float f1
	char * t2
	double d3
PREINIT:
	short(*func)(short, float, char *, double);
CODE:
	func   = INT2PTR(short(*)(short, float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2, d3);
OUTPUT:
	RETVAL

float
nci_fsftd( c_func, s0, f1, t2, d3 )
	SV* c_func
	short s0
	float f1
	char * t2
	double d3
PREINIT:
	float(*func)(short, float, char *, double);
CODE:
	func   = INT2PTR(float(*)(short, float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2, d3);
OUTPUT:
	RETVAL

char *
nci_tsftd( c_func, s0, f1, t2, d3 )
	SV* c_func
	short s0
	float f1
	char * t2
	double d3
PREINIT:
	char *(*func)(short, float, char *, double);
CODE:
	func   = INT2PTR(char *(*)(short, float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2, d3);
OUTPUT:
	RETVAL

int
nci_isftd( c_func, s0, f1, t2, d3 )
	SV* c_func
	short s0
	float f1
	char * t2
	double d3
PREINIT:
	int(*func)(short, float, char *, double);
CODE:
	func   = INT2PTR(int(*)(short, float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2, d3);
OUTPUT:
	RETVAL

void *
nci_pfftd( c_func, f0, f1, t2, d3 )
	SV* c_func
	float f0
	float f1
	char * t2
	double d3
PREINIT:
	void *(*func)(float, float, char *, double);
CODE:
	func   = INT2PTR(void *(*)(float, float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2, d3);
OUTPUT:
	RETVAL

void
nci_vfftd( c_func, f0, f1, t2, d3 )
	SV* c_func
	float f0
	float f1
	char * t2
	double d3
PREINIT:
	void(*func)(float, float, char *, double);
CODE:
	func   = INT2PTR(void(*)(float, float, char *, double), SvIV(c_func) );
	(*func)(f0, f1, t2, d3);

double
nci_dfftd( c_func, f0, f1, t2, d3 )
	SV* c_func
	float f0
	float f1
	char * t2
	double d3
PREINIT:
	double(*func)(float, float, char *, double);
CODE:
	func   = INT2PTR(double(*)(float, float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2, d3);
OUTPUT:
	RETVAL

short
nci_sfftd( c_func, f0, f1, t2, d3 )
	SV* c_func
	float f0
	float f1
	char * t2
	double d3
PREINIT:
	short(*func)(float, float, char *, double);
CODE:
	func   = INT2PTR(short(*)(float, float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2, d3);
OUTPUT:
	RETVAL

float
nci_ffftd( c_func, f0, f1, t2, d3 )
	SV* c_func
	float f0
	float f1
	char * t2
	double d3
PREINIT:
	float(*func)(float, float, char *, double);
CODE:
	func   = INT2PTR(float(*)(float, float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2, d3);
OUTPUT:
	RETVAL

char *
nci_tfftd( c_func, f0, f1, t2, d3 )
	SV* c_func
	float f0
	float f1
	char * t2
	double d3
PREINIT:
	char *(*func)(float, float, char *, double);
CODE:
	func   = INT2PTR(char *(*)(float, float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2, d3);
OUTPUT:
	RETVAL

int
nci_ifftd( c_func, f0, f1, t2, d3 )
	SV* c_func
	float f0
	float f1
	char * t2
	double d3
PREINIT:
	int(*func)(float, float, char *, double);
CODE:
	func   = INT2PTR(int(*)(float, float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2, d3);
OUTPUT:
	RETVAL

void *
nci_ptftd( c_func, t0, f1, t2, d3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	double d3
PREINIT:
	void *(*func)(char *, float, char *, double);
CODE:
	func   = INT2PTR(void *(*)(char *, float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2, d3);
OUTPUT:
	RETVAL

void
nci_vtftd( c_func, t0, f1, t2, d3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	double d3
PREINIT:
	void(*func)(char *, float, char *, double);
CODE:
	func   = INT2PTR(void(*)(char *, float, char *, double), SvIV(c_func) );
	(*func)(t0, f1, t2, d3);

double
nci_dtftd( c_func, t0, f1, t2, d3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	double d3
PREINIT:
	double(*func)(char *, float, char *, double);
CODE:
	func   = INT2PTR(double(*)(char *, float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2, d3);
OUTPUT:
	RETVAL

short
nci_stftd( c_func, t0, f1, t2, d3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	double d3
PREINIT:
	short(*func)(char *, float, char *, double);
CODE:
	func   = INT2PTR(short(*)(char *, float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2, d3);
OUTPUT:
	RETVAL

float
nci_ftftd( c_func, t0, f1, t2, d3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	double d3
PREINIT:
	float(*func)(char *, float, char *, double);
CODE:
	func   = INT2PTR(float(*)(char *, float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2, d3);
OUTPUT:
	RETVAL

char *
nci_ttftd( c_func, t0, f1, t2, d3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	double d3
PREINIT:
	char *(*func)(char *, float, char *, double);
CODE:
	func   = INT2PTR(char *(*)(char *, float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2, d3);
OUTPUT:
	RETVAL

int
nci_itftd( c_func, t0, f1, t2, d3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	double d3
PREINIT:
	int(*func)(char *, float, char *, double);
CODE:
	func   = INT2PTR(int(*)(char *, float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2, d3);
OUTPUT:
	RETVAL

void *
nci_piftd( c_func, i0, f1, t2, d3 )
	SV* c_func
	int i0
	float f1
	char * t2
	double d3
PREINIT:
	void *(*func)(int, float, char *, double);
CODE:
	func   = INT2PTR(void *(*)(int, float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2, d3);
OUTPUT:
	RETVAL

void
nci_viftd( c_func, i0, f1, t2, d3 )
	SV* c_func
	int i0
	float f1
	char * t2
	double d3
PREINIT:
	void(*func)(int, float, char *, double);
CODE:
	func   = INT2PTR(void(*)(int, float, char *, double), SvIV(c_func) );
	(*func)(i0, f1, t2, d3);

double
nci_diftd( c_func, i0, f1, t2, d3 )
	SV* c_func
	int i0
	float f1
	char * t2
	double d3
PREINIT:
	double(*func)(int, float, char *, double);
CODE:
	func   = INT2PTR(double(*)(int, float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2, d3);
OUTPUT:
	RETVAL

short
nci_siftd( c_func, i0, f1, t2, d3 )
	SV* c_func
	int i0
	float f1
	char * t2
	double d3
PREINIT:
	short(*func)(int, float, char *, double);
CODE:
	func   = INT2PTR(short(*)(int, float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2, d3);
OUTPUT:
	RETVAL

float
nci_fiftd( c_func, i0, f1, t2, d3 )
	SV* c_func
	int i0
	float f1
	char * t2
	double d3
PREINIT:
	float(*func)(int, float, char *, double);
CODE:
	func   = INT2PTR(float(*)(int, float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2, d3);
OUTPUT:
	RETVAL

char *
nci_tiftd( c_func, i0, f1, t2, d3 )
	SV* c_func
	int i0
	float f1
	char * t2
	double d3
PREINIT:
	char *(*func)(int, float, char *, double);
CODE:
	func   = INT2PTR(char *(*)(int, float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2, d3);
OUTPUT:
	RETVAL

int
nci_iiftd( c_func, i0, f1, t2, d3 )
	SV* c_func
	int i0
	float f1
	char * t2
	double d3
PREINIT:
	int(*func)(int, float, char *, double);
CODE:
	func   = INT2PTR(int(*)(int, float, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2, d3);
OUTPUT:
	RETVAL

void *
nci_ppttd( c_func, p0, t1, t2, d3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	double d3
PREINIT:
	void *(*func)(void *, char *, char *, double);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2, d3);
OUTPUT:
	RETVAL

void
nci_vpttd( c_func, p0, t1, t2, d3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	double d3
PREINIT:
	void(*func)(void *, char *, char *, double);
CODE:
	func   = INT2PTR(void(*)(void *, char *, char *, double), SvIV(c_func) );
	(*func)(p0, t1, t2, d3);

double
nci_dpttd( c_func, p0, t1, t2, d3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	double d3
PREINIT:
	double(*func)(void *, char *, char *, double);
CODE:
	func   = INT2PTR(double(*)(void *, char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2, d3);
OUTPUT:
	RETVAL

short
nci_spttd( c_func, p0, t1, t2, d3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	double d3
PREINIT:
	short(*func)(void *, char *, char *, double);
CODE:
	func   = INT2PTR(short(*)(void *, char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2, d3);
OUTPUT:
	RETVAL

float
nci_fpttd( c_func, p0, t1, t2, d3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	double d3
PREINIT:
	float(*func)(void *, char *, char *, double);
CODE:
	func   = INT2PTR(float(*)(void *, char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2, d3);
OUTPUT:
	RETVAL

char *
nci_tpttd( c_func, p0, t1, t2, d3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	double d3
PREINIT:
	char *(*func)(void *, char *, char *, double);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2, d3);
OUTPUT:
	RETVAL

int
nci_ipttd( c_func, p0, t1, t2, d3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	double d3
PREINIT:
	int(*func)(void *, char *, char *, double);
CODE:
	func   = INT2PTR(int(*)(void *, char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2, d3);
OUTPUT:
	RETVAL

void *
nci_pvttd( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvttd( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvttd( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svttd( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvttd( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvttd( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivttd( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdttd( c_func, d0, t1, t2, d3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	double d3
PREINIT:
	void *(*func)(double, char *, char *, double);
CODE:
	func   = INT2PTR(void *(*)(double, char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2, d3);
OUTPUT:
	RETVAL

void
nci_vdttd( c_func, d0, t1, t2, d3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	double d3
PREINIT:
	void(*func)(double, char *, char *, double);
CODE:
	func   = INT2PTR(void(*)(double, char *, char *, double), SvIV(c_func) );
	(*func)(d0, t1, t2, d3);

double
nci_ddttd( c_func, d0, t1, t2, d3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	double d3
PREINIT:
	double(*func)(double, char *, char *, double);
CODE:
	func   = INT2PTR(double(*)(double, char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2, d3);
OUTPUT:
	RETVAL

short
nci_sdttd( c_func, d0, t1, t2, d3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	double d3
PREINIT:
	short(*func)(double, char *, char *, double);
CODE:
	func   = INT2PTR(short(*)(double, char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2, d3);
OUTPUT:
	RETVAL

float
nci_fdttd( c_func, d0, t1, t2, d3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	double d3
PREINIT:
	float(*func)(double, char *, char *, double);
CODE:
	func   = INT2PTR(float(*)(double, char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2, d3);
OUTPUT:
	RETVAL

char *
nci_tdttd( c_func, d0, t1, t2, d3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	double d3
PREINIT:
	char *(*func)(double, char *, char *, double);
CODE:
	func   = INT2PTR(char *(*)(double, char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2, d3);
OUTPUT:
	RETVAL

int
nci_idttd( c_func, d0, t1, t2, d3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	double d3
PREINIT:
	int(*func)(double, char *, char *, double);
CODE:
	func   = INT2PTR(int(*)(double, char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2, d3);
OUTPUT:
	RETVAL

void *
nci_psttd( c_func, s0, t1, t2, d3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	double d3
PREINIT:
	void *(*func)(short, char *, char *, double);
CODE:
	func   = INT2PTR(void *(*)(short, char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2, d3);
OUTPUT:
	RETVAL

void
nci_vsttd( c_func, s0, t1, t2, d3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	double d3
PREINIT:
	void(*func)(short, char *, char *, double);
CODE:
	func   = INT2PTR(void(*)(short, char *, char *, double), SvIV(c_func) );
	(*func)(s0, t1, t2, d3);

double
nci_dsttd( c_func, s0, t1, t2, d3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	double d3
PREINIT:
	double(*func)(short, char *, char *, double);
CODE:
	func   = INT2PTR(double(*)(short, char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2, d3);
OUTPUT:
	RETVAL

short
nci_ssttd( c_func, s0, t1, t2, d3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	double d3
PREINIT:
	short(*func)(short, char *, char *, double);
CODE:
	func   = INT2PTR(short(*)(short, char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2, d3);
OUTPUT:
	RETVAL

float
nci_fsttd( c_func, s0, t1, t2, d3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	double d3
PREINIT:
	float(*func)(short, char *, char *, double);
CODE:
	func   = INT2PTR(float(*)(short, char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2, d3);
OUTPUT:
	RETVAL

char *
nci_tsttd( c_func, s0, t1, t2, d3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	double d3
PREINIT:
	char *(*func)(short, char *, char *, double);
CODE:
	func   = INT2PTR(char *(*)(short, char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2, d3);
OUTPUT:
	RETVAL

int
nci_isttd( c_func, s0, t1, t2, d3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	double d3
PREINIT:
	int(*func)(short, char *, char *, double);
CODE:
	func   = INT2PTR(int(*)(short, char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2, d3);
OUTPUT:
	RETVAL

void *
nci_pfttd( c_func, f0, t1, t2, d3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	double d3
PREINIT:
	void *(*func)(float, char *, char *, double);
CODE:
	func   = INT2PTR(void *(*)(float, char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2, d3);
OUTPUT:
	RETVAL

void
nci_vfttd( c_func, f0, t1, t2, d3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	double d3
PREINIT:
	void(*func)(float, char *, char *, double);
CODE:
	func   = INT2PTR(void(*)(float, char *, char *, double), SvIV(c_func) );
	(*func)(f0, t1, t2, d3);

double
nci_dfttd( c_func, f0, t1, t2, d3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	double d3
PREINIT:
	double(*func)(float, char *, char *, double);
CODE:
	func   = INT2PTR(double(*)(float, char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2, d3);
OUTPUT:
	RETVAL

short
nci_sfttd( c_func, f0, t1, t2, d3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	double d3
PREINIT:
	short(*func)(float, char *, char *, double);
CODE:
	func   = INT2PTR(short(*)(float, char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2, d3);
OUTPUT:
	RETVAL

float
nci_ffttd( c_func, f0, t1, t2, d3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	double d3
PREINIT:
	float(*func)(float, char *, char *, double);
CODE:
	func   = INT2PTR(float(*)(float, char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2, d3);
OUTPUT:
	RETVAL

char *
nci_tfttd( c_func, f0, t1, t2, d3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	double d3
PREINIT:
	char *(*func)(float, char *, char *, double);
CODE:
	func   = INT2PTR(char *(*)(float, char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2, d3);
OUTPUT:
	RETVAL

int
nci_ifttd( c_func, f0, t1, t2, d3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	double d3
PREINIT:
	int(*func)(float, char *, char *, double);
CODE:
	func   = INT2PTR(int(*)(float, char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2, d3);
OUTPUT:
	RETVAL

void *
nci_ptttd( c_func, t0, t1, t2, d3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	double d3
PREINIT:
	void *(*func)(char *, char *, char *, double);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2, d3);
OUTPUT:
	RETVAL

void
nci_vtttd( c_func, t0, t1, t2, d3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	double d3
PREINIT:
	void(*func)(char *, char *, char *, double);
CODE:
	func   = INT2PTR(void(*)(char *, char *, char *, double), SvIV(c_func) );
	(*func)(t0, t1, t2, d3);

double
nci_dtttd( c_func, t0, t1, t2, d3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	double d3
PREINIT:
	double(*func)(char *, char *, char *, double);
CODE:
	func   = INT2PTR(double(*)(char *, char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2, d3);
OUTPUT:
	RETVAL

short
nci_stttd( c_func, t0, t1, t2, d3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	double d3
PREINIT:
	short(*func)(char *, char *, char *, double);
CODE:
	func   = INT2PTR(short(*)(char *, char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2, d3);
OUTPUT:
	RETVAL

float
nci_ftttd( c_func, t0, t1, t2, d3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	double d3
PREINIT:
	float(*func)(char *, char *, char *, double);
CODE:
	func   = INT2PTR(float(*)(char *, char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2, d3);
OUTPUT:
	RETVAL

char *
nci_ttttd( c_func, t0, t1, t2, d3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	double d3
PREINIT:
	char *(*func)(char *, char *, char *, double);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2, d3);
OUTPUT:
	RETVAL

int
nci_itttd( c_func, t0, t1, t2, d3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	double d3
PREINIT:
	int(*func)(char *, char *, char *, double);
CODE:
	func   = INT2PTR(int(*)(char *, char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2, d3);
OUTPUT:
	RETVAL

void *
nci_pittd( c_func, i0, t1, t2, d3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	double d3
PREINIT:
	void *(*func)(int, char *, char *, double);
CODE:
	func   = INT2PTR(void *(*)(int, char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2, d3);
OUTPUT:
	RETVAL

void
nci_vittd( c_func, i0, t1, t2, d3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	double d3
PREINIT:
	void(*func)(int, char *, char *, double);
CODE:
	func   = INT2PTR(void(*)(int, char *, char *, double), SvIV(c_func) );
	(*func)(i0, t1, t2, d3);

double
nci_dittd( c_func, i0, t1, t2, d3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	double d3
PREINIT:
	double(*func)(int, char *, char *, double);
CODE:
	func   = INT2PTR(double(*)(int, char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2, d3);
OUTPUT:
	RETVAL

short
nci_sittd( c_func, i0, t1, t2, d3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	double d3
PREINIT:
	short(*func)(int, char *, char *, double);
CODE:
	func   = INT2PTR(short(*)(int, char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2, d3);
OUTPUT:
	RETVAL

float
nci_fittd( c_func, i0, t1, t2, d3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	double d3
PREINIT:
	float(*func)(int, char *, char *, double);
CODE:
	func   = INT2PTR(float(*)(int, char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2, d3);
OUTPUT:
	RETVAL

char *
nci_tittd( c_func, i0, t1, t2, d3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	double d3
PREINIT:
	char *(*func)(int, char *, char *, double);
CODE:
	func   = INT2PTR(char *(*)(int, char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2, d3);
OUTPUT:
	RETVAL

int
nci_iittd( c_func, i0, t1, t2, d3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	double d3
PREINIT:
	int(*func)(int, char *, char *, double);
CODE:
	func   = INT2PTR(int(*)(int, char *, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2, d3);
OUTPUT:
	RETVAL

void *
nci_ppitd( c_func, p0, i1, t2, d3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	double d3
PREINIT:
	void *(*func)(void *, int, char *, double);
CODE:
	func   = INT2PTR(void *(*)(void *, int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2, d3);
OUTPUT:
	RETVAL

void
nci_vpitd( c_func, p0, i1, t2, d3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	double d3
PREINIT:
	void(*func)(void *, int, char *, double);
CODE:
	func   = INT2PTR(void(*)(void *, int, char *, double), SvIV(c_func) );
	(*func)(p0, i1, t2, d3);

double
nci_dpitd( c_func, p0, i1, t2, d3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	double d3
PREINIT:
	double(*func)(void *, int, char *, double);
CODE:
	func   = INT2PTR(double(*)(void *, int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2, d3);
OUTPUT:
	RETVAL

short
nci_spitd( c_func, p0, i1, t2, d3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	double d3
PREINIT:
	short(*func)(void *, int, char *, double);
CODE:
	func   = INT2PTR(short(*)(void *, int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2, d3);
OUTPUT:
	RETVAL

float
nci_fpitd( c_func, p0, i1, t2, d3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	double d3
PREINIT:
	float(*func)(void *, int, char *, double);
CODE:
	func   = INT2PTR(float(*)(void *, int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2, d3);
OUTPUT:
	RETVAL

char *
nci_tpitd( c_func, p0, i1, t2, d3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	double d3
PREINIT:
	char *(*func)(void *, int, char *, double);
CODE:
	func   = INT2PTR(char *(*)(void *, int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2, d3);
OUTPUT:
	RETVAL

int
nci_ipitd( c_func, p0, i1, t2, d3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	double d3
PREINIT:
	int(*func)(void *, int, char *, double);
CODE:
	func   = INT2PTR(int(*)(void *, int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2, d3);
OUTPUT:
	RETVAL

void *
nci_pvitd( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvitd( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvitd( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svitd( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvitd( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvitd( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivitd( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pditd( c_func, d0, i1, t2, d3 )
	SV* c_func
	double d0
	int i1
	char * t2
	double d3
PREINIT:
	void *(*func)(double, int, char *, double);
CODE:
	func   = INT2PTR(void *(*)(double, int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2, d3);
OUTPUT:
	RETVAL

void
nci_vditd( c_func, d0, i1, t2, d3 )
	SV* c_func
	double d0
	int i1
	char * t2
	double d3
PREINIT:
	void(*func)(double, int, char *, double);
CODE:
	func   = INT2PTR(void(*)(double, int, char *, double), SvIV(c_func) );
	(*func)(d0, i1, t2, d3);

double
nci_dditd( c_func, d0, i1, t2, d3 )
	SV* c_func
	double d0
	int i1
	char * t2
	double d3
PREINIT:
	double(*func)(double, int, char *, double);
CODE:
	func   = INT2PTR(double(*)(double, int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2, d3);
OUTPUT:
	RETVAL

short
nci_sditd( c_func, d0, i1, t2, d3 )
	SV* c_func
	double d0
	int i1
	char * t2
	double d3
PREINIT:
	short(*func)(double, int, char *, double);
CODE:
	func   = INT2PTR(short(*)(double, int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2, d3);
OUTPUT:
	RETVAL

float
nci_fditd( c_func, d0, i1, t2, d3 )
	SV* c_func
	double d0
	int i1
	char * t2
	double d3
PREINIT:
	float(*func)(double, int, char *, double);
CODE:
	func   = INT2PTR(float(*)(double, int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2, d3);
OUTPUT:
	RETVAL

char *
nci_tditd( c_func, d0, i1, t2, d3 )
	SV* c_func
	double d0
	int i1
	char * t2
	double d3
PREINIT:
	char *(*func)(double, int, char *, double);
CODE:
	func   = INT2PTR(char *(*)(double, int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2, d3);
OUTPUT:
	RETVAL

int
nci_iditd( c_func, d0, i1, t2, d3 )
	SV* c_func
	double d0
	int i1
	char * t2
	double d3
PREINIT:
	int(*func)(double, int, char *, double);
CODE:
	func   = INT2PTR(int(*)(double, int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2, d3);
OUTPUT:
	RETVAL

void *
nci_psitd( c_func, s0, i1, t2, d3 )
	SV* c_func
	short s0
	int i1
	char * t2
	double d3
PREINIT:
	void *(*func)(short, int, char *, double);
CODE:
	func   = INT2PTR(void *(*)(short, int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2, d3);
OUTPUT:
	RETVAL

void
nci_vsitd( c_func, s0, i1, t2, d3 )
	SV* c_func
	short s0
	int i1
	char * t2
	double d3
PREINIT:
	void(*func)(short, int, char *, double);
CODE:
	func   = INT2PTR(void(*)(short, int, char *, double), SvIV(c_func) );
	(*func)(s0, i1, t2, d3);

double
nci_dsitd( c_func, s0, i1, t2, d3 )
	SV* c_func
	short s0
	int i1
	char * t2
	double d3
PREINIT:
	double(*func)(short, int, char *, double);
CODE:
	func   = INT2PTR(double(*)(short, int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2, d3);
OUTPUT:
	RETVAL

short
nci_ssitd( c_func, s0, i1, t2, d3 )
	SV* c_func
	short s0
	int i1
	char * t2
	double d3
PREINIT:
	short(*func)(short, int, char *, double);
CODE:
	func   = INT2PTR(short(*)(short, int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2, d3);
OUTPUT:
	RETVAL

float
nci_fsitd( c_func, s0, i1, t2, d3 )
	SV* c_func
	short s0
	int i1
	char * t2
	double d3
PREINIT:
	float(*func)(short, int, char *, double);
CODE:
	func   = INT2PTR(float(*)(short, int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2, d3);
OUTPUT:
	RETVAL

char *
nci_tsitd( c_func, s0, i1, t2, d3 )
	SV* c_func
	short s0
	int i1
	char * t2
	double d3
PREINIT:
	char *(*func)(short, int, char *, double);
CODE:
	func   = INT2PTR(char *(*)(short, int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2, d3);
OUTPUT:
	RETVAL

int
nci_isitd( c_func, s0, i1, t2, d3 )
	SV* c_func
	short s0
	int i1
	char * t2
	double d3
PREINIT:
	int(*func)(short, int, char *, double);
CODE:
	func   = INT2PTR(int(*)(short, int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2, d3);
OUTPUT:
	RETVAL

void *
nci_pfitd( c_func, f0, i1, t2, d3 )
	SV* c_func
	float f0
	int i1
	char * t2
	double d3
PREINIT:
	void *(*func)(float, int, char *, double);
CODE:
	func   = INT2PTR(void *(*)(float, int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2, d3);
OUTPUT:
	RETVAL

void
nci_vfitd( c_func, f0, i1, t2, d3 )
	SV* c_func
	float f0
	int i1
	char * t2
	double d3
PREINIT:
	void(*func)(float, int, char *, double);
CODE:
	func   = INT2PTR(void(*)(float, int, char *, double), SvIV(c_func) );
	(*func)(f0, i1, t2, d3);

double
nci_dfitd( c_func, f0, i1, t2, d3 )
	SV* c_func
	float f0
	int i1
	char * t2
	double d3
PREINIT:
	double(*func)(float, int, char *, double);
CODE:
	func   = INT2PTR(double(*)(float, int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2, d3);
OUTPUT:
	RETVAL

short
nci_sfitd( c_func, f0, i1, t2, d3 )
	SV* c_func
	float f0
	int i1
	char * t2
	double d3
PREINIT:
	short(*func)(float, int, char *, double);
CODE:
	func   = INT2PTR(short(*)(float, int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2, d3);
OUTPUT:
	RETVAL

float
nci_ffitd( c_func, f0, i1, t2, d3 )
	SV* c_func
	float f0
	int i1
	char * t2
	double d3
PREINIT:
	float(*func)(float, int, char *, double);
CODE:
	func   = INT2PTR(float(*)(float, int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2, d3);
OUTPUT:
	RETVAL

char *
nci_tfitd( c_func, f0, i1, t2, d3 )
	SV* c_func
	float f0
	int i1
	char * t2
	double d3
PREINIT:
	char *(*func)(float, int, char *, double);
CODE:
	func   = INT2PTR(char *(*)(float, int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2, d3);
OUTPUT:
	RETVAL

int
nci_ifitd( c_func, f0, i1, t2, d3 )
	SV* c_func
	float f0
	int i1
	char * t2
	double d3
PREINIT:
	int(*func)(float, int, char *, double);
CODE:
	func   = INT2PTR(int(*)(float, int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2, d3);
OUTPUT:
	RETVAL

void *
nci_ptitd( c_func, t0, i1, t2, d3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	double d3
PREINIT:
	void *(*func)(char *, int, char *, double);
CODE:
	func   = INT2PTR(void *(*)(char *, int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2, d3);
OUTPUT:
	RETVAL

void
nci_vtitd( c_func, t0, i1, t2, d3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	double d3
PREINIT:
	void(*func)(char *, int, char *, double);
CODE:
	func   = INT2PTR(void(*)(char *, int, char *, double), SvIV(c_func) );
	(*func)(t0, i1, t2, d3);

double
nci_dtitd( c_func, t0, i1, t2, d3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	double d3
PREINIT:
	double(*func)(char *, int, char *, double);
CODE:
	func   = INT2PTR(double(*)(char *, int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2, d3);
OUTPUT:
	RETVAL

short
nci_stitd( c_func, t0, i1, t2, d3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	double d3
PREINIT:
	short(*func)(char *, int, char *, double);
CODE:
	func   = INT2PTR(short(*)(char *, int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2, d3);
OUTPUT:
	RETVAL

float
nci_ftitd( c_func, t0, i1, t2, d3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	double d3
PREINIT:
	float(*func)(char *, int, char *, double);
CODE:
	func   = INT2PTR(float(*)(char *, int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2, d3);
OUTPUT:
	RETVAL

char *
nci_ttitd( c_func, t0, i1, t2, d3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	double d3
PREINIT:
	char *(*func)(char *, int, char *, double);
CODE:
	func   = INT2PTR(char *(*)(char *, int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2, d3);
OUTPUT:
	RETVAL

int
nci_ititd( c_func, t0, i1, t2, d3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	double d3
PREINIT:
	int(*func)(char *, int, char *, double);
CODE:
	func   = INT2PTR(int(*)(char *, int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2, d3);
OUTPUT:
	RETVAL

void *
nci_piitd( c_func, i0, i1, t2, d3 )
	SV* c_func
	int i0
	int i1
	char * t2
	double d3
PREINIT:
	void *(*func)(int, int, char *, double);
CODE:
	func   = INT2PTR(void *(*)(int, int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2, d3);
OUTPUT:
	RETVAL

void
nci_viitd( c_func, i0, i1, t2, d3 )
	SV* c_func
	int i0
	int i1
	char * t2
	double d3
PREINIT:
	void(*func)(int, int, char *, double);
CODE:
	func   = INT2PTR(void(*)(int, int, char *, double), SvIV(c_func) );
	(*func)(i0, i1, t2, d3);

double
nci_diitd( c_func, i0, i1, t2, d3 )
	SV* c_func
	int i0
	int i1
	char * t2
	double d3
PREINIT:
	double(*func)(int, int, char *, double);
CODE:
	func   = INT2PTR(double(*)(int, int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2, d3);
OUTPUT:
	RETVAL

short
nci_siitd( c_func, i0, i1, t2, d3 )
	SV* c_func
	int i0
	int i1
	char * t2
	double d3
PREINIT:
	short(*func)(int, int, char *, double);
CODE:
	func   = INT2PTR(short(*)(int, int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2, d3);
OUTPUT:
	RETVAL

float
nci_fiitd( c_func, i0, i1, t2, d3 )
	SV* c_func
	int i0
	int i1
	char * t2
	double d3
PREINIT:
	float(*func)(int, int, char *, double);
CODE:
	func   = INT2PTR(float(*)(int, int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2, d3);
OUTPUT:
	RETVAL

char *
nci_tiitd( c_func, i0, i1, t2, d3 )
	SV* c_func
	int i0
	int i1
	char * t2
	double d3
PREINIT:
	char *(*func)(int, int, char *, double);
CODE:
	func   = INT2PTR(char *(*)(int, int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2, d3);
OUTPUT:
	RETVAL

int
nci_iiitd( c_func, i0, i1, t2, d3 )
	SV* c_func
	int i0
	int i1
	char * t2
	double d3
PREINIT:
	int(*func)(int, int, char *, double);
CODE:
	func   = INT2PTR(int(*)(int, int, char *, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2, d3);
OUTPUT:
	RETVAL

void *
nci_pppid( c_func, p0, p1, i2, d3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	double d3
PREINIT:
	void *(*func)(void *, void *, int, double);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2, d3);
OUTPUT:
	RETVAL

void
nci_vppid( c_func, p0, p1, i2, d3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	double d3
PREINIT:
	void(*func)(void *, void *, int, double);
CODE:
	func   = INT2PTR(void(*)(void *, void *, int, double), SvIV(c_func) );
	(*func)(p0, p1, i2, d3);

double
nci_dppid( c_func, p0, p1, i2, d3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	double d3
PREINIT:
	double(*func)(void *, void *, int, double);
CODE:
	func   = INT2PTR(double(*)(void *, void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2, d3);
OUTPUT:
	RETVAL

short
nci_sppid( c_func, p0, p1, i2, d3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	double d3
PREINIT:
	short(*func)(void *, void *, int, double);
CODE:
	func   = INT2PTR(short(*)(void *, void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2, d3);
OUTPUT:
	RETVAL

float
nci_fppid( c_func, p0, p1, i2, d3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	double d3
PREINIT:
	float(*func)(void *, void *, int, double);
CODE:
	func   = INT2PTR(float(*)(void *, void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2, d3);
OUTPUT:
	RETVAL

char *
nci_tppid( c_func, p0, p1, i2, d3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	double d3
PREINIT:
	char *(*func)(void *, void *, int, double);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2, d3);
OUTPUT:
	RETVAL

int
nci_ippid( c_func, p0, p1, i2, d3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	double d3
PREINIT:
	int(*func)(void *, void *, int, double);
CODE:
	func   = INT2PTR(int(*)(void *, void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2, d3);
OUTPUT:
	RETVAL

void *
nci_pvpid( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvpid( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvpid( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svpid( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvpid( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvpid( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivpid( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdpid( c_func, d0, p1, i2, d3 )
	SV* c_func
	double d0
	void * p1
	int i2
	double d3
PREINIT:
	void *(*func)(double, void *, int, double);
CODE:
	func   = INT2PTR(void *(*)(double, void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2, d3);
OUTPUT:
	RETVAL

void
nci_vdpid( c_func, d0, p1, i2, d3 )
	SV* c_func
	double d0
	void * p1
	int i2
	double d3
PREINIT:
	void(*func)(double, void *, int, double);
CODE:
	func   = INT2PTR(void(*)(double, void *, int, double), SvIV(c_func) );
	(*func)(d0, p1, i2, d3);

double
nci_ddpid( c_func, d0, p1, i2, d3 )
	SV* c_func
	double d0
	void * p1
	int i2
	double d3
PREINIT:
	double(*func)(double, void *, int, double);
CODE:
	func   = INT2PTR(double(*)(double, void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2, d3);
OUTPUT:
	RETVAL

short
nci_sdpid( c_func, d0, p1, i2, d3 )
	SV* c_func
	double d0
	void * p1
	int i2
	double d3
PREINIT:
	short(*func)(double, void *, int, double);
CODE:
	func   = INT2PTR(short(*)(double, void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2, d3);
OUTPUT:
	RETVAL

float
nci_fdpid( c_func, d0, p1, i2, d3 )
	SV* c_func
	double d0
	void * p1
	int i2
	double d3
PREINIT:
	float(*func)(double, void *, int, double);
CODE:
	func   = INT2PTR(float(*)(double, void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2, d3);
OUTPUT:
	RETVAL

char *
nci_tdpid( c_func, d0, p1, i2, d3 )
	SV* c_func
	double d0
	void * p1
	int i2
	double d3
PREINIT:
	char *(*func)(double, void *, int, double);
CODE:
	func   = INT2PTR(char *(*)(double, void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2, d3);
OUTPUT:
	RETVAL

int
nci_idpid( c_func, d0, p1, i2, d3 )
	SV* c_func
	double d0
	void * p1
	int i2
	double d3
PREINIT:
	int(*func)(double, void *, int, double);
CODE:
	func   = INT2PTR(int(*)(double, void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2, d3);
OUTPUT:
	RETVAL

void *
nci_pspid( c_func, s0, p1, i2, d3 )
	SV* c_func
	short s0
	void * p1
	int i2
	double d3
PREINIT:
	void *(*func)(short, void *, int, double);
CODE:
	func   = INT2PTR(void *(*)(short, void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2, d3);
OUTPUT:
	RETVAL

void
nci_vspid( c_func, s0, p1, i2, d3 )
	SV* c_func
	short s0
	void * p1
	int i2
	double d3
PREINIT:
	void(*func)(short, void *, int, double);
CODE:
	func   = INT2PTR(void(*)(short, void *, int, double), SvIV(c_func) );
	(*func)(s0, p1, i2, d3);

double
nci_dspid( c_func, s0, p1, i2, d3 )
	SV* c_func
	short s0
	void * p1
	int i2
	double d3
PREINIT:
	double(*func)(short, void *, int, double);
CODE:
	func   = INT2PTR(double(*)(short, void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2, d3);
OUTPUT:
	RETVAL

short
nci_sspid( c_func, s0, p1, i2, d3 )
	SV* c_func
	short s0
	void * p1
	int i2
	double d3
PREINIT:
	short(*func)(short, void *, int, double);
CODE:
	func   = INT2PTR(short(*)(short, void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2, d3);
OUTPUT:
	RETVAL

float
nci_fspid( c_func, s0, p1, i2, d3 )
	SV* c_func
	short s0
	void * p1
	int i2
	double d3
PREINIT:
	float(*func)(short, void *, int, double);
CODE:
	func   = INT2PTR(float(*)(short, void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2, d3);
OUTPUT:
	RETVAL

char *
nci_tspid( c_func, s0, p1, i2, d3 )
	SV* c_func
	short s0
	void * p1
	int i2
	double d3
PREINIT:
	char *(*func)(short, void *, int, double);
CODE:
	func   = INT2PTR(char *(*)(short, void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2, d3);
OUTPUT:
	RETVAL

int
nci_ispid( c_func, s0, p1, i2, d3 )
	SV* c_func
	short s0
	void * p1
	int i2
	double d3
PREINIT:
	int(*func)(short, void *, int, double);
CODE:
	func   = INT2PTR(int(*)(short, void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2, d3);
OUTPUT:
	RETVAL

void *
nci_pfpid( c_func, f0, p1, i2, d3 )
	SV* c_func
	float f0
	void * p1
	int i2
	double d3
PREINIT:
	void *(*func)(float, void *, int, double);
CODE:
	func   = INT2PTR(void *(*)(float, void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2, d3);
OUTPUT:
	RETVAL

void
nci_vfpid( c_func, f0, p1, i2, d3 )
	SV* c_func
	float f0
	void * p1
	int i2
	double d3
PREINIT:
	void(*func)(float, void *, int, double);
CODE:
	func   = INT2PTR(void(*)(float, void *, int, double), SvIV(c_func) );
	(*func)(f0, p1, i2, d3);

double
nci_dfpid( c_func, f0, p1, i2, d3 )
	SV* c_func
	float f0
	void * p1
	int i2
	double d3
PREINIT:
	double(*func)(float, void *, int, double);
CODE:
	func   = INT2PTR(double(*)(float, void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2, d3);
OUTPUT:
	RETVAL

short
nci_sfpid( c_func, f0, p1, i2, d3 )
	SV* c_func
	float f0
	void * p1
	int i2
	double d3
PREINIT:
	short(*func)(float, void *, int, double);
CODE:
	func   = INT2PTR(short(*)(float, void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2, d3);
OUTPUT:
	RETVAL

float
nci_ffpid( c_func, f0, p1, i2, d3 )
	SV* c_func
	float f0
	void * p1
	int i2
	double d3
PREINIT:
	float(*func)(float, void *, int, double);
CODE:
	func   = INT2PTR(float(*)(float, void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2, d3);
OUTPUT:
	RETVAL

char *
nci_tfpid( c_func, f0, p1, i2, d3 )
	SV* c_func
	float f0
	void * p1
	int i2
	double d3
PREINIT:
	char *(*func)(float, void *, int, double);
CODE:
	func   = INT2PTR(char *(*)(float, void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2, d3);
OUTPUT:
	RETVAL

int
nci_ifpid( c_func, f0, p1, i2, d3 )
	SV* c_func
	float f0
	void * p1
	int i2
	double d3
PREINIT:
	int(*func)(float, void *, int, double);
CODE:
	func   = INT2PTR(int(*)(float, void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2, d3);
OUTPUT:
	RETVAL

void *
nci_ptpid( c_func, t0, p1, i2, d3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	double d3
PREINIT:
	void *(*func)(char *, void *, int, double);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2, d3);
OUTPUT:
	RETVAL

void
nci_vtpid( c_func, t0, p1, i2, d3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	double d3
PREINIT:
	void(*func)(char *, void *, int, double);
CODE:
	func   = INT2PTR(void(*)(char *, void *, int, double), SvIV(c_func) );
	(*func)(t0, p1, i2, d3);

double
nci_dtpid( c_func, t0, p1, i2, d3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	double d3
PREINIT:
	double(*func)(char *, void *, int, double);
CODE:
	func   = INT2PTR(double(*)(char *, void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2, d3);
OUTPUT:
	RETVAL

short
nci_stpid( c_func, t0, p1, i2, d3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	double d3
PREINIT:
	short(*func)(char *, void *, int, double);
CODE:
	func   = INT2PTR(short(*)(char *, void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2, d3);
OUTPUT:
	RETVAL

float
nci_ftpid( c_func, t0, p1, i2, d3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	double d3
PREINIT:
	float(*func)(char *, void *, int, double);
CODE:
	func   = INT2PTR(float(*)(char *, void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2, d3);
OUTPUT:
	RETVAL

char *
nci_ttpid( c_func, t0, p1, i2, d3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	double d3
PREINIT:
	char *(*func)(char *, void *, int, double);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2, d3);
OUTPUT:
	RETVAL

int
nci_itpid( c_func, t0, p1, i2, d3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	double d3
PREINIT:
	int(*func)(char *, void *, int, double);
CODE:
	func   = INT2PTR(int(*)(char *, void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2, d3);
OUTPUT:
	RETVAL

void *
nci_pipid( c_func, i0, p1, i2, d3 )
	SV* c_func
	int i0
	void * p1
	int i2
	double d3
PREINIT:
	void *(*func)(int, void *, int, double);
CODE:
	func   = INT2PTR(void *(*)(int, void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2, d3);
OUTPUT:
	RETVAL

void
nci_vipid( c_func, i0, p1, i2, d3 )
	SV* c_func
	int i0
	void * p1
	int i2
	double d3
PREINIT:
	void(*func)(int, void *, int, double);
CODE:
	func   = INT2PTR(void(*)(int, void *, int, double), SvIV(c_func) );
	(*func)(i0, p1, i2, d3);

double
nci_dipid( c_func, i0, p1, i2, d3 )
	SV* c_func
	int i0
	void * p1
	int i2
	double d3
PREINIT:
	double(*func)(int, void *, int, double);
CODE:
	func   = INT2PTR(double(*)(int, void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2, d3);
OUTPUT:
	RETVAL

short
nci_sipid( c_func, i0, p1, i2, d3 )
	SV* c_func
	int i0
	void * p1
	int i2
	double d3
PREINIT:
	short(*func)(int, void *, int, double);
CODE:
	func   = INT2PTR(short(*)(int, void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2, d3);
OUTPUT:
	RETVAL

float
nci_fipid( c_func, i0, p1, i2, d3 )
	SV* c_func
	int i0
	void * p1
	int i2
	double d3
PREINIT:
	float(*func)(int, void *, int, double);
CODE:
	func   = INT2PTR(float(*)(int, void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2, d3);
OUTPUT:
	RETVAL

char *
nci_tipid( c_func, i0, p1, i2, d3 )
	SV* c_func
	int i0
	void * p1
	int i2
	double d3
PREINIT:
	char *(*func)(int, void *, int, double);
CODE:
	func   = INT2PTR(char *(*)(int, void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2, d3);
OUTPUT:
	RETVAL

int
nci_iipid( c_func, i0, p1, i2, d3 )
	SV* c_func
	int i0
	void * p1
	int i2
	double d3
PREINIT:
	int(*func)(int, void *, int, double);
CODE:
	func   = INT2PTR(int(*)(int, void *, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2, d3);
OUTPUT:
	RETVAL

void *
nci_ppdid( c_func, p0, d1, i2, d3 )
	SV* c_func
	void * p0
	double d1
	int i2
	double d3
PREINIT:
	void *(*func)(void *, double, int, double);
CODE:
	func   = INT2PTR(void *(*)(void *, double, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2, d3);
OUTPUT:
	RETVAL

void
nci_vpdid( c_func, p0, d1, i2, d3 )
	SV* c_func
	void * p0
	double d1
	int i2
	double d3
PREINIT:
	void(*func)(void *, double, int, double);
CODE:
	func   = INT2PTR(void(*)(void *, double, int, double), SvIV(c_func) );
	(*func)(p0, d1, i2, d3);

double
nci_dpdid( c_func, p0, d1, i2, d3 )
	SV* c_func
	void * p0
	double d1
	int i2
	double d3
PREINIT:
	double(*func)(void *, double, int, double);
CODE:
	func   = INT2PTR(double(*)(void *, double, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2, d3);
OUTPUT:
	RETVAL

short
nci_spdid( c_func, p0, d1, i2, d3 )
	SV* c_func
	void * p0
	double d1
	int i2
	double d3
PREINIT:
	short(*func)(void *, double, int, double);
CODE:
	func   = INT2PTR(short(*)(void *, double, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2, d3);
OUTPUT:
	RETVAL

float
nci_fpdid( c_func, p0, d1, i2, d3 )
	SV* c_func
	void * p0
	double d1
	int i2
	double d3
PREINIT:
	float(*func)(void *, double, int, double);
CODE:
	func   = INT2PTR(float(*)(void *, double, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2, d3);
OUTPUT:
	RETVAL

char *
nci_tpdid( c_func, p0, d1, i2, d3 )
	SV* c_func
	void * p0
	double d1
	int i2
	double d3
PREINIT:
	char *(*func)(void *, double, int, double);
CODE:
	func   = INT2PTR(char *(*)(void *, double, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2, d3);
OUTPUT:
	RETVAL

int
nci_ipdid( c_func, p0, d1, i2, d3 )
	SV* c_func
	void * p0
	double d1
	int i2
	double d3
PREINIT:
	int(*func)(void *, double, int, double);
CODE:
	func   = INT2PTR(int(*)(void *, double, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2, d3);
OUTPUT:
	RETVAL

void *
nci_pvdid( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvdid( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvdid( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svdid( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvdid( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvdid( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivdid( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pddid( c_func, d0, d1, i2, d3 )
	SV* c_func
	double d0
	double d1
	int i2
	double d3
PREINIT:
	void *(*func)(double, double, int, double);
CODE:
	func   = INT2PTR(void *(*)(double, double, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2, d3);
OUTPUT:
	RETVAL

void
nci_vddid( c_func, d0, d1, i2, d3 )
	SV* c_func
	double d0
	double d1
	int i2
	double d3
PREINIT:
	void(*func)(double, double, int, double);
CODE:
	func   = INT2PTR(void(*)(double, double, int, double), SvIV(c_func) );
	(*func)(d0, d1, i2, d3);

double
nci_dddid( c_func, d0, d1, i2, d3 )
	SV* c_func
	double d0
	double d1
	int i2
	double d3
PREINIT:
	double(*func)(double, double, int, double);
CODE:
	func   = INT2PTR(double(*)(double, double, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2, d3);
OUTPUT:
	RETVAL

short
nci_sddid( c_func, d0, d1, i2, d3 )
	SV* c_func
	double d0
	double d1
	int i2
	double d3
PREINIT:
	short(*func)(double, double, int, double);
CODE:
	func   = INT2PTR(short(*)(double, double, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2, d3);
OUTPUT:
	RETVAL

float
nci_fddid( c_func, d0, d1, i2, d3 )
	SV* c_func
	double d0
	double d1
	int i2
	double d3
PREINIT:
	float(*func)(double, double, int, double);
CODE:
	func   = INT2PTR(float(*)(double, double, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2, d3);
OUTPUT:
	RETVAL

char *
nci_tddid( c_func, d0, d1, i2, d3 )
	SV* c_func
	double d0
	double d1
	int i2
	double d3
PREINIT:
	char *(*func)(double, double, int, double);
CODE:
	func   = INT2PTR(char *(*)(double, double, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2, d3);
OUTPUT:
	RETVAL

int
nci_iddid( c_func, d0, d1, i2, d3 )
	SV* c_func
	double d0
	double d1
	int i2
	double d3
PREINIT:
	int(*func)(double, double, int, double);
CODE:
	func   = INT2PTR(int(*)(double, double, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2, d3);
OUTPUT:
	RETVAL

void *
nci_psdid( c_func, s0, d1, i2, d3 )
	SV* c_func
	short s0
	double d1
	int i2
	double d3
PREINIT:
	void *(*func)(short, double, int, double);
CODE:
	func   = INT2PTR(void *(*)(short, double, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2, d3);
OUTPUT:
	RETVAL

void
nci_vsdid( c_func, s0, d1, i2, d3 )
	SV* c_func
	short s0
	double d1
	int i2
	double d3
PREINIT:
	void(*func)(short, double, int, double);
CODE:
	func   = INT2PTR(void(*)(short, double, int, double), SvIV(c_func) );
	(*func)(s0, d1, i2, d3);

double
nci_dsdid( c_func, s0, d1, i2, d3 )
	SV* c_func
	short s0
	double d1
	int i2
	double d3
PREINIT:
	double(*func)(short, double, int, double);
CODE:
	func   = INT2PTR(double(*)(short, double, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2, d3);
OUTPUT:
	RETVAL

short
nci_ssdid( c_func, s0, d1, i2, d3 )
	SV* c_func
	short s0
	double d1
	int i2
	double d3
PREINIT:
	short(*func)(short, double, int, double);
CODE:
	func   = INT2PTR(short(*)(short, double, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2, d3);
OUTPUT:
	RETVAL

float
nci_fsdid( c_func, s0, d1, i2, d3 )
	SV* c_func
	short s0
	double d1
	int i2
	double d3
PREINIT:
	float(*func)(short, double, int, double);
CODE:
	func   = INT2PTR(float(*)(short, double, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2, d3);
OUTPUT:
	RETVAL

char *
nci_tsdid( c_func, s0, d1, i2, d3 )
	SV* c_func
	short s0
	double d1
	int i2
	double d3
PREINIT:
	char *(*func)(short, double, int, double);
CODE:
	func   = INT2PTR(char *(*)(short, double, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2, d3);
OUTPUT:
	RETVAL

int
nci_isdid( c_func, s0, d1, i2, d3 )
	SV* c_func
	short s0
	double d1
	int i2
	double d3
PREINIT:
	int(*func)(short, double, int, double);
CODE:
	func   = INT2PTR(int(*)(short, double, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2, d3);
OUTPUT:
	RETVAL

void *
nci_pfdid( c_func, f0, d1, i2, d3 )
	SV* c_func
	float f0
	double d1
	int i2
	double d3
PREINIT:
	void *(*func)(float, double, int, double);
CODE:
	func   = INT2PTR(void *(*)(float, double, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2, d3);
OUTPUT:
	RETVAL

void
nci_vfdid( c_func, f0, d1, i2, d3 )
	SV* c_func
	float f0
	double d1
	int i2
	double d3
PREINIT:
	void(*func)(float, double, int, double);
CODE:
	func   = INT2PTR(void(*)(float, double, int, double), SvIV(c_func) );
	(*func)(f0, d1, i2, d3);

double
nci_dfdid( c_func, f0, d1, i2, d3 )
	SV* c_func
	float f0
	double d1
	int i2
	double d3
PREINIT:
	double(*func)(float, double, int, double);
CODE:
	func   = INT2PTR(double(*)(float, double, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2, d3);
OUTPUT:
	RETVAL

short
nci_sfdid( c_func, f0, d1, i2, d3 )
	SV* c_func
	float f0
	double d1
	int i2
	double d3
PREINIT:
	short(*func)(float, double, int, double);
CODE:
	func   = INT2PTR(short(*)(float, double, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2, d3);
OUTPUT:
	RETVAL

float
nci_ffdid( c_func, f0, d1, i2, d3 )
	SV* c_func
	float f0
	double d1
	int i2
	double d3
PREINIT:
	float(*func)(float, double, int, double);
CODE:
	func   = INT2PTR(float(*)(float, double, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2, d3);
OUTPUT:
	RETVAL

char *
nci_tfdid( c_func, f0, d1, i2, d3 )
	SV* c_func
	float f0
	double d1
	int i2
	double d3
PREINIT:
	char *(*func)(float, double, int, double);
CODE:
	func   = INT2PTR(char *(*)(float, double, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2, d3);
OUTPUT:
	RETVAL

int
nci_ifdid( c_func, f0, d1, i2, d3 )
	SV* c_func
	float f0
	double d1
	int i2
	double d3
PREINIT:
	int(*func)(float, double, int, double);
CODE:
	func   = INT2PTR(int(*)(float, double, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2, d3);
OUTPUT:
	RETVAL

void *
nci_ptdid( c_func, t0, d1, i2, d3 )
	SV* c_func
	char * t0
	double d1
	int i2
	double d3
PREINIT:
	void *(*func)(char *, double, int, double);
CODE:
	func   = INT2PTR(void *(*)(char *, double, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2, d3);
OUTPUT:
	RETVAL

void
nci_vtdid( c_func, t0, d1, i2, d3 )
	SV* c_func
	char * t0
	double d1
	int i2
	double d3
PREINIT:
	void(*func)(char *, double, int, double);
CODE:
	func   = INT2PTR(void(*)(char *, double, int, double), SvIV(c_func) );
	(*func)(t0, d1, i2, d3);

double
nci_dtdid( c_func, t0, d1, i2, d3 )
	SV* c_func
	char * t0
	double d1
	int i2
	double d3
PREINIT:
	double(*func)(char *, double, int, double);
CODE:
	func   = INT2PTR(double(*)(char *, double, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2, d3);
OUTPUT:
	RETVAL

short
nci_stdid( c_func, t0, d1, i2, d3 )
	SV* c_func
	char * t0
	double d1
	int i2
	double d3
PREINIT:
	short(*func)(char *, double, int, double);
CODE:
	func   = INT2PTR(short(*)(char *, double, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2, d3);
OUTPUT:
	RETVAL

float
nci_ftdid( c_func, t0, d1, i2, d3 )
	SV* c_func
	char * t0
	double d1
	int i2
	double d3
PREINIT:
	float(*func)(char *, double, int, double);
CODE:
	func   = INT2PTR(float(*)(char *, double, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2, d3);
OUTPUT:
	RETVAL

char *
nci_ttdid( c_func, t0, d1, i2, d3 )
	SV* c_func
	char * t0
	double d1
	int i2
	double d3
PREINIT:
	char *(*func)(char *, double, int, double);
CODE:
	func   = INT2PTR(char *(*)(char *, double, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2, d3);
OUTPUT:
	RETVAL

int
nci_itdid( c_func, t0, d1, i2, d3 )
	SV* c_func
	char * t0
	double d1
	int i2
	double d3
PREINIT:
	int(*func)(char *, double, int, double);
CODE:
	func   = INT2PTR(int(*)(char *, double, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2, d3);
OUTPUT:
	RETVAL

void *
nci_pidid( c_func, i0, d1, i2, d3 )
	SV* c_func
	int i0
	double d1
	int i2
	double d3
PREINIT:
	void *(*func)(int, double, int, double);
CODE:
	func   = INT2PTR(void *(*)(int, double, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2, d3);
OUTPUT:
	RETVAL

void
nci_vidid( c_func, i0, d1, i2, d3 )
	SV* c_func
	int i0
	double d1
	int i2
	double d3
PREINIT:
	void(*func)(int, double, int, double);
CODE:
	func   = INT2PTR(void(*)(int, double, int, double), SvIV(c_func) );
	(*func)(i0, d1, i2, d3);

double
nci_didid( c_func, i0, d1, i2, d3 )
	SV* c_func
	int i0
	double d1
	int i2
	double d3
PREINIT:
	double(*func)(int, double, int, double);
CODE:
	func   = INT2PTR(double(*)(int, double, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2, d3);
OUTPUT:
	RETVAL

short
nci_sidid( c_func, i0, d1, i2, d3 )
	SV* c_func
	int i0
	double d1
	int i2
	double d3
PREINIT:
	short(*func)(int, double, int, double);
CODE:
	func   = INT2PTR(short(*)(int, double, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2, d3);
OUTPUT:
	RETVAL

float
nci_fidid( c_func, i0, d1, i2, d3 )
	SV* c_func
	int i0
	double d1
	int i2
	double d3
PREINIT:
	float(*func)(int, double, int, double);
CODE:
	func   = INT2PTR(float(*)(int, double, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2, d3);
OUTPUT:
	RETVAL

char *
nci_tidid( c_func, i0, d1, i2, d3 )
	SV* c_func
	int i0
	double d1
	int i2
	double d3
PREINIT:
	char *(*func)(int, double, int, double);
CODE:
	func   = INT2PTR(char *(*)(int, double, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2, d3);
OUTPUT:
	RETVAL

int
nci_iidid( c_func, i0, d1, i2, d3 )
	SV* c_func
	int i0
	double d1
	int i2
	double d3
PREINIT:
	int(*func)(int, double, int, double);
CODE:
	func   = INT2PTR(int(*)(int, double, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2, d3);
OUTPUT:
	RETVAL

void *
nci_ppsid( c_func, p0, s1, i2, d3 )
	SV* c_func
	void * p0
	short s1
	int i2
	double d3
PREINIT:
	void *(*func)(void *, short, int, double);
CODE:
	func   = INT2PTR(void *(*)(void *, short, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2, d3);
OUTPUT:
	RETVAL

void
nci_vpsid( c_func, p0, s1, i2, d3 )
	SV* c_func
	void * p0
	short s1
	int i2
	double d3
PREINIT:
	void(*func)(void *, short, int, double);
CODE:
	func   = INT2PTR(void(*)(void *, short, int, double), SvIV(c_func) );
	(*func)(p0, s1, i2, d3);

double
nci_dpsid( c_func, p0, s1, i2, d3 )
	SV* c_func
	void * p0
	short s1
	int i2
	double d3
PREINIT:
	double(*func)(void *, short, int, double);
CODE:
	func   = INT2PTR(double(*)(void *, short, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2, d3);
OUTPUT:
	RETVAL

short
nci_spsid( c_func, p0, s1, i2, d3 )
	SV* c_func
	void * p0
	short s1
	int i2
	double d3
PREINIT:
	short(*func)(void *, short, int, double);
CODE:
	func   = INT2PTR(short(*)(void *, short, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2, d3);
OUTPUT:
	RETVAL

float
nci_fpsid( c_func, p0, s1, i2, d3 )
	SV* c_func
	void * p0
	short s1
	int i2
	double d3
PREINIT:
	float(*func)(void *, short, int, double);
CODE:
	func   = INT2PTR(float(*)(void *, short, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2, d3);
OUTPUT:
	RETVAL

char *
nci_tpsid( c_func, p0, s1, i2, d3 )
	SV* c_func
	void * p0
	short s1
	int i2
	double d3
PREINIT:
	char *(*func)(void *, short, int, double);
CODE:
	func   = INT2PTR(char *(*)(void *, short, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2, d3);
OUTPUT:
	RETVAL

int
nci_ipsid( c_func, p0, s1, i2, d3 )
	SV* c_func
	void * p0
	short s1
	int i2
	double d3
PREINIT:
	int(*func)(void *, short, int, double);
CODE:
	func   = INT2PTR(int(*)(void *, short, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2, d3);
OUTPUT:
	RETVAL

void *
nci_pvsid( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvsid( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvsid( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svsid( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvsid( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvsid( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivsid( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdsid( c_func, d0, s1, i2, d3 )
	SV* c_func
	double d0
	short s1
	int i2
	double d3
PREINIT:
	void *(*func)(double, short, int, double);
CODE:
	func   = INT2PTR(void *(*)(double, short, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2, d3);
OUTPUT:
	RETVAL

void
nci_vdsid( c_func, d0, s1, i2, d3 )
	SV* c_func
	double d0
	short s1
	int i2
	double d3
PREINIT:
	void(*func)(double, short, int, double);
CODE:
	func   = INT2PTR(void(*)(double, short, int, double), SvIV(c_func) );
	(*func)(d0, s1, i2, d3);

double
nci_ddsid( c_func, d0, s1, i2, d3 )
	SV* c_func
	double d0
	short s1
	int i2
	double d3
PREINIT:
	double(*func)(double, short, int, double);
CODE:
	func   = INT2PTR(double(*)(double, short, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2, d3);
OUTPUT:
	RETVAL

short
nci_sdsid( c_func, d0, s1, i2, d3 )
	SV* c_func
	double d0
	short s1
	int i2
	double d3
PREINIT:
	short(*func)(double, short, int, double);
CODE:
	func   = INT2PTR(short(*)(double, short, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2, d3);
OUTPUT:
	RETVAL

float
nci_fdsid( c_func, d0, s1, i2, d3 )
	SV* c_func
	double d0
	short s1
	int i2
	double d3
PREINIT:
	float(*func)(double, short, int, double);
CODE:
	func   = INT2PTR(float(*)(double, short, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2, d3);
OUTPUT:
	RETVAL

char *
nci_tdsid( c_func, d0, s1, i2, d3 )
	SV* c_func
	double d0
	short s1
	int i2
	double d3
PREINIT:
	char *(*func)(double, short, int, double);
CODE:
	func   = INT2PTR(char *(*)(double, short, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2, d3);
OUTPUT:
	RETVAL

int
nci_idsid( c_func, d0, s1, i2, d3 )
	SV* c_func
	double d0
	short s1
	int i2
	double d3
PREINIT:
	int(*func)(double, short, int, double);
CODE:
	func   = INT2PTR(int(*)(double, short, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2, d3);
OUTPUT:
	RETVAL

void *
nci_pssid( c_func, s0, s1, i2, d3 )
	SV* c_func
	short s0
	short s1
	int i2
	double d3
PREINIT:
	void *(*func)(short, short, int, double);
CODE:
	func   = INT2PTR(void *(*)(short, short, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2, d3);
OUTPUT:
	RETVAL

void
nci_vssid( c_func, s0, s1, i2, d3 )
	SV* c_func
	short s0
	short s1
	int i2
	double d3
PREINIT:
	void(*func)(short, short, int, double);
CODE:
	func   = INT2PTR(void(*)(short, short, int, double), SvIV(c_func) );
	(*func)(s0, s1, i2, d3);

double
nci_dssid( c_func, s0, s1, i2, d3 )
	SV* c_func
	short s0
	short s1
	int i2
	double d3
PREINIT:
	double(*func)(short, short, int, double);
CODE:
	func   = INT2PTR(double(*)(short, short, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2, d3);
OUTPUT:
	RETVAL

short
nci_sssid( c_func, s0, s1, i2, d3 )
	SV* c_func
	short s0
	short s1
	int i2
	double d3
PREINIT:
	short(*func)(short, short, int, double);
CODE:
	func   = INT2PTR(short(*)(short, short, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2, d3);
OUTPUT:
	RETVAL

float
nci_fssid( c_func, s0, s1, i2, d3 )
	SV* c_func
	short s0
	short s1
	int i2
	double d3
PREINIT:
	float(*func)(short, short, int, double);
CODE:
	func   = INT2PTR(float(*)(short, short, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2, d3);
OUTPUT:
	RETVAL

char *
nci_tssid( c_func, s0, s1, i2, d3 )
	SV* c_func
	short s0
	short s1
	int i2
	double d3
PREINIT:
	char *(*func)(short, short, int, double);
CODE:
	func   = INT2PTR(char *(*)(short, short, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2, d3);
OUTPUT:
	RETVAL

int
nci_issid( c_func, s0, s1, i2, d3 )
	SV* c_func
	short s0
	short s1
	int i2
	double d3
PREINIT:
	int(*func)(short, short, int, double);
CODE:
	func   = INT2PTR(int(*)(short, short, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2, d3);
OUTPUT:
	RETVAL

void *
nci_pfsid( c_func, f0, s1, i2, d3 )
	SV* c_func
	float f0
	short s1
	int i2
	double d3
PREINIT:
	void *(*func)(float, short, int, double);
CODE:
	func   = INT2PTR(void *(*)(float, short, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2, d3);
OUTPUT:
	RETVAL

void
nci_vfsid( c_func, f0, s1, i2, d3 )
	SV* c_func
	float f0
	short s1
	int i2
	double d3
PREINIT:
	void(*func)(float, short, int, double);
CODE:
	func   = INT2PTR(void(*)(float, short, int, double), SvIV(c_func) );
	(*func)(f0, s1, i2, d3);

double
nci_dfsid( c_func, f0, s1, i2, d3 )
	SV* c_func
	float f0
	short s1
	int i2
	double d3
PREINIT:
	double(*func)(float, short, int, double);
CODE:
	func   = INT2PTR(double(*)(float, short, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2, d3);
OUTPUT:
	RETVAL

short
nci_sfsid( c_func, f0, s1, i2, d3 )
	SV* c_func
	float f0
	short s1
	int i2
	double d3
PREINIT:
	short(*func)(float, short, int, double);
CODE:
	func   = INT2PTR(short(*)(float, short, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2, d3);
OUTPUT:
	RETVAL

float
nci_ffsid( c_func, f0, s1, i2, d3 )
	SV* c_func
	float f0
	short s1
	int i2
	double d3
PREINIT:
	float(*func)(float, short, int, double);
CODE:
	func   = INT2PTR(float(*)(float, short, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2, d3);
OUTPUT:
	RETVAL

char *
nci_tfsid( c_func, f0, s1, i2, d3 )
	SV* c_func
	float f0
	short s1
	int i2
	double d3
PREINIT:
	char *(*func)(float, short, int, double);
CODE:
	func   = INT2PTR(char *(*)(float, short, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2, d3);
OUTPUT:
	RETVAL

int
nci_ifsid( c_func, f0, s1, i2, d3 )
	SV* c_func
	float f0
	short s1
	int i2
	double d3
PREINIT:
	int(*func)(float, short, int, double);
CODE:
	func   = INT2PTR(int(*)(float, short, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2, d3);
OUTPUT:
	RETVAL

void *
nci_ptsid( c_func, t0, s1, i2, d3 )
	SV* c_func
	char * t0
	short s1
	int i2
	double d3
PREINIT:
	void *(*func)(char *, short, int, double);
CODE:
	func   = INT2PTR(void *(*)(char *, short, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2, d3);
OUTPUT:
	RETVAL

void
nci_vtsid( c_func, t0, s1, i2, d3 )
	SV* c_func
	char * t0
	short s1
	int i2
	double d3
PREINIT:
	void(*func)(char *, short, int, double);
CODE:
	func   = INT2PTR(void(*)(char *, short, int, double), SvIV(c_func) );
	(*func)(t0, s1, i2, d3);

double
nci_dtsid( c_func, t0, s1, i2, d3 )
	SV* c_func
	char * t0
	short s1
	int i2
	double d3
PREINIT:
	double(*func)(char *, short, int, double);
CODE:
	func   = INT2PTR(double(*)(char *, short, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2, d3);
OUTPUT:
	RETVAL

short
nci_stsid( c_func, t0, s1, i2, d3 )
	SV* c_func
	char * t0
	short s1
	int i2
	double d3
PREINIT:
	short(*func)(char *, short, int, double);
CODE:
	func   = INT2PTR(short(*)(char *, short, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2, d3);
OUTPUT:
	RETVAL

float
nci_ftsid( c_func, t0, s1, i2, d3 )
	SV* c_func
	char * t0
	short s1
	int i2
	double d3
PREINIT:
	float(*func)(char *, short, int, double);
CODE:
	func   = INT2PTR(float(*)(char *, short, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2, d3);
OUTPUT:
	RETVAL

char *
nci_ttsid( c_func, t0, s1, i2, d3 )
	SV* c_func
	char * t0
	short s1
	int i2
	double d3
PREINIT:
	char *(*func)(char *, short, int, double);
CODE:
	func   = INT2PTR(char *(*)(char *, short, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2, d3);
OUTPUT:
	RETVAL

int
nci_itsid( c_func, t0, s1, i2, d3 )
	SV* c_func
	char * t0
	short s1
	int i2
	double d3
PREINIT:
	int(*func)(char *, short, int, double);
CODE:
	func   = INT2PTR(int(*)(char *, short, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2, d3);
OUTPUT:
	RETVAL

void *
nci_pisid( c_func, i0, s1, i2, d3 )
	SV* c_func
	int i0
	short s1
	int i2
	double d3
PREINIT:
	void *(*func)(int, short, int, double);
CODE:
	func   = INT2PTR(void *(*)(int, short, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2, d3);
OUTPUT:
	RETVAL

void
nci_visid( c_func, i0, s1, i2, d3 )
	SV* c_func
	int i0
	short s1
	int i2
	double d3
PREINIT:
	void(*func)(int, short, int, double);
CODE:
	func   = INT2PTR(void(*)(int, short, int, double), SvIV(c_func) );
	(*func)(i0, s1, i2, d3);

double
nci_disid( c_func, i0, s1, i2, d3 )
	SV* c_func
	int i0
	short s1
	int i2
	double d3
PREINIT:
	double(*func)(int, short, int, double);
CODE:
	func   = INT2PTR(double(*)(int, short, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2, d3);
OUTPUT:
	RETVAL

short
nci_sisid( c_func, i0, s1, i2, d3 )
	SV* c_func
	int i0
	short s1
	int i2
	double d3
PREINIT:
	short(*func)(int, short, int, double);
CODE:
	func   = INT2PTR(short(*)(int, short, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2, d3);
OUTPUT:
	RETVAL

float
nci_fisid( c_func, i0, s1, i2, d3 )
	SV* c_func
	int i0
	short s1
	int i2
	double d3
PREINIT:
	float(*func)(int, short, int, double);
CODE:
	func   = INT2PTR(float(*)(int, short, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2, d3);
OUTPUT:
	RETVAL

char *
nci_tisid( c_func, i0, s1, i2, d3 )
	SV* c_func
	int i0
	short s1
	int i2
	double d3
PREINIT:
	char *(*func)(int, short, int, double);
CODE:
	func   = INT2PTR(char *(*)(int, short, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2, d3);
OUTPUT:
	RETVAL

int
nci_iisid( c_func, i0, s1, i2, d3 )
	SV* c_func
	int i0
	short s1
	int i2
	double d3
PREINIT:
	int(*func)(int, short, int, double);
CODE:
	func   = INT2PTR(int(*)(int, short, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2, d3);
OUTPUT:
	RETVAL

void *
nci_ppfid( c_func, p0, f1, i2, d3 )
	SV* c_func
	void * p0
	float f1
	int i2
	double d3
PREINIT:
	void *(*func)(void *, float, int, double);
CODE:
	func   = INT2PTR(void *(*)(void *, float, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2, d3);
OUTPUT:
	RETVAL

void
nci_vpfid( c_func, p0, f1, i2, d3 )
	SV* c_func
	void * p0
	float f1
	int i2
	double d3
PREINIT:
	void(*func)(void *, float, int, double);
CODE:
	func   = INT2PTR(void(*)(void *, float, int, double), SvIV(c_func) );
	(*func)(p0, f1, i2, d3);

double
nci_dpfid( c_func, p0, f1, i2, d3 )
	SV* c_func
	void * p0
	float f1
	int i2
	double d3
PREINIT:
	double(*func)(void *, float, int, double);
CODE:
	func   = INT2PTR(double(*)(void *, float, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2, d3);
OUTPUT:
	RETVAL

short
nci_spfid( c_func, p0, f1, i2, d3 )
	SV* c_func
	void * p0
	float f1
	int i2
	double d3
PREINIT:
	short(*func)(void *, float, int, double);
CODE:
	func   = INT2PTR(short(*)(void *, float, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2, d3);
OUTPUT:
	RETVAL

float
nci_fpfid( c_func, p0, f1, i2, d3 )
	SV* c_func
	void * p0
	float f1
	int i2
	double d3
PREINIT:
	float(*func)(void *, float, int, double);
CODE:
	func   = INT2PTR(float(*)(void *, float, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2, d3);
OUTPUT:
	RETVAL

char *
nci_tpfid( c_func, p0, f1, i2, d3 )
	SV* c_func
	void * p0
	float f1
	int i2
	double d3
PREINIT:
	char *(*func)(void *, float, int, double);
CODE:
	func   = INT2PTR(char *(*)(void *, float, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2, d3);
OUTPUT:
	RETVAL

int
nci_ipfid( c_func, p0, f1, i2, d3 )
	SV* c_func
	void * p0
	float f1
	int i2
	double d3
PREINIT:
	int(*func)(void *, float, int, double);
CODE:
	func   = INT2PTR(int(*)(void *, float, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2, d3);
OUTPUT:
	RETVAL

void *
nci_pvfid( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvfid( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvfid( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svfid( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvfid( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvfid( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivfid( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdfid( c_func, d0, f1, i2, d3 )
	SV* c_func
	double d0
	float f1
	int i2
	double d3
PREINIT:
	void *(*func)(double, float, int, double);
CODE:
	func   = INT2PTR(void *(*)(double, float, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2, d3);
OUTPUT:
	RETVAL

void
nci_vdfid( c_func, d0, f1, i2, d3 )
	SV* c_func
	double d0
	float f1
	int i2
	double d3
PREINIT:
	void(*func)(double, float, int, double);
CODE:
	func   = INT2PTR(void(*)(double, float, int, double), SvIV(c_func) );
	(*func)(d0, f1, i2, d3);

double
nci_ddfid( c_func, d0, f1, i2, d3 )
	SV* c_func
	double d0
	float f1
	int i2
	double d3
PREINIT:
	double(*func)(double, float, int, double);
CODE:
	func   = INT2PTR(double(*)(double, float, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2, d3);
OUTPUT:
	RETVAL

short
nci_sdfid( c_func, d0, f1, i2, d3 )
	SV* c_func
	double d0
	float f1
	int i2
	double d3
PREINIT:
	short(*func)(double, float, int, double);
CODE:
	func   = INT2PTR(short(*)(double, float, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2, d3);
OUTPUT:
	RETVAL

float
nci_fdfid( c_func, d0, f1, i2, d3 )
	SV* c_func
	double d0
	float f1
	int i2
	double d3
PREINIT:
	float(*func)(double, float, int, double);
CODE:
	func   = INT2PTR(float(*)(double, float, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2, d3);
OUTPUT:
	RETVAL

char *
nci_tdfid( c_func, d0, f1, i2, d3 )
	SV* c_func
	double d0
	float f1
	int i2
	double d3
PREINIT:
	char *(*func)(double, float, int, double);
CODE:
	func   = INT2PTR(char *(*)(double, float, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2, d3);
OUTPUT:
	RETVAL

int
nci_idfid( c_func, d0, f1, i2, d3 )
	SV* c_func
	double d0
	float f1
	int i2
	double d3
PREINIT:
	int(*func)(double, float, int, double);
CODE:
	func   = INT2PTR(int(*)(double, float, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2, d3);
OUTPUT:
	RETVAL

void *
nci_psfid( c_func, s0, f1, i2, d3 )
	SV* c_func
	short s0
	float f1
	int i2
	double d3
PREINIT:
	void *(*func)(short, float, int, double);
CODE:
	func   = INT2PTR(void *(*)(short, float, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2, d3);
OUTPUT:
	RETVAL

void
nci_vsfid( c_func, s0, f1, i2, d3 )
	SV* c_func
	short s0
	float f1
	int i2
	double d3
PREINIT:
	void(*func)(short, float, int, double);
CODE:
	func   = INT2PTR(void(*)(short, float, int, double), SvIV(c_func) );
	(*func)(s0, f1, i2, d3);

double
nci_dsfid( c_func, s0, f1, i2, d3 )
	SV* c_func
	short s0
	float f1
	int i2
	double d3
PREINIT:
	double(*func)(short, float, int, double);
CODE:
	func   = INT2PTR(double(*)(short, float, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2, d3);
OUTPUT:
	RETVAL

short
nci_ssfid( c_func, s0, f1, i2, d3 )
	SV* c_func
	short s0
	float f1
	int i2
	double d3
PREINIT:
	short(*func)(short, float, int, double);
CODE:
	func   = INT2PTR(short(*)(short, float, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2, d3);
OUTPUT:
	RETVAL

float
nci_fsfid( c_func, s0, f1, i2, d3 )
	SV* c_func
	short s0
	float f1
	int i2
	double d3
PREINIT:
	float(*func)(short, float, int, double);
CODE:
	func   = INT2PTR(float(*)(short, float, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2, d3);
OUTPUT:
	RETVAL

char *
nci_tsfid( c_func, s0, f1, i2, d3 )
	SV* c_func
	short s0
	float f1
	int i2
	double d3
PREINIT:
	char *(*func)(short, float, int, double);
CODE:
	func   = INT2PTR(char *(*)(short, float, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2, d3);
OUTPUT:
	RETVAL

int
nci_isfid( c_func, s0, f1, i2, d3 )
	SV* c_func
	short s0
	float f1
	int i2
	double d3
PREINIT:
	int(*func)(short, float, int, double);
CODE:
	func   = INT2PTR(int(*)(short, float, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2, d3);
OUTPUT:
	RETVAL

void *
nci_pffid( c_func, f0, f1, i2, d3 )
	SV* c_func
	float f0
	float f1
	int i2
	double d3
PREINIT:
	void *(*func)(float, float, int, double);
CODE:
	func   = INT2PTR(void *(*)(float, float, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2, d3);
OUTPUT:
	RETVAL

void
nci_vffid( c_func, f0, f1, i2, d3 )
	SV* c_func
	float f0
	float f1
	int i2
	double d3
PREINIT:
	void(*func)(float, float, int, double);
CODE:
	func   = INT2PTR(void(*)(float, float, int, double), SvIV(c_func) );
	(*func)(f0, f1, i2, d3);

double
nci_dffid( c_func, f0, f1, i2, d3 )
	SV* c_func
	float f0
	float f1
	int i2
	double d3
PREINIT:
	double(*func)(float, float, int, double);
CODE:
	func   = INT2PTR(double(*)(float, float, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2, d3);
OUTPUT:
	RETVAL

short
nci_sffid( c_func, f0, f1, i2, d3 )
	SV* c_func
	float f0
	float f1
	int i2
	double d3
PREINIT:
	short(*func)(float, float, int, double);
CODE:
	func   = INT2PTR(short(*)(float, float, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2, d3);
OUTPUT:
	RETVAL

float
nci_fffid( c_func, f0, f1, i2, d3 )
	SV* c_func
	float f0
	float f1
	int i2
	double d3
PREINIT:
	float(*func)(float, float, int, double);
CODE:
	func   = INT2PTR(float(*)(float, float, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2, d3);
OUTPUT:
	RETVAL

char *
nci_tffid( c_func, f0, f1, i2, d3 )
	SV* c_func
	float f0
	float f1
	int i2
	double d3
PREINIT:
	char *(*func)(float, float, int, double);
CODE:
	func   = INT2PTR(char *(*)(float, float, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2, d3);
OUTPUT:
	RETVAL

int
nci_iffid( c_func, f0, f1, i2, d3 )
	SV* c_func
	float f0
	float f1
	int i2
	double d3
PREINIT:
	int(*func)(float, float, int, double);
CODE:
	func   = INT2PTR(int(*)(float, float, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2, d3);
OUTPUT:
	RETVAL

void *
nci_ptfid( c_func, t0, f1, i2, d3 )
	SV* c_func
	char * t0
	float f1
	int i2
	double d3
PREINIT:
	void *(*func)(char *, float, int, double);
CODE:
	func   = INT2PTR(void *(*)(char *, float, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2, d3);
OUTPUT:
	RETVAL

void
nci_vtfid( c_func, t0, f1, i2, d3 )
	SV* c_func
	char * t0
	float f1
	int i2
	double d3
PREINIT:
	void(*func)(char *, float, int, double);
CODE:
	func   = INT2PTR(void(*)(char *, float, int, double), SvIV(c_func) );
	(*func)(t0, f1, i2, d3);

double
nci_dtfid( c_func, t0, f1, i2, d3 )
	SV* c_func
	char * t0
	float f1
	int i2
	double d3
PREINIT:
	double(*func)(char *, float, int, double);
CODE:
	func   = INT2PTR(double(*)(char *, float, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2, d3);
OUTPUT:
	RETVAL

short
nci_stfid( c_func, t0, f1, i2, d3 )
	SV* c_func
	char * t0
	float f1
	int i2
	double d3
PREINIT:
	short(*func)(char *, float, int, double);
CODE:
	func   = INT2PTR(short(*)(char *, float, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2, d3);
OUTPUT:
	RETVAL

float
nci_ftfid( c_func, t0, f1, i2, d3 )
	SV* c_func
	char * t0
	float f1
	int i2
	double d3
PREINIT:
	float(*func)(char *, float, int, double);
CODE:
	func   = INT2PTR(float(*)(char *, float, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2, d3);
OUTPUT:
	RETVAL

char *
nci_ttfid( c_func, t0, f1, i2, d3 )
	SV* c_func
	char * t0
	float f1
	int i2
	double d3
PREINIT:
	char *(*func)(char *, float, int, double);
CODE:
	func   = INT2PTR(char *(*)(char *, float, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2, d3);
OUTPUT:
	RETVAL

int
nci_itfid( c_func, t0, f1, i2, d3 )
	SV* c_func
	char * t0
	float f1
	int i2
	double d3
PREINIT:
	int(*func)(char *, float, int, double);
CODE:
	func   = INT2PTR(int(*)(char *, float, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2, d3);
OUTPUT:
	RETVAL

void *
nci_pifid( c_func, i0, f1, i2, d3 )
	SV* c_func
	int i0
	float f1
	int i2
	double d3
PREINIT:
	void *(*func)(int, float, int, double);
CODE:
	func   = INT2PTR(void *(*)(int, float, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2, d3);
OUTPUT:
	RETVAL

void
nci_vifid( c_func, i0, f1, i2, d3 )
	SV* c_func
	int i0
	float f1
	int i2
	double d3
PREINIT:
	void(*func)(int, float, int, double);
CODE:
	func   = INT2PTR(void(*)(int, float, int, double), SvIV(c_func) );
	(*func)(i0, f1, i2, d3);

double
nci_difid( c_func, i0, f1, i2, d3 )
	SV* c_func
	int i0
	float f1
	int i2
	double d3
PREINIT:
	double(*func)(int, float, int, double);
CODE:
	func   = INT2PTR(double(*)(int, float, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2, d3);
OUTPUT:
	RETVAL

short
nci_sifid( c_func, i0, f1, i2, d3 )
	SV* c_func
	int i0
	float f1
	int i2
	double d3
PREINIT:
	short(*func)(int, float, int, double);
CODE:
	func   = INT2PTR(short(*)(int, float, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2, d3);
OUTPUT:
	RETVAL

float
nci_fifid( c_func, i0, f1, i2, d3 )
	SV* c_func
	int i0
	float f1
	int i2
	double d3
PREINIT:
	float(*func)(int, float, int, double);
CODE:
	func   = INT2PTR(float(*)(int, float, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2, d3);
OUTPUT:
	RETVAL

char *
nci_tifid( c_func, i0, f1, i2, d3 )
	SV* c_func
	int i0
	float f1
	int i2
	double d3
PREINIT:
	char *(*func)(int, float, int, double);
CODE:
	func   = INT2PTR(char *(*)(int, float, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2, d3);
OUTPUT:
	RETVAL

int
nci_iifid( c_func, i0, f1, i2, d3 )
	SV* c_func
	int i0
	float f1
	int i2
	double d3
PREINIT:
	int(*func)(int, float, int, double);
CODE:
	func   = INT2PTR(int(*)(int, float, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2, d3);
OUTPUT:
	RETVAL

void *
nci_pptid( c_func, p0, t1, i2, d3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	double d3
PREINIT:
	void *(*func)(void *, char *, int, double);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2, d3);
OUTPUT:
	RETVAL

void
nci_vptid( c_func, p0, t1, i2, d3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	double d3
PREINIT:
	void(*func)(void *, char *, int, double);
CODE:
	func   = INT2PTR(void(*)(void *, char *, int, double), SvIV(c_func) );
	(*func)(p0, t1, i2, d3);

double
nci_dptid( c_func, p0, t1, i2, d3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	double d3
PREINIT:
	double(*func)(void *, char *, int, double);
CODE:
	func   = INT2PTR(double(*)(void *, char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2, d3);
OUTPUT:
	RETVAL

short
nci_sptid( c_func, p0, t1, i2, d3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	double d3
PREINIT:
	short(*func)(void *, char *, int, double);
CODE:
	func   = INT2PTR(short(*)(void *, char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2, d3);
OUTPUT:
	RETVAL

float
nci_fptid( c_func, p0, t1, i2, d3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	double d3
PREINIT:
	float(*func)(void *, char *, int, double);
CODE:
	func   = INT2PTR(float(*)(void *, char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2, d3);
OUTPUT:
	RETVAL

char *
nci_tptid( c_func, p0, t1, i2, d3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	double d3
PREINIT:
	char *(*func)(void *, char *, int, double);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2, d3);
OUTPUT:
	RETVAL

int
nci_iptid( c_func, p0, t1, i2, d3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	double d3
PREINIT:
	int(*func)(void *, char *, int, double);
CODE:
	func   = INT2PTR(int(*)(void *, char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2, d3);
OUTPUT:
	RETVAL

void *
nci_pvtid( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvtid( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvtid( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svtid( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvtid( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvtid( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivtid( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdtid( c_func, d0, t1, i2, d3 )
	SV* c_func
	double d0
	char * t1
	int i2
	double d3
PREINIT:
	void *(*func)(double, char *, int, double);
CODE:
	func   = INT2PTR(void *(*)(double, char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2, d3);
OUTPUT:
	RETVAL

void
nci_vdtid( c_func, d0, t1, i2, d3 )
	SV* c_func
	double d0
	char * t1
	int i2
	double d3
PREINIT:
	void(*func)(double, char *, int, double);
CODE:
	func   = INT2PTR(void(*)(double, char *, int, double), SvIV(c_func) );
	(*func)(d0, t1, i2, d3);

double
nci_ddtid( c_func, d0, t1, i2, d3 )
	SV* c_func
	double d0
	char * t1
	int i2
	double d3
PREINIT:
	double(*func)(double, char *, int, double);
CODE:
	func   = INT2PTR(double(*)(double, char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2, d3);
OUTPUT:
	RETVAL

short
nci_sdtid( c_func, d0, t1, i2, d3 )
	SV* c_func
	double d0
	char * t1
	int i2
	double d3
PREINIT:
	short(*func)(double, char *, int, double);
CODE:
	func   = INT2PTR(short(*)(double, char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2, d3);
OUTPUT:
	RETVAL

float
nci_fdtid( c_func, d0, t1, i2, d3 )
	SV* c_func
	double d0
	char * t1
	int i2
	double d3
PREINIT:
	float(*func)(double, char *, int, double);
CODE:
	func   = INT2PTR(float(*)(double, char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2, d3);
OUTPUT:
	RETVAL

char *
nci_tdtid( c_func, d0, t1, i2, d3 )
	SV* c_func
	double d0
	char * t1
	int i2
	double d3
PREINIT:
	char *(*func)(double, char *, int, double);
CODE:
	func   = INT2PTR(char *(*)(double, char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2, d3);
OUTPUT:
	RETVAL

int
nci_idtid( c_func, d0, t1, i2, d3 )
	SV* c_func
	double d0
	char * t1
	int i2
	double d3
PREINIT:
	int(*func)(double, char *, int, double);
CODE:
	func   = INT2PTR(int(*)(double, char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2, d3);
OUTPUT:
	RETVAL

void *
nci_pstid( c_func, s0, t1, i2, d3 )
	SV* c_func
	short s0
	char * t1
	int i2
	double d3
PREINIT:
	void *(*func)(short, char *, int, double);
CODE:
	func   = INT2PTR(void *(*)(short, char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2, d3);
OUTPUT:
	RETVAL

void
nci_vstid( c_func, s0, t1, i2, d3 )
	SV* c_func
	short s0
	char * t1
	int i2
	double d3
PREINIT:
	void(*func)(short, char *, int, double);
CODE:
	func   = INT2PTR(void(*)(short, char *, int, double), SvIV(c_func) );
	(*func)(s0, t1, i2, d3);

double
nci_dstid( c_func, s0, t1, i2, d3 )
	SV* c_func
	short s0
	char * t1
	int i2
	double d3
PREINIT:
	double(*func)(short, char *, int, double);
CODE:
	func   = INT2PTR(double(*)(short, char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2, d3);
OUTPUT:
	RETVAL

short
nci_sstid( c_func, s0, t1, i2, d3 )
	SV* c_func
	short s0
	char * t1
	int i2
	double d3
PREINIT:
	short(*func)(short, char *, int, double);
CODE:
	func   = INT2PTR(short(*)(short, char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2, d3);
OUTPUT:
	RETVAL

float
nci_fstid( c_func, s0, t1, i2, d3 )
	SV* c_func
	short s0
	char * t1
	int i2
	double d3
PREINIT:
	float(*func)(short, char *, int, double);
CODE:
	func   = INT2PTR(float(*)(short, char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2, d3);
OUTPUT:
	RETVAL

char *
nci_tstid( c_func, s0, t1, i2, d3 )
	SV* c_func
	short s0
	char * t1
	int i2
	double d3
PREINIT:
	char *(*func)(short, char *, int, double);
CODE:
	func   = INT2PTR(char *(*)(short, char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2, d3);
OUTPUT:
	RETVAL

int
nci_istid( c_func, s0, t1, i2, d3 )
	SV* c_func
	short s0
	char * t1
	int i2
	double d3
PREINIT:
	int(*func)(short, char *, int, double);
CODE:
	func   = INT2PTR(int(*)(short, char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2, d3);
OUTPUT:
	RETVAL

void *
nci_pftid( c_func, f0, t1, i2, d3 )
	SV* c_func
	float f0
	char * t1
	int i2
	double d3
PREINIT:
	void *(*func)(float, char *, int, double);
CODE:
	func   = INT2PTR(void *(*)(float, char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2, d3);
OUTPUT:
	RETVAL

void
nci_vftid( c_func, f0, t1, i2, d3 )
	SV* c_func
	float f0
	char * t1
	int i2
	double d3
PREINIT:
	void(*func)(float, char *, int, double);
CODE:
	func   = INT2PTR(void(*)(float, char *, int, double), SvIV(c_func) );
	(*func)(f0, t1, i2, d3);

double
nci_dftid( c_func, f0, t1, i2, d3 )
	SV* c_func
	float f0
	char * t1
	int i2
	double d3
PREINIT:
	double(*func)(float, char *, int, double);
CODE:
	func   = INT2PTR(double(*)(float, char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2, d3);
OUTPUT:
	RETVAL

short
nci_sftid( c_func, f0, t1, i2, d3 )
	SV* c_func
	float f0
	char * t1
	int i2
	double d3
PREINIT:
	short(*func)(float, char *, int, double);
CODE:
	func   = INT2PTR(short(*)(float, char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2, d3);
OUTPUT:
	RETVAL

float
nci_fftid( c_func, f0, t1, i2, d3 )
	SV* c_func
	float f0
	char * t1
	int i2
	double d3
PREINIT:
	float(*func)(float, char *, int, double);
CODE:
	func   = INT2PTR(float(*)(float, char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2, d3);
OUTPUT:
	RETVAL

char *
nci_tftid( c_func, f0, t1, i2, d3 )
	SV* c_func
	float f0
	char * t1
	int i2
	double d3
PREINIT:
	char *(*func)(float, char *, int, double);
CODE:
	func   = INT2PTR(char *(*)(float, char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2, d3);
OUTPUT:
	RETVAL

int
nci_iftid( c_func, f0, t1, i2, d3 )
	SV* c_func
	float f0
	char * t1
	int i2
	double d3
PREINIT:
	int(*func)(float, char *, int, double);
CODE:
	func   = INT2PTR(int(*)(float, char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2, d3);
OUTPUT:
	RETVAL

void *
nci_pttid( c_func, t0, t1, i2, d3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	double d3
PREINIT:
	void *(*func)(char *, char *, int, double);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2, d3);
OUTPUT:
	RETVAL

void
nci_vttid( c_func, t0, t1, i2, d3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	double d3
PREINIT:
	void(*func)(char *, char *, int, double);
CODE:
	func   = INT2PTR(void(*)(char *, char *, int, double), SvIV(c_func) );
	(*func)(t0, t1, i2, d3);

double
nci_dttid( c_func, t0, t1, i2, d3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	double d3
PREINIT:
	double(*func)(char *, char *, int, double);
CODE:
	func   = INT2PTR(double(*)(char *, char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2, d3);
OUTPUT:
	RETVAL

short
nci_sttid( c_func, t0, t1, i2, d3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	double d3
PREINIT:
	short(*func)(char *, char *, int, double);
CODE:
	func   = INT2PTR(short(*)(char *, char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2, d3);
OUTPUT:
	RETVAL

float
nci_fttid( c_func, t0, t1, i2, d3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	double d3
PREINIT:
	float(*func)(char *, char *, int, double);
CODE:
	func   = INT2PTR(float(*)(char *, char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2, d3);
OUTPUT:
	RETVAL

char *
nci_tttid( c_func, t0, t1, i2, d3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	double d3
PREINIT:
	char *(*func)(char *, char *, int, double);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2, d3);
OUTPUT:
	RETVAL

int
nci_ittid( c_func, t0, t1, i2, d3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	double d3
PREINIT:
	int(*func)(char *, char *, int, double);
CODE:
	func   = INT2PTR(int(*)(char *, char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2, d3);
OUTPUT:
	RETVAL

void *
nci_pitid( c_func, i0, t1, i2, d3 )
	SV* c_func
	int i0
	char * t1
	int i2
	double d3
PREINIT:
	void *(*func)(int, char *, int, double);
CODE:
	func   = INT2PTR(void *(*)(int, char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2, d3);
OUTPUT:
	RETVAL

void
nci_vitid( c_func, i0, t1, i2, d3 )
	SV* c_func
	int i0
	char * t1
	int i2
	double d3
PREINIT:
	void(*func)(int, char *, int, double);
CODE:
	func   = INT2PTR(void(*)(int, char *, int, double), SvIV(c_func) );
	(*func)(i0, t1, i2, d3);

double
nci_ditid( c_func, i0, t1, i2, d3 )
	SV* c_func
	int i0
	char * t1
	int i2
	double d3
PREINIT:
	double(*func)(int, char *, int, double);
CODE:
	func   = INT2PTR(double(*)(int, char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2, d3);
OUTPUT:
	RETVAL

short
nci_sitid( c_func, i0, t1, i2, d3 )
	SV* c_func
	int i0
	char * t1
	int i2
	double d3
PREINIT:
	short(*func)(int, char *, int, double);
CODE:
	func   = INT2PTR(short(*)(int, char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2, d3);
OUTPUT:
	RETVAL

float
nci_fitid( c_func, i0, t1, i2, d3 )
	SV* c_func
	int i0
	char * t1
	int i2
	double d3
PREINIT:
	float(*func)(int, char *, int, double);
CODE:
	func   = INT2PTR(float(*)(int, char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2, d3);
OUTPUT:
	RETVAL

char *
nci_titid( c_func, i0, t1, i2, d3 )
	SV* c_func
	int i0
	char * t1
	int i2
	double d3
PREINIT:
	char *(*func)(int, char *, int, double);
CODE:
	func   = INT2PTR(char *(*)(int, char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2, d3);
OUTPUT:
	RETVAL

int
nci_iitid( c_func, i0, t1, i2, d3 )
	SV* c_func
	int i0
	char * t1
	int i2
	double d3
PREINIT:
	int(*func)(int, char *, int, double);
CODE:
	func   = INT2PTR(int(*)(int, char *, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2, d3);
OUTPUT:
	RETVAL

void *
nci_ppiid( c_func, p0, i1, i2, d3 )
	SV* c_func
	void * p0
	int i1
	int i2
	double d3
PREINIT:
	void *(*func)(void *, int, int, double);
CODE:
	func   = INT2PTR(void *(*)(void *, int, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2, d3);
OUTPUT:
	RETVAL

void
nci_vpiid( c_func, p0, i1, i2, d3 )
	SV* c_func
	void * p0
	int i1
	int i2
	double d3
PREINIT:
	void(*func)(void *, int, int, double);
CODE:
	func   = INT2PTR(void(*)(void *, int, int, double), SvIV(c_func) );
	(*func)(p0, i1, i2, d3);

double
nci_dpiid( c_func, p0, i1, i2, d3 )
	SV* c_func
	void * p0
	int i1
	int i2
	double d3
PREINIT:
	double(*func)(void *, int, int, double);
CODE:
	func   = INT2PTR(double(*)(void *, int, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2, d3);
OUTPUT:
	RETVAL

short
nci_spiid( c_func, p0, i1, i2, d3 )
	SV* c_func
	void * p0
	int i1
	int i2
	double d3
PREINIT:
	short(*func)(void *, int, int, double);
CODE:
	func   = INT2PTR(short(*)(void *, int, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2, d3);
OUTPUT:
	RETVAL

float
nci_fpiid( c_func, p0, i1, i2, d3 )
	SV* c_func
	void * p0
	int i1
	int i2
	double d3
PREINIT:
	float(*func)(void *, int, int, double);
CODE:
	func   = INT2PTR(float(*)(void *, int, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2, d3);
OUTPUT:
	RETVAL

char *
nci_tpiid( c_func, p0, i1, i2, d3 )
	SV* c_func
	void * p0
	int i1
	int i2
	double d3
PREINIT:
	char *(*func)(void *, int, int, double);
CODE:
	func   = INT2PTR(char *(*)(void *, int, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2, d3);
OUTPUT:
	RETVAL

int
nci_ipiid( c_func, p0, i1, i2, d3 )
	SV* c_func
	void * p0
	int i1
	int i2
	double d3
PREINIT:
	int(*func)(void *, int, int, double);
CODE:
	func   = INT2PTR(int(*)(void *, int, int, double), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2, d3);
OUTPUT:
	RETVAL

void *
nci_pviid( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vviid( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dviid( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_sviid( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fviid( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tviid( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_iviid( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdiid( c_func, d0, i1, i2, d3 )
	SV* c_func
	double d0
	int i1
	int i2
	double d3
PREINIT:
	void *(*func)(double, int, int, double);
CODE:
	func   = INT2PTR(void *(*)(double, int, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2, d3);
OUTPUT:
	RETVAL

void
nci_vdiid( c_func, d0, i1, i2, d3 )
	SV* c_func
	double d0
	int i1
	int i2
	double d3
PREINIT:
	void(*func)(double, int, int, double);
CODE:
	func   = INT2PTR(void(*)(double, int, int, double), SvIV(c_func) );
	(*func)(d0, i1, i2, d3);

double
nci_ddiid( c_func, d0, i1, i2, d3 )
	SV* c_func
	double d0
	int i1
	int i2
	double d3
PREINIT:
	double(*func)(double, int, int, double);
CODE:
	func   = INT2PTR(double(*)(double, int, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2, d3);
OUTPUT:
	RETVAL

short
nci_sdiid( c_func, d0, i1, i2, d3 )
	SV* c_func
	double d0
	int i1
	int i2
	double d3
PREINIT:
	short(*func)(double, int, int, double);
CODE:
	func   = INT2PTR(short(*)(double, int, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2, d3);
OUTPUT:
	RETVAL

float
nci_fdiid( c_func, d0, i1, i2, d3 )
	SV* c_func
	double d0
	int i1
	int i2
	double d3
PREINIT:
	float(*func)(double, int, int, double);
CODE:
	func   = INT2PTR(float(*)(double, int, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2, d3);
OUTPUT:
	RETVAL

char *
nci_tdiid( c_func, d0, i1, i2, d3 )
	SV* c_func
	double d0
	int i1
	int i2
	double d3
PREINIT:
	char *(*func)(double, int, int, double);
CODE:
	func   = INT2PTR(char *(*)(double, int, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2, d3);
OUTPUT:
	RETVAL

int
nci_idiid( c_func, d0, i1, i2, d3 )
	SV* c_func
	double d0
	int i1
	int i2
	double d3
PREINIT:
	int(*func)(double, int, int, double);
CODE:
	func   = INT2PTR(int(*)(double, int, int, double), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2, d3);
OUTPUT:
	RETVAL

void *
nci_psiid( c_func, s0, i1, i2, d3 )
	SV* c_func
	short s0
	int i1
	int i2
	double d3
PREINIT:
	void *(*func)(short, int, int, double);
CODE:
	func   = INT2PTR(void *(*)(short, int, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2, d3);
OUTPUT:
	RETVAL

void
nci_vsiid( c_func, s0, i1, i2, d3 )
	SV* c_func
	short s0
	int i1
	int i2
	double d3
PREINIT:
	void(*func)(short, int, int, double);
CODE:
	func   = INT2PTR(void(*)(short, int, int, double), SvIV(c_func) );
	(*func)(s0, i1, i2, d3);

double
nci_dsiid( c_func, s0, i1, i2, d3 )
	SV* c_func
	short s0
	int i1
	int i2
	double d3
PREINIT:
	double(*func)(short, int, int, double);
CODE:
	func   = INT2PTR(double(*)(short, int, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2, d3);
OUTPUT:
	RETVAL

short
nci_ssiid( c_func, s0, i1, i2, d3 )
	SV* c_func
	short s0
	int i1
	int i2
	double d3
PREINIT:
	short(*func)(short, int, int, double);
CODE:
	func   = INT2PTR(short(*)(short, int, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2, d3);
OUTPUT:
	RETVAL

float
nci_fsiid( c_func, s0, i1, i2, d3 )
	SV* c_func
	short s0
	int i1
	int i2
	double d3
PREINIT:
	float(*func)(short, int, int, double);
CODE:
	func   = INT2PTR(float(*)(short, int, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2, d3);
OUTPUT:
	RETVAL

char *
nci_tsiid( c_func, s0, i1, i2, d3 )
	SV* c_func
	short s0
	int i1
	int i2
	double d3
PREINIT:
	char *(*func)(short, int, int, double);
CODE:
	func   = INT2PTR(char *(*)(short, int, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2, d3);
OUTPUT:
	RETVAL

int
nci_isiid( c_func, s0, i1, i2, d3 )
	SV* c_func
	short s0
	int i1
	int i2
	double d3
PREINIT:
	int(*func)(short, int, int, double);
CODE:
	func   = INT2PTR(int(*)(short, int, int, double), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2, d3);
OUTPUT:
	RETVAL

void *
nci_pfiid( c_func, f0, i1, i2, d3 )
	SV* c_func
	float f0
	int i1
	int i2
	double d3
PREINIT:
	void *(*func)(float, int, int, double);
CODE:
	func   = INT2PTR(void *(*)(float, int, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2, d3);
OUTPUT:
	RETVAL

void
nci_vfiid( c_func, f0, i1, i2, d3 )
	SV* c_func
	float f0
	int i1
	int i2
	double d3
PREINIT:
	void(*func)(float, int, int, double);
CODE:
	func   = INT2PTR(void(*)(float, int, int, double), SvIV(c_func) );
	(*func)(f0, i1, i2, d3);

double
nci_dfiid( c_func, f0, i1, i2, d3 )
	SV* c_func
	float f0
	int i1
	int i2
	double d3
PREINIT:
	double(*func)(float, int, int, double);
CODE:
	func   = INT2PTR(double(*)(float, int, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2, d3);
OUTPUT:
	RETVAL

short
nci_sfiid( c_func, f0, i1, i2, d3 )
	SV* c_func
	float f0
	int i1
	int i2
	double d3
PREINIT:
	short(*func)(float, int, int, double);
CODE:
	func   = INT2PTR(short(*)(float, int, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2, d3);
OUTPUT:
	RETVAL

float
nci_ffiid( c_func, f0, i1, i2, d3 )
	SV* c_func
	float f0
	int i1
	int i2
	double d3
PREINIT:
	float(*func)(float, int, int, double);
CODE:
	func   = INT2PTR(float(*)(float, int, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2, d3);
OUTPUT:
	RETVAL

char *
nci_tfiid( c_func, f0, i1, i2, d3 )
	SV* c_func
	float f0
	int i1
	int i2
	double d3
PREINIT:
	char *(*func)(float, int, int, double);
CODE:
	func   = INT2PTR(char *(*)(float, int, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2, d3);
OUTPUT:
	RETVAL

int
nci_ifiid( c_func, f0, i1, i2, d3 )
	SV* c_func
	float f0
	int i1
	int i2
	double d3
PREINIT:
	int(*func)(float, int, int, double);
CODE:
	func   = INT2PTR(int(*)(float, int, int, double), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2, d3);
OUTPUT:
	RETVAL

void *
nci_ptiid( c_func, t0, i1, i2, d3 )
	SV* c_func
	char * t0
	int i1
	int i2
	double d3
PREINIT:
	void *(*func)(char *, int, int, double);
CODE:
	func   = INT2PTR(void *(*)(char *, int, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2, d3);
OUTPUT:
	RETVAL

void
nci_vtiid( c_func, t0, i1, i2, d3 )
	SV* c_func
	char * t0
	int i1
	int i2
	double d3
PREINIT:
	void(*func)(char *, int, int, double);
CODE:
	func   = INT2PTR(void(*)(char *, int, int, double), SvIV(c_func) );
	(*func)(t0, i1, i2, d3);

double
nci_dtiid( c_func, t0, i1, i2, d3 )
	SV* c_func
	char * t0
	int i1
	int i2
	double d3
PREINIT:
	double(*func)(char *, int, int, double);
CODE:
	func   = INT2PTR(double(*)(char *, int, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2, d3);
OUTPUT:
	RETVAL

short
nci_stiid( c_func, t0, i1, i2, d3 )
	SV* c_func
	char * t0
	int i1
	int i2
	double d3
PREINIT:
	short(*func)(char *, int, int, double);
CODE:
	func   = INT2PTR(short(*)(char *, int, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2, d3);
OUTPUT:
	RETVAL

float
nci_ftiid( c_func, t0, i1, i2, d3 )
	SV* c_func
	char * t0
	int i1
	int i2
	double d3
PREINIT:
	float(*func)(char *, int, int, double);
CODE:
	func   = INT2PTR(float(*)(char *, int, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2, d3);
OUTPUT:
	RETVAL

char *
nci_ttiid( c_func, t0, i1, i2, d3 )
	SV* c_func
	char * t0
	int i1
	int i2
	double d3
PREINIT:
	char *(*func)(char *, int, int, double);
CODE:
	func   = INT2PTR(char *(*)(char *, int, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2, d3);
OUTPUT:
	RETVAL

int
nci_itiid( c_func, t0, i1, i2, d3 )
	SV* c_func
	char * t0
	int i1
	int i2
	double d3
PREINIT:
	int(*func)(char *, int, int, double);
CODE:
	func   = INT2PTR(int(*)(char *, int, int, double), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2, d3);
OUTPUT:
	RETVAL

void *
nci_piiid( c_func, i0, i1, i2, d3 )
	SV* c_func
	int i0
	int i1
	int i2
	double d3
PREINIT:
	void *(*func)(int, int, int, double);
CODE:
	func   = INT2PTR(void *(*)(int, int, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2, d3);
OUTPUT:
	RETVAL

void
nci_viiid( c_func, i0, i1, i2, d3 )
	SV* c_func
	int i0
	int i1
	int i2
	double d3
PREINIT:
	void(*func)(int, int, int, double);
CODE:
	func   = INT2PTR(void(*)(int, int, int, double), SvIV(c_func) );
	(*func)(i0, i1, i2, d3);

double
nci_diiid( c_func, i0, i1, i2, d3 )
	SV* c_func
	int i0
	int i1
	int i2
	double d3
PREINIT:
	double(*func)(int, int, int, double);
CODE:
	func   = INT2PTR(double(*)(int, int, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2, d3);
OUTPUT:
	RETVAL

short
nci_siiid( c_func, i0, i1, i2, d3 )
	SV* c_func
	int i0
	int i1
	int i2
	double d3
PREINIT:
	short(*func)(int, int, int, double);
CODE:
	func   = INT2PTR(short(*)(int, int, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2, d3);
OUTPUT:
	RETVAL

float
nci_fiiid( c_func, i0, i1, i2, d3 )
	SV* c_func
	int i0
	int i1
	int i2
	double d3
PREINIT:
	float(*func)(int, int, int, double);
CODE:
	func   = INT2PTR(float(*)(int, int, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2, d3);
OUTPUT:
	RETVAL

char *
nci_tiiid( c_func, i0, i1, i2, d3 )
	SV* c_func
	int i0
	int i1
	int i2
	double d3
PREINIT:
	char *(*func)(int, int, int, double);
CODE:
	func   = INT2PTR(char *(*)(int, int, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2, d3);
OUTPUT:
	RETVAL

int
nci_iiiid( c_func, i0, i1, i2, d3 )
	SV* c_func
	int i0
	int i1
	int i2
	double d3
PREINIT:
	int(*func)(int, int, int, double);
CODE:
	func   = INT2PTR(int(*)(int, int, int, double), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2, d3);
OUTPUT:
	RETVAL

void *
nci_pppps( c_func, p0, p1, p2, s3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	short s3
PREINIT:
	void *(*func)(void *, void *, void *, short);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2, s3);
OUTPUT:
	RETVAL

void
nci_vppps( c_func, p0, p1, p2, s3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	short s3
PREINIT:
	void(*func)(void *, void *, void *, short);
CODE:
	func   = INT2PTR(void(*)(void *, void *, void *, short), SvIV(c_func) );
	(*func)(p0, p1, p2, s3);

double
nci_dppps( c_func, p0, p1, p2, s3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	short s3
PREINIT:
	double(*func)(void *, void *, void *, short);
CODE:
	func   = INT2PTR(double(*)(void *, void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2, s3);
OUTPUT:
	RETVAL

short
nci_sppps( c_func, p0, p1, p2, s3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	short s3
PREINIT:
	short(*func)(void *, void *, void *, short);
CODE:
	func   = INT2PTR(short(*)(void *, void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2, s3);
OUTPUT:
	RETVAL

float
nci_fppps( c_func, p0, p1, p2, s3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	short s3
PREINIT:
	float(*func)(void *, void *, void *, short);
CODE:
	func   = INT2PTR(float(*)(void *, void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2, s3);
OUTPUT:
	RETVAL

char *
nci_tppps( c_func, p0, p1, p2, s3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	short s3
PREINIT:
	char *(*func)(void *, void *, void *, short);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2, s3);
OUTPUT:
	RETVAL

int
nci_ippps( c_func, p0, p1, p2, s3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	short s3
PREINIT:
	int(*func)(void *, void *, void *, short);
CODE:
	func   = INT2PTR(int(*)(void *, void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2, s3);
OUTPUT:
	RETVAL

void *
nci_pvpps( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvpps( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvpps( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svpps( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvpps( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvpps( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivpps( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdpps( c_func, d0, p1, p2, s3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	short s3
PREINIT:
	void *(*func)(double, void *, void *, short);
CODE:
	func   = INT2PTR(void *(*)(double, void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2, s3);
OUTPUT:
	RETVAL

void
nci_vdpps( c_func, d0, p1, p2, s3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	short s3
PREINIT:
	void(*func)(double, void *, void *, short);
CODE:
	func   = INT2PTR(void(*)(double, void *, void *, short), SvIV(c_func) );
	(*func)(d0, p1, p2, s3);

double
nci_ddpps( c_func, d0, p1, p2, s3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	short s3
PREINIT:
	double(*func)(double, void *, void *, short);
CODE:
	func   = INT2PTR(double(*)(double, void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2, s3);
OUTPUT:
	RETVAL

short
nci_sdpps( c_func, d0, p1, p2, s3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	short s3
PREINIT:
	short(*func)(double, void *, void *, short);
CODE:
	func   = INT2PTR(short(*)(double, void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2, s3);
OUTPUT:
	RETVAL

float
nci_fdpps( c_func, d0, p1, p2, s3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	short s3
PREINIT:
	float(*func)(double, void *, void *, short);
CODE:
	func   = INT2PTR(float(*)(double, void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2, s3);
OUTPUT:
	RETVAL

char *
nci_tdpps( c_func, d0, p1, p2, s3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	short s3
PREINIT:
	char *(*func)(double, void *, void *, short);
CODE:
	func   = INT2PTR(char *(*)(double, void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2, s3);
OUTPUT:
	RETVAL

int
nci_idpps( c_func, d0, p1, p2, s3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	short s3
PREINIT:
	int(*func)(double, void *, void *, short);
CODE:
	func   = INT2PTR(int(*)(double, void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2, s3);
OUTPUT:
	RETVAL

void *
nci_pspps( c_func, s0, p1, p2, s3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	short s3
PREINIT:
	void *(*func)(short, void *, void *, short);
CODE:
	func   = INT2PTR(void *(*)(short, void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2, s3);
OUTPUT:
	RETVAL

void
nci_vspps( c_func, s0, p1, p2, s3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	short s3
PREINIT:
	void(*func)(short, void *, void *, short);
CODE:
	func   = INT2PTR(void(*)(short, void *, void *, short), SvIV(c_func) );
	(*func)(s0, p1, p2, s3);

double
nci_dspps( c_func, s0, p1, p2, s3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	short s3
PREINIT:
	double(*func)(short, void *, void *, short);
CODE:
	func   = INT2PTR(double(*)(short, void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2, s3);
OUTPUT:
	RETVAL

short
nci_sspps( c_func, s0, p1, p2, s3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	short s3
PREINIT:
	short(*func)(short, void *, void *, short);
CODE:
	func   = INT2PTR(short(*)(short, void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2, s3);
OUTPUT:
	RETVAL

float
nci_fspps( c_func, s0, p1, p2, s3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	short s3
PREINIT:
	float(*func)(short, void *, void *, short);
CODE:
	func   = INT2PTR(float(*)(short, void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2, s3);
OUTPUT:
	RETVAL

char *
nci_tspps( c_func, s0, p1, p2, s3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	short s3
PREINIT:
	char *(*func)(short, void *, void *, short);
CODE:
	func   = INT2PTR(char *(*)(short, void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2, s3);
OUTPUT:
	RETVAL

int
nci_ispps( c_func, s0, p1, p2, s3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	short s3
PREINIT:
	int(*func)(short, void *, void *, short);
CODE:
	func   = INT2PTR(int(*)(short, void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2, s3);
OUTPUT:
	RETVAL

void *
nci_pfpps( c_func, f0, p1, p2, s3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	short s3
PREINIT:
	void *(*func)(float, void *, void *, short);
CODE:
	func   = INT2PTR(void *(*)(float, void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2, s3);
OUTPUT:
	RETVAL

void
nci_vfpps( c_func, f0, p1, p2, s3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	short s3
PREINIT:
	void(*func)(float, void *, void *, short);
CODE:
	func   = INT2PTR(void(*)(float, void *, void *, short), SvIV(c_func) );
	(*func)(f0, p1, p2, s3);

double
nci_dfpps( c_func, f0, p1, p2, s3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	short s3
PREINIT:
	double(*func)(float, void *, void *, short);
CODE:
	func   = INT2PTR(double(*)(float, void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2, s3);
OUTPUT:
	RETVAL

short
nci_sfpps( c_func, f0, p1, p2, s3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	short s3
PREINIT:
	short(*func)(float, void *, void *, short);
CODE:
	func   = INT2PTR(short(*)(float, void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2, s3);
OUTPUT:
	RETVAL

float
nci_ffpps( c_func, f0, p1, p2, s3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	short s3
PREINIT:
	float(*func)(float, void *, void *, short);
CODE:
	func   = INT2PTR(float(*)(float, void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2, s3);
OUTPUT:
	RETVAL

char *
nci_tfpps( c_func, f0, p1, p2, s3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	short s3
PREINIT:
	char *(*func)(float, void *, void *, short);
CODE:
	func   = INT2PTR(char *(*)(float, void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2, s3);
OUTPUT:
	RETVAL

int
nci_ifpps( c_func, f0, p1, p2, s3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	short s3
PREINIT:
	int(*func)(float, void *, void *, short);
CODE:
	func   = INT2PTR(int(*)(float, void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2, s3);
OUTPUT:
	RETVAL

void *
nci_ptpps( c_func, t0, p1, p2, s3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	short s3
PREINIT:
	void *(*func)(char *, void *, void *, short);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2, s3);
OUTPUT:
	RETVAL

void
nci_vtpps( c_func, t0, p1, p2, s3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	short s3
PREINIT:
	void(*func)(char *, void *, void *, short);
CODE:
	func   = INT2PTR(void(*)(char *, void *, void *, short), SvIV(c_func) );
	(*func)(t0, p1, p2, s3);

double
nci_dtpps( c_func, t0, p1, p2, s3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	short s3
PREINIT:
	double(*func)(char *, void *, void *, short);
CODE:
	func   = INT2PTR(double(*)(char *, void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2, s3);
OUTPUT:
	RETVAL

short
nci_stpps( c_func, t0, p1, p2, s3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	short s3
PREINIT:
	short(*func)(char *, void *, void *, short);
CODE:
	func   = INT2PTR(short(*)(char *, void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2, s3);
OUTPUT:
	RETVAL

float
nci_ftpps( c_func, t0, p1, p2, s3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	short s3
PREINIT:
	float(*func)(char *, void *, void *, short);
CODE:
	func   = INT2PTR(float(*)(char *, void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2, s3);
OUTPUT:
	RETVAL

char *
nci_ttpps( c_func, t0, p1, p2, s3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	short s3
PREINIT:
	char *(*func)(char *, void *, void *, short);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2, s3);
OUTPUT:
	RETVAL

int
nci_itpps( c_func, t0, p1, p2, s3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	short s3
PREINIT:
	int(*func)(char *, void *, void *, short);
CODE:
	func   = INT2PTR(int(*)(char *, void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2, s3);
OUTPUT:
	RETVAL

void *
nci_pipps( c_func, i0, p1, p2, s3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	short s3
PREINIT:
	void *(*func)(int, void *, void *, short);
CODE:
	func   = INT2PTR(void *(*)(int, void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2, s3);
OUTPUT:
	RETVAL

void
nci_vipps( c_func, i0, p1, p2, s3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	short s3
PREINIT:
	void(*func)(int, void *, void *, short);
CODE:
	func   = INT2PTR(void(*)(int, void *, void *, short), SvIV(c_func) );
	(*func)(i0, p1, p2, s3);

double
nci_dipps( c_func, i0, p1, p2, s3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	short s3
PREINIT:
	double(*func)(int, void *, void *, short);
CODE:
	func   = INT2PTR(double(*)(int, void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2, s3);
OUTPUT:
	RETVAL

short
nci_sipps( c_func, i0, p1, p2, s3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	short s3
PREINIT:
	short(*func)(int, void *, void *, short);
CODE:
	func   = INT2PTR(short(*)(int, void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2, s3);
OUTPUT:
	RETVAL

float
nci_fipps( c_func, i0, p1, p2, s3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	short s3
PREINIT:
	float(*func)(int, void *, void *, short);
CODE:
	func   = INT2PTR(float(*)(int, void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2, s3);
OUTPUT:
	RETVAL

char *
nci_tipps( c_func, i0, p1, p2, s3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	short s3
PREINIT:
	char *(*func)(int, void *, void *, short);
CODE:
	func   = INT2PTR(char *(*)(int, void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2, s3);
OUTPUT:
	RETVAL

int
nci_iipps( c_func, i0, p1, p2, s3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	short s3
PREINIT:
	int(*func)(int, void *, void *, short);
CODE:
	func   = INT2PTR(int(*)(int, void *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2, s3);
OUTPUT:
	RETVAL

void *
nci_ppdps( c_func, p0, d1, p2, s3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	short s3
PREINIT:
	void *(*func)(void *, double, void *, short);
CODE:
	func   = INT2PTR(void *(*)(void *, double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2, s3);
OUTPUT:
	RETVAL

void
nci_vpdps( c_func, p0, d1, p2, s3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	short s3
PREINIT:
	void(*func)(void *, double, void *, short);
CODE:
	func   = INT2PTR(void(*)(void *, double, void *, short), SvIV(c_func) );
	(*func)(p0, d1, p2, s3);

double
nci_dpdps( c_func, p0, d1, p2, s3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	short s3
PREINIT:
	double(*func)(void *, double, void *, short);
CODE:
	func   = INT2PTR(double(*)(void *, double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2, s3);
OUTPUT:
	RETVAL

short
nci_spdps( c_func, p0, d1, p2, s3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	short s3
PREINIT:
	short(*func)(void *, double, void *, short);
CODE:
	func   = INT2PTR(short(*)(void *, double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2, s3);
OUTPUT:
	RETVAL

float
nci_fpdps( c_func, p0, d1, p2, s3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	short s3
PREINIT:
	float(*func)(void *, double, void *, short);
CODE:
	func   = INT2PTR(float(*)(void *, double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2, s3);
OUTPUT:
	RETVAL

char *
nci_tpdps( c_func, p0, d1, p2, s3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	short s3
PREINIT:
	char *(*func)(void *, double, void *, short);
CODE:
	func   = INT2PTR(char *(*)(void *, double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2, s3);
OUTPUT:
	RETVAL

int
nci_ipdps( c_func, p0, d1, p2, s3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	short s3
PREINIT:
	int(*func)(void *, double, void *, short);
CODE:
	func   = INT2PTR(int(*)(void *, double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2, s3);
OUTPUT:
	RETVAL

void *
nci_pvdps( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvdps( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvdps( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svdps( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvdps( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvdps( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivdps( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pddps( c_func, d0, d1, p2, s3 )
	SV* c_func
	double d0
	double d1
	void * p2
	short s3
PREINIT:
	void *(*func)(double, double, void *, short);
CODE:
	func   = INT2PTR(void *(*)(double, double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2, s3);
OUTPUT:
	RETVAL

void
nci_vddps( c_func, d0, d1, p2, s3 )
	SV* c_func
	double d0
	double d1
	void * p2
	short s3
PREINIT:
	void(*func)(double, double, void *, short);
CODE:
	func   = INT2PTR(void(*)(double, double, void *, short), SvIV(c_func) );
	(*func)(d0, d1, p2, s3);

double
nci_dddps( c_func, d0, d1, p2, s3 )
	SV* c_func
	double d0
	double d1
	void * p2
	short s3
PREINIT:
	double(*func)(double, double, void *, short);
CODE:
	func   = INT2PTR(double(*)(double, double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2, s3);
OUTPUT:
	RETVAL

short
nci_sddps( c_func, d0, d1, p2, s3 )
	SV* c_func
	double d0
	double d1
	void * p2
	short s3
PREINIT:
	short(*func)(double, double, void *, short);
CODE:
	func   = INT2PTR(short(*)(double, double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2, s3);
OUTPUT:
	RETVAL

float
nci_fddps( c_func, d0, d1, p2, s3 )
	SV* c_func
	double d0
	double d1
	void * p2
	short s3
PREINIT:
	float(*func)(double, double, void *, short);
CODE:
	func   = INT2PTR(float(*)(double, double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2, s3);
OUTPUT:
	RETVAL

char *
nci_tddps( c_func, d0, d1, p2, s3 )
	SV* c_func
	double d0
	double d1
	void * p2
	short s3
PREINIT:
	char *(*func)(double, double, void *, short);
CODE:
	func   = INT2PTR(char *(*)(double, double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2, s3);
OUTPUT:
	RETVAL

int
nci_iddps( c_func, d0, d1, p2, s3 )
	SV* c_func
	double d0
	double d1
	void * p2
	short s3
PREINIT:
	int(*func)(double, double, void *, short);
CODE:
	func   = INT2PTR(int(*)(double, double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2, s3);
OUTPUT:
	RETVAL

void *
nci_psdps( c_func, s0, d1, p2, s3 )
	SV* c_func
	short s0
	double d1
	void * p2
	short s3
PREINIT:
	void *(*func)(short, double, void *, short);
CODE:
	func   = INT2PTR(void *(*)(short, double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2, s3);
OUTPUT:
	RETVAL

void
nci_vsdps( c_func, s0, d1, p2, s3 )
	SV* c_func
	short s0
	double d1
	void * p2
	short s3
PREINIT:
	void(*func)(short, double, void *, short);
CODE:
	func   = INT2PTR(void(*)(short, double, void *, short), SvIV(c_func) );
	(*func)(s0, d1, p2, s3);

double
nci_dsdps( c_func, s0, d1, p2, s3 )
	SV* c_func
	short s0
	double d1
	void * p2
	short s3
PREINIT:
	double(*func)(short, double, void *, short);
CODE:
	func   = INT2PTR(double(*)(short, double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2, s3);
OUTPUT:
	RETVAL

short
nci_ssdps( c_func, s0, d1, p2, s3 )
	SV* c_func
	short s0
	double d1
	void * p2
	short s3
PREINIT:
	short(*func)(short, double, void *, short);
CODE:
	func   = INT2PTR(short(*)(short, double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2, s3);
OUTPUT:
	RETVAL

float
nci_fsdps( c_func, s0, d1, p2, s3 )
	SV* c_func
	short s0
	double d1
	void * p2
	short s3
PREINIT:
	float(*func)(short, double, void *, short);
CODE:
	func   = INT2PTR(float(*)(short, double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2, s3);
OUTPUT:
	RETVAL

char *
nci_tsdps( c_func, s0, d1, p2, s3 )
	SV* c_func
	short s0
	double d1
	void * p2
	short s3
PREINIT:
	char *(*func)(short, double, void *, short);
CODE:
	func   = INT2PTR(char *(*)(short, double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2, s3);
OUTPUT:
	RETVAL

int
nci_isdps( c_func, s0, d1, p2, s3 )
	SV* c_func
	short s0
	double d1
	void * p2
	short s3
PREINIT:
	int(*func)(short, double, void *, short);
CODE:
	func   = INT2PTR(int(*)(short, double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2, s3);
OUTPUT:
	RETVAL

void *
nci_pfdps( c_func, f0, d1, p2, s3 )
	SV* c_func
	float f0
	double d1
	void * p2
	short s3
PREINIT:
	void *(*func)(float, double, void *, short);
CODE:
	func   = INT2PTR(void *(*)(float, double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2, s3);
OUTPUT:
	RETVAL

void
nci_vfdps( c_func, f0, d1, p2, s3 )
	SV* c_func
	float f0
	double d1
	void * p2
	short s3
PREINIT:
	void(*func)(float, double, void *, short);
CODE:
	func   = INT2PTR(void(*)(float, double, void *, short), SvIV(c_func) );
	(*func)(f0, d1, p2, s3);

double
nci_dfdps( c_func, f0, d1, p2, s3 )
	SV* c_func
	float f0
	double d1
	void * p2
	short s3
PREINIT:
	double(*func)(float, double, void *, short);
CODE:
	func   = INT2PTR(double(*)(float, double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2, s3);
OUTPUT:
	RETVAL

short
nci_sfdps( c_func, f0, d1, p2, s3 )
	SV* c_func
	float f0
	double d1
	void * p2
	short s3
PREINIT:
	short(*func)(float, double, void *, short);
CODE:
	func   = INT2PTR(short(*)(float, double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2, s3);
OUTPUT:
	RETVAL

float
nci_ffdps( c_func, f0, d1, p2, s3 )
	SV* c_func
	float f0
	double d1
	void * p2
	short s3
PREINIT:
	float(*func)(float, double, void *, short);
CODE:
	func   = INT2PTR(float(*)(float, double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2, s3);
OUTPUT:
	RETVAL

char *
nci_tfdps( c_func, f0, d1, p2, s3 )
	SV* c_func
	float f0
	double d1
	void * p2
	short s3
PREINIT:
	char *(*func)(float, double, void *, short);
CODE:
	func   = INT2PTR(char *(*)(float, double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2, s3);
OUTPUT:
	RETVAL

int
nci_ifdps( c_func, f0, d1, p2, s3 )
	SV* c_func
	float f0
	double d1
	void * p2
	short s3
PREINIT:
	int(*func)(float, double, void *, short);
CODE:
	func   = INT2PTR(int(*)(float, double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2, s3);
OUTPUT:
	RETVAL

void *
nci_ptdps( c_func, t0, d1, p2, s3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	short s3
PREINIT:
	void *(*func)(char *, double, void *, short);
CODE:
	func   = INT2PTR(void *(*)(char *, double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2, s3);
OUTPUT:
	RETVAL

void
nci_vtdps( c_func, t0, d1, p2, s3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	short s3
PREINIT:
	void(*func)(char *, double, void *, short);
CODE:
	func   = INT2PTR(void(*)(char *, double, void *, short), SvIV(c_func) );
	(*func)(t0, d1, p2, s3);

double
nci_dtdps( c_func, t0, d1, p2, s3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	short s3
PREINIT:
	double(*func)(char *, double, void *, short);
CODE:
	func   = INT2PTR(double(*)(char *, double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2, s3);
OUTPUT:
	RETVAL

short
nci_stdps( c_func, t0, d1, p2, s3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	short s3
PREINIT:
	short(*func)(char *, double, void *, short);
CODE:
	func   = INT2PTR(short(*)(char *, double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2, s3);
OUTPUT:
	RETVAL

float
nci_ftdps( c_func, t0, d1, p2, s3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	short s3
PREINIT:
	float(*func)(char *, double, void *, short);
CODE:
	func   = INT2PTR(float(*)(char *, double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2, s3);
OUTPUT:
	RETVAL

char *
nci_ttdps( c_func, t0, d1, p2, s3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	short s3
PREINIT:
	char *(*func)(char *, double, void *, short);
CODE:
	func   = INT2PTR(char *(*)(char *, double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2, s3);
OUTPUT:
	RETVAL

int
nci_itdps( c_func, t0, d1, p2, s3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	short s3
PREINIT:
	int(*func)(char *, double, void *, short);
CODE:
	func   = INT2PTR(int(*)(char *, double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2, s3);
OUTPUT:
	RETVAL

void *
nci_pidps( c_func, i0, d1, p2, s3 )
	SV* c_func
	int i0
	double d1
	void * p2
	short s3
PREINIT:
	void *(*func)(int, double, void *, short);
CODE:
	func   = INT2PTR(void *(*)(int, double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2, s3);
OUTPUT:
	RETVAL

void
nci_vidps( c_func, i0, d1, p2, s3 )
	SV* c_func
	int i0
	double d1
	void * p2
	short s3
PREINIT:
	void(*func)(int, double, void *, short);
CODE:
	func   = INT2PTR(void(*)(int, double, void *, short), SvIV(c_func) );
	(*func)(i0, d1, p2, s3);

double
nci_didps( c_func, i0, d1, p2, s3 )
	SV* c_func
	int i0
	double d1
	void * p2
	short s3
PREINIT:
	double(*func)(int, double, void *, short);
CODE:
	func   = INT2PTR(double(*)(int, double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2, s3);
OUTPUT:
	RETVAL

short
nci_sidps( c_func, i0, d1, p2, s3 )
	SV* c_func
	int i0
	double d1
	void * p2
	short s3
PREINIT:
	short(*func)(int, double, void *, short);
CODE:
	func   = INT2PTR(short(*)(int, double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2, s3);
OUTPUT:
	RETVAL

float
nci_fidps( c_func, i0, d1, p2, s3 )
	SV* c_func
	int i0
	double d1
	void * p2
	short s3
PREINIT:
	float(*func)(int, double, void *, short);
CODE:
	func   = INT2PTR(float(*)(int, double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2, s3);
OUTPUT:
	RETVAL

char *
nci_tidps( c_func, i0, d1, p2, s3 )
	SV* c_func
	int i0
	double d1
	void * p2
	short s3
PREINIT:
	char *(*func)(int, double, void *, short);
CODE:
	func   = INT2PTR(char *(*)(int, double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2, s3);
OUTPUT:
	RETVAL

int
nci_iidps( c_func, i0, d1, p2, s3 )
	SV* c_func
	int i0
	double d1
	void * p2
	short s3
PREINIT:
	int(*func)(int, double, void *, short);
CODE:
	func   = INT2PTR(int(*)(int, double, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2, s3);
OUTPUT:
	RETVAL

void *
nci_ppsps( c_func, p0, s1, p2, s3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	short s3
PREINIT:
	void *(*func)(void *, short, void *, short);
CODE:
	func   = INT2PTR(void *(*)(void *, short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2, s3);
OUTPUT:
	RETVAL

void
nci_vpsps( c_func, p0, s1, p2, s3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	short s3
PREINIT:
	void(*func)(void *, short, void *, short);
CODE:
	func   = INT2PTR(void(*)(void *, short, void *, short), SvIV(c_func) );
	(*func)(p0, s1, p2, s3);

double
nci_dpsps( c_func, p0, s1, p2, s3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	short s3
PREINIT:
	double(*func)(void *, short, void *, short);
CODE:
	func   = INT2PTR(double(*)(void *, short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2, s3);
OUTPUT:
	RETVAL

short
nci_spsps( c_func, p0, s1, p2, s3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	short s3
PREINIT:
	short(*func)(void *, short, void *, short);
CODE:
	func   = INT2PTR(short(*)(void *, short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2, s3);
OUTPUT:
	RETVAL

float
nci_fpsps( c_func, p0, s1, p2, s3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	short s3
PREINIT:
	float(*func)(void *, short, void *, short);
CODE:
	func   = INT2PTR(float(*)(void *, short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2, s3);
OUTPUT:
	RETVAL

char *
nci_tpsps( c_func, p0, s1, p2, s3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	short s3
PREINIT:
	char *(*func)(void *, short, void *, short);
CODE:
	func   = INT2PTR(char *(*)(void *, short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2, s3);
OUTPUT:
	RETVAL

int
nci_ipsps( c_func, p0, s1, p2, s3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	short s3
PREINIT:
	int(*func)(void *, short, void *, short);
CODE:
	func   = INT2PTR(int(*)(void *, short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2, s3);
OUTPUT:
	RETVAL

void *
nci_pvsps( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvsps( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvsps( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svsps( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvsps( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvsps( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivsps( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdsps( c_func, d0, s1, p2, s3 )
	SV* c_func
	double d0
	short s1
	void * p2
	short s3
PREINIT:
	void *(*func)(double, short, void *, short);
CODE:
	func   = INT2PTR(void *(*)(double, short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2, s3);
OUTPUT:
	RETVAL

void
nci_vdsps( c_func, d0, s1, p2, s3 )
	SV* c_func
	double d0
	short s1
	void * p2
	short s3
PREINIT:
	void(*func)(double, short, void *, short);
CODE:
	func   = INT2PTR(void(*)(double, short, void *, short), SvIV(c_func) );
	(*func)(d0, s1, p2, s3);

double
nci_ddsps( c_func, d0, s1, p2, s3 )
	SV* c_func
	double d0
	short s1
	void * p2
	short s3
PREINIT:
	double(*func)(double, short, void *, short);
CODE:
	func   = INT2PTR(double(*)(double, short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2, s3);
OUTPUT:
	RETVAL

short
nci_sdsps( c_func, d0, s1, p2, s3 )
	SV* c_func
	double d0
	short s1
	void * p2
	short s3
PREINIT:
	short(*func)(double, short, void *, short);
CODE:
	func   = INT2PTR(short(*)(double, short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2, s3);
OUTPUT:
	RETVAL

float
nci_fdsps( c_func, d0, s1, p2, s3 )
	SV* c_func
	double d0
	short s1
	void * p2
	short s3
PREINIT:
	float(*func)(double, short, void *, short);
CODE:
	func   = INT2PTR(float(*)(double, short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2, s3);
OUTPUT:
	RETVAL

char *
nci_tdsps( c_func, d0, s1, p2, s3 )
	SV* c_func
	double d0
	short s1
	void * p2
	short s3
PREINIT:
	char *(*func)(double, short, void *, short);
CODE:
	func   = INT2PTR(char *(*)(double, short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2, s3);
OUTPUT:
	RETVAL

int
nci_idsps( c_func, d0, s1, p2, s3 )
	SV* c_func
	double d0
	short s1
	void * p2
	short s3
PREINIT:
	int(*func)(double, short, void *, short);
CODE:
	func   = INT2PTR(int(*)(double, short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2, s3);
OUTPUT:
	RETVAL

void *
nci_pssps( c_func, s0, s1, p2, s3 )
	SV* c_func
	short s0
	short s1
	void * p2
	short s3
PREINIT:
	void *(*func)(short, short, void *, short);
CODE:
	func   = INT2PTR(void *(*)(short, short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2, s3);
OUTPUT:
	RETVAL

void
nci_vssps( c_func, s0, s1, p2, s3 )
	SV* c_func
	short s0
	short s1
	void * p2
	short s3
PREINIT:
	void(*func)(short, short, void *, short);
CODE:
	func   = INT2PTR(void(*)(short, short, void *, short), SvIV(c_func) );
	(*func)(s0, s1, p2, s3);

double
nci_dssps( c_func, s0, s1, p2, s3 )
	SV* c_func
	short s0
	short s1
	void * p2
	short s3
PREINIT:
	double(*func)(short, short, void *, short);
CODE:
	func   = INT2PTR(double(*)(short, short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2, s3);
OUTPUT:
	RETVAL

short
nci_sssps( c_func, s0, s1, p2, s3 )
	SV* c_func
	short s0
	short s1
	void * p2
	short s3
PREINIT:
	short(*func)(short, short, void *, short);
CODE:
	func   = INT2PTR(short(*)(short, short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2, s3);
OUTPUT:
	RETVAL

float
nci_fssps( c_func, s0, s1, p2, s3 )
	SV* c_func
	short s0
	short s1
	void * p2
	short s3
PREINIT:
	float(*func)(short, short, void *, short);
CODE:
	func   = INT2PTR(float(*)(short, short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2, s3);
OUTPUT:
	RETVAL

char *
nci_tssps( c_func, s0, s1, p2, s3 )
	SV* c_func
	short s0
	short s1
	void * p2
	short s3
PREINIT:
	char *(*func)(short, short, void *, short);
CODE:
	func   = INT2PTR(char *(*)(short, short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2, s3);
OUTPUT:
	RETVAL

int
nci_issps( c_func, s0, s1, p2, s3 )
	SV* c_func
	short s0
	short s1
	void * p2
	short s3
PREINIT:
	int(*func)(short, short, void *, short);
CODE:
	func   = INT2PTR(int(*)(short, short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2, s3);
OUTPUT:
	RETVAL

void *
nci_pfsps( c_func, f0, s1, p2, s3 )
	SV* c_func
	float f0
	short s1
	void * p2
	short s3
PREINIT:
	void *(*func)(float, short, void *, short);
CODE:
	func   = INT2PTR(void *(*)(float, short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2, s3);
OUTPUT:
	RETVAL

void
nci_vfsps( c_func, f0, s1, p2, s3 )
	SV* c_func
	float f0
	short s1
	void * p2
	short s3
PREINIT:
	void(*func)(float, short, void *, short);
CODE:
	func   = INT2PTR(void(*)(float, short, void *, short), SvIV(c_func) );
	(*func)(f0, s1, p2, s3);

double
nci_dfsps( c_func, f0, s1, p2, s3 )
	SV* c_func
	float f0
	short s1
	void * p2
	short s3
PREINIT:
	double(*func)(float, short, void *, short);
CODE:
	func   = INT2PTR(double(*)(float, short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2, s3);
OUTPUT:
	RETVAL

short
nci_sfsps( c_func, f0, s1, p2, s3 )
	SV* c_func
	float f0
	short s1
	void * p2
	short s3
PREINIT:
	short(*func)(float, short, void *, short);
CODE:
	func   = INT2PTR(short(*)(float, short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2, s3);
OUTPUT:
	RETVAL

float
nci_ffsps( c_func, f0, s1, p2, s3 )
	SV* c_func
	float f0
	short s1
	void * p2
	short s3
PREINIT:
	float(*func)(float, short, void *, short);
CODE:
	func   = INT2PTR(float(*)(float, short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2, s3);
OUTPUT:
	RETVAL

char *
nci_tfsps( c_func, f0, s1, p2, s3 )
	SV* c_func
	float f0
	short s1
	void * p2
	short s3
PREINIT:
	char *(*func)(float, short, void *, short);
CODE:
	func   = INT2PTR(char *(*)(float, short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2, s3);
OUTPUT:
	RETVAL

int
nci_ifsps( c_func, f0, s1, p2, s3 )
	SV* c_func
	float f0
	short s1
	void * p2
	short s3
PREINIT:
	int(*func)(float, short, void *, short);
CODE:
	func   = INT2PTR(int(*)(float, short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2, s3);
OUTPUT:
	RETVAL

void *
nci_ptsps( c_func, t0, s1, p2, s3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	short s3
PREINIT:
	void *(*func)(char *, short, void *, short);
CODE:
	func   = INT2PTR(void *(*)(char *, short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2, s3);
OUTPUT:
	RETVAL

void
nci_vtsps( c_func, t0, s1, p2, s3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	short s3
PREINIT:
	void(*func)(char *, short, void *, short);
CODE:
	func   = INT2PTR(void(*)(char *, short, void *, short), SvIV(c_func) );
	(*func)(t0, s1, p2, s3);

double
nci_dtsps( c_func, t0, s1, p2, s3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	short s3
PREINIT:
	double(*func)(char *, short, void *, short);
CODE:
	func   = INT2PTR(double(*)(char *, short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2, s3);
OUTPUT:
	RETVAL

short
nci_stsps( c_func, t0, s1, p2, s3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	short s3
PREINIT:
	short(*func)(char *, short, void *, short);
CODE:
	func   = INT2PTR(short(*)(char *, short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2, s3);
OUTPUT:
	RETVAL

float
nci_ftsps( c_func, t0, s1, p2, s3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	short s3
PREINIT:
	float(*func)(char *, short, void *, short);
CODE:
	func   = INT2PTR(float(*)(char *, short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2, s3);
OUTPUT:
	RETVAL

char *
nci_ttsps( c_func, t0, s1, p2, s3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	short s3
PREINIT:
	char *(*func)(char *, short, void *, short);
CODE:
	func   = INT2PTR(char *(*)(char *, short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2, s3);
OUTPUT:
	RETVAL

int
nci_itsps( c_func, t0, s1, p2, s3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	short s3
PREINIT:
	int(*func)(char *, short, void *, short);
CODE:
	func   = INT2PTR(int(*)(char *, short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2, s3);
OUTPUT:
	RETVAL

void *
nci_pisps( c_func, i0, s1, p2, s3 )
	SV* c_func
	int i0
	short s1
	void * p2
	short s3
PREINIT:
	void *(*func)(int, short, void *, short);
CODE:
	func   = INT2PTR(void *(*)(int, short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2, s3);
OUTPUT:
	RETVAL

void
nci_visps( c_func, i0, s1, p2, s3 )
	SV* c_func
	int i0
	short s1
	void * p2
	short s3
PREINIT:
	void(*func)(int, short, void *, short);
CODE:
	func   = INT2PTR(void(*)(int, short, void *, short), SvIV(c_func) );
	(*func)(i0, s1, p2, s3);

double
nci_disps( c_func, i0, s1, p2, s3 )
	SV* c_func
	int i0
	short s1
	void * p2
	short s3
PREINIT:
	double(*func)(int, short, void *, short);
CODE:
	func   = INT2PTR(double(*)(int, short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2, s3);
OUTPUT:
	RETVAL

short
nci_sisps( c_func, i0, s1, p2, s3 )
	SV* c_func
	int i0
	short s1
	void * p2
	short s3
PREINIT:
	short(*func)(int, short, void *, short);
CODE:
	func   = INT2PTR(short(*)(int, short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2, s3);
OUTPUT:
	RETVAL

float
nci_fisps( c_func, i0, s1, p2, s3 )
	SV* c_func
	int i0
	short s1
	void * p2
	short s3
PREINIT:
	float(*func)(int, short, void *, short);
CODE:
	func   = INT2PTR(float(*)(int, short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2, s3);
OUTPUT:
	RETVAL

char *
nci_tisps( c_func, i0, s1, p2, s3 )
	SV* c_func
	int i0
	short s1
	void * p2
	short s3
PREINIT:
	char *(*func)(int, short, void *, short);
CODE:
	func   = INT2PTR(char *(*)(int, short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2, s3);
OUTPUT:
	RETVAL

int
nci_iisps( c_func, i0, s1, p2, s3 )
	SV* c_func
	int i0
	short s1
	void * p2
	short s3
PREINIT:
	int(*func)(int, short, void *, short);
CODE:
	func   = INT2PTR(int(*)(int, short, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2, s3);
OUTPUT:
	RETVAL

void *
nci_ppfps( c_func, p0, f1, p2, s3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	short s3
PREINIT:
	void *(*func)(void *, float, void *, short);
CODE:
	func   = INT2PTR(void *(*)(void *, float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2, s3);
OUTPUT:
	RETVAL

void
nci_vpfps( c_func, p0, f1, p2, s3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	short s3
PREINIT:
	void(*func)(void *, float, void *, short);
CODE:
	func   = INT2PTR(void(*)(void *, float, void *, short), SvIV(c_func) );
	(*func)(p0, f1, p2, s3);

double
nci_dpfps( c_func, p0, f1, p2, s3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	short s3
PREINIT:
	double(*func)(void *, float, void *, short);
CODE:
	func   = INT2PTR(double(*)(void *, float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2, s3);
OUTPUT:
	RETVAL

short
nci_spfps( c_func, p0, f1, p2, s3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	short s3
PREINIT:
	short(*func)(void *, float, void *, short);
CODE:
	func   = INT2PTR(short(*)(void *, float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2, s3);
OUTPUT:
	RETVAL

float
nci_fpfps( c_func, p0, f1, p2, s3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	short s3
PREINIT:
	float(*func)(void *, float, void *, short);
CODE:
	func   = INT2PTR(float(*)(void *, float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2, s3);
OUTPUT:
	RETVAL

char *
nci_tpfps( c_func, p0, f1, p2, s3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	short s3
PREINIT:
	char *(*func)(void *, float, void *, short);
CODE:
	func   = INT2PTR(char *(*)(void *, float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2, s3);
OUTPUT:
	RETVAL

int
nci_ipfps( c_func, p0, f1, p2, s3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	short s3
PREINIT:
	int(*func)(void *, float, void *, short);
CODE:
	func   = INT2PTR(int(*)(void *, float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2, s3);
OUTPUT:
	RETVAL

void *
nci_pvfps( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvfps( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvfps( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svfps( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvfps( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvfps( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivfps( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdfps( c_func, d0, f1, p2, s3 )
	SV* c_func
	double d0
	float f1
	void * p2
	short s3
PREINIT:
	void *(*func)(double, float, void *, short);
CODE:
	func   = INT2PTR(void *(*)(double, float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2, s3);
OUTPUT:
	RETVAL

void
nci_vdfps( c_func, d0, f1, p2, s3 )
	SV* c_func
	double d0
	float f1
	void * p2
	short s3
PREINIT:
	void(*func)(double, float, void *, short);
CODE:
	func   = INT2PTR(void(*)(double, float, void *, short), SvIV(c_func) );
	(*func)(d0, f1, p2, s3);

double
nci_ddfps( c_func, d0, f1, p2, s3 )
	SV* c_func
	double d0
	float f1
	void * p2
	short s3
PREINIT:
	double(*func)(double, float, void *, short);
CODE:
	func   = INT2PTR(double(*)(double, float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2, s3);
OUTPUT:
	RETVAL

short
nci_sdfps( c_func, d0, f1, p2, s3 )
	SV* c_func
	double d0
	float f1
	void * p2
	short s3
PREINIT:
	short(*func)(double, float, void *, short);
CODE:
	func   = INT2PTR(short(*)(double, float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2, s3);
OUTPUT:
	RETVAL

float
nci_fdfps( c_func, d0, f1, p2, s3 )
	SV* c_func
	double d0
	float f1
	void * p2
	short s3
PREINIT:
	float(*func)(double, float, void *, short);
CODE:
	func   = INT2PTR(float(*)(double, float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2, s3);
OUTPUT:
	RETVAL

char *
nci_tdfps( c_func, d0, f1, p2, s3 )
	SV* c_func
	double d0
	float f1
	void * p2
	short s3
PREINIT:
	char *(*func)(double, float, void *, short);
CODE:
	func   = INT2PTR(char *(*)(double, float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2, s3);
OUTPUT:
	RETVAL

int
nci_idfps( c_func, d0, f1, p2, s3 )
	SV* c_func
	double d0
	float f1
	void * p2
	short s3
PREINIT:
	int(*func)(double, float, void *, short);
CODE:
	func   = INT2PTR(int(*)(double, float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2, s3);
OUTPUT:
	RETVAL

void *
nci_psfps( c_func, s0, f1, p2, s3 )
	SV* c_func
	short s0
	float f1
	void * p2
	short s3
PREINIT:
	void *(*func)(short, float, void *, short);
CODE:
	func   = INT2PTR(void *(*)(short, float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2, s3);
OUTPUT:
	RETVAL

void
nci_vsfps( c_func, s0, f1, p2, s3 )
	SV* c_func
	short s0
	float f1
	void * p2
	short s3
PREINIT:
	void(*func)(short, float, void *, short);
CODE:
	func   = INT2PTR(void(*)(short, float, void *, short), SvIV(c_func) );
	(*func)(s0, f1, p2, s3);

double
nci_dsfps( c_func, s0, f1, p2, s3 )
	SV* c_func
	short s0
	float f1
	void * p2
	short s3
PREINIT:
	double(*func)(short, float, void *, short);
CODE:
	func   = INT2PTR(double(*)(short, float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2, s3);
OUTPUT:
	RETVAL

short
nci_ssfps( c_func, s0, f1, p2, s3 )
	SV* c_func
	short s0
	float f1
	void * p2
	short s3
PREINIT:
	short(*func)(short, float, void *, short);
CODE:
	func   = INT2PTR(short(*)(short, float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2, s3);
OUTPUT:
	RETVAL

float
nci_fsfps( c_func, s0, f1, p2, s3 )
	SV* c_func
	short s0
	float f1
	void * p2
	short s3
PREINIT:
	float(*func)(short, float, void *, short);
CODE:
	func   = INT2PTR(float(*)(short, float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2, s3);
OUTPUT:
	RETVAL

char *
nci_tsfps( c_func, s0, f1, p2, s3 )
	SV* c_func
	short s0
	float f1
	void * p2
	short s3
PREINIT:
	char *(*func)(short, float, void *, short);
CODE:
	func   = INT2PTR(char *(*)(short, float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2, s3);
OUTPUT:
	RETVAL

int
nci_isfps( c_func, s0, f1, p2, s3 )
	SV* c_func
	short s0
	float f1
	void * p2
	short s3
PREINIT:
	int(*func)(short, float, void *, short);
CODE:
	func   = INT2PTR(int(*)(short, float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2, s3);
OUTPUT:
	RETVAL

void *
nci_pffps( c_func, f0, f1, p2, s3 )
	SV* c_func
	float f0
	float f1
	void * p2
	short s3
PREINIT:
	void *(*func)(float, float, void *, short);
CODE:
	func   = INT2PTR(void *(*)(float, float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2, s3);
OUTPUT:
	RETVAL

void
nci_vffps( c_func, f0, f1, p2, s3 )
	SV* c_func
	float f0
	float f1
	void * p2
	short s3
PREINIT:
	void(*func)(float, float, void *, short);
CODE:
	func   = INT2PTR(void(*)(float, float, void *, short), SvIV(c_func) );
	(*func)(f0, f1, p2, s3);

double
nci_dffps( c_func, f0, f1, p2, s3 )
	SV* c_func
	float f0
	float f1
	void * p2
	short s3
PREINIT:
	double(*func)(float, float, void *, short);
CODE:
	func   = INT2PTR(double(*)(float, float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2, s3);
OUTPUT:
	RETVAL

short
nci_sffps( c_func, f0, f1, p2, s3 )
	SV* c_func
	float f0
	float f1
	void * p2
	short s3
PREINIT:
	short(*func)(float, float, void *, short);
CODE:
	func   = INT2PTR(short(*)(float, float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2, s3);
OUTPUT:
	RETVAL

float
nci_fffps( c_func, f0, f1, p2, s3 )
	SV* c_func
	float f0
	float f1
	void * p2
	short s3
PREINIT:
	float(*func)(float, float, void *, short);
CODE:
	func   = INT2PTR(float(*)(float, float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2, s3);
OUTPUT:
	RETVAL

char *
nci_tffps( c_func, f0, f1, p2, s3 )
	SV* c_func
	float f0
	float f1
	void * p2
	short s3
PREINIT:
	char *(*func)(float, float, void *, short);
CODE:
	func   = INT2PTR(char *(*)(float, float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2, s3);
OUTPUT:
	RETVAL

int
nci_iffps( c_func, f0, f1, p2, s3 )
	SV* c_func
	float f0
	float f1
	void * p2
	short s3
PREINIT:
	int(*func)(float, float, void *, short);
CODE:
	func   = INT2PTR(int(*)(float, float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2, s3);
OUTPUT:
	RETVAL

void *
nci_ptfps( c_func, t0, f1, p2, s3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	short s3
PREINIT:
	void *(*func)(char *, float, void *, short);
CODE:
	func   = INT2PTR(void *(*)(char *, float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2, s3);
OUTPUT:
	RETVAL

void
nci_vtfps( c_func, t0, f1, p2, s3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	short s3
PREINIT:
	void(*func)(char *, float, void *, short);
CODE:
	func   = INT2PTR(void(*)(char *, float, void *, short), SvIV(c_func) );
	(*func)(t0, f1, p2, s3);

double
nci_dtfps( c_func, t0, f1, p2, s3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	short s3
PREINIT:
	double(*func)(char *, float, void *, short);
CODE:
	func   = INT2PTR(double(*)(char *, float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2, s3);
OUTPUT:
	RETVAL

short
nci_stfps( c_func, t0, f1, p2, s3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	short s3
PREINIT:
	short(*func)(char *, float, void *, short);
CODE:
	func   = INT2PTR(short(*)(char *, float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2, s3);
OUTPUT:
	RETVAL

float
nci_ftfps( c_func, t0, f1, p2, s3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	short s3
PREINIT:
	float(*func)(char *, float, void *, short);
CODE:
	func   = INT2PTR(float(*)(char *, float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2, s3);
OUTPUT:
	RETVAL

char *
nci_ttfps( c_func, t0, f1, p2, s3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	short s3
PREINIT:
	char *(*func)(char *, float, void *, short);
CODE:
	func   = INT2PTR(char *(*)(char *, float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2, s3);
OUTPUT:
	RETVAL

int
nci_itfps( c_func, t0, f1, p2, s3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	short s3
PREINIT:
	int(*func)(char *, float, void *, short);
CODE:
	func   = INT2PTR(int(*)(char *, float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2, s3);
OUTPUT:
	RETVAL

void *
nci_pifps( c_func, i0, f1, p2, s3 )
	SV* c_func
	int i0
	float f1
	void * p2
	short s3
PREINIT:
	void *(*func)(int, float, void *, short);
CODE:
	func   = INT2PTR(void *(*)(int, float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2, s3);
OUTPUT:
	RETVAL

void
nci_vifps( c_func, i0, f1, p2, s3 )
	SV* c_func
	int i0
	float f1
	void * p2
	short s3
PREINIT:
	void(*func)(int, float, void *, short);
CODE:
	func   = INT2PTR(void(*)(int, float, void *, short), SvIV(c_func) );
	(*func)(i0, f1, p2, s3);

double
nci_difps( c_func, i0, f1, p2, s3 )
	SV* c_func
	int i0
	float f1
	void * p2
	short s3
PREINIT:
	double(*func)(int, float, void *, short);
CODE:
	func   = INT2PTR(double(*)(int, float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2, s3);
OUTPUT:
	RETVAL

short
nci_sifps( c_func, i0, f1, p2, s3 )
	SV* c_func
	int i0
	float f1
	void * p2
	short s3
PREINIT:
	short(*func)(int, float, void *, short);
CODE:
	func   = INT2PTR(short(*)(int, float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2, s3);
OUTPUT:
	RETVAL

float
nci_fifps( c_func, i0, f1, p2, s3 )
	SV* c_func
	int i0
	float f1
	void * p2
	short s3
PREINIT:
	float(*func)(int, float, void *, short);
CODE:
	func   = INT2PTR(float(*)(int, float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2, s3);
OUTPUT:
	RETVAL

char *
nci_tifps( c_func, i0, f1, p2, s3 )
	SV* c_func
	int i0
	float f1
	void * p2
	short s3
PREINIT:
	char *(*func)(int, float, void *, short);
CODE:
	func   = INT2PTR(char *(*)(int, float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2, s3);
OUTPUT:
	RETVAL

int
nci_iifps( c_func, i0, f1, p2, s3 )
	SV* c_func
	int i0
	float f1
	void * p2
	short s3
PREINIT:
	int(*func)(int, float, void *, short);
CODE:
	func   = INT2PTR(int(*)(int, float, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2, s3);
OUTPUT:
	RETVAL

void *
nci_pptps( c_func, p0, t1, p2, s3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	short s3
PREINIT:
	void *(*func)(void *, char *, void *, short);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2, s3);
OUTPUT:
	RETVAL

void
nci_vptps( c_func, p0, t1, p2, s3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	short s3
PREINIT:
	void(*func)(void *, char *, void *, short);
CODE:
	func   = INT2PTR(void(*)(void *, char *, void *, short), SvIV(c_func) );
	(*func)(p0, t1, p2, s3);

double
nci_dptps( c_func, p0, t1, p2, s3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	short s3
PREINIT:
	double(*func)(void *, char *, void *, short);
CODE:
	func   = INT2PTR(double(*)(void *, char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2, s3);
OUTPUT:
	RETVAL

short
nci_sptps( c_func, p0, t1, p2, s3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	short s3
PREINIT:
	short(*func)(void *, char *, void *, short);
CODE:
	func   = INT2PTR(short(*)(void *, char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2, s3);
OUTPUT:
	RETVAL

float
nci_fptps( c_func, p0, t1, p2, s3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	short s3
PREINIT:
	float(*func)(void *, char *, void *, short);
CODE:
	func   = INT2PTR(float(*)(void *, char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2, s3);
OUTPUT:
	RETVAL

char *
nci_tptps( c_func, p0, t1, p2, s3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	short s3
PREINIT:
	char *(*func)(void *, char *, void *, short);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2, s3);
OUTPUT:
	RETVAL

int
nci_iptps( c_func, p0, t1, p2, s3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	short s3
PREINIT:
	int(*func)(void *, char *, void *, short);
CODE:
	func   = INT2PTR(int(*)(void *, char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2, s3);
OUTPUT:
	RETVAL

void *
nci_pvtps( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvtps( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvtps( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svtps( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvtps( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvtps( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivtps( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdtps( c_func, d0, t1, p2, s3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	short s3
PREINIT:
	void *(*func)(double, char *, void *, short);
CODE:
	func   = INT2PTR(void *(*)(double, char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2, s3);
OUTPUT:
	RETVAL

void
nci_vdtps( c_func, d0, t1, p2, s3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	short s3
PREINIT:
	void(*func)(double, char *, void *, short);
CODE:
	func   = INT2PTR(void(*)(double, char *, void *, short), SvIV(c_func) );
	(*func)(d0, t1, p2, s3);

double
nci_ddtps( c_func, d0, t1, p2, s3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	short s3
PREINIT:
	double(*func)(double, char *, void *, short);
CODE:
	func   = INT2PTR(double(*)(double, char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2, s3);
OUTPUT:
	RETVAL

short
nci_sdtps( c_func, d0, t1, p2, s3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	short s3
PREINIT:
	short(*func)(double, char *, void *, short);
CODE:
	func   = INT2PTR(short(*)(double, char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2, s3);
OUTPUT:
	RETVAL

float
nci_fdtps( c_func, d0, t1, p2, s3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	short s3
PREINIT:
	float(*func)(double, char *, void *, short);
CODE:
	func   = INT2PTR(float(*)(double, char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2, s3);
OUTPUT:
	RETVAL

char *
nci_tdtps( c_func, d0, t1, p2, s3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	short s3
PREINIT:
	char *(*func)(double, char *, void *, short);
CODE:
	func   = INT2PTR(char *(*)(double, char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2, s3);
OUTPUT:
	RETVAL

int
nci_idtps( c_func, d0, t1, p2, s3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	short s3
PREINIT:
	int(*func)(double, char *, void *, short);
CODE:
	func   = INT2PTR(int(*)(double, char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2, s3);
OUTPUT:
	RETVAL

void *
nci_pstps( c_func, s0, t1, p2, s3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	short s3
PREINIT:
	void *(*func)(short, char *, void *, short);
CODE:
	func   = INT2PTR(void *(*)(short, char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2, s3);
OUTPUT:
	RETVAL

void
nci_vstps( c_func, s0, t1, p2, s3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	short s3
PREINIT:
	void(*func)(short, char *, void *, short);
CODE:
	func   = INT2PTR(void(*)(short, char *, void *, short), SvIV(c_func) );
	(*func)(s0, t1, p2, s3);

double
nci_dstps( c_func, s0, t1, p2, s3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	short s3
PREINIT:
	double(*func)(short, char *, void *, short);
CODE:
	func   = INT2PTR(double(*)(short, char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2, s3);
OUTPUT:
	RETVAL

short
nci_sstps( c_func, s0, t1, p2, s3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	short s3
PREINIT:
	short(*func)(short, char *, void *, short);
CODE:
	func   = INT2PTR(short(*)(short, char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2, s3);
OUTPUT:
	RETVAL

float
nci_fstps( c_func, s0, t1, p2, s3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	short s3
PREINIT:
	float(*func)(short, char *, void *, short);
CODE:
	func   = INT2PTR(float(*)(short, char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2, s3);
OUTPUT:
	RETVAL

char *
nci_tstps( c_func, s0, t1, p2, s3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	short s3
PREINIT:
	char *(*func)(short, char *, void *, short);
CODE:
	func   = INT2PTR(char *(*)(short, char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2, s3);
OUTPUT:
	RETVAL

int
nci_istps( c_func, s0, t1, p2, s3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	short s3
PREINIT:
	int(*func)(short, char *, void *, short);
CODE:
	func   = INT2PTR(int(*)(short, char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2, s3);
OUTPUT:
	RETVAL

void *
nci_pftps( c_func, f0, t1, p2, s3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	short s3
PREINIT:
	void *(*func)(float, char *, void *, short);
CODE:
	func   = INT2PTR(void *(*)(float, char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2, s3);
OUTPUT:
	RETVAL

void
nci_vftps( c_func, f0, t1, p2, s3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	short s3
PREINIT:
	void(*func)(float, char *, void *, short);
CODE:
	func   = INT2PTR(void(*)(float, char *, void *, short), SvIV(c_func) );
	(*func)(f0, t1, p2, s3);

double
nci_dftps( c_func, f0, t1, p2, s3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	short s3
PREINIT:
	double(*func)(float, char *, void *, short);
CODE:
	func   = INT2PTR(double(*)(float, char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2, s3);
OUTPUT:
	RETVAL

short
nci_sftps( c_func, f0, t1, p2, s3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	short s3
PREINIT:
	short(*func)(float, char *, void *, short);
CODE:
	func   = INT2PTR(short(*)(float, char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2, s3);
OUTPUT:
	RETVAL

float
nci_fftps( c_func, f0, t1, p2, s3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	short s3
PREINIT:
	float(*func)(float, char *, void *, short);
CODE:
	func   = INT2PTR(float(*)(float, char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2, s3);
OUTPUT:
	RETVAL

char *
nci_tftps( c_func, f0, t1, p2, s3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	short s3
PREINIT:
	char *(*func)(float, char *, void *, short);
CODE:
	func   = INT2PTR(char *(*)(float, char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2, s3);
OUTPUT:
	RETVAL

int
nci_iftps( c_func, f0, t1, p2, s3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	short s3
PREINIT:
	int(*func)(float, char *, void *, short);
CODE:
	func   = INT2PTR(int(*)(float, char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2, s3);
OUTPUT:
	RETVAL

void *
nci_pttps( c_func, t0, t1, p2, s3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	short s3
PREINIT:
	void *(*func)(char *, char *, void *, short);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2, s3);
OUTPUT:
	RETVAL

void
nci_vttps( c_func, t0, t1, p2, s3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	short s3
PREINIT:
	void(*func)(char *, char *, void *, short);
CODE:
	func   = INT2PTR(void(*)(char *, char *, void *, short), SvIV(c_func) );
	(*func)(t0, t1, p2, s3);

double
nci_dttps( c_func, t0, t1, p2, s3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	short s3
PREINIT:
	double(*func)(char *, char *, void *, short);
CODE:
	func   = INT2PTR(double(*)(char *, char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2, s3);
OUTPUT:
	RETVAL

short
nci_sttps( c_func, t0, t1, p2, s3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	short s3
PREINIT:
	short(*func)(char *, char *, void *, short);
CODE:
	func   = INT2PTR(short(*)(char *, char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2, s3);
OUTPUT:
	RETVAL

float
nci_fttps( c_func, t0, t1, p2, s3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	short s3
PREINIT:
	float(*func)(char *, char *, void *, short);
CODE:
	func   = INT2PTR(float(*)(char *, char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2, s3);
OUTPUT:
	RETVAL

char *
nci_tttps( c_func, t0, t1, p2, s3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	short s3
PREINIT:
	char *(*func)(char *, char *, void *, short);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2, s3);
OUTPUT:
	RETVAL

int
nci_ittps( c_func, t0, t1, p2, s3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	short s3
PREINIT:
	int(*func)(char *, char *, void *, short);
CODE:
	func   = INT2PTR(int(*)(char *, char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2, s3);
OUTPUT:
	RETVAL

void *
nci_pitps( c_func, i0, t1, p2, s3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	short s3
PREINIT:
	void *(*func)(int, char *, void *, short);
CODE:
	func   = INT2PTR(void *(*)(int, char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2, s3);
OUTPUT:
	RETVAL

void
nci_vitps( c_func, i0, t1, p2, s3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	short s3
PREINIT:
	void(*func)(int, char *, void *, short);
CODE:
	func   = INT2PTR(void(*)(int, char *, void *, short), SvIV(c_func) );
	(*func)(i0, t1, p2, s3);

double
nci_ditps( c_func, i0, t1, p2, s3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	short s3
PREINIT:
	double(*func)(int, char *, void *, short);
CODE:
	func   = INT2PTR(double(*)(int, char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2, s3);
OUTPUT:
	RETVAL

short
nci_sitps( c_func, i0, t1, p2, s3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	short s3
PREINIT:
	short(*func)(int, char *, void *, short);
CODE:
	func   = INT2PTR(short(*)(int, char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2, s3);
OUTPUT:
	RETVAL

float
nci_fitps( c_func, i0, t1, p2, s3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	short s3
PREINIT:
	float(*func)(int, char *, void *, short);
CODE:
	func   = INT2PTR(float(*)(int, char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2, s3);
OUTPUT:
	RETVAL

char *
nci_titps( c_func, i0, t1, p2, s3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	short s3
PREINIT:
	char *(*func)(int, char *, void *, short);
CODE:
	func   = INT2PTR(char *(*)(int, char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2, s3);
OUTPUT:
	RETVAL

int
nci_iitps( c_func, i0, t1, p2, s3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	short s3
PREINIT:
	int(*func)(int, char *, void *, short);
CODE:
	func   = INT2PTR(int(*)(int, char *, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2, s3);
OUTPUT:
	RETVAL

void *
nci_ppips( c_func, p0, i1, p2, s3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	short s3
PREINIT:
	void *(*func)(void *, int, void *, short);
CODE:
	func   = INT2PTR(void *(*)(void *, int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2, s3);
OUTPUT:
	RETVAL

void
nci_vpips( c_func, p0, i1, p2, s3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	short s3
PREINIT:
	void(*func)(void *, int, void *, short);
CODE:
	func   = INT2PTR(void(*)(void *, int, void *, short), SvIV(c_func) );
	(*func)(p0, i1, p2, s3);

double
nci_dpips( c_func, p0, i1, p2, s3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	short s3
PREINIT:
	double(*func)(void *, int, void *, short);
CODE:
	func   = INT2PTR(double(*)(void *, int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2, s3);
OUTPUT:
	RETVAL

short
nci_spips( c_func, p0, i1, p2, s3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	short s3
PREINIT:
	short(*func)(void *, int, void *, short);
CODE:
	func   = INT2PTR(short(*)(void *, int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2, s3);
OUTPUT:
	RETVAL

float
nci_fpips( c_func, p0, i1, p2, s3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	short s3
PREINIT:
	float(*func)(void *, int, void *, short);
CODE:
	func   = INT2PTR(float(*)(void *, int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2, s3);
OUTPUT:
	RETVAL

char *
nci_tpips( c_func, p0, i1, p2, s3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	short s3
PREINIT:
	char *(*func)(void *, int, void *, short);
CODE:
	func   = INT2PTR(char *(*)(void *, int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2, s3);
OUTPUT:
	RETVAL

int
nci_ipips( c_func, p0, i1, p2, s3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	short s3
PREINIT:
	int(*func)(void *, int, void *, short);
CODE:
	func   = INT2PTR(int(*)(void *, int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2, s3);
OUTPUT:
	RETVAL

void *
nci_pvips( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvips( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvips( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svips( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvips( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvips( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivips( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdips( c_func, d0, i1, p2, s3 )
	SV* c_func
	double d0
	int i1
	void * p2
	short s3
PREINIT:
	void *(*func)(double, int, void *, short);
CODE:
	func   = INT2PTR(void *(*)(double, int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2, s3);
OUTPUT:
	RETVAL

void
nci_vdips( c_func, d0, i1, p2, s3 )
	SV* c_func
	double d0
	int i1
	void * p2
	short s3
PREINIT:
	void(*func)(double, int, void *, short);
CODE:
	func   = INT2PTR(void(*)(double, int, void *, short), SvIV(c_func) );
	(*func)(d0, i1, p2, s3);

double
nci_ddips( c_func, d0, i1, p2, s3 )
	SV* c_func
	double d0
	int i1
	void * p2
	short s3
PREINIT:
	double(*func)(double, int, void *, short);
CODE:
	func   = INT2PTR(double(*)(double, int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2, s3);
OUTPUT:
	RETVAL

short
nci_sdips( c_func, d0, i1, p2, s3 )
	SV* c_func
	double d0
	int i1
	void * p2
	short s3
PREINIT:
	short(*func)(double, int, void *, short);
CODE:
	func   = INT2PTR(short(*)(double, int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2, s3);
OUTPUT:
	RETVAL

float
nci_fdips( c_func, d0, i1, p2, s3 )
	SV* c_func
	double d0
	int i1
	void * p2
	short s3
PREINIT:
	float(*func)(double, int, void *, short);
CODE:
	func   = INT2PTR(float(*)(double, int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2, s3);
OUTPUT:
	RETVAL

char *
nci_tdips( c_func, d0, i1, p2, s3 )
	SV* c_func
	double d0
	int i1
	void * p2
	short s3
PREINIT:
	char *(*func)(double, int, void *, short);
CODE:
	func   = INT2PTR(char *(*)(double, int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2, s3);
OUTPUT:
	RETVAL

int
nci_idips( c_func, d0, i1, p2, s3 )
	SV* c_func
	double d0
	int i1
	void * p2
	short s3
PREINIT:
	int(*func)(double, int, void *, short);
CODE:
	func   = INT2PTR(int(*)(double, int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2, s3);
OUTPUT:
	RETVAL

void *
nci_psips( c_func, s0, i1, p2, s3 )
	SV* c_func
	short s0
	int i1
	void * p2
	short s3
PREINIT:
	void *(*func)(short, int, void *, short);
CODE:
	func   = INT2PTR(void *(*)(short, int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2, s3);
OUTPUT:
	RETVAL

void
nci_vsips( c_func, s0, i1, p2, s3 )
	SV* c_func
	short s0
	int i1
	void * p2
	short s3
PREINIT:
	void(*func)(short, int, void *, short);
CODE:
	func   = INT2PTR(void(*)(short, int, void *, short), SvIV(c_func) );
	(*func)(s0, i1, p2, s3);

double
nci_dsips( c_func, s0, i1, p2, s3 )
	SV* c_func
	short s0
	int i1
	void * p2
	short s3
PREINIT:
	double(*func)(short, int, void *, short);
CODE:
	func   = INT2PTR(double(*)(short, int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2, s3);
OUTPUT:
	RETVAL

short
nci_ssips( c_func, s0, i1, p2, s3 )
	SV* c_func
	short s0
	int i1
	void * p2
	short s3
PREINIT:
	short(*func)(short, int, void *, short);
CODE:
	func   = INT2PTR(short(*)(short, int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2, s3);
OUTPUT:
	RETVAL

float
nci_fsips( c_func, s0, i1, p2, s3 )
	SV* c_func
	short s0
	int i1
	void * p2
	short s3
PREINIT:
	float(*func)(short, int, void *, short);
CODE:
	func   = INT2PTR(float(*)(short, int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2, s3);
OUTPUT:
	RETVAL

char *
nci_tsips( c_func, s0, i1, p2, s3 )
	SV* c_func
	short s0
	int i1
	void * p2
	short s3
PREINIT:
	char *(*func)(short, int, void *, short);
CODE:
	func   = INT2PTR(char *(*)(short, int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2, s3);
OUTPUT:
	RETVAL

int
nci_isips( c_func, s0, i1, p2, s3 )
	SV* c_func
	short s0
	int i1
	void * p2
	short s3
PREINIT:
	int(*func)(short, int, void *, short);
CODE:
	func   = INT2PTR(int(*)(short, int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2, s3);
OUTPUT:
	RETVAL

void *
nci_pfips( c_func, f0, i1, p2, s3 )
	SV* c_func
	float f0
	int i1
	void * p2
	short s3
PREINIT:
	void *(*func)(float, int, void *, short);
CODE:
	func   = INT2PTR(void *(*)(float, int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2, s3);
OUTPUT:
	RETVAL

void
nci_vfips( c_func, f0, i1, p2, s3 )
	SV* c_func
	float f0
	int i1
	void * p2
	short s3
PREINIT:
	void(*func)(float, int, void *, short);
CODE:
	func   = INT2PTR(void(*)(float, int, void *, short), SvIV(c_func) );
	(*func)(f0, i1, p2, s3);

double
nci_dfips( c_func, f0, i1, p2, s3 )
	SV* c_func
	float f0
	int i1
	void * p2
	short s3
PREINIT:
	double(*func)(float, int, void *, short);
CODE:
	func   = INT2PTR(double(*)(float, int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2, s3);
OUTPUT:
	RETVAL

short
nci_sfips( c_func, f0, i1, p2, s3 )
	SV* c_func
	float f0
	int i1
	void * p2
	short s3
PREINIT:
	short(*func)(float, int, void *, short);
CODE:
	func   = INT2PTR(short(*)(float, int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2, s3);
OUTPUT:
	RETVAL

float
nci_ffips( c_func, f0, i1, p2, s3 )
	SV* c_func
	float f0
	int i1
	void * p2
	short s3
PREINIT:
	float(*func)(float, int, void *, short);
CODE:
	func   = INT2PTR(float(*)(float, int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2, s3);
OUTPUT:
	RETVAL

char *
nci_tfips( c_func, f0, i1, p2, s3 )
	SV* c_func
	float f0
	int i1
	void * p2
	short s3
PREINIT:
	char *(*func)(float, int, void *, short);
CODE:
	func   = INT2PTR(char *(*)(float, int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2, s3);
OUTPUT:
	RETVAL

int
nci_ifips( c_func, f0, i1, p2, s3 )
	SV* c_func
	float f0
	int i1
	void * p2
	short s3
PREINIT:
	int(*func)(float, int, void *, short);
CODE:
	func   = INT2PTR(int(*)(float, int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2, s3);
OUTPUT:
	RETVAL

void *
nci_ptips( c_func, t0, i1, p2, s3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	short s3
PREINIT:
	void *(*func)(char *, int, void *, short);
CODE:
	func   = INT2PTR(void *(*)(char *, int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2, s3);
OUTPUT:
	RETVAL

void
nci_vtips( c_func, t0, i1, p2, s3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	short s3
PREINIT:
	void(*func)(char *, int, void *, short);
CODE:
	func   = INT2PTR(void(*)(char *, int, void *, short), SvIV(c_func) );
	(*func)(t0, i1, p2, s3);

double
nci_dtips( c_func, t0, i1, p2, s3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	short s3
PREINIT:
	double(*func)(char *, int, void *, short);
CODE:
	func   = INT2PTR(double(*)(char *, int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2, s3);
OUTPUT:
	RETVAL

short
nci_stips( c_func, t0, i1, p2, s3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	short s3
PREINIT:
	short(*func)(char *, int, void *, short);
CODE:
	func   = INT2PTR(short(*)(char *, int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2, s3);
OUTPUT:
	RETVAL

float
nci_ftips( c_func, t0, i1, p2, s3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	short s3
PREINIT:
	float(*func)(char *, int, void *, short);
CODE:
	func   = INT2PTR(float(*)(char *, int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2, s3);
OUTPUT:
	RETVAL

char *
nci_ttips( c_func, t0, i1, p2, s3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	short s3
PREINIT:
	char *(*func)(char *, int, void *, short);
CODE:
	func   = INT2PTR(char *(*)(char *, int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2, s3);
OUTPUT:
	RETVAL

int
nci_itips( c_func, t0, i1, p2, s3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	short s3
PREINIT:
	int(*func)(char *, int, void *, short);
CODE:
	func   = INT2PTR(int(*)(char *, int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2, s3);
OUTPUT:
	RETVAL

void *
nci_piips( c_func, i0, i1, p2, s3 )
	SV* c_func
	int i0
	int i1
	void * p2
	short s3
PREINIT:
	void *(*func)(int, int, void *, short);
CODE:
	func   = INT2PTR(void *(*)(int, int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2, s3);
OUTPUT:
	RETVAL

void
nci_viips( c_func, i0, i1, p2, s3 )
	SV* c_func
	int i0
	int i1
	void * p2
	short s3
PREINIT:
	void(*func)(int, int, void *, short);
CODE:
	func   = INT2PTR(void(*)(int, int, void *, short), SvIV(c_func) );
	(*func)(i0, i1, p2, s3);

double
nci_diips( c_func, i0, i1, p2, s3 )
	SV* c_func
	int i0
	int i1
	void * p2
	short s3
PREINIT:
	double(*func)(int, int, void *, short);
CODE:
	func   = INT2PTR(double(*)(int, int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2, s3);
OUTPUT:
	RETVAL

short
nci_siips( c_func, i0, i1, p2, s3 )
	SV* c_func
	int i0
	int i1
	void * p2
	short s3
PREINIT:
	short(*func)(int, int, void *, short);
CODE:
	func   = INT2PTR(short(*)(int, int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2, s3);
OUTPUT:
	RETVAL

float
nci_fiips( c_func, i0, i1, p2, s3 )
	SV* c_func
	int i0
	int i1
	void * p2
	short s3
PREINIT:
	float(*func)(int, int, void *, short);
CODE:
	func   = INT2PTR(float(*)(int, int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2, s3);
OUTPUT:
	RETVAL

char *
nci_tiips( c_func, i0, i1, p2, s3 )
	SV* c_func
	int i0
	int i1
	void * p2
	short s3
PREINIT:
	char *(*func)(int, int, void *, short);
CODE:
	func   = INT2PTR(char *(*)(int, int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2, s3);
OUTPUT:
	RETVAL

int
nci_iiips( c_func, i0, i1, p2, s3 )
	SV* c_func
	int i0
	int i1
	void * p2
	short s3
PREINIT:
	int(*func)(int, int, void *, short);
CODE:
	func   = INT2PTR(int(*)(int, int, void *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2, s3);
OUTPUT:
	RETVAL

void *
nci_pppds( c_func, p0, p1, d2, s3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	short s3
PREINIT:
	void *(*func)(void *, void *, double, short);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2, s3);
OUTPUT:
	RETVAL

void
nci_vppds( c_func, p0, p1, d2, s3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	short s3
PREINIT:
	void(*func)(void *, void *, double, short);
CODE:
	func   = INT2PTR(void(*)(void *, void *, double, short), SvIV(c_func) );
	(*func)(p0, p1, d2, s3);

double
nci_dppds( c_func, p0, p1, d2, s3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	short s3
PREINIT:
	double(*func)(void *, void *, double, short);
CODE:
	func   = INT2PTR(double(*)(void *, void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2, s3);
OUTPUT:
	RETVAL

short
nci_sppds( c_func, p0, p1, d2, s3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	short s3
PREINIT:
	short(*func)(void *, void *, double, short);
CODE:
	func   = INT2PTR(short(*)(void *, void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2, s3);
OUTPUT:
	RETVAL

float
nci_fppds( c_func, p0, p1, d2, s3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	short s3
PREINIT:
	float(*func)(void *, void *, double, short);
CODE:
	func   = INT2PTR(float(*)(void *, void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2, s3);
OUTPUT:
	RETVAL

char *
nci_tppds( c_func, p0, p1, d2, s3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	short s3
PREINIT:
	char *(*func)(void *, void *, double, short);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2, s3);
OUTPUT:
	RETVAL

int
nci_ippds( c_func, p0, p1, d2, s3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	short s3
PREINIT:
	int(*func)(void *, void *, double, short);
CODE:
	func   = INT2PTR(int(*)(void *, void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2, s3);
OUTPUT:
	RETVAL

void *
nci_pvpds( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvpds( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvpds( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svpds( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvpds( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvpds( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivpds( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdpds( c_func, d0, p1, d2, s3 )
	SV* c_func
	double d0
	void * p1
	double d2
	short s3
PREINIT:
	void *(*func)(double, void *, double, short);
CODE:
	func   = INT2PTR(void *(*)(double, void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2, s3);
OUTPUT:
	RETVAL

void
nci_vdpds( c_func, d0, p1, d2, s3 )
	SV* c_func
	double d0
	void * p1
	double d2
	short s3
PREINIT:
	void(*func)(double, void *, double, short);
CODE:
	func   = INT2PTR(void(*)(double, void *, double, short), SvIV(c_func) );
	(*func)(d0, p1, d2, s3);

double
nci_ddpds( c_func, d0, p1, d2, s3 )
	SV* c_func
	double d0
	void * p1
	double d2
	short s3
PREINIT:
	double(*func)(double, void *, double, short);
CODE:
	func   = INT2PTR(double(*)(double, void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2, s3);
OUTPUT:
	RETVAL

short
nci_sdpds( c_func, d0, p1, d2, s3 )
	SV* c_func
	double d0
	void * p1
	double d2
	short s3
PREINIT:
	short(*func)(double, void *, double, short);
CODE:
	func   = INT2PTR(short(*)(double, void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2, s3);
OUTPUT:
	RETVAL

float
nci_fdpds( c_func, d0, p1, d2, s3 )
	SV* c_func
	double d0
	void * p1
	double d2
	short s3
PREINIT:
	float(*func)(double, void *, double, short);
CODE:
	func   = INT2PTR(float(*)(double, void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2, s3);
OUTPUT:
	RETVAL

char *
nci_tdpds( c_func, d0, p1, d2, s3 )
	SV* c_func
	double d0
	void * p1
	double d2
	short s3
PREINIT:
	char *(*func)(double, void *, double, short);
CODE:
	func   = INT2PTR(char *(*)(double, void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2, s3);
OUTPUT:
	RETVAL

int
nci_idpds( c_func, d0, p1, d2, s3 )
	SV* c_func
	double d0
	void * p1
	double d2
	short s3
PREINIT:
	int(*func)(double, void *, double, short);
CODE:
	func   = INT2PTR(int(*)(double, void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2, s3);
OUTPUT:
	RETVAL

void *
nci_pspds( c_func, s0, p1, d2, s3 )
	SV* c_func
	short s0
	void * p1
	double d2
	short s3
PREINIT:
	void *(*func)(short, void *, double, short);
CODE:
	func   = INT2PTR(void *(*)(short, void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2, s3);
OUTPUT:
	RETVAL

void
nci_vspds( c_func, s0, p1, d2, s3 )
	SV* c_func
	short s0
	void * p1
	double d2
	short s3
PREINIT:
	void(*func)(short, void *, double, short);
CODE:
	func   = INT2PTR(void(*)(short, void *, double, short), SvIV(c_func) );
	(*func)(s0, p1, d2, s3);

double
nci_dspds( c_func, s0, p1, d2, s3 )
	SV* c_func
	short s0
	void * p1
	double d2
	short s3
PREINIT:
	double(*func)(short, void *, double, short);
CODE:
	func   = INT2PTR(double(*)(short, void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2, s3);
OUTPUT:
	RETVAL

short
nci_sspds( c_func, s0, p1, d2, s3 )
	SV* c_func
	short s0
	void * p1
	double d2
	short s3
PREINIT:
	short(*func)(short, void *, double, short);
CODE:
	func   = INT2PTR(short(*)(short, void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2, s3);
OUTPUT:
	RETVAL

float
nci_fspds( c_func, s0, p1, d2, s3 )
	SV* c_func
	short s0
	void * p1
	double d2
	short s3
PREINIT:
	float(*func)(short, void *, double, short);
CODE:
	func   = INT2PTR(float(*)(short, void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2, s3);
OUTPUT:
	RETVAL

char *
nci_tspds( c_func, s0, p1, d2, s3 )
	SV* c_func
	short s0
	void * p1
	double d2
	short s3
PREINIT:
	char *(*func)(short, void *, double, short);
CODE:
	func   = INT2PTR(char *(*)(short, void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2, s3);
OUTPUT:
	RETVAL

int
nci_ispds( c_func, s0, p1, d2, s3 )
	SV* c_func
	short s0
	void * p1
	double d2
	short s3
PREINIT:
	int(*func)(short, void *, double, short);
CODE:
	func   = INT2PTR(int(*)(short, void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2, s3);
OUTPUT:
	RETVAL

void *
nci_pfpds( c_func, f0, p1, d2, s3 )
	SV* c_func
	float f0
	void * p1
	double d2
	short s3
PREINIT:
	void *(*func)(float, void *, double, short);
CODE:
	func   = INT2PTR(void *(*)(float, void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2, s3);
OUTPUT:
	RETVAL

void
nci_vfpds( c_func, f0, p1, d2, s3 )
	SV* c_func
	float f0
	void * p1
	double d2
	short s3
PREINIT:
	void(*func)(float, void *, double, short);
CODE:
	func   = INT2PTR(void(*)(float, void *, double, short), SvIV(c_func) );
	(*func)(f0, p1, d2, s3);

double
nci_dfpds( c_func, f0, p1, d2, s3 )
	SV* c_func
	float f0
	void * p1
	double d2
	short s3
PREINIT:
	double(*func)(float, void *, double, short);
CODE:
	func   = INT2PTR(double(*)(float, void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2, s3);
OUTPUT:
	RETVAL

short
nci_sfpds( c_func, f0, p1, d2, s3 )
	SV* c_func
	float f0
	void * p1
	double d2
	short s3
PREINIT:
	short(*func)(float, void *, double, short);
CODE:
	func   = INT2PTR(short(*)(float, void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2, s3);
OUTPUT:
	RETVAL

float
nci_ffpds( c_func, f0, p1, d2, s3 )
	SV* c_func
	float f0
	void * p1
	double d2
	short s3
PREINIT:
	float(*func)(float, void *, double, short);
CODE:
	func   = INT2PTR(float(*)(float, void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2, s3);
OUTPUT:
	RETVAL

char *
nci_tfpds( c_func, f0, p1, d2, s3 )
	SV* c_func
	float f0
	void * p1
	double d2
	short s3
PREINIT:
	char *(*func)(float, void *, double, short);
CODE:
	func   = INT2PTR(char *(*)(float, void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2, s3);
OUTPUT:
	RETVAL

int
nci_ifpds( c_func, f0, p1, d2, s3 )
	SV* c_func
	float f0
	void * p1
	double d2
	short s3
PREINIT:
	int(*func)(float, void *, double, short);
CODE:
	func   = INT2PTR(int(*)(float, void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2, s3);
OUTPUT:
	RETVAL

void *
nci_ptpds( c_func, t0, p1, d2, s3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	short s3
PREINIT:
	void *(*func)(char *, void *, double, short);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2, s3);
OUTPUT:
	RETVAL

void
nci_vtpds( c_func, t0, p1, d2, s3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	short s3
PREINIT:
	void(*func)(char *, void *, double, short);
CODE:
	func   = INT2PTR(void(*)(char *, void *, double, short), SvIV(c_func) );
	(*func)(t0, p1, d2, s3);

double
nci_dtpds( c_func, t0, p1, d2, s3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	short s3
PREINIT:
	double(*func)(char *, void *, double, short);
CODE:
	func   = INT2PTR(double(*)(char *, void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2, s3);
OUTPUT:
	RETVAL

short
nci_stpds( c_func, t0, p1, d2, s3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	short s3
PREINIT:
	short(*func)(char *, void *, double, short);
CODE:
	func   = INT2PTR(short(*)(char *, void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2, s3);
OUTPUT:
	RETVAL

float
nci_ftpds( c_func, t0, p1, d2, s3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	short s3
PREINIT:
	float(*func)(char *, void *, double, short);
CODE:
	func   = INT2PTR(float(*)(char *, void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2, s3);
OUTPUT:
	RETVAL

char *
nci_ttpds( c_func, t0, p1, d2, s3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	short s3
PREINIT:
	char *(*func)(char *, void *, double, short);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2, s3);
OUTPUT:
	RETVAL

int
nci_itpds( c_func, t0, p1, d2, s3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	short s3
PREINIT:
	int(*func)(char *, void *, double, short);
CODE:
	func   = INT2PTR(int(*)(char *, void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2, s3);
OUTPUT:
	RETVAL

void *
nci_pipds( c_func, i0, p1, d2, s3 )
	SV* c_func
	int i0
	void * p1
	double d2
	short s3
PREINIT:
	void *(*func)(int, void *, double, short);
CODE:
	func   = INT2PTR(void *(*)(int, void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2, s3);
OUTPUT:
	RETVAL

void
nci_vipds( c_func, i0, p1, d2, s3 )
	SV* c_func
	int i0
	void * p1
	double d2
	short s3
PREINIT:
	void(*func)(int, void *, double, short);
CODE:
	func   = INT2PTR(void(*)(int, void *, double, short), SvIV(c_func) );
	(*func)(i0, p1, d2, s3);

double
nci_dipds( c_func, i0, p1, d2, s3 )
	SV* c_func
	int i0
	void * p1
	double d2
	short s3
PREINIT:
	double(*func)(int, void *, double, short);
CODE:
	func   = INT2PTR(double(*)(int, void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2, s3);
OUTPUT:
	RETVAL

short
nci_sipds( c_func, i0, p1, d2, s3 )
	SV* c_func
	int i0
	void * p1
	double d2
	short s3
PREINIT:
	short(*func)(int, void *, double, short);
CODE:
	func   = INT2PTR(short(*)(int, void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2, s3);
OUTPUT:
	RETVAL

float
nci_fipds( c_func, i0, p1, d2, s3 )
	SV* c_func
	int i0
	void * p1
	double d2
	short s3
PREINIT:
	float(*func)(int, void *, double, short);
CODE:
	func   = INT2PTR(float(*)(int, void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2, s3);
OUTPUT:
	RETVAL

char *
nci_tipds( c_func, i0, p1, d2, s3 )
	SV* c_func
	int i0
	void * p1
	double d2
	short s3
PREINIT:
	char *(*func)(int, void *, double, short);
CODE:
	func   = INT2PTR(char *(*)(int, void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2, s3);
OUTPUT:
	RETVAL

int
nci_iipds( c_func, i0, p1, d2, s3 )
	SV* c_func
	int i0
	void * p1
	double d2
	short s3
PREINIT:
	int(*func)(int, void *, double, short);
CODE:
	func   = INT2PTR(int(*)(int, void *, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2, s3);
OUTPUT:
	RETVAL

void *
nci_ppdds( c_func, p0, d1, d2, s3 )
	SV* c_func
	void * p0
	double d1
	double d2
	short s3
PREINIT:
	void *(*func)(void *, double, double, short);
CODE:
	func   = INT2PTR(void *(*)(void *, double, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2, s3);
OUTPUT:
	RETVAL

void
nci_vpdds( c_func, p0, d1, d2, s3 )
	SV* c_func
	void * p0
	double d1
	double d2
	short s3
PREINIT:
	void(*func)(void *, double, double, short);
CODE:
	func   = INT2PTR(void(*)(void *, double, double, short), SvIV(c_func) );
	(*func)(p0, d1, d2, s3);

double
nci_dpdds( c_func, p0, d1, d2, s3 )
	SV* c_func
	void * p0
	double d1
	double d2
	short s3
PREINIT:
	double(*func)(void *, double, double, short);
CODE:
	func   = INT2PTR(double(*)(void *, double, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2, s3);
OUTPUT:
	RETVAL

short
nci_spdds( c_func, p0, d1, d2, s3 )
	SV* c_func
	void * p0
	double d1
	double d2
	short s3
PREINIT:
	short(*func)(void *, double, double, short);
CODE:
	func   = INT2PTR(short(*)(void *, double, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2, s3);
OUTPUT:
	RETVAL

float
nci_fpdds( c_func, p0, d1, d2, s3 )
	SV* c_func
	void * p0
	double d1
	double d2
	short s3
PREINIT:
	float(*func)(void *, double, double, short);
CODE:
	func   = INT2PTR(float(*)(void *, double, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2, s3);
OUTPUT:
	RETVAL

char *
nci_tpdds( c_func, p0, d1, d2, s3 )
	SV* c_func
	void * p0
	double d1
	double d2
	short s3
PREINIT:
	char *(*func)(void *, double, double, short);
CODE:
	func   = INT2PTR(char *(*)(void *, double, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2, s3);
OUTPUT:
	RETVAL

int
nci_ipdds( c_func, p0, d1, d2, s3 )
	SV* c_func
	void * p0
	double d1
	double d2
	short s3
PREINIT:
	int(*func)(void *, double, double, short);
CODE:
	func   = INT2PTR(int(*)(void *, double, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2, s3);
OUTPUT:
	RETVAL

void *
nci_pvdds( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvdds( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvdds( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svdds( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvdds( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvdds( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivdds( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pddds( c_func, d0, d1, d2, s3 )
	SV* c_func
	double d0
	double d1
	double d2
	short s3
PREINIT:
	void *(*func)(double, double, double, short);
CODE:
	func   = INT2PTR(void *(*)(double, double, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2, s3);
OUTPUT:
	RETVAL

void
nci_vddds( c_func, d0, d1, d2, s3 )
	SV* c_func
	double d0
	double d1
	double d2
	short s3
PREINIT:
	void(*func)(double, double, double, short);
CODE:
	func   = INT2PTR(void(*)(double, double, double, short), SvIV(c_func) );
	(*func)(d0, d1, d2, s3);

double
nci_dddds( c_func, d0, d1, d2, s3 )
	SV* c_func
	double d0
	double d1
	double d2
	short s3
PREINIT:
	double(*func)(double, double, double, short);
CODE:
	func   = INT2PTR(double(*)(double, double, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2, s3);
OUTPUT:
	RETVAL

short
nci_sddds( c_func, d0, d1, d2, s3 )
	SV* c_func
	double d0
	double d1
	double d2
	short s3
PREINIT:
	short(*func)(double, double, double, short);
CODE:
	func   = INT2PTR(short(*)(double, double, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2, s3);
OUTPUT:
	RETVAL

float
nci_fddds( c_func, d0, d1, d2, s3 )
	SV* c_func
	double d0
	double d1
	double d2
	short s3
PREINIT:
	float(*func)(double, double, double, short);
CODE:
	func   = INT2PTR(float(*)(double, double, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2, s3);
OUTPUT:
	RETVAL

char *
nci_tddds( c_func, d0, d1, d2, s3 )
	SV* c_func
	double d0
	double d1
	double d2
	short s3
PREINIT:
	char *(*func)(double, double, double, short);
CODE:
	func   = INT2PTR(char *(*)(double, double, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2, s3);
OUTPUT:
	RETVAL

int
nci_iddds( c_func, d0, d1, d2, s3 )
	SV* c_func
	double d0
	double d1
	double d2
	short s3
PREINIT:
	int(*func)(double, double, double, short);
CODE:
	func   = INT2PTR(int(*)(double, double, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2, s3);
OUTPUT:
	RETVAL

void *
nci_psdds( c_func, s0, d1, d2, s3 )
	SV* c_func
	short s0
	double d1
	double d2
	short s3
PREINIT:
	void *(*func)(short, double, double, short);
CODE:
	func   = INT2PTR(void *(*)(short, double, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2, s3);
OUTPUT:
	RETVAL

void
nci_vsdds( c_func, s0, d1, d2, s3 )
	SV* c_func
	short s0
	double d1
	double d2
	short s3
PREINIT:
	void(*func)(short, double, double, short);
CODE:
	func   = INT2PTR(void(*)(short, double, double, short), SvIV(c_func) );
	(*func)(s0, d1, d2, s3);

double
nci_dsdds( c_func, s0, d1, d2, s3 )
	SV* c_func
	short s0
	double d1
	double d2
	short s3
PREINIT:
	double(*func)(short, double, double, short);
CODE:
	func   = INT2PTR(double(*)(short, double, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2, s3);
OUTPUT:
	RETVAL

short
nci_ssdds( c_func, s0, d1, d2, s3 )
	SV* c_func
	short s0
	double d1
	double d2
	short s3
PREINIT:
	short(*func)(short, double, double, short);
CODE:
	func   = INT2PTR(short(*)(short, double, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2, s3);
OUTPUT:
	RETVAL

float
nci_fsdds( c_func, s0, d1, d2, s3 )
	SV* c_func
	short s0
	double d1
	double d2
	short s3
PREINIT:
	float(*func)(short, double, double, short);
CODE:
	func   = INT2PTR(float(*)(short, double, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2, s3);
OUTPUT:
	RETVAL

char *
nci_tsdds( c_func, s0, d1, d2, s3 )
	SV* c_func
	short s0
	double d1
	double d2
	short s3
PREINIT:
	char *(*func)(short, double, double, short);
CODE:
	func   = INT2PTR(char *(*)(short, double, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2, s3);
OUTPUT:
	RETVAL

int
nci_isdds( c_func, s0, d1, d2, s3 )
	SV* c_func
	short s0
	double d1
	double d2
	short s3
PREINIT:
	int(*func)(short, double, double, short);
CODE:
	func   = INT2PTR(int(*)(short, double, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2, s3);
OUTPUT:
	RETVAL

void *
nci_pfdds( c_func, f0, d1, d2, s3 )
	SV* c_func
	float f0
	double d1
	double d2
	short s3
PREINIT:
	void *(*func)(float, double, double, short);
CODE:
	func   = INT2PTR(void *(*)(float, double, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2, s3);
OUTPUT:
	RETVAL

void
nci_vfdds( c_func, f0, d1, d2, s3 )
	SV* c_func
	float f0
	double d1
	double d2
	short s3
PREINIT:
	void(*func)(float, double, double, short);
CODE:
	func   = INT2PTR(void(*)(float, double, double, short), SvIV(c_func) );
	(*func)(f0, d1, d2, s3);

double
nci_dfdds( c_func, f0, d1, d2, s3 )
	SV* c_func
	float f0
	double d1
	double d2
	short s3
PREINIT:
	double(*func)(float, double, double, short);
CODE:
	func   = INT2PTR(double(*)(float, double, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2, s3);
OUTPUT:
	RETVAL

short
nci_sfdds( c_func, f0, d1, d2, s3 )
	SV* c_func
	float f0
	double d1
	double d2
	short s3
PREINIT:
	short(*func)(float, double, double, short);
CODE:
	func   = INT2PTR(short(*)(float, double, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2, s3);
OUTPUT:
	RETVAL

float
nci_ffdds( c_func, f0, d1, d2, s3 )
	SV* c_func
	float f0
	double d1
	double d2
	short s3
PREINIT:
	float(*func)(float, double, double, short);
CODE:
	func   = INT2PTR(float(*)(float, double, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2, s3);
OUTPUT:
	RETVAL

char *
nci_tfdds( c_func, f0, d1, d2, s3 )
	SV* c_func
	float f0
	double d1
	double d2
	short s3
PREINIT:
	char *(*func)(float, double, double, short);
CODE:
	func   = INT2PTR(char *(*)(float, double, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2, s3);
OUTPUT:
	RETVAL

int
nci_ifdds( c_func, f0, d1, d2, s3 )
	SV* c_func
	float f0
	double d1
	double d2
	short s3
PREINIT:
	int(*func)(float, double, double, short);
CODE:
	func   = INT2PTR(int(*)(float, double, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2, s3);
OUTPUT:
	RETVAL

void *
nci_ptdds( c_func, t0, d1, d2, s3 )
	SV* c_func
	char * t0
	double d1
	double d2
	short s3
PREINIT:
	void *(*func)(char *, double, double, short);
CODE:
	func   = INT2PTR(void *(*)(char *, double, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2, s3);
OUTPUT:
	RETVAL

void
nci_vtdds( c_func, t0, d1, d2, s3 )
	SV* c_func
	char * t0
	double d1
	double d2
	short s3
PREINIT:
	void(*func)(char *, double, double, short);
CODE:
	func   = INT2PTR(void(*)(char *, double, double, short), SvIV(c_func) );
	(*func)(t0, d1, d2, s3);

double
nci_dtdds( c_func, t0, d1, d2, s3 )
	SV* c_func
	char * t0
	double d1
	double d2
	short s3
PREINIT:
	double(*func)(char *, double, double, short);
CODE:
	func   = INT2PTR(double(*)(char *, double, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2, s3);
OUTPUT:
	RETVAL

short
nci_stdds( c_func, t0, d1, d2, s3 )
	SV* c_func
	char * t0
	double d1
	double d2
	short s3
PREINIT:
	short(*func)(char *, double, double, short);
CODE:
	func   = INT2PTR(short(*)(char *, double, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2, s3);
OUTPUT:
	RETVAL

float
nci_ftdds( c_func, t0, d1, d2, s3 )
	SV* c_func
	char * t0
	double d1
	double d2
	short s3
PREINIT:
	float(*func)(char *, double, double, short);
CODE:
	func   = INT2PTR(float(*)(char *, double, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2, s3);
OUTPUT:
	RETVAL

char *
nci_ttdds( c_func, t0, d1, d2, s3 )
	SV* c_func
	char * t0
	double d1
	double d2
	short s3
PREINIT:
	char *(*func)(char *, double, double, short);
CODE:
	func   = INT2PTR(char *(*)(char *, double, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2, s3);
OUTPUT:
	RETVAL

int
nci_itdds( c_func, t0, d1, d2, s3 )
	SV* c_func
	char * t0
	double d1
	double d2
	short s3
PREINIT:
	int(*func)(char *, double, double, short);
CODE:
	func   = INT2PTR(int(*)(char *, double, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2, s3);
OUTPUT:
	RETVAL

void *
nci_pidds( c_func, i0, d1, d2, s3 )
	SV* c_func
	int i0
	double d1
	double d2
	short s3
PREINIT:
	void *(*func)(int, double, double, short);
CODE:
	func   = INT2PTR(void *(*)(int, double, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2, s3);
OUTPUT:
	RETVAL

void
nci_vidds( c_func, i0, d1, d2, s3 )
	SV* c_func
	int i0
	double d1
	double d2
	short s3
PREINIT:
	void(*func)(int, double, double, short);
CODE:
	func   = INT2PTR(void(*)(int, double, double, short), SvIV(c_func) );
	(*func)(i0, d1, d2, s3);

double
nci_didds( c_func, i0, d1, d2, s3 )
	SV* c_func
	int i0
	double d1
	double d2
	short s3
PREINIT:
	double(*func)(int, double, double, short);
CODE:
	func   = INT2PTR(double(*)(int, double, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2, s3);
OUTPUT:
	RETVAL

short
nci_sidds( c_func, i0, d1, d2, s3 )
	SV* c_func
	int i0
	double d1
	double d2
	short s3
PREINIT:
	short(*func)(int, double, double, short);
CODE:
	func   = INT2PTR(short(*)(int, double, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2, s3);
OUTPUT:
	RETVAL

float
nci_fidds( c_func, i0, d1, d2, s3 )
	SV* c_func
	int i0
	double d1
	double d2
	short s3
PREINIT:
	float(*func)(int, double, double, short);
CODE:
	func   = INT2PTR(float(*)(int, double, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2, s3);
OUTPUT:
	RETVAL

char *
nci_tidds( c_func, i0, d1, d2, s3 )
	SV* c_func
	int i0
	double d1
	double d2
	short s3
PREINIT:
	char *(*func)(int, double, double, short);
CODE:
	func   = INT2PTR(char *(*)(int, double, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2, s3);
OUTPUT:
	RETVAL

int
nci_iidds( c_func, i0, d1, d2, s3 )
	SV* c_func
	int i0
	double d1
	double d2
	short s3
PREINIT:
	int(*func)(int, double, double, short);
CODE:
	func   = INT2PTR(int(*)(int, double, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2, s3);
OUTPUT:
	RETVAL

void *
nci_ppsds( c_func, p0, s1, d2, s3 )
	SV* c_func
	void * p0
	short s1
	double d2
	short s3
PREINIT:
	void *(*func)(void *, short, double, short);
CODE:
	func   = INT2PTR(void *(*)(void *, short, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2, s3);
OUTPUT:
	RETVAL

void
nci_vpsds( c_func, p0, s1, d2, s3 )
	SV* c_func
	void * p0
	short s1
	double d2
	short s3
PREINIT:
	void(*func)(void *, short, double, short);
CODE:
	func   = INT2PTR(void(*)(void *, short, double, short), SvIV(c_func) );
	(*func)(p0, s1, d2, s3);

double
nci_dpsds( c_func, p0, s1, d2, s3 )
	SV* c_func
	void * p0
	short s1
	double d2
	short s3
PREINIT:
	double(*func)(void *, short, double, short);
CODE:
	func   = INT2PTR(double(*)(void *, short, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2, s3);
OUTPUT:
	RETVAL

short
nci_spsds( c_func, p0, s1, d2, s3 )
	SV* c_func
	void * p0
	short s1
	double d2
	short s3
PREINIT:
	short(*func)(void *, short, double, short);
CODE:
	func   = INT2PTR(short(*)(void *, short, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2, s3);
OUTPUT:
	RETVAL

float
nci_fpsds( c_func, p0, s1, d2, s3 )
	SV* c_func
	void * p0
	short s1
	double d2
	short s3
PREINIT:
	float(*func)(void *, short, double, short);
CODE:
	func   = INT2PTR(float(*)(void *, short, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2, s3);
OUTPUT:
	RETVAL

char *
nci_tpsds( c_func, p0, s1, d2, s3 )
	SV* c_func
	void * p0
	short s1
	double d2
	short s3
PREINIT:
	char *(*func)(void *, short, double, short);
CODE:
	func   = INT2PTR(char *(*)(void *, short, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2, s3);
OUTPUT:
	RETVAL

int
nci_ipsds( c_func, p0, s1, d2, s3 )
	SV* c_func
	void * p0
	short s1
	double d2
	short s3
PREINIT:
	int(*func)(void *, short, double, short);
CODE:
	func   = INT2PTR(int(*)(void *, short, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2, s3);
OUTPUT:
	RETVAL

void *
nci_pvsds( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvsds( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvsds( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svsds( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvsds( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvsds( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivsds( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdsds( c_func, d0, s1, d2, s3 )
	SV* c_func
	double d0
	short s1
	double d2
	short s3
PREINIT:
	void *(*func)(double, short, double, short);
CODE:
	func   = INT2PTR(void *(*)(double, short, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2, s3);
OUTPUT:
	RETVAL

void
nci_vdsds( c_func, d0, s1, d2, s3 )
	SV* c_func
	double d0
	short s1
	double d2
	short s3
PREINIT:
	void(*func)(double, short, double, short);
CODE:
	func   = INT2PTR(void(*)(double, short, double, short), SvIV(c_func) );
	(*func)(d0, s1, d2, s3);

double
nci_ddsds( c_func, d0, s1, d2, s3 )
	SV* c_func
	double d0
	short s1
	double d2
	short s3
PREINIT:
	double(*func)(double, short, double, short);
CODE:
	func   = INT2PTR(double(*)(double, short, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2, s3);
OUTPUT:
	RETVAL

short
nci_sdsds( c_func, d0, s1, d2, s3 )
	SV* c_func
	double d0
	short s1
	double d2
	short s3
PREINIT:
	short(*func)(double, short, double, short);
CODE:
	func   = INT2PTR(short(*)(double, short, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2, s3);
OUTPUT:
	RETVAL

float
nci_fdsds( c_func, d0, s1, d2, s3 )
	SV* c_func
	double d0
	short s1
	double d2
	short s3
PREINIT:
	float(*func)(double, short, double, short);
CODE:
	func   = INT2PTR(float(*)(double, short, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2, s3);
OUTPUT:
	RETVAL

char *
nci_tdsds( c_func, d0, s1, d2, s3 )
	SV* c_func
	double d0
	short s1
	double d2
	short s3
PREINIT:
	char *(*func)(double, short, double, short);
CODE:
	func   = INT2PTR(char *(*)(double, short, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2, s3);
OUTPUT:
	RETVAL

int
nci_idsds( c_func, d0, s1, d2, s3 )
	SV* c_func
	double d0
	short s1
	double d2
	short s3
PREINIT:
	int(*func)(double, short, double, short);
CODE:
	func   = INT2PTR(int(*)(double, short, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2, s3);
OUTPUT:
	RETVAL

void *
nci_pssds( c_func, s0, s1, d2, s3 )
	SV* c_func
	short s0
	short s1
	double d2
	short s3
PREINIT:
	void *(*func)(short, short, double, short);
CODE:
	func   = INT2PTR(void *(*)(short, short, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2, s3);
OUTPUT:
	RETVAL

void
nci_vssds( c_func, s0, s1, d2, s3 )
	SV* c_func
	short s0
	short s1
	double d2
	short s3
PREINIT:
	void(*func)(short, short, double, short);
CODE:
	func   = INT2PTR(void(*)(short, short, double, short), SvIV(c_func) );
	(*func)(s0, s1, d2, s3);

double
nci_dssds( c_func, s0, s1, d2, s3 )
	SV* c_func
	short s0
	short s1
	double d2
	short s3
PREINIT:
	double(*func)(short, short, double, short);
CODE:
	func   = INT2PTR(double(*)(short, short, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2, s3);
OUTPUT:
	RETVAL

short
nci_sssds( c_func, s0, s1, d2, s3 )
	SV* c_func
	short s0
	short s1
	double d2
	short s3
PREINIT:
	short(*func)(short, short, double, short);
CODE:
	func   = INT2PTR(short(*)(short, short, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2, s3);
OUTPUT:
	RETVAL

float
nci_fssds( c_func, s0, s1, d2, s3 )
	SV* c_func
	short s0
	short s1
	double d2
	short s3
PREINIT:
	float(*func)(short, short, double, short);
CODE:
	func   = INT2PTR(float(*)(short, short, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2, s3);
OUTPUT:
	RETVAL

char *
nci_tssds( c_func, s0, s1, d2, s3 )
	SV* c_func
	short s0
	short s1
	double d2
	short s3
PREINIT:
	char *(*func)(short, short, double, short);
CODE:
	func   = INT2PTR(char *(*)(short, short, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2, s3);
OUTPUT:
	RETVAL

int
nci_issds( c_func, s0, s1, d2, s3 )
	SV* c_func
	short s0
	short s1
	double d2
	short s3
PREINIT:
	int(*func)(short, short, double, short);
CODE:
	func   = INT2PTR(int(*)(short, short, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2, s3);
OUTPUT:
	RETVAL

void *
nci_pfsds( c_func, f0, s1, d2, s3 )
	SV* c_func
	float f0
	short s1
	double d2
	short s3
PREINIT:
	void *(*func)(float, short, double, short);
CODE:
	func   = INT2PTR(void *(*)(float, short, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2, s3);
OUTPUT:
	RETVAL

void
nci_vfsds( c_func, f0, s1, d2, s3 )
	SV* c_func
	float f0
	short s1
	double d2
	short s3
PREINIT:
	void(*func)(float, short, double, short);
CODE:
	func   = INT2PTR(void(*)(float, short, double, short), SvIV(c_func) );
	(*func)(f0, s1, d2, s3);

double
nci_dfsds( c_func, f0, s1, d2, s3 )
	SV* c_func
	float f0
	short s1
	double d2
	short s3
PREINIT:
	double(*func)(float, short, double, short);
CODE:
	func   = INT2PTR(double(*)(float, short, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2, s3);
OUTPUT:
	RETVAL

short
nci_sfsds( c_func, f0, s1, d2, s3 )
	SV* c_func
	float f0
	short s1
	double d2
	short s3
PREINIT:
	short(*func)(float, short, double, short);
CODE:
	func   = INT2PTR(short(*)(float, short, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2, s3);
OUTPUT:
	RETVAL

float
nci_ffsds( c_func, f0, s1, d2, s3 )
	SV* c_func
	float f0
	short s1
	double d2
	short s3
PREINIT:
	float(*func)(float, short, double, short);
CODE:
	func   = INT2PTR(float(*)(float, short, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2, s3);
OUTPUT:
	RETVAL

char *
nci_tfsds( c_func, f0, s1, d2, s3 )
	SV* c_func
	float f0
	short s1
	double d2
	short s3
PREINIT:
	char *(*func)(float, short, double, short);
CODE:
	func   = INT2PTR(char *(*)(float, short, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2, s3);
OUTPUT:
	RETVAL

int
nci_ifsds( c_func, f0, s1, d2, s3 )
	SV* c_func
	float f0
	short s1
	double d2
	short s3
PREINIT:
	int(*func)(float, short, double, short);
CODE:
	func   = INT2PTR(int(*)(float, short, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2, s3);
OUTPUT:
	RETVAL

void *
nci_ptsds( c_func, t0, s1, d2, s3 )
	SV* c_func
	char * t0
	short s1
	double d2
	short s3
PREINIT:
	void *(*func)(char *, short, double, short);
CODE:
	func   = INT2PTR(void *(*)(char *, short, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2, s3);
OUTPUT:
	RETVAL

void
nci_vtsds( c_func, t0, s1, d2, s3 )
	SV* c_func
	char * t0
	short s1
	double d2
	short s3
PREINIT:
	void(*func)(char *, short, double, short);
CODE:
	func   = INT2PTR(void(*)(char *, short, double, short), SvIV(c_func) );
	(*func)(t0, s1, d2, s3);

double
nci_dtsds( c_func, t0, s1, d2, s3 )
	SV* c_func
	char * t0
	short s1
	double d2
	short s3
PREINIT:
	double(*func)(char *, short, double, short);
CODE:
	func   = INT2PTR(double(*)(char *, short, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2, s3);
OUTPUT:
	RETVAL

short
nci_stsds( c_func, t0, s1, d2, s3 )
	SV* c_func
	char * t0
	short s1
	double d2
	short s3
PREINIT:
	short(*func)(char *, short, double, short);
CODE:
	func   = INT2PTR(short(*)(char *, short, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2, s3);
OUTPUT:
	RETVAL

float
nci_ftsds( c_func, t0, s1, d2, s3 )
	SV* c_func
	char * t0
	short s1
	double d2
	short s3
PREINIT:
	float(*func)(char *, short, double, short);
CODE:
	func   = INT2PTR(float(*)(char *, short, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2, s3);
OUTPUT:
	RETVAL

char *
nci_ttsds( c_func, t0, s1, d2, s3 )
	SV* c_func
	char * t0
	short s1
	double d2
	short s3
PREINIT:
	char *(*func)(char *, short, double, short);
CODE:
	func   = INT2PTR(char *(*)(char *, short, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2, s3);
OUTPUT:
	RETVAL

int
nci_itsds( c_func, t0, s1, d2, s3 )
	SV* c_func
	char * t0
	short s1
	double d2
	short s3
PREINIT:
	int(*func)(char *, short, double, short);
CODE:
	func   = INT2PTR(int(*)(char *, short, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2, s3);
OUTPUT:
	RETVAL

void *
nci_pisds( c_func, i0, s1, d2, s3 )
	SV* c_func
	int i0
	short s1
	double d2
	short s3
PREINIT:
	void *(*func)(int, short, double, short);
CODE:
	func   = INT2PTR(void *(*)(int, short, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2, s3);
OUTPUT:
	RETVAL

void
nci_visds( c_func, i0, s1, d2, s3 )
	SV* c_func
	int i0
	short s1
	double d2
	short s3
PREINIT:
	void(*func)(int, short, double, short);
CODE:
	func   = INT2PTR(void(*)(int, short, double, short), SvIV(c_func) );
	(*func)(i0, s1, d2, s3);

double
nci_disds( c_func, i0, s1, d2, s3 )
	SV* c_func
	int i0
	short s1
	double d2
	short s3
PREINIT:
	double(*func)(int, short, double, short);
CODE:
	func   = INT2PTR(double(*)(int, short, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2, s3);
OUTPUT:
	RETVAL

short
nci_sisds( c_func, i0, s1, d2, s3 )
	SV* c_func
	int i0
	short s1
	double d2
	short s3
PREINIT:
	short(*func)(int, short, double, short);
CODE:
	func   = INT2PTR(short(*)(int, short, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2, s3);
OUTPUT:
	RETVAL

float
nci_fisds( c_func, i0, s1, d2, s3 )
	SV* c_func
	int i0
	short s1
	double d2
	short s3
PREINIT:
	float(*func)(int, short, double, short);
CODE:
	func   = INT2PTR(float(*)(int, short, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2, s3);
OUTPUT:
	RETVAL

char *
nci_tisds( c_func, i0, s1, d2, s3 )
	SV* c_func
	int i0
	short s1
	double d2
	short s3
PREINIT:
	char *(*func)(int, short, double, short);
CODE:
	func   = INT2PTR(char *(*)(int, short, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2, s3);
OUTPUT:
	RETVAL

int
nci_iisds( c_func, i0, s1, d2, s3 )
	SV* c_func
	int i0
	short s1
	double d2
	short s3
PREINIT:
	int(*func)(int, short, double, short);
CODE:
	func   = INT2PTR(int(*)(int, short, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2, s3);
OUTPUT:
	RETVAL

void *
nci_ppfds( c_func, p0, f1, d2, s3 )
	SV* c_func
	void * p0
	float f1
	double d2
	short s3
PREINIT:
	void *(*func)(void *, float, double, short);
CODE:
	func   = INT2PTR(void *(*)(void *, float, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2, s3);
OUTPUT:
	RETVAL

void
nci_vpfds( c_func, p0, f1, d2, s3 )
	SV* c_func
	void * p0
	float f1
	double d2
	short s3
PREINIT:
	void(*func)(void *, float, double, short);
CODE:
	func   = INT2PTR(void(*)(void *, float, double, short), SvIV(c_func) );
	(*func)(p0, f1, d2, s3);

double
nci_dpfds( c_func, p0, f1, d2, s3 )
	SV* c_func
	void * p0
	float f1
	double d2
	short s3
PREINIT:
	double(*func)(void *, float, double, short);
CODE:
	func   = INT2PTR(double(*)(void *, float, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2, s3);
OUTPUT:
	RETVAL

short
nci_spfds( c_func, p0, f1, d2, s3 )
	SV* c_func
	void * p0
	float f1
	double d2
	short s3
PREINIT:
	short(*func)(void *, float, double, short);
CODE:
	func   = INT2PTR(short(*)(void *, float, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2, s3);
OUTPUT:
	RETVAL

float
nci_fpfds( c_func, p0, f1, d2, s3 )
	SV* c_func
	void * p0
	float f1
	double d2
	short s3
PREINIT:
	float(*func)(void *, float, double, short);
CODE:
	func   = INT2PTR(float(*)(void *, float, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2, s3);
OUTPUT:
	RETVAL

char *
nci_tpfds( c_func, p0, f1, d2, s3 )
	SV* c_func
	void * p0
	float f1
	double d2
	short s3
PREINIT:
	char *(*func)(void *, float, double, short);
CODE:
	func   = INT2PTR(char *(*)(void *, float, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2, s3);
OUTPUT:
	RETVAL

int
nci_ipfds( c_func, p0, f1, d2, s3 )
	SV* c_func
	void * p0
	float f1
	double d2
	short s3
PREINIT:
	int(*func)(void *, float, double, short);
CODE:
	func   = INT2PTR(int(*)(void *, float, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2, s3);
OUTPUT:
	RETVAL

void *
nci_pvfds( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvfds( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvfds( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svfds( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvfds( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvfds( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivfds( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdfds( c_func, d0, f1, d2, s3 )
	SV* c_func
	double d0
	float f1
	double d2
	short s3
PREINIT:
	void *(*func)(double, float, double, short);
CODE:
	func   = INT2PTR(void *(*)(double, float, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2, s3);
OUTPUT:
	RETVAL

void
nci_vdfds( c_func, d0, f1, d2, s3 )
	SV* c_func
	double d0
	float f1
	double d2
	short s3
PREINIT:
	void(*func)(double, float, double, short);
CODE:
	func   = INT2PTR(void(*)(double, float, double, short), SvIV(c_func) );
	(*func)(d0, f1, d2, s3);

double
nci_ddfds( c_func, d0, f1, d2, s3 )
	SV* c_func
	double d0
	float f1
	double d2
	short s3
PREINIT:
	double(*func)(double, float, double, short);
CODE:
	func   = INT2PTR(double(*)(double, float, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2, s3);
OUTPUT:
	RETVAL

short
nci_sdfds( c_func, d0, f1, d2, s3 )
	SV* c_func
	double d0
	float f1
	double d2
	short s3
PREINIT:
	short(*func)(double, float, double, short);
CODE:
	func   = INT2PTR(short(*)(double, float, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2, s3);
OUTPUT:
	RETVAL

float
nci_fdfds( c_func, d0, f1, d2, s3 )
	SV* c_func
	double d0
	float f1
	double d2
	short s3
PREINIT:
	float(*func)(double, float, double, short);
CODE:
	func   = INT2PTR(float(*)(double, float, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2, s3);
OUTPUT:
	RETVAL

char *
nci_tdfds( c_func, d0, f1, d2, s3 )
	SV* c_func
	double d0
	float f1
	double d2
	short s3
PREINIT:
	char *(*func)(double, float, double, short);
CODE:
	func   = INT2PTR(char *(*)(double, float, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2, s3);
OUTPUT:
	RETVAL

int
nci_idfds( c_func, d0, f1, d2, s3 )
	SV* c_func
	double d0
	float f1
	double d2
	short s3
PREINIT:
	int(*func)(double, float, double, short);
CODE:
	func   = INT2PTR(int(*)(double, float, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2, s3);
OUTPUT:
	RETVAL

void *
nci_psfds( c_func, s0, f1, d2, s3 )
	SV* c_func
	short s0
	float f1
	double d2
	short s3
PREINIT:
	void *(*func)(short, float, double, short);
CODE:
	func   = INT2PTR(void *(*)(short, float, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2, s3);
OUTPUT:
	RETVAL

void
nci_vsfds( c_func, s0, f1, d2, s3 )
	SV* c_func
	short s0
	float f1
	double d2
	short s3
PREINIT:
	void(*func)(short, float, double, short);
CODE:
	func   = INT2PTR(void(*)(short, float, double, short), SvIV(c_func) );
	(*func)(s0, f1, d2, s3);

double
nci_dsfds( c_func, s0, f1, d2, s3 )
	SV* c_func
	short s0
	float f1
	double d2
	short s3
PREINIT:
	double(*func)(short, float, double, short);
CODE:
	func   = INT2PTR(double(*)(short, float, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2, s3);
OUTPUT:
	RETVAL

short
nci_ssfds( c_func, s0, f1, d2, s3 )
	SV* c_func
	short s0
	float f1
	double d2
	short s3
PREINIT:
	short(*func)(short, float, double, short);
CODE:
	func   = INT2PTR(short(*)(short, float, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2, s3);
OUTPUT:
	RETVAL

float
nci_fsfds( c_func, s0, f1, d2, s3 )
	SV* c_func
	short s0
	float f1
	double d2
	short s3
PREINIT:
	float(*func)(short, float, double, short);
CODE:
	func   = INT2PTR(float(*)(short, float, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2, s3);
OUTPUT:
	RETVAL

char *
nci_tsfds( c_func, s0, f1, d2, s3 )
	SV* c_func
	short s0
	float f1
	double d2
	short s3
PREINIT:
	char *(*func)(short, float, double, short);
CODE:
	func   = INT2PTR(char *(*)(short, float, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2, s3);
OUTPUT:
	RETVAL

int
nci_isfds( c_func, s0, f1, d2, s3 )
	SV* c_func
	short s0
	float f1
	double d2
	short s3
PREINIT:
	int(*func)(short, float, double, short);
CODE:
	func   = INT2PTR(int(*)(short, float, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2, s3);
OUTPUT:
	RETVAL

void *
nci_pffds( c_func, f0, f1, d2, s3 )
	SV* c_func
	float f0
	float f1
	double d2
	short s3
PREINIT:
	void *(*func)(float, float, double, short);
CODE:
	func   = INT2PTR(void *(*)(float, float, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2, s3);
OUTPUT:
	RETVAL

void
nci_vffds( c_func, f0, f1, d2, s3 )
	SV* c_func
	float f0
	float f1
	double d2
	short s3
PREINIT:
	void(*func)(float, float, double, short);
CODE:
	func   = INT2PTR(void(*)(float, float, double, short), SvIV(c_func) );
	(*func)(f0, f1, d2, s3);

double
nci_dffds( c_func, f0, f1, d2, s3 )
	SV* c_func
	float f0
	float f1
	double d2
	short s3
PREINIT:
	double(*func)(float, float, double, short);
CODE:
	func   = INT2PTR(double(*)(float, float, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2, s3);
OUTPUT:
	RETVAL

short
nci_sffds( c_func, f0, f1, d2, s3 )
	SV* c_func
	float f0
	float f1
	double d2
	short s3
PREINIT:
	short(*func)(float, float, double, short);
CODE:
	func   = INT2PTR(short(*)(float, float, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2, s3);
OUTPUT:
	RETVAL

float
nci_fffds( c_func, f0, f1, d2, s3 )
	SV* c_func
	float f0
	float f1
	double d2
	short s3
PREINIT:
	float(*func)(float, float, double, short);
CODE:
	func   = INT2PTR(float(*)(float, float, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2, s3);
OUTPUT:
	RETVAL

char *
nci_tffds( c_func, f0, f1, d2, s3 )
	SV* c_func
	float f0
	float f1
	double d2
	short s3
PREINIT:
	char *(*func)(float, float, double, short);
CODE:
	func   = INT2PTR(char *(*)(float, float, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2, s3);
OUTPUT:
	RETVAL

int
nci_iffds( c_func, f0, f1, d2, s3 )
	SV* c_func
	float f0
	float f1
	double d2
	short s3
PREINIT:
	int(*func)(float, float, double, short);
CODE:
	func   = INT2PTR(int(*)(float, float, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2, s3);
OUTPUT:
	RETVAL

void *
nci_ptfds( c_func, t0, f1, d2, s3 )
	SV* c_func
	char * t0
	float f1
	double d2
	short s3
PREINIT:
	void *(*func)(char *, float, double, short);
CODE:
	func   = INT2PTR(void *(*)(char *, float, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2, s3);
OUTPUT:
	RETVAL

void
nci_vtfds( c_func, t0, f1, d2, s3 )
	SV* c_func
	char * t0
	float f1
	double d2
	short s3
PREINIT:
	void(*func)(char *, float, double, short);
CODE:
	func   = INT2PTR(void(*)(char *, float, double, short), SvIV(c_func) );
	(*func)(t0, f1, d2, s3);

double
nci_dtfds( c_func, t0, f1, d2, s3 )
	SV* c_func
	char * t0
	float f1
	double d2
	short s3
PREINIT:
	double(*func)(char *, float, double, short);
CODE:
	func   = INT2PTR(double(*)(char *, float, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2, s3);
OUTPUT:
	RETVAL

short
nci_stfds( c_func, t0, f1, d2, s3 )
	SV* c_func
	char * t0
	float f1
	double d2
	short s3
PREINIT:
	short(*func)(char *, float, double, short);
CODE:
	func   = INT2PTR(short(*)(char *, float, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2, s3);
OUTPUT:
	RETVAL

float
nci_ftfds( c_func, t0, f1, d2, s3 )
	SV* c_func
	char * t0
	float f1
	double d2
	short s3
PREINIT:
	float(*func)(char *, float, double, short);
CODE:
	func   = INT2PTR(float(*)(char *, float, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2, s3);
OUTPUT:
	RETVAL

char *
nci_ttfds( c_func, t0, f1, d2, s3 )
	SV* c_func
	char * t0
	float f1
	double d2
	short s3
PREINIT:
	char *(*func)(char *, float, double, short);
CODE:
	func   = INT2PTR(char *(*)(char *, float, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2, s3);
OUTPUT:
	RETVAL

int
nci_itfds( c_func, t0, f1, d2, s3 )
	SV* c_func
	char * t0
	float f1
	double d2
	short s3
PREINIT:
	int(*func)(char *, float, double, short);
CODE:
	func   = INT2PTR(int(*)(char *, float, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2, s3);
OUTPUT:
	RETVAL

void *
nci_pifds( c_func, i0, f1, d2, s3 )
	SV* c_func
	int i0
	float f1
	double d2
	short s3
PREINIT:
	void *(*func)(int, float, double, short);
CODE:
	func   = INT2PTR(void *(*)(int, float, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2, s3);
OUTPUT:
	RETVAL

void
nci_vifds( c_func, i0, f1, d2, s3 )
	SV* c_func
	int i0
	float f1
	double d2
	short s3
PREINIT:
	void(*func)(int, float, double, short);
CODE:
	func   = INT2PTR(void(*)(int, float, double, short), SvIV(c_func) );
	(*func)(i0, f1, d2, s3);

double
nci_difds( c_func, i0, f1, d2, s3 )
	SV* c_func
	int i0
	float f1
	double d2
	short s3
PREINIT:
	double(*func)(int, float, double, short);
CODE:
	func   = INT2PTR(double(*)(int, float, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2, s3);
OUTPUT:
	RETVAL

short
nci_sifds( c_func, i0, f1, d2, s3 )
	SV* c_func
	int i0
	float f1
	double d2
	short s3
PREINIT:
	short(*func)(int, float, double, short);
CODE:
	func   = INT2PTR(short(*)(int, float, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2, s3);
OUTPUT:
	RETVAL

float
nci_fifds( c_func, i0, f1, d2, s3 )
	SV* c_func
	int i0
	float f1
	double d2
	short s3
PREINIT:
	float(*func)(int, float, double, short);
CODE:
	func   = INT2PTR(float(*)(int, float, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2, s3);
OUTPUT:
	RETVAL

char *
nci_tifds( c_func, i0, f1, d2, s3 )
	SV* c_func
	int i0
	float f1
	double d2
	short s3
PREINIT:
	char *(*func)(int, float, double, short);
CODE:
	func   = INT2PTR(char *(*)(int, float, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2, s3);
OUTPUT:
	RETVAL

int
nci_iifds( c_func, i0, f1, d2, s3 )
	SV* c_func
	int i0
	float f1
	double d2
	short s3
PREINIT:
	int(*func)(int, float, double, short);
CODE:
	func   = INT2PTR(int(*)(int, float, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2, s3);
OUTPUT:
	RETVAL

void *
nci_pptds( c_func, p0, t1, d2, s3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	short s3
PREINIT:
	void *(*func)(void *, char *, double, short);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2, s3);
OUTPUT:
	RETVAL

void
nci_vptds( c_func, p0, t1, d2, s3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	short s3
PREINIT:
	void(*func)(void *, char *, double, short);
CODE:
	func   = INT2PTR(void(*)(void *, char *, double, short), SvIV(c_func) );
	(*func)(p0, t1, d2, s3);

double
nci_dptds( c_func, p0, t1, d2, s3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	short s3
PREINIT:
	double(*func)(void *, char *, double, short);
CODE:
	func   = INT2PTR(double(*)(void *, char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2, s3);
OUTPUT:
	RETVAL

short
nci_sptds( c_func, p0, t1, d2, s3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	short s3
PREINIT:
	short(*func)(void *, char *, double, short);
CODE:
	func   = INT2PTR(short(*)(void *, char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2, s3);
OUTPUT:
	RETVAL

float
nci_fptds( c_func, p0, t1, d2, s3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	short s3
PREINIT:
	float(*func)(void *, char *, double, short);
CODE:
	func   = INT2PTR(float(*)(void *, char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2, s3);
OUTPUT:
	RETVAL

char *
nci_tptds( c_func, p0, t1, d2, s3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	short s3
PREINIT:
	char *(*func)(void *, char *, double, short);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2, s3);
OUTPUT:
	RETVAL

int
nci_iptds( c_func, p0, t1, d2, s3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	short s3
PREINIT:
	int(*func)(void *, char *, double, short);
CODE:
	func   = INT2PTR(int(*)(void *, char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2, s3);
OUTPUT:
	RETVAL

void *
nci_pvtds( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvtds( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvtds( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svtds( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvtds( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvtds( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivtds( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdtds( c_func, d0, t1, d2, s3 )
	SV* c_func
	double d0
	char * t1
	double d2
	short s3
PREINIT:
	void *(*func)(double, char *, double, short);
CODE:
	func   = INT2PTR(void *(*)(double, char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2, s3);
OUTPUT:
	RETVAL

void
nci_vdtds( c_func, d0, t1, d2, s3 )
	SV* c_func
	double d0
	char * t1
	double d2
	short s3
PREINIT:
	void(*func)(double, char *, double, short);
CODE:
	func   = INT2PTR(void(*)(double, char *, double, short), SvIV(c_func) );
	(*func)(d0, t1, d2, s3);

double
nci_ddtds( c_func, d0, t1, d2, s3 )
	SV* c_func
	double d0
	char * t1
	double d2
	short s3
PREINIT:
	double(*func)(double, char *, double, short);
CODE:
	func   = INT2PTR(double(*)(double, char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2, s3);
OUTPUT:
	RETVAL

short
nci_sdtds( c_func, d0, t1, d2, s3 )
	SV* c_func
	double d0
	char * t1
	double d2
	short s3
PREINIT:
	short(*func)(double, char *, double, short);
CODE:
	func   = INT2PTR(short(*)(double, char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2, s3);
OUTPUT:
	RETVAL

float
nci_fdtds( c_func, d0, t1, d2, s3 )
	SV* c_func
	double d0
	char * t1
	double d2
	short s3
PREINIT:
	float(*func)(double, char *, double, short);
CODE:
	func   = INT2PTR(float(*)(double, char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2, s3);
OUTPUT:
	RETVAL

char *
nci_tdtds( c_func, d0, t1, d2, s3 )
	SV* c_func
	double d0
	char * t1
	double d2
	short s3
PREINIT:
	char *(*func)(double, char *, double, short);
CODE:
	func   = INT2PTR(char *(*)(double, char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2, s3);
OUTPUT:
	RETVAL

int
nci_idtds( c_func, d0, t1, d2, s3 )
	SV* c_func
	double d0
	char * t1
	double d2
	short s3
PREINIT:
	int(*func)(double, char *, double, short);
CODE:
	func   = INT2PTR(int(*)(double, char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2, s3);
OUTPUT:
	RETVAL

void *
nci_pstds( c_func, s0, t1, d2, s3 )
	SV* c_func
	short s0
	char * t1
	double d2
	short s3
PREINIT:
	void *(*func)(short, char *, double, short);
CODE:
	func   = INT2PTR(void *(*)(short, char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2, s3);
OUTPUT:
	RETVAL

void
nci_vstds( c_func, s0, t1, d2, s3 )
	SV* c_func
	short s0
	char * t1
	double d2
	short s3
PREINIT:
	void(*func)(short, char *, double, short);
CODE:
	func   = INT2PTR(void(*)(short, char *, double, short), SvIV(c_func) );
	(*func)(s0, t1, d2, s3);

double
nci_dstds( c_func, s0, t1, d2, s3 )
	SV* c_func
	short s0
	char * t1
	double d2
	short s3
PREINIT:
	double(*func)(short, char *, double, short);
CODE:
	func   = INT2PTR(double(*)(short, char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2, s3);
OUTPUT:
	RETVAL

short
nci_sstds( c_func, s0, t1, d2, s3 )
	SV* c_func
	short s0
	char * t1
	double d2
	short s3
PREINIT:
	short(*func)(short, char *, double, short);
CODE:
	func   = INT2PTR(short(*)(short, char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2, s3);
OUTPUT:
	RETVAL

float
nci_fstds( c_func, s0, t1, d2, s3 )
	SV* c_func
	short s0
	char * t1
	double d2
	short s3
PREINIT:
	float(*func)(short, char *, double, short);
CODE:
	func   = INT2PTR(float(*)(short, char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2, s3);
OUTPUT:
	RETVAL

char *
nci_tstds( c_func, s0, t1, d2, s3 )
	SV* c_func
	short s0
	char * t1
	double d2
	short s3
PREINIT:
	char *(*func)(short, char *, double, short);
CODE:
	func   = INT2PTR(char *(*)(short, char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2, s3);
OUTPUT:
	RETVAL

int
nci_istds( c_func, s0, t1, d2, s3 )
	SV* c_func
	short s0
	char * t1
	double d2
	short s3
PREINIT:
	int(*func)(short, char *, double, short);
CODE:
	func   = INT2PTR(int(*)(short, char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2, s3);
OUTPUT:
	RETVAL

void *
nci_pftds( c_func, f0, t1, d2, s3 )
	SV* c_func
	float f0
	char * t1
	double d2
	short s3
PREINIT:
	void *(*func)(float, char *, double, short);
CODE:
	func   = INT2PTR(void *(*)(float, char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2, s3);
OUTPUT:
	RETVAL

void
nci_vftds( c_func, f0, t1, d2, s3 )
	SV* c_func
	float f0
	char * t1
	double d2
	short s3
PREINIT:
	void(*func)(float, char *, double, short);
CODE:
	func   = INT2PTR(void(*)(float, char *, double, short), SvIV(c_func) );
	(*func)(f0, t1, d2, s3);

double
nci_dftds( c_func, f0, t1, d2, s3 )
	SV* c_func
	float f0
	char * t1
	double d2
	short s3
PREINIT:
	double(*func)(float, char *, double, short);
CODE:
	func   = INT2PTR(double(*)(float, char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2, s3);
OUTPUT:
	RETVAL

short
nci_sftds( c_func, f0, t1, d2, s3 )
	SV* c_func
	float f0
	char * t1
	double d2
	short s3
PREINIT:
	short(*func)(float, char *, double, short);
CODE:
	func   = INT2PTR(short(*)(float, char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2, s3);
OUTPUT:
	RETVAL

float
nci_fftds( c_func, f0, t1, d2, s3 )
	SV* c_func
	float f0
	char * t1
	double d2
	short s3
PREINIT:
	float(*func)(float, char *, double, short);
CODE:
	func   = INT2PTR(float(*)(float, char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2, s3);
OUTPUT:
	RETVAL

char *
nci_tftds( c_func, f0, t1, d2, s3 )
	SV* c_func
	float f0
	char * t1
	double d2
	short s3
PREINIT:
	char *(*func)(float, char *, double, short);
CODE:
	func   = INT2PTR(char *(*)(float, char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2, s3);
OUTPUT:
	RETVAL

int
nci_iftds( c_func, f0, t1, d2, s3 )
	SV* c_func
	float f0
	char * t1
	double d2
	short s3
PREINIT:
	int(*func)(float, char *, double, short);
CODE:
	func   = INT2PTR(int(*)(float, char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2, s3);
OUTPUT:
	RETVAL

void *
nci_pttds( c_func, t0, t1, d2, s3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	short s3
PREINIT:
	void *(*func)(char *, char *, double, short);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2, s3);
OUTPUT:
	RETVAL

void
nci_vttds( c_func, t0, t1, d2, s3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	short s3
PREINIT:
	void(*func)(char *, char *, double, short);
CODE:
	func   = INT2PTR(void(*)(char *, char *, double, short), SvIV(c_func) );
	(*func)(t0, t1, d2, s3);

double
nci_dttds( c_func, t0, t1, d2, s3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	short s3
PREINIT:
	double(*func)(char *, char *, double, short);
CODE:
	func   = INT2PTR(double(*)(char *, char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2, s3);
OUTPUT:
	RETVAL

short
nci_sttds( c_func, t0, t1, d2, s3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	short s3
PREINIT:
	short(*func)(char *, char *, double, short);
CODE:
	func   = INT2PTR(short(*)(char *, char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2, s3);
OUTPUT:
	RETVAL

float
nci_fttds( c_func, t0, t1, d2, s3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	short s3
PREINIT:
	float(*func)(char *, char *, double, short);
CODE:
	func   = INT2PTR(float(*)(char *, char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2, s3);
OUTPUT:
	RETVAL

char *
nci_tttds( c_func, t0, t1, d2, s3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	short s3
PREINIT:
	char *(*func)(char *, char *, double, short);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2, s3);
OUTPUT:
	RETVAL

int
nci_ittds( c_func, t0, t1, d2, s3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	short s3
PREINIT:
	int(*func)(char *, char *, double, short);
CODE:
	func   = INT2PTR(int(*)(char *, char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2, s3);
OUTPUT:
	RETVAL

void *
nci_pitds( c_func, i0, t1, d2, s3 )
	SV* c_func
	int i0
	char * t1
	double d2
	short s3
PREINIT:
	void *(*func)(int, char *, double, short);
CODE:
	func   = INT2PTR(void *(*)(int, char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2, s3);
OUTPUT:
	RETVAL

void
nci_vitds( c_func, i0, t1, d2, s3 )
	SV* c_func
	int i0
	char * t1
	double d2
	short s3
PREINIT:
	void(*func)(int, char *, double, short);
CODE:
	func   = INT2PTR(void(*)(int, char *, double, short), SvIV(c_func) );
	(*func)(i0, t1, d2, s3);

double
nci_ditds( c_func, i0, t1, d2, s3 )
	SV* c_func
	int i0
	char * t1
	double d2
	short s3
PREINIT:
	double(*func)(int, char *, double, short);
CODE:
	func   = INT2PTR(double(*)(int, char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2, s3);
OUTPUT:
	RETVAL

short
nci_sitds( c_func, i0, t1, d2, s3 )
	SV* c_func
	int i0
	char * t1
	double d2
	short s3
PREINIT:
	short(*func)(int, char *, double, short);
CODE:
	func   = INT2PTR(short(*)(int, char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2, s3);
OUTPUT:
	RETVAL

float
nci_fitds( c_func, i0, t1, d2, s3 )
	SV* c_func
	int i0
	char * t1
	double d2
	short s3
PREINIT:
	float(*func)(int, char *, double, short);
CODE:
	func   = INT2PTR(float(*)(int, char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2, s3);
OUTPUT:
	RETVAL

char *
nci_titds( c_func, i0, t1, d2, s3 )
	SV* c_func
	int i0
	char * t1
	double d2
	short s3
PREINIT:
	char *(*func)(int, char *, double, short);
CODE:
	func   = INT2PTR(char *(*)(int, char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2, s3);
OUTPUT:
	RETVAL

int
nci_iitds( c_func, i0, t1, d2, s3 )
	SV* c_func
	int i0
	char * t1
	double d2
	short s3
PREINIT:
	int(*func)(int, char *, double, short);
CODE:
	func   = INT2PTR(int(*)(int, char *, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2, s3);
OUTPUT:
	RETVAL

void *
nci_ppids( c_func, p0, i1, d2, s3 )
	SV* c_func
	void * p0
	int i1
	double d2
	short s3
PREINIT:
	void *(*func)(void *, int, double, short);
CODE:
	func   = INT2PTR(void *(*)(void *, int, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2, s3);
OUTPUT:
	RETVAL

void
nci_vpids( c_func, p0, i1, d2, s3 )
	SV* c_func
	void * p0
	int i1
	double d2
	short s3
PREINIT:
	void(*func)(void *, int, double, short);
CODE:
	func   = INT2PTR(void(*)(void *, int, double, short), SvIV(c_func) );
	(*func)(p0, i1, d2, s3);

double
nci_dpids( c_func, p0, i1, d2, s3 )
	SV* c_func
	void * p0
	int i1
	double d2
	short s3
PREINIT:
	double(*func)(void *, int, double, short);
CODE:
	func   = INT2PTR(double(*)(void *, int, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2, s3);
OUTPUT:
	RETVAL

short
nci_spids( c_func, p0, i1, d2, s3 )
	SV* c_func
	void * p0
	int i1
	double d2
	short s3
PREINIT:
	short(*func)(void *, int, double, short);
CODE:
	func   = INT2PTR(short(*)(void *, int, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2, s3);
OUTPUT:
	RETVAL

float
nci_fpids( c_func, p0, i1, d2, s3 )
	SV* c_func
	void * p0
	int i1
	double d2
	short s3
PREINIT:
	float(*func)(void *, int, double, short);
CODE:
	func   = INT2PTR(float(*)(void *, int, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2, s3);
OUTPUT:
	RETVAL

char *
nci_tpids( c_func, p0, i1, d2, s3 )
	SV* c_func
	void * p0
	int i1
	double d2
	short s3
PREINIT:
	char *(*func)(void *, int, double, short);
CODE:
	func   = INT2PTR(char *(*)(void *, int, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2, s3);
OUTPUT:
	RETVAL

int
nci_ipids( c_func, p0, i1, d2, s3 )
	SV* c_func
	void * p0
	int i1
	double d2
	short s3
PREINIT:
	int(*func)(void *, int, double, short);
CODE:
	func   = INT2PTR(int(*)(void *, int, double, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2, s3);
OUTPUT:
	RETVAL

void *
nci_pvids( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvids( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvids( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svids( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvids( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvids( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivids( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdids( c_func, d0, i1, d2, s3 )
	SV* c_func
	double d0
	int i1
	double d2
	short s3
PREINIT:
	void *(*func)(double, int, double, short);
CODE:
	func   = INT2PTR(void *(*)(double, int, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2, s3);
OUTPUT:
	RETVAL

void
nci_vdids( c_func, d0, i1, d2, s3 )
	SV* c_func
	double d0
	int i1
	double d2
	short s3
PREINIT:
	void(*func)(double, int, double, short);
CODE:
	func   = INT2PTR(void(*)(double, int, double, short), SvIV(c_func) );
	(*func)(d0, i1, d2, s3);

double
nci_ddids( c_func, d0, i1, d2, s3 )
	SV* c_func
	double d0
	int i1
	double d2
	short s3
PREINIT:
	double(*func)(double, int, double, short);
CODE:
	func   = INT2PTR(double(*)(double, int, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2, s3);
OUTPUT:
	RETVAL

short
nci_sdids( c_func, d0, i1, d2, s3 )
	SV* c_func
	double d0
	int i1
	double d2
	short s3
PREINIT:
	short(*func)(double, int, double, short);
CODE:
	func   = INT2PTR(short(*)(double, int, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2, s3);
OUTPUT:
	RETVAL

float
nci_fdids( c_func, d0, i1, d2, s3 )
	SV* c_func
	double d0
	int i1
	double d2
	short s3
PREINIT:
	float(*func)(double, int, double, short);
CODE:
	func   = INT2PTR(float(*)(double, int, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2, s3);
OUTPUT:
	RETVAL

char *
nci_tdids( c_func, d0, i1, d2, s3 )
	SV* c_func
	double d0
	int i1
	double d2
	short s3
PREINIT:
	char *(*func)(double, int, double, short);
CODE:
	func   = INT2PTR(char *(*)(double, int, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2, s3);
OUTPUT:
	RETVAL

int
nci_idids( c_func, d0, i1, d2, s3 )
	SV* c_func
	double d0
	int i1
	double d2
	short s3
PREINIT:
	int(*func)(double, int, double, short);
CODE:
	func   = INT2PTR(int(*)(double, int, double, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2, s3);
OUTPUT:
	RETVAL

void *
nci_psids( c_func, s0, i1, d2, s3 )
	SV* c_func
	short s0
	int i1
	double d2
	short s3
PREINIT:
	void *(*func)(short, int, double, short);
CODE:
	func   = INT2PTR(void *(*)(short, int, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2, s3);
OUTPUT:
	RETVAL

void
nci_vsids( c_func, s0, i1, d2, s3 )
	SV* c_func
	short s0
	int i1
	double d2
	short s3
PREINIT:
	void(*func)(short, int, double, short);
CODE:
	func   = INT2PTR(void(*)(short, int, double, short), SvIV(c_func) );
	(*func)(s0, i1, d2, s3);

double
nci_dsids( c_func, s0, i1, d2, s3 )
	SV* c_func
	short s0
	int i1
	double d2
	short s3
PREINIT:
	double(*func)(short, int, double, short);
CODE:
	func   = INT2PTR(double(*)(short, int, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2, s3);
OUTPUT:
	RETVAL

short
nci_ssids( c_func, s0, i1, d2, s3 )
	SV* c_func
	short s0
	int i1
	double d2
	short s3
PREINIT:
	short(*func)(short, int, double, short);
CODE:
	func   = INT2PTR(short(*)(short, int, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2, s3);
OUTPUT:
	RETVAL

float
nci_fsids( c_func, s0, i1, d2, s3 )
	SV* c_func
	short s0
	int i1
	double d2
	short s3
PREINIT:
	float(*func)(short, int, double, short);
CODE:
	func   = INT2PTR(float(*)(short, int, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2, s3);
OUTPUT:
	RETVAL

char *
nci_tsids( c_func, s0, i1, d2, s3 )
	SV* c_func
	short s0
	int i1
	double d2
	short s3
PREINIT:
	char *(*func)(short, int, double, short);
CODE:
	func   = INT2PTR(char *(*)(short, int, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2, s3);
OUTPUT:
	RETVAL

int
nci_isids( c_func, s0, i1, d2, s3 )
	SV* c_func
	short s0
	int i1
	double d2
	short s3
PREINIT:
	int(*func)(short, int, double, short);
CODE:
	func   = INT2PTR(int(*)(short, int, double, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2, s3);
OUTPUT:
	RETVAL

void *
nci_pfids( c_func, f0, i1, d2, s3 )
	SV* c_func
	float f0
	int i1
	double d2
	short s3
PREINIT:
	void *(*func)(float, int, double, short);
CODE:
	func   = INT2PTR(void *(*)(float, int, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2, s3);
OUTPUT:
	RETVAL

void
nci_vfids( c_func, f0, i1, d2, s3 )
	SV* c_func
	float f0
	int i1
	double d2
	short s3
PREINIT:
	void(*func)(float, int, double, short);
CODE:
	func   = INT2PTR(void(*)(float, int, double, short), SvIV(c_func) );
	(*func)(f0, i1, d2, s3);

double
nci_dfids( c_func, f0, i1, d2, s3 )
	SV* c_func
	float f0
	int i1
	double d2
	short s3
PREINIT:
	double(*func)(float, int, double, short);
CODE:
	func   = INT2PTR(double(*)(float, int, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2, s3);
OUTPUT:
	RETVAL

short
nci_sfids( c_func, f0, i1, d2, s3 )
	SV* c_func
	float f0
	int i1
	double d2
	short s3
PREINIT:
	short(*func)(float, int, double, short);
CODE:
	func   = INT2PTR(short(*)(float, int, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2, s3);
OUTPUT:
	RETVAL

float
nci_ffids( c_func, f0, i1, d2, s3 )
	SV* c_func
	float f0
	int i1
	double d2
	short s3
PREINIT:
	float(*func)(float, int, double, short);
CODE:
	func   = INT2PTR(float(*)(float, int, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2, s3);
OUTPUT:
	RETVAL

char *
nci_tfids( c_func, f0, i1, d2, s3 )
	SV* c_func
	float f0
	int i1
	double d2
	short s3
PREINIT:
	char *(*func)(float, int, double, short);
CODE:
	func   = INT2PTR(char *(*)(float, int, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2, s3);
OUTPUT:
	RETVAL

int
nci_ifids( c_func, f0, i1, d2, s3 )
	SV* c_func
	float f0
	int i1
	double d2
	short s3
PREINIT:
	int(*func)(float, int, double, short);
CODE:
	func   = INT2PTR(int(*)(float, int, double, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2, s3);
OUTPUT:
	RETVAL

void *
nci_ptids( c_func, t0, i1, d2, s3 )
	SV* c_func
	char * t0
	int i1
	double d2
	short s3
PREINIT:
	void *(*func)(char *, int, double, short);
CODE:
	func   = INT2PTR(void *(*)(char *, int, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2, s3);
OUTPUT:
	RETVAL

void
nci_vtids( c_func, t0, i1, d2, s3 )
	SV* c_func
	char * t0
	int i1
	double d2
	short s3
PREINIT:
	void(*func)(char *, int, double, short);
CODE:
	func   = INT2PTR(void(*)(char *, int, double, short), SvIV(c_func) );
	(*func)(t0, i1, d2, s3);

double
nci_dtids( c_func, t0, i1, d2, s3 )
	SV* c_func
	char * t0
	int i1
	double d2
	short s3
PREINIT:
	double(*func)(char *, int, double, short);
CODE:
	func   = INT2PTR(double(*)(char *, int, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2, s3);
OUTPUT:
	RETVAL

short
nci_stids( c_func, t0, i1, d2, s3 )
	SV* c_func
	char * t0
	int i1
	double d2
	short s3
PREINIT:
	short(*func)(char *, int, double, short);
CODE:
	func   = INT2PTR(short(*)(char *, int, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2, s3);
OUTPUT:
	RETVAL

float
nci_ftids( c_func, t0, i1, d2, s3 )
	SV* c_func
	char * t0
	int i1
	double d2
	short s3
PREINIT:
	float(*func)(char *, int, double, short);
CODE:
	func   = INT2PTR(float(*)(char *, int, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2, s3);
OUTPUT:
	RETVAL

char *
nci_ttids( c_func, t0, i1, d2, s3 )
	SV* c_func
	char * t0
	int i1
	double d2
	short s3
PREINIT:
	char *(*func)(char *, int, double, short);
CODE:
	func   = INT2PTR(char *(*)(char *, int, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2, s3);
OUTPUT:
	RETVAL

int
nci_itids( c_func, t0, i1, d2, s3 )
	SV* c_func
	char * t0
	int i1
	double d2
	short s3
PREINIT:
	int(*func)(char *, int, double, short);
CODE:
	func   = INT2PTR(int(*)(char *, int, double, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2, s3);
OUTPUT:
	RETVAL

void *
nci_piids( c_func, i0, i1, d2, s3 )
	SV* c_func
	int i0
	int i1
	double d2
	short s3
PREINIT:
	void *(*func)(int, int, double, short);
CODE:
	func   = INT2PTR(void *(*)(int, int, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2, s3);
OUTPUT:
	RETVAL

void
nci_viids( c_func, i0, i1, d2, s3 )
	SV* c_func
	int i0
	int i1
	double d2
	short s3
PREINIT:
	void(*func)(int, int, double, short);
CODE:
	func   = INT2PTR(void(*)(int, int, double, short), SvIV(c_func) );
	(*func)(i0, i1, d2, s3);

double
nci_diids( c_func, i0, i1, d2, s3 )
	SV* c_func
	int i0
	int i1
	double d2
	short s3
PREINIT:
	double(*func)(int, int, double, short);
CODE:
	func   = INT2PTR(double(*)(int, int, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2, s3);
OUTPUT:
	RETVAL

short
nci_siids( c_func, i0, i1, d2, s3 )
	SV* c_func
	int i0
	int i1
	double d2
	short s3
PREINIT:
	short(*func)(int, int, double, short);
CODE:
	func   = INT2PTR(short(*)(int, int, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2, s3);
OUTPUT:
	RETVAL

float
nci_fiids( c_func, i0, i1, d2, s3 )
	SV* c_func
	int i0
	int i1
	double d2
	short s3
PREINIT:
	float(*func)(int, int, double, short);
CODE:
	func   = INT2PTR(float(*)(int, int, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2, s3);
OUTPUT:
	RETVAL

char *
nci_tiids( c_func, i0, i1, d2, s3 )
	SV* c_func
	int i0
	int i1
	double d2
	short s3
PREINIT:
	char *(*func)(int, int, double, short);
CODE:
	func   = INT2PTR(char *(*)(int, int, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2, s3);
OUTPUT:
	RETVAL

int
nci_iiids( c_func, i0, i1, d2, s3 )
	SV* c_func
	int i0
	int i1
	double d2
	short s3
PREINIT:
	int(*func)(int, int, double, short);
CODE:
	func   = INT2PTR(int(*)(int, int, double, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2, s3);
OUTPUT:
	RETVAL

void *
nci_pppss( c_func, p0, p1, s2, s3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	short s3
PREINIT:
	void *(*func)(void *, void *, short, short);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2, s3);
OUTPUT:
	RETVAL

void
nci_vppss( c_func, p0, p1, s2, s3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	short s3
PREINIT:
	void(*func)(void *, void *, short, short);
CODE:
	func   = INT2PTR(void(*)(void *, void *, short, short), SvIV(c_func) );
	(*func)(p0, p1, s2, s3);

double
nci_dppss( c_func, p0, p1, s2, s3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	short s3
PREINIT:
	double(*func)(void *, void *, short, short);
CODE:
	func   = INT2PTR(double(*)(void *, void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2, s3);
OUTPUT:
	RETVAL

short
nci_sppss( c_func, p0, p1, s2, s3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	short s3
PREINIT:
	short(*func)(void *, void *, short, short);
CODE:
	func   = INT2PTR(short(*)(void *, void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2, s3);
OUTPUT:
	RETVAL

float
nci_fppss( c_func, p0, p1, s2, s3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	short s3
PREINIT:
	float(*func)(void *, void *, short, short);
CODE:
	func   = INT2PTR(float(*)(void *, void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2, s3);
OUTPUT:
	RETVAL

char *
nci_tppss( c_func, p0, p1, s2, s3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	short s3
PREINIT:
	char *(*func)(void *, void *, short, short);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2, s3);
OUTPUT:
	RETVAL

int
nci_ippss( c_func, p0, p1, s2, s3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	short s3
PREINIT:
	int(*func)(void *, void *, short, short);
CODE:
	func   = INT2PTR(int(*)(void *, void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2, s3);
OUTPUT:
	RETVAL

void *
nci_pvpss( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvpss( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvpss( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svpss( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvpss( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvpss( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivpss( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdpss( c_func, d0, p1, s2, s3 )
	SV* c_func
	double d0
	void * p1
	short s2
	short s3
PREINIT:
	void *(*func)(double, void *, short, short);
CODE:
	func   = INT2PTR(void *(*)(double, void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2, s3);
OUTPUT:
	RETVAL

void
nci_vdpss( c_func, d0, p1, s2, s3 )
	SV* c_func
	double d0
	void * p1
	short s2
	short s3
PREINIT:
	void(*func)(double, void *, short, short);
CODE:
	func   = INT2PTR(void(*)(double, void *, short, short), SvIV(c_func) );
	(*func)(d0, p1, s2, s3);

double
nci_ddpss( c_func, d0, p1, s2, s3 )
	SV* c_func
	double d0
	void * p1
	short s2
	short s3
PREINIT:
	double(*func)(double, void *, short, short);
CODE:
	func   = INT2PTR(double(*)(double, void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2, s3);
OUTPUT:
	RETVAL

short
nci_sdpss( c_func, d0, p1, s2, s3 )
	SV* c_func
	double d0
	void * p1
	short s2
	short s3
PREINIT:
	short(*func)(double, void *, short, short);
CODE:
	func   = INT2PTR(short(*)(double, void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2, s3);
OUTPUT:
	RETVAL

float
nci_fdpss( c_func, d0, p1, s2, s3 )
	SV* c_func
	double d0
	void * p1
	short s2
	short s3
PREINIT:
	float(*func)(double, void *, short, short);
CODE:
	func   = INT2PTR(float(*)(double, void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2, s3);
OUTPUT:
	RETVAL

char *
nci_tdpss( c_func, d0, p1, s2, s3 )
	SV* c_func
	double d0
	void * p1
	short s2
	short s3
PREINIT:
	char *(*func)(double, void *, short, short);
CODE:
	func   = INT2PTR(char *(*)(double, void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2, s3);
OUTPUT:
	RETVAL

int
nci_idpss( c_func, d0, p1, s2, s3 )
	SV* c_func
	double d0
	void * p1
	short s2
	short s3
PREINIT:
	int(*func)(double, void *, short, short);
CODE:
	func   = INT2PTR(int(*)(double, void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2, s3);
OUTPUT:
	RETVAL

void *
nci_pspss( c_func, s0, p1, s2, s3 )
	SV* c_func
	short s0
	void * p1
	short s2
	short s3
PREINIT:
	void *(*func)(short, void *, short, short);
CODE:
	func   = INT2PTR(void *(*)(short, void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2, s3);
OUTPUT:
	RETVAL

void
nci_vspss( c_func, s0, p1, s2, s3 )
	SV* c_func
	short s0
	void * p1
	short s2
	short s3
PREINIT:
	void(*func)(short, void *, short, short);
CODE:
	func   = INT2PTR(void(*)(short, void *, short, short), SvIV(c_func) );
	(*func)(s0, p1, s2, s3);

double
nci_dspss( c_func, s0, p1, s2, s3 )
	SV* c_func
	short s0
	void * p1
	short s2
	short s3
PREINIT:
	double(*func)(short, void *, short, short);
CODE:
	func   = INT2PTR(double(*)(short, void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2, s3);
OUTPUT:
	RETVAL

short
nci_sspss( c_func, s0, p1, s2, s3 )
	SV* c_func
	short s0
	void * p1
	short s2
	short s3
PREINIT:
	short(*func)(short, void *, short, short);
CODE:
	func   = INT2PTR(short(*)(short, void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2, s3);
OUTPUT:
	RETVAL

float
nci_fspss( c_func, s0, p1, s2, s3 )
	SV* c_func
	short s0
	void * p1
	short s2
	short s3
PREINIT:
	float(*func)(short, void *, short, short);
CODE:
	func   = INT2PTR(float(*)(short, void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2, s3);
OUTPUT:
	RETVAL

char *
nci_tspss( c_func, s0, p1, s2, s3 )
	SV* c_func
	short s0
	void * p1
	short s2
	short s3
PREINIT:
	char *(*func)(short, void *, short, short);
CODE:
	func   = INT2PTR(char *(*)(short, void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2, s3);
OUTPUT:
	RETVAL

int
nci_ispss( c_func, s0, p1, s2, s3 )
	SV* c_func
	short s0
	void * p1
	short s2
	short s3
PREINIT:
	int(*func)(short, void *, short, short);
CODE:
	func   = INT2PTR(int(*)(short, void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2, s3);
OUTPUT:
	RETVAL

void *
nci_pfpss( c_func, f0, p1, s2, s3 )
	SV* c_func
	float f0
	void * p1
	short s2
	short s3
PREINIT:
	void *(*func)(float, void *, short, short);
CODE:
	func   = INT2PTR(void *(*)(float, void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2, s3);
OUTPUT:
	RETVAL

void
nci_vfpss( c_func, f0, p1, s2, s3 )
	SV* c_func
	float f0
	void * p1
	short s2
	short s3
PREINIT:
	void(*func)(float, void *, short, short);
CODE:
	func   = INT2PTR(void(*)(float, void *, short, short), SvIV(c_func) );
	(*func)(f0, p1, s2, s3);

double
nci_dfpss( c_func, f0, p1, s2, s3 )
	SV* c_func
	float f0
	void * p1
	short s2
	short s3
PREINIT:
	double(*func)(float, void *, short, short);
CODE:
	func   = INT2PTR(double(*)(float, void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2, s3);
OUTPUT:
	RETVAL

short
nci_sfpss( c_func, f0, p1, s2, s3 )
	SV* c_func
	float f0
	void * p1
	short s2
	short s3
PREINIT:
	short(*func)(float, void *, short, short);
CODE:
	func   = INT2PTR(short(*)(float, void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2, s3);
OUTPUT:
	RETVAL

float
nci_ffpss( c_func, f0, p1, s2, s3 )
	SV* c_func
	float f0
	void * p1
	short s2
	short s3
PREINIT:
	float(*func)(float, void *, short, short);
CODE:
	func   = INT2PTR(float(*)(float, void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2, s3);
OUTPUT:
	RETVAL

char *
nci_tfpss( c_func, f0, p1, s2, s3 )
	SV* c_func
	float f0
	void * p1
	short s2
	short s3
PREINIT:
	char *(*func)(float, void *, short, short);
CODE:
	func   = INT2PTR(char *(*)(float, void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2, s3);
OUTPUT:
	RETVAL

int
nci_ifpss( c_func, f0, p1, s2, s3 )
	SV* c_func
	float f0
	void * p1
	short s2
	short s3
PREINIT:
	int(*func)(float, void *, short, short);
CODE:
	func   = INT2PTR(int(*)(float, void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2, s3);
OUTPUT:
	RETVAL

void *
nci_ptpss( c_func, t0, p1, s2, s3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	short s3
PREINIT:
	void *(*func)(char *, void *, short, short);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2, s3);
OUTPUT:
	RETVAL

void
nci_vtpss( c_func, t0, p1, s2, s3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	short s3
PREINIT:
	void(*func)(char *, void *, short, short);
CODE:
	func   = INT2PTR(void(*)(char *, void *, short, short), SvIV(c_func) );
	(*func)(t0, p1, s2, s3);

double
nci_dtpss( c_func, t0, p1, s2, s3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	short s3
PREINIT:
	double(*func)(char *, void *, short, short);
CODE:
	func   = INT2PTR(double(*)(char *, void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2, s3);
OUTPUT:
	RETVAL

short
nci_stpss( c_func, t0, p1, s2, s3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	short s3
PREINIT:
	short(*func)(char *, void *, short, short);
CODE:
	func   = INT2PTR(short(*)(char *, void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2, s3);
OUTPUT:
	RETVAL

float
nci_ftpss( c_func, t0, p1, s2, s3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	short s3
PREINIT:
	float(*func)(char *, void *, short, short);
CODE:
	func   = INT2PTR(float(*)(char *, void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2, s3);
OUTPUT:
	RETVAL

char *
nci_ttpss( c_func, t0, p1, s2, s3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	short s3
PREINIT:
	char *(*func)(char *, void *, short, short);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2, s3);
OUTPUT:
	RETVAL

int
nci_itpss( c_func, t0, p1, s2, s3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	short s3
PREINIT:
	int(*func)(char *, void *, short, short);
CODE:
	func   = INT2PTR(int(*)(char *, void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2, s3);
OUTPUT:
	RETVAL

void *
nci_pipss( c_func, i0, p1, s2, s3 )
	SV* c_func
	int i0
	void * p1
	short s2
	short s3
PREINIT:
	void *(*func)(int, void *, short, short);
CODE:
	func   = INT2PTR(void *(*)(int, void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2, s3);
OUTPUT:
	RETVAL

void
nci_vipss( c_func, i0, p1, s2, s3 )
	SV* c_func
	int i0
	void * p1
	short s2
	short s3
PREINIT:
	void(*func)(int, void *, short, short);
CODE:
	func   = INT2PTR(void(*)(int, void *, short, short), SvIV(c_func) );
	(*func)(i0, p1, s2, s3);

double
nci_dipss( c_func, i0, p1, s2, s3 )
	SV* c_func
	int i0
	void * p1
	short s2
	short s3
PREINIT:
	double(*func)(int, void *, short, short);
CODE:
	func   = INT2PTR(double(*)(int, void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2, s3);
OUTPUT:
	RETVAL

short
nci_sipss( c_func, i0, p1, s2, s3 )
	SV* c_func
	int i0
	void * p1
	short s2
	short s3
PREINIT:
	short(*func)(int, void *, short, short);
CODE:
	func   = INT2PTR(short(*)(int, void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2, s3);
OUTPUT:
	RETVAL

float
nci_fipss( c_func, i0, p1, s2, s3 )
	SV* c_func
	int i0
	void * p1
	short s2
	short s3
PREINIT:
	float(*func)(int, void *, short, short);
CODE:
	func   = INT2PTR(float(*)(int, void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2, s3);
OUTPUT:
	RETVAL

char *
nci_tipss( c_func, i0, p1, s2, s3 )
	SV* c_func
	int i0
	void * p1
	short s2
	short s3
PREINIT:
	char *(*func)(int, void *, short, short);
CODE:
	func   = INT2PTR(char *(*)(int, void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2, s3);
OUTPUT:
	RETVAL

int
nci_iipss( c_func, i0, p1, s2, s3 )
	SV* c_func
	int i0
	void * p1
	short s2
	short s3
PREINIT:
	int(*func)(int, void *, short, short);
CODE:
	func   = INT2PTR(int(*)(int, void *, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2, s3);
OUTPUT:
	RETVAL

void *
nci_ppdss( c_func, p0, d1, s2, s3 )
	SV* c_func
	void * p0
	double d1
	short s2
	short s3
PREINIT:
	void *(*func)(void *, double, short, short);
CODE:
	func   = INT2PTR(void *(*)(void *, double, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2, s3);
OUTPUT:
	RETVAL

void
nci_vpdss( c_func, p0, d1, s2, s3 )
	SV* c_func
	void * p0
	double d1
	short s2
	short s3
PREINIT:
	void(*func)(void *, double, short, short);
CODE:
	func   = INT2PTR(void(*)(void *, double, short, short), SvIV(c_func) );
	(*func)(p0, d1, s2, s3);

double
nci_dpdss( c_func, p0, d1, s2, s3 )
	SV* c_func
	void * p0
	double d1
	short s2
	short s3
PREINIT:
	double(*func)(void *, double, short, short);
CODE:
	func   = INT2PTR(double(*)(void *, double, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2, s3);
OUTPUT:
	RETVAL

short
nci_spdss( c_func, p0, d1, s2, s3 )
	SV* c_func
	void * p0
	double d1
	short s2
	short s3
PREINIT:
	short(*func)(void *, double, short, short);
CODE:
	func   = INT2PTR(short(*)(void *, double, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2, s3);
OUTPUT:
	RETVAL

float
nci_fpdss( c_func, p0, d1, s2, s3 )
	SV* c_func
	void * p0
	double d1
	short s2
	short s3
PREINIT:
	float(*func)(void *, double, short, short);
CODE:
	func   = INT2PTR(float(*)(void *, double, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2, s3);
OUTPUT:
	RETVAL

char *
nci_tpdss( c_func, p0, d1, s2, s3 )
	SV* c_func
	void * p0
	double d1
	short s2
	short s3
PREINIT:
	char *(*func)(void *, double, short, short);
CODE:
	func   = INT2PTR(char *(*)(void *, double, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2, s3);
OUTPUT:
	RETVAL

int
nci_ipdss( c_func, p0, d1, s2, s3 )
	SV* c_func
	void * p0
	double d1
	short s2
	short s3
PREINIT:
	int(*func)(void *, double, short, short);
CODE:
	func   = INT2PTR(int(*)(void *, double, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2, s3);
OUTPUT:
	RETVAL

void *
nci_pvdss( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvdss( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvdss( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svdss( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvdss( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvdss( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivdss( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pddss( c_func, d0, d1, s2, s3 )
	SV* c_func
	double d0
	double d1
	short s2
	short s3
PREINIT:
	void *(*func)(double, double, short, short);
CODE:
	func   = INT2PTR(void *(*)(double, double, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2, s3);
OUTPUT:
	RETVAL

void
nci_vddss( c_func, d0, d1, s2, s3 )
	SV* c_func
	double d0
	double d1
	short s2
	short s3
PREINIT:
	void(*func)(double, double, short, short);
CODE:
	func   = INT2PTR(void(*)(double, double, short, short), SvIV(c_func) );
	(*func)(d0, d1, s2, s3);

double
nci_dddss( c_func, d0, d1, s2, s3 )
	SV* c_func
	double d0
	double d1
	short s2
	short s3
PREINIT:
	double(*func)(double, double, short, short);
CODE:
	func   = INT2PTR(double(*)(double, double, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2, s3);
OUTPUT:
	RETVAL

short
nci_sddss( c_func, d0, d1, s2, s3 )
	SV* c_func
	double d0
	double d1
	short s2
	short s3
PREINIT:
	short(*func)(double, double, short, short);
CODE:
	func   = INT2PTR(short(*)(double, double, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2, s3);
OUTPUT:
	RETVAL

float
nci_fddss( c_func, d0, d1, s2, s3 )
	SV* c_func
	double d0
	double d1
	short s2
	short s3
PREINIT:
	float(*func)(double, double, short, short);
CODE:
	func   = INT2PTR(float(*)(double, double, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2, s3);
OUTPUT:
	RETVAL

char *
nci_tddss( c_func, d0, d1, s2, s3 )
	SV* c_func
	double d0
	double d1
	short s2
	short s3
PREINIT:
	char *(*func)(double, double, short, short);
CODE:
	func   = INT2PTR(char *(*)(double, double, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2, s3);
OUTPUT:
	RETVAL

int
nci_iddss( c_func, d0, d1, s2, s3 )
	SV* c_func
	double d0
	double d1
	short s2
	short s3
PREINIT:
	int(*func)(double, double, short, short);
CODE:
	func   = INT2PTR(int(*)(double, double, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2, s3);
OUTPUT:
	RETVAL

void *
nci_psdss( c_func, s0, d1, s2, s3 )
	SV* c_func
	short s0
	double d1
	short s2
	short s3
PREINIT:
	void *(*func)(short, double, short, short);
CODE:
	func   = INT2PTR(void *(*)(short, double, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2, s3);
OUTPUT:
	RETVAL

void
nci_vsdss( c_func, s0, d1, s2, s3 )
	SV* c_func
	short s0
	double d1
	short s2
	short s3
PREINIT:
	void(*func)(short, double, short, short);
CODE:
	func   = INT2PTR(void(*)(short, double, short, short), SvIV(c_func) );
	(*func)(s0, d1, s2, s3);

double
nci_dsdss( c_func, s0, d1, s2, s3 )
	SV* c_func
	short s0
	double d1
	short s2
	short s3
PREINIT:
	double(*func)(short, double, short, short);
CODE:
	func   = INT2PTR(double(*)(short, double, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2, s3);
OUTPUT:
	RETVAL

short
nci_ssdss( c_func, s0, d1, s2, s3 )
	SV* c_func
	short s0
	double d1
	short s2
	short s3
PREINIT:
	short(*func)(short, double, short, short);
CODE:
	func   = INT2PTR(short(*)(short, double, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2, s3);
OUTPUT:
	RETVAL

float
nci_fsdss( c_func, s0, d1, s2, s3 )
	SV* c_func
	short s0
	double d1
	short s2
	short s3
PREINIT:
	float(*func)(short, double, short, short);
CODE:
	func   = INT2PTR(float(*)(short, double, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2, s3);
OUTPUT:
	RETVAL

char *
nci_tsdss( c_func, s0, d1, s2, s3 )
	SV* c_func
	short s0
	double d1
	short s2
	short s3
PREINIT:
	char *(*func)(short, double, short, short);
CODE:
	func   = INT2PTR(char *(*)(short, double, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2, s3);
OUTPUT:
	RETVAL

int
nci_isdss( c_func, s0, d1, s2, s3 )
	SV* c_func
	short s0
	double d1
	short s2
	short s3
PREINIT:
	int(*func)(short, double, short, short);
CODE:
	func   = INT2PTR(int(*)(short, double, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2, s3);
OUTPUT:
	RETVAL

void *
nci_pfdss( c_func, f0, d1, s2, s3 )
	SV* c_func
	float f0
	double d1
	short s2
	short s3
PREINIT:
	void *(*func)(float, double, short, short);
CODE:
	func   = INT2PTR(void *(*)(float, double, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2, s3);
OUTPUT:
	RETVAL

void
nci_vfdss( c_func, f0, d1, s2, s3 )
	SV* c_func
	float f0
	double d1
	short s2
	short s3
PREINIT:
	void(*func)(float, double, short, short);
CODE:
	func   = INT2PTR(void(*)(float, double, short, short), SvIV(c_func) );
	(*func)(f0, d1, s2, s3);

double
nci_dfdss( c_func, f0, d1, s2, s3 )
	SV* c_func
	float f0
	double d1
	short s2
	short s3
PREINIT:
	double(*func)(float, double, short, short);
CODE:
	func   = INT2PTR(double(*)(float, double, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2, s3);
OUTPUT:
	RETVAL

short
nci_sfdss( c_func, f0, d1, s2, s3 )
	SV* c_func
	float f0
	double d1
	short s2
	short s3
PREINIT:
	short(*func)(float, double, short, short);
CODE:
	func   = INT2PTR(short(*)(float, double, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2, s3);
OUTPUT:
	RETVAL

float
nci_ffdss( c_func, f0, d1, s2, s3 )
	SV* c_func
	float f0
	double d1
	short s2
	short s3
PREINIT:
	float(*func)(float, double, short, short);
CODE:
	func   = INT2PTR(float(*)(float, double, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2, s3);
OUTPUT:
	RETVAL

char *
nci_tfdss( c_func, f0, d1, s2, s3 )
	SV* c_func
	float f0
	double d1
	short s2
	short s3
PREINIT:
	char *(*func)(float, double, short, short);
CODE:
	func   = INT2PTR(char *(*)(float, double, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2, s3);
OUTPUT:
	RETVAL

int
nci_ifdss( c_func, f0, d1, s2, s3 )
	SV* c_func
	float f0
	double d1
	short s2
	short s3
PREINIT:
	int(*func)(float, double, short, short);
CODE:
	func   = INT2PTR(int(*)(float, double, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2, s3);
OUTPUT:
	RETVAL

void *
nci_ptdss( c_func, t0, d1, s2, s3 )
	SV* c_func
	char * t0
	double d1
	short s2
	short s3
PREINIT:
	void *(*func)(char *, double, short, short);
CODE:
	func   = INT2PTR(void *(*)(char *, double, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2, s3);
OUTPUT:
	RETVAL

void
nci_vtdss( c_func, t0, d1, s2, s3 )
	SV* c_func
	char * t0
	double d1
	short s2
	short s3
PREINIT:
	void(*func)(char *, double, short, short);
CODE:
	func   = INT2PTR(void(*)(char *, double, short, short), SvIV(c_func) );
	(*func)(t0, d1, s2, s3);

double
nci_dtdss( c_func, t0, d1, s2, s3 )
	SV* c_func
	char * t0
	double d1
	short s2
	short s3
PREINIT:
	double(*func)(char *, double, short, short);
CODE:
	func   = INT2PTR(double(*)(char *, double, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2, s3);
OUTPUT:
	RETVAL

short
nci_stdss( c_func, t0, d1, s2, s3 )
	SV* c_func
	char * t0
	double d1
	short s2
	short s3
PREINIT:
	short(*func)(char *, double, short, short);
CODE:
	func   = INT2PTR(short(*)(char *, double, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2, s3);
OUTPUT:
	RETVAL

float
nci_ftdss( c_func, t0, d1, s2, s3 )
	SV* c_func
	char * t0
	double d1
	short s2
	short s3
PREINIT:
	float(*func)(char *, double, short, short);
CODE:
	func   = INT2PTR(float(*)(char *, double, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2, s3);
OUTPUT:
	RETVAL

char *
nci_ttdss( c_func, t0, d1, s2, s3 )
	SV* c_func
	char * t0
	double d1
	short s2
	short s3
PREINIT:
	char *(*func)(char *, double, short, short);
CODE:
	func   = INT2PTR(char *(*)(char *, double, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2, s3);
OUTPUT:
	RETVAL

int
nci_itdss( c_func, t0, d1, s2, s3 )
	SV* c_func
	char * t0
	double d1
	short s2
	short s3
PREINIT:
	int(*func)(char *, double, short, short);
CODE:
	func   = INT2PTR(int(*)(char *, double, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2, s3);
OUTPUT:
	RETVAL

void *
nci_pidss( c_func, i0, d1, s2, s3 )
	SV* c_func
	int i0
	double d1
	short s2
	short s3
PREINIT:
	void *(*func)(int, double, short, short);
CODE:
	func   = INT2PTR(void *(*)(int, double, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2, s3);
OUTPUT:
	RETVAL

void
nci_vidss( c_func, i0, d1, s2, s3 )
	SV* c_func
	int i0
	double d1
	short s2
	short s3
PREINIT:
	void(*func)(int, double, short, short);
CODE:
	func   = INT2PTR(void(*)(int, double, short, short), SvIV(c_func) );
	(*func)(i0, d1, s2, s3);

double
nci_didss( c_func, i0, d1, s2, s3 )
	SV* c_func
	int i0
	double d1
	short s2
	short s3
PREINIT:
	double(*func)(int, double, short, short);
CODE:
	func   = INT2PTR(double(*)(int, double, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2, s3);
OUTPUT:
	RETVAL

short
nci_sidss( c_func, i0, d1, s2, s3 )
	SV* c_func
	int i0
	double d1
	short s2
	short s3
PREINIT:
	short(*func)(int, double, short, short);
CODE:
	func   = INT2PTR(short(*)(int, double, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2, s3);
OUTPUT:
	RETVAL

float
nci_fidss( c_func, i0, d1, s2, s3 )
	SV* c_func
	int i0
	double d1
	short s2
	short s3
PREINIT:
	float(*func)(int, double, short, short);
CODE:
	func   = INT2PTR(float(*)(int, double, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2, s3);
OUTPUT:
	RETVAL

char *
nci_tidss( c_func, i0, d1, s2, s3 )
	SV* c_func
	int i0
	double d1
	short s2
	short s3
PREINIT:
	char *(*func)(int, double, short, short);
CODE:
	func   = INT2PTR(char *(*)(int, double, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2, s3);
OUTPUT:
	RETVAL

int
nci_iidss( c_func, i0, d1, s2, s3 )
	SV* c_func
	int i0
	double d1
	short s2
	short s3
PREINIT:
	int(*func)(int, double, short, short);
CODE:
	func   = INT2PTR(int(*)(int, double, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2, s3);
OUTPUT:
	RETVAL

void *
nci_ppsss( c_func, p0, s1, s2, s3 )
	SV* c_func
	void * p0
	short s1
	short s2
	short s3
PREINIT:
	void *(*func)(void *, short, short, short);
CODE:
	func   = INT2PTR(void *(*)(void *, short, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2, s3);
OUTPUT:
	RETVAL

void
nci_vpsss( c_func, p0, s1, s2, s3 )
	SV* c_func
	void * p0
	short s1
	short s2
	short s3
PREINIT:
	void(*func)(void *, short, short, short);
CODE:
	func   = INT2PTR(void(*)(void *, short, short, short), SvIV(c_func) );
	(*func)(p0, s1, s2, s3);

double
nci_dpsss( c_func, p0, s1, s2, s3 )
	SV* c_func
	void * p0
	short s1
	short s2
	short s3
PREINIT:
	double(*func)(void *, short, short, short);
CODE:
	func   = INT2PTR(double(*)(void *, short, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2, s3);
OUTPUT:
	RETVAL

short
nci_spsss( c_func, p0, s1, s2, s3 )
	SV* c_func
	void * p0
	short s1
	short s2
	short s3
PREINIT:
	short(*func)(void *, short, short, short);
CODE:
	func   = INT2PTR(short(*)(void *, short, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2, s3);
OUTPUT:
	RETVAL

float
nci_fpsss( c_func, p0, s1, s2, s3 )
	SV* c_func
	void * p0
	short s1
	short s2
	short s3
PREINIT:
	float(*func)(void *, short, short, short);
CODE:
	func   = INT2PTR(float(*)(void *, short, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2, s3);
OUTPUT:
	RETVAL

char *
nci_tpsss( c_func, p0, s1, s2, s3 )
	SV* c_func
	void * p0
	short s1
	short s2
	short s3
PREINIT:
	char *(*func)(void *, short, short, short);
CODE:
	func   = INT2PTR(char *(*)(void *, short, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2, s3);
OUTPUT:
	RETVAL

int
nci_ipsss( c_func, p0, s1, s2, s3 )
	SV* c_func
	void * p0
	short s1
	short s2
	short s3
PREINIT:
	int(*func)(void *, short, short, short);
CODE:
	func   = INT2PTR(int(*)(void *, short, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2, s3);
OUTPUT:
	RETVAL

void *
nci_pvsss( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvsss( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvsss( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svsss( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvsss( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvsss( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivsss( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdsss( c_func, d0, s1, s2, s3 )
	SV* c_func
	double d0
	short s1
	short s2
	short s3
PREINIT:
	void *(*func)(double, short, short, short);
CODE:
	func   = INT2PTR(void *(*)(double, short, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2, s3);
OUTPUT:
	RETVAL

void
nci_vdsss( c_func, d0, s1, s2, s3 )
	SV* c_func
	double d0
	short s1
	short s2
	short s3
PREINIT:
	void(*func)(double, short, short, short);
CODE:
	func   = INT2PTR(void(*)(double, short, short, short), SvIV(c_func) );
	(*func)(d0, s1, s2, s3);

double
nci_ddsss( c_func, d0, s1, s2, s3 )
	SV* c_func
	double d0
	short s1
	short s2
	short s3
PREINIT:
	double(*func)(double, short, short, short);
CODE:
	func   = INT2PTR(double(*)(double, short, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2, s3);
OUTPUT:
	RETVAL

short
nci_sdsss( c_func, d0, s1, s2, s3 )
	SV* c_func
	double d0
	short s1
	short s2
	short s3
PREINIT:
	short(*func)(double, short, short, short);
CODE:
	func   = INT2PTR(short(*)(double, short, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2, s3);
OUTPUT:
	RETVAL

float
nci_fdsss( c_func, d0, s1, s2, s3 )
	SV* c_func
	double d0
	short s1
	short s2
	short s3
PREINIT:
	float(*func)(double, short, short, short);
CODE:
	func   = INT2PTR(float(*)(double, short, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2, s3);
OUTPUT:
	RETVAL

char *
nci_tdsss( c_func, d0, s1, s2, s3 )
	SV* c_func
	double d0
	short s1
	short s2
	short s3
PREINIT:
	char *(*func)(double, short, short, short);
CODE:
	func   = INT2PTR(char *(*)(double, short, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2, s3);
OUTPUT:
	RETVAL

int
nci_idsss( c_func, d0, s1, s2, s3 )
	SV* c_func
	double d0
	short s1
	short s2
	short s3
PREINIT:
	int(*func)(double, short, short, short);
CODE:
	func   = INT2PTR(int(*)(double, short, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2, s3);
OUTPUT:
	RETVAL

void *
nci_pssss( c_func, s0, s1, s2, s3 )
	SV* c_func
	short s0
	short s1
	short s2
	short s3
PREINIT:
	void *(*func)(short, short, short, short);
CODE:
	func   = INT2PTR(void *(*)(short, short, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2, s3);
OUTPUT:
	RETVAL

void
nci_vssss( c_func, s0, s1, s2, s3 )
	SV* c_func
	short s0
	short s1
	short s2
	short s3
PREINIT:
	void(*func)(short, short, short, short);
CODE:
	func   = INT2PTR(void(*)(short, short, short, short), SvIV(c_func) );
	(*func)(s0, s1, s2, s3);

double
nci_dssss( c_func, s0, s1, s2, s3 )
	SV* c_func
	short s0
	short s1
	short s2
	short s3
PREINIT:
	double(*func)(short, short, short, short);
CODE:
	func   = INT2PTR(double(*)(short, short, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2, s3);
OUTPUT:
	RETVAL

short
nci_sssss( c_func, s0, s1, s2, s3 )
	SV* c_func
	short s0
	short s1
	short s2
	short s3
PREINIT:
	short(*func)(short, short, short, short);
CODE:
	func   = INT2PTR(short(*)(short, short, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2, s3);
OUTPUT:
	RETVAL

float
nci_fssss( c_func, s0, s1, s2, s3 )
	SV* c_func
	short s0
	short s1
	short s2
	short s3
PREINIT:
	float(*func)(short, short, short, short);
CODE:
	func   = INT2PTR(float(*)(short, short, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2, s3);
OUTPUT:
	RETVAL

char *
nci_tssss( c_func, s0, s1, s2, s3 )
	SV* c_func
	short s0
	short s1
	short s2
	short s3
PREINIT:
	char *(*func)(short, short, short, short);
CODE:
	func   = INT2PTR(char *(*)(short, short, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2, s3);
OUTPUT:
	RETVAL

int
nci_issss( c_func, s0, s1, s2, s3 )
	SV* c_func
	short s0
	short s1
	short s2
	short s3
PREINIT:
	int(*func)(short, short, short, short);
CODE:
	func   = INT2PTR(int(*)(short, short, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2, s3);
OUTPUT:
	RETVAL

void *
nci_pfsss( c_func, f0, s1, s2, s3 )
	SV* c_func
	float f0
	short s1
	short s2
	short s3
PREINIT:
	void *(*func)(float, short, short, short);
CODE:
	func   = INT2PTR(void *(*)(float, short, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2, s3);
OUTPUT:
	RETVAL

void
nci_vfsss( c_func, f0, s1, s2, s3 )
	SV* c_func
	float f0
	short s1
	short s2
	short s3
PREINIT:
	void(*func)(float, short, short, short);
CODE:
	func   = INT2PTR(void(*)(float, short, short, short), SvIV(c_func) );
	(*func)(f0, s1, s2, s3);

double
nci_dfsss( c_func, f0, s1, s2, s3 )
	SV* c_func
	float f0
	short s1
	short s2
	short s3
PREINIT:
	double(*func)(float, short, short, short);
CODE:
	func   = INT2PTR(double(*)(float, short, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2, s3);
OUTPUT:
	RETVAL

short
nci_sfsss( c_func, f0, s1, s2, s3 )
	SV* c_func
	float f0
	short s1
	short s2
	short s3
PREINIT:
	short(*func)(float, short, short, short);
CODE:
	func   = INT2PTR(short(*)(float, short, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2, s3);
OUTPUT:
	RETVAL

float
nci_ffsss( c_func, f0, s1, s2, s3 )
	SV* c_func
	float f0
	short s1
	short s2
	short s3
PREINIT:
	float(*func)(float, short, short, short);
CODE:
	func   = INT2PTR(float(*)(float, short, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2, s3);
OUTPUT:
	RETVAL

char *
nci_tfsss( c_func, f0, s1, s2, s3 )
	SV* c_func
	float f0
	short s1
	short s2
	short s3
PREINIT:
	char *(*func)(float, short, short, short);
CODE:
	func   = INT2PTR(char *(*)(float, short, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2, s3);
OUTPUT:
	RETVAL

int
nci_ifsss( c_func, f0, s1, s2, s3 )
	SV* c_func
	float f0
	short s1
	short s2
	short s3
PREINIT:
	int(*func)(float, short, short, short);
CODE:
	func   = INT2PTR(int(*)(float, short, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2, s3);
OUTPUT:
	RETVAL

void *
nci_ptsss( c_func, t0, s1, s2, s3 )
	SV* c_func
	char * t0
	short s1
	short s2
	short s3
PREINIT:
	void *(*func)(char *, short, short, short);
CODE:
	func   = INT2PTR(void *(*)(char *, short, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2, s3);
OUTPUT:
	RETVAL

void
nci_vtsss( c_func, t0, s1, s2, s3 )
	SV* c_func
	char * t0
	short s1
	short s2
	short s3
PREINIT:
	void(*func)(char *, short, short, short);
CODE:
	func   = INT2PTR(void(*)(char *, short, short, short), SvIV(c_func) );
	(*func)(t0, s1, s2, s3);

double
nci_dtsss( c_func, t0, s1, s2, s3 )
	SV* c_func
	char * t0
	short s1
	short s2
	short s3
PREINIT:
	double(*func)(char *, short, short, short);
CODE:
	func   = INT2PTR(double(*)(char *, short, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2, s3);
OUTPUT:
	RETVAL

short
nci_stsss( c_func, t0, s1, s2, s3 )
	SV* c_func
	char * t0
	short s1
	short s2
	short s3
PREINIT:
	short(*func)(char *, short, short, short);
CODE:
	func   = INT2PTR(short(*)(char *, short, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2, s3);
OUTPUT:
	RETVAL

float
nci_ftsss( c_func, t0, s1, s2, s3 )
	SV* c_func
	char * t0
	short s1
	short s2
	short s3
PREINIT:
	float(*func)(char *, short, short, short);
CODE:
	func   = INT2PTR(float(*)(char *, short, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2, s3);
OUTPUT:
	RETVAL

char *
nci_ttsss( c_func, t0, s1, s2, s3 )
	SV* c_func
	char * t0
	short s1
	short s2
	short s3
PREINIT:
	char *(*func)(char *, short, short, short);
CODE:
	func   = INT2PTR(char *(*)(char *, short, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2, s3);
OUTPUT:
	RETVAL

int
nci_itsss( c_func, t0, s1, s2, s3 )
	SV* c_func
	char * t0
	short s1
	short s2
	short s3
PREINIT:
	int(*func)(char *, short, short, short);
CODE:
	func   = INT2PTR(int(*)(char *, short, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2, s3);
OUTPUT:
	RETVAL

void *
nci_pisss( c_func, i0, s1, s2, s3 )
	SV* c_func
	int i0
	short s1
	short s2
	short s3
PREINIT:
	void *(*func)(int, short, short, short);
CODE:
	func   = INT2PTR(void *(*)(int, short, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2, s3);
OUTPUT:
	RETVAL

void
nci_visss( c_func, i0, s1, s2, s3 )
	SV* c_func
	int i0
	short s1
	short s2
	short s3
PREINIT:
	void(*func)(int, short, short, short);
CODE:
	func   = INT2PTR(void(*)(int, short, short, short), SvIV(c_func) );
	(*func)(i0, s1, s2, s3);

double
nci_disss( c_func, i0, s1, s2, s3 )
	SV* c_func
	int i0
	short s1
	short s2
	short s3
PREINIT:
	double(*func)(int, short, short, short);
CODE:
	func   = INT2PTR(double(*)(int, short, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2, s3);
OUTPUT:
	RETVAL

short
nci_sisss( c_func, i0, s1, s2, s3 )
	SV* c_func
	int i0
	short s1
	short s2
	short s3
PREINIT:
	short(*func)(int, short, short, short);
CODE:
	func   = INT2PTR(short(*)(int, short, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2, s3);
OUTPUT:
	RETVAL

float
nci_fisss( c_func, i0, s1, s2, s3 )
	SV* c_func
	int i0
	short s1
	short s2
	short s3
PREINIT:
	float(*func)(int, short, short, short);
CODE:
	func   = INT2PTR(float(*)(int, short, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2, s3);
OUTPUT:
	RETVAL

char *
nci_tisss( c_func, i0, s1, s2, s3 )
	SV* c_func
	int i0
	short s1
	short s2
	short s3
PREINIT:
	char *(*func)(int, short, short, short);
CODE:
	func   = INT2PTR(char *(*)(int, short, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2, s3);
OUTPUT:
	RETVAL

int
nci_iisss( c_func, i0, s1, s2, s3 )
	SV* c_func
	int i0
	short s1
	short s2
	short s3
PREINIT:
	int(*func)(int, short, short, short);
CODE:
	func   = INT2PTR(int(*)(int, short, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2, s3);
OUTPUT:
	RETVAL

void *
nci_ppfss( c_func, p0, f1, s2, s3 )
	SV* c_func
	void * p0
	float f1
	short s2
	short s3
PREINIT:
	void *(*func)(void *, float, short, short);
CODE:
	func   = INT2PTR(void *(*)(void *, float, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2, s3);
OUTPUT:
	RETVAL

void
nci_vpfss( c_func, p0, f1, s2, s3 )
	SV* c_func
	void * p0
	float f1
	short s2
	short s3
PREINIT:
	void(*func)(void *, float, short, short);
CODE:
	func   = INT2PTR(void(*)(void *, float, short, short), SvIV(c_func) );
	(*func)(p0, f1, s2, s3);

double
nci_dpfss( c_func, p0, f1, s2, s3 )
	SV* c_func
	void * p0
	float f1
	short s2
	short s3
PREINIT:
	double(*func)(void *, float, short, short);
CODE:
	func   = INT2PTR(double(*)(void *, float, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2, s3);
OUTPUT:
	RETVAL

short
nci_spfss( c_func, p0, f1, s2, s3 )
	SV* c_func
	void * p0
	float f1
	short s2
	short s3
PREINIT:
	short(*func)(void *, float, short, short);
CODE:
	func   = INT2PTR(short(*)(void *, float, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2, s3);
OUTPUT:
	RETVAL

float
nci_fpfss( c_func, p0, f1, s2, s3 )
	SV* c_func
	void * p0
	float f1
	short s2
	short s3
PREINIT:
	float(*func)(void *, float, short, short);
CODE:
	func   = INT2PTR(float(*)(void *, float, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2, s3);
OUTPUT:
	RETVAL

char *
nci_tpfss( c_func, p0, f1, s2, s3 )
	SV* c_func
	void * p0
	float f1
	short s2
	short s3
PREINIT:
	char *(*func)(void *, float, short, short);
CODE:
	func   = INT2PTR(char *(*)(void *, float, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2, s3);
OUTPUT:
	RETVAL

int
nci_ipfss( c_func, p0, f1, s2, s3 )
	SV* c_func
	void * p0
	float f1
	short s2
	short s3
PREINIT:
	int(*func)(void *, float, short, short);
CODE:
	func   = INT2PTR(int(*)(void *, float, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2, s3);
OUTPUT:
	RETVAL

void *
nci_pvfss( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvfss( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvfss( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svfss( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvfss( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvfss( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivfss( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdfss( c_func, d0, f1, s2, s3 )
	SV* c_func
	double d0
	float f1
	short s2
	short s3
PREINIT:
	void *(*func)(double, float, short, short);
CODE:
	func   = INT2PTR(void *(*)(double, float, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2, s3);
OUTPUT:
	RETVAL

void
nci_vdfss( c_func, d0, f1, s2, s3 )
	SV* c_func
	double d0
	float f1
	short s2
	short s3
PREINIT:
	void(*func)(double, float, short, short);
CODE:
	func   = INT2PTR(void(*)(double, float, short, short), SvIV(c_func) );
	(*func)(d0, f1, s2, s3);

double
nci_ddfss( c_func, d0, f1, s2, s3 )
	SV* c_func
	double d0
	float f1
	short s2
	short s3
PREINIT:
	double(*func)(double, float, short, short);
CODE:
	func   = INT2PTR(double(*)(double, float, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2, s3);
OUTPUT:
	RETVAL

short
nci_sdfss( c_func, d0, f1, s2, s3 )
	SV* c_func
	double d0
	float f1
	short s2
	short s3
PREINIT:
	short(*func)(double, float, short, short);
CODE:
	func   = INT2PTR(short(*)(double, float, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2, s3);
OUTPUT:
	RETVAL

float
nci_fdfss( c_func, d0, f1, s2, s3 )
	SV* c_func
	double d0
	float f1
	short s2
	short s3
PREINIT:
	float(*func)(double, float, short, short);
CODE:
	func   = INT2PTR(float(*)(double, float, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2, s3);
OUTPUT:
	RETVAL

char *
nci_tdfss( c_func, d0, f1, s2, s3 )
	SV* c_func
	double d0
	float f1
	short s2
	short s3
PREINIT:
	char *(*func)(double, float, short, short);
CODE:
	func   = INT2PTR(char *(*)(double, float, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2, s3);
OUTPUT:
	RETVAL

int
nci_idfss( c_func, d0, f1, s2, s3 )
	SV* c_func
	double d0
	float f1
	short s2
	short s3
PREINIT:
	int(*func)(double, float, short, short);
CODE:
	func   = INT2PTR(int(*)(double, float, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2, s3);
OUTPUT:
	RETVAL

void *
nci_psfss( c_func, s0, f1, s2, s3 )
	SV* c_func
	short s0
	float f1
	short s2
	short s3
PREINIT:
	void *(*func)(short, float, short, short);
CODE:
	func   = INT2PTR(void *(*)(short, float, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2, s3);
OUTPUT:
	RETVAL

void
nci_vsfss( c_func, s0, f1, s2, s3 )
	SV* c_func
	short s0
	float f1
	short s2
	short s3
PREINIT:
	void(*func)(short, float, short, short);
CODE:
	func   = INT2PTR(void(*)(short, float, short, short), SvIV(c_func) );
	(*func)(s0, f1, s2, s3);

double
nci_dsfss( c_func, s0, f1, s2, s3 )
	SV* c_func
	short s0
	float f1
	short s2
	short s3
PREINIT:
	double(*func)(short, float, short, short);
CODE:
	func   = INT2PTR(double(*)(short, float, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2, s3);
OUTPUT:
	RETVAL

short
nci_ssfss( c_func, s0, f1, s2, s3 )
	SV* c_func
	short s0
	float f1
	short s2
	short s3
PREINIT:
	short(*func)(short, float, short, short);
CODE:
	func   = INT2PTR(short(*)(short, float, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2, s3);
OUTPUT:
	RETVAL

float
nci_fsfss( c_func, s0, f1, s2, s3 )
	SV* c_func
	short s0
	float f1
	short s2
	short s3
PREINIT:
	float(*func)(short, float, short, short);
CODE:
	func   = INT2PTR(float(*)(short, float, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2, s3);
OUTPUT:
	RETVAL

char *
nci_tsfss( c_func, s0, f1, s2, s3 )
	SV* c_func
	short s0
	float f1
	short s2
	short s3
PREINIT:
	char *(*func)(short, float, short, short);
CODE:
	func   = INT2PTR(char *(*)(short, float, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2, s3);
OUTPUT:
	RETVAL

int
nci_isfss( c_func, s0, f1, s2, s3 )
	SV* c_func
	short s0
	float f1
	short s2
	short s3
PREINIT:
	int(*func)(short, float, short, short);
CODE:
	func   = INT2PTR(int(*)(short, float, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2, s3);
OUTPUT:
	RETVAL

void *
nci_pffss( c_func, f0, f1, s2, s3 )
	SV* c_func
	float f0
	float f1
	short s2
	short s3
PREINIT:
	void *(*func)(float, float, short, short);
CODE:
	func   = INT2PTR(void *(*)(float, float, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2, s3);
OUTPUT:
	RETVAL

void
nci_vffss( c_func, f0, f1, s2, s3 )
	SV* c_func
	float f0
	float f1
	short s2
	short s3
PREINIT:
	void(*func)(float, float, short, short);
CODE:
	func   = INT2PTR(void(*)(float, float, short, short), SvIV(c_func) );
	(*func)(f0, f1, s2, s3);

double
nci_dffss( c_func, f0, f1, s2, s3 )
	SV* c_func
	float f0
	float f1
	short s2
	short s3
PREINIT:
	double(*func)(float, float, short, short);
CODE:
	func   = INT2PTR(double(*)(float, float, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2, s3);
OUTPUT:
	RETVAL

short
nci_sffss( c_func, f0, f1, s2, s3 )
	SV* c_func
	float f0
	float f1
	short s2
	short s3
PREINIT:
	short(*func)(float, float, short, short);
CODE:
	func   = INT2PTR(short(*)(float, float, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2, s3);
OUTPUT:
	RETVAL

float
nci_fffss( c_func, f0, f1, s2, s3 )
	SV* c_func
	float f0
	float f1
	short s2
	short s3
PREINIT:
	float(*func)(float, float, short, short);
CODE:
	func   = INT2PTR(float(*)(float, float, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2, s3);
OUTPUT:
	RETVAL

char *
nci_tffss( c_func, f0, f1, s2, s3 )
	SV* c_func
	float f0
	float f1
	short s2
	short s3
PREINIT:
	char *(*func)(float, float, short, short);
CODE:
	func   = INT2PTR(char *(*)(float, float, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2, s3);
OUTPUT:
	RETVAL

int
nci_iffss( c_func, f0, f1, s2, s3 )
	SV* c_func
	float f0
	float f1
	short s2
	short s3
PREINIT:
	int(*func)(float, float, short, short);
CODE:
	func   = INT2PTR(int(*)(float, float, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2, s3);
OUTPUT:
	RETVAL

void *
nci_ptfss( c_func, t0, f1, s2, s3 )
	SV* c_func
	char * t0
	float f1
	short s2
	short s3
PREINIT:
	void *(*func)(char *, float, short, short);
CODE:
	func   = INT2PTR(void *(*)(char *, float, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2, s3);
OUTPUT:
	RETVAL

void
nci_vtfss( c_func, t0, f1, s2, s3 )
	SV* c_func
	char * t0
	float f1
	short s2
	short s3
PREINIT:
	void(*func)(char *, float, short, short);
CODE:
	func   = INT2PTR(void(*)(char *, float, short, short), SvIV(c_func) );
	(*func)(t0, f1, s2, s3);

double
nci_dtfss( c_func, t0, f1, s2, s3 )
	SV* c_func
	char * t0
	float f1
	short s2
	short s3
PREINIT:
	double(*func)(char *, float, short, short);
CODE:
	func   = INT2PTR(double(*)(char *, float, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2, s3);
OUTPUT:
	RETVAL

short
nci_stfss( c_func, t0, f1, s2, s3 )
	SV* c_func
	char * t0
	float f1
	short s2
	short s3
PREINIT:
	short(*func)(char *, float, short, short);
CODE:
	func   = INT2PTR(short(*)(char *, float, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2, s3);
OUTPUT:
	RETVAL

float
nci_ftfss( c_func, t0, f1, s2, s3 )
	SV* c_func
	char * t0
	float f1
	short s2
	short s3
PREINIT:
	float(*func)(char *, float, short, short);
CODE:
	func   = INT2PTR(float(*)(char *, float, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2, s3);
OUTPUT:
	RETVAL

char *
nci_ttfss( c_func, t0, f1, s2, s3 )
	SV* c_func
	char * t0
	float f1
	short s2
	short s3
PREINIT:
	char *(*func)(char *, float, short, short);
CODE:
	func   = INT2PTR(char *(*)(char *, float, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2, s3);
OUTPUT:
	RETVAL

int
nci_itfss( c_func, t0, f1, s2, s3 )
	SV* c_func
	char * t0
	float f1
	short s2
	short s3
PREINIT:
	int(*func)(char *, float, short, short);
CODE:
	func   = INT2PTR(int(*)(char *, float, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2, s3);
OUTPUT:
	RETVAL

void *
nci_pifss( c_func, i0, f1, s2, s3 )
	SV* c_func
	int i0
	float f1
	short s2
	short s3
PREINIT:
	void *(*func)(int, float, short, short);
CODE:
	func   = INT2PTR(void *(*)(int, float, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2, s3);
OUTPUT:
	RETVAL

void
nci_vifss( c_func, i0, f1, s2, s3 )
	SV* c_func
	int i0
	float f1
	short s2
	short s3
PREINIT:
	void(*func)(int, float, short, short);
CODE:
	func   = INT2PTR(void(*)(int, float, short, short), SvIV(c_func) );
	(*func)(i0, f1, s2, s3);

double
nci_difss( c_func, i0, f1, s2, s3 )
	SV* c_func
	int i0
	float f1
	short s2
	short s3
PREINIT:
	double(*func)(int, float, short, short);
CODE:
	func   = INT2PTR(double(*)(int, float, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2, s3);
OUTPUT:
	RETVAL

short
nci_sifss( c_func, i0, f1, s2, s3 )
	SV* c_func
	int i0
	float f1
	short s2
	short s3
PREINIT:
	short(*func)(int, float, short, short);
CODE:
	func   = INT2PTR(short(*)(int, float, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2, s3);
OUTPUT:
	RETVAL

float
nci_fifss( c_func, i0, f1, s2, s3 )
	SV* c_func
	int i0
	float f1
	short s2
	short s3
PREINIT:
	float(*func)(int, float, short, short);
CODE:
	func   = INT2PTR(float(*)(int, float, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2, s3);
OUTPUT:
	RETVAL

char *
nci_tifss( c_func, i0, f1, s2, s3 )
	SV* c_func
	int i0
	float f1
	short s2
	short s3
PREINIT:
	char *(*func)(int, float, short, short);
CODE:
	func   = INT2PTR(char *(*)(int, float, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2, s3);
OUTPUT:
	RETVAL

int
nci_iifss( c_func, i0, f1, s2, s3 )
	SV* c_func
	int i0
	float f1
	short s2
	short s3
PREINIT:
	int(*func)(int, float, short, short);
CODE:
	func   = INT2PTR(int(*)(int, float, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2, s3);
OUTPUT:
	RETVAL

void *
nci_pptss( c_func, p0, t1, s2, s3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	short s3
PREINIT:
	void *(*func)(void *, char *, short, short);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2, s3);
OUTPUT:
	RETVAL

void
nci_vptss( c_func, p0, t1, s2, s3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	short s3
PREINIT:
	void(*func)(void *, char *, short, short);
CODE:
	func   = INT2PTR(void(*)(void *, char *, short, short), SvIV(c_func) );
	(*func)(p0, t1, s2, s3);

double
nci_dptss( c_func, p0, t1, s2, s3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	short s3
PREINIT:
	double(*func)(void *, char *, short, short);
CODE:
	func   = INT2PTR(double(*)(void *, char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2, s3);
OUTPUT:
	RETVAL

short
nci_sptss( c_func, p0, t1, s2, s3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	short s3
PREINIT:
	short(*func)(void *, char *, short, short);
CODE:
	func   = INT2PTR(short(*)(void *, char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2, s3);
OUTPUT:
	RETVAL

float
nci_fptss( c_func, p0, t1, s2, s3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	short s3
PREINIT:
	float(*func)(void *, char *, short, short);
CODE:
	func   = INT2PTR(float(*)(void *, char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2, s3);
OUTPUT:
	RETVAL

char *
nci_tptss( c_func, p0, t1, s2, s3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	short s3
PREINIT:
	char *(*func)(void *, char *, short, short);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2, s3);
OUTPUT:
	RETVAL

int
nci_iptss( c_func, p0, t1, s2, s3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	short s3
PREINIT:
	int(*func)(void *, char *, short, short);
CODE:
	func   = INT2PTR(int(*)(void *, char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2, s3);
OUTPUT:
	RETVAL

void *
nci_pvtss( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvtss( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvtss( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svtss( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvtss( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvtss( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivtss( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdtss( c_func, d0, t1, s2, s3 )
	SV* c_func
	double d0
	char * t1
	short s2
	short s3
PREINIT:
	void *(*func)(double, char *, short, short);
CODE:
	func   = INT2PTR(void *(*)(double, char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2, s3);
OUTPUT:
	RETVAL

void
nci_vdtss( c_func, d0, t1, s2, s3 )
	SV* c_func
	double d0
	char * t1
	short s2
	short s3
PREINIT:
	void(*func)(double, char *, short, short);
CODE:
	func   = INT2PTR(void(*)(double, char *, short, short), SvIV(c_func) );
	(*func)(d0, t1, s2, s3);

double
nci_ddtss( c_func, d0, t1, s2, s3 )
	SV* c_func
	double d0
	char * t1
	short s2
	short s3
PREINIT:
	double(*func)(double, char *, short, short);
CODE:
	func   = INT2PTR(double(*)(double, char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2, s3);
OUTPUT:
	RETVAL

short
nci_sdtss( c_func, d0, t1, s2, s3 )
	SV* c_func
	double d0
	char * t1
	short s2
	short s3
PREINIT:
	short(*func)(double, char *, short, short);
CODE:
	func   = INT2PTR(short(*)(double, char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2, s3);
OUTPUT:
	RETVAL

float
nci_fdtss( c_func, d0, t1, s2, s3 )
	SV* c_func
	double d0
	char * t1
	short s2
	short s3
PREINIT:
	float(*func)(double, char *, short, short);
CODE:
	func   = INT2PTR(float(*)(double, char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2, s3);
OUTPUT:
	RETVAL

char *
nci_tdtss( c_func, d0, t1, s2, s3 )
	SV* c_func
	double d0
	char * t1
	short s2
	short s3
PREINIT:
	char *(*func)(double, char *, short, short);
CODE:
	func   = INT2PTR(char *(*)(double, char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2, s3);
OUTPUT:
	RETVAL

int
nci_idtss( c_func, d0, t1, s2, s3 )
	SV* c_func
	double d0
	char * t1
	short s2
	short s3
PREINIT:
	int(*func)(double, char *, short, short);
CODE:
	func   = INT2PTR(int(*)(double, char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2, s3);
OUTPUT:
	RETVAL

void *
nci_pstss( c_func, s0, t1, s2, s3 )
	SV* c_func
	short s0
	char * t1
	short s2
	short s3
PREINIT:
	void *(*func)(short, char *, short, short);
CODE:
	func   = INT2PTR(void *(*)(short, char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2, s3);
OUTPUT:
	RETVAL

void
nci_vstss( c_func, s0, t1, s2, s3 )
	SV* c_func
	short s0
	char * t1
	short s2
	short s3
PREINIT:
	void(*func)(short, char *, short, short);
CODE:
	func   = INT2PTR(void(*)(short, char *, short, short), SvIV(c_func) );
	(*func)(s0, t1, s2, s3);

double
nci_dstss( c_func, s0, t1, s2, s3 )
	SV* c_func
	short s0
	char * t1
	short s2
	short s3
PREINIT:
	double(*func)(short, char *, short, short);
CODE:
	func   = INT2PTR(double(*)(short, char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2, s3);
OUTPUT:
	RETVAL

short
nci_sstss( c_func, s0, t1, s2, s3 )
	SV* c_func
	short s0
	char * t1
	short s2
	short s3
PREINIT:
	short(*func)(short, char *, short, short);
CODE:
	func   = INT2PTR(short(*)(short, char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2, s3);
OUTPUT:
	RETVAL

float
nci_fstss( c_func, s0, t1, s2, s3 )
	SV* c_func
	short s0
	char * t1
	short s2
	short s3
PREINIT:
	float(*func)(short, char *, short, short);
CODE:
	func   = INT2PTR(float(*)(short, char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2, s3);
OUTPUT:
	RETVAL

char *
nci_tstss( c_func, s0, t1, s2, s3 )
	SV* c_func
	short s0
	char * t1
	short s2
	short s3
PREINIT:
	char *(*func)(short, char *, short, short);
CODE:
	func   = INT2PTR(char *(*)(short, char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2, s3);
OUTPUT:
	RETVAL

int
nci_istss( c_func, s0, t1, s2, s3 )
	SV* c_func
	short s0
	char * t1
	short s2
	short s3
PREINIT:
	int(*func)(short, char *, short, short);
CODE:
	func   = INT2PTR(int(*)(short, char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2, s3);
OUTPUT:
	RETVAL

void *
nci_pftss( c_func, f0, t1, s2, s3 )
	SV* c_func
	float f0
	char * t1
	short s2
	short s3
PREINIT:
	void *(*func)(float, char *, short, short);
CODE:
	func   = INT2PTR(void *(*)(float, char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2, s3);
OUTPUT:
	RETVAL

void
nci_vftss( c_func, f0, t1, s2, s3 )
	SV* c_func
	float f0
	char * t1
	short s2
	short s3
PREINIT:
	void(*func)(float, char *, short, short);
CODE:
	func   = INT2PTR(void(*)(float, char *, short, short), SvIV(c_func) );
	(*func)(f0, t1, s2, s3);

double
nci_dftss( c_func, f0, t1, s2, s3 )
	SV* c_func
	float f0
	char * t1
	short s2
	short s3
PREINIT:
	double(*func)(float, char *, short, short);
CODE:
	func   = INT2PTR(double(*)(float, char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2, s3);
OUTPUT:
	RETVAL

short
nci_sftss( c_func, f0, t1, s2, s3 )
	SV* c_func
	float f0
	char * t1
	short s2
	short s3
PREINIT:
	short(*func)(float, char *, short, short);
CODE:
	func   = INT2PTR(short(*)(float, char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2, s3);
OUTPUT:
	RETVAL

float
nci_fftss( c_func, f0, t1, s2, s3 )
	SV* c_func
	float f0
	char * t1
	short s2
	short s3
PREINIT:
	float(*func)(float, char *, short, short);
CODE:
	func   = INT2PTR(float(*)(float, char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2, s3);
OUTPUT:
	RETVAL

char *
nci_tftss( c_func, f0, t1, s2, s3 )
	SV* c_func
	float f0
	char * t1
	short s2
	short s3
PREINIT:
	char *(*func)(float, char *, short, short);
CODE:
	func   = INT2PTR(char *(*)(float, char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2, s3);
OUTPUT:
	RETVAL

int
nci_iftss( c_func, f0, t1, s2, s3 )
	SV* c_func
	float f0
	char * t1
	short s2
	short s3
PREINIT:
	int(*func)(float, char *, short, short);
CODE:
	func   = INT2PTR(int(*)(float, char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2, s3);
OUTPUT:
	RETVAL

void *
nci_pttss( c_func, t0, t1, s2, s3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	short s3
PREINIT:
	void *(*func)(char *, char *, short, short);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2, s3);
OUTPUT:
	RETVAL

void
nci_vttss( c_func, t0, t1, s2, s3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	short s3
PREINIT:
	void(*func)(char *, char *, short, short);
CODE:
	func   = INT2PTR(void(*)(char *, char *, short, short), SvIV(c_func) );
	(*func)(t0, t1, s2, s3);

double
nci_dttss( c_func, t0, t1, s2, s3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	short s3
PREINIT:
	double(*func)(char *, char *, short, short);
CODE:
	func   = INT2PTR(double(*)(char *, char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2, s3);
OUTPUT:
	RETVAL

short
nci_sttss( c_func, t0, t1, s2, s3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	short s3
PREINIT:
	short(*func)(char *, char *, short, short);
CODE:
	func   = INT2PTR(short(*)(char *, char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2, s3);
OUTPUT:
	RETVAL

float
nci_fttss( c_func, t0, t1, s2, s3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	short s3
PREINIT:
	float(*func)(char *, char *, short, short);
CODE:
	func   = INT2PTR(float(*)(char *, char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2, s3);
OUTPUT:
	RETVAL

char *
nci_tttss( c_func, t0, t1, s2, s3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	short s3
PREINIT:
	char *(*func)(char *, char *, short, short);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2, s3);
OUTPUT:
	RETVAL

int
nci_ittss( c_func, t0, t1, s2, s3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	short s3
PREINIT:
	int(*func)(char *, char *, short, short);
CODE:
	func   = INT2PTR(int(*)(char *, char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2, s3);
OUTPUT:
	RETVAL

void *
nci_pitss( c_func, i0, t1, s2, s3 )
	SV* c_func
	int i0
	char * t1
	short s2
	short s3
PREINIT:
	void *(*func)(int, char *, short, short);
CODE:
	func   = INT2PTR(void *(*)(int, char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2, s3);
OUTPUT:
	RETVAL

void
nci_vitss( c_func, i0, t1, s2, s3 )
	SV* c_func
	int i0
	char * t1
	short s2
	short s3
PREINIT:
	void(*func)(int, char *, short, short);
CODE:
	func   = INT2PTR(void(*)(int, char *, short, short), SvIV(c_func) );
	(*func)(i0, t1, s2, s3);

double
nci_ditss( c_func, i0, t1, s2, s3 )
	SV* c_func
	int i0
	char * t1
	short s2
	short s3
PREINIT:
	double(*func)(int, char *, short, short);
CODE:
	func   = INT2PTR(double(*)(int, char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2, s3);
OUTPUT:
	RETVAL

short
nci_sitss( c_func, i0, t1, s2, s3 )
	SV* c_func
	int i0
	char * t1
	short s2
	short s3
PREINIT:
	short(*func)(int, char *, short, short);
CODE:
	func   = INT2PTR(short(*)(int, char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2, s3);
OUTPUT:
	RETVAL

float
nci_fitss( c_func, i0, t1, s2, s3 )
	SV* c_func
	int i0
	char * t1
	short s2
	short s3
PREINIT:
	float(*func)(int, char *, short, short);
CODE:
	func   = INT2PTR(float(*)(int, char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2, s3);
OUTPUT:
	RETVAL

char *
nci_titss( c_func, i0, t1, s2, s3 )
	SV* c_func
	int i0
	char * t1
	short s2
	short s3
PREINIT:
	char *(*func)(int, char *, short, short);
CODE:
	func   = INT2PTR(char *(*)(int, char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2, s3);
OUTPUT:
	RETVAL

int
nci_iitss( c_func, i0, t1, s2, s3 )
	SV* c_func
	int i0
	char * t1
	short s2
	short s3
PREINIT:
	int(*func)(int, char *, short, short);
CODE:
	func   = INT2PTR(int(*)(int, char *, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2, s3);
OUTPUT:
	RETVAL

void *
nci_ppiss( c_func, p0, i1, s2, s3 )
	SV* c_func
	void * p0
	int i1
	short s2
	short s3
PREINIT:
	void *(*func)(void *, int, short, short);
CODE:
	func   = INT2PTR(void *(*)(void *, int, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2, s3);
OUTPUT:
	RETVAL

void
nci_vpiss( c_func, p0, i1, s2, s3 )
	SV* c_func
	void * p0
	int i1
	short s2
	short s3
PREINIT:
	void(*func)(void *, int, short, short);
CODE:
	func   = INT2PTR(void(*)(void *, int, short, short), SvIV(c_func) );
	(*func)(p0, i1, s2, s3);

double
nci_dpiss( c_func, p0, i1, s2, s3 )
	SV* c_func
	void * p0
	int i1
	short s2
	short s3
PREINIT:
	double(*func)(void *, int, short, short);
CODE:
	func   = INT2PTR(double(*)(void *, int, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2, s3);
OUTPUT:
	RETVAL

short
nci_spiss( c_func, p0, i1, s2, s3 )
	SV* c_func
	void * p0
	int i1
	short s2
	short s3
PREINIT:
	short(*func)(void *, int, short, short);
CODE:
	func   = INT2PTR(short(*)(void *, int, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2, s3);
OUTPUT:
	RETVAL

float
nci_fpiss( c_func, p0, i1, s2, s3 )
	SV* c_func
	void * p0
	int i1
	short s2
	short s3
PREINIT:
	float(*func)(void *, int, short, short);
CODE:
	func   = INT2PTR(float(*)(void *, int, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2, s3);
OUTPUT:
	RETVAL

char *
nci_tpiss( c_func, p0, i1, s2, s3 )
	SV* c_func
	void * p0
	int i1
	short s2
	short s3
PREINIT:
	char *(*func)(void *, int, short, short);
CODE:
	func   = INT2PTR(char *(*)(void *, int, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2, s3);
OUTPUT:
	RETVAL

int
nci_ipiss( c_func, p0, i1, s2, s3 )
	SV* c_func
	void * p0
	int i1
	short s2
	short s3
PREINIT:
	int(*func)(void *, int, short, short);
CODE:
	func   = INT2PTR(int(*)(void *, int, short, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2, s3);
OUTPUT:
	RETVAL

void *
nci_pviss( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vviss( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dviss( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_sviss( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fviss( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tviss( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_iviss( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdiss( c_func, d0, i1, s2, s3 )
	SV* c_func
	double d0
	int i1
	short s2
	short s3
PREINIT:
	void *(*func)(double, int, short, short);
CODE:
	func   = INT2PTR(void *(*)(double, int, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2, s3);
OUTPUT:
	RETVAL

void
nci_vdiss( c_func, d0, i1, s2, s3 )
	SV* c_func
	double d0
	int i1
	short s2
	short s3
PREINIT:
	void(*func)(double, int, short, short);
CODE:
	func   = INT2PTR(void(*)(double, int, short, short), SvIV(c_func) );
	(*func)(d0, i1, s2, s3);

double
nci_ddiss( c_func, d0, i1, s2, s3 )
	SV* c_func
	double d0
	int i1
	short s2
	short s3
PREINIT:
	double(*func)(double, int, short, short);
CODE:
	func   = INT2PTR(double(*)(double, int, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2, s3);
OUTPUT:
	RETVAL

short
nci_sdiss( c_func, d0, i1, s2, s3 )
	SV* c_func
	double d0
	int i1
	short s2
	short s3
PREINIT:
	short(*func)(double, int, short, short);
CODE:
	func   = INT2PTR(short(*)(double, int, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2, s3);
OUTPUT:
	RETVAL

float
nci_fdiss( c_func, d0, i1, s2, s3 )
	SV* c_func
	double d0
	int i1
	short s2
	short s3
PREINIT:
	float(*func)(double, int, short, short);
CODE:
	func   = INT2PTR(float(*)(double, int, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2, s3);
OUTPUT:
	RETVAL

char *
nci_tdiss( c_func, d0, i1, s2, s3 )
	SV* c_func
	double d0
	int i1
	short s2
	short s3
PREINIT:
	char *(*func)(double, int, short, short);
CODE:
	func   = INT2PTR(char *(*)(double, int, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2, s3);
OUTPUT:
	RETVAL

int
nci_idiss( c_func, d0, i1, s2, s3 )
	SV* c_func
	double d0
	int i1
	short s2
	short s3
PREINIT:
	int(*func)(double, int, short, short);
CODE:
	func   = INT2PTR(int(*)(double, int, short, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2, s3);
OUTPUT:
	RETVAL

void *
nci_psiss( c_func, s0, i1, s2, s3 )
	SV* c_func
	short s0
	int i1
	short s2
	short s3
PREINIT:
	void *(*func)(short, int, short, short);
CODE:
	func   = INT2PTR(void *(*)(short, int, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2, s3);
OUTPUT:
	RETVAL

void
nci_vsiss( c_func, s0, i1, s2, s3 )
	SV* c_func
	short s0
	int i1
	short s2
	short s3
PREINIT:
	void(*func)(short, int, short, short);
CODE:
	func   = INT2PTR(void(*)(short, int, short, short), SvIV(c_func) );
	(*func)(s0, i1, s2, s3);

double
nci_dsiss( c_func, s0, i1, s2, s3 )
	SV* c_func
	short s0
	int i1
	short s2
	short s3
PREINIT:
	double(*func)(short, int, short, short);
CODE:
	func   = INT2PTR(double(*)(short, int, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2, s3);
OUTPUT:
	RETVAL

short
nci_ssiss( c_func, s0, i1, s2, s3 )
	SV* c_func
	short s0
	int i1
	short s2
	short s3
PREINIT:
	short(*func)(short, int, short, short);
CODE:
	func   = INT2PTR(short(*)(short, int, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2, s3);
OUTPUT:
	RETVAL

float
nci_fsiss( c_func, s0, i1, s2, s3 )
	SV* c_func
	short s0
	int i1
	short s2
	short s3
PREINIT:
	float(*func)(short, int, short, short);
CODE:
	func   = INT2PTR(float(*)(short, int, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2, s3);
OUTPUT:
	RETVAL

char *
nci_tsiss( c_func, s0, i1, s2, s3 )
	SV* c_func
	short s0
	int i1
	short s2
	short s3
PREINIT:
	char *(*func)(short, int, short, short);
CODE:
	func   = INT2PTR(char *(*)(short, int, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2, s3);
OUTPUT:
	RETVAL

int
nci_isiss( c_func, s0, i1, s2, s3 )
	SV* c_func
	short s0
	int i1
	short s2
	short s3
PREINIT:
	int(*func)(short, int, short, short);
CODE:
	func   = INT2PTR(int(*)(short, int, short, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2, s3);
OUTPUT:
	RETVAL

void *
nci_pfiss( c_func, f0, i1, s2, s3 )
	SV* c_func
	float f0
	int i1
	short s2
	short s3
PREINIT:
	void *(*func)(float, int, short, short);
CODE:
	func   = INT2PTR(void *(*)(float, int, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2, s3);
OUTPUT:
	RETVAL

void
nci_vfiss( c_func, f0, i1, s2, s3 )
	SV* c_func
	float f0
	int i1
	short s2
	short s3
PREINIT:
	void(*func)(float, int, short, short);
CODE:
	func   = INT2PTR(void(*)(float, int, short, short), SvIV(c_func) );
	(*func)(f0, i1, s2, s3);

double
nci_dfiss( c_func, f0, i1, s2, s3 )
	SV* c_func
	float f0
	int i1
	short s2
	short s3
PREINIT:
	double(*func)(float, int, short, short);
CODE:
	func   = INT2PTR(double(*)(float, int, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2, s3);
OUTPUT:
	RETVAL

short
nci_sfiss( c_func, f0, i1, s2, s3 )
	SV* c_func
	float f0
	int i1
	short s2
	short s3
PREINIT:
	short(*func)(float, int, short, short);
CODE:
	func   = INT2PTR(short(*)(float, int, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2, s3);
OUTPUT:
	RETVAL

float
nci_ffiss( c_func, f0, i1, s2, s3 )
	SV* c_func
	float f0
	int i1
	short s2
	short s3
PREINIT:
	float(*func)(float, int, short, short);
CODE:
	func   = INT2PTR(float(*)(float, int, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2, s3);
OUTPUT:
	RETVAL

char *
nci_tfiss( c_func, f0, i1, s2, s3 )
	SV* c_func
	float f0
	int i1
	short s2
	short s3
PREINIT:
	char *(*func)(float, int, short, short);
CODE:
	func   = INT2PTR(char *(*)(float, int, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2, s3);
OUTPUT:
	RETVAL

int
nci_ifiss( c_func, f0, i1, s2, s3 )
	SV* c_func
	float f0
	int i1
	short s2
	short s3
PREINIT:
	int(*func)(float, int, short, short);
CODE:
	func   = INT2PTR(int(*)(float, int, short, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2, s3);
OUTPUT:
	RETVAL

void *
nci_ptiss( c_func, t0, i1, s2, s3 )
	SV* c_func
	char * t0
	int i1
	short s2
	short s3
PREINIT:
	void *(*func)(char *, int, short, short);
CODE:
	func   = INT2PTR(void *(*)(char *, int, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2, s3);
OUTPUT:
	RETVAL

void
nci_vtiss( c_func, t0, i1, s2, s3 )
	SV* c_func
	char * t0
	int i1
	short s2
	short s3
PREINIT:
	void(*func)(char *, int, short, short);
CODE:
	func   = INT2PTR(void(*)(char *, int, short, short), SvIV(c_func) );
	(*func)(t0, i1, s2, s3);

double
nci_dtiss( c_func, t0, i1, s2, s3 )
	SV* c_func
	char * t0
	int i1
	short s2
	short s3
PREINIT:
	double(*func)(char *, int, short, short);
CODE:
	func   = INT2PTR(double(*)(char *, int, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2, s3);
OUTPUT:
	RETVAL

short
nci_stiss( c_func, t0, i1, s2, s3 )
	SV* c_func
	char * t0
	int i1
	short s2
	short s3
PREINIT:
	short(*func)(char *, int, short, short);
CODE:
	func   = INT2PTR(short(*)(char *, int, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2, s3);
OUTPUT:
	RETVAL

float
nci_ftiss( c_func, t0, i1, s2, s3 )
	SV* c_func
	char * t0
	int i1
	short s2
	short s3
PREINIT:
	float(*func)(char *, int, short, short);
CODE:
	func   = INT2PTR(float(*)(char *, int, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2, s3);
OUTPUT:
	RETVAL

char *
nci_ttiss( c_func, t0, i1, s2, s3 )
	SV* c_func
	char * t0
	int i1
	short s2
	short s3
PREINIT:
	char *(*func)(char *, int, short, short);
CODE:
	func   = INT2PTR(char *(*)(char *, int, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2, s3);
OUTPUT:
	RETVAL

int
nci_itiss( c_func, t0, i1, s2, s3 )
	SV* c_func
	char * t0
	int i1
	short s2
	short s3
PREINIT:
	int(*func)(char *, int, short, short);
CODE:
	func   = INT2PTR(int(*)(char *, int, short, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2, s3);
OUTPUT:
	RETVAL

void *
nci_piiss( c_func, i0, i1, s2, s3 )
	SV* c_func
	int i0
	int i1
	short s2
	short s3
PREINIT:
	void *(*func)(int, int, short, short);
CODE:
	func   = INT2PTR(void *(*)(int, int, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2, s3);
OUTPUT:
	RETVAL

void
nci_viiss( c_func, i0, i1, s2, s3 )
	SV* c_func
	int i0
	int i1
	short s2
	short s3
PREINIT:
	void(*func)(int, int, short, short);
CODE:
	func   = INT2PTR(void(*)(int, int, short, short), SvIV(c_func) );
	(*func)(i0, i1, s2, s3);

double
nci_diiss( c_func, i0, i1, s2, s3 )
	SV* c_func
	int i0
	int i1
	short s2
	short s3
PREINIT:
	double(*func)(int, int, short, short);
CODE:
	func   = INT2PTR(double(*)(int, int, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2, s3);
OUTPUT:
	RETVAL

short
nci_siiss( c_func, i0, i1, s2, s3 )
	SV* c_func
	int i0
	int i1
	short s2
	short s3
PREINIT:
	short(*func)(int, int, short, short);
CODE:
	func   = INT2PTR(short(*)(int, int, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2, s3);
OUTPUT:
	RETVAL

float
nci_fiiss( c_func, i0, i1, s2, s3 )
	SV* c_func
	int i0
	int i1
	short s2
	short s3
PREINIT:
	float(*func)(int, int, short, short);
CODE:
	func   = INT2PTR(float(*)(int, int, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2, s3);
OUTPUT:
	RETVAL

char *
nci_tiiss( c_func, i0, i1, s2, s3 )
	SV* c_func
	int i0
	int i1
	short s2
	short s3
PREINIT:
	char *(*func)(int, int, short, short);
CODE:
	func   = INT2PTR(char *(*)(int, int, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2, s3);
OUTPUT:
	RETVAL

int
nci_iiiss( c_func, i0, i1, s2, s3 )
	SV* c_func
	int i0
	int i1
	short s2
	short s3
PREINIT:
	int(*func)(int, int, short, short);
CODE:
	func   = INT2PTR(int(*)(int, int, short, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2, s3);
OUTPUT:
	RETVAL

void *
nci_pppfs( c_func, p0, p1, f2, s3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	short s3
PREINIT:
	void *(*func)(void *, void *, float, short);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2, s3);
OUTPUT:
	RETVAL

void
nci_vppfs( c_func, p0, p1, f2, s3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	short s3
PREINIT:
	void(*func)(void *, void *, float, short);
CODE:
	func   = INT2PTR(void(*)(void *, void *, float, short), SvIV(c_func) );
	(*func)(p0, p1, f2, s3);

double
nci_dppfs( c_func, p0, p1, f2, s3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	short s3
PREINIT:
	double(*func)(void *, void *, float, short);
CODE:
	func   = INT2PTR(double(*)(void *, void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2, s3);
OUTPUT:
	RETVAL

short
nci_sppfs( c_func, p0, p1, f2, s3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	short s3
PREINIT:
	short(*func)(void *, void *, float, short);
CODE:
	func   = INT2PTR(short(*)(void *, void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2, s3);
OUTPUT:
	RETVAL

float
nci_fppfs( c_func, p0, p1, f2, s3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	short s3
PREINIT:
	float(*func)(void *, void *, float, short);
CODE:
	func   = INT2PTR(float(*)(void *, void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2, s3);
OUTPUT:
	RETVAL

char *
nci_tppfs( c_func, p0, p1, f2, s3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	short s3
PREINIT:
	char *(*func)(void *, void *, float, short);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2, s3);
OUTPUT:
	RETVAL

int
nci_ippfs( c_func, p0, p1, f2, s3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	short s3
PREINIT:
	int(*func)(void *, void *, float, short);
CODE:
	func   = INT2PTR(int(*)(void *, void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2, s3);
OUTPUT:
	RETVAL

void *
nci_pvpfs( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvpfs( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvpfs( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svpfs( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvpfs( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvpfs( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivpfs( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdpfs( c_func, d0, p1, f2, s3 )
	SV* c_func
	double d0
	void * p1
	float f2
	short s3
PREINIT:
	void *(*func)(double, void *, float, short);
CODE:
	func   = INT2PTR(void *(*)(double, void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2, s3);
OUTPUT:
	RETVAL

void
nci_vdpfs( c_func, d0, p1, f2, s3 )
	SV* c_func
	double d0
	void * p1
	float f2
	short s3
PREINIT:
	void(*func)(double, void *, float, short);
CODE:
	func   = INT2PTR(void(*)(double, void *, float, short), SvIV(c_func) );
	(*func)(d0, p1, f2, s3);

double
nci_ddpfs( c_func, d0, p1, f2, s3 )
	SV* c_func
	double d0
	void * p1
	float f2
	short s3
PREINIT:
	double(*func)(double, void *, float, short);
CODE:
	func   = INT2PTR(double(*)(double, void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2, s3);
OUTPUT:
	RETVAL

short
nci_sdpfs( c_func, d0, p1, f2, s3 )
	SV* c_func
	double d0
	void * p1
	float f2
	short s3
PREINIT:
	short(*func)(double, void *, float, short);
CODE:
	func   = INT2PTR(short(*)(double, void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2, s3);
OUTPUT:
	RETVAL

float
nci_fdpfs( c_func, d0, p1, f2, s3 )
	SV* c_func
	double d0
	void * p1
	float f2
	short s3
PREINIT:
	float(*func)(double, void *, float, short);
CODE:
	func   = INT2PTR(float(*)(double, void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2, s3);
OUTPUT:
	RETVAL

char *
nci_tdpfs( c_func, d0, p1, f2, s3 )
	SV* c_func
	double d0
	void * p1
	float f2
	short s3
PREINIT:
	char *(*func)(double, void *, float, short);
CODE:
	func   = INT2PTR(char *(*)(double, void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2, s3);
OUTPUT:
	RETVAL

int
nci_idpfs( c_func, d0, p1, f2, s3 )
	SV* c_func
	double d0
	void * p1
	float f2
	short s3
PREINIT:
	int(*func)(double, void *, float, short);
CODE:
	func   = INT2PTR(int(*)(double, void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2, s3);
OUTPUT:
	RETVAL

void *
nci_pspfs( c_func, s0, p1, f2, s3 )
	SV* c_func
	short s0
	void * p1
	float f2
	short s3
PREINIT:
	void *(*func)(short, void *, float, short);
CODE:
	func   = INT2PTR(void *(*)(short, void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2, s3);
OUTPUT:
	RETVAL

void
nci_vspfs( c_func, s0, p1, f2, s3 )
	SV* c_func
	short s0
	void * p1
	float f2
	short s3
PREINIT:
	void(*func)(short, void *, float, short);
CODE:
	func   = INT2PTR(void(*)(short, void *, float, short), SvIV(c_func) );
	(*func)(s0, p1, f2, s3);

double
nci_dspfs( c_func, s0, p1, f2, s3 )
	SV* c_func
	short s0
	void * p1
	float f2
	short s3
PREINIT:
	double(*func)(short, void *, float, short);
CODE:
	func   = INT2PTR(double(*)(short, void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2, s3);
OUTPUT:
	RETVAL

short
nci_sspfs( c_func, s0, p1, f2, s3 )
	SV* c_func
	short s0
	void * p1
	float f2
	short s3
PREINIT:
	short(*func)(short, void *, float, short);
CODE:
	func   = INT2PTR(short(*)(short, void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2, s3);
OUTPUT:
	RETVAL

float
nci_fspfs( c_func, s0, p1, f2, s3 )
	SV* c_func
	short s0
	void * p1
	float f2
	short s3
PREINIT:
	float(*func)(short, void *, float, short);
CODE:
	func   = INT2PTR(float(*)(short, void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2, s3);
OUTPUT:
	RETVAL

char *
nci_tspfs( c_func, s0, p1, f2, s3 )
	SV* c_func
	short s0
	void * p1
	float f2
	short s3
PREINIT:
	char *(*func)(short, void *, float, short);
CODE:
	func   = INT2PTR(char *(*)(short, void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2, s3);
OUTPUT:
	RETVAL

int
nci_ispfs( c_func, s0, p1, f2, s3 )
	SV* c_func
	short s0
	void * p1
	float f2
	short s3
PREINIT:
	int(*func)(short, void *, float, short);
CODE:
	func   = INT2PTR(int(*)(short, void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2, s3);
OUTPUT:
	RETVAL

void *
nci_pfpfs( c_func, f0, p1, f2, s3 )
	SV* c_func
	float f0
	void * p1
	float f2
	short s3
PREINIT:
	void *(*func)(float, void *, float, short);
CODE:
	func   = INT2PTR(void *(*)(float, void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2, s3);
OUTPUT:
	RETVAL

void
nci_vfpfs( c_func, f0, p1, f2, s3 )
	SV* c_func
	float f0
	void * p1
	float f2
	short s3
PREINIT:
	void(*func)(float, void *, float, short);
CODE:
	func   = INT2PTR(void(*)(float, void *, float, short), SvIV(c_func) );
	(*func)(f0, p1, f2, s3);

double
nci_dfpfs( c_func, f0, p1, f2, s3 )
	SV* c_func
	float f0
	void * p1
	float f2
	short s3
PREINIT:
	double(*func)(float, void *, float, short);
CODE:
	func   = INT2PTR(double(*)(float, void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2, s3);
OUTPUT:
	RETVAL

short
nci_sfpfs( c_func, f0, p1, f2, s3 )
	SV* c_func
	float f0
	void * p1
	float f2
	short s3
PREINIT:
	short(*func)(float, void *, float, short);
CODE:
	func   = INT2PTR(short(*)(float, void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2, s3);
OUTPUT:
	RETVAL

float
nci_ffpfs( c_func, f0, p1, f2, s3 )
	SV* c_func
	float f0
	void * p1
	float f2
	short s3
PREINIT:
	float(*func)(float, void *, float, short);
CODE:
	func   = INT2PTR(float(*)(float, void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2, s3);
OUTPUT:
	RETVAL

char *
nci_tfpfs( c_func, f0, p1, f2, s3 )
	SV* c_func
	float f0
	void * p1
	float f2
	short s3
PREINIT:
	char *(*func)(float, void *, float, short);
CODE:
	func   = INT2PTR(char *(*)(float, void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2, s3);
OUTPUT:
	RETVAL

int
nci_ifpfs( c_func, f0, p1, f2, s3 )
	SV* c_func
	float f0
	void * p1
	float f2
	short s3
PREINIT:
	int(*func)(float, void *, float, short);
CODE:
	func   = INT2PTR(int(*)(float, void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2, s3);
OUTPUT:
	RETVAL

void *
nci_ptpfs( c_func, t0, p1, f2, s3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	short s3
PREINIT:
	void *(*func)(char *, void *, float, short);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2, s3);
OUTPUT:
	RETVAL

void
nci_vtpfs( c_func, t0, p1, f2, s3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	short s3
PREINIT:
	void(*func)(char *, void *, float, short);
CODE:
	func   = INT2PTR(void(*)(char *, void *, float, short), SvIV(c_func) );
	(*func)(t0, p1, f2, s3);

double
nci_dtpfs( c_func, t0, p1, f2, s3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	short s3
PREINIT:
	double(*func)(char *, void *, float, short);
CODE:
	func   = INT2PTR(double(*)(char *, void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2, s3);
OUTPUT:
	RETVAL

short
nci_stpfs( c_func, t0, p1, f2, s3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	short s3
PREINIT:
	short(*func)(char *, void *, float, short);
CODE:
	func   = INT2PTR(short(*)(char *, void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2, s3);
OUTPUT:
	RETVAL

float
nci_ftpfs( c_func, t0, p1, f2, s3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	short s3
PREINIT:
	float(*func)(char *, void *, float, short);
CODE:
	func   = INT2PTR(float(*)(char *, void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2, s3);
OUTPUT:
	RETVAL

char *
nci_ttpfs( c_func, t0, p1, f2, s3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	short s3
PREINIT:
	char *(*func)(char *, void *, float, short);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2, s3);
OUTPUT:
	RETVAL

int
nci_itpfs( c_func, t0, p1, f2, s3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	short s3
PREINIT:
	int(*func)(char *, void *, float, short);
CODE:
	func   = INT2PTR(int(*)(char *, void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2, s3);
OUTPUT:
	RETVAL

void *
nci_pipfs( c_func, i0, p1, f2, s3 )
	SV* c_func
	int i0
	void * p1
	float f2
	short s3
PREINIT:
	void *(*func)(int, void *, float, short);
CODE:
	func   = INT2PTR(void *(*)(int, void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2, s3);
OUTPUT:
	RETVAL

void
nci_vipfs( c_func, i0, p1, f2, s3 )
	SV* c_func
	int i0
	void * p1
	float f2
	short s3
PREINIT:
	void(*func)(int, void *, float, short);
CODE:
	func   = INT2PTR(void(*)(int, void *, float, short), SvIV(c_func) );
	(*func)(i0, p1, f2, s3);

double
nci_dipfs( c_func, i0, p1, f2, s3 )
	SV* c_func
	int i0
	void * p1
	float f2
	short s3
PREINIT:
	double(*func)(int, void *, float, short);
CODE:
	func   = INT2PTR(double(*)(int, void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2, s3);
OUTPUT:
	RETVAL

short
nci_sipfs( c_func, i0, p1, f2, s3 )
	SV* c_func
	int i0
	void * p1
	float f2
	short s3
PREINIT:
	short(*func)(int, void *, float, short);
CODE:
	func   = INT2PTR(short(*)(int, void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2, s3);
OUTPUT:
	RETVAL

float
nci_fipfs( c_func, i0, p1, f2, s3 )
	SV* c_func
	int i0
	void * p1
	float f2
	short s3
PREINIT:
	float(*func)(int, void *, float, short);
CODE:
	func   = INT2PTR(float(*)(int, void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2, s3);
OUTPUT:
	RETVAL

char *
nci_tipfs( c_func, i0, p1, f2, s3 )
	SV* c_func
	int i0
	void * p1
	float f2
	short s3
PREINIT:
	char *(*func)(int, void *, float, short);
CODE:
	func   = INT2PTR(char *(*)(int, void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2, s3);
OUTPUT:
	RETVAL

int
nci_iipfs( c_func, i0, p1, f2, s3 )
	SV* c_func
	int i0
	void * p1
	float f2
	short s3
PREINIT:
	int(*func)(int, void *, float, short);
CODE:
	func   = INT2PTR(int(*)(int, void *, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2, s3);
OUTPUT:
	RETVAL

void *
nci_ppdfs( c_func, p0, d1, f2, s3 )
	SV* c_func
	void * p0
	double d1
	float f2
	short s3
PREINIT:
	void *(*func)(void *, double, float, short);
CODE:
	func   = INT2PTR(void *(*)(void *, double, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2, s3);
OUTPUT:
	RETVAL

void
nci_vpdfs( c_func, p0, d1, f2, s3 )
	SV* c_func
	void * p0
	double d1
	float f2
	short s3
PREINIT:
	void(*func)(void *, double, float, short);
CODE:
	func   = INT2PTR(void(*)(void *, double, float, short), SvIV(c_func) );
	(*func)(p0, d1, f2, s3);

double
nci_dpdfs( c_func, p0, d1, f2, s3 )
	SV* c_func
	void * p0
	double d1
	float f2
	short s3
PREINIT:
	double(*func)(void *, double, float, short);
CODE:
	func   = INT2PTR(double(*)(void *, double, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2, s3);
OUTPUT:
	RETVAL

short
nci_spdfs( c_func, p0, d1, f2, s3 )
	SV* c_func
	void * p0
	double d1
	float f2
	short s3
PREINIT:
	short(*func)(void *, double, float, short);
CODE:
	func   = INT2PTR(short(*)(void *, double, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2, s3);
OUTPUT:
	RETVAL

float
nci_fpdfs( c_func, p0, d1, f2, s3 )
	SV* c_func
	void * p0
	double d1
	float f2
	short s3
PREINIT:
	float(*func)(void *, double, float, short);
CODE:
	func   = INT2PTR(float(*)(void *, double, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2, s3);
OUTPUT:
	RETVAL

char *
nci_tpdfs( c_func, p0, d1, f2, s3 )
	SV* c_func
	void * p0
	double d1
	float f2
	short s3
PREINIT:
	char *(*func)(void *, double, float, short);
CODE:
	func   = INT2PTR(char *(*)(void *, double, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2, s3);
OUTPUT:
	RETVAL

int
nci_ipdfs( c_func, p0, d1, f2, s3 )
	SV* c_func
	void * p0
	double d1
	float f2
	short s3
PREINIT:
	int(*func)(void *, double, float, short);
CODE:
	func   = INT2PTR(int(*)(void *, double, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2, s3);
OUTPUT:
	RETVAL

void *
nci_pvdfs( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvdfs( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvdfs( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svdfs( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvdfs( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvdfs( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivdfs( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pddfs( c_func, d0, d1, f2, s3 )
	SV* c_func
	double d0
	double d1
	float f2
	short s3
PREINIT:
	void *(*func)(double, double, float, short);
CODE:
	func   = INT2PTR(void *(*)(double, double, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2, s3);
OUTPUT:
	RETVAL

void
nci_vddfs( c_func, d0, d1, f2, s3 )
	SV* c_func
	double d0
	double d1
	float f2
	short s3
PREINIT:
	void(*func)(double, double, float, short);
CODE:
	func   = INT2PTR(void(*)(double, double, float, short), SvIV(c_func) );
	(*func)(d0, d1, f2, s3);

double
nci_dddfs( c_func, d0, d1, f2, s3 )
	SV* c_func
	double d0
	double d1
	float f2
	short s3
PREINIT:
	double(*func)(double, double, float, short);
CODE:
	func   = INT2PTR(double(*)(double, double, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2, s3);
OUTPUT:
	RETVAL

short
nci_sddfs( c_func, d0, d1, f2, s3 )
	SV* c_func
	double d0
	double d1
	float f2
	short s3
PREINIT:
	short(*func)(double, double, float, short);
CODE:
	func   = INT2PTR(short(*)(double, double, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2, s3);
OUTPUT:
	RETVAL

float
nci_fddfs( c_func, d0, d1, f2, s3 )
	SV* c_func
	double d0
	double d1
	float f2
	short s3
PREINIT:
	float(*func)(double, double, float, short);
CODE:
	func   = INT2PTR(float(*)(double, double, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2, s3);
OUTPUT:
	RETVAL

char *
nci_tddfs( c_func, d0, d1, f2, s3 )
	SV* c_func
	double d0
	double d1
	float f2
	short s3
PREINIT:
	char *(*func)(double, double, float, short);
CODE:
	func   = INT2PTR(char *(*)(double, double, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2, s3);
OUTPUT:
	RETVAL

int
nci_iddfs( c_func, d0, d1, f2, s3 )
	SV* c_func
	double d0
	double d1
	float f2
	short s3
PREINIT:
	int(*func)(double, double, float, short);
CODE:
	func   = INT2PTR(int(*)(double, double, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2, s3);
OUTPUT:
	RETVAL

void *
nci_psdfs( c_func, s0, d1, f2, s3 )
	SV* c_func
	short s0
	double d1
	float f2
	short s3
PREINIT:
	void *(*func)(short, double, float, short);
CODE:
	func   = INT2PTR(void *(*)(short, double, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2, s3);
OUTPUT:
	RETVAL

void
nci_vsdfs( c_func, s0, d1, f2, s3 )
	SV* c_func
	short s0
	double d1
	float f2
	short s3
PREINIT:
	void(*func)(short, double, float, short);
CODE:
	func   = INT2PTR(void(*)(short, double, float, short), SvIV(c_func) );
	(*func)(s0, d1, f2, s3);

double
nci_dsdfs( c_func, s0, d1, f2, s3 )
	SV* c_func
	short s0
	double d1
	float f2
	short s3
PREINIT:
	double(*func)(short, double, float, short);
CODE:
	func   = INT2PTR(double(*)(short, double, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2, s3);
OUTPUT:
	RETVAL

short
nci_ssdfs( c_func, s0, d1, f2, s3 )
	SV* c_func
	short s0
	double d1
	float f2
	short s3
PREINIT:
	short(*func)(short, double, float, short);
CODE:
	func   = INT2PTR(short(*)(short, double, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2, s3);
OUTPUT:
	RETVAL

float
nci_fsdfs( c_func, s0, d1, f2, s3 )
	SV* c_func
	short s0
	double d1
	float f2
	short s3
PREINIT:
	float(*func)(short, double, float, short);
CODE:
	func   = INT2PTR(float(*)(short, double, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2, s3);
OUTPUT:
	RETVAL

char *
nci_tsdfs( c_func, s0, d1, f2, s3 )
	SV* c_func
	short s0
	double d1
	float f2
	short s3
PREINIT:
	char *(*func)(short, double, float, short);
CODE:
	func   = INT2PTR(char *(*)(short, double, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2, s3);
OUTPUT:
	RETVAL

int
nci_isdfs( c_func, s0, d1, f2, s3 )
	SV* c_func
	short s0
	double d1
	float f2
	short s3
PREINIT:
	int(*func)(short, double, float, short);
CODE:
	func   = INT2PTR(int(*)(short, double, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2, s3);
OUTPUT:
	RETVAL

void *
nci_pfdfs( c_func, f0, d1, f2, s3 )
	SV* c_func
	float f0
	double d1
	float f2
	short s3
PREINIT:
	void *(*func)(float, double, float, short);
CODE:
	func   = INT2PTR(void *(*)(float, double, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2, s3);
OUTPUT:
	RETVAL

void
nci_vfdfs( c_func, f0, d1, f2, s3 )
	SV* c_func
	float f0
	double d1
	float f2
	short s3
PREINIT:
	void(*func)(float, double, float, short);
CODE:
	func   = INT2PTR(void(*)(float, double, float, short), SvIV(c_func) );
	(*func)(f0, d1, f2, s3);

double
nci_dfdfs( c_func, f0, d1, f2, s3 )
	SV* c_func
	float f0
	double d1
	float f2
	short s3
PREINIT:
	double(*func)(float, double, float, short);
CODE:
	func   = INT2PTR(double(*)(float, double, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2, s3);
OUTPUT:
	RETVAL

short
nci_sfdfs( c_func, f0, d1, f2, s3 )
	SV* c_func
	float f0
	double d1
	float f2
	short s3
PREINIT:
	short(*func)(float, double, float, short);
CODE:
	func   = INT2PTR(short(*)(float, double, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2, s3);
OUTPUT:
	RETVAL

float
nci_ffdfs( c_func, f0, d1, f2, s3 )
	SV* c_func
	float f0
	double d1
	float f2
	short s3
PREINIT:
	float(*func)(float, double, float, short);
CODE:
	func   = INT2PTR(float(*)(float, double, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2, s3);
OUTPUT:
	RETVAL

char *
nci_tfdfs( c_func, f0, d1, f2, s3 )
	SV* c_func
	float f0
	double d1
	float f2
	short s3
PREINIT:
	char *(*func)(float, double, float, short);
CODE:
	func   = INT2PTR(char *(*)(float, double, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2, s3);
OUTPUT:
	RETVAL

int
nci_ifdfs( c_func, f0, d1, f2, s3 )
	SV* c_func
	float f0
	double d1
	float f2
	short s3
PREINIT:
	int(*func)(float, double, float, short);
CODE:
	func   = INT2PTR(int(*)(float, double, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2, s3);
OUTPUT:
	RETVAL

void *
nci_ptdfs( c_func, t0, d1, f2, s3 )
	SV* c_func
	char * t0
	double d1
	float f2
	short s3
PREINIT:
	void *(*func)(char *, double, float, short);
CODE:
	func   = INT2PTR(void *(*)(char *, double, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2, s3);
OUTPUT:
	RETVAL

void
nci_vtdfs( c_func, t0, d1, f2, s3 )
	SV* c_func
	char * t0
	double d1
	float f2
	short s3
PREINIT:
	void(*func)(char *, double, float, short);
CODE:
	func   = INT2PTR(void(*)(char *, double, float, short), SvIV(c_func) );
	(*func)(t0, d1, f2, s3);

double
nci_dtdfs( c_func, t0, d1, f2, s3 )
	SV* c_func
	char * t0
	double d1
	float f2
	short s3
PREINIT:
	double(*func)(char *, double, float, short);
CODE:
	func   = INT2PTR(double(*)(char *, double, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2, s3);
OUTPUT:
	RETVAL

short
nci_stdfs( c_func, t0, d1, f2, s3 )
	SV* c_func
	char * t0
	double d1
	float f2
	short s3
PREINIT:
	short(*func)(char *, double, float, short);
CODE:
	func   = INT2PTR(short(*)(char *, double, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2, s3);
OUTPUT:
	RETVAL

float
nci_ftdfs( c_func, t0, d1, f2, s3 )
	SV* c_func
	char * t0
	double d1
	float f2
	short s3
PREINIT:
	float(*func)(char *, double, float, short);
CODE:
	func   = INT2PTR(float(*)(char *, double, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2, s3);
OUTPUT:
	RETVAL

char *
nci_ttdfs( c_func, t0, d1, f2, s3 )
	SV* c_func
	char * t0
	double d1
	float f2
	short s3
PREINIT:
	char *(*func)(char *, double, float, short);
CODE:
	func   = INT2PTR(char *(*)(char *, double, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2, s3);
OUTPUT:
	RETVAL

int
nci_itdfs( c_func, t0, d1, f2, s3 )
	SV* c_func
	char * t0
	double d1
	float f2
	short s3
PREINIT:
	int(*func)(char *, double, float, short);
CODE:
	func   = INT2PTR(int(*)(char *, double, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2, s3);
OUTPUT:
	RETVAL

void *
nci_pidfs( c_func, i0, d1, f2, s3 )
	SV* c_func
	int i0
	double d1
	float f2
	short s3
PREINIT:
	void *(*func)(int, double, float, short);
CODE:
	func   = INT2PTR(void *(*)(int, double, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2, s3);
OUTPUT:
	RETVAL

void
nci_vidfs( c_func, i0, d1, f2, s3 )
	SV* c_func
	int i0
	double d1
	float f2
	short s3
PREINIT:
	void(*func)(int, double, float, short);
CODE:
	func   = INT2PTR(void(*)(int, double, float, short), SvIV(c_func) );
	(*func)(i0, d1, f2, s3);

double
nci_didfs( c_func, i0, d1, f2, s3 )
	SV* c_func
	int i0
	double d1
	float f2
	short s3
PREINIT:
	double(*func)(int, double, float, short);
CODE:
	func   = INT2PTR(double(*)(int, double, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2, s3);
OUTPUT:
	RETVAL

short
nci_sidfs( c_func, i0, d1, f2, s3 )
	SV* c_func
	int i0
	double d1
	float f2
	short s3
PREINIT:
	short(*func)(int, double, float, short);
CODE:
	func   = INT2PTR(short(*)(int, double, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2, s3);
OUTPUT:
	RETVAL

float
nci_fidfs( c_func, i0, d1, f2, s3 )
	SV* c_func
	int i0
	double d1
	float f2
	short s3
PREINIT:
	float(*func)(int, double, float, short);
CODE:
	func   = INT2PTR(float(*)(int, double, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2, s3);
OUTPUT:
	RETVAL

char *
nci_tidfs( c_func, i0, d1, f2, s3 )
	SV* c_func
	int i0
	double d1
	float f2
	short s3
PREINIT:
	char *(*func)(int, double, float, short);
CODE:
	func   = INT2PTR(char *(*)(int, double, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2, s3);
OUTPUT:
	RETVAL

int
nci_iidfs( c_func, i0, d1, f2, s3 )
	SV* c_func
	int i0
	double d1
	float f2
	short s3
PREINIT:
	int(*func)(int, double, float, short);
CODE:
	func   = INT2PTR(int(*)(int, double, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2, s3);
OUTPUT:
	RETVAL

void *
nci_ppsfs( c_func, p0, s1, f2, s3 )
	SV* c_func
	void * p0
	short s1
	float f2
	short s3
PREINIT:
	void *(*func)(void *, short, float, short);
CODE:
	func   = INT2PTR(void *(*)(void *, short, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2, s3);
OUTPUT:
	RETVAL

void
nci_vpsfs( c_func, p0, s1, f2, s3 )
	SV* c_func
	void * p0
	short s1
	float f2
	short s3
PREINIT:
	void(*func)(void *, short, float, short);
CODE:
	func   = INT2PTR(void(*)(void *, short, float, short), SvIV(c_func) );
	(*func)(p0, s1, f2, s3);

double
nci_dpsfs( c_func, p0, s1, f2, s3 )
	SV* c_func
	void * p0
	short s1
	float f2
	short s3
PREINIT:
	double(*func)(void *, short, float, short);
CODE:
	func   = INT2PTR(double(*)(void *, short, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2, s3);
OUTPUT:
	RETVAL

short
nci_spsfs( c_func, p0, s1, f2, s3 )
	SV* c_func
	void * p0
	short s1
	float f2
	short s3
PREINIT:
	short(*func)(void *, short, float, short);
CODE:
	func   = INT2PTR(short(*)(void *, short, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2, s3);
OUTPUT:
	RETVAL

float
nci_fpsfs( c_func, p0, s1, f2, s3 )
	SV* c_func
	void * p0
	short s1
	float f2
	short s3
PREINIT:
	float(*func)(void *, short, float, short);
CODE:
	func   = INT2PTR(float(*)(void *, short, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2, s3);
OUTPUT:
	RETVAL

char *
nci_tpsfs( c_func, p0, s1, f2, s3 )
	SV* c_func
	void * p0
	short s1
	float f2
	short s3
PREINIT:
	char *(*func)(void *, short, float, short);
CODE:
	func   = INT2PTR(char *(*)(void *, short, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2, s3);
OUTPUT:
	RETVAL

int
nci_ipsfs( c_func, p0, s1, f2, s3 )
	SV* c_func
	void * p0
	short s1
	float f2
	short s3
PREINIT:
	int(*func)(void *, short, float, short);
CODE:
	func   = INT2PTR(int(*)(void *, short, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2, s3);
OUTPUT:
	RETVAL

void *
nci_pvsfs( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvsfs( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvsfs( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svsfs( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvsfs( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvsfs( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivsfs( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdsfs( c_func, d0, s1, f2, s3 )
	SV* c_func
	double d0
	short s1
	float f2
	short s3
PREINIT:
	void *(*func)(double, short, float, short);
CODE:
	func   = INT2PTR(void *(*)(double, short, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2, s3);
OUTPUT:
	RETVAL

void
nci_vdsfs( c_func, d0, s1, f2, s3 )
	SV* c_func
	double d0
	short s1
	float f2
	short s3
PREINIT:
	void(*func)(double, short, float, short);
CODE:
	func   = INT2PTR(void(*)(double, short, float, short), SvIV(c_func) );
	(*func)(d0, s1, f2, s3);

double
nci_ddsfs( c_func, d0, s1, f2, s3 )
	SV* c_func
	double d0
	short s1
	float f2
	short s3
PREINIT:
	double(*func)(double, short, float, short);
CODE:
	func   = INT2PTR(double(*)(double, short, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2, s3);
OUTPUT:
	RETVAL

short
nci_sdsfs( c_func, d0, s1, f2, s3 )
	SV* c_func
	double d0
	short s1
	float f2
	short s3
PREINIT:
	short(*func)(double, short, float, short);
CODE:
	func   = INT2PTR(short(*)(double, short, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2, s3);
OUTPUT:
	RETVAL

float
nci_fdsfs( c_func, d0, s1, f2, s3 )
	SV* c_func
	double d0
	short s1
	float f2
	short s3
PREINIT:
	float(*func)(double, short, float, short);
CODE:
	func   = INT2PTR(float(*)(double, short, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2, s3);
OUTPUT:
	RETVAL

char *
nci_tdsfs( c_func, d0, s1, f2, s3 )
	SV* c_func
	double d0
	short s1
	float f2
	short s3
PREINIT:
	char *(*func)(double, short, float, short);
CODE:
	func   = INT2PTR(char *(*)(double, short, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2, s3);
OUTPUT:
	RETVAL

int
nci_idsfs( c_func, d0, s1, f2, s3 )
	SV* c_func
	double d0
	short s1
	float f2
	short s3
PREINIT:
	int(*func)(double, short, float, short);
CODE:
	func   = INT2PTR(int(*)(double, short, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2, s3);
OUTPUT:
	RETVAL

void *
nci_pssfs( c_func, s0, s1, f2, s3 )
	SV* c_func
	short s0
	short s1
	float f2
	short s3
PREINIT:
	void *(*func)(short, short, float, short);
CODE:
	func   = INT2PTR(void *(*)(short, short, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2, s3);
OUTPUT:
	RETVAL

void
nci_vssfs( c_func, s0, s1, f2, s3 )
	SV* c_func
	short s0
	short s1
	float f2
	short s3
PREINIT:
	void(*func)(short, short, float, short);
CODE:
	func   = INT2PTR(void(*)(short, short, float, short), SvIV(c_func) );
	(*func)(s0, s1, f2, s3);

double
nci_dssfs( c_func, s0, s1, f2, s3 )
	SV* c_func
	short s0
	short s1
	float f2
	short s3
PREINIT:
	double(*func)(short, short, float, short);
CODE:
	func   = INT2PTR(double(*)(short, short, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2, s3);
OUTPUT:
	RETVAL

short
nci_sssfs( c_func, s0, s1, f2, s3 )
	SV* c_func
	short s0
	short s1
	float f2
	short s3
PREINIT:
	short(*func)(short, short, float, short);
CODE:
	func   = INT2PTR(short(*)(short, short, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2, s3);
OUTPUT:
	RETVAL

float
nci_fssfs( c_func, s0, s1, f2, s3 )
	SV* c_func
	short s0
	short s1
	float f2
	short s3
PREINIT:
	float(*func)(short, short, float, short);
CODE:
	func   = INT2PTR(float(*)(short, short, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2, s3);
OUTPUT:
	RETVAL

char *
nci_tssfs( c_func, s0, s1, f2, s3 )
	SV* c_func
	short s0
	short s1
	float f2
	short s3
PREINIT:
	char *(*func)(short, short, float, short);
CODE:
	func   = INT2PTR(char *(*)(short, short, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2, s3);
OUTPUT:
	RETVAL

int
nci_issfs( c_func, s0, s1, f2, s3 )
	SV* c_func
	short s0
	short s1
	float f2
	short s3
PREINIT:
	int(*func)(short, short, float, short);
CODE:
	func   = INT2PTR(int(*)(short, short, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2, s3);
OUTPUT:
	RETVAL

void *
nci_pfsfs( c_func, f0, s1, f2, s3 )
	SV* c_func
	float f0
	short s1
	float f2
	short s3
PREINIT:
	void *(*func)(float, short, float, short);
CODE:
	func   = INT2PTR(void *(*)(float, short, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2, s3);
OUTPUT:
	RETVAL

void
nci_vfsfs( c_func, f0, s1, f2, s3 )
	SV* c_func
	float f0
	short s1
	float f2
	short s3
PREINIT:
	void(*func)(float, short, float, short);
CODE:
	func   = INT2PTR(void(*)(float, short, float, short), SvIV(c_func) );
	(*func)(f0, s1, f2, s3);

double
nci_dfsfs( c_func, f0, s1, f2, s3 )
	SV* c_func
	float f0
	short s1
	float f2
	short s3
PREINIT:
	double(*func)(float, short, float, short);
CODE:
	func   = INT2PTR(double(*)(float, short, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2, s3);
OUTPUT:
	RETVAL

short
nci_sfsfs( c_func, f0, s1, f2, s3 )
	SV* c_func
	float f0
	short s1
	float f2
	short s3
PREINIT:
	short(*func)(float, short, float, short);
CODE:
	func   = INT2PTR(short(*)(float, short, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2, s3);
OUTPUT:
	RETVAL

float
nci_ffsfs( c_func, f0, s1, f2, s3 )
	SV* c_func
	float f0
	short s1
	float f2
	short s3
PREINIT:
	float(*func)(float, short, float, short);
CODE:
	func   = INT2PTR(float(*)(float, short, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2, s3);
OUTPUT:
	RETVAL

char *
nci_tfsfs( c_func, f0, s1, f2, s3 )
	SV* c_func
	float f0
	short s1
	float f2
	short s3
PREINIT:
	char *(*func)(float, short, float, short);
CODE:
	func   = INT2PTR(char *(*)(float, short, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2, s3);
OUTPUT:
	RETVAL

int
nci_ifsfs( c_func, f0, s1, f2, s3 )
	SV* c_func
	float f0
	short s1
	float f2
	short s3
PREINIT:
	int(*func)(float, short, float, short);
CODE:
	func   = INT2PTR(int(*)(float, short, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2, s3);
OUTPUT:
	RETVAL

void *
nci_ptsfs( c_func, t0, s1, f2, s3 )
	SV* c_func
	char * t0
	short s1
	float f2
	short s3
PREINIT:
	void *(*func)(char *, short, float, short);
CODE:
	func   = INT2PTR(void *(*)(char *, short, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2, s3);
OUTPUT:
	RETVAL

void
nci_vtsfs( c_func, t0, s1, f2, s3 )
	SV* c_func
	char * t0
	short s1
	float f2
	short s3
PREINIT:
	void(*func)(char *, short, float, short);
CODE:
	func   = INT2PTR(void(*)(char *, short, float, short), SvIV(c_func) );
	(*func)(t0, s1, f2, s3);

double
nci_dtsfs( c_func, t0, s1, f2, s3 )
	SV* c_func
	char * t0
	short s1
	float f2
	short s3
PREINIT:
	double(*func)(char *, short, float, short);
CODE:
	func   = INT2PTR(double(*)(char *, short, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2, s3);
OUTPUT:
	RETVAL

short
nci_stsfs( c_func, t0, s1, f2, s3 )
	SV* c_func
	char * t0
	short s1
	float f2
	short s3
PREINIT:
	short(*func)(char *, short, float, short);
CODE:
	func   = INT2PTR(short(*)(char *, short, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2, s3);
OUTPUT:
	RETVAL

float
nci_ftsfs( c_func, t0, s1, f2, s3 )
	SV* c_func
	char * t0
	short s1
	float f2
	short s3
PREINIT:
	float(*func)(char *, short, float, short);
CODE:
	func   = INT2PTR(float(*)(char *, short, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2, s3);
OUTPUT:
	RETVAL

char *
nci_ttsfs( c_func, t0, s1, f2, s3 )
	SV* c_func
	char * t0
	short s1
	float f2
	short s3
PREINIT:
	char *(*func)(char *, short, float, short);
CODE:
	func   = INT2PTR(char *(*)(char *, short, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2, s3);
OUTPUT:
	RETVAL

int
nci_itsfs( c_func, t0, s1, f2, s3 )
	SV* c_func
	char * t0
	short s1
	float f2
	short s3
PREINIT:
	int(*func)(char *, short, float, short);
CODE:
	func   = INT2PTR(int(*)(char *, short, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2, s3);
OUTPUT:
	RETVAL

void *
nci_pisfs( c_func, i0, s1, f2, s3 )
	SV* c_func
	int i0
	short s1
	float f2
	short s3
PREINIT:
	void *(*func)(int, short, float, short);
CODE:
	func   = INT2PTR(void *(*)(int, short, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2, s3);
OUTPUT:
	RETVAL

void
nci_visfs( c_func, i0, s1, f2, s3 )
	SV* c_func
	int i0
	short s1
	float f2
	short s3
PREINIT:
	void(*func)(int, short, float, short);
CODE:
	func   = INT2PTR(void(*)(int, short, float, short), SvIV(c_func) );
	(*func)(i0, s1, f2, s3);

double
nci_disfs( c_func, i0, s1, f2, s3 )
	SV* c_func
	int i0
	short s1
	float f2
	short s3
PREINIT:
	double(*func)(int, short, float, short);
CODE:
	func   = INT2PTR(double(*)(int, short, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2, s3);
OUTPUT:
	RETVAL

short
nci_sisfs( c_func, i0, s1, f2, s3 )
	SV* c_func
	int i0
	short s1
	float f2
	short s3
PREINIT:
	short(*func)(int, short, float, short);
CODE:
	func   = INT2PTR(short(*)(int, short, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2, s3);
OUTPUT:
	RETVAL

float
nci_fisfs( c_func, i0, s1, f2, s3 )
	SV* c_func
	int i0
	short s1
	float f2
	short s3
PREINIT:
	float(*func)(int, short, float, short);
CODE:
	func   = INT2PTR(float(*)(int, short, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2, s3);
OUTPUT:
	RETVAL

char *
nci_tisfs( c_func, i0, s1, f2, s3 )
	SV* c_func
	int i0
	short s1
	float f2
	short s3
PREINIT:
	char *(*func)(int, short, float, short);
CODE:
	func   = INT2PTR(char *(*)(int, short, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2, s3);
OUTPUT:
	RETVAL

int
nci_iisfs( c_func, i0, s1, f2, s3 )
	SV* c_func
	int i0
	short s1
	float f2
	short s3
PREINIT:
	int(*func)(int, short, float, short);
CODE:
	func   = INT2PTR(int(*)(int, short, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2, s3);
OUTPUT:
	RETVAL

void *
nci_ppffs( c_func, p0, f1, f2, s3 )
	SV* c_func
	void * p0
	float f1
	float f2
	short s3
PREINIT:
	void *(*func)(void *, float, float, short);
CODE:
	func   = INT2PTR(void *(*)(void *, float, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2, s3);
OUTPUT:
	RETVAL

void
nci_vpffs( c_func, p0, f1, f2, s3 )
	SV* c_func
	void * p0
	float f1
	float f2
	short s3
PREINIT:
	void(*func)(void *, float, float, short);
CODE:
	func   = INT2PTR(void(*)(void *, float, float, short), SvIV(c_func) );
	(*func)(p0, f1, f2, s3);

double
nci_dpffs( c_func, p0, f1, f2, s3 )
	SV* c_func
	void * p0
	float f1
	float f2
	short s3
PREINIT:
	double(*func)(void *, float, float, short);
CODE:
	func   = INT2PTR(double(*)(void *, float, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2, s3);
OUTPUT:
	RETVAL

short
nci_spffs( c_func, p0, f1, f2, s3 )
	SV* c_func
	void * p0
	float f1
	float f2
	short s3
PREINIT:
	short(*func)(void *, float, float, short);
CODE:
	func   = INT2PTR(short(*)(void *, float, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2, s3);
OUTPUT:
	RETVAL

float
nci_fpffs( c_func, p0, f1, f2, s3 )
	SV* c_func
	void * p0
	float f1
	float f2
	short s3
PREINIT:
	float(*func)(void *, float, float, short);
CODE:
	func   = INT2PTR(float(*)(void *, float, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2, s3);
OUTPUT:
	RETVAL

char *
nci_tpffs( c_func, p0, f1, f2, s3 )
	SV* c_func
	void * p0
	float f1
	float f2
	short s3
PREINIT:
	char *(*func)(void *, float, float, short);
CODE:
	func   = INT2PTR(char *(*)(void *, float, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2, s3);
OUTPUT:
	RETVAL

int
nci_ipffs( c_func, p0, f1, f2, s3 )
	SV* c_func
	void * p0
	float f1
	float f2
	short s3
PREINIT:
	int(*func)(void *, float, float, short);
CODE:
	func   = INT2PTR(int(*)(void *, float, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2, s3);
OUTPUT:
	RETVAL

void *
nci_pvffs( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvffs( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvffs( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svffs( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvffs( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvffs( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivffs( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdffs( c_func, d0, f1, f2, s3 )
	SV* c_func
	double d0
	float f1
	float f2
	short s3
PREINIT:
	void *(*func)(double, float, float, short);
CODE:
	func   = INT2PTR(void *(*)(double, float, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2, s3);
OUTPUT:
	RETVAL

void
nci_vdffs( c_func, d0, f1, f2, s3 )
	SV* c_func
	double d0
	float f1
	float f2
	short s3
PREINIT:
	void(*func)(double, float, float, short);
CODE:
	func   = INT2PTR(void(*)(double, float, float, short), SvIV(c_func) );
	(*func)(d0, f1, f2, s3);

double
nci_ddffs( c_func, d0, f1, f2, s3 )
	SV* c_func
	double d0
	float f1
	float f2
	short s3
PREINIT:
	double(*func)(double, float, float, short);
CODE:
	func   = INT2PTR(double(*)(double, float, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2, s3);
OUTPUT:
	RETVAL

short
nci_sdffs( c_func, d0, f1, f2, s3 )
	SV* c_func
	double d0
	float f1
	float f2
	short s3
PREINIT:
	short(*func)(double, float, float, short);
CODE:
	func   = INT2PTR(short(*)(double, float, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2, s3);
OUTPUT:
	RETVAL

float
nci_fdffs( c_func, d0, f1, f2, s3 )
	SV* c_func
	double d0
	float f1
	float f2
	short s3
PREINIT:
	float(*func)(double, float, float, short);
CODE:
	func   = INT2PTR(float(*)(double, float, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2, s3);
OUTPUT:
	RETVAL

char *
nci_tdffs( c_func, d0, f1, f2, s3 )
	SV* c_func
	double d0
	float f1
	float f2
	short s3
PREINIT:
	char *(*func)(double, float, float, short);
CODE:
	func   = INT2PTR(char *(*)(double, float, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2, s3);
OUTPUT:
	RETVAL

int
nci_idffs( c_func, d0, f1, f2, s3 )
	SV* c_func
	double d0
	float f1
	float f2
	short s3
PREINIT:
	int(*func)(double, float, float, short);
CODE:
	func   = INT2PTR(int(*)(double, float, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2, s3);
OUTPUT:
	RETVAL

void *
nci_psffs( c_func, s0, f1, f2, s3 )
	SV* c_func
	short s0
	float f1
	float f2
	short s3
PREINIT:
	void *(*func)(short, float, float, short);
CODE:
	func   = INT2PTR(void *(*)(short, float, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2, s3);
OUTPUT:
	RETVAL

void
nci_vsffs( c_func, s0, f1, f2, s3 )
	SV* c_func
	short s0
	float f1
	float f2
	short s3
PREINIT:
	void(*func)(short, float, float, short);
CODE:
	func   = INT2PTR(void(*)(short, float, float, short), SvIV(c_func) );
	(*func)(s0, f1, f2, s3);

double
nci_dsffs( c_func, s0, f1, f2, s3 )
	SV* c_func
	short s0
	float f1
	float f2
	short s3
PREINIT:
	double(*func)(short, float, float, short);
CODE:
	func   = INT2PTR(double(*)(short, float, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2, s3);
OUTPUT:
	RETVAL

short
nci_ssffs( c_func, s0, f1, f2, s3 )
	SV* c_func
	short s0
	float f1
	float f2
	short s3
PREINIT:
	short(*func)(short, float, float, short);
CODE:
	func   = INT2PTR(short(*)(short, float, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2, s3);
OUTPUT:
	RETVAL

float
nci_fsffs( c_func, s0, f1, f2, s3 )
	SV* c_func
	short s0
	float f1
	float f2
	short s3
PREINIT:
	float(*func)(short, float, float, short);
CODE:
	func   = INT2PTR(float(*)(short, float, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2, s3);
OUTPUT:
	RETVAL

char *
nci_tsffs( c_func, s0, f1, f2, s3 )
	SV* c_func
	short s0
	float f1
	float f2
	short s3
PREINIT:
	char *(*func)(short, float, float, short);
CODE:
	func   = INT2PTR(char *(*)(short, float, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2, s3);
OUTPUT:
	RETVAL

int
nci_isffs( c_func, s0, f1, f2, s3 )
	SV* c_func
	short s0
	float f1
	float f2
	short s3
PREINIT:
	int(*func)(short, float, float, short);
CODE:
	func   = INT2PTR(int(*)(short, float, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2, s3);
OUTPUT:
	RETVAL

void *
nci_pfffs( c_func, f0, f1, f2, s3 )
	SV* c_func
	float f0
	float f1
	float f2
	short s3
PREINIT:
	void *(*func)(float, float, float, short);
CODE:
	func   = INT2PTR(void *(*)(float, float, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2, s3);
OUTPUT:
	RETVAL

void
nci_vfffs( c_func, f0, f1, f2, s3 )
	SV* c_func
	float f0
	float f1
	float f2
	short s3
PREINIT:
	void(*func)(float, float, float, short);
CODE:
	func   = INT2PTR(void(*)(float, float, float, short), SvIV(c_func) );
	(*func)(f0, f1, f2, s3);

double
nci_dfffs( c_func, f0, f1, f2, s3 )
	SV* c_func
	float f0
	float f1
	float f2
	short s3
PREINIT:
	double(*func)(float, float, float, short);
CODE:
	func   = INT2PTR(double(*)(float, float, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2, s3);
OUTPUT:
	RETVAL

short
nci_sfffs( c_func, f0, f1, f2, s3 )
	SV* c_func
	float f0
	float f1
	float f2
	short s3
PREINIT:
	short(*func)(float, float, float, short);
CODE:
	func   = INT2PTR(short(*)(float, float, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2, s3);
OUTPUT:
	RETVAL

float
nci_ffffs( c_func, f0, f1, f2, s3 )
	SV* c_func
	float f0
	float f1
	float f2
	short s3
PREINIT:
	float(*func)(float, float, float, short);
CODE:
	func   = INT2PTR(float(*)(float, float, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2, s3);
OUTPUT:
	RETVAL

char *
nci_tfffs( c_func, f0, f1, f2, s3 )
	SV* c_func
	float f0
	float f1
	float f2
	short s3
PREINIT:
	char *(*func)(float, float, float, short);
CODE:
	func   = INT2PTR(char *(*)(float, float, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2, s3);
OUTPUT:
	RETVAL

int
nci_ifffs( c_func, f0, f1, f2, s3 )
	SV* c_func
	float f0
	float f1
	float f2
	short s3
PREINIT:
	int(*func)(float, float, float, short);
CODE:
	func   = INT2PTR(int(*)(float, float, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2, s3);
OUTPUT:
	RETVAL

void *
nci_ptffs( c_func, t0, f1, f2, s3 )
	SV* c_func
	char * t0
	float f1
	float f2
	short s3
PREINIT:
	void *(*func)(char *, float, float, short);
CODE:
	func   = INT2PTR(void *(*)(char *, float, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2, s3);
OUTPUT:
	RETVAL

void
nci_vtffs( c_func, t0, f1, f2, s3 )
	SV* c_func
	char * t0
	float f1
	float f2
	short s3
PREINIT:
	void(*func)(char *, float, float, short);
CODE:
	func   = INT2PTR(void(*)(char *, float, float, short), SvIV(c_func) );
	(*func)(t0, f1, f2, s3);

double
nci_dtffs( c_func, t0, f1, f2, s3 )
	SV* c_func
	char * t0
	float f1
	float f2
	short s3
PREINIT:
	double(*func)(char *, float, float, short);
CODE:
	func   = INT2PTR(double(*)(char *, float, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2, s3);
OUTPUT:
	RETVAL

short
nci_stffs( c_func, t0, f1, f2, s3 )
	SV* c_func
	char * t0
	float f1
	float f2
	short s3
PREINIT:
	short(*func)(char *, float, float, short);
CODE:
	func   = INT2PTR(short(*)(char *, float, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2, s3);
OUTPUT:
	RETVAL

float
nci_ftffs( c_func, t0, f1, f2, s3 )
	SV* c_func
	char * t0
	float f1
	float f2
	short s3
PREINIT:
	float(*func)(char *, float, float, short);
CODE:
	func   = INT2PTR(float(*)(char *, float, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2, s3);
OUTPUT:
	RETVAL

char *
nci_ttffs( c_func, t0, f1, f2, s3 )
	SV* c_func
	char * t0
	float f1
	float f2
	short s3
PREINIT:
	char *(*func)(char *, float, float, short);
CODE:
	func   = INT2PTR(char *(*)(char *, float, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2, s3);
OUTPUT:
	RETVAL

int
nci_itffs( c_func, t0, f1, f2, s3 )
	SV* c_func
	char * t0
	float f1
	float f2
	short s3
PREINIT:
	int(*func)(char *, float, float, short);
CODE:
	func   = INT2PTR(int(*)(char *, float, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2, s3);
OUTPUT:
	RETVAL

void *
nci_piffs( c_func, i0, f1, f2, s3 )
	SV* c_func
	int i0
	float f1
	float f2
	short s3
PREINIT:
	void *(*func)(int, float, float, short);
CODE:
	func   = INT2PTR(void *(*)(int, float, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2, s3);
OUTPUT:
	RETVAL

void
nci_viffs( c_func, i0, f1, f2, s3 )
	SV* c_func
	int i0
	float f1
	float f2
	short s3
PREINIT:
	void(*func)(int, float, float, short);
CODE:
	func   = INT2PTR(void(*)(int, float, float, short), SvIV(c_func) );
	(*func)(i0, f1, f2, s3);

double
nci_diffs( c_func, i0, f1, f2, s3 )
	SV* c_func
	int i0
	float f1
	float f2
	short s3
PREINIT:
	double(*func)(int, float, float, short);
CODE:
	func   = INT2PTR(double(*)(int, float, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2, s3);
OUTPUT:
	RETVAL

short
nci_siffs( c_func, i0, f1, f2, s3 )
	SV* c_func
	int i0
	float f1
	float f2
	short s3
PREINIT:
	short(*func)(int, float, float, short);
CODE:
	func   = INT2PTR(short(*)(int, float, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2, s3);
OUTPUT:
	RETVAL

float
nci_fiffs( c_func, i0, f1, f2, s3 )
	SV* c_func
	int i0
	float f1
	float f2
	short s3
PREINIT:
	float(*func)(int, float, float, short);
CODE:
	func   = INT2PTR(float(*)(int, float, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2, s3);
OUTPUT:
	RETVAL

char *
nci_tiffs( c_func, i0, f1, f2, s3 )
	SV* c_func
	int i0
	float f1
	float f2
	short s3
PREINIT:
	char *(*func)(int, float, float, short);
CODE:
	func   = INT2PTR(char *(*)(int, float, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2, s3);
OUTPUT:
	RETVAL

int
nci_iiffs( c_func, i0, f1, f2, s3 )
	SV* c_func
	int i0
	float f1
	float f2
	short s3
PREINIT:
	int(*func)(int, float, float, short);
CODE:
	func   = INT2PTR(int(*)(int, float, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2, s3);
OUTPUT:
	RETVAL

void *
nci_pptfs( c_func, p0, t1, f2, s3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	short s3
PREINIT:
	void *(*func)(void *, char *, float, short);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2, s3);
OUTPUT:
	RETVAL

void
nci_vptfs( c_func, p0, t1, f2, s3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	short s3
PREINIT:
	void(*func)(void *, char *, float, short);
CODE:
	func   = INT2PTR(void(*)(void *, char *, float, short), SvIV(c_func) );
	(*func)(p0, t1, f2, s3);

double
nci_dptfs( c_func, p0, t1, f2, s3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	short s3
PREINIT:
	double(*func)(void *, char *, float, short);
CODE:
	func   = INT2PTR(double(*)(void *, char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2, s3);
OUTPUT:
	RETVAL

short
nci_sptfs( c_func, p0, t1, f2, s3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	short s3
PREINIT:
	short(*func)(void *, char *, float, short);
CODE:
	func   = INT2PTR(short(*)(void *, char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2, s3);
OUTPUT:
	RETVAL

float
nci_fptfs( c_func, p0, t1, f2, s3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	short s3
PREINIT:
	float(*func)(void *, char *, float, short);
CODE:
	func   = INT2PTR(float(*)(void *, char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2, s3);
OUTPUT:
	RETVAL

char *
nci_tptfs( c_func, p0, t1, f2, s3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	short s3
PREINIT:
	char *(*func)(void *, char *, float, short);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2, s3);
OUTPUT:
	RETVAL

int
nci_iptfs( c_func, p0, t1, f2, s3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	short s3
PREINIT:
	int(*func)(void *, char *, float, short);
CODE:
	func   = INT2PTR(int(*)(void *, char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2, s3);
OUTPUT:
	RETVAL

void *
nci_pvtfs( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvtfs( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvtfs( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svtfs( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvtfs( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvtfs( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivtfs( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdtfs( c_func, d0, t1, f2, s3 )
	SV* c_func
	double d0
	char * t1
	float f2
	short s3
PREINIT:
	void *(*func)(double, char *, float, short);
CODE:
	func   = INT2PTR(void *(*)(double, char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2, s3);
OUTPUT:
	RETVAL

void
nci_vdtfs( c_func, d0, t1, f2, s3 )
	SV* c_func
	double d0
	char * t1
	float f2
	short s3
PREINIT:
	void(*func)(double, char *, float, short);
CODE:
	func   = INT2PTR(void(*)(double, char *, float, short), SvIV(c_func) );
	(*func)(d0, t1, f2, s3);

double
nci_ddtfs( c_func, d0, t1, f2, s3 )
	SV* c_func
	double d0
	char * t1
	float f2
	short s3
PREINIT:
	double(*func)(double, char *, float, short);
CODE:
	func   = INT2PTR(double(*)(double, char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2, s3);
OUTPUT:
	RETVAL

short
nci_sdtfs( c_func, d0, t1, f2, s3 )
	SV* c_func
	double d0
	char * t1
	float f2
	short s3
PREINIT:
	short(*func)(double, char *, float, short);
CODE:
	func   = INT2PTR(short(*)(double, char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2, s3);
OUTPUT:
	RETVAL

float
nci_fdtfs( c_func, d0, t1, f2, s3 )
	SV* c_func
	double d0
	char * t1
	float f2
	short s3
PREINIT:
	float(*func)(double, char *, float, short);
CODE:
	func   = INT2PTR(float(*)(double, char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2, s3);
OUTPUT:
	RETVAL

char *
nci_tdtfs( c_func, d0, t1, f2, s3 )
	SV* c_func
	double d0
	char * t1
	float f2
	short s3
PREINIT:
	char *(*func)(double, char *, float, short);
CODE:
	func   = INT2PTR(char *(*)(double, char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2, s3);
OUTPUT:
	RETVAL

int
nci_idtfs( c_func, d0, t1, f2, s3 )
	SV* c_func
	double d0
	char * t1
	float f2
	short s3
PREINIT:
	int(*func)(double, char *, float, short);
CODE:
	func   = INT2PTR(int(*)(double, char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2, s3);
OUTPUT:
	RETVAL

void *
nci_pstfs( c_func, s0, t1, f2, s3 )
	SV* c_func
	short s0
	char * t1
	float f2
	short s3
PREINIT:
	void *(*func)(short, char *, float, short);
CODE:
	func   = INT2PTR(void *(*)(short, char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2, s3);
OUTPUT:
	RETVAL

void
nci_vstfs( c_func, s0, t1, f2, s3 )
	SV* c_func
	short s0
	char * t1
	float f2
	short s3
PREINIT:
	void(*func)(short, char *, float, short);
CODE:
	func   = INT2PTR(void(*)(short, char *, float, short), SvIV(c_func) );
	(*func)(s0, t1, f2, s3);

double
nci_dstfs( c_func, s0, t1, f2, s3 )
	SV* c_func
	short s0
	char * t1
	float f2
	short s3
PREINIT:
	double(*func)(short, char *, float, short);
CODE:
	func   = INT2PTR(double(*)(short, char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2, s3);
OUTPUT:
	RETVAL

short
nci_sstfs( c_func, s0, t1, f2, s3 )
	SV* c_func
	short s0
	char * t1
	float f2
	short s3
PREINIT:
	short(*func)(short, char *, float, short);
CODE:
	func   = INT2PTR(short(*)(short, char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2, s3);
OUTPUT:
	RETVAL

float
nci_fstfs( c_func, s0, t1, f2, s3 )
	SV* c_func
	short s0
	char * t1
	float f2
	short s3
PREINIT:
	float(*func)(short, char *, float, short);
CODE:
	func   = INT2PTR(float(*)(short, char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2, s3);
OUTPUT:
	RETVAL

char *
nci_tstfs( c_func, s0, t1, f2, s3 )
	SV* c_func
	short s0
	char * t1
	float f2
	short s3
PREINIT:
	char *(*func)(short, char *, float, short);
CODE:
	func   = INT2PTR(char *(*)(short, char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2, s3);
OUTPUT:
	RETVAL

int
nci_istfs( c_func, s0, t1, f2, s3 )
	SV* c_func
	short s0
	char * t1
	float f2
	short s3
PREINIT:
	int(*func)(short, char *, float, short);
CODE:
	func   = INT2PTR(int(*)(short, char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2, s3);
OUTPUT:
	RETVAL

void *
nci_pftfs( c_func, f0, t1, f2, s3 )
	SV* c_func
	float f0
	char * t1
	float f2
	short s3
PREINIT:
	void *(*func)(float, char *, float, short);
CODE:
	func   = INT2PTR(void *(*)(float, char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2, s3);
OUTPUT:
	RETVAL

void
nci_vftfs( c_func, f0, t1, f2, s3 )
	SV* c_func
	float f0
	char * t1
	float f2
	short s3
PREINIT:
	void(*func)(float, char *, float, short);
CODE:
	func   = INT2PTR(void(*)(float, char *, float, short), SvIV(c_func) );
	(*func)(f0, t1, f2, s3);

double
nci_dftfs( c_func, f0, t1, f2, s3 )
	SV* c_func
	float f0
	char * t1
	float f2
	short s3
PREINIT:
	double(*func)(float, char *, float, short);
CODE:
	func   = INT2PTR(double(*)(float, char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2, s3);
OUTPUT:
	RETVAL

short
nci_sftfs( c_func, f0, t1, f2, s3 )
	SV* c_func
	float f0
	char * t1
	float f2
	short s3
PREINIT:
	short(*func)(float, char *, float, short);
CODE:
	func   = INT2PTR(short(*)(float, char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2, s3);
OUTPUT:
	RETVAL

float
nci_fftfs( c_func, f0, t1, f2, s3 )
	SV* c_func
	float f0
	char * t1
	float f2
	short s3
PREINIT:
	float(*func)(float, char *, float, short);
CODE:
	func   = INT2PTR(float(*)(float, char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2, s3);
OUTPUT:
	RETVAL

char *
nci_tftfs( c_func, f0, t1, f2, s3 )
	SV* c_func
	float f0
	char * t1
	float f2
	short s3
PREINIT:
	char *(*func)(float, char *, float, short);
CODE:
	func   = INT2PTR(char *(*)(float, char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2, s3);
OUTPUT:
	RETVAL

int
nci_iftfs( c_func, f0, t1, f2, s3 )
	SV* c_func
	float f0
	char * t1
	float f2
	short s3
PREINIT:
	int(*func)(float, char *, float, short);
CODE:
	func   = INT2PTR(int(*)(float, char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2, s3);
OUTPUT:
	RETVAL

void *
nci_pttfs( c_func, t0, t1, f2, s3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	short s3
PREINIT:
	void *(*func)(char *, char *, float, short);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2, s3);
OUTPUT:
	RETVAL

void
nci_vttfs( c_func, t0, t1, f2, s3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	short s3
PREINIT:
	void(*func)(char *, char *, float, short);
CODE:
	func   = INT2PTR(void(*)(char *, char *, float, short), SvIV(c_func) );
	(*func)(t0, t1, f2, s3);

double
nci_dttfs( c_func, t0, t1, f2, s3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	short s3
PREINIT:
	double(*func)(char *, char *, float, short);
CODE:
	func   = INT2PTR(double(*)(char *, char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2, s3);
OUTPUT:
	RETVAL

short
nci_sttfs( c_func, t0, t1, f2, s3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	short s3
PREINIT:
	short(*func)(char *, char *, float, short);
CODE:
	func   = INT2PTR(short(*)(char *, char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2, s3);
OUTPUT:
	RETVAL

float
nci_fttfs( c_func, t0, t1, f2, s3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	short s3
PREINIT:
	float(*func)(char *, char *, float, short);
CODE:
	func   = INT2PTR(float(*)(char *, char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2, s3);
OUTPUT:
	RETVAL

char *
nci_tttfs( c_func, t0, t1, f2, s3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	short s3
PREINIT:
	char *(*func)(char *, char *, float, short);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2, s3);
OUTPUT:
	RETVAL

int
nci_ittfs( c_func, t0, t1, f2, s3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	short s3
PREINIT:
	int(*func)(char *, char *, float, short);
CODE:
	func   = INT2PTR(int(*)(char *, char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2, s3);
OUTPUT:
	RETVAL

void *
nci_pitfs( c_func, i0, t1, f2, s3 )
	SV* c_func
	int i0
	char * t1
	float f2
	short s3
PREINIT:
	void *(*func)(int, char *, float, short);
CODE:
	func   = INT2PTR(void *(*)(int, char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2, s3);
OUTPUT:
	RETVAL

void
nci_vitfs( c_func, i0, t1, f2, s3 )
	SV* c_func
	int i0
	char * t1
	float f2
	short s3
PREINIT:
	void(*func)(int, char *, float, short);
CODE:
	func   = INT2PTR(void(*)(int, char *, float, short), SvIV(c_func) );
	(*func)(i0, t1, f2, s3);

double
nci_ditfs( c_func, i0, t1, f2, s3 )
	SV* c_func
	int i0
	char * t1
	float f2
	short s3
PREINIT:
	double(*func)(int, char *, float, short);
CODE:
	func   = INT2PTR(double(*)(int, char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2, s3);
OUTPUT:
	RETVAL

short
nci_sitfs( c_func, i0, t1, f2, s3 )
	SV* c_func
	int i0
	char * t1
	float f2
	short s3
PREINIT:
	short(*func)(int, char *, float, short);
CODE:
	func   = INT2PTR(short(*)(int, char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2, s3);
OUTPUT:
	RETVAL

float
nci_fitfs( c_func, i0, t1, f2, s3 )
	SV* c_func
	int i0
	char * t1
	float f2
	short s3
PREINIT:
	float(*func)(int, char *, float, short);
CODE:
	func   = INT2PTR(float(*)(int, char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2, s3);
OUTPUT:
	RETVAL

char *
nci_titfs( c_func, i0, t1, f2, s3 )
	SV* c_func
	int i0
	char * t1
	float f2
	short s3
PREINIT:
	char *(*func)(int, char *, float, short);
CODE:
	func   = INT2PTR(char *(*)(int, char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2, s3);
OUTPUT:
	RETVAL

int
nci_iitfs( c_func, i0, t1, f2, s3 )
	SV* c_func
	int i0
	char * t1
	float f2
	short s3
PREINIT:
	int(*func)(int, char *, float, short);
CODE:
	func   = INT2PTR(int(*)(int, char *, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2, s3);
OUTPUT:
	RETVAL

void *
nci_ppifs( c_func, p0, i1, f2, s3 )
	SV* c_func
	void * p0
	int i1
	float f2
	short s3
PREINIT:
	void *(*func)(void *, int, float, short);
CODE:
	func   = INT2PTR(void *(*)(void *, int, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2, s3);
OUTPUT:
	RETVAL

void
nci_vpifs( c_func, p0, i1, f2, s3 )
	SV* c_func
	void * p0
	int i1
	float f2
	short s3
PREINIT:
	void(*func)(void *, int, float, short);
CODE:
	func   = INT2PTR(void(*)(void *, int, float, short), SvIV(c_func) );
	(*func)(p0, i1, f2, s3);

double
nci_dpifs( c_func, p0, i1, f2, s3 )
	SV* c_func
	void * p0
	int i1
	float f2
	short s3
PREINIT:
	double(*func)(void *, int, float, short);
CODE:
	func   = INT2PTR(double(*)(void *, int, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2, s3);
OUTPUT:
	RETVAL

short
nci_spifs( c_func, p0, i1, f2, s3 )
	SV* c_func
	void * p0
	int i1
	float f2
	short s3
PREINIT:
	short(*func)(void *, int, float, short);
CODE:
	func   = INT2PTR(short(*)(void *, int, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2, s3);
OUTPUT:
	RETVAL

float
nci_fpifs( c_func, p0, i1, f2, s3 )
	SV* c_func
	void * p0
	int i1
	float f2
	short s3
PREINIT:
	float(*func)(void *, int, float, short);
CODE:
	func   = INT2PTR(float(*)(void *, int, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2, s3);
OUTPUT:
	RETVAL

char *
nci_tpifs( c_func, p0, i1, f2, s3 )
	SV* c_func
	void * p0
	int i1
	float f2
	short s3
PREINIT:
	char *(*func)(void *, int, float, short);
CODE:
	func   = INT2PTR(char *(*)(void *, int, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2, s3);
OUTPUT:
	RETVAL

int
nci_ipifs( c_func, p0, i1, f2, s3 )
	SV* c_func
	void * p0
	int i1
	float f2
	short s3
PREINIT:
	int(*func)(void *, int, float, short);
CODE:
	func   = INT2PTR(int(*)(void *, int, float, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2, s3);
OUTPUT:
	RETVAL

void *
nci_pvifs( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvifs( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvifs( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svifs( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvifs( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvifs( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivifs( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdifs( c_func, d0, i1, f2, s3 )
	SV* c_func
	double d0
	int i1
	float f2
	short s3
PREINIT:
	void *(*func)(double, int, float, short);
CODE:
	func   = INT2PTR(void *(*)(double, int, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2, s3);
OUTPUT:
	RETVAL

void
nci_vdifs( c_func, d0, i1, f2, s3 )
	SV* c_func
	double d0
	int i1
	float f2
	short s3
PREINIT:
	void(*func)(double, int, float, short);
CODE:
	func   = INT2PTR(void(*)(double, int, float, short), SvIV(c_func) );
	(*func)(d0, i1, f2, s3);

double
nci_ddifs( c_func, d0, i1, f2, s3 )
	SV* c_func
	double d0
	int i1
	float f2
	short s3
PREINIT:
	double(*func)(double, int, float, short);
CODE:
	func   = INT2PTR(double(*)(double, int, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2, s3);
OUTPUT:
	RETVAL

short
nci_sdifs( c_func, d0, i1, f2, s3 )
	SV* c_func
	double d0
	int i1
	float f2
	short s3
PREINIT:
	short(*func)(double, int, float, short);
CODE:
	func   = INT2PTR(short(*)(double, int, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2, s3);
OUTPUT:
	RETVAL

float
nci_fdifs( c_func, d0, i1, f2, s3 )
	SV* c_func
	double d0
	int i1
	float f2
	short s3
PREINIT:
	float(*func)(double, int, float, short);
CODE:
	func   = INT2PTR(float(*)(double, int, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2, s3);
OUTPUT:
	RETVAL

char *
nci_tdifs( c_func, d0, i1, f2, s3 )
	SV* c_func
	double d0
	int i1
	float f2
	short s3
PREINIT:
	char *(*func)(double, int, float, short);
CODE:
	func   = INT2PTR(char *(*)(double, int, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2, s3);
OUTPUT:
	RETVAL

int
nci_idifs( c_func, d0, i1, f2, s3 )
	SV* c_func
	double d0
	int i1
	float f2
	short s3
PREINIT:
	int(*func)(double, int, float, short);
CODE:
	func   = INT2PTR(int(*)(double, int, float, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2, s3);
OUTPUT:
	RETVAL

void *
nci_psifs( c_func, s0, i1, f2, s3 )
	SV* c_func
	short s0
	int i1
	float f2
	short s3
PREINIT:
	void *(*func)(short, int, float, short);
CODE:
	func   = INT2PTR(void *(*)(short, int, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2, s3);
OUTPUT:
	RETVAL

void
nci_vsifs( c_func, s0, i1, f2, s3 )
	SV* c_func
	short s0
	int i1
	float f2
	short s3
PREINIT:
	void(*func)(short, int, float, short);
CODE:
	func   = INT2PTR(void(*)(short, int, float, short), SvIV(c_func) );
	(*func)(s0, i1, f2, s3);

double
nci_dsifs( c_func, s0, i1, f2, s3 )
	SV* c_func
	short s0
	int i1
	float f2
	short s3
PREINIT:
	double(*func)(short, int, float, short);
CODE:
	func   = INT2PTR(double(*)(short, int, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2, s3);
OUTPUT:
	RETVAL

short
nci_ssifs( c_func, s0, i1, f2, s3 )
	SV* c_func
	short s0
	int i1
	float f2
	short s3
PREINIT:
	short(*func)(short, int, float, short);
CODE:
	func   = INT2PTR(short(*)(short, int, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2, s3);
OUTPUT:
	RETVAL

float
nci_fsifs( c_func, s0, i1, f2, s3 )
	SV* c_func
	short s0
	int i1
	float f2
	short s3
PREINIT:
	float(*func)(short, int, float, short);
CODE:
	func   = INT2PTR(float(*)(short, int, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2, s3);
OUTPUT:
	RETVAL

char *
nci_tsifs( c_func, s0, i1, f2, s3 )
	SV* c_func
	short s0
	int i1
	float f2
	short s3
PREINIT:
	char *(*func)(short, int, float, short);
CODE:
	func   = INT2PTR(char *(*)(short, int, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2, s3);
OUTPUT:
	RETVAL

int
nci_isifs( c_func, s0, i1, f2, s3 )
	SV* c_func
	short s0
	int i1
	float f2
	short s3
PREINIT:
	int(*func)(short, int, float, short);
CODE:
	func   = INT2PTR(int(*)(short, int, float, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2, s3);
OUTPUT:
	RETVAL

void *
nci_pfifs( c_func, f0, i1, f2, s3 )
	SV* c_func
	float f0
	int i1
	float f2
	short s3
PREINIT:
	void *(*func)(float, int, float, short);
CODE:
	func   = INT2PTR(void *(*)(float, int, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2, s3);
OUTPUT:
	RETVAL

void
nci_vfifs( c_func, f0, i1, f2, s3 )
	SV* c_func
	float f0
	int i1
	float f2
	short s3
PREINIT:
	void(*func)(float, int, float, short);
CODE:
	func   = INT2PTR(void(*)(float, int, float, short), SvIV(c_func) );
	(*func)(f0, i1, f2, s3);

double
nci_dfifs( c_func, f0, i1, f2, s3 )
	SV* c_func
	float f0
	int i1
	float f2
	short s3
PREINIT:
	double(*func)(float, int, float, short);
CODE:
	func   = INT2PTR(double(*)(float, int, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2, s3);
OUTPUT:
	RETVAL

short
nci_sfifs( c_func, f0, i1, f2, s3 )
	SV* c_func
	float f0
	int i1
	float f2
	short s3
PREINIT:
	short(*func)(float, int, float, short);
CODE:
	func   = INT2PTR(short(*)(float, int, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2, s3);
OUTPUT:
	RETVAL

float
nci_ffifs( c_func, f0, i1, f2, s3 )
	SV* c_func
	float f0
	int i1
	float f2
	short s3
PREINIT:
	float(*func)(float, int, float, short);
CODE:
	func   = INT2PTR(float(*)(float, int, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2, s3);
OUTPUT:
	RETVAL

char *
nci_tfifs( c_func, f0, i1, f2, s3 )
	SV* c_func
	float f0
	int i1
	float f2
	short s3
PREINIT:
	char *(*func)(float, int, float, short);
CODE:
	func   = INT2PTR(char *(*)(float, int, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2, s3);
OUTPUT:
	RETVAL

int
nci_ififs( c_func, f0, i1, f2, s3 )
	SV* c_func
	float f0
	int i1
	float f2
	short s3
PREINIT:
	int(*func)(float, int, float, short);
CODE:
	func   = INT2PTR(int(*)(float, int, float, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2, s3);
OUTPUT:
	RETVAL

void *
nci_ptifs( c_func, t0, i1, f2, s3 )
	SV* c_func
	char * t0
	int i1
	float f2
	short s3
PREINIT:
	void *(*func)(char *, int, float, short);
CODE:
	func   = INT2PTR(void *(*)(char *, int, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2, s3);
OUTPUT:
	RETVAL

void
nci_vtifs( c_func, t0, i1, f2, s3 )
	SV* c_func
	char * t0
	int i1
	float f2
	short s3
PREINIT:
	void(*func)(char *, int, float, short);
CODE:
	func   = INT2PTR(void(*)(char *, int, float, short), SvIV(c_func) );
	(*func)(t0, i1, f2, s3);

double
nci_dtifs( c_func, t0, i1, f2, s3 )
	SV* c_func
	char * t0
	int i1
	float f2
	short s3
PREINIT:
	double(*func)(char *, int, float, short);
CODE:
	func   = INT2PTR(double(*)(char *, int, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2, s3);
OUTPUT:
	RETVAL

short
nci_stifs( c_func, t0, i1, f2, s3 )
	SV* c_func
	char * t0
	int i1
	float f2
	short s3
PREINIT:
	short(*func)(char *, int, float, short);
CODE:
	func   = INT2PTR(short(*)(char *, int, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2, s3);
OUTPUT:
	RETVAL

float
nci_ftifs( c_func, t0, i1, f2, s3 )
	SV* c_func
	char * t0
	int i1
	float f2
	short s3
PREINIT:
	float(*func)(char *, int, float, short);
CODE:
	func   = INT2PTR(float(*)(char *, int, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2, s3);
OUTPUT:
	RETVAL

char *
nci_ttifs( c_func, t0, i1, f2, s3 )
	SV* c_func
	char * t0
	int i1
	float f2
	short s3
PREINIT:
	char *(*func)(char *, int, float, short);
CODE:
	func   = INT2PTR(char *(*)(char *, int, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2, s3);
OUTPUT:
	RETVAL

int
nci_itifs( c_func, t0, i1, f2, s3 )
	SV* c_func
	char * t0
	int i1
	float f2
	short s3
PREINIT:
	int(*func)(char *, int, float, short);
CODE:
	func   = INT2PTR(int(*)(char *, int, float, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2, s3);
OUTPUT:
	RETVAL

void *
nci_piifs( c_func, i0, i1, f2, s3 )
	SV* c_func
	int i0
	int i1
	float f2
	short s3
PREINIT:
	void *(*func)(int, int, float, short);
CODE:
	func   = INT2PTR(void *(*)(int, int, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2, s3);
OUTPUT:
	RETVAL

void
nci_viifs( c_func, i0, i1, f2, s3 )
	SV* c_func
	int i0
	int i1
	float f2
	short s3
PREINIT:
	void(*func)(int, int, float, short);
CODE:
	func   = INT2PTR(void(*)(int, int, float, short), SvIV(c_func) );
	(*func)(i0, i1, f2, s3);

double
nci_diifs( c_func, i0, i1, f2, s3 )
	SV* c_func
	int i0
	int i1
	float f2
	short s3
PREINIT:
	double(*func)(int, int, float, short);
CODE:
	func   = INT2PTR(double(*)(int, int, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2, s3);
OUTPUT:
	RETVAL

short
nci_siifs( c_func, i0, i1, f2, s3 )
	SV* c_func
	int i0
	int i1
	float f2
	short s3
PREINIT:
	short(*func)(int, int, float, short);
CODE:
	func   = INT2PTR(short(*)(int, int, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2, s3);
OUTPUT:
	RETVAL

float
nci_fiifs( c_func, i0, i1, f2, s3 )
	SV* c_func
	int i0
	int i1
	float f2
	short s3
PREINIT:
	float(*func)(int, int, float, short);
CODE:
	func   = INT2PTR(float(*)(int, int, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2, s3);
OUTPUT:
	RETVAL

char *
nci_tiifs( c_func, i0, i1, f2, s3 )
	SV* c_func
	int i0
	int i1
	float f2
	short s3
PREINIT:
	char *(*func)(int, int, float, short);
CODE:
	func   = INT2PTR(char *(*)(int, int, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2, s3);
OUTPUT:
	RETVAL

int
nci_iiifs( c_func, i0, i1, f2, s3 )
	SV* c_func
	int i0
	int i1
	float f2
	short s3
PREINIT:
	int(*func)(int, int, float, short);
CODE:
	func   = INT2PTR(int(*)(int, int, float, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2, s3);
OUTPUT:
	RETVAL

void *
nci_pppts( c_func, p0, p1, t2, s3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	short s3
PREINIT:
	void *(*func)(void *, void *, char *, short);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2, s3);
OUTPUT:
	RETVAL

void
nci_vppts( c_func, p0, p1, t2, s3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	short s3
PREINIT:
	void(*func)(void *, void *, char *, short);
CODE:
	func   = INT2PTR(void(*)(void *, void *, char *, short), SvIV(c_func) );
	(*func)(p0, p1, t2, s3);

double
nci_dppts( c_func, p0, p1, t2, s3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	short s3
PREINIT:
	double(*func)(void *, void *, char *, short);
CODE:
	func   = INT2PTR(double(*)(void *, void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2, s3);
OUTPUT:
	RETVAL

short
nci_sppts( c_func, p0, p1, t2, s3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	short s3
PREINIT:
	short(*func)(void *, void *, char *, short);
CODE:
	func   = INT2PTR(short(*)(void *, void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2, s3);
OUTPUT:
	RETVAL

float
nci_fppts( c_func, p0, p1, t2, s3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	short s3
PREINIT:
	float(*func)(void *, void *, char *, short);
CODE:
	func   = INT2PTR(float(*)(void *, void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2, s3);
OUTPUT:
	RETVAL

char *
nci_tppts( c_func, p0, p1, t2, s3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	short s3
PREINIT:
	char *(*func)(void *, void *, char *, short);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2, s3);
OUTPUT:
	RETVAL

int
nci_ippts( c_func, p0, p1, t2, s3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	short s3
PREINIT:
	int(*func)(void *, void *, char *, short);
CODE:
	func   = INT2PTR(int(*)(void *, void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2, s3);
OUTPUT:
	RETVAL

void *
nci_pvpts( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvpts( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvpts( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svpts( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvpts( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvpts( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivpts( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdpts( c_func, d0, p1, t2, s3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	short s3
PREINIT:
	void *(*func)(double, void *, char *, short);
CODE:
	func   = INT2PTR(void *(*)(double, void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2, s3);
OUTPUT:
	RETVAL

void
nci_vdpts( c_func, d0, p1, t2, s3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	short s3
PREINIT:
	void(*func)(double, void *, char *, short);
CODE:
	func   = INT2PTR(void(*)(double, void *, char *, short), SvIV(c_func) );
	(*func)(d0, p1, t2, s3);

double
nci_ddpts( c_func, d0, p1, t2, s3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	short s3
PREINIT:
	double(*func)(double, void *, char *, short);
CODE:
	func   = INT2PTR(double(*)(double, void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2, s3);
OUTPUT:
	RETVAL

short
nci_sdpts( c_func, d0, p1, t2, s3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	short s3
PREINIT:
	short(*func)(double, void *, char *, short);
CODE:
	func   = INT2PTR(short(*)(double, void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2, s3);
OUTPUT:
	RETVAL

float
nci_fdpts( c_func, d0, p1, t2, s3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	short s3
PREINIT:
	float(*func)(double, void *, char *, short);
CODE:
	func   = INT2PTR(float(*)(double, void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2, s3);
OUTPUT:
	RETVAL

char *
nci_tdpts( c_func, d0, p1, t2, s3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	short s3
PREINIT:
	char *(*func)(double, void *, char *, short);
CODE:
	func   = INT2PTR(char *(*)(double, void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2, s3);
OUTPUT:
	RETVAL

int
nci_idpts( c_func, d0, p1, t2, s3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	short s3
PREINIT:
	int(*func)(double, void *, char *, short);
CODE:
	func   = INT2PTR(int(*)(double, void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2, s3);
OUTPUT:
	RETVAL

void *
nci_pspts( c_func, s0, p1, t2, s3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	short s3
PREINIT:
	void *(*func)(short, void *, char *, short);
CODE:
	func   = INT2PTR(void *(*)(short, void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2, s3);
OUTPUT:
	RETVAL

void
nci_vspts( c_func, s0, p1, t2, s3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	short s3
PREINIT:
	void(*func)(short, void *, char *, short);
CODE:
	func   = INT2PTR(void(*)(short, void *, char *, short), SvIV(c_func) );
	(*func)(s0, p1, t2, s3);

double
nci_dspts( c_func, s0, p1, t2, s3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	short s3
PREINIT:
	double(*func)(short, void *, char *, short);
CODE:
	func   = INT2PTR(double(*)(short, void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2, s3);
OUTPUT:
	RETVAL

short
nci_sspts( c_func, s0, p1, t2, s3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	short s3
PREINIT:
	short(*func)(short, void *, char *, short);
CODE:
	func   = INT2PTR(short(*)(short, void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2, s3);
OUTPUT:
	RETVAL

float
nci_fspts( c_func, s0, p1, t2, s3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	short s3
PREINIT:
	float(*func)(short, void *, char *, short);
CODE:
	func   = INT2PTR(float(*)(short, void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2, s3);
OUTPUT:
	RETVAL

char *
nci_tspts( c_func, s0, p1, t2, s3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	short s3
PREINIT:
	char *(*func)(short, void *, char *, short);
CODE:
	func   = INT2PTR(char *(*)(short, void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2, s3);
OUTPUT:
	RETVAL

int
nci_ispts( c_func, s0, p1, t2, s3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	short s3
PREINIT:
	int(*func)(short, void *, char *, short);
CODE:
	func   = INT2PTR(int(*)(short, void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2, s3);
OUTPUT:
	RETVAL

void *
nci_pfpts( c_func, f0, p1, t2, s3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	short s3
PREINIT:
	void *(*func)(float, void *, char *, short);
CODE:
	func   = INT2PTR(void *(*)(float, void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2, s3);
OUTPUT:
	RETVAL

void
nci_vfpts( c_func, f0, p1, t2, s3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	short s3
PREINIT:
	void(*func)(float, void *, char *, short);
CODE:
	func   = INT2PTR(void(*)(float, void *, char *, short), SvIV(c_func) );
	(*func)(f0, p1, t2, s3);

double
nci_dfpts( c_func, f0, p1, t2, s3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	short s3
PREINIT:
	double(*func)(float, void *, char *, short);
CODE:
	func   = INT2PTR(double(*)(float, void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2, s3);
OUTPUT:
	RETVAL

short
nci_sfpts( c_func, f0, p1, t2, s3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	short s3
PREINIT:
	short(*func)(float, void *, char *, short);
CODE:
	func   = INT2PTR(short(*)(float, void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2, s3);
OUTPUT:
	RETVAL

float
nci_ffpts( c_func, f0, p1, t2, s3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	short s3
PREINIT:
	float(*func)(float, void *, char *, short);
CODE:
	func   = INT2PTR(float(*)(float, void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2, s3);
OUTPUT:
	RETVAL

char *
nci_tfpts( c_func, f0, p1, t2, s3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	short s3
PREINIT:
	char *(*func)(float, void *, char *, short);
CODE:
	func   = INT2PTR(char *(*)(float, void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2, s3);
OUTPUT:
	RETVAL

int
nci_ifpts( c_func, f0, p1, t2, s3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	short s3
PREINIT:
	int(*func)(float, void *, char *, short);
CODE:
	func   = INT2PTR(int(*)(float, void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2, s3);
OUTPUT:
	RETVAL

void *
nci_ptpts( c_func, t0, p1, t2, s3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	short s3
PREINIT:
	void *(*func)(char *, void *, char *, short);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2, s3);
OUTPUT:
	RETVAL

void
nci_vtpts( c_func, t0, p1, t2, s3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	short s3
PREINIT:
	void(*func)(char *, void *, char *, short);
CODE:
	func   = INT2PTR(void(*)(char *, void *, char *, short), SvIV(c_func) );
	(*func)(t0, p1, t2, s3);

double
nci_dtpts( c_func, t0, p1, t2, s3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	short s3
PREINIT:
	double(*func)(char *, void *, char *, short);
CODE:
	func   = INT2PTR(double(*)(char *, void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2, s3);
OUTPUT:
	RETVAL

short
nci_stpts( c_func, t0, p1, t2, s3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	short s3
PREINIT:
	short(*func)(char *, void *, char *, short);
CODE:
	func   = INT2PTR(short(*)(char *, void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2, s3);
OUTPUT:
	RETVAL

float
nci_ftpts( c_func, t0, p1, t2, s3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	short s3
PREINIT:
	float(*func)(char *, void *, char *, short);
CODE:
	func   = INT2PTR(float(*)(char *, void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2, s3);
OUTPUT:
	RETVAL

char *
nci_ttpts( c_func, t0, p1, t2, s3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	short s3
PREINIT:
	char *(*func)(char *, void *, char *, short);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2, s3);
OUTPUT:
	RETVAL

int
nci_itpts( c_func, t0, p1, t2, s3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	short s3
PREINIT:
	int(*func)(char *, void *, char *, short);
CODE:
	func   = INT2PTR(int(*)(char *, void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2, s3);
OUTPUT:
	RETVAL

void *
nci_pipts( c_func, i0, p1, t2, s3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	short s3
PREINIT:
	void *(*func)(int, void *, char *, short);
CODE:
	func   = INT2PTR(void *(*)(int, void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2, s3);
OUTPUT:
	RETVAL

void
nci_vipts( c_func, i0, p1, t2, s3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	short s3
PREINIT:
	void(*func)(int, void *, char *, short);
CODE:
	func   = INT2PTR(void(*)(int, void *, char *, short), SvIV(c_func) );
	(*func)(i0, p1, t2, s3);

double
nci_dipts( c_func, i0, p1, t2, s3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	short s3
PREINIT:
	double(*func)(int, void *, char *, short);
CODE:
	func   = INT2PTR(double(*)(int, void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2, s3);
OUTPUT:
	RETVAL

short
nci_sipts( c_func, i0, p1, t2, s3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	short s3
PREINIT:
	short(*func)(int, void *, char *, short);
CODE:
	func   = INT2PTR(short(*)(int, void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2, s3);
OUTPUT:
	RETVAL

float
nci_fipts( c_func, i0, p1, t2, s3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	short s3
PREINIT:
	float(*func)(int, void *, char *, short);
CODE:
	func   = INT2PTR(float(*)(int, void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2, s3);
OUTPUT:
	RETVAL

char *
nci_tipts( c_func, i0, p1, t2, s3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	short s3
PREINIT:
	char *(*func)(int, void *, char *, short);
CODE:
	func   = INT2PTR(char *(*)(int, void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2, s3);
OUTPUT:
	RETVAL

int
nci_iipts( c_func, i0, p1, t2, s3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	short s3
PREINIT:
	int(*func)(int, void *, char *, short);
CODE:
	func   = INT2PTR(int(*)(int, void *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2, s3);
OUTPUT:
	RETVAL

void *
nci_ppdts( c_func, p0, d1, t2, s3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	short s3
PREINIT:
	void *(*func)(void *, double, char *, short);
CODE:
	func   = INT2PTR(void *(*)(void *, double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2, s3);
OUTPUT:
	RETVAL

void
nci_vpdts( c_func, p0, d1, t2, s3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	short s3
PREINIT:
	void(*func)(void *, double, char *, short);
CODE:
	func   = INT2PTR(void(*)(void *, double, char *, short), SvIV(c_func) );
	(*func)(p0, d1, t2, s3);

double
nci_dpdts( c_func, p0, d1, t2, s3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	short s3
PREINIT:
	double(*func)(void *, double, char *, short);
CODE:
	func   = INT2PTR(double(*)(void *, double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2, s3);
OUTPUT:
	RETVAL

short
nci_spdts( c_func, p0, d1, t2, s3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	short s3
PREINIT:
	short(*func)(void *, double, char *, short);
CODE:
	func   = INT2PTR(short(*)(void *, double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2, s3);
OUTPUT:
	RETVAL

float
nci_fpdts( c_func, p0, d1, t2, s3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	short s3
PREINIT:
	float(*func)(void *, double, char *, short);
CODE:
	func   = INT2PTR(float(*)(void *, double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2, s3);
OUTPUT:
	RETVAL

char *
nci_tpdts( c_func, p0, d1, t2, s3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	short s3
PREINIT:
	char *(*func)(void *, double, char *, short);
CODE:
	func   = INT2PTR(char *(*)(void *, double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2, s3);
OUTPUT:
	RETVAL

int
nci_ipdts( c_func, p0, d1, t2, s3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	short s3
PREINIT:
	int(*func)(void *, double, char *, short);
CODE:
	func   = INT2PTR(int(*)(void *, double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2, s3);
OUTPUT:
	RETVAL

void *
nci_pvdts( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvdts( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvdts( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svdts( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvdts( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvdts( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivdts( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pddts( c_func, d0, d1, t2, s3 )
	SV* c_func
	double d0
	double d1
	char * t2
	short s3
PREINIT:
	void *(*func)(double, double, char *, short);
CODE:
	func   = INT2PTR(void *(*)(double, double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2, s3);
OUTPUT:
	RETVAL

void
nci_vddts( c_func, d0, d1, t2, s3 )
	SV* c_func
	double d0
	double d1
	char * t2
	short s3
PREINIT:
	void(*func)(double, double, char *, short);
CODE:
	func   = INT2PTR(void(*)(double, double, char *, short), SvIV(c_func) );
	(*func)(d0, d1, t2, s3);

double
nci_dddts( c_func, d0, d1, t2, s3 )
	SV* c_func
	double d0
	double d1
	char * t2
	short s3
PREINIT:
	double(*func)(double, double, char *, short);
CODE:
	func   = INT2PTR(double(*)(double, double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2, s3);
OUTPUT:
	RETVAL

short
nci_sddts( c_func, d0, d1, t2, s3 )
	SV* c_func
	double d0
	double d1
	char * t2
	short s3
PREINIT:
	short(*func)(double, double, char *, short);
CODE:
	func   = INT2PTR(short(*)(double, double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2, s3);
OUTPUT:
	RETVAL

float
nci_fddts( c_func, d0, d1, t2, s3 )
	SV* c_func
	double d0
	double d1
	char * t2
	short s3
PREINIT:
	float(*func)(double, double, char *, short);
CODE:
	func   = INT2PTR(float(*)(double, double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2, s3);
OUTPUT:
	RETVAL

char *
nci_tddts( c_func, d0, d1, t2, s3 )
	SV* c_func
	double d0
	double d1
	char * t2
	short s3
PREINIT:
	char *(*func)(double, double, char *, short);
CODE:
	func   = INT2PTR(char *(*)(double, double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2, s3);
OUTPUT:
	RETVAL

int
nci_iddts( c_func, d0, d1, t2, s3 )
	SV* c_func
	double d0
	double d1
	char * t2
	short s3
PREINIT:
	int(*func)(double, double, char *, short);
CODE:
	func   = INT2PTR(int(*)(double, double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2, s3);
OUTPUT:
	RETVAL

void *
nci_psdts( c_func, s0, d1, t2, s3 )
	SV* c_func
	short s0
	double d1
	char * t2
	short s3
PREINIT:
	void *(*func)(short, double, char *, short);
CODE:
	func   = INT2PTR(void *(*)(short, double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2, s3);
OUTPUT:
	RETVAL

void
nci_vsdts( c_func, s0, d1, t2, s3 )
	SV* c_func
	short s0
	double d1
	char * t2
	short s3
PREINIT:
	void(*func)(short, double, char *, short);
CODE:
	func   = INT2PTR(void(*)(short, double, char *, short), SvIV(c_func) );
	(*func)(s0, d1, t2, s3);

double
nci_dsdts( c_func, s0, d1, t2, s3 )
	SV* c_func
	short s0
	double d1
	char * t2
	short s3
PREINIT:
	double(*func)(short, double, char *, short);
CODE:
	func   = INT2PTR(double(*)(short, double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2, s3);
OUTPUT:
	RETVAL

short
nci_ssdts( c_func, s0, d1, t2, s3 )
	SV* c_func
	short s0
	double d1
	char * t2
	short s3
PREINIT:
	short(*func)(short, double, char *, short);
CODE:
	func   = INT2PTR(short(*)(short, double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2, s3);
OUTPUT:
	RETVAL

float
nci_fsdts( c_func, s0, d1, t2, s3 )
	SV* c_func
	short s0
	double d1
	char * t2
	short s3
PREINIT:
	float(*func)(short, double, char *, short);
CODE:
	func   = INT2PTR(float(*)(short, double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2, s3);
OUTPUT:
	RETVAL

char *
nci_tsdts( c_func, s0, d1, t2, s3 )
	SV* c_func
	short s0
	double d1
	char * t2
	short s3
PREINIT:
	char *(*func)(short, double, char *, short);
CODE:
	func   = INT2PTR(char *(*)(short, double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2, s3);
OUTPUT:
	RETVAL

int
nci_isdts( c_func, s0, d1, t2, s3 )
	SV* c_func
	short s0
	double d1
	char * t2
	short s3
PREINIT:
	int(*func)(short, double, char *, short);
CODE:
	func   = INT2PTR(int(*)(short, double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2, s3);
OUTPUT:
	RETVAL

void *
nci_pfdts( c_func, f0, d1, t2, s3 )
	SV* c_func
	float f0
	double d1
	char * t2
	short s3
PREINIT:
	void *(*func)(float, double, char *, short);
CODE:
	func   = INT2PTR(void *(*)(float, double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2, s3);
OUTPUT:
	RETVAL

void
nci_vfdts( c_func, f0, d1, t2, s3 )
	SV* c_func
	float f0
	double d1
	char * t2
	short s3
PREINIT:
	void(*func)(float, double, char *, short);
CODE:
	func   = INT2PTR(void(*)(float, double, char *, short), SvIV(c_func) );
	(*func)(f0, d1, t2, s3);

double
nci_dfdts( c_func, f0, d1, t2, s3 )
	SV* c_func
	float f0
	double d1
	char * t2
	short s3
PREINIT:
	double(*func)(float, double, char *, short);
CODE:
	func   = INT2PTR(double(*)(float, double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2, s3);
OUTPUT:
	RETVAL

short
nci_sfdts( c_func, f0, d1, t2, s3 )
	SV* c_func
	float f0
	double d1
	char * t2
	short s3
PREINIT:
	short(*func)(float, double, char *, short);
CODE:
	func   = INT2PTR(short(*)(float, double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2, s3);
OUTPUT:
	RETVAL

float
nci_ffdts( c_func, f0, d1, t2, s3 )
	SV* c_func
	float f0
	double d1
	char * t2
	short s3
PREINIT:
	float(*func)(float, double, char *, short);
CODE:
	func   = INT2PTR(float(*)(float, double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2, s3);
OUTPUT:
	RETVAL

char *
nci_tfdts( c_func, f0, d1, t2, s3 )
	SV* c_func
	float f0
	double d1
	char * t2
	short s3
PREINIT:
	char *(*func)(float, double, char *, short);
CODE:
	func   = INT2PTR(char *(*)(float, double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2, s3);
OUTPUT:
	RETVAL

int
nci_ifdts( c_func, f0, d1, t2, s3 )
	SV* c_func
	float f0
	double d1
	char * t2
	short s3
PREINIT:
	int(*func)(float, double, char *, short);
CODE:
	func   = INT2PTR(int(*)(float, double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2, s3);
OUTPUT:
	RETVAL

void *
nci_ptdts( c_func, t0, d1, t2, s3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	short s3
PREINIT:
	void *(*func)(char *, double, char *, short);
CODE:
	func   = INT2PTR(void *(*)(char *, double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2, s3);
OUTPUT:
	RETVAL

void
nci_vtdts( c_func, t0, d1, t2, s3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	short s3
PREINIT:
	void(*func)(char *, double, char *, short);
CODE:
	func   = INT2PTR(void(*)(char *, double, char *, short), SvIV(c_func) );
	(*func)(t0, d1, t2, s3);

double
nci_dtdts( c_func, t0, d1, t2, s3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	short s3
PREINIT:
	double(*func)(char *, double, char *, short);
CODE:
	func   = INT2PTR(double(*)(char *, double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2, s3);
OUTPUT:
	RETVAL

short
nci_stdts( c_func, t0, d1, t2, s3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	short s3
PREINIT:
	short(*func)(char *, double, char *, short);
CODE:
	func   = INT2PTR(short(*)(char *, double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2, s3);
OUTPUT:
	RETVAL

float
nci_ftdts( c_func, t0, d1, t2, s3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	short s3
PREINIT:
	float(*func)(char *, double, char *, short);
CODE:
	func   = INT2PTR(float(*)(char *, double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2, s3);
OUTPUT:
	RETVAL

char *
nci_ttdts( c_func, t0, d1, t2, s3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	short s3
PREINIT:
	char *(*func)(char *, double, char *, short);
CODE:
	func   = INT2PTR(char *(*)(char *, double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2, s3);
OUTPUT:
	RETVAL

int
nci_itdts( c_func, t0, d1, t2, s3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	short s3
PREINIT:
	int(*func)(char *, double, char *, short);
CODE:
	func   = INT2PTR(int(*)(char *, double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2, s3);
OUTPUT:
	RETVAL

void *
nci_pidts( c_func, i0, d1, t2, s3 )
	SV* c_func
	int i0
	double d1
	char * t2
	short s3
PREINIT:
	void *(*func)(int, double, char *, short);
CODE:
	func   = INT2PTR(void *(*)(int, double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2, s3);
OUTPUT:
	RETVAL

void
nci_vidts( c_func, i0, d1, t2, s3 )
	SV* c_func
	int i0
	double d1
	char * t2
	short s3
PREINIT:
	void(*func)(int, double, char *, short);
CODE:
	func   = INT2PTR(void(*)(int, double, char *, short), SvIV(c_func) );
	(*func)(i0, d1, t2, s3);

double
nci_didts( c_func, i0, d1, t2, s3 )
	SV* c_func
	int i0
	double d1
	char * t2
	short s3
PREINIT:
	double(*func)(int, double, char *, short);
CODE:
	func   = INT2PTR(double(*)(int, double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2, s3);
OUTPUT:
	RETVAL

short
nci_sidts( c_func, i0, d1, t2, s3 )
	SV* c_func
	int i0
	double d1
	char * t2
	short s3
PREINIT:
	short(*func)(int, double, char *, short);
CODE:
	func   = INT2PTR(short(*)(int, double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2, s3);
OUTPUT:
	RETVAL

float
nci_fidts( c_func, i0, d1, t2, s3 )
	SV* c_func
	int i0
	double d1
	char * t2
	short s3
PREINIT:
	float(*func)(int, double, char *, short);
CODE:
	func   = INT2PTR(float(*)(int, double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2, s3);
OUTPUT:
	RETVAL

char *
nci_tidts( c_func, i0, d1, t2, s3 )
	SV* c_func
	int i0
	double d1
	char * t2
	short s3
PREINIT:
	char *(*func)(int, double, char *, short);
CODE:
	func   = INT2PTR(char *(*)(int, double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2, s3);
OUTPUT:
	RETVAL

int
nci_iidts( c_func, i0, d1, t2, s3 )
	SV* c_func
	int i0
	double d1
	char * t2
	short s3
PREINIT:
	int(*func)(int, double, char *, short);
CODE:
	func   = INT2PTR(int(*)(int, double, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2, s3);
OUTPUT:
	RETVAL

void *
nci_ppsts( c_func, p0, s1, t2, s3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	short s3
PREINIT:
	void *(*func)(void *, short, char *, short);
CODE:
	func   = INT2PTR(void *(*)(void *, short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2, s3);
OUTPUT:
	RETVAL

void
nci_vpsts( c_func, p0, s1, t2, s3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	short s3
PREINIT:
	void(*func)(void *, short, char *, short);
CODE:
	func   = INT2PTR(void(*)(void *, short, char *, short), SvIV(c_func) );
	(*func)(p0, s1, t2, s3);

double
nci_dpsts( c_func, p0, s1, t2, s3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	short s3
PREINIT:
	double(*func)(void *, short, char *, short);
CODE:
	func   = INT2PTR(double(*)(void *, short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2, s3);
OUTPUT:
	RETVAL

short
nci_spsts( c_func, p0, s1, t2, s3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	short s3
PREINIT:
	short(*func)(void *, short, char *, short);
CODE:
	func   = INT2PTR(short(*)(void *, short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2, s3);
OUTPUT:
	RETVAL

float
nci_fpsts( c_func, p0, s1, t2, s3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	short s3
PREINIT:
	float(*func)(void *, short, char *, short);
CODE:
	func   = INT2PTR(float(*)(void *, short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2, s3);
OUTPUT:
	RETVAL

char *
nci_tpsts( c_func, p0, s1, t2, s3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	short s3
PREINIT:
	char *(*func)(void *, short, char *, short);
CODE:
	func   = INT2PTR(char *(*)(void *, short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2, s3);
OUTPUT:
	RETVAL

int
nci_ipsts( c_func, p0, s1, t2, s3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	short s3
PREINIT:
	int(*func)(void *, short, char *, short);
CODE:
	func   = INT2PTR(int(*)(void *, short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2, s3);
OUTPUT:
	RETVAL

void *
nci_pvsts( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvsts( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvsts( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svsts( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvsts( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvsts( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivsts( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdsts( c_func, d0, s1, t2, s3 )
	SV* c_func
	double d0
	short s1
	char * t2
	short s3
PREINIT:
	void *(*func)(double, short, char *, short);
CODE:
	func   = INT2PTR(void *(*)(double, short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2, s3);
OUTPUT:
	RETVAL

void
nci_vdsts( c_func, d0, s1, t2, s3 )
	SV* c_func
	double d0
	short s1
	char * t2
	short s3
PREINIT:
	void(*func)(double, short, char *, short);
CODE:
	func   = INT2PTR(void(*)(double, short, char *, short), SvIV(c_func) );
	(*func)(d0, s1, t2, s3);

double
nci_ddsts( c_func, d0, s1, t2, s3 )
	SV* c_func
	double d0
	short s1
	char * t2
	short s3
PREINIT:
	double(*func)(double, short, char *, short);
CODE:
	func   = INT2PTR(double(*)(double, short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2, s3);
OUTPUT:
	RETVAL

short
nci_sdsts( c_func, d0, s1, t2, s3 )
	SV* c_func
	double d0
	short s1
	char * t2
	short s3
PREINIT:
	short(*func)(double, short, char *, short);
CODE:
	func   = INT2PTR(short(*)(double, short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2, s3);
OUTPUT:
	RETVAL

float
nci_fdsts( c_func, d0, s1, t2, s3 )
	SV* c_func
	double d0
	short s1
	char * t2
	short s3
PREINIT:
	float(*func)(double, short, char *, short);
CODE:
	func   = INT2PTR(float(*)(double, short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2, s3);
OUTPUT:
	RETVAL

char *
nci_tdsts( c_func, d0, s1, t2, s3 )
	SV* c_func
	double d0
	short s1
	char * t2
	short s3
PREINIT:
	char *(*func)(double, short, char *, short);
CODE:
	func   = INT2PTR(char *(*)(double, short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2, s3);
OUTPUT:
	RETVAL

int
nci_idsts( c_func, d0, s1, t2, s3 )
	SV* c_func
	double d0
	short s1
	char * t2
	short s3
PREINIT:
	int(*func)(double, short, char *, short);
CODE:
	func   = INT2PTR(int(*)(double, short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2, s3);
OUTPUT:
	RETVAL

void *
nci_pssts( c_func, s0, s1, t2, s3 )
	SV* c_func
	short s0
	short s1
	char * t2
	short s3
PREINIT:
	void *(*func)(short, short, char *, short);
CODE:
	func   = INT2PTR(void *(*)(short, short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2, s3);
OUTPUT:
	RETVAL

void
nci_vssts( c_func, s0, s1, t2, s3 )
	SV* c_func
	short s0
	short s1
	char * t2
	short s3
PREINIT:
	void(*func)(short, short, char *, short);
CODE:
	func   = INT2PTR(void(*)(short, short, char *, short), SvIV(c_func) );
	(*func)(s0, s1, t2, s3);

double
nci_dssts( c_func, s0, s1, t2, s3 )
	SV* c_func
	short s0
	short s1
	char * t2
	short s3
PREINIT:
	double(*func)(short, short, char *, short);
CODE:
	func   = INT2PTR(double(*)(short, short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2, s3);
OUTPUT:
	RETVAL

short
nci_sssts( c_func, s0, s1, t2, s3 )
	SV* c_func
	short s0
	short s1
	char * t2
	short s3
PREINIT:
	short(*func)(short, short, char *, short);
CODE:
	func   = INT2PTR(short(*)(short, short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2, s3);
OUTPUT:
	RETVAL

float
nci_fssts( c_func, s0, s1, t2, s3 )
	SV* c_func
	short s0
	short s1
	char * t2
	short s3
PREINIT:
	float(*func)(short, short, char *, short);
CODE:
	func   = INT2PTR(float(*)(short, short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2, s3);
OUTPUT:
	RETVAL

char *
nci_tssts( c_func, s0, s1, t2, s3 )
	SV* c_func
	short s0
	short s1
	char * t2
	short s3
PREINIT:
	char *(*func)(short, short, char *, short);
CODE:
	func   = INT2PTR(char *(*)(short, short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2, s3);
OUTPUT:
	RETVAL

int
nci_issts( c_func, s0, s1, t2, s3 )
	SV* c_func
	short s0
	short s1
	char * t2
	short s3
PREINIT:
	int(*func)(short, short, char *, short);
CODE:
	func   = INT2PTR(int(*)(short, short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2, s3);
OUTPUT:
	RETVAL

void *
nci_pfsts( c_func, f0, s1, t2, s3 )
	SV* c_func
	float f0
	short s1
	char * t2
	short s3
PREINIT:
	void *(*func)(float, short, char *, short);
CODE:
	func   = INT2PTR(void *(*)(float, short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2, s3);
OUTPUT:
	RETVAL

void
nci_vfsts( c_func, f0, s1, t2, s3 )
	SV* c_func
	float f0
	short s1
	char * t2
	short s3
PREINIT:
	void(*func)(float, short, char *, short);
CODE:
	func   = INT2PTR(void(*)(float, short, char *, short), SvIV(c_func) );
	(*func)(f0, s1, t2, s3);

double
nci_dfsts( c_func, f0, s1, t2, s3 )
	SV* c_func
	float f0
	short s1
	char * t2
	short s3
PREINIT:
	double(*func)(float, short, char *, short);
CODE:
	func   = INT2PTR(double(*)(float, short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2, s3);
OUTPUT:
	RETVAL

short
nci_sfsts( c_func, f0, s1, t2, s3 )
	SV* c_func
	float f0
	short s1
	char * t2
	short s3
PREINIT:
	short(*func)(float, short, char *, short);
CODE:
	func   = INT2PTR(short(*)(float, short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2, s3);
OUTPUT:
	RETVAL

float
nci_ffsts( c_func, f0, s1, t2, s3 )
	SV* c_func
	float f0
	short s1
	char * t2
	short s3
PREINIT:
	float(*func)(float, short, char *, short);
CODE:
	func   = INT2PTR(float(*)(float, short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2, s3);
OUTPUT:
	RETVAL

char *
nci_tfsts( c_func, f0, s1, t2, s3 )
	SV* c_func
	float f0
	short s1
	char * t2
	short s3
PREINIT:
	char *(*func)(float, short, char *, short);
CODE:
	func   = INT2PTR(char *(*)(float, short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2, s3);
OUTPUT:
	RETVAL

int
nci_ifsts( c_func, f0, s1, t2, s3 )
	SV* c_func
	float f0
	short s1
	char * t2
	short s3
PREINIT:
	int(*func)(float, short, char *, short);
CODE:
	func   = INT2PTR(int(*)(float, short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2, s3);
OUTPUT:
	RETVAL

void *
nci_ptsts( c_func, t0, s1, t2, s3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	short s3
PREINIT:
	void *(*func)(char *, short, char *, short);
CODE:
	func   = INT2PTR(void *(*)(char *, short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2, s3);
OUTPUT:
	RETVAL

void
nci_vtsts( c_func, t0, s1, t2, s3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	short s3
PREINIT:
	void(*func)(char *, short, char *, short);
CODE:
	func   = INT2PTR(void(*)(char *, short, char *, short), SvIV(c_func) );
	(*func)(t0, s1, t2, s3);

double
nci_dtsts( c_func, t0, s1, t2, s3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	short s3
PREINIT:
	double(*func)(char *, short, char *, short);
CODE:
	func   = INT2PTR(double(*)(char *, short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2, s3);
OUTPUT:
	RETVAL

short
nci_ststs( c_func, t0, s1, t2, s3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	short s3
PREINIT:
	short(*func)(char *, short, char *, short);
CODE:
	func   = INT2PTR(short(*)(char *, short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2, s3);
OUTPUT:
	RETVAL

float
nci_ftsts( c_func, t0, s1, t2, s3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	short s3
PREINIT:
	float(*func)(char *, short, char *, short);
CODE:
	func   = INT2PTR(float(*)(char *, short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2, s3);
OUTPUT:
	RETVAL

char *
nci_ttsts( c_func, t0, s1, t2, s3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	short s3
PREINIT:
	char *(*func)(char *, short, char *, short);
CODE:
	func   = INT2PTR(char *(*)(char *, short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2, s3);
OUTPUT:
	RETVAL

int
nci_itsts( c_func, t0, s1, t2, s3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	short s3
PREINIT:
	int(*func)(char *, short, char *, short);
CODE:
	func   = INT2PTR(int(*)(char *, short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2, s3);
OUTPUT:
	RETVAL

void *
nci_pists( c_func, i0, s1, t2, s3 )
	SV* c_func
	int i0
	short s1
	char * t2
	short s3
PREINIT:
	void *(*func)(int, short, char *, short);
CODE:
	func   = INT2PTR(void *(*)(int, short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2, s3);
OUTPUT:
	RETVAL

void
nci_vists( c_func, i0, s1, t2, s3 )
	SV* c_func
	int i0
	short s1
	char * t2
	short s3
PREINIT:
	void(*func)(int, short, char *, short);
CODE:
	func   = INT2PTR(void(*)(int, short, char *, short), SvIV(c_func) );
	(*func)(i0, s1, t2, s3);

double
nci_dists( c_func, i0, s1, t2, s3 )
	SV* c_func
	int i0
	short s1
	char * t2
	short s3
PREINIT:
	double(*func)(int, short, char *, short);
CODE:
	func   = INT2PTR(double(*)(int, short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2, s3);
OUTPUT:
	RETVAL

short
nci_sists( c_func, i0, s1, t2, s3 )
	SV* c_func
	int i0
	short s1
	char * t2
	short s3
PREINIT:
	short(*func)(int, short, char *, short);
CODE:
	func   = INT2PTR(short(*)(int, short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2, s3);
OUTPUT:
	RETVAL

float
nci_fists( c_func, i0, s1, t2, s3 )
	SV* c_func
	int i0
	short s1
	char * t2
	short s3
PREINIT:
	float(*func)(int, short, char *, short);
CODE:
	func   = INT2PTR(float(*)(int, short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2, s3);
OUTPUT:
	RETVAL

char *
nci_tists( c_func, i0, s1, t2, s3 )
	SV* c_func
	int i0
	short s1
	char * t2
	short s3
PREINIT:
	char *(*func)(int, short, char *, short);
CODE:
	func   = INT2PTR(char *(*)(int, short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2, s3);
OUTPUT:
	RETVAL

int
nci_iists( c_func, i0, s1, t2, s3 )
	SV* c_func
	int i0
	short s1
	char * t2
	short s3
PREINIT:
	int(*func)(int, short, char *, short);
CODE:
	func   = INT2PTR(int(*)(int, short, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2, s3);
OUTPUT:
	RETVAL

void *
nci_ppfts( c_func, p0, f1, t2, s3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	short s3
PREINIT:
	void *(*func)(void *, float, char *, short);
CODE:
	func   = INT2PTR(void *(*)(void *, float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2, s3);
OUTPUT:
	RETVAL

void
nci_vpfts( c_func, p0, f1, t2, s3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	short s3
PREINIT:
	void(*func)(void *, float, char *, short);
CODE:
	func   = INT2PTR(void(*)(void *, float, char *, short), SvIV(c_func) );
	(*func)(p0, f1, t2, s3);

double
nci_dpfts( c_func, p0, f1, t2, s3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	short s3
PREINIT:
	double(*func)(void *, float, char *, short);
CODE:
	func   = INT2PTR(double(*)(void *, float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2, s3);
OUTPUT:
	RETVAL

short
nci_spfts( c_func, p0, f1, t2, s3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	short s3
PREINIT:
	short(*func)(void *, float, char *, short);
CODE:
	func   = INT2PTR(short(*)(void *, float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2, s3);
OUTPUT:
	RETVAL

float
nci_fpfts( c_func, p0, f1, t2, s3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	short s3
PREINIT:
	float(*func)(void *, float, char *, short);
CODE:
	func   = INT2PTR(float(*)(void *, float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2, s3);
OUTPUT:
	RETVAL

char *
nci_tpfts( c_func, p0, f1, t2, s3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	short s3
PREINIT:
	char *(*func)(void *, float, char *, short);
CODE:
	func   = INT2PTR(char *(*)(void *, float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2, s3);
OUTPUT:
	RETVAL

int
nci_ipfts( c_func, p0, f1, t2, s3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	short s3
PREINIT:
	int(*func)(void *, float, char *, short);
CODE:
	func   = INT2PTR(int(*)(void *, float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2, s3);
OUTPUT:
	RETVAL

void *
nci_pvfts( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvfts( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvfts( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svfts( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvfts( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvfts( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivfts( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdfts( c_func, d0, f1, t2, s3 )
	SV* c_func
	double d0
	float f1
	char * t2
	short s3
PREINIT:
	void *(*func)(double, float, char *, short);
CODE:
	func   = INT2PTR(void *(*)(double, float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2, s3);
OUTPUT:
	RETVAL

void
nci_vdfts( c_func, d0, f1, t2, s3 )
	SV* c_func
	double d0
	float f1
	char * t2
	short s3
PREINIT:
	void(*func)(double, float, char *, short);
CODE:
	func   = INT2PTR(void(*)(double, float, char *, short), SvIV(c_func) );
	(*func)(d0, f1, t2, s3);

double
nci_ddfts( c_func, d0, f1, t2, s3 )
	SV* c_func
	double d0
	float f1
	char * t2
	short s3
PREINIT:
	double(*func)(double, float, char *, short);
CODE:
	func   = INT2PTR(double(*)(double, float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2, s3);
OUTPUT:
	RETVAL

short
nci_sdfts( c_func, d0, f1, t2, s3 )
	SV* c_func
	double d0
	float f1
	char * t2
	short s3
PREINIT:
	short(*func)(double, float, char *, short);
CODE:
	func   = INT2PTR(short(*)(double, float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2, s3);
OUTPUT:
	RETVAL

float
nci_fdfts( c_func, d0, f1, t2, s3 )
	SV* c_func
	double d0
	float f1
	char * t2
	short s3
PREINIT:
	float(*func)(double, float, char *, short);
CODE:
	func   = INT2PTR(float(*)(double, float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2, s3);
OUTPUT:
	RETVAL

char *
nci_tdfts( c_func, d0, f1, t2, s3 )
	SV* c_func
	double d0
	float f1
	char * t2
	short s3
PREINIT:
	char *(*func)(double, float, char *, short);
CODE:
	func   = INT2PTR(char *(*)(double, float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2, s3);
OUTPUT:
	RETVAL

int
nci_idfts( c_func, d0, f1, t2, s3 )
	SV* c_func
	double d0
	float f1
	char * t2
	short s3
PREINIT:
	int(*func)(double, float, char *, short);
CODE:
	func   = INT2PTR(int(*)(double, float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2, s3);
OUTPUT:
	RETVAL

void *
nci_psfts( c_func, s0, f1, t2, s3 )
	SV* c_func
	short s0
	float f1
	char * t2
	short s3
PREINIT:
	void *(*func)(short, float, char *, short);
CODE:
	func   = INT2PTR(void *(*)(short, float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2, s3);
OUTPUT:
	RETVAL

void
nci_vsfts( c_func, s0, f1, t2, s3 )
	SV* c_func
	short s0
	float f1
	char * t2
	short s3
PREINIT:
	void(*func)(short, float, char *, short);
CODE:
	func   = INT2PTR(void(*)(short, float, char *, short), SvIV(c_func) );
	(*func)(s0, f1, t2, s3);

double
nci_dsfts( c_func, s0, f1, t2, s3 )
	SV* c_func
	short s0
	float f1
	char * t2
	short s3
PREINIT:
	double(*func)(short, float, char *, short);
CODE:
	func   = INT2PTR(double(*)(short, float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2, s3);
OUTPUT:
	RETVAL

short
nci_ssfts( c_func, s0, f1, t2, s3 )
	SV* c_func
	short s0
	float f1
	char * t2
	short s3
PREINIT:
	short(*func)(short, float, char *, short);
CODE:
	func   = INT2PTR(short(*)(short, float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2, s3);
OUTPUT:
	RETVAL

float
nci_fsfts( c_func, s0, f1, t2, s3 )
	SV* c_func
	short s0
	float f1
	char * t2
	short s3
PREINIT:
	float(*func)(short, float, char *, short);
CODE:
	func   = INT2PTR(float(*)(short, float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2, s3);
OUTPUT:
	RETVAL

char *
nci_tsfts( c_func, s0, f1, t2, s3 )
	SV* c_func
	short s0
	float f1
	char * t2
	short s3
PREINIT:
	char *(*func)(short, float, char *, short);
CODE:
	func   = INT2PTR(char *(*)(short, float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2, s3);
OUTPUT:
	RETVAL

int
nci_isfts( c_func, s0, f1, t2, s3 )
	SV* c_func
	short s0
	float f1
	char * t2
	short s3
PREINIT:
	int(*func)(short, float, char *, short);
CODE:
	func   = INT2PTR(int(*)(short, float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2, s3);
OUTPUT:
	RETVAL

void *
nci_pffts( c_func, f0, f1, t2, s3 )
	SV* c_func
	float f0
	float f1
	char * t2
	short s3
PREINIT:
	void *(*func)(float, float, char *, short);
CODE:
	func   = INT2PTR(void *(*)(float, float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2, s3);
OUTPUT:
	RETVAL

void
nci_vffts( c_func, f0, f1, t2, s3 )
	SV* c_func
	float f0
	float f1
	char * t2
	short s3
PREINIT:
	void(*func)(float, float, char *, short);
CODE:
	func   = INT2PTR(void(*)(float, float, char *, short), SvIV(c_func) );
	(*func)(f0, f1, t2, s3);

double
nci_dffts( c_func, f0, f1, t2, s3 )
	SV* c_func
	float f0
	float f1
	char * t2
	short s3
PREINIT:
	double(*func)(float, float, char *, short);
CODE:
	func   = INT2PTR(double(*)(float, float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2, s3);
OUTPUT:
	RETVAL

short
nci_sffts( c_func, f0, f1, t2, s3 )
	SV* c_func
	float f0
	float f1
	char * t2
	short s3
PREINIT:
	short(*func)(float, float, char *, short);
CODE:
	func   = INT2PTR(short(*)(float, float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2, s3);
OUTPUT:
	RETVAL

float
nci_fffts( c_func, f0, f1, t2, s3 )
	SV* c_func
	float f0
	float f1
	char * t2
	short s3
PREINIT:
	float(*func)(float, float, char *, short);
CODE:
	func   = INT2PTR(float(*)(float, float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2, s3);
OUTPUT:
	RETVAL

char *
nci_tffts( c_func, f0, f1, t2, s3 )
	SV* c_func
	float f0
	float f1
	char * t2
	short s3
PREINIT:
	char *(*func)(float, float, char *, short);
CODE:
	func   = INT2PTR(char *(*)(float, float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2, s3);
OUTPUT:
	RETVAL

int
nci_iffts( c_func, f0, f1, t2, s3 )
	SV* c_func
	float f0
	float f1
	char * t2
	short s3
PREINIT:
	int(*func)(float, float, char *, short);
CODE:
	func   = INT2PTR(int(*)(float, float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2, s3);
OUTPUT:
	RETVAL

void *
nci_ptfts( c_func, t0, f1, t2, s3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	short s3
PREINIT:
	void *(*func)(char *, float, char *, short);
CODE:
	func   = INT2PTR(void *(*)(char *, float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2, s3);
OUTPUT:
	RETVAL

void
nci_vtfts( c_func, t0, f1, t2, s3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	short s3
PREINIT:
	void(*func)(char *, float, char *, short);
CODE:
	func   = INT2PTR(void(*)(char *, float, char *, short), SvIV(c_func) );
	(*func)(t0, f1, t2, s3);

double
nci_dtfts( c_func, t0, f1, t2, s3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	short s3
PREINIT:
	double(*func)(char *, float, char *, short);
CODE:
	func   = INT2PTR(double(*)(char *, float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2, s3);
OUTPUT:
	RETVAL

short
nci_stfts( c_func, t0, f1, t2, s3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	short s3
PREINIT:
	short(*func)(char *, float, char *, short);
CODE:
	func   = INT2PTR(short(*)(char *, float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2, s3);
OUTPUT:
	RETVAL

float
nci_ftfts( c_func, t0, f1, t2, s3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	short s3
PREINIT:
	float(*func)(char *, float, char *, short);
CODE:
	func   = INT2PTR(float(*)(char *, float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2, s3);
OUTPUT:
	RETVAL

char *
nci_ttfts( c_func, t0, f1, t2, s3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	short s3
PREINIT:
	char *(*func)(char *, float, char *, short);
CODE:
	func   = INT2PTR(char *(*)(char *, float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2, s3);
OUTPUT:
	RETVAL

int
nci_itfts( c_func, t0, f1, t2, s3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	short s3
PREINIT:
	int(*func)(char *, float, char *, short);
CODE:
	func   = INT2PTR(int(*)(char *, float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2, s3);
OUTPUT:
	RETVAL

void *
nci_pifts( c_func, i0, f1, t2, s3 )
	SV* c_func
	int i0
	float f1
	char * t2
	short s3
PREINIT:
	void *(*func)(int, float, char *, short);
CODE:
	func   = INT2PTR(void *(*)(int, float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2, s3);
OUTPUT:
	RETVAL

void
nci_vifts( c_func, i0, f1, t2, s3 )
	SV* c_func
	int i0
	float f1
	char * t2
	short s3
PREINIT:
	void(*func)(int, float, char *, short);
CODE:
	func   = INT2PTR(void(*)(int, float, char *, short), SvIV(c_func) );
	(*func)(i0, f1, t2, s3);

double
nci_difts( c_func, i0, f1, t2, s3 )
	SV* c_func
	int i0
	float f1
	char * t2
	short s3
PREINIT:
	double(*func)(int, float, char *, short);
CODE:
	func   = INT2PTR(double(*)(int, float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2, s3);
OUTPUT:
	RETVAL

short
nci_sifts( c_func, i0, f1, t2, s3 )
	SV* c_func
	int i0
	float f1
	char * t2
	short s3
PREINIT:
	short(*func)(int, float, char *, short);
CODE:
	func   = INT2PTR(short(*)(int, float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2, s3);
OUTPUT:
	RETVAL

float
nci_fifts( c_func, i0, f1, t2, s3 )
	SV* c_func
	int i0
	float f1
	char * t2
	short s3
PREINIT:
	float(*func)(int, float, char *, short);
CODE:
	func   = INT2PTR(float(*)(int, float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2, s3);
OUTPUT:
	RETVAL

char *
nci_tifts( c_func, i0, f1, t2, s3 )
	SV* c_func
	int i0
	float f1
	char * t2
	short s3
PREINIT:
	char *(*func)(int, float, char *, short);
CODE:
	func   = INT2PTR(char *(*)(int, float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2, s3);
OUTPUT:
	RETVAL

int
nci_iifts( c_func, i0, f1, t2, s3 )
	SV* c_func
	int i0
	float f1
	char * t2
	short s3
PREINIT:
	int(*func)(int, float, char *, short);
CODE:
	func   = INT2PTR(int(*)(int, float, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2, s3);
OUTPUT:
	RETVAL

void *
nci_pptts( c_func, p0, t1, t2, s3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	short s3
PREINIT:
	void *(*func)(void *, char *, char *, short);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2, s3);
OUTPUT:
	RETVAL

void
nci_vptts( c_func, p0, t1, t2, s3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	short s3
PREINIT:
	void(*func)(void *, char *, char *, short);
CODE:
	func   = INT2PTR(void(*)(void *, char *, char *, short), SvIV(c_func) );
	(*func)(p0, t1, t2, s3);

double
nci_dptts( c_func, p0, t1, t2, s3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	short s3
PREINIT:
	double(*func)(void *, char *, char *, short);
CODE:
	func   = INT2PTR(double(*)(void *, char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2, s3);
OUTPUT:
	RETVAL

short
nci_sptts( c_func, p0, t1, t2, s3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	short s3
PREINIT:
	short(*func)(void *, char *, char *, short);
CODE:
	func   = INT2PTR(short(*)(void *, char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2, s3);
OUTPUT:
	RETVAL

float
nci_fptts( c_func, p0, t1, t2, s3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	short s3
PREINIT:
	float(*func)(void *, char *, char *, short);
CODE:
	func   = INT2PTR(float(*)(void *, char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2, s3);
OUTPUT:
	RETVAL

char *
nci_tptts( c_func, p0, t1, t2, s3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	short s3
PREINIT:
	char *(*func)(void *, char *, char *, short);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2, s3);
OUTPUT:
	RETVAL

int
nci_iptts( c_func, p0, t1, t2, s3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	short s3
PREINIT:
	int(*func)(void *, char *, char *, short);
CODE:
	func   = INT2PTR(int(*)(void *, char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2, s3);
OUTPUT:
	RETVAL

void *
nci_pvtts( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvtts( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvtts( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svtts( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvtts( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvtts( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivtts( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdtts( c_func, d0, t1, t2, s3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	short s3
PREINIT:
	void *(*func)(double, char *, char *, short);
CODE:
	func   = INT2PTR(void *(*)(double, char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2, s3);
OUTPUT:
	RETVAL

void
nci_vdtts( c_func, d0, t1, t2, s3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	short s3
PREINIT:
	void(*func)(double, char *, char *, short);
CODE:
	func   = INT2PTR(void(*)(double, char *, char *, short), SvIV(c_func) );
	(*func)(d0, t1, t2, s3);

double
nci_ddtts( c_func, d0, t1, t2, s3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	short s3
PREINIT:
	double(*func)(double, char *, char *, short);
CODE:
	func   = INT2PTR(double(*)(double, char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2, s3);
OUTPUT:
	RETVAL

short
nci_sdtts( c_func, d0, t1, t2, s3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	short s3
PREINIT:
	short(*func)(double, char *, char *, short);
CODE:
	func   = INT2PTR(short(*)(double, char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2, s3);
OUTPUT:
	RETVAL

float
nci_fdtts( c_func, d0, t1, t2, s3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	short s3
PREINIT:
	float(*func)(double, char *, char *, short);
CODE:
	func   = INT2PTR(float(*)(double, char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2, s3);
OUTPUT:
	RETVAL

char *
nci_tdtts( c_func, d0, t1, t2, s3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	short s3
PREINIT:
	char *(*func)(double, char *, char *, short);
CODE:
	func   = INT2PTR(char *(*)(double, char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2, s3);
OUTPUT:
	RETVAL

int
nci_idtts( c_func, d0, t1, t2, s3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	short s3
PREINIT:
	int(*func)(double, char *, char *, short);
CODE:
	func   = INT2PTR(int(*)(double, char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2, s3);
OUTPUT:
	RETVAL

void *
nci_pstts( c_func, s0, t1, t2, s3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	short s3
PREINIT:
	void *(*func)(short, char *, char *, short);
CODE:
	func   = INT2PTR(void *(*)(short, char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2, s3);
OUTPUT:
	RETVAL

void
nci_vstts( c_func, s0, t1, t2, s3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	short s3
PREINIT:
	void(*func)(short, char *, char *, short);
CODE:
	func   = INT2PTR(void(*)(short, char *, char *, short), SvIV(c_func) );
	(*func)(s0, t1, t2, s3);

double
nci_dstts( c_func, s0, t1, t2, s3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	short s3
PREINIT:
	double(*func)(short, char *, char *, short);
CODE:
	func   = INT2PTR(double(*)(short, char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2, s3);
OUTPUT:
	RETVAL

short
nci_sstts( c_func, s0, t1, t2, s3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	short s3
PREINIT:
	short(*func)(short, char *, char *, short);
CODE:
	func   = INT2PTR(short(*)(short, char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2, s3);
OUTPUT:
	RETVAL

float
nci_fstts( c_func, s0, t1, t2, s3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	short s3
PREINIT:
	float(*func)(short, char *, char *, short);
CODE:
	func   = INT2PTR(float(*)(short, char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2, s3);
OUTPUT:
	RETVAL

char *
nci_tstts( c_func, s0, t1, t2, s3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	short s3
PREINIT:
	char *(*func)(short, char *, char *, short);
CODE:
	func   = INT2PTR(char *(*)(short, char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2, s3);
OUTPUT:
	RETVAL

int
nci_istts( c_func, s0, t1, t2, s3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	short s3
PREINIT:
	int(*func)(short, char *, char *, short);
CODE:
	func   = INT2PTR(int(*)(short, char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2, s3);
OUTPUT:
	RETVAL

void *
nci_pftts( c_func, f0, t1, t2, s3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	short s3
PREINIT:
	void *(*func)(float, char *, char *, short);
CODE:
	func   = INT2PTR(void *(*)(float, char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2, s3);
OUTPUT:
	RETVAL

void
nci_vftts( c_func, f0, t1, t2, s3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	short s3
PREINIT:
	void(*func)(float, char *, char *, short);
CODE:
	func   = INT2PTR(void(*)(float, char *, char *, short), SvIV(c_func) );
	(*func)(f0, t1, t2, s3);

double
nci_dftts( c_func, f0, t1, t2, s3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	short s3
PREINIT:
	double(*func)(float, char *, char *, short);
CODE:
	func   = INT2PTR(double(*)(float, char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2, s3);
OUTPUT:
	RETVAL

short
nci_sftts( c_func, f0, t1, t2, s3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	short s3
PREINIT:
	short(*func)(float, char *, char *, short);
CODE:
	func   = INT2PTR(short(*)(float, char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2, s3);
OUTPUT:
	RETVAL

float
nci_fftts( c_func, f0, t1, t2, s3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	short s3
PREINIT:
	float(*func)(float, char *, char *, short);
CODE:
	func   = INT2PTR(float(*)(float, char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2, s3);
OUTPUT:
	RETVAL

char *
nci_tftts( c_func, f0, t1, t2, s3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	short s3
PREINIT:
	char *(*func)(float, char *, char *, short);
CODE:
	func   = INT2PTR(char *(*)(float, char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2, s3);
OUTPUT:
	RETVAL

int
nci_iftts( c_func, f0, t1, t2, s3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	short s3
PREINIT:
	int(*func)(float, char *, char *, short);
CODE:
	func   = INT2PTR(int(*)(float, char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2, s3);
OUTPUT:
	RETVAL

void *
nci_pttts( c_func, t0, t1, t2, s3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	short s3
PREINIT:
	void *(*func)(char *, char *, char *, short);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2, s3);
OUTPUT:
	RETVAL

void
nci_vttts( c_func, t0, t1, t2, s3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	short s3
PREINIT:
	void(*func)(char *, char *, char *, short);
CODE:
	func   = INT2PTR(void(*)(char *, char *, char *, short), SvIV(c_func) );
	(*func)(t0, t1, t2, s3);

double
nci_dttts( c_func, t0, t1, t2, s3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	short s3
PREINIT:
	double(*func)(char *, char *, char *, short);
CODE:
	func   = INT2PTR(double(*)(char *, char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2, s3);
OUTPUT:
	RETVAL

short
nci_sttts( c_func, t0, t1, t2, s3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	short s3
PREINIT:
	short(*func)(char *, char *, char *, short);
CODE:
	func   = INT2PTR(short(*)(char *, char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2, s3);
OUTPUT:
	RETVAL

float
nci_fttts( c_func, t0, t1, t2, s3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	short s3
PREINIT:
	float(*func)(char *, char *, char *, short);
CODE:
	func   = INT2PTR(float(*)(char *, char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2, s3);
OUTPUT:
	RETVAL

char *
nci_tttts( c_func, t0, t1, t2, s3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	short s3
PREINIT:
	char *(*func)(char *, char *, char *, short);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2, s3);
OUTPUT:
	RETVAL

int
nci_ittts( c_func, t0, t1, t2, s3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	short s3
PREINIT:
	int(*func)(char *, char *, char *, short);
CODE:
	func   = INT2PTR(int(*)(char *, char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2, s3);
OUTPUT:
	RETVAL

void *
nci_pitts( c_func, i0, t1, t2, s3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	short s3
PREINIT:
	void *(*func)(int, char *, char *, short);
CODE:
	func   = INT2PTR(void *(*)(int, char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2, s3);
OUTPUT:
	RETVAL

void
nci_vitts( c_func, i0, t1, t2, s3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	short s3
PREINIT:
	void(*func)(int, char *, char *, short);
CODE:
	func   = INT2PTR(void(*)(int, char *, char *, short), SvIV(c_func) );
	(*func)(i0, t1, t2, s3);

double
nci_ditts( c_func, i0, t1, t2, s3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	short s3
PREINIT:
	double(*func)(int, char *, char *, short);
CODE:
	func   = INT2PTR(double(*)(int, char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2, s3);
OUTPUT:
	RETVAL

short
nci_sitts( c_func, i0, t1, t2, s3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	short s3
PREINIT:
	short(*func)(int, char *, char *, short);
CODE:
	func   = INT2PTR(short(*)(int, char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2, s3);
OUTPUT:
	RETVAL

float
nci_fitts( c_func, i0, t1, t2, s3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	short s3
PREINIT:
	float(*func)(int, char *, char *, short);
CODE:
	func   = INT2PTR(float(*)(int, char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2, s3);
OUTPUT:
	RETVAL

char *
nci_titts( c_func, i0, t1, t2, s3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	short s3
PREINIT:
	char *(*func)(int, char *, char *, short);
CODE:
	func   = INT2PTR(char *(*)(int, char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2, s3);
OUTPUT:
	RETVAL

int
nci_iitts( c_func, i0, t1, t2, s3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	short s3
PREINIT:
	int(*func)(int, char *, char *, short);
CODE:
	func   = INT2PTR(int(*)(int, char *, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2, s3);
OUTPUT:
	RETVAL

void *
nci_ppits( c_func, p0, i1, t2, s3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	short s3
PREINIT:
	void *(*func)(void *, int, char *, short);
CODE:
	func   = INT2PTR(void *(*)(void *, int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2, s3);
OUTPUT:
	RETVAL

void
nci_vpits( c_func, p0, i1, t2, s3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	short s3
PREINIT:
	void(*func)(void *, int, char *, short);
CODE:
	func   = INT2PTR(void(*)(void *, int, char *, short), SvIV(c_func) );
	(*func)(p0, i1, t2, s3);

double
nci_dpits( c_func, p0, i1, t2, s3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	short s3
PREINIT:
	double(*func)(void *, int, char *, short);
CODE:
	func   = INT2PTR(double(*)(void *, int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2, s3);
OUTPUT:
	RETVAL

short
nci_spits( c_func, p0, i1, t2, s3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	short s3
PREINIT:
	short(*func)(void *, int, char *, short);
CODE:
	func   = INT2PTR(short(*)(void *, int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2, s3);
OUTPUT:
	RETVAL

float
nci_fpits( c_func, p0, i1, t2, s3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	short s3
PREINIT:
	float(*func)(void *, int, char *, short);
CODE:
	func   = INT2PTR(float(*)(void *, int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2, s3);
OUTPUT:
	RETVAL

char *
nci_tpits( c_func, p0, i1, t2, s3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	short s3
PREINIT:
	char *(*func)(void *, int, char *, short);
CODE:
	func   = INT2PTR(char *(*)(void *, int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2, s3);
OUTPUT:
	RETVAL

int
nci_ipits( c_func, p0, i1, t2, s3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	short s3
PREINIT:
	int(*func)(void *, int, char *, short);
CODE:
	func   = INT2PTR(int(*)(void *, int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2, s3);
OUTPUT:
	RETVAL

void *
nci_pvits( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvits( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvits( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svits( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvits( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvits( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivits( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdits( c_func, d0, i1, t2, s3 )
	SV* c_func
	double d0
	int i1
	char * t2
	short s3
PREINIT:
	void *(*func)(double, int, char *, short);
CODE:
	func   = INT2PTR(void *(*)(double, int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2, s3);
OUTPUT:
	RETVAL

void
nci_vdits( c_func, d0, i1, t2, s3 )
	SV* c_func
	double d0
	int i1
	char * t2
	short s3
PREINIT:
	void(*func)(double, int, char *, short);
CODE:
	func   = INT2PTR(void(*)(double, int, char *, short), SvIV(c_func) );
	(*func)(d0, i1, t2, s3);

double
nci_ddits( c_func, d0, i1, t2, s3 )
	SV* c_func
	double d0
	int i1
	char * t2
	short s3
PREINIT:
	double(*func)(double, int, char *, short);
CODE:
	func   = INT2PTR(double(*)(double, int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2, s3);
OUTPUT:
	RETVAL

short
nci_sdits( c_func, d0, i1, t2, s3 )
	SV* c_func
	double d0
	int i1
	char * t2
	short s3
PREINIT:
	short(*func)(double, int, char *, short);
CODE:
	func   = INT2PTR(short(*)(double, int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2, s3);
OUTPUT:
	RETVAL

float
nci_fdits( c_func, d0, i1, t2, s3 )
	SV* c_func
	double d0
	int i1
	char * t2
	short s3
PREINIT:
	float(*func)(double, int, char *, short);
CODE:
	func   = INT2PTR(float(*)(double, int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2, s3);
OUTPUT:
	RETVAL

char *
nci_tdits( c_func, d0, i1, t2, s3 )
	SV* c_func
	double d0
	int i1
	char * t2
	short s3
PREINIT:
	char *(*func)(double, int, char *, short);
CODE:
	func   = INT2PTR(char *(*)(double, int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2, s3);
OUTPUT:
	RETVAL

int
nci_idits( c_func, d0, i1, t2, s3 )
	SV* c_func
	double d0
	int i1
	char * t2
	short s3
PREINIT:
	int(*func)(double, int, char *, short);
CODE:
	func   = INT2PTR(int(*)(double, int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2, s3);
OUTPUT:
	RETVAL

void *
nci_psits( c_func, s0, i1, t2, s3 )
	SV* c_func
	short s0
	int i1
	char * t2
	short s3
PREINIT:
	void *(*func)(short, int, char *, short);
CODE:
	func   = INT2PTR(void *(*)(short, int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2, s3);
OUTPUT:
	RETVAL

void
nci_vsits( c_func, s0, i1, t2, s3 )
	SV* c_func
	short s0
	int i1
	char * t2
	short s3
PREINIT:
	void(*func)(short, int, char *, short);
CODE:
	func   = INT2PTR(void(*)(short, int, char *, short), SvIV(c_func) );
	(*func)(s0, i1, t2, s3);

double
nci_dsits( c_func, s0, i1, t2, s3 )
	SV* c_func
	short s0
	int i1
	char * t2
	short s3
PREINIT:
	double(*func)(short, int, char *, short);
CODE:
	func   = INT2PTR(double(*)(short, int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2, s3);
OUTPUT:
	RETVAL

short
nci_ssits( c_func, s0, i1, t2, s3 )
	SV* c_func
	short s0
	int i1
	char * t2
	short s3
PREINIT:
	short(*func)(short, int, char *, short);
CODE:
	func   = INT2PTR(short(*)(short, int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2, s3);
OUTPUT:
	RETVAL

float
nci_fsits( c_func, s0, i1, t2, s3 )
	SV* c_func
	short s0
	int i1
	char * t2
	short s3
PREINIT:
	float(*func)(short, int, char *, short);
CODE:
	func   = INT2PTR(float(*)(short, int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2, s3);
OUTPUT:
	RETVAL

char *
nci_tsits( c_func, s0, i1, t2, s3 )
	SV* c_func
	short s0
	int i1
	char * t2
	short s3
PREINIT:
	char *(*func)(short, int, char *, short);
CODE:
	func   = INT2PTR(char *(*)(short, int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2, s3);
OUTPUT:
	RETVAL

int
nci_isits( c_func, s0, i1, t2, s3 )
	SV* c_func
	short s0
	int i1
	char * t2
	short s3
PREINIT:
	int(*func)(short, int, char *, short);
CODE:
	func   = INT2PTR(int(*)(short, int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2, s3);
OUTPUT:
	RETVAL

void *
nci_pfits( c_func, f0, i1, t2, s3 )
	SV* c_func
	float f0
	int i1
	char * t2
	short s3
PREINIT:
	void *(*func)(float, int, char *, short);
CODE:
	func   = INT2PTR(void *(*)(float, int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2, s3);
OUTPUT:
	RETVAL

void
nci_vfits( c_func, f0, i1, t2, s3 )
	SV* c_func
	float f0
	int i1
	char * t2
	short s3
PREINIT:
	void(*func)(float, int, char *, short);
CODE:
	func   = INT2PTR(void(*)(float, int, char *, short), SvIV(c_func) );
	(*func)(f0, i1, t2, s3);

double
nci_dfits( c_func, f0, i1, t2, s3 )
	SV* c_func
	float f0
	int i1
	char * t2
	short s3
PREINIT:
	double(*func)(float, int, char *, short);
CODE:
	func   = INT2PTR(double(*)(float, int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2, s3);
OUTPUT:
	RETVAL

short
nci_sfits( c_func, f0, i1, t2, s3 )
	SV* c_func
	float f0
	int i1
	char * t2
	short s3
PREINIT:
	short(*func)(float, int, char *, short);
CODE:
	func   = INT2PTR(short(*)(float, int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2, s3);
OUTPUT:
	RETVAL

float
nci_ffits( c_func, f0, i1, t2, s3 )
	SV* c_func
	float f0
	int i1
	char * t2
	short s3
PREINIT:
	float(*func)(float, int, char *, short);
CODE:
	func   = INT2PTR(float(*)(float, int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2, s3);
OUTPUT:
	RETVAL

char *
nci_tfits( c_func, f0, i1, t2, s3 )
	SV* c_func
	float f0
	int i1
	char * t2
	short s3
PREINIT:
	char *(*func)(float, int, char *, short);
CODE:
	func   = INT2PTR(char *(*)(float, int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2, s3);
OUTPUT:
	RETVAL

int
nci_ifits( c_func, f0, i1, t2, s3 )
	SV* c_func
	float f0
	int i1
	char * t2
	short s3
PREINIT:
	int(*func)(float, int, char *, short);
CODE:
	func   = INT2PTR(int(*)(float, int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2, s3);
OUTPUT:
	RETVAL

void *
nci_ptits( c_func, t0, i1, t2, s3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	short s3
PREINIT:
	void *(*func)(char *, int, char *, short);
CODE:
	func   = INT2PTR(void *(*)(char *, int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2, s3);
OUTPUT:
	RETVAL

void
nci_vtits( c_func, t0, i1, t2, s3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	short s3
PREINIT:
	void(*func)(char *, int, char *, short);
CODE:
	func   = INT2PTR(void(*)(char *, int, char *, short), SvIV(c_func) );
	(*func)(t0, i1, t2, s3);

double
nci_dtits( c_func, t0, i1, t2, s3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	short s3
PREINIT:
	double(*func)(char *, int, char *, short);
CODE:
	func   = INT2PTR(double(*)(char *, int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2, s3);
OUTPUT:
	RETVAL

short
nci_stits( c_func, t0, i1, t2, s3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	short s3
PREINIT:
	short(*func)(char *, int, char *, short);
CODE:
	func   = INT2PTR(short(*)(char *, int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2, s3);
OUTPUT:
	RETVAL

float
nci_ftits( c_func, t0, i1, t2, s3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	short s3
PREINIT:
	float(*func)(char *, int, char *, short);
CODE:
	func   = INT2PTR(float(*)(char *, int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2, s3);
OUTPUT:
	RETVAL

char *
nci_ttits( c_func, t0, i1, t2, s3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	short s3
PREINIT:
	char *(*func)(char *, int, char *, short);
CODE:
	func   = INT2PTR(char *(*)(char *, int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2, s3);
OUTPUT:
	RETVAL

int
nci_itits( c_func, t0, i1, t2, s3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	short s3
PREINIT:
	int(*func)(char *, int, char *, short);
CODE:
	func   = INT2PTR(int(*)(char *, int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2, s3);
OUTPUT:
	RETVAL

void *
nci_piits( c_func, i0, i1, t2, s3 )
	SV* c_func
	int i0
	int i1
	char * t2
	short s3
PREINIT:
	void *(*func)(int, int, char *, short);
CODE:
	func   = INT2PTR(void *(*)(int, int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2, s3);
OUTPUT:
	RETVAL

void
nci_viits( c_func, i0, i1, t2, s3 )
	SV* c_func
	int i0
	int i1
	char * t2
	short s3
PREINIT:
	void(*func)(int, int, char *, short);
CODE:
	func   = INT2PTR(void(*)(int, int, char *, short), SvIV(c_func) );
	(*func)(i0, i1, t2, s3);

double
nci_diits( c_func, i0, i1, t2, s3 )
	SV* c_func
	int i0
	int i1
	char * t2
	short s3
PREINIT:
	double(*func)(int, int, char *, short);
CODE:
	func   = INT2PTR(double(*)(int, int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2, s3);
OUTPUT:
	RETVAL

short
nci_siits( c_func, i0, i1, t2, s3 )
	SV* c_func
	int i0
	int i1
	char * t2
	short s3
PREINIT:
	short(*func)(int, int, char *, short);
CODE:
	func   = INT2PTR(short(*)(int, int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2, s3);
OUTPUT:
	RETVAL

float
nci_fiits( c_func, i0, i1, t2, s3 )
	SV* c_func
	int i0
	int i1
	char * t2
	short s3
PREINIT:
	float(*func)(int, int, char *, short);
CODE:
	func   = INT2PTR(float(*)(int, int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2, s3);
OUTPUT:
	RETVAL

char *
nci_tiits( c_func, i0, i1, t2, s3 )
	SV* c_func
	int i0
	int i1
	char * t2
	short s3
PREINIT:
	char *(*func)(int, int, char *, short);
CODE:
	func   = INT2PTR(char *(*)(int, int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2, s3);
OUTPUT:
	RETVAL

int
nci_iiits( c_func, i0, i1, t2, s3 )
	SV* c_func
	int i0
	int i1
	char * t2
	short s3
PREINIT:
	int(*func)(int, int, char *, short);
CODE:
	func   = INT2PTR(int(*)(int, int, char *, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2, s3);
OUTPUT:
	RETVAL

void *
nci_pppis( c_func, p0, p1, i2, s3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	short s3
PREINIT:
	void *(*func)(void *, void *, int, short);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2, s3);
OUTPUT:
	RETVAL

void
nci_vppis( c_func, p0, p1, i2, s3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	short s3
PREINIT:
	void(*func)(void *, void *, int, short);
CODE:
	func   = INT2PTR(void(*)(void *, void *, int, short), SvIV(c_func) );
	(*func)(p0, p1, i2, s3);

double
nci_dppis( c_func, p0, p1, i2, s3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	short s3
PREINIT:
	double(*func)(void *, void *, int, short);
CODE:
	func   = INT2PTR(double(*)(void *, void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2, s3);
OUTPUT:
	RETVAL

short
nci_sppis( c_func, p0, p1, i2, s3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	short s3
PREINIT:
	short(*func)(void *, void *, int, short);
CODE:
	func   = INT2PTR(short(*)(void *, void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2, s3);
OUTPUT:
	RETVAL

float
nci_fppis( c_func, p0, p1, i2, s3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	short s3
PREINIT:
	float(*func)(void *, void *, int, short);
CODE:
	func   = INT2PTR(float(*)(void *, void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2, s3);
OUTPUT:
	RETVAL

char *
nci_tppis( c_func, p0, p1, i2, s3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	short s3
PREINIT:
	char *(*func)(void *, void *, int, short);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2, s3);
OUTPUT:
	RETVAL

int
nci_ippis( c_func, p0, p1, i2, s3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	short s3
PREINIT:
	int(*func)(void *, void *, int, short);
CODE:
	func   = INT2PTR(int(*)(void *, void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2, s3);
OUTPUT:
	RETVAL

void *
nci_pvpis( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvpis( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvpis( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svpis( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvpis( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvpis( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivpis( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdpis( c_func, d0, p1, i2, s3 )
	SV* c_func
	double d0
	void * p1
	int i2
	short s3
PREINIT:
	void *(*func)(double, void *, int, short);
CODE:
	func   = INT2PTR(void *(*)(double, void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2, s3);
OUTPUT:
	RETVAL

void
nci_vdpis( c_func, d0, p1, i2, s3 )
	SV* c_func
	double d0
	void * p1
	int i2
	short s3
PREINIT:
	void(*func)(double, void *, int, short);
CODE:
	func   = INT2PTR(void(*)(double, void *, int, short), SvIV(c_func) );
	(*func)(d0, p1, i2, s3);

double
nci_ddpis( c_func, d0, p1, i2, s3 )
	SV* c_func
	double d0
	void * p1
	int i2
	short s3
PREINIT:
	double(*func)(double, void *, int, short);
CODE:
	func   = INT2PTR(double(*)(double, void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2, s3);
OUTPUT:
	RETVAL

short
nci_sdpis( c_func, d0, p1, i2, s3 )
	SV* c_func
	double d0
	void * p1
	int i2
	short s3
PREINIT:
	short(*func)(double, void *, int, short);
CODE:
	func   = INT2PTR(short(*)(double, void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2, s3);
OUTPUT:
	RETVAL

float
nci_fdpis( c_func, d0, p1, i2, s3 )
	SV* c_func
	double d0
	void * p1
	int i2
	short s3
PREINIT:
	float(*func)(double, void *, int, short);
CODE:
	func   = INT2PTR(float(*)(double, void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2, s3);
OUTPUT:
	RETVAL

char *
nci_tdpis( c_func, d0, p1, i2, s3 )
	SV* c_func
	double d0
	void * p1
	int i2
	short s3
PREINIT:
	char *(*func)(double, void *, int, short);
CODE:
	func   = INT2PTR(char *(*)(double, void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2, s3);
OUTPUT:
	RETVAL

int
nci_idpis( c_func, d0, p1, i2, s3 )
	SV* c_func
	double d0
	void * p1
	int i2
	short s3
PREINIT:
	int(*func)(double, void *, int, short);
CODE:
	func   = INT2PTR(int(*)(double, void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2, s3);
OUTPUT:
	RETVAL

void *
nci_pspis( c_func, s0, p1, i2, s3 )
	SV* c_func
	short s0
	void * p1
	int i2
	short s3
PREINIT:
	void *(*func)(short, void *, int, short);
CODE:
	func   = INT2PTR(void *(*)(short, void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2, s3);
OUTPUT:
	RETVAL

void
nci_vspis( c_func, s0, p1, i2, s3 )
	SV* c_func
	short s0
	void * p1
	int i2
	short s3
PREINIT:
	void(*func)(short, void *, int, short);
CODE:
	func   = INT2PTR(void(*)(short, void *, int, short), SvIV(c_func) );
	(*func)(s0, p1, i2, s3);

double
nci_dspis( c_func, s0, p1, i2, s3 )
	SV* c_func
	short s0
	void * p1
	int i2
	short s3
PREINIT:
	double(*func)(short, void *, int, short);
CODE:
	func   = INT2PTR(double(*)(short, void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2, s3);
OUTPUT:
	RETVAL

short
nci_sspis( c_func, s0, p1, i2, s3 )
	SV* c_func
	short s0
	void * p1
	int i2
	short s3
PREINIT:
	short(*func)(short, void *, int, short);
CODE:
	func   = INT2PTR(short(*)(short, void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2, s3);
OUTPUT:
	RETVAL

float
nci_fspis( c_func, s0, p1, i2, s3 )
	SV* c_func
	short s0
	void * p1
	int i2
	short s3
PREINIT:
	float(*func)(short, void *, int, short);
CODE:
	func   = INT2PTR(float(*)(short, void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2, s3);
OUTPUT:
	RETVAL

char *
nci_tspis( c_func, s0, p1, i2, s3 )
	SV* c_func
	short s0
	void * p1
	int i2
	short s3
PREINIT:
	char *(*func)(short, void *, int, short);
CODE:
	func   = INT2PTR(char *(*)(short, void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2, s3);
OUTPUT:
	RETVAL

int
nci_ispis( c_func, s0, p1, i2, s3 )
	SV* c_func
	short s0
	void * p1
	int i2
	short s3
PREINIT:
	int(*func)(short, void *, int, short);
CODE:
	func   = INT2PTR(int(*)(short, void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2, s3);
OUTPUT:
	RETVAL

void *
nci_pfpis( c_func, f0, p1, i2, s3 )
	SV* c_func
	float f0
	void * p1
	int i2
	short s3
PREINIT:
	void *(*func)(float, void *, int, short);
CODE:
	func   = INT2PTR(void *(*)(float, void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2, s3);
OUTPUT:
	RETVAL

void
nci_vfpis( c_func, f0, p1, i2, s3 )
	SV* c_func
	float f0
	void * p1
	int i2
	short s3
PREINIT:
	void(*func)(float, void *, int, short);
CODE:
	func   = INT2PTR(void(*)(float, void *, int, short), SvIV(c_func) );
	(*func)(f0, p1, i2, s3);

double
nci_dfpis( c_func, f0, p1, i2, s3 )
	SV* c_func
	float f0
	void * p1
	int i2
	short s3
PREINIT:
	double(*func)(float, void *, int, short);
CODE:
	func   = INT2PTR(double(*)(float, void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2, s3);
OUTPUT:
	RETVAL

short
nci_sfpis( c_func, f0, p1, i2, s3 )
	SV* c_func
	float f0
	void * p1
	int i2
	short s3
PREINIT:
	short(*func)(float, void *, int, short);
CODE:
	func   = INT2PTR(short(*)(float, void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2, s3);
OUTPUT:
	RETVAL

float
nci_ffpis( c_func, f0, p1, i2, s3 )
	SV* c_func
	float f0
	void * p1
	int i2
	short s3
PREINIT:
	float(*func)(float, void *, int, short);
CODE:
	func   = INT2PTR(float(*)(float, void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2, s3);
OUTPUT:
	RETVAL

char *
nci_tfpis( c_func, f0, p1, i2, s3 )
	SV* c_func
	float f0
	void * p1
	int i2
	short s3
PREINIT:
	char *(*func)(float, void *, int, short);
CODE:
	func   = INT2PTR(char *(*)(float, void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2, s3);
OUTPUT:
	RETVAL

int
nci_ifpis( c_func, f0, p1, i2, s3 )
	SV* c_func
	float f0
	void * p1
	int i2
	short s3
PREINIT:
	int(*func)(float, void *, int, short);
CODE:
	func   = INT2PTR(int(*)(float, void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2, s3);
OUTPUT:
	RETVAL

void *
nci_ptpis( c_func, t0, p1, i2, s3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	short s3
PREINIT:
	void *(*func)(char *, void *, int, short);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2, s3);
OUTPUT:
	RETVAL

void
nci_vtpis( c_func, t0, p1, i2, s3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	short s3
PREINIT:
	void(*func)(char *, void *, int, short);
CODE:
	func   = INT2PTR(void(*)(char *, void *, int, short), SvIV(c_func) );
	(*func)(t0, p1, i2, s3);

double
nci_dtpis( c_func, t0, p1, i2, s3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	short s3
PREINIT:
	double(*func)(char *, void *, int, short);
CODE:
	func   = INT2PTR(double(*)(char *, void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2, s3);
OUTPUT:
	RETVAL

short
nci_stpis( c_func, t0, p1, i2, s3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	short s3
PREINIT:
	short(*func)(char *, void *, int, short);
CODE:
	func   = INT2PTR(short(*)(char *, void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2, s3);
OUTPUT:
	RETVAL

float
nci_ftpis( c_func, t0, p1, i2, s3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	short s3
PREINIT:
	float(*func)(char *, void *, int, short);
CODE:
	func   = INT2PTR(float(*)(char *, void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2, s3);
OUTPUT:
	RETVAL

char *
nci_ttpis( c_func, t0, p1, i2, s3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	short s3
PREINIT:
	char *(*func)(char *, void *, int, short);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2, s3);
OUTPUT:
	RETVAL

int
nci_itpis( c_func, t0, p1, i2, s3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	short s3
PREINIT:
	int(*func)(char *, void *, int, short);
CODE:
	func   = INT2PTR(int(*)(char *, void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2, s3);
OUTPUT:
	RETVAL

void *
nci_pipis( c_func, i0, p1, i2, s3 )
	SV* c_func
	int i0
	void * p1
	int i2
	short s3
PREINIT:
	void *(*func)(int, void *, int, short);
CODE:
	func   = INT2PTR(void *(*)(int, void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2, s3);
OUTPUT:
	RETVAL

void
nci_vipis( c_func, i0, p1, i2, s3 )
	SV* c_func
	int i0
	void * p1
	int i2
	short s3
PREINIT:
	void(*func)(int, void *, int, short);
CODE:
	func   = INT2PTR(void(*)(int, void *, int, short), SvIV(c_func) );
	(*func)(i0, p1, i2, s3);

double
nci_dipis( c_func, i0, p1, i2, s3 )
	SV* c_func
	int i0
	void * p1
	int i2
	short s3
PREINIT:
	double(*func)(int, void *, int, short);
CODE:
	func   = INT2PTR(double(*)(int, void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2, s3);
OUTPUT:
	RETVAL

short
nci_sipis( c_func, i0, p1, i2, s3 )
	SV* c_func
	int i0
	void * p1
	int i2
	short s3
PREINIT:
	short(*func)(int, void *, int, short);
CODE:
	func   = INT2PTR(short(*)(int, void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2, s3);
OUTPUT:
	RETVAL

float
nci_fipis( c_func, i0, p1, i2, s3 )
	SV* c_func
	int i0
	void * p1
	int i2
	short s3
PREINIT:
	float(*func)(int, void *, int, short);
CODE:
	func   = INT2PTR(float(*)(int, void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2, s3);
OUTPUT:
	RETVAL

char *
nci_tipis( c_func, i0, p1, i2, s3 )
	SV* c_func
	int i0
	void * p1
	int i2
	short s3
PREINIT:
	char *(*func)(int, void *, int, short);
CODE:
	func   = INT2PTR(char *(*)(int, void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2, s3);
OUTPUT:
	RETVAL

int
nci_iipis( c_func, i0, p1, i2, s3 )
	SV* c_func
	int i0
	void * p1
	int i2
	short s3
PREINIT:
	int(*func)(int, void *, int, short);
CODE:
	func   = INT2PTR(int(*)(int, void *, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2, s3);
OUTPUT:
	RETVAL

void *
nci_ppdis( c_func, p0, d1, i2, s3 )
	SV* c_func
	void * p0
	double d1
	int i2
	short s3
PREINIT:
	void *(*func)(void *, double, int, short);
CODE:
	func   = INT2PTR(void *(*)(void *, double, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2, s3);
OUTPUT:
	RETVAL

void
nci_vpdis( c_func, p0, d1, i2, s3 )
	SV* c_func
	void * p0
	double d1
	int i2
	short s3
PREINIT:
	void(*func)(void *, double, int, short);
CODE:
	func   = INT2PTR(void(*)(void *, double, int, short), SvIV(c_func) );
	(*func)(p0, d1, i2, s3);

double
nci_dpdis( c_func, p0, d1, i2, s3 )
	SV* c_func
	void * p0
	double d1
	int i2
	short s3
PREINIT:
	double(*func)(void *, double, int, short);
CODE:
	func   = INT2PTR(double(*)(void *, double, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2, s3);
OUTPUT:
	RETVAL

short
nci_spdis( c_func, p0, d1, i2, s3 )
	SV* c_func
	void * p0
	double d1
	int i2
	short s3
PREINIT:
	short(*func)(void *, double, int, short);
CODE:
	func   = INT2PTR(short(*)(void *, double, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2, s3);
OUTPUT:
	RETVAL

float
nci_fpdis( c_func, p0, d1, i2, s3 )
	SV* c_func
	void * p0
	double d1
	int i2
	short s3
PREINIT:
	float(*func)(void *, double, int, short);
CODE:
	func   = INT2PTR(float(*)(void *, double, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2, s3);
OUTPUT:
	RETVAL

char *
nci_tpdis( c_func, p0, d1, i2, s3 )
	SV* c_func
	void * p0
	double d1
	int i2
	short s3
PREINIT:
	char *(*func)(void *, double, int, short);
CODE:
	func   = INT2PTR(char *(*)(void *, double, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2, s3);
OUTPUT:
	RETVAL

int
nci_ipdis( c_func, p0, d1, i2, s3 )
	SV* c_func
	void * p0
	double d1
	int i2
	short s3
PREINIT:
	int(*func)(void *, double, int, short);
CODE:
	func   = INT2PTR(int(*)(void *, double, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2, s3);
OUTPUT:
	RETVAL

void *
nci_pvdis( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvdis( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvdis( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svdis( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvdis( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvdis( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivdis( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pddis( c_func, d0, d1, i2, s3 )
	SV* c_func
	double d0
	double d1
	int i2
	short s3
PREINIT:
	void *(*func)(double, double, int, short);
CODE:
	func   = INT2PTR(void *(*)(double, double, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2, s3);
OUTPUT:
	RETVAL

void
nci_vddis( c_func, d0, d1, i2, s3 )
	SV* c_func
	double d0
	double d1
	int i2
	short s3
PREINIT:
	void(*func)(double, double, int, short);
CODE:
	func   = INT2PTR(void(*)(double, double, int, short), SvIV(c_func) );
	(*func)(d0, d1, i2, s3);

double
nci_dddis( c_func, d0, d1, i2, s3 )
	SV* c_func
	double d0
	double d1
	int i2
	short s3
PREINIT:
	double(*func)(double, double, int, short);
CODE:
	func   = INT2PTR(double(*)(double, double, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2, s3);
OUTPUT:
	RETVAL

short
nci_sddis( c_func, d0, d1, i2, s3 )
	SV* c_func
	double d0
	double d1
	int i2
	short s3
PREINIT:
	short(*func)(double, double, int, short);
CODE:
	func   = INT2PTR(short(*)(double, double, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2, s3);
OUTPUT:
	RETVAL

float
nci_fddis( c_func, d0, d1, i2, s3 )
	SV* c_func
	double d0
	double d1
	int i2
	short s3
PREINIT:
	float(*func)(double, double, int, short);
CODE:
	func   = INT2PTR(float(*)(double, double, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2, s3);
OUTPUT:
	RETVAL

char *
nci_tddis( c_func, d0, d1, i2, s3 )
	SV* c_func
	double d0
	double d1
	int i2
	short s3
PREINIT:
	char *(*func)(double, double, int, short);
CODE:
	func   = INT2PTR(char *(*)(double, double, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2, s3);
OUTPUT:
	RETVAL

int
nci_iddis( c_func, d0, d1, i2, s3 )
	SV* c_func
	double d0
	double d1
	int i2
	short s3
PREINIT:
	int(*func)(double, double, int, short);
CODE:
	func   = INT2PTR(int(*)(double, double, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2, s3);
OUTPUT:
	RETVAL

void *
nci_psdis( c_func, s0, d1, i2, s3 )
	SV* c_func
	short s0
	double d1
	int i2
	short s3
PREINIT:
	void *(*func)(short, double, int, short);
CODE:
	func   = INT2PTR(void *(*)(short, double, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2, s3);
OUTPUT:
	RETVAL

void
nci_vsdis( c_func, s0, d1, i2, s3 )
	SV* c_func
	short s0
	double d1
	int i2
	short s3
PREINIT:
	void(*func)(short, double, int, short);
CODE:
	func   = INT2PTR(void(*)(short, double, int, short), SvIV(c_func) );
	(*func)(s0, d1, i2, s3);

double
nci_dsdis( c_func, s0, d1, i2, s3 )
	SV* c_func
	short s0
	double d1
	int i2
	short s3
PREINIT:
	double(*func)(short, double, int, short);
CODE:
	func   = INT2PTR(double(*)(short, double, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2, s3);
OUTPUT:
	RETVAL

short
nci_ssdis( c_func, s0, d1, i2, s3 )
	SV* c_func
	short s0
	double d1
	int i2
	short s3
PREINIT:
	short(*func)(short, double, int, short);
CODE:
	func   = INT2PTR(short(*)(short, double, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2, s3);
OUTPUT:
	RETVAL

float
nci_fsdis( c_func, s0, d1, i2, s3 )
	SV* c_func
	short s0
	double d1
	int i2
	short s3
PREINIT:
	float(*func)(short, double, int, short);
CODE:
	func   = INT2PTR(float(*)(short, double, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2, s3);
OUTPUT:
	RETVAL

char *
nci_tsdis( c_func, s0, d1, i2, s3 )
	SV* c_func
	short s0
	double d1
	int i2
	short s3
PREINIT:
	char *(*func)(short, double, int, short);
CODE:
	func   = INT2PTR(char *(*)(short, double, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2, s3);
OUTPUT:
	RETVAL

int
nci_isdis( c_func, s0, d1, i2, s3 )
	SV* c_func
	short s0
	double d1
	int i2
	short s3
PREINIT:
	int(*func)(short, double, int, short);
CODE:
	func   = INT2PTR(int(*)(short, double, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2, s3);
OUTPUT:
	RETVAL

void *
nci_pfdis( c_func, f0, d1, i2, s3 )
	SV* c_func
	float f0
	double d1
	int i2
	short s3
PREINIT:
	void *(*func)(float, double, int, short);
CODE:
	func   = INT2PTR(void *(*)(float, double, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2, s3);
OUTPUT:
	RETVAL

void
nci_vfdis( c_func, f0, d1, i2, s3 )
	SV* c_func
	float f0
	double d1
	int i2
	short s3
PREINIT:
	void(*func)(float, double, int, short);
CODE:
	func   = INT2PTR(void(*)(float, double, int, short), SvIV(c_func) );
	(*func)(f0, d1, i2, s3);

double
nci_dfdis( c_func, f0, d1, i2, s3 )
	SV* c_func
	float f0
	double d1
	int i2
	short s3
PREINIT:
	double(*func)(float, double, int, short);
CODE:
	func   = INT2PTR(double(*)(float, double, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2, s3);
OUTPUT:
	RETVAL

short
nci_sfdis( c_func, f0, d1, i2, s3 )
	SV* c_func
	float f0
	double d1
	int i2
	short s3
PREINIT:
	short(*func)(float, double, int, short);
CODE:
	func   = INT2PTR(short(*)(float, double, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2, s3);
OUTPUT:
	RETVAL

float
nci_ffdis( c_func, f0, d1, i2, s3 )
	SV* c_func
	float f0
	double d1
	int i2
	short s3
PREINIT:
	float(*func)(float, double, int, short);
CODE:
	func   = INT2PTR(float(*)(float, double, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2, s3);
OUTPUT:
	RETVAL

char *
nci_tfdis( c_func, f0, d1, i2, s3 )
	SV* c_func
	float f0
	double d1
	int i2
	short s3
PREINIT:
	char *(*func)(float, double, int, short);
CODE:
	func   = INT2PTR(char *(*)(float, double, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2, s3);
OUTPUT:
	RETVAL

int
nci_ifdis( c_func, f0, d1, i2, s3 )
	SV* c_func
	float f0
	double d1
	int i2
	short s3
PREINIT:
	int(*func)(float, double, int, short);
CODE:
	func   = INT2PTR(int(*)(float, double, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2, s3);
OUTPUT:
	RETVAL

void *
nci_ptdis( c_func, t0, d1, i2, s3 )
	SV* c_func
	char * t0
	double d1
	int i2
	short s3
PREINIT:
	void *(*func)(char *, double, int, short);
CODE:
	func   = INT2PTR(void *(*)(char *, double, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2, s3);
OUTPUT:
	RETVAL

void
nci_vtdis( c_func, t0, d1, i2, s3 )
	SV* c_func
	char * t0
	double d1
	int i2
	short s3
PREINIT:
	void(*func)(char *, double, int, short);
CODE:
	func   = INT2PTR(void(*)(char *, double, int, short), SvIV(c_func) );
	(*func)(t0, d1, i2, s3);

double
nci_dtdis( c_func, t0, d1, i2, s3 )
	SV* c_func
	char * t0
	double d1
	int i2
	short s3
PREINIT:
	double(*func)(char *, double, int, short);
CODE:
	func   = INT2PTR(double(*)(char *, double, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2, s3);
OUTPUT:
	RETVAL

short
nci_stdis( c_func, t0, d1, i2, s3 )
	SV* c_func
	char * t0
	double d1
	int i2
	short s3
PREINIT:
	short(*func)(char *, double, int, short);
CODE:
	func   = INT2PTR(short(*)(char *, double, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2, s3);
OUTPUT:
	RETVAL

float
nci_ftdis( c_func, t0, d1, i2, s3 )
	SV* c_func
	char * t0
	double d1
	int i2
	short s3
PREINIT:
	float(*func)(char *, double, int, short);
CODE:
	func   = INT2PTR(float(*)(char *, double, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2, s3);
OUTPUT:
	RETVAL

char *
nci_ttdis( c_func, t0, d1, i2, s3 )
	SV* c_func
	char * t0
	double d1
	int i2
	short s3
PREINIT:
	char *(*func)(char *, double, int, short);
CODE:
	func   = INT2PTR(char *(*)(char *, double, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2, s3);
OUTPUT:
	RETVAL

int
nci_itdis( c_func, t0, d1, i2, s3 )
	SV* c_func
	char * t0
	double d1
	int i2
	short s3
PREINIT:
	int(*func)(char *, double, int, short);
CODE:
	func   = INT2PTR(int(*)(char *, double, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2, s3);
OUTPUT:
	RETVAL

void *
nci_pidis( c_func, i0, d1, i2, s3 )
	SV* c_func
	int i0
	double d1
	int i2
	short s3
PREINIT:
	void *(*func)(int, double, int, short);
CODE:
	func   = INT2PTR(void *(*)(int, double, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2, s3);
OUTPUT:
	RETVAL

void
nci_vidis( c_func, i0, d1, i2, s3 )
	SV* c_func
	int i0
	double d1
	int i2
	short s3
PREINIT:
	void(*func)(int, double, int, short);
CODE:
	func   = INT2PTR(void(*)(int, double, int, short), SvIV(c_func) );
	(*func)(i0, d1, i2, s3);

double
nci_didis( c_func, i0, d1, i2, s3 )
	SV* c_func
	int i0
	double d1
	int i2
	short s3
PREINIT:
	double(*func)(int, double, int, short);
CODE:
	func   = INT2PTR(double(*)(int, double, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2, s3);
OUTPUT:
	RETVAL

short
nci_sidis( c_func, i0, d1, i2, s3 )
	SV* c_func
	int i0
	double d1
	int i2
	short s3
PREINIT:
	short(*func)(int, double, int, short);
CODE:
	func   = INT2PTR(short(*)(int, double, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2, s3);
OUTPUT:
	RETVAL

float
nci_fidis( c_func, i0, d1, i2, s3 )
	SV* c_func
	int i0
	double d1
	int i2
	short s3
PREINIT:
	float(*func)(int, double, int, short);
CODE:
	func   = INT2PTR(float(*)(int, double, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2, s3);
OUTPUT:
	RETVAL

char *
nci_tidis( c_func, i0, d1, i2, s3 )
	SV* c_func
	int i0
	double d1
	int i2
	short s3
PREINIT:
	char *(*func)(int, double, int, short);
CODE:
	func   = INT2PTR(char *(*)(int, double, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2, s3);
OUTPUT:
	RETVAL

int
nci_iidis( c_func, i0, d1, i2, s3 )
	SV* c_func
	int i0
	double d1
	int i2
	short s3
PREINIT:
	int(*func)(int, double, int, short);
CODE:
	func   = INT2PTR(int(*)(int, double, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2, s3);
OUTPUT:
	RETVAL

void *
nci_ppsis( c_func, p0, s1, i2, s3 )
	SV* c_func
	void * p0
	short s1
	int i2
	short s3
PREINIT:
	void *(*func)(void *, short, int, short);
CODE:
	func   = INT2PTR(void *(*)(void *, short, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2, s3);
OUTPUT:
	RETVAL

void
nci_vpsis( c_func, p0, s1, i2, s3 )
	SV* c_func
	void * p0
	short s1
	int i2
	short s3
PREINIT:
	void(*func)(void *, short, int, short);
CODE:
	func   = INT2PTR(void(*)(void *, short, int, short), SvIV(c_func) );
	(*func)(p0, s1, i2, s3);

double
nci_dpsis( c_func, p0, s1, i2, s3 )
	SV* c_func
	void * p0
	short s1
	int i2
	short s3
PREINIT:
	double(*func)(void *, short, int, short);
CODE:
	func   = INT2PTR(double(*)(void *, short, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2, s3);
OUTPUT:
	RETVAL

short
nci_spsis( c_func, p0, s1, i2, s3 )
	SV* c_func
	void * p0
	short s1
	int i2
	short s3
PREINIT:
	short(*func)(void *, short, int, short);
CODE:
	func   = INT2PTR(short(*)(void *, short, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2, s3);
OUTPUT:
	RETVAL

float
nci_fpsis( c_func, p0, s1, i2, s3 )
	SV* c_func
	void * p0
	short s1
	int i2
	short s3
PREINIT:
	float(*func)(void *, short, int, short);
CODE:
	func   = INT2PTR(float(*)(void *, short, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2, s3);
OUTPUT:
	RETVAL

char *
nci_tpsis( c_func, p0, s1, i2, s3 )
	SV* c_func
	void * p0
	short s1
	int i2
	short s3
PREINIT:
	char *(*func)(void *, short, int, short);
CODE:
	func   = INT2PTR(char *(*)(void *, short, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2, s3);
OUTPUT:
	RETVAL

int
nci_ipsis( c_func, p0, s1, i2, s3 )
	SV* c_func
	void * p0
	short s1
	int i2
	short s3
PREINIT:
	int(*func)(void *, short, int, short);
CODE:
	func   = INT2PTR(int(*)(void *, short, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2, s3);
OUTPUT:
	RETVAL

void *
nci_pvsis( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvsis( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvsis( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svsis( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvsis( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvsis( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivsis( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdsis( c_func, d0, s1, i2, s3 )
	SV* c_func
	double d0
	short s1
	int i2
	short s3
PREINIT:
	void *(*func)(double, short, int, short);
CODE:
	func   = INT2PTR(void *(*)(double, short, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2, s3);
OUTPUT:
	RETVAL

void
nci_vdsis( c_func, d0, s1, i2, s3 )
	SV* c_func
	double d0
	short s1
	int i2
	short s3
PREINIT:
	void(*func)(double, short, int, short);
CODE:
	func   = INT2PTR(void(*)(double, short, int, short), SvIV(c_func) );
	(*func)(d0, s1, i2, s3);

double
nci_ddsis( c_func, d0, s1, i2, s3 )
	SV* c_func
	double d0
	short s1
	int i2
	short s3
PREINIT:
	double(*func)(double, short, int, short);
CODE:
	func   = INT2PTR(double(*)(double, short, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2, s3);
OUTPUT:
	RETVAL

short
nci_sdsis( c_func, d0, s1, i2, s3 )
	SV* c_func
	double d0
	short s1
	int i2
	short s3
PREINIT:
	short(*func)(double, short, int, short);
CODE:
	func   = INT2PTR(short(*)(double, short, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2, s3);
OUTPUT:
	RETVAL

float
nci_fdsis( c_func, d0, s1, i2, s3 )
	SV* c_func
	double d0
	short s1
	int i2
	short s3
PREINIT:
	float(*func)(double, short, int, short);
CODE:
	func   = INT2PTR(float(*)(double, short, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2, s3);
OUTPUT:
	RETVAL

char *
nci_tdsis( c_func, d0, s1, i2, s3 )
	SV* c_func
	double d0
	short s1
	int i2
	short s3
PREINIT:
	char *(*func)(double, short, int, short);
CODE:
	func   = INT2PTR(char *(*)(double, short, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2, s3);
OUTPUT:
	RETVAL

int
nci_idsis( c_func, d0, s1, i2, s3 )
	SV* c_func
	double d0
	short s1
	int i2
	short s3
PREINIT:
	int(*func)(double, short, int, short);
CODE:
	func   = INT2PTR(int(*)(double, short, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2, s3);
OUTPUT:
	RETVAL

void *
nci_pssis( c_func, s0, s1, i2, s3 )
	SV* c_func
	short s0
	short s1
	int i2
	short s3
PREINIT:
	void *(*func)(short, short, int, short);
CODE:
	func   = INT2PTR(void *(*)(short, short, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2, s3);
OUTPUT:
	RETVAL

void
nci_vssis( c_func, s0, s1, i2, s3 )
	SV* c_func
	short s0
	short s1
	int i2
	short s3
PREINIT:
	void(*func)(short, short, int, short);
CODE:
	func   = INT2PTR(void(*)(short, short, int, short), SvIV(c_func) );
	(*func)(s0, s1, i2, s3);

double
nci_dssis( c_func, s0, s1, i2, s3 )
	SV* c_func
	short s0
	short s1
	int i2
	short s3
PREINIT:
	double(*func)(short, short, int, short);
CODE:
	func   = INT2PTR(double(*)(short, short, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2, s3);
OUTPUT:
	RETVAL

short
nci_sssis( c_func, s0, s1, i2, s3 )
	SV* c_func
	short s0
	short s1
	int i2
	short s3
PREINIT:
	short(*func)(short, short, int, short);
CODE:
	func   = INT2PTR(short(*)(short, short, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2, s3);
OUTPUT:
	RETVAL

float
nci_fssis( c_func, s0, s1, i2, s3 )
	SV* c_func
	short s0
	short s1
	int i2
	short s3
PREINIT:
	float(*func)(short, short, int, short);
CODE:
	func   = INT2PTR(float(*)(short, short, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2, s3);
OUTPUT:
	RETVAL

char *
nci_tssis( c_func, s0, s1, i2, s3 )
	SV* c_func
	short s0
	short s1
	int i2
	short s3
PREINIT:
	char *(*func)(short, short, int, short);
CODE:
	func   = INT2PTR(char *(*)(short, short, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2, s3);
OUTPUT:
	RETVAL

int
nci_issis( c_func, s0, s1, i2, s3 )
	SV* c_func
	short s0
	short s1
	int i2
	short s3
PREINIT:
	int(*func)(short, short, int, short);
CODE:
	func   = INT2PTR(int(*)(short, short, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2, s3);
OUTPUT:
	RETVAL

void *
nci_pfsis( c_func, f0, s1, i2, s3 )
	SV* c_func
	float f0
	short s1
	int i2
	short s3
PREINIT:
	void *(*func)(float, short, int, short);
CODE:
	func   = INT2PTR(void *(*)(float, short, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2, s3);
OUTPUT:
	RETVAL

void
nci_vfsis( c_func, f0, s1, i2, s3 )
	SV* c_func
	float f0
	short s1
	int i2
	short s3
PREINIT:
	void(*func)(float, short, int, short);
CODE:
	func   = INT2PTR(void(*)(float, short, int, short), SvIV(c_func) );
	(*func)(f0, s1, i2, s3);

double
nci_dfsis( c_func, f0, s1, i2, s3 )
	SV* c_func
	float f0
	short s1
	int i2
	short s3
PREINIT:
	double(*func)(float, short, int, short);
CODE:
	func   = INT2PTR(double(*)(float, short, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2, s3);
OUTPUT:
	RETVAL

short
nci_sfsis( c_func, f0, s1, i2, s3 )
	SV* c_func
	float f0
	short s1
	int i2
	short s3
PREINIT:
	short(*func)(float, short, int, short);
CODE:
	func   = INT2PTR(short(*)(float, short, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2, s3);
OUTPUT:
	RETVAL

float
nci_ffsis( c_func, f0, s1, i2, s3 )
	SV* c_func
	float f0
	short s1
	int i2
	short s3
PREINIT:
	float(*func)(float, short, int, short);
CODE:
	func   = INT2PTR(float(*)(float, short, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2, s3);
OUTPUT:
	RETVAL

char *
nci_tfsis( c_func, f0, s1, i2, s3 )
	SV* c_func
	float f0
	short s1
	int i2
	short s3
PREINIT:
	char *(*func)(float, short, int, short);
CODE:
	func   = INT2PTR(char *(*)(float, short, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2, s3);
OUTPUT:
	RETVAL

int
nci_ifsis( c_func, f0, s1, i2, s3 )
	SV* c_func
	float f0
	short s1
	int i2
	short s3
PREINIT:
	int(*func)(float, short, int, short);
CODE:
	func   = INT2PTR(int(*)(float, short, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2, s3);
OUTPUT:
	RETVAL

void *
nci_ptsis( c_func, t0, s1, i2, s3 )
	SV* c_func
	char * t0
	short s1
	int i2
	short s3
PREINIT:
	void *(*func)(char *, short, int, short);
CODE:
	func   = INT2PTR(void *(*)(char *, short, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2, s3);
OUTPUT:
	RETVAL

void
nci_vtsis( c_func, t0, s1, i2, s3 )
	SV* c_func
	char * t0
	short s1
	int i2
	short s3
PREINIT:
	void(*func)(char *, short, int, short);
CODE:
	func   = INT2PTR(void(*)(char *, short, int, short), SvIV(c_func) );
	(*func)(t0, s1, i2, s3);

double
nci_dtsis( c_func, t0, s1, i2, s3 )
	SV* c_func
	char * t0
	short s1
	int i2
	short s3
PREINIT:
	double(*func)(char *, short, int, short);
CODE:
	func   = INT2PTR(double(*)(char *, short, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2, s3);
OUTPUT:
	RETVAL

short
nci_stsis( c_func, t0, s1, i2, s3 )
	SV* c_func
	char * t0
	short s1
	int i2
	short s3
PREINIT:
	short(*func)(char *, short, int, short);
CODE:
	func   = INT2PTR(short(*)(char *, short, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2, s3);
OUTPUT:
	RETVAL

float
nci_ftsis( c_func, t0, s1, i2, s3 )
	SV* c_func
	char * t0
	short s1
	int i2
	short s3
PREINIT:
	float(*func)(char *, short, int, short);
CODE:
	func   = INT2PTR(float(*)(char *, short, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2, s3);
OUTPUT:
	RETVAL

char *
nci_ttsis( c_func, t0, s1, i2, s3 )
	SV* c_func
	char * t0
	short s1
	int i2
	short s3
PREINIT:
	char *(*func)(char *, short, int, short);
CODE:
	func   = INT2PTR(char *(*)(char *, short, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2, s3);
OUTPUT:
	RETVAL

int
nci_itsis( c_func, t0, s1, i2, s3 )
	SV* c_func
	char * t0
	short s1
	int i2
	short s3
PREINIT:
	int(*func)(char *, short, int, short);
CODE:
	func   = INT2PTR(int(*)(char *, short, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2, s3);
OUTPUT:
	RETVAL

void *
nci_pisis( c_func, i0, s1, i2, s3 )
	SV* c_func
	int i0
	short s1
	int i2
	short s3
PREINIT:
	void *(*func)(int, short, int, short);
CODE:
	func   = INT2PTR(void *(*)(int, short, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2, s3);
OUTPUT:
	RETVAL

void
nci_visis( c_func, i0, s1, i2, s3 )
	SV* c_func
	int i0
	short s1
	int i2
	short s3
PREINIT:
	void(*func)(int, short, int, short);
CODE:
	func   = INT2PTR(void(*)(int, short, int, short), SvIV(c_func) );
	(*func)(i0, s1, i2, s3);

double
nci_disis( c_func, i0, s1, i2, s3 )
	SV* c_func
	int i0
	short s1
	int i2
	short s3
PREINIT:
	double(*func)(int, short, int, short);
CODE:
	func   = INT2PTR(double(*)(int, short, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2, s3);
OUTPUT:
	RETVAL

short
nci_sisis( c_func, i0, s1, i2, s3 )
	SV* c_func
	int i0
	short s1
	int i2
	short s3
PREINIT:
	short(*func)(int, short, int, short);
CODE:
	func   = INT2PTR(short(*)(int, short, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2, s3);
OUTPUT:
	RETVAL

float
nci_fisis( c_func, i0, s1, i2, s3 )
	SV* c_func
	int i0
	short s1
	int i2
	short s3
PREINIT:
	float(*func)(int, short, int, short);
CODE:
	func   = INT2PTR(float(*)(int, short, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2, s3);
OUTPUT:
	RETVAL

char *
nci_tisis( c_func, i0, s1, i2, s3 )
	SV* c_func
	int i0
	short s1
	int i2
	short s3
PREINIT:
	char *(*func)(int, short, int, short);
CODE:
	func   = INT2PTR(char *(*)(int, short, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2, s3);
OUTPUT:
	RETVAL

int
nci_iisis( c_func, i0, s1, i2, s3 )
	SV* c_func
	int i0
	short s1
	int i2
	short s3
PREINIT:
	int(*func)(int, short, int, short);
CODE:
	func   = INT2PTR(int(*)(int, short, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2, s3);
OUTPUT:
	RETVAL

void *
nci_ppfis( c_func, p0, f1, i2, s3 )
	SV* c_func
	void * p0
	float f1
	int i2
	short s3
PREINIT:
	void *(*func)(void *, float, int, short);
CODE:
	func   = INT2PTR(void *(*)(void *, float, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2, s3);
OUTPUT:
	RETVAL

void
nci_vpfis( c_func, p0, f1, i2, s3 )
	SV* c_func
	void * p0
	float f1
	int i2
	short s3
PREINIT:
	void(*func)(void *, float, int, short);
CODE:
	func   = INT2PTR(void(*)(void *, float, int, short), SvIV(c_func) );
	(*func)(p0, f1, i2, s3);

double
nci_dpfis( c_func, p0, f1, i2, s3 )
	SV* c_func
	void * p0
	float f1
	int i2
	short s3
PREINIT:
	double(*func)(void *, float, int, short);
CODE:
	func   = INT2PTR(double(*)(void *, float, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2, s3);
OUTPUT:
	RETVAL

short
nci_spfis( c_func, p0, f1, i2, s3 )
	SV* c_func
	void * p0
	float f1
	int i2
	short s3
PREINIT:
	short(*func)(void *, float, int, short);
CODE:
	func   = INT2PTR(short(*)(void *, float, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2, s3);
OUTPUT:
	RETVAL

float
nci_fpfis( c_func, p0, f1, i2, s3 )
	SV* c_func
	void * p0
	float f1
	int i2
	short s3
PREINIT:
	float(*func)(void *, float, int, short);
CODE:
	func   = INT2PTR(float(*)(void *, float, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2, s3);
OUTPUT:
	RETVAL

char *
nci_tpfis( c_func, p0, f1, i2, s3 )
	SV* c_func
	void * p0
	float f1
	int i2
	short s3
PREINIT:
	char *(*func)(void *, float, int, short);
CODE:
	func   = INT2PTR(char *(*)(void *, float, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2, s3);
OUTPUT:
	RETVAL

int
nci_ipfis( c_func, p0, f1, i2, s3 )
	SV* c_func
	void * p0
	float f1
	int i2
	short s3
PREINIT:
	int(*func)(void *, float, int, short);
CODE:
	func   = INT2PTR(int(*)(void *, float, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2, s3);
OUTPUT:
	RETVAL

void *
nci_pvfis( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvfis( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvfis( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svfis( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvfis( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvfis( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivfis( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdfis( c_func, d0, f1, i2, s3 )
	SV* c_func
	double d0
	float f1
	int i2
	short s3
PREINIT:
	void *(*func)(double, float, int, short);
CODE:
	func   = INT2PTR(void *(*)(double, float, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2, s3);
OUTPUT:
	RETVAL

void
nci_vdfis( c_func, d0, f1, i2, s3 )
	SV* c_func
	double d0
	float f1
	int i2
	short s3
PREINIT:
	void(*func)(double, float, int, short);
CODE:
	func   = INT2PTR(void(*)(double, float, int, short), SvIV(c_func) );
	(*func)(d0, f1, i2, s3);

double
nci_ddfis( c_func, d0, f1, i2, s3 )
	SV* c_func
	double d0
	float f1
	int i2
	short s3
PREINIT:
	double(*func)(double, float, int, short);
CODE:
	func   = INT2PTR(double(*)(double, float, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2, s3);
OUTPUT:
	RETVAL

short
nci_sdfis( c_func, d0, f1, i2, s3 )
	SV* c_func
	double d0
	float f1
	int i2
	short s3
PREINIT:
	short(*func)(double, float, int, short);
CODE:
	func   = INT2PTR(short(*)(double, float, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2, s3);
OUTPUT:
	RETVAL

float
nci_fdfis( c_func, d0, f1, i2, s3 )
	SV* c_func
	double d0
	float f1
	int i2
	short s3
PREINIT:
	float(*func)(double, float, int, short);
CODE:
	func   = INT2PTR(float(*)(double, float, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2, s3);
OUTPUT:
	RETVAL

char *
nci_tdfis( c_func, d0, f1, i2, s3 )
	SV* c_func
	double d0
	float f1
	int i2
	short s3
PREINIT:
	char *(*func)(double, float, int, short);
CODE:
	func   = INT2PTR(char *(*)(double, float, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2, s3);
OUTPUT:
	RETVAL

int
nci_idfis( c_func, d0, f1, i2, s3 )
	SV* c_func
	double d0
	float f1
	int i2
	short s3
PREINIT:
	int(*func)(double, float, int, short);
CODE:
	func   = INT2PTR(int(*)(double, float, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2, s3);
OUTPUT:
	RETVAL

void *
nci_psfis( c_func, s0, f1, i2, s3 )
	SV* c_func
	short s0
	float f1
	int i2
	short s3
PREINIT:
	void *(*func)(short, float, int, short);
CODE:
	func   = INT2PTR(void *(*)(short, float, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2, s3);
OUTPUT:
	RETVAL

void
nci_vsfis( c_func, s0, f1, i2, s3 )
	SV* c_func
	short s0
	float f1
	int i2
	short s3
PREINIT:
	void(*func)(short, float, int, short);
CODE:
	func   = INT2PTR(void(*)(short, float, int, short), SvIV(c_func) );
	(*func)(s0, f1, i2, s3);

double
nci_dsfis( c_func, s0, f1, i2, s3 )
	SV* c_func
	short s0
	float f1
	int i2
	short s3
PREINIT:
	double(*func)(short, float, int, short);
CODE:
	func   = INT2PTR(double(*)(short, float, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2, s3);
OUTPUT:
	RETVAL

short
nci_ssfis( c_func, s0, f1, i2, s3 )
	SV* c_func
	short s0
	float f1
	int i2
	short s3
PREINIT:
	short(*func)(short, float, int, short);
CODE:
	func   = INT2PTR(short(*)(short, float, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2, s3);
OUTPUT:
	RETVAL

float
nci_fsfis( c_func, s0, f1, i2, s3 )
	SV* c_func
	short s0
	float f1
	int i2
	short s3
PREINIT:
	float(*func)(short, float, int, short);
CODE:
	func   = INT2PTR(float(*)(short, float, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2, s3);
OUTPUT:
	RETVAL

char *
nci_tsfis( c_func, s0, f1, i2, s3 )
	SV* c_func
	short s0
	float f1
	int i2
	short s3
PREINIT:
	char *(*func)(short, float, int, short);
CODE:
	func   = INT2PTR(char *(*)(short, float, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2, s3);
OUTPUT:
	RETVAL

int
nci_isfis( c_func, s0, f1, i2, s3 )
	SV* c_func
	short s0
	float f1
	int i2
	short s3
PREINIT:
	int(*func)(short, float, int, short);
CODE:
	func   = INT2PTR(int(*)(short, float, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2, s3);
OUTPUT:
	RETVAL

void *
nci_pffis( c_func, f0, f1, i2, s3 )
	SV* c_func
	float f0
	float f1
	int i2
	short s3
PREINIT:
	void *(*func)(float, float, int, short);
CODE:
	func   = INT2PTR(void *(*)(float, float, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2, s3);
OUTPUT:
	RETVAL

void
nci_vffis( c_func, f0, f1, i2, s3 )
	SV* c_func
	float f0
	float f1
	int i2
	short s3
PREINIT:
	void(*func)(float, float, int, short);
CODE:
	func   = INT2PTR(void(*)(float, float, int, short), SvIV(c_func) );
	(*func)(f0, f1, i2, s3);

double
nci_dffis( c_func, f0, f1, i2, s3 )
	SV* c_func
	float f0
	float f1
	int i2
	short s3
PREINIT:
	double(*func)(float, float, int, short);
CODE:
	func   = INT2PTR(double(*)(float, float, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2, s3);
OUTPUT:
	RETVAL

short
nci_sffis( c_func, f0, f1, i2, s3 )
	SV* c_func
	float f0
	float f1
	int i2
	short s3
PREINIT:
	short(*func)(float, float, int, short);
CODE:
	func   = INT2PTR(short(*)(float, float, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2, s3);
OUTPUT:
	RETVAL

float
nci_fffis( c_func, f0, f1, i2, s3 )
	SV* c_func
	float f0
	float f1
	int i2
	short s3
PREINIT:
	float(*func)(float, float, int, short);
CODE:
	func   = INT2PTR(float(*)(float, float, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2, s3);
OUTPUT:
	RETVAL

char *
nci_tffis( c_func, f0, f1, i2, s3 )
	SV* c_func
	float f0
	float f1
	int i2
	short s3
PREINIT:
	char *(*func)(float, float, int, short);
CODE:
	func   = INT2PTR(char *(*)(float, float, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2, s3);
OUTPUT:
	RETVAL

int
nci_iffis( c_func, f0, f1, i2, s3 )
	SV* c_func
	float f0
	float f1
	int i2
	short s3
PREINIT:
	int(*func)(float, float, int, short);
CODE:
	func   = INT2PTR(int(*)(float, float, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2, s3);
OUTPUT:
	RETVAL

void *
nci_ptfis( c_func, t0, f1, i2, s3 )
	SV* c_func
	char * t0
	float f1
	int i2
	short s3
PREINIT:
	void *(*func)(char *, float, int, short);
CODE:
	func   = INT2PTR(void *(*)(char *, float, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2, s3);
OUTPUT:
	RETVAL

void
nci_vtfis( c_func, t0, f1, i2, s3 )
	SV* c_func
	char * t0
	float f1
	int i2
	short s3
PREINIT:
	void(*func)(char *, float, int, short);
CODE:
	func   = INT2PTR(void(*)(char *, float, int, short), SvIV(c_func) );
	(*func)(t0, f1, i2, s3);

double
nci_dtfis( c_func, t0, f1, i2, s3 )
	SV* c_func
	char * t0
	float f1
	int i2
	short s3
PREINIT:
	double(*func)(char *, float, int, short);
CODE:
	func   = INT2PTR(double(*)(char *, float, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2, s3);
OUTPUT:
	RETVAL

short
nci_stfis( c_func, t0, f1, i2, s3 )
	SV* c_func
	char * t0
	float f1
	int i2
	short s3
PREINIT:
	short(*func)(char *, float, int, short);
CODE:
	func   = INT2PTR(short(*)(char *, float, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2, s3);
OUTPUT:
	RETVAL

float
nci_ftfis( c_func, t0, f1, i2, s3 )
	SV* c_func
	char * t0
	float f1
	int i2
	short s3
PREINIT:
	float(*func)(char *, float, int, short);
CODE:
	func   = INT2PTR(float(*)(char *, float, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2, s3);
OUTPUT:
	RETVAL

char *
nci_ttfis( c_func, t0, f1, i2, s3 )
	SV* c_func
	char * t0
	float f1
	int i2
	short s3
PREINIT:
	char *(*func)(char *, float, int, short);
CODE:
	func   = INT2PTR(char *(*)(char *, float, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2, s3);
OUTPUT:
	RETVAL

int
nci_itfis( c_func, t0, f1, i2, s3 )
	SV* c_func
	char * t0
	float f1
	int i2
	short s3
PREINIT:
	int(*func)(char *, float, int, short);
CODE:
	func   = INT2PTR(int(*)(char *, float, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2, s3);
OUTPUT:
	RETVAL

void *
nci_pifis( c_func, i0, f1, i2, s3 )
	SV* c_func
	int i0
	float f1
	int i2
	short s3
PREINIT:
	void *(*func)(int, float, int, short);
CODE:
	func   = INT2PTR(void *(*)(int, float, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2, s3);
OUTPUT:
	RETVAL

void
nci_vifis( c_func, i0, f1, i2, s3 )
	SV* c_func
	int i0
	float f1
	int i2
	short s3
PREINIT:
	void(*func)(int, float, int, short);
CODE:
	func   = INT2PTR(void(*)(int, float, int, short), SvIV(c_func) );
	(*func)(i0, f1, i2, s3);

double
nci_difis( c_func, i0, f1, i2, s3 )
	SV* c_func
	int i0
	float f1
	int i2
	short s3
PREINIT:
	double(*func)(int, float, int, short);
CODE:
	func   = INT2PTR(double(*)(int, float, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2, s3);
OUTPUT:
	RETVAL

short
nci_sifis( c_func, i0, f1, i2, s3 )
	SV* c_func
	int i0
	float f1
	int i2
	short s3
PREINIT:
	short(*func)(int, float, int, short);
CODE:
	func   = INT2PTR(short(*)(int, float, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2, s3);
OUTPUT:
	RETVAL

float
nci_fifis( c_func, i0, f1, i2, s3 )
	SV* c_func
	int i0
	float f1
	int i2
	short s3
PREINIT:
	float(*func)(int, float, int, short);
CODE:
	func   = INT2PTR(float(*)(int, float, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2, s3);
OUTPUT:
	RETVAL

char *
nci_tifis( c_func, i0, f1, i2, s3 )
	SV* c_func
	int i0
	float f1
	int i2
	short s3
PREINIT:
	char *(*func)(int, float, int, short);
CODE:
	func   = INT2PTR(char *(*)(int, float, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2, s3);
OUTPUT:
	RETVAL

int
nci_iifis( c_func, i0, f1, i2, s3 )
	SV* c_func
	int i0
	float f1
	int i2
	short s3
PREINIT:
	int(*func)(int, float, int, short);
CODE:
	func   = INT2PTR(int(*)(int, float, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2, s3);
OUTPUT:
	RETVAL

void *
nci_pptis( c_func, p0, t1, i2, s3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	short s3
PREINIT:
	void *(*func)(void *, char *, int, short);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2, s3);
OUTPUT:
	RETVAL

void
nci_vptis( c_func, p0, t1, i2, s3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	short s3
PREINIT:
	void(*func)(void *, char *, int, short);
CODE:
	func   = INT2PTR(void(*)(void *, char *, int, short), SvIV(c_func) );
	(*func)(p0, t1, i2, s3);

double
nci_dptis( c_func, p0, t1, i2, s3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	short s3
PREINIT:
	double(*func)(void *, char *, int, short);
CODE:
	func   = INT2PTR(double(*)(void *, char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2, s3);
OUTPUT:
	RETVAL

short
nci_sptis( c_func, p0, t1, i2, s3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	short s3
PREINIT:
	short(*func)(void *, char *, int, short);
CODE:
	func   = INT2PTR(short(*)(void *, char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2, s3);
OUTPUT:
	RETVAL

float
nci_fptis( c_func, p0, t1, i2, s3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	short s3
PREINIT:
	float(*func)(void *, char *, int, short);
CODE:
	func   = INT2PTR(float(*)(void *, char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2, s3);
OUTPUT:
	RETVAL

char *
nci_tptis( c_func, p0, t1, i2, s3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	short s3
PREINIT:
	char *(*func)(void *, char *, int, short);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2, s3);
OUTPUT:
	RETVAL

int
nci_iptis( c_func, p0, t1, i2, s3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	short s3
PREINIT:
	int(*func)(void *, char *, int, short);
CODE:
	func   = INT2PTR(int(*)(void *, char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2, s3);
OUTPUT:
	RETVAL

void *
nci_pvtis( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvtis( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvtis( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svtis( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvtis( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvtis( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivtis( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdtis( c_func, d0, t1, i2, s3 )
	SV* c_func
	double d0
	char * t1
	int i2
	short s3
PREINIT:
	void *(*func)(double, char *, int, short);
CODE:
	func   = INT2PTR(void *(*)(double, char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2, s3);
OUTPUT:
	RETVAL

void
nci_vdtis( c_func, d0, t1, i2, s3 )
	SV* c_func
	double d0
	char * t1
	int i2
	short s3
PREINIT:
	void(*func)(double, char *, int, short);
CODE:
	func   = INT2PTR(void(*)(double, char *, int, short), SvIV(c_func) );
	(*func)(d0, t1, i2, s3);

double
nci_ddtis( c_func, d0, t1, i2, s3 )
	SV* c_func
	double d0
	char * t1
	int i2
	short s3
PREINIT:
	double(*func)(double, char *, int, short);
CODE:
	func   = INT2PTR(double(*)(double, char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2, s3);
OUTPUT:
	RETVAL

short
nci_sdtis( c_func, d0, t1, i2, s3 )
	SV* c_func
	double d0
	char * t1
	int i2
	short s3
PREINIT:
	short(*func)(double, char *, int, short);
CODE:
	func   = INT2PTR(short(*)(double, char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2, s3);
OUTPUT:
	RETVAL

float
nci_fdtis( c_func, d0, t1, i2, s3 )
	SV* c_func
	double d0
	char * t1
	int i2
	short s3
PREINIT:
	float(*func)(double, char *, int, short);
CODE:
	func   = INT2PTR(float(*)(double, char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2, s3);
OUTPUT:
	RETVAL

char *
nci_tdtis( c_func, d0, t1, i2, s3 )
	SV* c_func
	double d0
	char * t1
	int i2
	short s3
PREINIT:
	char *(*func)(double, char *, int, short);
CODE:
	func   = INT2PTR(char *(*)(double, char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2, s3);
OUTPUT:
	RETVAL

int
nci_idtis( c_func, d0, t1, i2, s3 )
	SV* c_func
	double d0
	char * t1
	int i2
	short s3
PREINIT:
	int(*func)(double, char *, int, short);
CODE:
	func   = INT2PTR(int(*)(double, char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2, s3);
OUTPUT:
	RETVAL

void *
nci_pstis( c_func, s0, t1, i2, s3 )
	SV* c_func
	short s0
	char * t1
	int i2
	short s3
PREINIT:
	void *(*func)(short, char *, int, short);
CODE:
	func   = INT2PTR(void *(*)(short, char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2, s3);
OUTPUT:
	RETVAL

void
nci_vstis( c_func, s0, t1, i2, s3 )
	SV* c_func
	short s0
	char * t1
	int i2
	short s3
PREINIT:
	void(*func)(short, char *, int, short);
CODE:
	func   = INT2PTR(void(*)(short, char *, int, short), SvIV(c_func) );
	(*func)(s0, t1, i2, s3);

double
nci_dstis( c_func, s0, t1, i2, s3 )
	SV* c_func
	short s0
	char * t1
	int i2
	short s3
PREINIT:
	double(*func)(short, char *, int, short);
CODE:
	func   = INT2PTR(double(*)(short, char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2, s3);
OUTPUT:
	RETVAL

short
nci_sstis( c_func, s0, t1, i2, s3 )
	SV* c_func
	short s0
	char * t1
	int i2
	short s3
PREINIT:
	short(*func)(short, char *, int, short);
CODE:
	func   = INT2PTR(short(*)(short, char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2, s3);
OUTPUT:
	RETVAL

float
nci_fstis( c_func, s0, t1, i2, s3 )
	SV* c_func
	short s0
	char * t1
	int i2
	short s3
PREINIT:
	float(*func)(short, char *, int, short);
CODE:
	func   = INT2PTR(float(*)(short, char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2, s3);
OUTPUT:
	RETVAL

char *
nci_tstis( c_func, s0, t1, i2, s3 )
	SV* c_func
	short s0
	char * t1
	int i2
	short s3
PREINIT:
	char *(*func)(short, char *, int, short);
CODE:
	func   = INT2PTR(char *(*)(short, char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2, s3);
OUTPUT:
	RETVAL

int
nci_istis( c_func, s0, t1, i2, s3 )
	SV* c_func
	short s0
	char * t1
	int i2
	short s3
PREINIT:
	int(*func)(short, char *, int, short);
CODE:
	func   = INT2PTR(int(*)(short, char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2, s3);
OUTPUT:
	RETVAL

void *
nci_pftis( c_func, f0, t1, i2, s3 )
	SV* c_func
	float f0
	char * t1
	int i2
	short s3
PREINIT:
	void *(*func)(float, char *, int, short);
CODE:
	func   = INT2PTR(void *(*)(float, char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2, s3);
OUTPUT:
	RETVAL

void
nci_vftis( c_func, f0, t1, i2, s3 )
	SV* c_func
	float f0
	char * t1
	int i2
	short s3
PREINIT:
	void(*func)(float, char *, int, short);
CODE:
	func   = INT2PTR(void(*)(float, char *, int, short), SvIV(c_func) );
	(*func)(f0, t1, i2, s3);

double
nci_dftis( c_func, f0, t1, i2, s3 )
	SV* c_func
	float f0
	char * t1
	int i2
	short s3
PREINIT:
	double(*func)(float, char *, int, short);
CODE:
	func   = INT2PTR(double(*)(float, char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2, s3);
OUTPUT:
	RETVAL

short
nci_sftis( c_func, f0, t1, i2, s3 )
	SV* c_func
	float f0
	char * t1
	int i2
	short s3
PREINIT:
	short(*func)(float, char *, int, short);
CODE:
	func   = INT2PTR(short(*)(float, char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2, s3);
OUTPUT:
	RETVAL

float
nci_fftis( c_func, f0, t1, i2, s3 )
	SV* c_func
	float f0
	char * t1
	int i2
	short s3
PREINIT:
	float(*func)(float, char *, int, short);
CODE:
	func   = INT2PTR(float(*)(float, char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2, s3);
OUTPUT:
	RETVAL

char *
nci_tftis( c_func, f0, t1, i2, s3 )
	SV* c_func
	float f0
	char * t1
	int i2
	short s3
PREINIT:
	char *(*func)(float, char *, int, short);
CODE:
	func   = INT2PTR(char *(*)(float, char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2, s3);
OUTPUT:
	RETVAL

int
nci_iftis( c_func, f0, t1, i2, s3 )
	SV* c_func
	float f0
	char * t1
	int i2
	short s3
PREINIT:
	int(*func)(float, char *, int, short);
CODE:
	func   = INT2PTR(int(*)(float, char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2, s3);
OUTPUT:
	RETVAL

void *
nci_pttis( c_func, t0, t1, i2, s3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	short s3
PREINIT:
	void *(*func)(char *, char *, int, short);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2, s3);
OUTPUT:
	RETVAL

void
nci_vttis( c_func, t0, t1, i2, s3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	short s3
PREINIT:
	void(*func)(char *, char *, int, short);
CODE:
	func   = INT2PTR(void(*)(char *, char *, int, short), SvIV(c_func) );
	(*func)(t0, t1, i2, s3);

double
nci_dttis( c_func, t0, t1, i2, s3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	short s3
PREINIT:
	double(*func)(char *, char *, int, short);
CODE:
	func   = INT2PTR(double(*)(char *, char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2, s3);
OUTPUT:
	RETVAL

short
nci_sttis( c_func, t0, t1, i2, s3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	short s3
PREINIT:
	short(*func)(char *, char *, int, short);
CODE:
	func   = INT2PTR(short(*)(char *, char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2, s3);
OUTPUT:
	RETVAL

float
nci_fttis( c_func, t0, t1, i2, s3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	short s3
PREINIT:
	float(*func)(char *, char *, int, short);
CODE:
	func   = INT2PTR(float(*)(char *, char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2, s3);
OUTPUT:
	RETVAL

char *
nci_tttis( c_func, t0, t1, i2, s3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	short s3
PREINIT:
	char *(*func)(char *, char *, int, short);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2, s3);
OUTPUT:
	RETVAL

int
nci_ittis( c_func, t0, t1, i2, s3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	short s3
PREINIT:
	int(*func)(char *, char *, int, short);
CODE:
	func   = INT2PTR(int(*)(char *, char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2, s3);
OUTPUT:
	RETVAL

void *
nci_pitis( c_func, i0, t1, i2, s3 )
	SV* c_func
	int i0
	char * t1
	int i2
	short s3
PREINIT:
	void *(*func)(int, char *, int, short);
CODE:
	func   = INT2PTR(void *(*)(int, char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2, s3);
OUTPUT:
	RETVAL

void
nci_vitis( c_func, i0, t1, i2, s3 )
	SV* c_func
	int i0
	char * t1
	int i2
	short s3
PREINIT:
	void(*func)(int, char *, int, short);
CODE:
	func   = INT2PTR(void(*)(int, char *, int, short), SvIV(c_func) );
	(*func)(i0, t1, i2, s3);

double
nci_ditis( c_func, i0, t1, i2, s3 )
	SV* c_func
	int i0
	char * t1
	int i2
	short s3
PREINIT:
	double(*func)(int, char *, int, short);
CODE:
	func   = INT2PTR(double(*)(int, char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2, s3);
OUTPUT:
	RETVAL

short
nci_sitis( c_func, i0, t1, i2, s3 )
	SV* c_func
	int i0
	char * t1
	int i2
	short s3
PREINIT:
	short(*func)(int, char *, int, short);
CODE:
	func   = INT2PTR(short(*)(int, char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2, s3);
OUTPUT:
	RETVAL

float
nci_fitis( c_func, i0, t1, i2, s3 )
	SV* c_func
	int i0
	char * t1
	int i2
	short s3
PREINIT:
	float(*func)(int, char *, int, short);
CODE:
	func   = INT2PTR(float(*)(int, char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2, s3);
OUTPUT:
	RETVAL

char *
nci_titis( c_func, i0, t1, i2, s3 )
	SV* c_func
	int i0
	char * t1
	int i2
	short s3
PREINIT:
	char *(*func)(int, char *, int, short);
CODE:
	func   = INT2PTR(char *(*)(int, char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2, s3);
OUTPUT:
	RETVAL

int
nci_iitis( c_func, i0, t1, i2, s3 )
	SV* c_func
	int i0
	char * t1
	int i2
	short s3
PREINIT:
	int(*func)(int, char *, int, short);
CODE:
	func   = INT2PTR(int(*)(int, char *, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2, s3);
OUTPUT:
	RETVAL

void *
nci_ppiis( c_func, p0, i1, i2, s3 )
	SV* c_func
	void * p0
	int i1
	int i2
	short s3
PREINIT:
	void *(*func)(void *, int, int, short);
CODE:
	func   = INT2PTR(void *(*)(void *, int, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2, s3);
OUTPUT:
	RETVAL

void
nci_vpiis( c_func, p0, i1, i2, s3 )
	SV* c_func
	void * p0
	int i1
	int i2
	short s3
PREINIT:
	void(*func)(void *, int, int, short);
CODE:
	func   = INT2PTR(void(*)(void *, int, int, short), SvIV(c_func) );
	(*func)(p0, i1, i2, s3);

double
nci_dpiis( c_func, p0, i1, i2, s3 )
	SV* c_func
	void * p0
	int i1
	int i2
	short s3
PREINIT:
	double(*func)(void *, int, int, short);
CODE:
	func   = INT2PTR(double(*)(void *, int, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2, s3);
OUTPUT:
	RETVAL

short
nci_spiis( c_func, p0, i1, i2, s3 )
	SV* c_func
	void * p0
	int i1
	int i2
	short s3
PREINIT:
	short(*func)(void *, int, int, short);
CODE:
	func   = INT2PTR(short(*)(void *, int, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2, s3);
OUTPUT:
	RETVAL

float
nci_fpiis( c_func, p0, i1, i2, s3 )
	SV* c_func
	void * p0
	int i1
	int i2
	short s3
PREINIT:
	float(*func)(void *, int, int, short);
CODE:
	func   = INT2PTR(float(*)(void *, int, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2, s3);
OUTPUT:
	RETVAL

char *
nci_tpiis( c_func, p0, i1, i2, s3 )
	SV* c_func
	void * p0
	int i1
	int i2
	short s3
PREINIT:
	char *(*func)(void *, int, int, short);
CODE:
	func   = INT2PTR(char *(*)(void *, int, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2, s3);
OUTPUT:
	RETVAL

int
nci_ipiis( c_func, p0, i1, i2, s3 )
	SV* c_func
	void * p0
	int i1
	int i2
	short s3
PREINIT:
	int(*func)(void *, int, int, short);
CODE:
	func   = INT2PTR(int(*)(void *, int, int, short), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2, s3);
OUTPUT:
	RETVAL

void *
nci_pviis( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vviis( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dviis( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_sviis( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fviis( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tviis( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_iviis( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdiis( c_func, d0, i1, i2, s3 )
	SV* c_func
	double d0
	int i1
	int i2
	short s3
PREINIT:
	void *(*func)(double, int, int, short);
CODE:
	func   = INT2PTR(void *(*)(double, int, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2, s3);
OUTPUT:
	RETVAL

void
nci_vdiis( c_func, d0, i1, i2, s3 )
	SV* c_func
	double d0
	int i1
	int i2
	short s3
PREINIT:
	void(*func)(double, int, int, short);
CODE:
	func   = INT2PTR(void(*)(double, int, int, short), SvIV(c_func) );
	(*func)(d0, i1, i2, s3);

double
nci_ddiis( c_func, d0, i1, i2, s3 )
	SV* c_func
	double d0
	int i1
	int i2
	short s3
PREINIT:
	double(*func)(double, int, int, short);
CODE:
	func   = INT2PTR(double(*)(double, int, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2, s3);
OUTPUT:
	RETVAL

short
nci_sdiis( c_func, d0, i1, i2, s3 )
	SV* c_func
	double d0
	int i1
	int i2
	short s3
PREINIT:
	short(*func)(double, int, int, short);
CODE:
	func   = INT2PTR(short(*)(double, int, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2, s3);
OUTPUT:
	RETVAL

float
nci_fdiis( c_func, d0, i1, i2, s3 )
	SV* c_func
	double d0
	int i1
	int i2
	short s3
PREINIT:
	float(*func)(double, int, int, short);
CODE:
	func   = INT2PTR(float(*)(double, int, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2, s3);
OUTPUT:
	RETVAL

char *
nci_tdiis( c_func, d0, i1, i2, s3 )
	SV* c_func
	double d0
	int i1
	int i2
	short s3
PREINIT:
	char *(*func)(double, int, int, short);
CODE:
	func   = INT2PTR(char *(*)(double, int, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2, s3);
OUTPUT:
	RETVAL

int
nci_idiis( c_func, d0, i1, i2, s3 )
	SV* c_func
	double d0
	int i1
	int i2
	short s3
PREINIT:
	int(*func)(double, int, int, short);
CODE:
	func   = INT2PTR(int(*)(double, int, int, short), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2, s3);
OUTPUT:
	RETVAL

void *
nci_psiis( c_func, s0, i1, i2, s3 )
	SV* c_func
	short s0
	int i1
	int i2
	short s3
PREINIT:
	void *(*func)(short, int, int, short);
CODE:
	func   = INT2PTR(void *(*)(short, int, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2, s3);
OUTPUT:
	RETVAL

void
nci_vsiis( c_func, s0, i1, i2, s3 )
	SV* c_func
	short s0
	int i1
	int i2
	short s3
PREINIT:
	void(*func)(short, int, int, short);
CODE:
	func   = INT2PTR(void(*)(short, int, int, short), SvIV(c_func) );
	(*func)(s0, i1, i2, s3);

double
nci_dsiis( c_func, s0, i1, i2, s3 )
	SV* c_func
	short s0
	int i1
	int i2
	short s3
PREINIT:
	double(*func)(short, int, int, short);
CODE:
	func   = INT2PTR(double(*)(short, int, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2, s3);
OUTPUT:
	RETVAL

short
nci_ssiis( c_func, s0, i1, i2, s3 )
	SV* c_func
	short s0
	int i1
	int i2
	short s3
PREINIT:
	short(*func)(short, int, int, short);
CODE:
	func   = INT2PTR(short(*)(short, int, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2, s3);
OUTPUT:
	RETVAL

float
nci_fsiis( c_func, s0, i1, i2, s3 )
	SV* c_func
	short s0
	int i1
	int i2
	short s3
PREINIT:
	float(*func)(short, int, int, short);
CODE:
	func   = INT2PTR(float(*)(short, int, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2, s3);
OUTPUT:
	RETVAL

char *
nci_tsiis( c_func, s0, i1, i2, s3 )
	SV* c_func
	short s0
	int i1
	int i2
	short s3
PREINIT:
	char *(*func)(short, int, int, short);
CODE:
	func   = INT2PTR(char *(*)(short, int, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2, s3);
OUTPUT:
	RETVAL

int
nci_isiis( c_func, s0, i1, i2, s3 )
	SV* c_func
	short s0
	int i1
	int i2
	short s3
PREINIT:
	int(*func)(short, int, int, short);
CODE:
	func   = INT2PTR(int(*)(short, int, int, short), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2, s3);
OUTPUT:
	RETVAL

void *
nci_pfiis( c_func, f0, i1, i2, s3 )
	SV* c_func
	float f0
	int i1
	int i2
	short s3
PREINIT:
	void *(*func)(float, int, int, short);
CODE:
	func   = INT2PTR(void *(*)(float, int, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2, s3);
OUTPUT:
	RETVAL

void
nci_vfiis( c_func, f0, i1, i2, s3 )
	SV* c_func
	float f0
	int i1
	int i2
	short s3
PREINIT:
	void(*func)(float, int, int, short);
CODE:
	func   = INT2PTR(void(*)(float, int, int, short), SvIV(c_func) );
	(*func)(f0, i1, i2, s3);

double
nci_dfiis( c_func, f0, i1, i2, s3 )
	SV* c_func
	float f0
	int i1
	int i2
	short s3
PREINIT:
	double(*func)(float, int, int, short);
CODE:
	func   = INT2PTR(double(*)(float, int, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2, s3);
OUTPUT:
	RETVAL

short
nci_sfiis( c_func, f0, i1, i2, s3 )
	SV* c_func
	float f0
	int i1
	int i2
	short s3
PREINIT:
	short(*func)(float, int, int, short);
CODE:
	func   = INT2PTR(short(*)(float, int, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2, s3);
OUTPUT:
	RETVAL

float
nci_ffiis( c_func, f0, i1, i2, s3 )
	SV* c_func
	float f0
	int i1
	int i2
	short s3
PREINIT:
	float(*func)(float, int, int, short);
CODE:
	func   = INT2PTR(float(*)(float, int, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2, s3);
OUTPUT:
	RETVAL

char *
nci_tfiis( c_func, f0, i1, i2, s3 )
	SV* c_func
	float f0
	int i1
	int i2
	short s3
PREINIT:
	char *(*func)(float, int, int, short);
CODE:
	func   = INT2PTR(char *(*)(float, int, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2, s3);
OUTPUT:
	RETVAL

int
nci_ifiis( c_func, f0, i1, i2, s3 )
	SV* c_func
	float f0
	int i1
	int i2
	short s3
PREINIT:
	int(*func)(float, int, int, short);
CODE:
	func   = INT2PTR(int(*)(float, int, int, short), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2, s3);
OUTPUT:
	RETVAL

void *
nci_ptiis( c_func, t0, i1, i2, s3 )
	SV* c_func
	char * t0
	int i1
	int i2
	short s3
PREINIT:
	void *(*func)(char *, int, int, short);
CODE:
	func   = INT2PTR(void *(*)(char *, int, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2, s3);
OUTPUT:
	RETVAL

void
nci_vtiis( c_func, t0, i1, i2, s3 )
	SV* c_func
	char * t0
	int i1
	int i2
	short s3
PREINIT:
	void(*func)(char *, int, int, short);
CODE:
	func   = INT2PTR(void(*)(char *, int, int, short), SvIV(c_func) );
	(*func)(t0, i1, i2, s3);

double
nci_dtiis( c_func, t0, i1, i2, s3 )
	SV* c_func
	char * t0
	int i1
	int i2
	short s3
PREINIT:
	double(*func)(char *, int, int, short);
CODE:
	func   = INT2PTR(double(*)(char *, int, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2, s3);
OUTPUT:
	RETVAL

short
nci_stiis( c_func, t0, i1, i2, s3 )
	SV* c_func
	char * t0
	int i1
	int i2
	short s3
PREINIT:
	short(*func)(char *, int, int, short);
CODE:
	func   = INT2PTR(short(*)(char *, int, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2, s3);
OUTPUT:
	RETVAL

float
nci_ftiis( c_func, t0, i1, i2, s3 )
	SV* c_func
	char * t0
	int i1
	int i2
	short s3
PREINIT:
	float(*func)(char *, int, int, short);
CODE:
	func   = INT2PTR(float(*)(char *, int, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2, s3);
OUTPUT:
	RETVAL

char *
nci_ttiis( c_func, t0, i1, i2, s3 )
	SV* c_func
	char * t0
	int i1
	int i2
	short s3
PREINIT:
	char *(*func)(char *, int, int, short);
CODE:
	func   = INT2PTR(char *(*)(char *, int, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2, s3);
OUTPUT:
	RETVAL

int
nci_itiis( c_func, t0, i1, i2, s3 )
	SV* c_func
	char * t0
	int i1
	int i2
	short s3
PREINIT:
	int(*func)(char *, int, int, short);
CODE:
	func   = INT2PTR(int(*)(char *, int, int, short), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2, s3);
OUTPUT:
	RETVAL

void *
nci_piiis( c_func, i0, i1, i2, s3 )
	SV* c_func
	int i0
	int i1
	int i2
	short s3
PREINIT:
	void *(*func)(int, int, int, short);
CODE:
	func   = INT2PTR(void *(*)(int, int, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2, s3);
OUTPUT:
	RETVAL

void
nci_viiis( c_func, i0, i1, i2, s3 )
	SV* c_func
	int i0
	int i1
	int i2
	short s3
PREINIT:
	void(*func)(int, int, int, short);
CODE:
	func   = INT2PTR(void(*)(int, int, int, short), SvIV(c_func) );
	(*func)(i0, i1, i2, s3);

double
nci_diiis( c_func, i0, i1, i2, s3 )
	SV* c_func
	int i0
	int i1
	int i2
	short s3
PREINIT:
	double(*func)(int, int, int, short);
CODE:
	func   = INT2PTR(double(*)(int, int, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2, s3);
OUTPUT:
	RETVAL

short
nci_siiis( c_func, i0, i1, i2, s3 )
	SV* c_func
	int i0
	int i1
	int i2
	short s3
PREINIT:
	short(*func)(int, int, int, short);
CODE:
	func   = INT2PTR(short(*)(int, int, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2, s3);
OUTPUT:
	RETVAL

float
nci_fiiis( c_func, i0, i1, i2, s3 )
	SV* c_func
	int i0
	int i1
	int i2
	short s3
PREINIT:
	float(*func)(int, int, int, short);
CODE:
	func   = INT2PTR(float(*)(int, int, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2, s3);
OUTPUT:
	RETVAL

char *
nci_tiiis( c_func, i0, i1, i2, s3 )
	SV* c_func
	int i0
	int i1
	int i2
	short s3
PREINIT:
	char *(*func)(int, int, int, short);
CODE:
	func   = INT2PTR(char *(*)(int, int, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2, s3);
OUTPUT:
	RETVAL

int
nci_iiiis( c_func, i0, i1, i2, s3 )
	SV* c_func
	int i0
	int i1
	int i2
	short s3
PREINIT:
	int(*func)(int, int, int, short);
CODE:
	func   = INT2PTR(int(*)(int, int, int, short), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2, s3);
OUTPUT:
	RETVAL

void *
nci_ppppf( c_func, p0, p1, p2, f3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	float f3
PREINIT:
	void *(*func)(void *, void *, void *, float);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2, f3);
OUTPUT:
	RETVAL

void
nci_vpppf( c_func, p0, p1, p2, f3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	float f3
PREINIT:
	void(*func)(void *, void *, void *, float);
CODE:
	func   = INT2PTR(void(*)(void *, void *, void *, float), SvIV(c_func) );
	(*func)(p0, p1, p2, f3);

double
nci_dpppf( c_func, p0, p1, p2, f3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	float f3
PREINIT:
	double(*func)(void *, void *, void *, float);
CODE:
	func   = INT2PTR(double(*)(void *, void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2, f3);
OUTPUT:
	RETVAL

short
nci_spppf( c_func, p0, p1, p2, f3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	float f3
PREINIT:
	short(*func)(void *, void *, void *, float);
CODE:
	func   = INT2PTR(short(*)(void *, void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2, f3);
OUTPUT:
	RETVAL

float
nci_fpppf( c_func, p0, p1, p2, f3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	float f3
PREINIT:
	float(*func)(void *, void *, void *, float);
CODE:
	func   = INT2PTR(float(*)(void *, void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2, f3);
OUTPUT:
	RETVAL

char *
nci_tpppf( c_func, p0, p1, p2, f3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	float f3
PREINIT:
	char *(*func)(void *, void *, void *, float);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2, f3);
OUTPUT:
	RETVAL

int
nci_ipppf( c_func, p0, p1, p2, f3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	float f3
PREINIT:
	int(*func)(void *, void *, void *, float);
CODE:
	func   = INT2PTR(int(*)(void *, void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2, f3);
OUTPUT:
	RETVAL

void *
nci_pvppf( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvppf( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvppf( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svppf( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvppf( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvppf( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivppf( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdppf( c_func, d0, p1, p2, f3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	float f3
PREINIT:
	void *(*func)(double, void *, void *, float);
CODE:
	func   = INT2PTR(void *(*)(double, void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2, f3);
OUTPUT:
	RETVAL

void
nci_vdppf( c_func, d0, p1, p2, f3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	float f3
PREINIT:
	void(*func)(double, void *, void *, float);
CODE:
	func   = INT2PTR(void(*)(double, void *, void *, float), SvIV(c_func) );
	(*func)(d0, p1, p2, f3);

double
nci_ddppf( c_func, d0, p1, p2, f3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	float f3
PREINIT:
	double(*func)(double, void *, void *, float);
CODE:
	func   = INT2PTR(double(*)(double, void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2, f3);
OUTPUT:
	RETVAL

short
nci_sdppf( c_func, d0, p1, p2, f3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	float f3
PREINIT:
	short(*func)(double, void *, void *, float);
CODE:
	func   = INT2PTR(short(*)(double, void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2, f3);
OUTPUT:
	RETVAL

float
nci_fdppf( c_func, d0, p1, p2, f3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	float f3
PREINIT:
	float(*func)(double, void *, void *, float);
CODE:
	func   = INT2PTR(float(*)(double, void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2, f3);
OUTPUT:
	RETVAL

char *
nci_tdppf( c_func, d0, p1, p2, f3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	float f3
PREINIT:
	char *(*func)(double, void *, void *, float);
CODE:
	func   = INT2PTR(char *(*)(double, void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2, f3);
OUTPUT:
	RETVAL

int
nci_idppf( c_func, d0, p1, p2, f3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	float f3
PREINIT:
	int(*func)(double, void *, void *, float);
CODE:
	func   = INT2PTR(int(*)(double, void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2, f3);
OUTPUT:
	RETVAL

void *
nci_psppf( c_func, s0, p1, p2, f3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	float f3
PREINIT:
	void *(*func)(short, void *, void *, float);
CODE:
	func   = INT2PTR(void *(*)(short, void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2, f3);
OUTPUT:
	RETVAL

void
nci_vsppf( c_func, s0, p1, p2, f3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	float f3
PREINIT:
	void(*func)(short, void *, void *, float);
CODE:
	func   = INT2PTR(void(*)(short, void *, void *, float), SvIV(c_func) );
	(*func)(s0, p1, p2, f3);

double
nci_dsppf( c_func, s0, p1, p2, f3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	float f3
PREINIT:
	double(*func)(short, void *, void *, float);
CODE:
	func   = INT2PTR(double(*)(short, void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2, f3);
OUTPUT:
	RETVAL

short
nci_ssppf( c_func, s0, p1, p2, f3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	float f3
PREINIT:
	short(*func)(short, void *, void *, float);
CODE:
	func   = INT2PTR(short(*)(short, void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2, f3);
OUTPUT:
	RETVAL

float
nci_fsppf( c_func, s0, p1, p2, f3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	float f3
PREINIT:
	float(*func)(short, void *, void *, float);
CODE:
	func   = INT2PTR(float(*)(short, void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2, f3);
OUTPUT:
	RETVAL

char *
nci_tsppf( c_func, s0, p1, p2, f3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	float f3
PREINIT:
	char *(*func)(short, void *, void *, float);
CODE:
	func   = INT2PTR(char *(*)(short, void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2, f3);
OUTPUT:
	RETVAL

int
nci_isppf( c_func, s0, p1, p2, f3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	float f3
PREINIT:
	int(*func)(short, void *, void *, float);
CODE:
	func   = INT2PTR(int(*)(short, void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2, f3);
OUTPUT:
	RETVAL

void *
nci_pfppf( c_func, f0, p1, p2, f3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	float f3
PREINIT:
	void *(*func)(float, void *, void *, float);
CODE:
	func   = INT2PTR(void *(*)(float, void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2, f3);
OUTPUT:
	RETVAL

void
nci_vfppf( c_func, f0, p1, p2, f3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	float f3
PREINIT:
	void(*func)(float, void *, void *, float);
CODE:
	func   = INT2PTR(void(*)(float, void *, void *, float), SvIV(c_func) );
	(*func)(f0, p1, p2, f3);

double
nci_dfppf( c_func, f0, p1, p2, f3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	float f3
PREINIT:
	double(*func)(float, void *, void *, float);
CODE:
	func   = INT2PTR(double(*)(float, void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2, f3);
OUTPUT:
	RETVAL

short
nci_sfppf( c_func, f0, p1, p2, f3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	float f3
PREINIT:
	short(*func)(float, void *, void *, float);
CODE:
	func   = INT2PTR(short(*)(float, void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2, f3);
OUTPUT:
	RETVAL

float
nci_ffppf( c_func, f0, p1, p2, f3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	float f3
PREINIT:
	float(*func)(float, void *, void *, float);
CODE:
	func   = INT2PTR(float(*)(float, void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2, f3);
OUTPUT:
	RETVAL

char *
nci_tfppf( c_func, f0, p1, p2, f3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	float f3
PREINIT:
	char *(*func)(float, void *, void *, float);
CODE:
	func   = INT2PTR(char *(*)(float, void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2, f3);
OUTPUT:
	RETVAL

int
nci_ifppf( c_func, f0, p1, p2, f3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	float f3
PREINIT:
	int(*func)(float, void *, void *, float);
CODE:
	func   = INT2PTR(int(*)(float, void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2, f3);
OUTPUT:
	RETVAL

void *
nci_ptppf( c_func, t0, p1, p2, f3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	float f3
PREINIT:
	void *(*func)(char *, void *, void *, float);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2, f3);
OUTPUT:
	RETVAL

void
nci_vtppf( c_func, t0, p1, p2, f3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	float f3
PREINIT:
	void(*func)(char *, void *, void *, float);
CODE:
	func   = INT2PTR(void(*)(char *, void *, void *, float), SvIV(c_func) );
	(*func)(t0, p1, p2, f3);

double
nci_dtppf( c_func, t0, p1, p2, f3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	float f3
PREINIT:
	double(*func)(char *, void *, void *, float);
CODE:
	func   = INT2PTR(double(*)(char *, void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2, f3);
OUTPUT:
	RETVAL

short
nci_stppf( c_func, t0, p1, p2, f3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	float f3
PREINIT:
	short(*func)(char *, void *, void *, float);
CODE:
	func   = INT2PTR(short(*)(char *, void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2, f3);
OUTPUT:
	RETVAL

float
nci_ftppf( c_func, t0, p1, p2, f3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	float f3
PREINIT:
	float(*func)(char *, void *, void *, float);
CODE:
	func   = INT2PTR(float(*)(char *, void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2, f3);
OUTPUT:
	RETVAL

char *
nci_ttppf( c_func, t0, p1, p2, f3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	float f3
PREINIT:
	char *(*func)(char *, void *, void *, float);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2, f3);
OUTPUT:
	RETVAL

int
nci_itppf( c_func, t0, p1, p2, f3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	float f3
PREINIT:
	int(*func)(char *, void *, void *, float);
CODE:
	func   = INT2PTR(int(*)(char *, void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2, f3);
OUTPUT:
	RETVAL

void *
nci_pippf( c_func, i0, p1, p2, f3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	float f3
PREINIT:
	void *(*func)(int, void *, void *, float);
CODE:
	func   = INT2PTR(void *(*)(int, void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2, f3);
OUTPUT:
	RETVAL

void
nci_vippf( c_func, i0, p1, p2, f3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	float f3
PREINIT:
	void(*func)(int, void *, void *, float);
CODE:
	func   = INT2PTR(void(*)(int, void *, void *, float), SvIV(c_func) );
	(*func)(i0, p1, p2, f3);

double
nci_dippf( c_func, i0, p1, p2, f3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	float f3
PREINIT:
	double(*func)(int, void *, void *, float);
CODE:
	func   = INT2PTR(double(*)(int, void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2, f3);
OUTPUT:
	RETVAL

short
nci_sippf( c_func, i0, p1, p2, f3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	float f3
PREINIT:
	short(*func)(int, void *, void *, float);
CODE:
	func   = INT2PTR(short(*)(int, void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2, f3);
OUTPUT:
	RETVAL

float
nci_fippf( c_func, i0, p1, p2, f3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	float f3
PREINIT:
	float(*func)(int, void *, void *, float);
CODE:
	func   = INT2PTR(float(*)(int, void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2, f3);
OUTPUT:
	RETVAL

char *
nci_tippf( c_func, i0, p1, p2, f3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	float f3
PREINIT:
	char *(*func)(int, void *, void *, float);
CODE:
	func   = INT2PTR(char *(*)(int, void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2, f3);
OUTPUT:
	RETVAL

int
nci_iippf( c_func, i0, p1, p2, f3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	float f3
PREINIT:
	int(*func)(int, void *, void *, float);
CODE:
	func   = INT2PTR(int(*)(int, void *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2, f3);
OUTPUT:
	RETVAL

void *
nci_ppdpf( c_func, p0, d1, p2, f3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	float f3
PREINIT:
	void *(*func)(void *, double, void *, float);
CODE:
	func   = INT2PTR(void *(*)(void *, double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2, f3);
OUTPUT:
	RETVAL

void
nci_vpdpf( c_func, p0, d1, p2, f3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	float f3
PREINIT:
	void(*func)(void *, double, void *, float);
CODE:
	func   = INT2PTR(void(*)(void *, double, void *, float), SvIV(c_func) );
	(*func)(p0, d1, p2, f3);

double
nci_dpdpf( c_func, p0, d1, p2, f3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	float f3
PREINIT:
	double(*func)(void *, double, void *, float);
CODE:
	func   = INT2PTR(double(*)(void *, double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2, f3);
OUTPUT:
	RETVAL

short
nci_spdpf( c_func, p0, d1, p2, f3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	float f3
PREINIT:
	short(*func)(void *, double, void *, float);
CODE:
	func   = INT2PTR(short(*)(void *, double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2, f3);
OUTPUT:
	RETVAL

float
nci_fpdpf( c_func, p0, d1, p2, f3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	float f3
PREINIT:
	float(*func)(void *, double, void *, float);
CODE:
	func   = INT2PTR(float(*)(void *, double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2, f3);
OUTPUT:
	RETVAL

char *
nci_tpdpf( c_func, p0, d1, p2, f3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	float f3
PREINIT:
	char *(*func)(void *, double, void *, float);
CODE:
	func   = INT2PTR(char *(*)(void *, double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2, f3);
OUTPUT:
	RETVAL

int
nci_ipdpf( c_func, p0, d1, p2, f3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	float f3
PREINIT:
	int(*func)(void *, double, void *, float);
CODE:
	func   = INT2PTR(int(*)(void *, double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2, f3);
OUTPUT:
	RETVAL

void *
nci_pvdpf( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvdpf( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvdpf( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svdpf( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvdpf( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvdpf( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivdpf( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pddpf( c_func, d0, d1, p2, f3 )
	SV* c_func
	double d0
	double d1
	void * p2
	float f3
PREINIT:
	void *(*func)(double, double, void *, float);
CODE:
	func   = INT2PTR(void *(*)(double, double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2, f3);
OUTPUT:
	RETVAL

void
nci_vddpf( c_func, d0, d1, p2, f3 )
	SV* c_func
	double d0
	double d1
	void * p2
	float f3
PREINIT:
	void(*func)(double, double, void *, float);
CODE:
	func   = INT2PTR(void(*)(double, double, void *, float), SvIV(c_func) );
	(*func)(d0, d1, p2, f3);

double
nci_dddpf( c_func, d0, d1, p2, f3 )
	SV* c_func
	double d0
	double d1
	void * p2
	float f3
PREINIT:
	double(*func)(double, double, void *, float);
CODE:
	func   = INT2PTR(double(*)(double, double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2, f3);
OUTPUT:
	RETVAL

short
nci_sddpf( c_func, d0, d1, p2, f3 )
	SV* c_func
	double d0
	double d1
	void * p2
	float f3
PREINIT:
	short(*func)(double, double, void *, float);
CODE:
	func   = INT2PTR(short(*)(double, double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2, f3);
OUTPUT:
	RETVAL

float
nci_fddpf( c_func, d0, d1, p2, f3 )
	SV* c_func
	double d0
	double d1
	void * p2
	float f3
PREINIT:
	float(*func)(double, double, void *, float);
CODE:
	func   = INT2PTR(float(*)(double, double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2, f3);
OUTPUT:
	RETVAL

char *
nci_tddpf( c_func, d0, d1, p2, f3 )
	SV* c_func
	double d0
	double d1
	void * p2
	float f3
PREINIT:
	char *(*func)(double, double, void *, float);
CODE:
	func   = INT2PTR(char *(*)(double, double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2, f3);
OUTPUT:
	RETVAL

int
nci_iddpf( c_func, d0, d1, p2, f3 )
	SV* c_func
	double d0
	double d1
	void * p2
	float f3
PREINIT:
	int(*func)(double, double, void *, float);
CODE:
	func   = INT2PTR(int(*)(double, double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2, f3);
OUTPUT:
	RETVAL

void *
nci_psdpf( c_func, s0, d1, p2, f3 )
	SV* c_func
	short s0
	double d1
	void * p2
	float f3
PREINIT:
	void *(*func)(short, double, void *, float);
CODE:
	func   = INT2PTR(void *(*)(short, double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2, f3);
OUTPUT:
	RETVAL

void
nci_vsdpf( c_func, s0, d1, p2, f3 )
	SV* c_func
	short s0
	double d1
	void * p2
	float f3
PREINIT:
	void(*func)(short, double, void *, float);
CODE:
	func   = INT2PTR(void(*)(short, double, void *, float), SvIV(c_func) );
	(*func)(s0, d1, p2, f3);

double
nci_dsdpf( c_func, s0, d1, p2, f3 )
	SV* c_func
	short s0
	double d1
	void * p2
	float f3
PREINIT:
	double(*func)(short, double, void *, float);
CODE:
	func   = INT2PTR(double(*)(short, double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2, f3);
OUTPUT:
	RETVAL

short
nci_ssdpf( c_func, s0, d1, p2, f3 )
	SV* c_func
	short s0
	double d1
	void * p2
	float f3
PREINIT:
	short(*func)(short, double, void *, float);
CODE:
	func   = INT2PTR(short(*)(short, double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2, f3);
OUTPUT:
	RETVAL

float
nci_fsdpf( c_func, s0, d1, p2, f3 )
	SV* c_func
	short s0
	double d1
	void * p2
	float f3
PREINIT:
	float(*func)(short, double, void *, float);
CODE:
	func   = INT2PTR(float(*)(short, double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2, f3);
OUTPUT:
	RETVAL

char *
nci_tsdpf( c_func, s0, d1, p2, f3 )
	SV* c_func
	short s0
	double d1
	void * p2
	float f3
PREINIT:
	char *(*func)(short, double, void *, float);
CODE:
	func   = INT2PTR(char *(*)(short, double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2, f3);
OUTPUT:
	RETVAL

int
nci_isdpf( c_func, s0, d1, p2, f3 )
	SV* c_func
	short s0
	double d1
	void * p2
	float f3
PREINIT:
	int(*func)(short, double, void *, float);
CODE:
	func   = INT2PTR(int(*)(short, double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2, f3);
OUTPUT:
	RETVAL

void *
nci_pfdpf( c_func, f0, d1, p2, f3 )
	SV* c_func
	float f0
	double d1
	void * p2
	float f3
PREINIT:
	void *(*func)(float, double, void *, float);
CODE:
	func   = INT2PTR(void *(*)(float, double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2, f3);
OUTPUT:
	RETVAL

void
nci_vfdpf( c_func, f0, d1, p2, f3 )
	SV* c_func
	float f0
	double d1
	void * p2
	float f3
PREINIT:
	void(*func)(float, double, void *, float);
CODE:
	func   = INT2PTR(void(*)(float, double, void *, float), SvIV(c_func) );
	(*func)(f0, d1, p2, f3);

double
nci_dfdpf( c_func, f0, d1, p2, f3 )
	SV* c_func
	float f0
	double d1
	void * p2
	float f3
PREINIT:
	double(*func)(float, double, void *, float);
CODE:
	func   = INT2PTR(double(*)(float, double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2, f3);
OUTPUT:
	RETVAL

short
nci_sfdpf( c_func, f0, d1, p2, f3 )
	SV* c_func
	float f0
	double d1
	void * p2
	float f3
PREINIT:
	short(*func)(float, double, void *, float);
CODE:
	func   = INT2PTR(short(*)(float, double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2, f3);
OUTPUT:
	RETVAL

float
nci_ffdpf( c_func, f0, d1, p2, f3 )
	SV* c_func
	float f0
	double d1
	void * p2
	float f3
PREINIT:
	float(*func)(float, double, void *, float);
CODE:
	func   = INT2PTR(float(*)(float, double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2, f3);
OUTPUT:
	RETVAL

char *
nci_tfdpf( c_func, f0, d1, p2, f3 )
	SV* c_func
	float f0
	double d1
	void * p2
	float f3
PREINIT:
	char *(*func)(float, double, void *, float);
CODE:
	func   = INT2PTR(char *(*)(float, double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2, f3);
OUTPUT:
	RETVAL

int
nci_ifdpf( c_func, f0, d1, p2, f3 )
	SV* c_func
	float f0
	double d1
	void * p2
	float f3
PREINIT:
	int(*func)(float, double, void *, float);
CODE:
	func   = INT2PTR(int(*)(float, double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2, f3);
OUTPUT:
	RETVAL

void *
nci_ptdpf( c_func, t0, d1, p2, f3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	float f3
PREINIT:
	void *(*func)(char *, double, void *, float);
CODE:
	func   = INT2PTR(void *(*)(char *, double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2, f3);
OUTPUT:
	RETVAL

void
nci_vtdpf( c_func, t0, d1, p2, f3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	float f3
PREINIT:
	void(*func)(char *, double, void *, float);
CODE:
	func   = INT2PTR(void(*)(char *, double, void *, float), SvIV(c_func) );
	(*func)(t0, d1, p2, f3);

double
nci_dtdpf( c_func, t0, d1, p2, f3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	float f3
PREINIT:
	double(*func)(char *, double, void *, float);
CODE:
	func   = INT2PTR(double(*)(char *, double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2, f3);
OUTPUT:
	RETVAL

short
nci_stdpf( c_func, t0, d1, p2, f3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	float f3
PREINIT:
	short(*func)(char *, double, void *, float);
CODE:
	func   = INT2PTR(short(*)(char *, double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2, f3);
OUTPUT:
	RETVAL

float
nci_ftdpf( c_func, t0, d1, p2, f3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	float f3
PREINIT:
	float(*func)(char *, double, void *, float);
CODE:
	func   = INT2PTR(float(*)(char *, double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2, f3);
OUTPUT:
	RETVAL

char *
nci_ttdpf( c_func, t0, d1, p2, f3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	float f3
PREINIT:
	char *(*func)(char *, double, void *, float);
CODE:
	func   = INT2PTR(char *(*)(char *, double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2, f3);
OUTPUT:
	RETVAL

int
nci_itdpf( c_func, t0, d1, p2, f3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	float f3
PREINIT:
	int(*func)(char *, double, void *, float);
CODE:
	func   = INT2PTR(int(*)(char *, double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2, f3);
OUTPUT:
	RETVAL

void *
nci_pidpf( c_func, i0, d1, p2, f3 )
	SV* c_func
	int i0
	double d1
	void * p2
	float f3
PREINIT:
	void *(*func)(int, double, void *, float);
CODE:
	func   = INT2PTR(void *(*)(int, double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2, f3);
OUTPUT:
	RETVAL

void
nci_vidpf( c_func, i0, d1, p2, f3 )
	SV* c_func
	int i0
	double d1
	void * p2
	float f3
PREINIT:
	void(*func)(int, double, void *, float);
CODE:
	func   = INT2PTR(void(*)(int, double, void *, float), SvIV(c_func) );
	(*func)(i0, d1, p2, f3);

double
nci_didpf( c_func, i0, d1, p2, f3 )
	SV* c_func
	int i0
	double d1
	void * p2
	float f3
PREINIT:
	double(*func)(int, double, void *, float);
CODE:
	func   = INT2PTR(double(*)(int, double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2, f3);
OUTPUT:
	RETVAL

short
nci_sidpf( c_func, i0, d1, p2, f3 )
	SV* c_func
	int i0
	double d1
	void * p2
	float f3
PREINIT:
	short(*func)(int, double, void *, float);
CODE:
	func   = INT2PTR(short(*)(int, double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2, f3);
OUTPUT:
	RETVAL

float
nci_fidpf( c_func, i0, d1, p2, f3 )
	SV* c_func
	int i0
	double d1
	void * p2
	float f3
PREINIT:
	float(*func)(int, double, void *, float);
CODE:
	func   = INT2PTR(float(*)(int, double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2, f3);
OUTPUT:
	RETVAL

char *
nci_tidpf( c_func, i0, d1, p2, f3 )
	SV* c_func
	int i0
	double d1
	void * p2
	float f3
PREINIT:
	char *(*func)(int, double, void *, float);
CODE:
	func   = INT2PTR(char *(*)(int, double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2, f3);
OUTPUT:
	RETVAL

int
nci_iidpf( c_func, i0, d1, p2, f3 )
	SV* c_func
	int i0
	double d1
	void * p2
	float f3
PREINIT:
	int(*func)(int, double, void *, float);
CODE:
	func   = INT2PTR(int(*)(int, double, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2, f3);
OUTPUT:
	RETVAL

void *
nci_ppspf( c_func, p0, s1, p2, f3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	float f3
PREINIT:
	void *(*func)(void *, short, void *, float);
CODE:
	func   = INT2PTR(void *(*)(void *, short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2, f3);
OUTPUT:
	RETVAL

void
nci_vpspf( c_func, p0, s1, p2, f3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	float f3
PREINIT:
	void(*func)(void *, short, void *, float);
CODE:
	func   = INT2PTR(void(*)(void *, short, void *, float), SvIV(c_func) );
	(*func)(p0, s1, p2, f3);

double
nci_dpspf( c_func, p0, s1, p2, f3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	float f3
PREINIT:
	double(*func)(void *, short, void *, float);
CODE:
	func   = INT2PTR(double(*)(void *, short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2, f3);
OUTPUT:
	RETVAL

short
nci_spspf( c_func, p0, s1, p2, f3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	float f3
PREINIT:
	short(*func)(void *, short, void *, float);
CODE:
	func   = INT2PTR(short(*)(void *, short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2, f3);
OUTPUT:
	RETVAL

float
nci_fpspf( c_func, p0, s1, p2, f3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	float f3
PREINIT:
	float(*func)(void *, short, void *, float);
CODE:
	func   = INT2PTR(float(*)(void *, short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2, f3);
OUTPUT:
	RETVAL

char *
nci_tpspf( c_func, p0, s1, p2, f3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	float f3
PREINIT:
	char *(*func)(void *, short, void *, float);
CODE:
	func   = INT2PTR(char *(*)(void *, short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2, f3);
OUTPUT:
	RETVAL

int
nci_ipspf( c_func, p0, s1, p2, f3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	float f3
PREINIT:
	int(*func)(void *, short, void *, float);
CODE:
	func   = INT2PTR(int(*)(void *, short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2, f3);
OUTPUT:
	RETVAL

void *
nci_pvspf( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvspf( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvspf( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svspf( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvspf( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvspf( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivspf( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdspf( c_func, d0, s1, p2, f3 )
	SV* c_func
	double d0
	short s1
	void * p2
	float f3
PREINIT:
	void *(*func)(double, short, void *, float);
CODE:
	func   = INT2PTR(void *(*)(double, short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2, f3);
OUTPUT:
	RETVAL

void
nci_vdspf( c_func, d0, s1, p2, f3 )
	SV* c_func
	double d0
	short s1
	void * p2
	float f3
PREINIT:
	void(*func)(double, short, void *, float);
CODE:
	func   = INT2PTR(void(*)(double, short, void *, float), SvIV(c_func) );
	(*func)(d0, s1, p2, f3);

double
nci_ddspf( c_func, d0, s1, p2, f3 )
	SV* c_func
	double d0
	short s1
	void * p2
	float f3
PREINIT:
	double(*func)(double, short, void *, float);
CODE:
	func   = INT2PTR(double(*)(double, short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2, f3);
OUTPUT:
	RETVAL

short
nci_sdspf( c_func, d0, s1, p2, f3 )
	SV* c_func
	double d0
	short s1
	void * p2
	float f3
PREINIT:
	short(*func)(double, short, void *, float);
CODE:
	func   = INT2PTR(short(*)(double, short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2, f3);
OUTPUT:
	RETVAL

float
nci_fdspf( c_func, d0, s1, p2, f3 )
	SV* c_func
	double d0
	short s1
	void * p2
	float f3
PREINIT:
	float(*func)(double, short, void *, float);
CODE:
	func   = INT2PTR(float(*)(double, short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2, f3);
OUTPUT:
	RETVAL

char *
nci_tdspf( c_func, d0, s1, p2, f3 )
	SV* c_func
	double d0
	short s1
	void * p2
	float f3
PREINIT:
	char *(*func)(double, short, void *, float);
CODE:
	func   = INT2PTR(char *(*)(double, short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2, f3);
OUTPUT:
	RETVAL

int
nci_idspf( c_func, d0, s1, p2, f3 )
	SV* c_func
	double d0
	short s1
	void * p2
	float f3
PREINIT:
	int(*func)(double, short, void *, float);
CODE:
	func   = INT2PTR(int(*)(double, short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2, f3);
OUTPUT:
	RETVAL

void *
nci_psspf( c_func, s0, s1, p2, f3 )
	SV* c_func
	short s0
	short s1
	void * p2
	float f3
PREINIT:
	void *(*func)(short, short, void *, float);
CODE:
	func   = INT2PTR(void *(*)(short, short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2, f3);
OUTPUT:
	RETVAL

void
nci_vsspf( c_func, s0, s1, p2, f3 )
	SV* c_func
	short s0
	short s1
	void * p2
	float f3
PREINIT:
	void(*func)(short, short, void *, float);
CODE:
	func   = INT2PTR(void(*)(short, short, void *, float), SvIV(c_func) );
	(*func)(s0, s1, p2, f3);

double
nci_dsspf( c_func, s0, s1, p2, f3 )
	SV* c_func
	short s0
	short s1
	void * p2
	float f3
PREINIT:
	double(*func)(short, short, void *, float);
CODE:
	func   = INT2PTR(double(*)(short, short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2, f3);
OUTPUT:
	RETVAL

short
nci_ssspf( c_func, s0, s1, p2, f3 )
	SV* c_func
	short s0
	short s1
	void * p2
	float f3
PREINIT:
	short(*func)(short, short, void *, float);
CODE:
	func   = INT2PTR(short(*)(short, short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2, f3);
OUTPUT:
	RETVAL

float
nci_fsspf( c_func, s0, s1, p2, f3 )
	SV* c_func
	short s0
	short s1
	void * p2
	float f3
PREINIT:
	float(*func)(short, short, void *, float);
CODE:
	func   = INT2PTR(float(*)(short, short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2, f3);
OUTPUT:
	RETVAL

char *
nci_tsspf( c_func, s0, s1, p2, f3 )
	SV* c_func
	short s0
	short s1
	void * p2
	float f3
PREINIT:
	char *(*func)(short, short, void *, float);
CODE:
	func   = INT2PTR(char *(*)(short, short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2, f3);
OUTPUT:
	RETVAL

int
nci_isspf( c_func, s0, s1, p2, f3 )
	SV* c_func
	short s0
	short s1
	void * p2
	float f3
PREINIT:
	int(*func)(short, short, void *, float);
CODE:
	func   = INT2PTR(int(*)(short, short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2, f3);
OUTPUT:
	RETVAL

void *
nci_pfspf( c_func, f0, s1, p2, f3 )
	SV* c_func
	float f0
	short s1
	void * p2
	float f3
PREINIT:
	void *(*func)(float, short, void *, float);
CODE:
	func   = INT2PTR(void *(*)(float, short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2, f3);
OUTPUT:
	RETVAL

void
nci_vfspf( c_func, f0, s1, p2, f3 )
	SV* c_func
	float f0
	short s1
	void * p2
	float f3
PREINIT:
	void(*func)(float, short, void *, float);
CODE:
	func   = INT2PTR(void(*)(float, short, void *, float), SvIV(c_func) );
	(*func)(f0, s1, p2, f3);

double
nci_dfspf( c_func, f0, s1, p2, f3 )
	SV* c_func
	float f0
	short s1
	void * p2
	float f3
PREINIT:
	double(*func)(float, short, void *, float);
CODE:
	func   = INT2PTR(double(*)(float, short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2, f3);
OUTPUT:
	RETVAL

short
nci_sfspf( c_func, f0, s1, p2, f3 )
	SV* c_func
	float f0
	short s1
	void * p2
	float f3
PREINIT:
	short(*func)(float, short, void *, float);
CODE:
	func   = INT2PTR(short(*)(float, short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2, f3);
OUTPUT:
	RETVAL

float
nci_ffspf( c_func, f0, s1, p2, f3 )
	SV* c_func
	float f0
	short s1
	void * p2
	float f3
PREINIT:
	float(*func)(float, short, void *, float);
CODE:
	func   = INT2PTR(float(*)(float, short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2, f3);
OUTPUT:
	RETVAL

char *
nci_tfspf( c_func, f0, s1, p2, f3 )
	SV* c_func
	float f0
	short s1
	void * p2
	float f3
PREINIT:
	char *(*func)(float, short, void *, float);
CODE:
	func   = INT2PTR(char *(*)(float, short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2, f3);
OUTPUT:
	RETVAL

int
nci_ifspf( c_func, f0, s1, p2, f3 )
	SV* c_func
	float f0
	short s1
	void * p2
	float f3
PREINIT:
	int(*func)(float, short, void *, float);
CODE:
	func   = INT2PTR(int(*)(float, short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2, f3);
OUTPUT:
	RETVAL

void *
nci_ptspf( c_func, t0, s1, p2, f3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	float f3
PREINIT:
	void *(*func)(char *, short, void *, float);
CODE:
	func   = INT2PTR(void *(*)(char *, short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2, f3);
OUTPUT:
	RETVAL

void
nci_vtspf( c_func, t0, s1, p2, f3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	float f3
PREINIT:
	void(*func)(char *, short, void *, float);
CODE:
	func   = INT2PTR(void(*)(char *, short, void *, float), SvIV(c_func) );
	(*func)(t0, s1, p2, f3);

double
nci_dtspf( c_func, t0, s1, p2, f3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	float f3
PREINIT:
	double(*func)(char *, short, void *, float);
CODE:
	func   = INT2PTR(double(*)(char *, short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2, f3);
OUTPUT:
	RETVAL

short
nci_stspf( c_func, t0, s1, p2, f3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	float f3
PREINIT:
	short(*func)(char *, short, void *, float);
CODE:
	func   = INT2PTR(short(*)(char *, short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2, f3);
OUTPUT:
	RETVAL

float
nci_ftspf( c_func, t0, s1, p2, f3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	float f3
PREINIT:
	float(*func)(char *, short, void *, float);
CODE:
	func   = INT2PTR(float(*)(char *, short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2, f3);
OUTPUT:
	RETVAL

char *
nci_ttspf( c_func, t0, s1, p2, f3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	float f3
PREINIT:
	char *(*func)(char *, short, void *, float);
CODE:
	func   = INT2PTR(char *(*)(char *, short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2, f3);
OUTPUT:
	RETVAL

int
nci_itspf( c_func, t0, s1, p2, f3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	float f3
PREINIT:
	int(*func)(char *, short, void *, float);
CODE:
	func   = INT2PTR(int(*)(char *, short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2, f3);
OUTPUT:
	RETVAL

void *
nci_pispf( c_func, i0, s1, p2, f3 )
	SV* c_func
	int i0
	short s1
	void * p2
	float f3
PREINIT:
	void *(*func)(int, short, void *, float);
CODE:
	func   = INT2PTR(void *(*)(int, short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2, f3);
OUTPUT:
	RETVAL

void
nci_vispf( c_func, i0, s1, p2, f3 )
	SV* c_func
	int i0
	short s1
	void * p2
	float f3
PREINIT:
	void(*func)(int, short, void *, float);
CODE:
	func   = INT2PTR(void(*)(int, short, void *, float), SvIV(c_func) );
	(*func)(i0, s1, p2, f3);

double
nci_dispf( c_func, i0, s1, p2, f3 )
	SV* c_func
	int i0
	short s1
	void * p2
	float f3
PREINIT:
	double(*func)(int, short, void *, float);
CODE:
	func   = INT2PTR(double(*)(int, short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2, f3);
OUTPUT:
	RETVAL

short
nci_sispf( c_func, i0, s1, p2, f3 )
	SV* c_func
	int i0
	short s1
	void * p2
	float f3
PREINIT:
	short(*func)(int, short, void *, float);
CODE:
	func   = INT2PTR(short(*)(int, short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2, f3);
OUTPUT:
	RETVAL

float
nci_fispf( c_func, i0, s1, p2, f3 )
	SV* c_func
	int i0
	short s1
	void * p2
	float f3
PREINIT:
	float(*func)(int, short, void *, float);
CODE:
	func   = INT2PTR(float(*)(int, short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2, f3);
OUTPUT:
	RETVAL

char *
nci_tispf( c_func, i0, s1, p2, f3 )
	SV* c_func
	int i0
	short s1
	void * p2
	float f3
PREINIT:
	char *(*func)(int, short, void *, float);
CODE:
	func   = INT2PTR(char *(*)(int, short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2, f3);
OUTPUT:
	RETVAL

int
nci_iispf( c_func, i0, s1, p2, f3 )
	SV* c_func
	int i0
	short s1
	void * p2
	float f3
PREINIT:
	int(*func)(int, short, void *, float);
CODE:
	func   = INT2PTR(int(*)(int, short, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2, f3);
OUTPUT:
	RETVAL

void *
nci_ppfpf( c_func, p0, f1, p2, f3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	float f3
PREINIT:
	void *(*func)(void *, float, void *, float);
CODE:
	func   = INT2PTR(void *(*)(void *, float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2, f3);
OUTPUT:
	RETVAL

void
nci_vpfpf( c_func, p0, f1, p2, f3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	float f3
PREINIT:
	void(*func)(void *, float, void *, float);
CODE:
	func   = INT2PTR(void(*)(void *, float, void *, float), SvIV(c_func) );
	(*func)(p0, f1, p2, f3);

double
nci_dpfpf( c_func, p0, f1, p2, f3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	float f3
PREINIT:
	double(*func)(void *, float, void *, float);
CODE:
	func   = INT2PTR(double(*)(void *, float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2, f3);
OUTPUT:
	RETVAL

short
nci_spfpf( c_func, p0, f1, p2, f3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	float f3
PREINIT:
	short(*func)(void *, float, void *, float);
CODE:
	func   = INT2PTR(short(*)(void *, float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2, f3);
OUTPUT:
	RETVAL

float
nci_fpfpf( c_func, p0, f1, p2, f3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	float f3
PREINIT:
	float(*func)(void *, float, void *, float);
CODE:
	func   = INT2PTR(float(*)(void *, float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2, f3);
OUTPUT:
	RETVAL

char *
nci_tpfpf( c_func, p0, f1, p2, f3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	float f3
PREINIT:
	char *(*func)(void *, float, void *, float);
CODE:
	func   = INT2PTR(char *(*)(void *, float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2, f3);
OUTPUT:
	RETVAL

int
nci_ipfpf( c_func, p0, f1, p2, f3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	float f3
PREINIT:
	int(*func)(void *, float, void *, float);
CODE:
	func   = INT2PTR(int(*)(void *, float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2, f3);
OUTPUT:
	RETVAL

void *
nci_pvfpf( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvfpf( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvfpf( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svfpf( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvfpf( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvfpf( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivfpf( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdfpf( c_func, d0, f1, p2, f3 )
	SV* c_func
	double d0
	float f1
	void * p2
	float f3
PREINIT:
	void *(*func)(double, float, void *, float);
CODE:
	func   = INT2PTR(void *(*)(double, float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2, f3);
OUTPUT:
	RETVAL

void
nci_vdfpf( c_func, d0, f1, p2, f3 )
	SV* c_func
	double d0
	float f1
	void * p2
	float f3
PREINIT:
	void(*func)(double, float, void *, float);
CODE:
	func   = INT2PTR(void(*)(double, float, void *, float), SvIV(c_func) );
	(*func)(d0, f1, p2, f3);

double
nci_ddfpf( c_func, d0, f1, p2, f3 )
	SV* c_func
	double d0
	float f1
	void * p2
	float f3
PREINIT:
	double(*func)(double, float, void *, float);
CODE:
	func   = INT2PTR(double(*)(double, float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2, f3);
OUTPUT:
	RETVAL

short
nci_sdfpf( c_func, d0, f1, p2, f3 )
	SV* c_func
	double d0
	float f1
	void * p2
	float f3
PREINIT:
	short(*func)(double, float, void *, float);
CODE:
	func   = INT2PTR(short(*)(double, float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2, f3);
OUTPUT:
	RETVAL

float
nci_fdfpf( c_func, d0, f1, p2, f3 )
	SV* c_func
	double d0
	float f1
	void * p2
	float f3
PREINIT:
	float(*func)(double, float, void *, float);
CODE:
	func   = INT2PTR(float(*)(double, float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2, f3);
OUTPUT:
	RETVAL

char *
nci_tdfpf( c_func, d0, f1, p2, f3 )
	SV* c_func
	double d0
	float f1
	void * p2
	float f3
PREINIT:
	char *(*func)(double, float, void *, float);
CODE:
	func   = INT2PTR(char *(*)(double, float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2, f3);
OUTPUT:
	RETVAL

int
nci_idfpf( c_func, d0, f1, p2, f3 )
	SV* c_func
	double d0
	float f1
	void * p2
	float f3
PREINIT:
	int(*func)(double, float, void *, float);
CODE:
	func   = INT2PTR(int(*)(double, float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2, f3);
OUTPUT:
	RETVAL

void *
nci_psfpf( c_func, s0, f1, p2, f3 )
	SV* c_func
	short s0
	float f1
	void * p2
	float f3
PREINIT:
	void *(*func)(short, float, void *, float);
CODE:
	func   = INT2PTR(void *(*)(short, float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2, f3);
OUTPUT:
	RETVAL

void
nci_vsfpf( c_func, s0, f1, p2, f3 )
	SV* c_func
	short s0
	float f1
	void * p2
	float f3
PREINIT:
	void(*func)(short, float, void *, float);
CODE:
	func   = INT2PTR(void(*)(short, float, void *, float), SvIV(c_func) );
	(*func)(s0, f1, p2, f3);

double
nci_dsfpf( c_func, s0, f1, p2, f3 )
	SV* c_func
	short s0
	float f1
	void * p2
	float f3
PREINIT:
	double(*func)(short, float, void *, float);
CODE:
	func   = INT2PTR(double(*)(short, float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2, f3);
OUTPUT:
	RETVAL

short
nci_ssfpf( c_func, s0, f1, p2, f3 )
	SV* c_func
	short s0
	float f1
	void * p2
	float f3
PREINIT:
	short(*func)(short, float, void *, float);
CODE:
	func   = INT2PTR(short(*)(short, float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2, f3);
OUTPUT:
	RETVAL

float
nci_fsfpf( c_func, s0, f1, p2, f3 )
	SV* c_func
	short s0
	float f1
	void * p2
	float f3
PREINIT:
	float(*func)(short, float, void *, float);
CODE:
	func   = INT2PTR(float(*)(short, float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2, f3);
OUTPUT:
	RETVAL

char *
nci_tsfpf( c_func, s0, f1, p2, f3 )
	SV* c_func
	short s0
	float f1
	void * p2
	float f3
PREINIT:
	char *(*func)(short, float, void *, float);
CODE:
	func   = INT2PTR(char *(*)(short, float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2, f3);
OUTPUT:
	RETVAL

int
nci_isfpf( c_func, s0, f1, p2, f3 )
	SV* c_func
	short s0
	float f1
	void * p2
	float f3
PREINIT:
	int(*func)(short, float, void *, float);
CODE:
	func   = INT2PTR(int(*)(short, float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2, f3);
OUTPUT:
	RETVAL

void *
nci_pffpf( c_func, f0, f1, p2, f3 )
	SV* c_func
	float f0
	float f1
	void * p2
	float f3
PREINIT:
	void *(*func)(float, float, void *, float);
CODE:
	func   = INT2PTR(void *(*)(float, float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2, f3);
OUTPUT:
	RETVAL

void
nci_vffpf( c_func, f0, f1, p2, f3 )
	SV* c_func
	float f0
	float f1
	void * p2
	float f3
PREINIT:
	void(*func)(float, float, void *, float);
CODE:
	func   = INT2PTR(void(*)(float, float, void *, float), SvIV(c_func) );
	(*func)(f0, f1, p2, f3);

double
nci_dffpf( c_func, f0, f1, p2, f3 )
	SV* c_func
	float f0
	float f1
	void * p2
	float f3
PREINIT:
	double(*func)(float, float, void *, float);
CODE:
	func   = INT2PTR(double(*)(float, float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2, f3);
OUTPUT:
	RETVAL

short
nci_sffpf( c_func, f0, f1, p2, f3 )
	SV* c_func
	float f0
	float f1
	void * p2
	float f3
PREINIT:
	short(*func)(float, float, void *, float);
CODE:
	func   = INT2PTR(short(*)(float, float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2, f3);
OUTPUT:
	RETVAL

float
nci_fffpf( c_func, f0, f1, p2, f3 )
	SV* c_func
	float f0
	float f1
	void * p2
	float f3
PREINIT:
	float(*func)(float, float, void *, float);
CODE:
	func   = INT2PTR(float(*)(float, float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2, f3);
OUTPUT:
	RETVAL

char *
nci_tffpf( c_func, f0, f1, p2, f3 )
	SV* c_func
	float f0
	float f1
	void * p2
	float f3
PREINIT:
	char *(*func)(float, float, void *, float);
CODE:
	func   = INT2PTR(char *(*)(float, float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2, f3);
OUTPUT:
	RETVAL

int
nci_iffpf( c_func, f0, f1, p2, f3 )
	SV* c_func
	float f0
	float f1
	void * p2
	float f3
PREINIT:
	int(*func)(float, float, void *, float);
CODE:
	func   = INT2PTR(int(*)(float, float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2, f3);
OUTPUT:
	RETVAL

void *
nci_ptfpf( c_func, t0, f1, p2, f3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	float f3
PREINIT:
	void *(*func)(char *, float, void *, float);
CODE:
	func   = INT2PTR(void *(*)(char *, float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2, f3);
OUTPUT:
	RETVAL

void
nci_vtfpf( c_func, t0, f1, p2, f3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	float f3
PREINIT:
	void(*func)(char *, float, void *, float);
CODE:
	func   = INT2PTR(void(*)(char *, float, void *, float), SvIV(c_func) );
	(*func)(t0, f1, p2, f3);

double
nci_dtfpf( c_func, t0, f1, p2, f3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	float f3
PREINIT:
	double(*func)(char *, float, void *, float);
CODE:
	func   = INT2PTR(double(*)(char *, float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2, f3);
OUTPUT:
	RETVAL

short
nci_stfpf( c_func, t0, f1, p2, f3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	float f3
PREINIT:
	short(*func)(char *, float, void *, float);
CODE:
	func   = INT2PTR(short(*)(char *, float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2, f3);
OUTPUT:
	RETVAL

float
nci_ftfpf( c_func, t0, f1, p2, f3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	float f3
PREINIT:
	float(*func)(char *, float, void *, float);
CODE:
	func   = INT2PTR(float(*)(char *, float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2, f3);
OUTPUT:
	RETVAL

char *
nci_ttfpf( c_func, t0, f1, p2, f3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	float f3
PREINIT:
	char *(*func)(char *, float, void *, float);
CODE:
	func   = INT2PTR(char *(*)(char *, float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2, f3);
OUTPUT:
	RETVAL

int
nci_itfpf( c_func, t0, f1, p2, f3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	float f3
PREINIT:
	int(*func)(char *, float, void *, float);
CODE:
	func   = INT2PTR(int(*)(char *, float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2, f3);
OUTPUT:
	RETVAL

void *
nci_pifpf( c_func, i0, f1, p2, f3 )
	SV* c_func
	int i0
	float f1
	void * p2
	float f3
PREINIT:
	void *(*func)(int, float, void *, float);
CODE:
	func   = INT2PTR(void *(*)(int, float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2, f3);
OUTPUT:
	RETVAL

void
nci_vifpf( c_func, i0, f1, p2, f3 )
	SV* c_func
	int i0
	float f1
	void * p2
	float f3
PREINIT:
	void(*func)(int, float, void *, float);
CODE:
	func   = INT2PTR(void(*)(int, float, void *, float), SvIV(c_func) );
	(*func)(i0, f1, p2, f3);

double
nci_difpf( c_func, i0, f1, p2, f3 )
	SV* c_func
	int i0
	float f1
	void * p2
	float f3
PREINIT:
	double(*func)(int, float, void *, float);
CODE:
	func   = INT2PTR(double(*)(int, float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2, f3);
OUTPUT:
	RETVAL

short
nci_sifpf( c_func, i0, f1, p2, f3 )
	SV* c_func
	int i0
	float f1
	void * p2
	float f3
PREINIT:
	short(*func)(int, float, void *, float);
CODE:
	func   = INT2PTR(short(*)(int, float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2, f3);
OUTPUT:
	RETVAL

float
nci_fifpf( c_func, i0, f1, p2, f3 )
	SV* c_func
	int i0
	float f1
	void * p2
	float f3
PREINIT:
	float(*func)(int, float, void *, float);
CODE:
	func   = INT2PTR(float(*)(int, float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2, f3);
OUTPUT:
	RETVAL

char *
nci_tifpf( c_func, i0, f1, p2, f3 )
	SV* c_func
	int i0
	float f1
	void * p2
	float f3
PREINIT:
	char *(*func)(int, float, void *, float);
CODE:
	func   = INT2PTR(char *(*)(int, float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2, f3);
OUTPUT:
	RETVAL

int
nci_iifpf( c_func, i0, f1, p2, f3 )
	SV* c_func
	int i0
	float f1
	void * p2
	float f3
PREINIT:
	int(*func)(int, float, void *, float);
CODE:
	func   = INT2PTR(int(*)(int, float, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2, f3);
OUTPUT:
	RETVAL

void *
nci_pptpf( c_func, p0, t1, p2, f3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	float f3
PREINIT:
	void *(*func)(void *, char *, void *, float);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2, f3);
OUTPUT:
	RETVAL

void
nci_vptpf( c_func, p0, t1, p2, f3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	float f3
PREINIT:
	void(*func)(void *, char *, void *, float);
CODE:
	func   = INT2PTR(void(*)(void *, char *, void *, float), SvIV(c_func) );
	(*func)(p0, t1, p2, f3);

double
nci_dptpf( c_func, p0, t1, p2, f3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	float f3
PREINIT:
	double(*func)(void *, char *, void *, float);
CODE:
	func   = INT2PTR(double(*)(void *, char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2, f3);
OUTPUT:
	RETVAL

short
nci_sptpf( c_func, p0, t1, p2, f3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	float f3
PREINIT:
	short(*func)(void *, char *, void *, float);
CODE:
	func   = INT2PTR(short(*)(void *, char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2, f3);
OUTPUT:
	RETVAL

float
nci_fptpf( c_func, p0, t1, p2, f3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	float f3
PREINIT:
	float(*func)(void *, char *, void *, float);
CODE:
	func   = INT2PTR(float(*)(void *, char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2, f3);
OUTPUT:
	RETVAL

char *
nci_tptpf( c_func, p0, t1, p2, f3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	float f3
PREINIT:
	char *(*func)(void *, char *, void *, float);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2, f3);
OUTPUT:
	RETVAL

int
nci_iptpf( c_func, p0, t1, p2, f3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	float f3
PREINIT:
	int(*func)(void *, char *, void *, float);
CODE:
	func   = INT2PTR(int(*)(void *, char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2, f3);
OUTPUT:
	RETVAL

void *
nci_pvtpf( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvtpf( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvtpf( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svtpf( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvtpf( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvtpf( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivtpf( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdtpf( c_func, d0, t1, p2, f3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	float f3
PREINIT:
	void *(*func)(double, char *, void *, float);
CODE:
	func   = INT2PTR(void *(*)(double, char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2, f3);
OUTPUT:
	RETVAL

void
nci_vdtpf( c_func, d0, t1, p2, f3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	float f3
PREINIT:
	void(*func)(double, char *, void *, float);
CODE:
	func   = INT2PTR(void(*)(double, char *, void *, float), SvIV(c_func) );
	(*func)(d0, t1, p2, f3);

double
nci_ddtpf( c_func, d0, t1, p2, f3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	float f3
PREINIT:
	double(*func)(double, char *, void *, float);
CODE:
	func   = INT2PTR(double(*)(double, char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2, f3);
OUTPUT:
	RETVAL

short
nci_sdtpf( c_func, d0, t1, p2, f3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	float f3
PREINIT:
	short(*func)(double, char *, void *, float);
CODE:
	func   = INT2PTR(short(*)(double, char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2, f3);
OUTPUT:
	RETVAL

float
nci_fdtpf( c_func, d0, t1, p2, f3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	float f3
PREINIT:
	float(*func)(double, char *, void *, float);
CODE:
	func   = INT2PTR(float(*)(double, char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2, f3);
OUTPUT:
	RETVAL

char *
nci_tdtpf( c_func, d0, t1, p2, f3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	float f3
PREINIT:
	char *(*func)(double, char *, void *, float);
CODE:
	func   = INT2PTR(char *(*)(double, char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2, f3);
OUTPUT:
	RETVAL

int
nci_idtpf( c_func, d0, t1, p2, f3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	float f3
PREINIT:
	int(*func)(double, char *, void *, float);
CODE:
	func   = INT2PTR(int(*)(double, char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2, f3);
OUTPUT:
	RETVAL

void *
nci_pstpf( c_func, s0, t1, p2, f3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	float f3
PREINIT:
	void *(*func)(short, char *, void *, float);
CODE:
	func   = INT2PTR(void *(*)(short, char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2, f3);
OUTPUT:
	RETVAL

void
nci_vstpf( c_func, s0, t1, p2, f3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	float f3
PREINIT:
	void(*func)(short, char *, void *, float);
CODE:
	func   = INT2PTR(void(*)(short, char *, void *, float), SvIV(c_func) );
	(*func)(s0, t1, p2, f3);

double
nci_dstpf( c_func, s0, t1, p2, f3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	float f3
PREINIT:
	double(*func)(short, char *, void *, float);
CODE:
	func   = INT2PTR(double(*)(short, char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2, f3);
OUTPUT:
	RETVAL

short
nci_sstpf( c_func, s0, t1, p2, f3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	float f3
PREINIT:
	short(*func)(short, char *, void *, float);
CODE:
	func   = INT2PTR(short(*)(short, char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2, f3);
OUTPUT:
	RETVAL

float
nci_fstpf( c_func, s0, t1, p2, f3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	float f3
PREINIT:
	float(*func)(short, char *, void *, float);
CODE:
	func   = INT2PTR(float(*)(short, char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2, f3);
OUTPUT:
	RETVAL

char *
nci_tstpf( c_func, s0, t1, p2, f3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	float f3
PREINIT:
	char *(*func)(short, char *, void *, float);
CODE:
	func   = INT2PTR(char *(*)(short, char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2, f3);
OUTPUT:
	RETVAL

int
nci_istpf( c_func, s0, t1, p2, f3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	float f3
PREINIT:
	int(*func)(short, char *, void *, float);
CODE:
	func   = INT2PTR(int(*)(short, char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2, f3);
OUTPUT:
	RETVAL

void *
nci_pftpf( c_func, f0, t1, p2, f3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	float f3
PREINIT:
	void *(*func)(float, char *, void *, float);
CODE:
	func   = INT2PTR(void *(*)(float, char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2, f3);
OUTPUT:
	RETVAL

void
nci_vftpf( c_func, f0, t1, p2, f3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	float f3
PREINIT:
	void(*func)(float, char *, void *, float);
CODE:
	func   = INT2PTR(void(*)(float, char *, void *, float), SvIV(c_func) );
	(*func)(f0, t1, p2, f3);

double
nci_dftpf( c_func, f0, t1, p2, f3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	float f3
PREINIT:
	double(*func)(float, char *, void *, float);
CODE:
	func   = INT2PTR(double(*)(float, char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2, f3);
OUTPUT:
	RETVAL

short
nci_sftpf( c_func, f0, t1, p2, f3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	float f3
PREINIT:
	short(*func)(float, char *, void *, float);
CODE:
	func   = INT2PTR(short(*)(float, char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2, f3);
OUTPUT:
	RETVAL

float
nci_fftpf( c_func, f0, t1, p2, f3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	float f3
PREINIT:
	float(*func)(float, char *, void *, float);
CODE:
	func   = INT2PTR(float(*)(float, char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2, f3);
OUTPUT:
	RETVAL

char *
nci_tftpf( c_func, f0, t1, p2, f3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	float f3
PREINIT:
	char *(*func)(float, char *, void *, float);
CODE:
	func   = INT2PTR(char *(*)(float, char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2, f3);
OUTPUT:
	RETVAL

int
nci_iftpf( c_func, f0, t1, p2, f3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	float f3
PREINIT:
	int(*func)(float, char *, void *, float);
CODE:
	func   = INT2PTR(int(*)(float, char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2, f3);
OUTPUT:
	RETVAL

void *
nci_pttpf( c_func, t0, t1, p2, f3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	float f3
PREINIT:
	void *(*func)(char *, char *, void *, float);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2, f3);
OUTPUT:
	RETVAL

void
nci_vttpf( c_func, t0, t1, p2, f3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	float f3
PREINIT:
	void(*func)(char *, char *, void *, float);
CODE:
	func   = INT2PTR(void(*)(char *, char *, void *, float), SvIV(c_func) );
	(*func)(t0, t1, p2, f3);

double
nci_dttpf( c_func, t0, t1, p2, f3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	float f3
PREINIT:
	double(*func)(char *, char *, void *, float);
CODE:
	func   = INT2PTR(double(*)(char *, char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2, f3);
OUTPUT:
	RETVAL

short
nci_sttpf( c_func, t0, t1, p2, f3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	float f3
PREINIT:
	short(*func)(char *, char *, void *, float);
CODE:
	func   = INT2PTR(short(*)(char *, char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2, f3);
OUTPUT:
	RETVAL

float
nci_fttpf( c_func, t0, t1, p2, f3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	float f3
PREINIT:
	float(*func)(char *, char *, void *, float);
CODE:
	func   = INT2PTR(float(*)(char *, char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2, f3);
OUTPUT:
	RETVAL

char *
nci_tttpf( c_func, t0, t1, p2, f3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	float f3
PREINIT:
	char *(*func)(char *, char *, void *, float);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2, f3);
OUTPUT:
	RETVAL

int
nci_ittpf( c_func, t0, t1, p2, f3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	float f3
PREINIT:
	int(*func)(char *, char *, void *, float);
CODE:
	func   = INT2PTR(int(*)(char *, char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2, f3);
OUTPUT:
	RETVAL

void *
nci_pitpf( c_func, i0, t1, p2, f3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	float f3
PREINIT:
	void *(*func)(int, char *, void *, float);
CODE:
	func   = INT2PTR(void *(*)(int, char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2, f3);
OUTPUT:
	RETVAL

void
nci_vitpf( c_func, i0, t1, p2, f3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	float f3
PREINIT:
	void(*func)(int, char *, void *, float);
CODE:
	func   = INT2PTR(void(*)(int, char *, void *, float), SvIV(c_func) );
	(*func)(i0, t1, p2, f3);

double
nci_ditpf( c_func, i0, t1, p2, f3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	float f3
PREINIT:
	double(*func)(int, char *, void *, float);
CODE:
	func   = INT2PTR(double(*)(int, char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2, f3);
OUTPUT:
	RETVAL

short
nci_sitpf( c_func, i0, t1, p2, f3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	float f3
PREINIT:
	short(*func)(int, char *, void *, float);
CODE:
	func   = INT2PTR(short(*)(int, char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2, f3);
OUTPUT:
	RETVAL

float
nci_fitpf( c_func, i0, t1, p2, f3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	float f3
PREINIT:
	float(*func)(int, char *, void *, float);
CODE:
	func   = INT2PTR(float(*)(int, char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2, f3);
OUTPUT:
	RETVAL

char *
nci_titpf( c_func, i0, t1, p2, f3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	float f3
PREINIT:
	char *(*func)(int, char *, void *, float);
CODE:
	func   = INT2PTR(char *(*)(int, char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2, f3);
OUTPUT:
	RETVAL

int
nci_iitpf( c_func, i0, t1, p2, f3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	float f3
PREINIT:
	int(*func)(int, char *, void *, float);
CODE:
	func   = INT2PTR(int(*)(int, char *, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2, f3);
OUTPUT:
	RETVAL

void *
nci_ppipf( c_func, p0, i1, p2, f3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	float f3
PREINIT:
	void *(*func)(void *, int, void *, float);
CODE:
	func   = INT2PTR(void *(*)(void *, int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2, f3);
OUTPUT:
	RETVAL

void
nci_vpipf( c_func, p0, i1, p2, f3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	float f3
PREINIT:
	void(*func)(void *, int, void *, float);
CODE:
	func   = INT2PTR(void(*)(void *, int, void *, float), SvIV(c_func) );
	(*func)(p0, i1, p2, f3);

double
nci_dpipf( c_func, p0, i1, p2, f3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	float f3
PREINIT:
	double(*func)(void *, int, void *, float);
CODE:
	func   = INT2PTR(double(*)(void *, int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2, f3);
OUTPUT:
	RETVAL

short
nci_spipf( c_func, p0, i1, p2, f3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	float f3
PREINIT:
	short(*func)(void *, int, void *, float);
CODE:
	func   = INT2PTR(short(*)(void *, int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2, f3);
OUTPUT:
	RETVAL

float
nci_fpipf( c_func, p0, i1, p2, f3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	float f3
PREINIT:
	float(*func)(void *, int, void *, float);
CODE:
	func   = INT2PTR(float(*)(void *, int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2, f3);
OUTPUT:
	RETVAL

char *
nci_tpipf( c_func, p0, i1, p2, f3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	float f3
PREINIT:
	char *(*func)(void *, int, void *, float);
CODE:
	func   = INT2PTR(char *(*)(void *, int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2, f3);
OUTPUT:
	RETVAL

int
nci_ipipf( c_func, p0, i1, p2, f3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	float f3
PREINIT:
	int(*func)(void *, int, void *, float);
CODE:
	func   = INT2PTR(int(*)(void *, int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2, f3);
OUTPUT:
	RETVAL

void *
nci_pvipf( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvipf( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvipf( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svipf( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvipf( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvipf( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivipf( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdipf( c_func, d0, i1, p2, f3 )
	SV* c_func
	double d0
	int i1
	void * p2
	float f3
PREINIT:
	void *(*func)(double, int, void *, float);
CODE:
	func   = INT2PTR(void *(*)(double, int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2, f3);
OUTPUT:
	RETVAL

void
nci_vdipf( c_func, d0, i1, p2, f3 )
	SV* c_func
	double d0
	int i1
	void * p2
	float f3
PREINIT:
	void(*func)(double, int, void *, float);
CODE:
	func   = INT2PTR(void(*)(double, int, void *, float), SvIV(c_func) );
	(*func)(d0, i1, p2, f3);

double
nci_ddipf( c_func, d0, i1, p2, f3 )
	SV* c_func
	double d0
	int i1
	void * p2
	float f3
PREINIT:
	double(*func)(double, int, void *, float);
CODE:
	func   = INT2PTR(double(*)(double, int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2, f3);
OUTPUT:
	RETVAL

short
nci_sdipf( c_func, d0, i1, p2, f3 )
	SV* c_func
	double d0
	int i1
	void * p2
	float f3
PREINIT:
	short(*func)(double, int, void *, float);
CODE:
	func   = INT2PTR(short(*)(double, int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2, f3);
OUTPUT:
	RETVAL

float
nci_fdipf( c_func, d0, i1, p2, f3 )
	SV* c_func
	double d0
	int i1
	void * p2
	float f3
PREINIT:
	float(*func)(double, int, void *, float);
CODE:
	func   = INT2PTR(float(*)(double, int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2, f3);
OUTPUT:
	RETVAL

char *
nci_tdipf( c_func, d0, i1, p2, f3 )
	SV* c_func
	double d0
	int i1
	void * p2
	float f3
PREINIT:
	char *(*func)(double, int, void *, float);
CODE:
	func   = INT2PTR(char *(*)(double, int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2, f3);
OUTPUT:
	RETVAL

int
nci_idipf( c_func, d0, i1, p2, f3 )
	SV* c_func
	double d0
	int i1
	void * p2
	float f3
PREINIT:
	int(*func)(double, int, void *, float);
CODE:
	func   = INT2PTR(int(*)(double, int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2, f3);
OUTPUT:
	RETVAL

void *
nci_psipf( c_func, s0, i1, p2, f3 )
	SV* c_func
	short s0
	int i1
	void * p2
	float f3
PREINIT:
	void *(*func)(short, int, void *, float);
CODE:
	func   = INT2PTR(void *(*)(short, int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2, f3);
OUTPUT:
	RETVAL

void
nci_vsipf( c_func, s0, i1, p2, f3 )
	SV* c_func
	short s0
	int i1
	void * p2
	float f3
PREINIT:
	void(*func)(short, int, void *, float);
CODE:
	func   = INT2PTR(void(*)(short, int, void *, float), SvIV(c_func) );
	(*func)(s0, i1, p2, f3);

double
nci_dsipf( c_func, s0, i1, p2, f3 )
	SV* c_func
	short s0
	int i1
	void * p2
	float f3
PREINIT:
	double(*func)(short, int, void *, float);
CODE:
	func   = INT2PTR(double(*)(short, int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2, f3);
OUTPUT:
	RETVAL

short
nci_ssipf( c_func, s0, i1, p2, f3 )
	SV* c_func
	short s0
	int i1
	void * p2
	float f3
PREINIT:
	short(*func)(short, int, void *, float);
CODE:
	func   = INT2PTR(short(*)(short, int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2, f3);
OUTPUT:
	RETVAL

float
nci_fsipf( c_func, s0, i1, p2, f3 )
	SV* c_func
	short s0
	int i1
	void * p2
	float f3
PREINIT:
	float(*func)(short, int, void *, float);
CODE:
	func   = INT2PTR(float(*)(short, int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2, f3);
OUTPUT:
	RETVAL

char *
nci_tsipf( c_func, s0, i1, p2, f3 )
	SV* c_func
	short s0
	int i1
	void * p2
	float f3
PREINIT:
	char *(*func)(short, int, void *, float);
CODE:
	func   = INT2PTR(char *(*)(short, int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2, f3);
OUTPUT:
	RETVAL

int
nci_isipf( c_func, s0, i1, p2, f3 )
	SV* c_func
	short s0
	int i1
	void * p2
	float f3
PREINIT:
	int(*func)(short, int, void *, float);
CODE:
	func   = INT2PTR(int(*)(short, int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2, f3);
OUTPUT:
	RETVAL

void *
nci_pfipf( c_func, f0, i1, p2, f3 )
	SV* c_func
	float f0
	int i1
	void * p2
	float f3
PREINIT:
	void *(*func)(float, int, void *, float);
CODE:
	func   = INT2PTR(void *(*)(float, int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2, f3);
OUTPUT:
	RETVAL

void
nci_vfipf( c_func, f0, i1, p2, f3 )
	SV* c_func
	float f0
	int i1
	void * p2
	float f3
PREINIT:
	void(*func)(float, int, void *, float);
CODE:
	func   = INT2PTR(void(*)(float, int, void *, float), SvIV(c_func) );
	(*func)(f0, i1, p2, f3);

double
nci_dfipf( c_func, f0, i1, p2, f3 )
	SV* c_func
	float f0
	int i1
	void * p2
	float f3
PREINIT:
	double(*func)(float, int, void *, float);
CODE:
	func   = INT2PTR(double(*)(float, int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2, f3);
OUTPUT:
	RETVAL

short
nci_sfipf( c_func, f0, i1, p2, f3 )
	SV* c_func
	float f0
	int i1
	void * p2
	float f3
PREINIT:
	short(*func)(float, int, void *, float);
CODE:
	func   = INT2PTR(short(*)(float, int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2, f3);
OUTPUT:
	RETVAL

float
nci_ffipf( c_func, f0, i1, p2, f3 )
	SV* c_func
	float f0
	int i1
	void * p2
	float f3
PREINIT:
	float(*func)(float, int, void *, float);
CODE:
	func   = INT2PTR(float(*)(float, int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2, f3);
OUTPUT:
	RETVAL

char *
nci_tfipf( c_func, f0, i1, p2, f3 )
	SV* c_func
	float f0
	int i1
	void * p2
	float f3
PREINIT:
	char *(*func)(float, int, void *, float);
CODE:
	func   = INT2PTR(char *(*)(float, int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2, f3);
OUTPUT:
	RETVAL

int
nci_ifipf( c_func, f0, i1, p2, f3 )
	SV* c_func
	float f0
	int i1
	void * p2
	float f3
PREINIT:
	int(*func)(float, int, void *, float);
CODE:
	func   = INT2PTR(int(*)(float, int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2, f3);
OUTPUT:
	RETVAL

void *
nci_ptipf( c_func, t0, i1, p2, f3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	float f3
PREINIT:
	void *(*func)(char *, int, void *, float);
CODE:
	func   = INT2PTR(void *(*)(char *, int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2, f3);
OUTPUT:
	RETVAL

void
nci_vtipf( c_func, t0, i1, p2, f3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	float f3
PREINIT:
	void(*func)(char *, int, void *, float);
CODE:
	func   = INT2PTR(void(*)(char *, int, void *, float), SvIV(c_func) );
	(*func)(t0, i1, p2, f3);

double
nci_dtipf( c_func, t0, i1, p2, f3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	float f3
PREINIT:
	double(*func)(char *, int, void *, float);
CODE:
	func   = INT2PTR(double(*)(char *, int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2, f3);
OUTPUT:
	RETVAL

short
nci_stipf( c_func, t0, i1, p2, f3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	float f3
PREINIT:
	short(*func)(char *, int, void *, float);
CODE:
	func   = INT2PTR(short(*)(char *, int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2, f3);
OUTPUT:
	RETVAL

float
nci_ftipf( c_func, t0, i1, p2, f3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	float f3
PREINIT:
	float(*func)(char *, int, void *, float);
CODE:
	func   = INT2PTR(float(*)(char *, int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2, f3);
OUTPUT:
	RETVAL

char *
nci_ttipf( c_func, t0, i1, p2, f3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	float f3
PREINIT:
	char *(*func)(char *, int, void *, float);
CODE:
	func   = INT2PTR(char *(*)(char *, int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2, f3);
OUTPUT:
	RETVAL

int
nci_itipf( c_func, t0, i1, p2, f3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	float f3
PREINIT:
	int(*func)(char *, int, void *, float);
CODE:
	func   = INT2PTR(int(*)(char *, int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2, f3);
OUTPUT:
	RETVAL

void *
nci_piipf( c_func, i0, i1, p2, f3 )
	SV* c_func
	int i0
	int i1
	void * p2
	float f3
PREINIT:
	void *(*func)(int, int, void *, float);
CODE:
	func   = INT2PTR(void *(*)(int, int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2, f3);
OUTPUT:
	RETVAL

void
nci_viipf( c_func, i0, i1, p2, f3 )
	SV* c_func
	int i0
	int i1
	void * p2
	float f3
PREINIT:
	void(*func)(int, int, void *, float);
CODE:
	func   = INT2PTR(void(*)(int, int, void *, float), SvIV(c_func) );
	(*func)(i0, i1, p2, f3);

double
nci_diipf( c_func, i0, i1, p2, f3 )
	SV* c_func
	int i0
	int i1
	void * p2
	float f3
PREINIT:
	double(*func)(int, int, void *, float);
CODE:
	func   = INT2PTR(double(*)(int, int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2, f3);
OUTPUT:
	RETVAL

short
nci_siipf( c_func, i0, i1, p2, f3 )
	SV* c_func
	int i0
	int i1
	void * p2
	float f3
PREINIT:
	short(*func)(int, int, void *, float);
CODE:
	func   = INT2PTR(short(*)(int, int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2, f3);
OUTPUT:
	RETVAL

float
nci_fiipf( c_func, i0, i1, p2, f3 )
	SV* c_func
	int i0
	int i1
	void * p2
	float f3
PREINIT:
	float(*func)(int, int, void *, float);
CODE:
	func   = INT2PTR(float(*)(int, int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2, f3);
OUTPUT:
	RETVAL

char *
nci_tiipf( c_func, i0, i1, p2, f3 )
	SV* c_func
	int i0
	int i1
	void * p2
	float f3
PREINIT:
	char *(*func)(int, int, void *, float);
CODE:
	func   = INT2PTR(char *(*)(int, int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2, f3);
OUTPUT:
	RETVAL

int
nci_iiipf( c_func, i0, i1, p2, f3 )
	SV* c_func
	int i0
	int i1
	void * p2
	float f3
PREINIT:
	int(*func)(int, int, void *, float);
CODE:
	func   = INT2PTR(int(*)(int, int, void *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2, f3);
OUTPUT:
	RETVAL

void *
nci_pppdf( c_func, p0, p1, d2, f3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	float f3
PREINIT:
	void *(*func)(void *, void *, double, float);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2, f3);
OUTPUT:
	RETVAL

void
nci_vppdf( c_func, p0, p1, d2, f3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	float f3
PREINIT:
	void(*func)(void *, void *, double, float);
CODE:
	func   = INT2PTR(void(*)(void *, void *, double, float), SvIV(c_func) );
	(*func)(p0, p1, d2, f3);

double
nci_dppdf( c_func, p0, p1, d2, f3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	float f3
PREINIT:
	double(*func)(void *, void *, double, float);
CODE:
	func   = INT2PTR(double(*)(void *, void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2, f3);
OUTPUT:
	RETVAL

short
nci_sppdf( c_func, p0, p1, d2, f3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	float f3
PREINIT:
	short(*func)(void *, void *, double, float);
CODE:
	func   = INT2PTR(short(*)(void *, void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2, f3);
OUTPUT:
	RETVAL

float
nci_fppdf( c_func, p0, p1, d2, f3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	float f3
PREINIT:
	float(*func)(void *, void *, double, float);
CODE:
	func   = INT2PTR(float(*)(void *, void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2, f3);
OUTPUT:
	RETVAL

char *
nci_tppdf( c_func, p0, p1, d2, f3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	float f3
PREINIT:
	char *(*func)(void *, void *, double, float);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2, f3);
OUTPUT:
	RETVAL

int
nci_ippdf( c_func, p0, p1, d2, f3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	float f3
PREINIT:
	int(*func)(void *, void *, double, float);
CODE:
	func   = INT2PTR(int(*)(void *, void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2, f3);
OUTPUT:
	RETVAL

void *
nci_pvpdf( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvpdf( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvpdf( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svpdf( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvpdf( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvpdf( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivpdf( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdpdf( c_func, d0, p1, d2, f3 )
	SV* c_func
	double d0
	void * p1
	double d2
	float f3
PREINIT:
	void *(*func)(double, void *, double, float);
CODE:
	func   = INT2PTR(void *(*)(double, void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2, f3);
OUTPUT:
	RETVAL

void
nci_vdpdf( c_func, d0, p1, d2, f3 )
	SV* c_func
	double d0
	void * p1
	double d2
	float f3
PREINIT:
	void(*func)(double, void *, double, float);
CODE:
	func   = INT2PTR(void(*)(double, void *, double, float), SvIV(c_func) );
	(*func)(d0, p1, d2, f3);

double
nci_ddpdf( c_func, d0, p1, d2, f3 )
	SV* c_func
	double d0
	void * p1
	double d2
	float f3
PREINIT:
	double(*func)(double, void *, double, float);
CODE:
	func   = INT2PTR(double(*)(double, void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2, f3);
OUTPUT:
	RETVAL

short
nci_sdpdf( c_func, d0, p1, d2, f3 )
	SV* c_func
	double d0
	void * p1
	double d2
	float f3
PREINIT:
	short(*func)(double, void *, double, float);
CODE:
	func   = INT2PTR(short(*)(double, void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2, f3);
OUTPUT:
	RETVAL

float
nci_fdpdf( c_func, d0, p1, d2, f3 )
	SV* c_func
	double d0
	void * p1
	double d2
	float f3
PREINIT:
	float(*func)(double, void *, double, float);
CODE:
	func   = INT2PTR(float(*)(double, void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2, f3);
OUTPUT:
	RETVAL

char *
nci_tdpdf( c_func, d0, p1, d2, f3 )
	SV* c_func
	double d0
	void * p1
	double d2
	float f3
PREINIT:
	char *(*func)(double, void *, double, float);
CODE:
	func   = INT2PTR(char *(*)(double, void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2, f3);
OUTPUT:
	RETVAL

int
nci_idpdf( c_func, d0, p1, d2, f3 )
	SV* c_func
	double d0
	void * p1
	double d2
	float f3
PREINIT:
	int(*func)(double, void *, double, float);
CODE:
	func   = INT2PTR(int(*)(double, void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2, f3);
OUTPUT:
	RETVAL

void *
nci_pspdf( c_func, s0, p1, d2, f3 )
	SV* c_func
	short s0
	void * p1
	double d2
	float f3
PREINIT:
	void *(*func)(short, void *, double, float);
CODE:
	func   = INT2PTR(void *(*)(short, void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2, f3);
OUTPUT:
	RETVAL

void
nci_vspdf( c_func, s0, p1, d2, f3 )
	SV* c_func
	short s0
	void * p1
	double d2
	float f3
PREINIT:
	void(*func)(short, void *, double, float);
CODE:
	func   = INT2PTR(void(*)(short, void *, double, float), SvIV(c_func) );
	(*func)(s0, p1, d2, f3);

double
nci_dspdf( c_func, s0, p1, d2, f3 )
	SV* c_func
	short s0
	void * p1
	double d2
	float f3
PREINIT:
	double(*func)(short, void *, double, float);
CODE:
	func   = INT2PTR(double(*)(short, void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2, f3);
OUTPUT:
	RETVAL

short
nci_sspdf( c_func, s0, p1, d2, f3 )
	SV* c_func
	short s0
	void * p1
	double d2
	float f3
PREINIT:
	short(*func)(short, void *, double, float);
CODE:
	func   = INT2PTR(short(*)(short, void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2, f3);
OUTPUT:
	RETVAL

float
nci_fspdf( c_func, s0, p1, d2, f3 )
	SV* c_func
	short s0
	void * p1
	double d2
	float f3
PREINIT:
	float(*func)(short, void *, double, float);
CODE:
	func   = INT2PTR(float(*)(short, void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2, f3);
OUTPUT:
	RETVAL

char *
nci_tspdf( c_func, s0, p1, d2, f3 )
	SV* c_func
	short s0
	void * p1
	double d2
	float f3
PREINIT:
	char *(*func)(short, void *, double, float);
CODE:
	func   = INT2PTR(char *(*)(short, void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2, f3);
OUTPUT:
	RETVAL

int
nci_ispdf( c_func, s0, p1, d2, f3 )
	SV* c_func
	short s0
	void * p1
	double d2
	float f3
PREINIT:
	int(*func)(short, void *, double, float);
CODE:
	func   = INT2PTR(int(*)(short, void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2, f3);
OUTPUT:
	RETVAL

void *
nci_pfpdf( c_func, f0, p1, d2, f3 )
	SV* c_func
	float f0
	void * p1
	double d2
	float f3
PREINIT:
	void *(*func)(float, void *, double, float);
CODE:
	func   = INT2PTR(void *(*)(float, void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2, f3);
OUTPUT:
	RETVAL

void
nci_vfpdf( c_func, f0, p1, d2, f3 )
	SV* c_func
	float f0
	void * p1
	double d2
	float f3
PREINIT:
	void(*func)(float, void *, double, float);
CODE:
	func   = INT2PTR(void(*)(float, void *, double, float), SvIV(c_func) );
	(*func)(f0, p1, d2, f3);

double
nci_dfpdf( c_func, f0, p1, d2, f3 )
	SV* c_func
	float f0
	void * p1
	double d2
	float f3
PREINIT:
	double(*func)(float, void *, double, float);
CODE:
	func   = INT2PTR(double(*)(float, void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2, f3);
OUTPUT:
	RETVAL

short
nci_sfpdf( c_func, f0, p1, d2, f3 )
	SV* c_func
	float f0
	void * p1
	double d2
	float f3
PREINIT:
	short(*func)(float, void *, double, float);
CODE:
	func   = INT2PTR(short(*)(float, void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2, f3);
OUTPUT:
	RETVAL

float
nci_ffpdf( c_func, f0, p1, d2, f3 )
	SV* c_func
	float f0
	void * p1
	double d2
	float f3
PREINIT:
	float(*func)(float, void *, double, float);
CODE:
	func   = INT2PTR(float(*)(float, void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2, f3);
OUTPUT:
	RETVAL

char *
nci_tfpdf( c_func, f0, p1, d2, f3 )
	SV* c_func
	float f0
	void * p1
	double d2
	float f3
PREINIT:
	char *(*func)(float, void *, double, float);
CODE:
	func   = INT2PTR(char *(*)(float, void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2, f3);
OUTPUT:
	RETVAL

int
nci_ifpdf( c_func, f0, p1, d2, f3 )
	SV* c_func
	float f0
	void * p1
	double d2
	float f3
PREINIT:
	int(*func)(float, void *, double, float);
CODE:
	func   = INT2PTR(int(*)(float, void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2, f3);
OUTPUT:
	RETVAL

void *
nci_ptpdf( c_func, t0, p1, d2, f3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	float f3
PREINIT:
	void *(*func)(char *, void *, double, float);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2, f3);
OUTPUT:
	RETVAL

void
nci_vtpdf( c_func, t0, p1, d2, f3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	float f3
PREINIT:
	void(*func)(char *, void *, double, float);
CODE:
	func   = INT2PTR(void(*)(char *, void *, double, float), SvIV(c_func) );
	(*func)(t0, p1, d2, f3);

double
nci_dtpdf( c_func, t0, p1, d2, f3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	float f3
PREINIT:
	double(*func)(char *, void *, double, float);
CODE:
	func   = INT2PTR(double(*)(char *, void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2, f3);
OUTPUT:
	RETVAL

short
nci_stpdf( c_func, t0, p1, d2, f3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	float f3
PREINIT:
	short(*func)(char *, void *, double, float);
CODE:
	func   = INT2PTR(short(*)(char *, void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2, f3);
OUTPUT:
	RETVAL

float
nci_ftpdf( c_func, t0, p1, d2, f3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	float f3
PREINIT:
	float(*func)(char *, void *, double, float);
CODE:
	func   = INT2PTR(float(*)(char *, void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2, f3);
OUTPUT:
	RETVAL

char *
nci_ttpdf( c_func, t0, p1, d2, f3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	float f3
PREINIT:
	char *(*func)(char *, void *, double, float);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2, f3);
OUTPUT:
	RETVAL

int
nci_itpdf( c_func, t0, p1, d2, f3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	float f3
PREINIT:
	int(*func)(char *, void *, double, float);
CODE:
	func   = INT2PTR(int(*)(char *, void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2, f3);
OUTPUT:
	RETVAL

void *
nci_pipdf( c_func, i0, p1, d2, f3 )
	SV* c_func
	int i0
	void * p1
	double d2
	float f3
PREINIT:
	void *(*func)(int, void *, double, float);
CODE:
	func   = INT2PTR(void *(*)(int, void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2, f3);
OUTPUT:
	RETVAL

void
nci_vipdf( c_func, i0, p1, d2, f3 )
	SV* c_func
	int i0
	void * p1
	double d2
	float f3
PREINIT:
	void(*func)(int, void *, double, float);
CODE:
	func   = INT2PTR(void(*)(int, void *, double, float), SvIV(c_func) );
	(*func)(i0, p1, d2, f3);

double
nci_dipdf( c_func, i0, p1, d2, f3 )
	SV* c_func
	int i0
	void * p1
	double d2
	float f3
PREINIT:
	double(*func)(int, void *, double, float);
CODE:
	func   = INT2PTR(double(*)(int, void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2, f3);
OUTPUT:
	RETVAL

short
nci_sipdf( c_func, i0, p1, d2, f3 )
	SV* c_func
	int i0
	void * p1
	double d2
	float f3
PREINIT:
	short(*func)(int, void *, double, float);
CODE:
	func   = INT2PTR(short(*)(int, void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2, f3);
OUTPUT:
	RETVAL

float
nci_fipdf( c_func, i0, p1, d2, f3 )
	SV* c_func
	int i0
	void * p1
	double d2
	float f3
PREINIT:
	float(*func)(int, void *, double, float);
CODE:
	func   = INT2PTR(float(*)(int, void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2, f3);
OUTPUT:
	RETVAL

char *
nci_tipdf( c_func, i0, p1, d2, f3 )
	SV* c_func
	int i0
	void * p1
	double d2
	float f3
PREINIT:
	char *(*func)(int, void *, double, float);
CODE:
	func   = INT2PTR(char *(*)(int, void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2, f3);
OUTPUT:
	RETVAL

int
nci_iipdf( c_func, i0, p1, d2, f3 )
	SV* c_func
	int i0
	void * p1
	double d2
	float f3
PREINIT:
	int(*func)(int, void *, double, float);
CODE:
	func   = INT2PTR(int(*)(int, void *, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2, f3);
OUTPUT:
	RETVAL

void *
nci_ppddf( c_func, p0, d1, d2, f3 )
	SV* c_func
	void * p0
	double d1
	double d2
	float f3
PREINIT:
	void *(*func)(void *, double, double, float);
CODE:
	func   = INT2PTR(void *(*)(void *, double, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2, f3);
OUTPUT:
	RETVAL

void
nci_vpddf( c_func, p0, d1, d2, f3 )
	SV* c_func
	void * p0
	double d1
	double d2
	float f3
PREINIT:
	void(*func)(void *, double, double, float);
CODE:
	func   = INT2PTR(void(*)(void *, double, double, float), SvIV(c_func) );
	(*func)(p0, d1, d2, f3);

double
nci_dpddf( c_func, p0, d1, d2, f3 )
	SV* c_func
	void * p0
	double d1
	double d2
	float f3
PREINIT:
	double(*func)(void *, double, double, float);
CODE:
	func   = INT2PTR(double(*)(void *, double, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2, f3);
OUTPUT:
	RETVAL

short
nci_spddf( c_func, p0, d1, d2, f3 )
	SV* c_func
	void * p0
	double d1
	double d2
	float f3
PREINIT:
	short(*func)(void *, double, double, float);
CODE:
	func   = INT2PTR(short(*)(void *, double, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2, f3);
OUTPUT:
	RETVAL

float
nci_fpddf( c_func, p0, d1, d2, f3 )
	SV* c_func
	void * p0
	double d1
	double d2
	float f3
PREINIT:
	float(*func)(void *, double, double, float);
CODE:
	func   = INT2PTR(float(*)(void *, double, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2, f3);
OUTPUT:
	RETVAL

char *
nci_tpddf( c_func, p0, d1, d2, f3 )
	SV* c_func
	void * p0
	double d1
	double d2
	float f3
PREINIT:
	char *(*func)(void *, double, double, float);
CODE:
	func   = INT2PTR(char *(*)(void *, double, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2, f3);
OUTPUT:
	RETVAL

int
nci_ipddf( c_func, p0, d1, d2, f3 )
	SV* c_func
	void * p0
	double d1
	double d2
	float f3
PREINIT:
	int(*func)(void *, double, double, float);
CODE:
	func   = INT2PTR(int(*)(void *, double, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2, f3);
OUTPUT:
	RETVAL

void *
nci_pvddf( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvddf( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvddf( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svddf( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvddf( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvddf( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivddf( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdddf( c_func, d0, d1, d2, f3 )
	SV* c_func
	double d0
	double d1
	double d2
	float f3
PREINIT:
	void *(*func)(double, double, double, float);
CODE:
	func   = INT2PTR(void *(*)(double, double, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2, f3);
OUTPUT:
	RETVAL

void
nci_vdddf( c_func, d0, d1, d2, f3 )
	SV* c_func
	double d0
	double d1
	double d2
	float f3
PREINIT:
	void(*func)(double, double, double, float);
CODE:
	func   = INT2PTR(void(*)(double, double, double, float), SvIV(c_func) );
	(*func)(d0, d1, d2, f3);

double
nci_ddddf( c_func, d0, d1, d2, f3 )
	SV* c_func
	double d0
	double d1
	double d2
	float f3
PREINIT:
	double(*func)(double, double, double, float);
CODE:
	func   = INT2PTR(double(*)(double, double, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2, f3);
OUTPUT:
	RETVAL

short
nci_sdddf( c_func, d0, d1, d2, f3 )
	SV* c_func
	double d0
	double d1
	double d2
	float f3
PREINIT:
	short(*func)(double, double, double, float);
CODE:
	func   = INT2PTR(short(*)(double, double, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2, f3);
OUTPUT:
	RETVAL

float
nci_fdddf( c_func, d0, d1, d2, f3 )
	SV* c_func
	double d0
	double d1
	double d2
	float f3
PREINIT:
	float(*func)(double, double, double, float);
CODE:
	func   = INT2PTR(float(*)(double, double, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2, f3);
OUTPUT:
	RETVAL

char *
nci_tdddf( c_func, d0, d1, d2, f3 )
	SV* c_func
	double d0
	double d1
	double d2
	float f3
PREINIT:
	char *(*func)(double, double, double, float);
CODE:
	func   = INT2PTR(char *(*)(double, double, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2, f3);
OUTPUT:
	RETVAL

int
nci_idddf( c_func, d0, d1, d2, f3 )
	SV* c_func
	double d0
	double d1
	double d2
	float f3
PREINIT:
	int(*func)(double, double, double, float);
CODE:
	func   = INT2PTR(int(*)(double, double, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2, f3);
OUTPUT:
	RETVAL

void *
nci_psddf( c_func, s0, d1, d2, f3 )
	SV* c_func
	short s0
	double d1
	double d2
	float f3
PREINIT:
	void *(*func)(short, double, double, float);
CODE:
	func   = INT2PTR(void *(*)(short, double, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2, f3);
OUTPUT:
	RETVAL

void
nci_vsddf( c_func, s0, d1, d2, f3 )
	SV* c_func
	short s0
	double d1
	double d2
	float f3
PREINIT:
	void(*func)(short, double, double, float);
CODE:
	func   = INT2PTR(void(*)(short, double, double, float), SvIV(c_func) );
	(*func)(s0, d1, d2, f3);

double
nci_dsddf( c_func, s0, d1, d2, f3 )
	SV* c_func
	short s0
	double d1
	double d2
	float f3
PREINIT:
	double(*func)(short, double, double, float);
CODE:
	func   = INT2PTR(double(*)(short, double, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2, f3);
OUTPUT:
	RETVAL

short
nci_ssddf( c_func, s0, d1, d2, f3 )
	SV* c_func
	short s0
	double d1
	double d2
	float f3
PREINIT:
	short(*func)(short, double, double, float);
CODE:
	func   = INT2PTR(short(*)(short, double, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2, f3);
OUTPUT:
	RETVAL

float
nci_fsddf( c_func, s0, d1, d2, f3 )
	SV* c_func
	short s0
	double d1
	double d2
	float f3
PREINIT:
	float(*func)(short, double, double, float);
CODE:
	func   = INT2PTR(float(*)(short, double, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2, f3);
OUTPUT:
	RETVAL

char *
nci_tsddf( c_func, s0, d1, d2, f3 )
	SV* c_func
	short s0
	double d1
	double d2
	float f3
PREINIT:
	char *(*func)(short, double, double, float);
CODE:
	func   = INT2PTR(char *(*)(short, double, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2, f3);
OUTPUT:
	RETVAL

int
nci_isddf( c_func, s0, d1, d2, f3 )
	SV* c_func
	short s0
	double d1
	double d2
	float f3
PREINIT:
	int(*func)(short, double, double, float);
CODE:
	func   = INT2PTR(int(*)(short, double, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2, f3);
OUTPUT:
	RETVAL

void *
nci_pfddf( c_func, f0, d1, d2, f3 )
	SV* c_func
	float f0
	double d1
	double d2
	float f3
PREINIT:
	void *(*func)(float, double, double, float);
CODE:
	func   = INT2PTR(void *(*)(float, double, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2, f3);
OUTPUT:
	RETVAL

void
nci_vfddf( c_func, f0, d1, d2, f3 )
	SV* c_func
	float f0
	double d1
	double d2
	float f3
PREINIT:
	void(*func)(float, double, double, float);
CODE:
	func   = INT2PTR(void(*)(float, double, double, float), SvIV(c_func) );
	(*func)(f0, d1, d2, f3);

double
nci_dfddf( c_func, f0, d1, d2, f3 )
	SV* c_func
	float f0
	double d1
	double d2
	float f3
PREINIT:
	double(*func)(float, double, double, float);
CODE:
	func   = INT2PTR(double(*)(float, double, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2, f3);
OUTPUT:
	RETVAL

short
nci_sfddf( c_func, f0, d1, d2, f3 )
	SV* c_func
	float f0
	double d1
	double d2
	float f3
PREINIT:
	short(*func)(float, double, double, float);
CODE:
	func   = INT2PTR(short(*)(float, double, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2, f3);
OUTPUT:
	RETVAL

float
nci_ffddf( c_func, f0, d1, d2, f3 )
	SV* c_func
	float f0
	double d1
	double d2
	float f3
PREINIT:
	float(*func)(float, double, double, float);
CODE:
	func   = INT2PTR(float(*)(float, double, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2, f3);
OUTPUT:
	RETVAL

char *
nci_tfddf( c_func, f0, d1, d2, f3 )
	SV* c_func
	float f0
	double d1
	double d2
	float f3
PREINIT:
	char *(*func)(float, double, double, float);
CODE:
	func   = INT2PTR(char *(*)(float, double, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2, f3);
OUTPUT:
	RETVAL

int
nci_ifddf( c_func, f0, d1, d2, f3 )
	SV* c_func
	float f0
	double d1
	double d2
	float f3
PREINIT:
	int(*func)(float, double, double, float);
CODE:
	func   = INT2PTR(int(*)(float, double, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2, f3);
OUTPUT:
	RETVAL

void *
nci_ptddf( c_func, t0, d1, d2, f3 )
	SV* c_func
	char * t0
	double d1
	double d2
	float f3
PREINIT:
	void *(*func)(char *, double, double, float);
CODE:
	func   = INT2PTR(void *(*)(char *, double, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2, f3);
OUTPUT:
	RETVAL

void
nci_vtddf( c_func, t0, d1, d2, f3 )
	SV* c_func
	char * t0
	double d1
	double d2
	float f3
PREINIT:
	void(*func)(char *, double, double, float);
CODE:
	func   = INT2PTR(void(*)(char *, double, double, float), SvIV(c_func) );
	(*func)(t0, d1, d2, f3);

double
nci_dtddf( c_func, t0, d1, d2, f3 )
	SV* c_func
	char * t0
	double d1
	double d2
	float f3
PREINIT:
	double(*func)(char *, double, double, float);
CODE:
	func   = INT2PTR(double(*)(char *, double, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2, f3);
OUTPUT:
	RETVAL

short
nci_stddf( c_func, t0, d1, d2, f3 )
	SV* c_func
	char * t0
	double d1
	double d2
	float f3
PREINIT:
	short(*func)(char *, double, double, float);
CODE:
	func   = INT2PTR(short(*)(char *, double, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2, f3);
OUTPUT:
	RETVAL

float
nci_ftddf( c_func, t0, d1, d2, f3 )
	SV* c_func
	char * t0
	double d1
	double d2
	float f3
PREINIT:
	float(*func)(char *, double, double, float);
CODE:
	func   = INT2PTR(float(*)(char *, double, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2, f3);
OUTPUT:
	RETVAL

char *
nci_ttddf( c_func, t0, d1, d2, f3 )
	SV* c_func
	char * t0
	double d1
	double d2
	float f3
PREINIT:
	char *(*func)(char *, double, double, float);
CODE:
	func   = INT2PTR(char *(*)(char *, double, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2, f3);
OUTPUT:
	RETVAL

int
nci_itddf( c_func, t0, d1, d2, f3 )
	SV* c_func
	char * t0
	double d1
	double d2
	float f3
PREINIT:
	int(*func)(char *, double, double, float);
CODE:
	func   = INT2PTR(int(*)(char *, double, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2, f3);
OUTPUT:
	RETVAL

void *
nci_piddf( c_func, i0, d1, d2, f3 )
	SV* c_func
	int i0
	double d1
	double d2
	float f3
PREINIT:
	void *(*func)(int, double, double, float);
CODE:
	func   = INT2PTR(void *(*)(int, double, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2, f3);
OUTPUT:
	RETVAL

void
nci_viddf( c_func, i0, d1, d2, f3 )
	SV* c_func
	int i0
	double d1
	double d2
	float f3
PREINIT:
	void(*func)(int, double, double, float);
CODE:
	func   = INT2PTR(void(*)(int, double, double, float), SvIV(c_func) );
	(*func)(i0, d1, d2, f3);

double
nci_diddf( c_func, i0, d1, d2, f3 )
	SV* c_func
	int i0
	double d1
	double d2
	float f3
PREINIT:
	double(*func)(int, double, double, float);
CODE:
	func   = INT2PTR(double(*)(int, double, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2, f3);
OUTPUT:
	RETVAL

short
nci_siddf( c_func, i0, d1, d2, f3 )
	SV* c_func
	int i0
	double d1
	double d2
	float f3
PREINIT:
	short(*func)(int, double, double, float);
CODE:
	func   = INT2PTR(short(*)(int, double, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2, f3);
OUTPUT:
	RETVAL

float
nci_fiddf( c_func, i0, d1, d2, f3 )
	SV* c_func
	int i0
	double d1
	double d2
	float f3
PREINIT:
	float(*func)(int, double, double, float);
CODE:
	func   = INT2PTR(float(*)(int, double, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2, f3);
OUTPUT:
	RETVAL

char *
nci_tiddf( c_func, i0, d1, d2, f3 )
	SV* c_func
	int i0
	double d1
	double d2
	float f3
PREINIT:
	char *(*func)(int, double, double, float);
CODE:
	func   = INT2PTR(char *(*)(int, double, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2, f3);
OUTPUT:
	RETVAL

int
nci_iiddf( c_func, i0, d1, d2, f3 )
	SV* c_func
	int i0
	double d1
	double d2
	float f3
PREINIT:
	int(*func)(int, double, double, float);
CODE:
	func   = INT2PTR(int(*)(int, double, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2, f3);
OUTPUT:
	RETVAL

void *
nci_ppsdf( c_func, p0, s1, d2, f3 )
	SV* c_func
	void * p0
	short s1
	double d2
	float f3
PREINIT:
	void *(*func)(void *, short, double, float);
CODE:
	func   = INT2PTR(void *(*)(void *, short, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2, f3);
OUTPUT:
	RETVAL

void
nci_vpsdf( c_func, p0, s1, d2, f3 )
	SV* c_func
	void * p0
	short s1
	double d2
	float f3
PREINIT:
	void(*func)(void *, short, double, float);
CODE:
	func   = INT2PTR(void(*)(void *, short, double, float), SvIV(c_func) );
	(*func)(p0, s1, d2, f3);

double
nci_dpsdf( c_func, p0, s1, d2, f3 )
	SV* c_func
	void * p0
	short s1
	double d2
	float f3
PREINIT:
	double(*func)(void *, short, double, float);
CODE:
	func   = INT2PTR(double(*)(void *, short, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2, f3);
OUTPUT:
	RETVAL

short
nci_spsdf( c_func, p0, s1, d2, f3 )
	SV* c_func
	void * p0
	short s1
	double d2
	float f3
PREINIT:
	short(*func)(void *, short, double, float);
CODE:
	func   = INT2PTR(short(*)(void *, short, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2, f3);
OUTPUT:
	RETVAL

float
nci_fpsdf( c_func, p0, s1, d2, f3 )
	SV* c_func
	void * p0
	short s1
	double d2
	float f3
PREINIT:
	float(*func)(void *, short, double, float);
CODE:
	func   = INT2PTR(float(*)(void *, short, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2, f3);
OUTPUT:
	RETVAL

char *
nci_tpsdf( c_func, p0, s1, d2, f3 )
	SV* c_func
	void * p0
	short s1
	double d2
	float f3
PREINIT:
	char *(*func)(void *, short, double, float);
CODE:
	func   = INT2PTR(char *(*)(void *, short, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2, f3);
OUTPUT:
	RETVAL

int
nci_ipsdf( c_func, p0, s1, d2, f3 )
	SV* c_func
	void * p0
	short s1
	double d2
	float f3
PREINIT:
	int(*func)(void *, short, double, float);
CODE:
	func   = INT2PTR(int(*)(void *, short, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2, f3);
OUTPUT:
	RETVAL

void *
nci_pvsdf( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvsdf( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvsdf( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svsdf( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvsdf( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvsdf( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivsdf( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdsdf( c_func, d0, s1, d2, f3 )
	SV* c_func
	double d0
	short s1
	double d2
	float f3
PREINIT:
	void *(*func)(double, short, double, float);
CODE:
	func   = INT2PTR(void *(*)(double, short, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2, f3);
OUTPUT:
	RETVAL

void
nci_vdsdf( c_func, d0, s1, d2, f3 )
	SV* c_func
	double d0
	short s1
	double d2
	float f3
PREINIT:
	void(*func)(double, short, double, float);
CODE:
	func   = INT2PTR(void(*)(double, short, double, float), SvIV(c_func) );
	(*func)(d0, s1, d2, f3);

double
nci_ddsdf( c_func, d0, s1, d2, f3 )
	SV* c_func
	double d0
	short s1
	double d2
	float f3
PREINIT:
	double(*func)(double, short, double, float);
CODE:
	func   = INT2PTR(double(*)(double, short, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2, f3);
OUTPUT:
	RETVAL

short
nci_sdsdf( c_func, d0, s1, d2, f3 )
	SV* c_func
	double d0
	short s1
	double d2
	float f3
PREINIT:
	short(*func)(double, short, double, float);
CODE:
	func   = INT2PTR(short(*)(double, short, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2, f3);
OUTPUT:
	RETVAL

float
nci_fdsdf( c_func, d0, s1, d2, f3 )
	SV* c_func
	double d0
	short s1
	double d2
	float f3
PREINIT:
	float(*func)(double, short, double, float);
CODE:
	func   = INT2PTR(float(*)(double, short, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2, f3);
OUTPUT:
	RETVAL

char *
nci_tdsdf( c_func, d0, s1, d2, f3 )
	SV* c_func
	double d0
	short s1
	double d2
	float f3
PREINIT:
	char *(*func)(double, short, double, float);
CODE:
	func   = INT2PTR(char *(*)(double, short, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2, f3);
OUTPUT:
	RETVAL

int
nci_idsdf( c_func, d0, s1, d2, f3 )
	SV* c_func
	double d0
	short s1
	double d2
	float f3
PREINIT:
	int(*func)(double, short, double, float);
CODE:
	func   = INT2PTR(int(*)(double, short, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2, f3);
OUTPUT:
	RETVAL

void *
nci_pssdf( c_func, s0, s1, d2, f3 )
	SV* c_func
	short s0
	short s1
	double d2
	float f3
PREINIT:
	void *(*func)(short, short, double, float);
CODE:
	func   = INT2PTR(void *(*)(short, short, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2, f3);
OUTPUT:
	RETVAL

void
nci_vssdf( c_func, s0, s1, d2, f3 )
	SV* c_func
	short s0
	short s1
	double d2
	float f3
PREINIT:
	void(*func)(short, short, double, float);
CODE:
	func   = INT2PTR(void(*)(short, short, double, float), SvIV(c_func) );
	(*func)(s0, s1, d2, f3);

double
nci_dssdf( c_func, s0, s1, d2, f3 )
	SV* c_func
	short s0
	short s1
	double d2
	float f3
PREINIT:
	double(*func)(short, short, double, float);
CODE:
	func   = INT2PTR(double(*)(short, short, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2, f3);
OUTPUT:
	RETVAL

short
nci_sssdf( c_func, s0, s1, d2, f3 )
	SV* c_func
	short s0
	short s1
	double d2
	float f3
PREINIT:
	short(*func)(short, short, double, float);
CODE:
	func   = INT2PTR(short(*)(short, short, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2, f3);
OUTPUT:
	RETVAL

float
nci_fssdf( c_func, s0, s1, d2, f3 )
	SV* c_func
	short s0
	short s1
	double d2
	float f3
PREINIT:
	float(*func)(short, short, double, float);
CODE:
	func   = INT2PTR(float(*)(short, short, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2, f3);
OUTPUT:
	RETVAL

char *
nci_tssdf( c_func, s0, s1, d2, f3 )
	SV* c_func
	short s0
	short s1
	double d2
	float f3
PREINIT:
	char *(*func)(short, short, double, float);
CODE:
	func   = INT2PTR(char *(*)(short, short, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2, f3);
OUTPUT:
	RETVAL

int
nci_issdf( c_func, s0, s1, d2, f3 )
	SV* c_func
	short s0
	short s1
	double d2
	float f3
PREINIT:
	int(*func)(short, short, double, float);
CODE:
	func   = INT2PTR(int(*)(short, short, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2, f3);
OUTPUT:
	RETVAL

void *
nci_pfsdf( c_func, f0, s1, d2, f3 )
	SV* c_func
	float f0
	short s1
	double d2
	float f3
PREINIT:
	void *(*func)(float, short, double, float);
CODE:
	func   = INT2PTR(void *(*)(float, short, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2, f3);
OUTPUT:
	RETVAL

void
nci_vfsdf( c_func, f0, s1, d2, f3 )
	SV* c_func
	float f0
	short s1
	double d2
	float f3
PREINIT:
	void(*func)(float, short, double, float);
CODE:
	func   = INT2PTR(void(*)(float, short, double, float), SvIV(c_func) );
	(*func)(f0, s1, d2, f3);

double
nci_dfsdf( c_func, f0, s1, d2, f3 )
	SV* c_func
	float f0
	short s1
	double d2
	float f3
PREINIT:
	double(*func)(float, short, double, float);
CODE:
	func   = INT2PTR(double(*)(float, short, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2, f3);
OUTPUT:
	RETVAL

short
nci_sfsdf( c_func, f0, s1, d2, f3 )
	SV* c_func
	float f0
	short s1
	double d2
	float f3
PREINIT:
	short(*func)(float, short, double, float);
CODE:
	func   = INT2PTR(short(*)(float, short, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2, f3);
OUTPUT:
	RETVAL

float
nci_ffsdf( c_func, f0, s1, d2, f3 )
	SV* c_func
	float f0
	short s1
	double d2
	float f3
PREINIT:
	float(*func)(float, short, double, float);
CODE:
	func   = INT2PTR(float(*)(float, short, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2, f3);
OUTPUT:
	RETVAL

char *
nci_tfsdf( c_func, f0, s1, d2, f3 )
	SV* c_func
	float f0
	short s1
	double d2
	float f3
PREINIT:
	char *(*func)(float, short, double, float);
CODE:
	func   = INT2PTR(char *(*)(float, short, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2, f3);
OUTPUT:
	RETVAL

int
nci_ifsdf( c_func, f0, s1, d2, f3 )
	SV* c_func
	float f0
	short s1
	double d2
	float f3
PREINIT:
	int(*func)(float, short, double, float);
CODE:
	func   = INT2PTR(int(*)(float, short, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2, f3);
OUTPUT:
	RETVAL

void *
nci_ptsdf( c_func, t0, s1, d2, f3 )
	SV* c_func
	char * t0
	short s1
	double d2
	float f3
PREINIT:
	void *(*func)(char *, short, double, float);
CODE:
	func   = INT2PTR(void *(*)(char *, short, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2, f3);
OUTPUT:
	RETVAL

void
nci_vtsdf( c_func, t0, s1, d2, f3 )
	SV* c_func
	char * t0
	short s1
	double d2
	float f3
PREINIT:
	void(*func)(char *, short, double, float);
CODE:
	func   = INT2PTR(void(*)(char *, short, double, float), SvIV(c_func) );
	(*func)(t0, s1, d2, f3);

double
nci_dtsdf( c_func, t0, s1, d2, f3 )
	SV* c_func
	char * t0
	short s1
	double d2
	float f3
PREINIT:
	double(*func)(char *, short, double, float);
CODE:
	func   = INT2PTR(double(*)(char *, short, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2, f3);
OUTPUT:
	RETVAL

short
nci_stsdf( c_func, t0, s1, d2, f3 )
	SV* c_func
	char * t0
	short s1
	double d2
	float f3
PREINIT:
	short(*func)(char *, short, double, float);
CODE:
	func   = INT2PTR(short(*)(char *, short, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2, f3);
OUTPUT:
	RETVAL

float
nci_ftsdf( c_func, t0, s1, d2, f3 )
	SV* c_func
	char * t0
	short s1
	double d2
	float f3
PREINIT:
	float(*func)(char *, short, double, float);
CODE:
	func   = INT2PTR(float(*)(char *, short, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2, f3);
OUTPUT:
	RETVAL

char *
nci_ttsdf( c_func, t0, s1, d2, f3 )
	SV* c_func
	char * t0
	short s1
	double d2
	float f3
PREINIT:
	char *(*func)(char *, short, double, float);
CODE:
	func   = INT2PTR(char *(*)(char *, short, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2, f3);
OUTPUT:
	RETVAL

int
nci_itsdf( c_func, t0, s1, d2, f3 )
	SV* c_func
	char * t0
	short s1
	double d2
	float f3
PREINIT:
	int(*func)(char *, short, double, float);
CODE:
	func   = INT2PTR(int(*)(char *, short, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2, f3);
OUTPUT:
	RETVAL

void *
nci_pisdf( c_func, i0, s1, d2, f3 )
	SV* c_func
	int i0
	short s1
	double d2
	float f3
PREINIT:
	void *(*func)(int, short, double, float);
CODE:
	func   = INT2PTR(void *(*)(int, short, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2, f3);
OUTPUT:
	RETVAL

void
nci_visdf( c_func, i0, s1, d2, f3 )
	SV* c_func
	int i0
	short s1
	double d2
	float f3
PREINIT:
	void(*func)(int, short, double, float);
CODE:
	func   = INT2PTR(void(*)(int, short, double, float), SvIV(c_func) );
	(*func)(i0, s1, d2, f3);

double
nci_disdf( c_func, i0, s1, d2, f3 )
	SV* c_func
	int i0
	short s1
	double d2
	float f3
PREINIT:
	double(*func)(int, short, double, float);
CODE:
	func   = INT2PTR(double(*)(int, short, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2, f3);
OUTPUT:
	RETVAL

short
nci_sisdf( c_func, i0, s1, d2, f3 )
	SV* c_func
	int i0
	short s1
	double d2
	float f3
PREINIT:
	short(*func)(int, short, double, float);
CODE:
	func   = INT2PTR(short(*)(int, short, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2, f3);
OUTPUT:
	RETVAL

float
nci_fisdf( c_func, i0, s1, d2, f3 )
	SV* c_func
	int i0
	short s1
	double d2
	float f3
PREINIT:
	float(*func)(int, short, double, float);
CODE:
	func   = INT2PTR(float(*)(int, short, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2, f3);
OUTPUT:
	RETVAL

char *
nci_tisdf( c_func, i0, s1, d2, f3 )
	SV* c_func
	int i0
	short s1
	double d2
	float f3
PREINIT:
	char *(*func)(int, short, double, float);
CODE:
	func   = INT2PTR(char *(*)(int, short, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2, f3);
OUTPUT:
	RETVAL

int
nci_iisdf( c_func, i0, s1, d2, f3 )
	SV* c_func
	int i0
	short s1
	double d2
	float f3
PREINIT:
	int(*func)(int, short, double, float);
CODE:
	func   = INT2PTR(int(*)(int, short, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2, f3);
OUTPUT:
	RETVAL

void *
nci_ppfdf( c_func, p0, f1, d2, f3 )
	SV* c_func
	void * p0
	float f1
	double d2
	float f3
PREINIT:
	void *(*func)(void *, float, double, float);
CODE:
	func   = INT2PTR(void *(*)(void *, float, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2, f3);
OUTPUT:
	RETVAL

void
nci_vpfdf( c_func, p0, f1, d2, f3 )
	SV* c_func
	void * p0
	float f1
	double d2
	float f3
PREINIT:
	void(*func)(void *, float, double, float);
CODE:
	func   = INT2PTR(void(*)(void *, float, double, float), SvIV(c_func) );
	(*func)(p0, f1, d2, f3);

double
nci_dpfdf( c_func, p0, f1, d2, f3 )
	SV* c_func
	void * p0
	float f1
	double d2
	float f3
PREINIT:
	double(*func)(void *, float, double, float);
CODE:
	func   = INT2PTR(double(*)(void *, float, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2, f3);
OUTPUT:
	RETVAL

short
nci_spfdf( c_func, p0, f1, d2, f3 )
	SV* c_func
	void * p0
	float f1
	double d2
	float f3
PREINIT:
	short(*func)(void *, float, double, float);
CODE:
	func   = INT2PTR(short(*)(void *, float, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2, f3);
OUTPUT:
	RETVAL

float
nci_fpfdf( c_func, p0, f1, d2, f3 )
	SV* c_func
	void * p0
	float f1
	double d2
	float f3
PREINIT:
	float(*func)(void *, float, double, float);
CODE:
	func   = INT2PTR(float(*)(void *, float, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2, f3);
OUTPUT:
	RETVAL

char *
nci_tpfdf( c_func, p0, f1, d2, f3 )
	SV* c_func
	void * p0
	float f1
	double d2
	float f3
PREINIT:
	char *(*func)(void *, float, double, float);
CODE:
	func   = INT2PTR(char *(*)(void *, float, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2, f3);
OUTPUT:
	RETVAL

int
nci_ipfdf( c_func, p0, f1, d2, f3 )
	SV* c_func
	void * p0
	float f1
	double d2
	float f3
PREINIT:
	int(*func)(void *, float, double, float);
CODE:
	func   = INT2PTR(int(*)(void *, float, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2, f3);
OUTPUT:
	RETVAL

void *
nci_pvfdf( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvfdf( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvfdf( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svfdf( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvfdf( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvfdf( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivfdf( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdfdf( c_func, d0, f1, d2, f3 )
	SV* c_func
	double d0
	float f1
	double d2
	float f3
PREINIT:
	void *(*func)(double, float, double, float);
CODE:
	func   = INT2PTR(void *(*)(double, float, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2, f3);
OUTPUT:
	RETVAL

void
nci_vdfdf( c_func, d0, f1, d2, f3 )
	SV* c_func
	double d0
	float f1
	double d2
	float f3
PREINIT:
	void(*func)(double, float, double, float);
CODE:
	func   = INT2PTR(void(*)(double, float, double, float), SvIV(c_func) );
	(*func)(d0, f1, d2, f3);

double
nci_ddfdf( c_func, d0, f1, d2, f3 )
	SV* c_func
	double d0
	float f1
	double d2
	float f3
PREINIT:
	double(*func)(double, float, double, float);
CODE:
	func   = INT2PTR(double(*)(double, float, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2, f3);
OUTPUT:
	RETVAL

short
nci_sdfdf( c_func, d0, f1, d2, f3 )
	SV* c_func
	double d0
	float f1
	double d2
	float f3
PREINIT:
	short(*func)(double, float, double, float);
CODE:
	func   = INT2PTR(short(*)(double, float, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2, f3);
OUTPUT:
	RETVAL

float
nci_fdfdf( c_func, d0, f1, d2, f3 )
	SV* c_func
	double d0
	float f1
	double d2
	float f3
PREINIT:
	float(*func)(double, float, double, float);
CODE:
	func   = INT2PTR(float(*)(double, float, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2, f3);
OUTPUT:
	RETVAL

char *
nci_tdfdf( c_func, d0, f1, d2, f3 )
	SV* c_func
	double d0
	float f1
	double d2
	float f3
PREINIT:
	char *(*func)(double, float, double, float);
CODE:
	func   = INT2PTR(char *(*)(double, float, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2, f3);
OUTPUT:
	RETVAL

int
nci_idfdf( c_func, d0, f1, d2, f3 )
	SV* c_func
	double d0
	float f1
	double d2
	float f3
PREINIT:
	int(*func)(double, float, double, float);
CODE:
	func   = INT2PTR(int(*)(double, float, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2, f3);
OUTPUT:
	RETVAL

void *
nci_psfdf( c_func, s0, f1, d2, f3 )
	SV* c_func
	short s0
	float f1
	double d2
	float f3
PREINIT:
	void *(*func)(short, float, double, float);
CODE:
	func   = INT2PTR(void *(*)(short, float, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2, f3);
OUTPUT:
	RETVAL

void
nci_vsfdf( c_func, s0, f1, d2, f3 )
	SV* c_func
	short s0
	float f1
	double d2
	float f3
PREINIT:
	void(*func)(short, float, double, float);
CODE:
	func   = INT2PTR(void(*)(short, float, double, float), SvIV(c_func) );
	(*func)(s0, f1, d2, f3);

double
nci_dsfdf( c_func, s0, f1, d2, f3 )
	SV* c_func
	short s0
	float f1
	double d2
	float f3
PREINIT:
	double(*func)(short, float, double, float);
CODE:
	func   = INT2PTR(double(*)(short, float, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2, f3);
OUTPUT:
	RETVAL

short
nci_ssfdf( c_func, s0, f1, d2, f3 )
	SV* c_func
	short s0
	float f1
	double d2
	float f3
PREINIT:
	short(*func)(short, float, double, float);
CODE:
	func   = INT2PTR(short(*)(short, float, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2, f3);
OUTPUT:
	RETVAL

float
nci_fsfdf( c_func, s0, f1, d2, f3 )
	SV* c_func
	short s0
	float f1
	double d2
	float f3
PREINIT:
	float(*func)(short, float, double, float);
CODE:
	func   = INT2PTR(float(*)(short, float, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2, f3);
OUTPUT:
	RETVAL

char *
nci_tsfdf( c_func, s0, f1, d2, f3 )
	SV* c_func
	short s0
	float f1
	double d2
	float f3
PREINIT:
	char *(*func)(short, float, double, float);
CODE:
	func   = INT2PTR(char *(*)(short, float, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2, f3);
OUTPUT:
	RETVAL

int
nci_isfdf( c_func, s0, f1, d2, f3 )
	SV* c_func
	short s0
	float f1
	double d2
	float f3
PREINIT:
	int(*func)(short, float, double, float);
CODE:
	func   = INT2PTR(int(*)(short, float, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2, f3);
OUTPUT:
	RETVAL

void *
nci_pffdf( c_func, f0, f1, d2, f3 )
	SV* c_func
	float f0
	float f1
	double d2
	float f3
PREINIT:
	void *(*func)(float, float, double, float);
CODE:
	func   = INT2PTR(void *(*)(float, float, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2, f3);
OUTPUT:
	RETVAL

void
nci_vffdf( c_func, f0, f1, d2, f3 )
	SV* c_func
	float f0
	float f1
	double d2
	float f3
PREINIT:
	void(*func)(float, float, double, float);
CODE:
	func   = INT2PTR(void(*)(float, float, double, float), SvIV(c_func) );
	(*func)(f0, f1, d2, f3);

double
nci_dffdf( c_func, f0, f1, d2, f3 )
	SV* c_func
	float f0
	float f1
	double d2
	float f3
PREINIT:
	double(*func)(float, float, double, float);
CODE:
	func   = INT2PTR(double(*)(float, float, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2, f3);
OUTPUT:
	RETVAL

short
nci_sffdf( c_func, f0, f1, d2, f3 )
	SV* c_func
	float f0
	float f1
	double d2
	float f3
PREINIT:
	short(*func)(float, float, double, float);
CODE:
	func   = INT2PTR(short(*)(float, float, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2, f3);
OUTPUT:
	RETVAL

float
nci_fffdf( c_func, f0, f1, d2, f3 )
	SV* c_func
	float f0
	float f1
	double d2
	float f3
PREINIT:
	float(*func)(float, float, double, float);
CODE:
	func   = INT2PTR(float(*)(float, float, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2, f3);
OUTPUT:
	RETVAL

char *
nci_tffdf( c_func, f0, f1, d2, f3 )
	SV* c_func
	float f0
	float f1
	double d2
	float f3
PREINIT:
	char *(*func)(float, float, double, float);
CODE:
	func   = INT2PTR(char *(*)(float, float, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2, f3);
OUTPUT:
	RETVAL

int
nci_iffdf( c_func, f0, f1, d2, f3 )
	SV* c_func
	float f0
	float f1
	double d2
	float f3
PREINIT:
	int(*func)(float, float, double, float);
CODE:
	func   = INT2PTR(int(*)(float, float, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2, f3);
OUTPUT:
	RETVAL

void *
nci_ptfdf( c_func, t0, f1, d2, f3 )
	SV* c_func
	char * t0
	float f1
	double d2
	float f3
PREINIT:
	void *(*func)(char *, float, double, float);
CODE:
	func   = INT2PTR(void *(*)(char *, float, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2, f3);
OUTPUT:
	RETVAL

void
nci_vtfdf( c_func, t0, f1, d2, f3 )
	SV* c_func
	char * t0
	float f1
	double d2
	float f3
PREINIT:
	void(*func)(char *, float, double, float);
CODE:
	func   = INT2PTR(void(*)(char *, float, double, float), SvIV(c_func) );
	(*func)(t0, f1, d2, f3);

double
nci_dtfdf( c_func, t0, f1, d2, f3 )
	SV* c_func
	char * t0
	float f1
	double d2
	float f3
PREINIT:
	double(*func)(char *, float, double, float);
CODE:
	func   = INT2PTR(double(*)(char *, float, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2, f3);
OUTPUT:
	RETVAL

short
nci_stfdf( c_func, t0, f1, d2, f3 )
	SV* c_func
	char * t0
	float f1
	double d2
	float f3
PREINIT:
	short(*func)(char *, float, double, float);
CODE:
	func   = INT2PTR(short(*)(char *, float, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2, f3);
OUTPUT:
	RETVAL

float
nci_ftfdf( c_func, t0, f1, d2, f3 )
	SV* c_func
	char * t0
	float f1
	double d2
	float f3
PREINIT:
	float(*func)(char *, float, double, float);
CODE:
	func   = INT2PTR(float(*)(char *, float, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2, f3);
OUTPUT:
	RETVAL

char *
nci_ttfdf( c_func, t0, f1, d2, f3 )
	SV* c_func
	char * t0
	float f1
	double d2
	float f3
PREINIT:
	char *(*func)(char *, float, double, float);
CODE:
	func   = INT2PTR(char *(*)(char *, float, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2, f3);
OUTPUT:
	RETVAL

int
nci_itfdf( c_func, t0, f1, d2, f3 )
	SV* c_func
	char * t0
	float f1
	double d2
	float f3
PREINIT:
	int(*func)(char *, float, double, float);
CODE:
	func   = INT2PTR(int(*)(char *, float, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2, f3);
OUTPUT:
	RETVAL

void *
nci_pifdf( c_func, i0, f1, d2, f3 )
	SV* c_func
	int i0
	float f1
	double d2
	float f3
PREINIT:
	void *(*func)(int, float, double, float);
CODE:
	func   = INT2PTR(void *(*)(int, float, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2, f3);
OUTPUT:
	RETVAL

void
nci_vifdf( c_func, i0, f1, d2, f3 )
	SV* c_func
	int i0
	float f1
	double d2
	float f3
PREINIT:
	void(*func)(int, float, double, float);
CODE:
	func   = INT2PTR(void(*)(int, float, double, float), SvIV(c_func) );
	(*func)(i0, f1, d2, f3);

double
nci_difdf( c_func, i0, f1, d2, f3 )
	SV* c_func
	int i0
	float f1
	double d2
	float f3
PREINIT:
	double(*func)(int, float, double, float);
CODE:
	func   = INT2PTR(double(*)(int, float, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2, f3);
OUTPUT:
	RETVAL

short
nci_sifdf( c_func, i0, f1, d2, f3 )
	SV* c_func
	int i0
	float f1
	double d2
	float f3
PREINIT:
	short(*func)(int, float, double, float);
CODE:
	func   = INT2PTR(short(*)(int, float, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2, f3);
OUTPUT:
	RETVAL

float
nci_fifdf( c_func, i0, f1, d2, f3 )
	SV* c_func
	int i0
	float f1
	double d2
	float f3
PREINIT:
	float(*func)(int, float, double, float);
CODE:
	func   = INT2PTR(float(*)(int, float, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2, f3);
OUTPUT:
	RETVAL

char *
nci_tifdf( c_func, i0, f1, d2, f3 )
	SV* c_func
	int i0
	float f1
	double d2
	float f3
PREINIT:
	char *(*func)(int, float, double, float);
CODE:
	func   = INT2PTR(char *(*)(int, float, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2, f3);
OUTPUT:
	RETVAL

int
nci_iifdf( c_func, i0, f1, d2, f3 )
	SV* c_func
	int i0
	float f1
	double d2
	float f3
PREINIT:
	int(*func)(int, float, double, float);
CODE:
	func   = INT2PTR(int(*)(int, float, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2, f3);
OUTPUT:
	RETVAL

void *
nci_pptdf( c_func, p0, t1, d2, f3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	float f3
PREINIT:
	void *(*func)(void *, char *, double, float);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2, f3);
OUTPUT:
	RETVAL

void
nci_vptdf( c_func, p0, t1, d2, f3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	float f3
PREINIT:
	void(*func)(void *, char *, double, float);
CODE:
	func   = INT2PTR(void(*)(void *, char *, double, float), SvIV(c_func) );
	(*func)(p0, t1, d2, f3);

double
nci_dptdf( c_func, p0, t1, d2, f3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	float f3
PREINIT:
	double(*func)(void *, char *, double, float);
CODE:
	func   = INT2PTR(double(*)(void *, char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2, f3);
OUTPUT:
	RETVAL

short
nci_sptdf( c_func, p0, t1, d2, f3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	float f3
PREINIT:
	short(*func)(void *, char *, double, float);
CODE:
	func   = INT2PTR(short(*)(void *, char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2, f3);
OUTPUT:
	RETVAL

float
nci_fptdf( c_func, p0, t1, d2, f3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	float f3
PREINIT:
	float(*func)(void *, char *, double, float);
CODE:
	func   = INT2PTR(float(*)(void *, char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2, f3);
OUTPUT:
	RETVAL

char *
nci_tptdf( c_func, p0, t1, d2, f3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	float f3
PREINIT:
	char *(*func)(void *, char *, double, float);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2, f3);
OUTPUT:
	RETVAL

int
nci_iptdf( c_func, p0, t1, d2, f3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	float f3
PREINIT:
	int(*func)(void *, char *, double, float);
CODE:
	func   = INT2PTR(int(*)(void *, char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2, f3);
OUTPUT:
	RETVAL

void *
nci_pvtdf( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvtdf( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvtdf( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svtdf( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvtdf( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvtdf( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivtdf( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdtdf( c_func, d0, t1, d2, f3 )
	SV* c_func
	double d0
	char * t1
	double d2
	float f3
PREINIT:
	void *(*func)(double, char *, double, float);
CODE:
	func   = INT2PTR(void *(*)(double, char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2, f3);
OUTPUT:
	RETVAL

void
nci_vdtdf( c_func, d0, t1, d2, f3 )
	SV* c_func
	double d0
	char * t1
	double d2
	float f3
PREINIT:
	void(*func)(double, char *, double, float);
CODE:
	func   = INT2PTR(void(*)(double, char *, double, float), SvIV(c_func) );
	(*func)(d0, t1, d2, f3);

double
nci_ddtdf( c_func, d0, t1, d2, f3 )
	SV* c_func
	double d0
	char * t1
	double d2
	float f3
PREINIT:
	double(*func)(double, char *, double, float);
CODE:
	func   = INT2PTR(double(*)(double, char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2, f3);
OUTPUT:
	RETVAL

short
nci_sdtdf( c_func, d0, t1, d2, f3 )
	SV* c_func
	double d0
	char * t1
	double d2
	float f3
PREINIT:
	short(*func)(double, char *, double, float);
CODE:
	func   = INT2PTR(short(*)(double, char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2, f3);
OUTPUT:
	RETVAL

float
nci_fdtdf( c_func, d0, t1, d2, f3 )
	SV* c_func
	double d0
	char * t1
	double d2
	float f3
PREINIT:
	float(*func)(double, char *, double, float);
CODE:
	func   = INT2PTR(float(*)(double, char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2, f3);
OUTPUT:
	RETVAL

char *
nci_tdtdf( c_func, d0, t1, d2, f3 )
	SV* c_func
	double d0
	char * t1
	double d2
	float f3
PREINIT:
	char *(*func)(double, char *, double, float);
CODE:
	func   = INT2PTR(char *(*)(double, char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2, f3);
OUTPUT:
	RETVAL

int
nci_idtdf( c_func, d0, t1, d2, f3 )
	SV* c_func
	double d0
	char * t1
	double d2
	float f3
PREINIT:
	int(*func)(double, char *, double, float);
CODE:
	func   = INT2PTR(int(*)(double, char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2, f3);
OUTPUT:
	RETVAL

void *
nci_pstdf( c_func, s0, t1, d2, f3 )
	SV* c_func
	short s0
	char * t1
	double d2
	float f3
PREINIT:
	void *(*func)(short, char *, double, float);
CODE:
	func   = INT2PTR(void *(*)(short, char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2, f3);
OUTPUT:
	RETVAL

void
nci_vstdf( c_func, s0, t1, d2, f3 )
	SV* c_func
	short s0
	char * t1
	double d2
	float f3
PREINIT:
	void(*func)(short, char *, double, float);
CODE:
	func   = INT2PTR(void(*)(short, char *, double, float), SvIV(c_func) );
	(*func)(s0, t1, d2, f3);

double
nci_dstdf( c_func, s0, t1, d2, f3 )
	SV* c_func
	short s0
	char * t1
	double d2
	float f3
PREINIT:
	double(*func)(short, char *, double, float);
CODE:
	func   = INT2PTR(double(*)(short, char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2, f3);
OUTPUT:
	RETVAL

short
nci_sstdf( c_func, s0, t1, d2, f3 )
	SV* c_func
	short s0
	char * t1
	double d2
	float f3
PREINIT:
	short(*func)(short, char *, double, float);
CODE:
	func   = INT2PTR(short(*)(short, char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2, f3);
OUTPUT:
	RETVAL

float
nci_fstdf( c_func, s0, t1, d2, f3 )
	SV* c_func
	short s0
	char * t1
	double d2
	float f3
PREINIT:
	float(*func)(short, char *, double, float);
CODE:
	func   = INT2PTR(float(*)(short, char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2, f3);
OUTPUT:
	RETVAL

char *
nci_tstdf( c_func, s0, t1, d2, f3 )
	SV* c_func
	short s0
	char * t1
	double d2
	float f3
PREINIT:
	char *(*func)(short, char *, double, float);
CODE:
	func   = INT2PTR(char *(*)(short, char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2, f3);
OUTPUT:
	RETVAL

int
nci_istdf( c_func, s0, t1, d2, f3 )
	SV* c_func
	short s0
	char * t1
	double d2
	float f3
PREINIT:
	int(*func)(short, char *, double, float);
CODE:
	func   = INT2PTR(int(*)(short, char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2, f3);
OUTPUT:
	RETVAL

void *
nci_pftdf( c_func, f0, t1, d2, f3 )
	SV* c_func
	float f0
	char * t1
	double d2
	float f3
PREINIT:
	void *(*func)(float, char *, double, float);
CODE:
	func   = INT2PTR(void *(*)(float, char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2, f3);
OUTPUT:
	RETVAL

void
nci_vftdf( c_func, f0, t1, d2, f3 )
	SV* c_func
	float f0
	char * t1
	double d2
	float f3
PREINIT:
	void(*func)(float, char *, double, float);
CODE:
	func   = INT2PTR(void(*)(float, char *, double, float), SvIV(c_func) );
	(*func)(f0, t1, d2, f3);

double
nci_dftdf( c_func, f0, t1, d2, f3 )
	SV* c_func
	float f0
	char * t1
	double d2
	float f3
PREINIT:
	double(*func)(float, char *, double, float);
CODE:
	func   = INT2PTR(double(*)(float, char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2, f3);
OUTPUT:
	RETVAL

short
nci_sftdf( c_func, f0, t1, d2, f3 )
	SV* c_func
	float f0
	char * t1
	double d2
	float f3
PREINIT:
	short(*func)(float, char *, double, float);
CODE:
	func   = INT2PTR(short(*)(float, char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2, f3);
OUTPUT:
	RETVAL

float
nci_fftdf( c_func, f0, t1, d2, f3 )
	SV* c_func
	float f0
	char * t1
	double d2
	float f3
PREINIT:
	float(*func)(float, char *, double, float);
CODE:
	func   = INT2PTR(float(*)(float, char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2, f3);
OUTPUT:
	RETVAL

char *
nci_tftdf( c_func, f0, t1, d2, f3 )
	SV* c_func
	float f0
	char * t1
	double d2
	float f3
PREINIT:
	char *(*func)(float, char *, double, float);
CODE:
	func   = INT2PTR(char *(*)(float, char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2, f3);
OUTPUT:
	RETVAL

int
nci_iftdf( c_func, f0, t1, d2, f3 )
	SV* c_func
	float f0
	char * t1
	double d2
	float f3
PREINIT:
	int(*func)(float, char *, double, float);
CODE:
	func   = INT2PTR(int(*)(float, char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2, f3);
OUTPUT:
	RETVAL

void *
nci_pttdf( c_func, t0, t1, d2, f3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	float f3
PREINIT:
	void *(*func)(char *, char *, double, float);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2, f3);
OUTPUT:
	RETVAL

void
nci_vttdf( c_func, t0, t1, d2, f3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	float f3
PREINIT:
	void(*func)(char *, char *, double, float);
CODE:
	func   = INT2PTR(void(*)(char *, char *, double, float), SvIV(c_func) );
	(*func)(t0, t1, d2, f3);

double
nci_dttdf( c_func, t0, t1, d2, f3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	float f3
PREINIT:
	double(*func)(char *, char *, double, float);
CODE:
	func   = INT2PTR(double(*)(char *, char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2, f3);
OUTPUT:
	RETVAL

short
nci_sttdf( c_func, t0, t1, d2, f3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	float f3
PREINIT:
	short(*func)(char *, char *, double, float);
CODE:
	func   = INT2PTR(short(*)(char *, char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2, f3);
OUTPUT:
	RETVAL

float
nci_fttdf( c_func, t0, t1, d2, f3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	float f3
PREINIT:
	float(*func)(char *, char *, double, float);
CODE:
	func   = INT2PTR(float(*)(char *, char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2, f3);
OUTPUT:
	RETVAL

char *
nci_tttdf( c_func, t0, t1, d2, f3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	float f3
PREINIT:
	char *(*func)(char *, char *, double, float);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2, f3);
OUTPUT:
	RETVAL

int
nci_ittdf( c_func, t0, t1, d2, f3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	float f3
PREINIT:
	int(*func)(char *, char *, double, float);
CODE:
	func   = INT2PTR(int(*)(char *, char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2, f3);
OUTPUT:
	RETVAL

void *
nci_pitdf( c_func, i0, t1, d2, f3 )
	SV* c_func
	int i0
	char * t1
	double d2
	float f3
PREINIT:
	void *(*func)(int, char *, double, float);
CODE:
	func   = INT2PTR(void *(*)(int, char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2, f3);
OUTPUT:
	RETVAL

void
nci_vitdf( c_func, i0, t1, d2, f3 )
	SV* c_func
	int i0
	char * t1
	double d2
	float f3
PREINIT:
	void(*func)(int, char *, double, float);
CODE:
	func   = INT2PTR(void(*)(int, char *, double, float), SvIV(c_func) );
	(*func)(i0, t1, d2, f3);

double
nci_ditdf( c_func, i0, t1, d2, f3 )
	SV* c_func
	int i0
	char * t1
	double d2
	float f3
PREINIT:
	double(*func)(int, char *, double, float);
CODE:
	func   = INT2PTR(double(*)(int, char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2, f3);
OUTPUT:
	RETVAL

short
nci_sitdf( c_func, i0, t1, d2, f3 )
	SV* c_func
	int i0
	char * t1
	double d2
	float f3
PREINIT:
	short(*func)(int, char *, double, float);
CODE:
	func   = INT2PTR(short(*)(int, char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2, f3);
OUTPUT:
	RETVAL

float
nci_fitdf( c_func, i0, t1, d2, f3 )
	SV* c_func
	int i0
	char * t1
	double d2
	float f3
PREINIT:
	float(*func)(int, char *, double, float);
CODE:
	func   = INT2PTR(float(*)(int, char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2, f3);
OUTPUT:
	RETVAL

char *
nci_titdf( c_func, i0, t1, d2, f3 )
	SV* c_func
	int i0
	char * t1
	double d2
	float f3
PREINIT:
	char *(*func)(int, char *, double, float);
CODE:
	func   = INT2PTR(char *(*)(int, char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2, f3);
OUTPUT:
	RETVAL

int
nci_iitdf( c_func, i0, t1, d2, f3 )
	SV* c_func
	int i0
	char * t1
	double d2
	float f3
PREINIT:
	int(*func)(int, char *, double, float);
CODE:
	func   = INT2PTR(int(*)(int, char *, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2, f3);
OUTPUT:
	RETVAL

void *
nci_ppidf( c_func, p0, i1, d2, f3 )
	SV* c_func
	void * p0
	int i1
	double d2
	float f3
PREINIT:
	void *(*func)(void *, int, double, float);
CODE:
	func   = INT2PTR(void *(*)(void *, int, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2, f3);
OUTPUT:
	RETVAL

void
nci_vpidf( c_func, p0, i1, d2, f3 )
	SV* c_func
	void * p0
	int i1
	double d2
	float f3
PREINIT:
	void(*func)(void *, int, double, float);
CODE:
	func   = INT2PTR(void(*)(void *, int, double, float), SvIV(c_func) );
	(*func)(p0, i1, d2, f3);

double
nci_dpidf( c_func, p0, i1, d2, f3 )
	SV* c_func
	void * p0
	int i1
	double d2
	float f3
PREINIT:
	double(*func)(void *, int, double, float);
CODE:
	func   = INT2PTR(double(*)(void *, int, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2, f3);
OUTPUT:
	RETVAL

short
nci_spidf( c_func, p0, i1, d2, f3 )
	SV* c_func
	void * p0
	int i1
	double d2
	float f3
PREINIT:
	short(*func)(void *, int, double, float);
CODE:
	func   = INT2PTR(short(*)(void *, int, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2, f3);
OUTPUT:
	RETVAL

float
nci_fpidf( c_func, p0, i1, d2, f3 )
	SV* c_func
	void * p0
	int i1
	double d2
	float f3
PREINIT:
	float(*func)(void *, int, double, float);
CODE:
	func   = INT2PTR(float(*)(void *, int, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2, f3);
OUTPUT:
	RETVAL

char *
nci_tpidf( c_func, p0, i1, d2, f3 )
	SV* c_func
	void * p0
	int i1
	double d2
	float f3
PREINIT:
	char *(*func)(void *, int, double, float);
CODE:
	func   = INT2PTR(char *(*)(void *, int, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2, f3);
OUTPUT:
	RETVAL

int
nci_ipidf( c_func, p0, i1, d2, f3 )
	SV* c_func
	void * p0
	int i1
	double d2
	float f3
PREINIT:
	int(*func)(void *, int, double, float);
CODE:
	func   = INT2PTR(int(*)(void *, int, double, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2, f3);
OUTPUT:
	RETVAL

void *
nci_pvidf( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvidf( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvidf( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svidf( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvidf( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvidf( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ividf( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdidf( c_func, d0, i1, d2, f3 )
	SV* c_func
	double d0
	int i1
	double d2
	float f3
PREINIT:
	void *(*func)(double, int, double, float);
CODE:
	func   = INT2PTR(void *(*)(double, int, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2, f3);
OUTPUT:
	RETVAL

void
nci_vdidf( c_func, d0, i1, d2, f3 )
	SV* c_func
	double d0
	int i1
	double d2
	float f3
PREINIT:
	void(*func)(double, int, double, float);
CODE:
	func   = INT2PTR(void(*)(double, int, double, float), SvIV(c_func) );
	(*func)(d0, i1, d2, f3);

double
nci_ddidf( c_func, d0, i1, d2, f3 )
	SV* c_func
	double d0
	int i1
	double d2
	float f3
PREINIT:
	double(*func)(double, int, double, float);
CODE:
	func   = INT2PTR(double(*)(double, int, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2, f3);
OUTPUT:
	RETVAL

short
nci_sdidf( c_func, d0, i1, d2, f3 )
	SV* c_func
	double d0
	int i1
	double d2
	float f3
PREINIT:
	short(*func)(double, int, double, float);
CODE:
	func   = INT2PTR(short(*)(double, int, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2, f3);
OUTPUT:
	RETVAL

float
nci_fdidf( c_func, d0, i1, d2, f3 )
	SV* c_func
	double d0
	int i1
	double d2
	float f3
PREINIT:
	float(*func)(double, int, double, float);
CODE:
	func   = INT2PTR(float(*)(double, int, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2, f3);
OUTPUT:
	RETVAL

char *
nci_tdidf( c_func, d0, i1, d2, f3 )
	SV* c_func
	double d0
	int i1
	double d2
	float f3
PREINIT:
	char *(*func)(double, int, double, float);
CODE:
	func   = INT2PTR(char *(*)(double, int, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2, f3);
OUTPUT:
	RETVAL

int
nci_ididf( c_func, d0, i1, d2, f3 )
	SV* c_func
	double d0
	int i1
	double d2
	float f3
PREINIT:
	int(*func)(double, int, double, float);
CODE:
	func   = INT2PTR(int(*)(double, int, double, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2, f3);
OUTPUT:
	RETVAL

void *
nci_psidf( c_func, s0, i1, d2, f3 )
	SV* c_func
	short s0
	int i1
	double d2
	float f3
PREINIT:
	void *(*func)(short, int, double, float);
CODE:
	func   = INT2PTR(void *(*)(short, int, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2, f3);
OUTPUT:
	RETVAL

void
nci_vsidf( c_func, s0, i1, d2, f3 )
	SV* c_func
	short s0
	int i1
	double d2
	float f3
PREINIT:
	void(*func)(short, int, double, float);
CODE:
	func   = INT2PTR(void(*)(short, int, double, float), SvIV(c_func) );
	(*func)(s0, i1, d2, f3);

double
nci_dsidf( c_func, s0, i1, d2, f3 )
	SV* c_func
	short s0
	int i1
	double d2
	float f3
PREINIT:
	double(*func)(short, int, double, float);
CODE:
	func   = INT2PTR(double(*)(short, int, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2, f3);
OUTPUT:
	RETVAL

short
nci_ssidf( c_func, s0, i1, d2, f3 )
	SV* c_func
	short s0
	int i1
	double d2
	float f3
PREINIT:
	short(*func)(short, int, double, float);
CODE:
	func   = INT2PTR(short(*)(short, int, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2, f3);
OUTPUT:
	RETVAL

float
nci_fsidf( c_func, s0, i1, d2, f3 )
	SV* c_func
	short s0
	int i1
	double d2
	float f3
PREINIT:
	float(*func)(short, int, double, float);
CODE:
	func   = INT2PTR(float(*)(short, int, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2, f3);
OUTPUT:
	RETVAL

char *
nci_tsidf( c_func, s0, i1, d2, f3 )
	SV* c_func
	short s0
	int i1
	double d2
	float f3
PREINIT:
	char *(*func)(short, int, double, float);
CODE:
	func   = INT2PTR(char *(*)(short, int, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2, f3);
OUTPUT:
	RETVAL

int
nci_isidf( c_func, s0, i1, d2, f3 )
	SV* c_func
	short s0
	int i1
	double d2
	float f3
PREINIT:
	int(*func)(short, int, double, float);
CODE:
	func   = INT2PTR(int(*)(short, int, double, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2, f3);
OUTPUT:
	RETVAL

void *
nci_pfidf( c_func, f0, i1, d2, f3 )
	SV* c_func
	float f0
	int i1
	double d2
	float f3
PREINIT:
	void *(*func)(float, int, double, float);
CODE:
	func   = INT2PTR(void *(*)(float, int, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2, f3);
OUTPUT:
	RETVAL

void
nci_vfidf( c_func, f0, i1, d2, f3 )
	SV* c_func
	float f0
	int i1
	double d2
	float f3
PREINIT:
	void(*func)(float, int, double, float);
CODE:
	func   = INT2PTR(void(*)(float, int, double, float), SvIV(c_func) );
	(*func)(f0, i1, d2, f3);

double
nci_dfidf( c_func, f0, i1, d2, f3 )
	SV* c_func
	float f0
	int i1
	double d2
	float f3
PREINIT:
	double(*func)(float, int, double, float);
CODE:
	func   = INT2PTR(double(*)(float, int, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2, f3);
OUTPUT:
	RETVAL

short
nci_sfidf( c_func, f0, i1, d2, f3 )
	SV* c_func
	float f0
	int i1
	double d2
	float f3
PREINIT:
	short(*func)(float, int, double, float);
CODE:
	func   = INT2PTR(short(*)(float, int, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2, f3);
OUTPUT:
	RETVAL

float
nci_ffidf( c_func, f0, i1, d2, f3 )
	SV* c_func
	float f0
	int i1
	double d2
	float f3
PREINIT:
	float(*func)(float, int, double, float);
CODE:
	func   = INT2PTR(float(*)(float, int, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2, f3);
OUTPUT:
	RETVAL

char *
nci_tfidf( c_func, f0, i1, d2, f3 )
	SV* c_func
	float f0
	int i1
	double d2
	float f3
PREINIT:
	char *(*func)(float, int, double, float);
CODE:
	func   = INT2PTR(char *(*)(float, int, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2, f3);
OUTPUT:
	RETVAL

int
nci_ifidf( c_func, f0, i1, d2, f3 )
	SV* c_func
	float f0
	int i1
	double d2
	float f3
PREINIT:
	int(*func)(float, int, double, float);
CODE:
	func   = INT2PTR(int(*)(float, int, double, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2, f3);
OUTPUT:
	RETVAL

void *
nci_ptidf( c_func, t0, i1, d2, f3 )
	SV* c_func
	char * t0
	int i1
	double d2
	float f3
PREINIT:
	void *(*func)(char *, int, double, float);
CODE:
	func   = INT2PTR(void *(*)(char *, int, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2, f3);
OUTPUT:
	RETVAL

void
nci_vtidf( c_func, t0, i1, d2, f3 )
	SV* c_func
	char * t0
	int i1
	double d2
	float f3
PREINIT:
	void(*func)(char *, int, double, float);
CODE:
	func   = INT2PTR(void(*)(char *, int, double, float), SvIV(c_func) );
	(*func)(t0, i1, d2, f3);

double
nci_dtidf( c_func, t0, i1, d2, f3 )
	SV* c_func
	char * t0
	int i1
	double d2
	float f3
PREINIT:
	double(*func)(char *, int, double, float);
CODE:
	func   = INT2PTR(double(*)(char *, int, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2, f3);
OUTPUT:
	RETVAL

short
nci_stidf( c_func, t0, i1, d2, f3 )
	SV* c_func
	char * t0
	int i1
	double d2
	float f3
PREINIT:
	short(*func)(char *, int, double, float);
CODE:
	func   = INT2PTR(short(*)(char *, int, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2, f3);
OUTPUT:
	RETVAL

float
nci_ftidf( c_func, t0, i1, d2, f3 )
	SV* c_func
	char * t0
	int i1
	double d2
	float f3
PREINIT:
	float(*func)(char *, int, double, float);
CODE:
	func   = INT2PTR(float(*)(char *, int, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2, f3);
OUTPUT:
	RETVAL

char *
nci_ttidf( c_func, t0, i1, d2, f3 )
	SV* c_func
	char * t0
	int i1
	double d2
	float f3
PREINIT:
	char *(*func)(char *, int, double, float);
CODE:
	func   = INT2PTR(char *(*)(char *, int, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2, f3);
OUTPUT:
	RETVAL

int
nci_itidf( c_func, t0, i1, d2, f3 )
	SV* c_func
	char * t0
	int i1
	double d2
	float f3
PREINIT:
	int(*func)(char *, int, double, float);
CODE:
	func   = INT2PTR(int(*)(char *, int, double, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2, f3);
OUTPUT:
	RETVAL

void *
nci_piidf( c_func, i0, i1, d2, f3 )
	SV* c_func
	int i0
	int i1
	double d2
	float f3
PREINIT:
	void *(*func)(int, int, double, float);
CODE:
	func   = INT2PTR(void *(*)(int, int, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2, f3);
OUTPUT:
	RETVAL

void
nci_viidf( c_func, i0, i1, d2, f3 )
	SV* c_func
	int i0
	int i1
	double d2
	float f3
PREINIT:
	void(*func)(int, int, double, float);
CODE:
	func   = INT2PTR(void(*)(int, int, double, float), SvIV(c_func) );
	(*func)(i0, i1, d2, f3);

double
nci_diidf( c_func, i0, i1, d2, f3 )
	SV* c_func
	int i0
	int i1
	double d2
	float f3
PREINIT:
	double(*func)(int, int, double, float);
CODE:
	func   = INT2PTR(double(*)(int, int, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2, f3);
OUTPUT:
	RETVAL

short
nci_siidf( c_func, i0, i1, d2, f3 )
	SV* c_func
	int i0
	int i1
	double d2
	float f3
PREINIT:
	short(*func)(int, int, double, float);
CODE:
	func   = INT2PTR(short(*)(int, int, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2, f3);
OUTPUT:
	RETVAL

float
nci_fiidf( c_func, i0, i1, d2, f3 )
	SV* c_func
	int i0
	int i1
	double d2
	float f3
PREINIT:
	float(*func)(int, int, double, float);
CODE:
	func   = INT2PTR(float(*)(int, int, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2, f3);
OUTPUT:
	RETVAL

char *
nci_tiidf( c_func, i0, i1, d2, f3 )
	SV* c_func
	int i0
	int i1
	double d2
	float f3
PREINIT:
	char *(*func)(int, int, double, float);
CODE:
	func   = INT2PTR(char *(*)(int, int, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2, f3);
OUTPUT:
	RETVAL

int
nci_iiidf( c_func, i0, i1, d2, f3 )
	SV* c_func
	int i0
	int i1
	double d2
	float f3
PREINIT:
	int(*func)(int, int, double, float);
CODE:
	func   = INT2PTR(int(*)(int, int, double, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2, f3);
OUTPUT:
	RETVAL

void *
nci_pppsf( c_func, p0, p1, s2, f3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	float f3
PREINIT:
	void *(*func)(void *, void *, short, float);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2, f3);
OUTPUT:
	RETVAL

void
nci_vppsf( c_func, p0, p1, s2, f3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	float f3
PREINIT:
	void(*func)(void *, void *, short, float);
CODE:
	func   = INT2PTR(void(*)(void *, void *, short, float), SvIV(c_func) );
	(*func)(p0, p1, s2, f3);

double
nci_dppsf( c_func, p0, p1, s2, f3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	float f3
PREINIT:
	double(*func)(void *, void *, short, float);
CODE:
	func   = INT2PTR(double(*)(void *, void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2, f3);
OUTPUT:
	RETVAL

short
nci_sppsf( c_func, p0, p1, s2, f3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	float f3
PREINIT:
	short(*func)(void *, void *, short, float);
CODE:
	func   = INT2PTR(short(*)(void *, void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2, f3);
OUTPUT:
	RETVAL

float
nci_fppsf( c_func, p0, p1, s2, f3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	float f3
PREINIT:
	float(*func)(void *, void *, short, float);
CODE:
	func   = INT2PTR(float(*)(void *, void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2, f3);
OUTPUT:
	RETVAL

char *
nci_tppsf( c_func, p0, p1, s2, f3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	float f3
PREINIT:
	char *(*func)(void *, void *, short, float);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2, f3);
OUTPUT:
	RETVAL

int
nci_ippsf( c_func, p0, p1, s2, f3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	float f3
PREINIT:
	int(*func)(void *, void *, short, float);
CODE:
	func   = INT2PTR(int(*)(void *, void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2, f3);
OUTPUT:
	RETVAL

void *
nci_pvpsf( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvpsf( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvpsf( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svpsf( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvpsf( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvpsf( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivpsf( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdpsf( c_func, d0, p1, s2, f3 )
	SV* c_func
	double d0
	void * p1
	short s2
	float f3
PREINIT:
	void *(*func)(double, void *, short, float);
CODE:
	func   = INT2PTR(void *(*)(double, void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2, f3);
OUTPUT:
	RETVAL

void
nci_vdpsf( c_func, d0, p1, s2, f3 )
	SV* c_func
	double d0
	void * p1
	short s2
	float f3
PREINIT:
	void(*func)(double, void *, short, float);
CODE:
	func   = INT2PTR(void(*)(double, void *, short, float), SvIV(c_func) );
	(*func)(d0, p1, s2, f3);

double
nci_ddpsf( c_func, d0, p1, s2, f3 )
	SV* c_func
	double d0
	void * p1
	short s2
	float f3
PREINIT:
	double(*func)(double, void *, short, float);
CODE:
	func   = INT2PTR(double(*)(double, void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2, f3);
OUTPUT:
	RETVAL

short
nci_sdpsf( c_func, d0, p1, s2, f3 )
	SV* c_func
	double d0
	void * p1
	short s2
	float f3
PREINIT:
	short(*func)(double, void *, short, float);
CODE:
	func   = INT2PTR(short(*)(double, void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2, f3);
OUTPUT:
	RETVAL

float
nci_fdpsf( c_func, d0, p1, s2, f3 )
	SV* c_func
	double d0
	void * p1
	short s2
	float f3
PREINIT:
	float(*func)(double, void *, short, float);
CODE:
	func   = INT2PTR(float(*)(double, void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2, f3);
OUTPUT:
	RETVAL

char *
nci_tdpsf( c_func, d0, p1, s2, f3 )
	SV* c_func
	double d0
	void * p1
	short s2
	float f3
PREINIT:
	char *(*func)(double, void *, short, float);
CODE:
	func   = INT2PTR(char *(*)(double, void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2, f3);
OUTPUT:
	RETVAL

int
nci_idpsf( c_func, d0, p1, s2, f3 )
	SV* c_func
	double d0
	void * p1
	short s2
	float f3
PREINIT:
	int(*func)(double, void *, short, float);
CODE:
	func   = INT2PTR(int(*)(double, void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2, f3);
OUTPUT:
	RETVAL

void *
nci_pspsf( c_func, s0, p1, s2, f3 )
	SV* c_func
	short s0
	void * p1
	short s2
	float f3
PREINIT:
	void *(*func)(short, void *, short, float);
CODE:
	func   = INT2PTR(void *(*)(short, void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2, f3);
OUTPUT:
	RETVAL

void
nci_vspsf( c_func, s0, p1, s2, f3 )
	SV* c_func
	short s0
	void * p1
	short s2
	float f3
PREINIT:
	void(*func)(short, void *, short, float);
CODE:
	func   = INT2PTR(void(*)(short, void *, short, float), SvIV(c_func) );
	(*func)(s0, p1, s2, f3);

double
nci_dspsf( c_func, s0, p1, s2, f3 )
	SV* c_func
	short s0
	void * p1
	short s2
	float f3
PREINIT:
	double(*func)(short, void *, short, float);
CODE:
	func   = INT2PTR(double(*)(short, void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2, f3);
OUTPUT:
	RETVAL

short
nci_sspsf( c_func, s0, p1, s2, f3 )
	SV* c_func
	short s0
	void * p1
	short s2
	float f3
PREINIT:
	short(*func)(short, void *, short, float);
CODE:
	func   = INT2PTR(short(*)(short, void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2, f3);
OUTPUT:
	RETVAL

float
nci_fspsf( c_func, s0, p1, s2, f3 )
	SV* c_func
	short s0
	void * p1
	short s2
	float f3
PREINIT:
	float(*func)(short, void *, short, float);
CODE:
	func   = INT2PTR(float(*)(short, void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2, f3);
OUTPUT:
	RETVAL

char *
nci_tspsf( c_func, s0, p1, s2, f3 )
	SV* c_func
	short s0
	void * p1
	short s2
	float f3
PREINIT:
	char *(*func)(short, void *, short, float);
CODE:
	func   = INT2PTR(char *(*)(short, void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2, f3);
OUTPUT:
	RETVAL

int
nci_ispsf( c_func, s0, p1, s2, f3 )
	SV* c_func
	short s0
	void * p1
	short s2
	float f3
PREINIT:
	int(*func)(short, void *, short, float);
CODE:
	func   = INT2PTR(int(*)(short, void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2, f3);
OUTPUT:
	RETVAL

void *
nci_pfpsf( c_func, f0, p1, s2, f3 )
	SV* c_func
	float f0
	void * p1
	short s2
	float f3
PREINIT:
	void *(*func)(float, void *, short, float);
CODE:
	func   = INT2PTR(void *(*)(float, void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2, f3);
OUTPUT:
	RETVAL

void
nci_vfpsf( c_func, f0, p1, s2, f3 )
	SV* c_func
	float f0
	void * p1
	short s2
	float f3
PREINIT:
	void(*func)(float, void *, short, float);
CODE:
	func   = INT2PTR(void(*)(float, void *, short, float), SvIV(c_func) );
	(*func)(f0, p1, s2, f3);

double
nci_dfpsf( c_func, f0, p1, s2, f3 )
	SV* c_func
	float f0
	void * p1
	short s2
	float f3
PREINIT:
	double(*func)(float, void *, short, float);
CODE:
	func   = INT2PTR(double(*)(float, void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2, f3);
OUTPUT:
	RETVAL

short
nci_sfpsf( c_func, f0, p1, s2, f3 )
	SV* c_func
	float f0
	void * p1
	short s2
	float f3
PREINIT:
	short(*func)(float, void *, short, float);
CODE:
	func   = INT2PTR(short(*)(float, void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2, f3);
OUTPUT:
	RETVAL

float
nci_ffpsf( c_func, f0, p1, s2, f3 )
	SV* c_func
	float f0
	void * p1
	short s2
	float f3
PREINIT:
	float(*func)(float, void *, short, float);
CODE:
	func   = INT2PTR(float(*)(float, void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2, f3);
OUTPUT:
	RETVAL

char *
nci_tfpsf( c_func, f0, p1, s2, f3 )
	SV* c_func
	float f0
	void * p1
	short s2
	float f3
PREINIT:
	char *(*func)(float, void *, short, float);
CODE:
	func   = INT2PTR(char *(*)(float, void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2, f3);
OUTPUT:
	RETVAL

int
nci_ifpsf( c_func, f0, p1, s2, f3 )
	SV* c_func
	float f0
	void * p1
	short s2
	float f3
PREINIT:
	int(*func)(float, void *, short, float);
CODE:
	func   = INT2PTR(int(*)(float, void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2, f3);
OUTPUT:
	RETVAL

void *
nci_ptpsf( c_func, t0, p1, s2, f3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	float f3
PREINIT:
	void *(*func)(char *, void *, short, float);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2, f3);
OUTPUT:
	RETVAL

void
nci_vtpsf( c_func, t0, p1, s2, f3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	float f3
PREINIT:
	void(*func)(char *, void *, short, float);
CODE:
	func   = INT2PTR(void(*)(char *, void *, short, float), SvIV(c_func) );
	(*func)(t0, p1, s2, f3);

double
nci_dtpsf( c_func, t0, p1, s2, f3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	float f3
PREINIT:
	double(*func)(char *, void *, short, float);
CODE:
	func   = INT2PTR(double(*)(char *, void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2, f3);
OUTPUT:
	RETVAL

short
nci_stpsf( c_func, t0, p1, s2, f3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	float f3
PREINIT:
	short(*func)(char *, void *, short, float);
CODE:
	func   = INT2PTR(short(*)(char *, void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2, f3);
OUTPUT:
	RETVAL

float
nci_ftpsf( c_func, t0, p1, s2, f3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	float f3
PREINIT:
	float(*func)(char *, void *, short, float);
CODE:
	func   = INT2PTR(float(*)(char *, void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2, f3);
OUTPUT:
	RETVAL

char *
nci_ttpsf( c_func, t0, p1, s2, f3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	float f3
PREINIT:
	char *(*func)(char *, void *, short, float);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2, f3);
OUTPUT:
	RETVAL

int
nci_itpsf( c_func, t0, p1, s2, f3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	float f3
PREINIT:
	int(*func)(char *, void *, short, float);
CODE:
	func   = INT2PTR(int(*)(char *, void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2, f3);
OUTPUT:
	RETVAL

void *
nci_pipsf( c_func, i0, p1, s2, f3 )
	SV* c_func
	int i0
	void * p1
	short s2
	float f3
PREINIT:
	void *(*func)(int, void *, short, float);
CODE:
	func   = INT2PTR(void *(*)(int, void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2, f3);
OUTPUT:
	RETVAL

void
nci_vipsf( c_func, i0, p1, s2, f3 )
	SV* c_func
	int i0
	void * p1
	short s2
	float f3
PREINIT:
	void(*func)(int, void *, short, float);
CODE:
	func   = INT2PTR(void(*)(int, void *, short, float), SvIV(c_func) );
	(*func)(i0, p1, s2, f3);

double
nci_dipsf( c_func, i0, p1, s2, f3 )
	SV* c_func
	int i0
	void * p1
	short s2
	float f3
PREINIT:
	double(*func)(int, void *, short, float);
CODE:
	func   = INT2PTR(double(*)(int, void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2, f3);
OUTPUT:
	RETVAL

short
nci_sipsf( c_func, i0, p1, s2, f3 )
	SV* c_func
	int i0
	void * p1
	short s2
	float f3
PREINIT:
	short(*func)(int, void *, short, float);
CODE:
	func   = INT2PTR(short(*)(int, void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2, f3);
OUTPUT:
	RETVAL

float
nci_fipsf( c_func, i0, p1, s2, f3 )
	SV* c_func
	int i0
	void * p1
	short s2
	float f3
PREINIT:
	float(*func)(int, void *, short, float);
CODE:
	func   = INT2PTR(float(*)(int, void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2, f3);
OUTPUT:
	RETVAL

char *
nci_tipsf( c_func, i0, p1, s2, f3 )
	SV* c_func
	int i0
	void * p1
	short s2
	float f3
PREINIT:
	char *(*func)(int, void *, short, float);
CODE:
	func   = INT2PTR(char *(*)(int, void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2, f3);
OUTPUT:
	RETVAL

int
nci_iipsf( c_func, i0, p1, s2, f3 )
	SV* c_func
	int i0
	void * p1
	short s2
	float f3
PREINIT:
	int(*func)(int, void *, short, float);
CODE:
	func   = INT2PTR(int(*)(int, void *, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2, f3);
OUTPUT:
	RETVAL

void *
nci_ppdsf( c_func, p0, d1, s2, f3 )
	SV* c_func
	void * p0
	double d1
	short s2
	float f3
PREINIT:
	void *(*func)(void *, double, short, float);
CODE:
	func   = INT2PTR(void *(*)(void *, double, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2, f3);
OUTPUT:
	RETVAL

void
nci_vpdsf( c_func, p0, d1, s2, f3 )
	SV* c_func
	void * p0
	double d1
	short s2
	float f3
PREINIT:
	void(*func)(void *, double, short, float);
CODE:
	func   = INT2PTR(void(*)(void *, double, short, float), SvIV(c_func) );
	(*func)(p0, d1, s2, f3);

double
nci_dpdsf( c_func, p0, d1, s2, f3 )
	SV* c_func
	void * p0
	double d1
	short s2
	float f3
PREINIT:
	double(*func)(void *, double, short, float);
CODE:
	func   = INT2PTR(double(*)(void *, double, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2, f3);
OUTPUT:
	RETVAL

short
nci_spdsf( c_func, p0, d1, s2, f3 )
	SV* c_func
	void * p0
	double d1
	short s2
	float f3
PREINIT:
	short(*func)(void *, double, short, float);
CODE:
	func   = INT2PTR(short(*)(void *, double, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2, f3);
OUTPUT:
	RETVAL

float
nci_fpdsf( c_func, p0, d1, s2, f3 )
	SV* c_func
	void * p0
	double d1
	short s2
	float f3
PREINIT:
	float(*func)(void *, double, short, float);
CODE:
	func   = INT2PTR(float(*)(void *, double, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2, f3);
OUTPUT:
	RETVAL

char *
nci_tpdsf( c_func, p0, d1, s2, f3 )
	SV* c_func
	void * p0
	double d1
	short s2
	float f3
PREINIT:
	char *(*func)(void *, double, short, float);
CODE:
	func   = INT2PTR(char *(*)(void *, double, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2, f3);
OUTPUT:
	RETVAL

int
nci_ipdsf( c_func, p0, d1, s2, f3 )
	SV* c_func
	void * p0
	double d1
	short s2
	float f3
PREINIT:
	int(*func)(void *, double, short, float);
CODE:
	func   = INT2PTR(int(*)(void *, double, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2, f3);
OUTPUT:
	RETVAL

void *
nci_pvdsf( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvdsf( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvdsf( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svdsf( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvdsf( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvdsf( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivdsf( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pddsf( c_func, d0, d1, s2, f3 )
	SV* c_func
	double d0
	double d1
	short s2
	float f3
PREINIT:
	void *(*func)(double, double, short, float);
CODE:
	func   = INT2PTR(void *(*)(double, double, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2, f3);
OUTPUT:
	RETVAL

void
nci_vddsf( c_func, d0, d1, s2, f3 )
	SV* c_func
	double d0
	double d1
	short s2
	float f3
PREINIT:
	void(*func)(double, double, short, float);
CODE:
	func   = INT2PTR(void(*)(double, double, short, float), SvIV(c_func) );
	(*func)(d0, d1, s2, f3);

double
nci_dddsf( c_func, d0, d1, s2, f3 )
	SV* c_func
	double d0
	double d1
	short s2
	float f3
PREINIT:
	double(*func)(double, double, short, float);
CODE:
	func   = INT2PTR(double(*)(double, double, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2, f3);
OUTPUT:
	RETVAL

short
nci_sddsf( c_func, d0, d1, s2, f3 )
	SV* c_func
	double d0
	double d1
	short s2
	float f3
PREINIT:
	short(*func)(double, double, short, float);
CODE:
	func   = INT2PTR(short(*)(double, double, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2, f3);
OUTPUT:
	RETVAL

float
nci_fddsf( c_func, d0, d1, s2, f3 )
	SV* c_func
	double d0
	double d1
	short s2
	float f3
PREINIT:
	float(*func)(double, double, short, float);
CODE:
	func   = INT2PTR(float(*)(double, double, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2, f3);
OUTPUT:
	RETVAL

char *
nci_tddsf( c_func, d0, d1, s2, f3 )
	SV* c_func
	double d0
	double d1
	short s2
	float f3
PREINIT:
	char *(*func)(double, double, short, float);
CODE:
	func   = INT2PTR(char *(*)(double, double, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2, f3);
OUTPUT:
	RETVAL

int
nci_iddsf( c_func, d0, d1, s2, f3 )
	SV* c_func
	double d0
	double d1
	short s2
	float f3
PREINIT:
	int(*func)(double, double, short, float);
CODE:
	func   = INT2PTR(int(*)(double, double, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2, f3);
OUTPUT:
	RETVAL

void *
nci_psdsf( c_func, s0, d1, s2, f3 )
	SV* c_func
	short s0
	double d1
	short s2
	float f3
PREINIT:
	void *(*func)(short, double, short, float);
CODE:
	func   = INT2PTR(void *(*)(short, double, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2, f3);
OUTPUT:
	RETVAL

void
nci_vsdsf( c_func, s0, d1, s2, f3 )
	SV* c_func
	short s0
	double d1
	short s2
	float f3
PREINIT:
	void(*func)(short, double, short, float);
CODE:
	func   = INT2PTR(void(*)(short, double, short, float), SvIV(c_func) );
	(*func)(s0, d1, s2, f3);

double
nci_dsdsf( c_func, s0, d1, s2, f3 )
	SV* c_func
	short s0
	double d1
	short s2
	float f3
PREINIT:
	double(*func)(short, double, short, float);
CODE:
	func   = INT2PTR(double(*)(short, double, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2, f3);
OUTPUT:
	RETVAL

short
nci_ssdsf( c_func, s0, d1, s2, f3 )
	SV* c_func
	short s0
	double d1
	short s2
	float f3
PREINIT:
	short(*func)(short, double, short, float);
CODE:
	func   = INT2PTR(short(*)(short, double, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2, f3);
OUTPUT:
	RETVAL

float
nci_fsdsf( c_func, s0, d1, s2, f3 )
	SV* c_func
	short s0
	double d1
	short s2
	float f3
PREINIT:
	float(*func)(short, double, short, float);
CODE:
	func   = INT2PTR(float(*)(short, double, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2, f3);
OUTPUT:
	RETVAL

char *
nci_tsdsf( c_func, s0, d1, s2, f3 )
	SV* c_func
	short s0
	double d1
	short s2
	float f3
PREINIT:
	char *(*func)(short, double, short, float);
CODE:
	func   = INT2PTR(char *(*)(short, double, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2, f3);
OUTPUT:
	RETVAL

int
nci_isdsf( c_func, s0, d1, s2, f3 )
	SV* c_func
	short s0
	double d1
	short s2
	float f3
PREINIT:
	int(*func)(short, double, short, float);
CODE:
	func   = INT2PTR(int(*)(short, double, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2, f3);
OUTPUT:
	RETVAL

void *
nci_pfdsf( c_func, f0, d1, s2, f3 )
	SV* c_func
	float f0
	double d1
	short s2
	float f3
PREINIT:
	void *(*func)(float, double, short, float);
CODE:
	func   = INT2PTR(void *(*)(float, double, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2, f3);
OUTPUT:
	RETVAL

void
nci_vfdsf( c_func, f0, d1, s2, f3 )
	SV* c_func
	float f0
	double d1
	short s2
	float f3
PREINIT:
	void(*func)(float, double, short, float);
CODE:
	func   = INT2PTR(void(*)(float, double, short, float), SvIV(c_func) );
	(*func)(f0, d1, s2, f3);

double
nci_dfdsf( c_func, f0, d1, s2, f3 )
	SV* c_func
	float f0
	double d1
	short s2
	float f3
PREINIT:
	double(*func)(float, double, short, float);
CODE:
	func   = INT2PTR(double(*)(float, double, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2, f3);
OUTPUT:
	RETVAL

short
nci_sfdsf( c_func, f0, d1, s2, f3 )
	SV* c_func
	float f0
	double d1
	short s2
	float f3
PREINIT:
	short(*func)(float, double, short, float);
CODE:
	func   = INT2PTR(short(*)(float, double, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2, f3);
OUTPUT:
	RETVAL

float
nci_ffdsf( c_func, f0, d1, s2, f3 )
	SV* c_func
	float f0
	double d1
	short s2
	float f3
PREINIT:
	float(*func)(float, double, short, float);
CODE:
	func   = INT2PTR(float(*)(float, double, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2, f3);
OUTPUT:
	RETVAL

char *
nci_tfdsf( c_func, f0, d1, s2, f3 )
	SV* c_func
	float f0
	double d1
	short s2
	float f3
PREINIT:
	char *(*func)(float, double, short, float);
CODE:
	func   = INT2PTR(char *(*)(float, double, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2, f3);
OUTPUT:
	RETVAL

int
nci_ifdsf( c_func, f0, d1, s2, f3 )
	SV* c_func
	float f0
	double d1
	short s2
	float f3
PREINIT:
	int(*func)(float, double, short, float);
CODE:
	func   = INT2PTR(int(*)(float, double, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2, f3);
OUTPUT:
	RETVAL

void *
nci_ptdsf( c_func, t0, d1, s2, f3 )
	SV* c_func
	char * t0
	double d1
	short s2
	float f3
PREINIT:
	void *(*func)(char *, double, short, float);
CODE:
	func   = INT2PTR(void *(*)(char *, double, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2, f3);
OUTPUT:
	RETVAL

void
nci_vtdsf( c_func, t0, d1, s2, f3 )
	SV* c_func
	char * t0
	double d1
	short s2
	float f3
PREINIT:
	void(*func)(char *, double, short, float);
CODE:
	func   = INT2PTR(void(*)(char *, double, short, float), SvIV(c_func) );
	(*func)(t0, d1, s2, f3);

double
nci_dtdsf( c_func, t0, d1, s2, f3 )
	SV* c_func
	char * t0
	double d1
	short s2
	float f3
PREINIT:
	double(*func)(char *, double, short, float);
CODE:
	func   = INT2PTR(double(*)(char *, double, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2, f3);
OUTPUT:
	RETVAL

short
nci_stdsf( c_func, t0, d1, s2, f3 )
	SV* c_func
	char * t0
	double d1
	short s2
	float f3
PREINIT:
	short(*func)(char *, double, short, float);
CODE:
	func   = INT2PTR(short(*)(char *, double, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2, f3);
OUTPUT:
	RETVAL

float
nci_ftdsf( c_func, t0, d1, s2, f3 )
	SV* c_func
	char * t0
	double d1
	short s2
	float f3
PREINIT:
	float(*func)(char *, double, short, float);
CODE:
	func   = INT2PTR(float(*)(char *, double, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2, f3);
OUTPUT:
	RETVAL

char *
nci_ttdsf( c_func, t0, d1, s2, f3 )
	SV* c_func
	char * t0
	double d1
	short s2
	float f3
PREINIT:
	char *(*func)(char *, double, short, float);
CODE:
	func   = INT2PTR(char *(*)(char *, double, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2, f3);
OUTPUT:
	RETVAL

int
nci_itdsf( c_func, t0, d1, s2, f3 )
	SV* c_func
	char * t0
	double d1
	short s2
	float f3
PREINIT:
	int(*func)(char *, double, short, float);
CODE:
	func   = INT2PTR(int(*)(char *, double, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2, f3);
OUTPUT:
	RETVAL

void *
nci_pidsf( c_func, i0, d1, s2, f3 )
	SV* c_func
	int i0
	double d1
	short s2
	float f3
PREINIT:
	void *(*func)(int, double, short, float);
CODE:
	func   = INT2PTR(void *(*)(int, double, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2, f3);
OUTPUT:
	RETVAL

void
nci_vidsf( c_func, i0, d1, s2, f3 )
	SV* c_func
	int i0
	double d1
	short s2
	float f3
PREINIT:
	void(*func)(int, double, short, float);
CODE:
	func   = INT2PTR(void(*)(int, double, short, float), SvIV(c_func) );
	(*func)(i0, d1, s2, f3);

double
nci_didsf( c_func, i0, d1, s2, f3 )
	SV* c_func
	int i0
	double d1
	short s2
	float f3
PREINIT:
	double(*func)(int, double, short, float);
CODE:
	func   = INT2PTR(double(*)(int, double, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2, f3);
OUTPUT:
	RETVAL

short
nci_sidsf( c_func, i0, d1, s2, f3 )
	SV* c_func
	int i0
	double d1
	short s2
	float f3
PREINIT:
	short(*func)(int, double, short, float);
CODE:
	func   = INT2PTR(short(*)(int, double, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2, f3);
OUTPUT:
	RETVAL

float
nci_fidsf( c_func, i0, d1, s2, f3 )
	SV* c_func
	int i0
	double d1
	short s2
	float f3
PREINIT:
	float(*func)(int, double, short, float);
CODE:
	func   = INT2PTR(float(*)(int, double, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2, f3);
OUTPUT:
	RETVAL

char *
nci_tidsf( c_func, i0, d1, s2, f3 )
	SV* c_func
	int i0
	double d1
	short s2
	float f3
PREINIT:
	char *(*func)(int, double, short, float);
CODE:
	func   = INT2PTR(char *(*)(int, double, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2, f3);
OUTPUT:
	RETVAL

int
nci_iidsf( c_func, i0, d1, s2, f3 )
	SV* c_func
	int i0
	double d1
	short s2
	float f3
PREINIT:
	int(*func)(int, double, short, float);
CODE:
	func   = INT2PTR(int(*)(int, double, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2, f3);
OUTPUT:
	RETVAL

void *
nci_ppssf( c_func, p0, s1, s2, f3 )
	SV* c_func
	void * p0
	short s1
	short s2
	float f3
PREINIT:
	void *(*func)(void *, short, short, float);
CODE:
	func   = INT2PTR(void *(*)(void *, short, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2, f3);
OUTPUT:
	RETVAL

void
nci_vpssf( c_func, p0, s1, s2, f3 )
	SV* c_func
	void * p0
	short s1
	short s2
	float f3
PREINIT:
	void(*func)(void *, short, short, float);
CODE:
	func   = INT2PTR(void(*)(void *, short, short, float), SvIV(c_func) );
	(*func)(p0, s1, s2, f3);

double
nci_dpssf( c_func, p0, s1, s2, f3 )
	SV* c_func
	void * p0
	short s1
	short s2
	float f3
PREINIT:
	double(*func)(void *, short, short, float);
CODE:
	func   = INT2PTR(double(*)(void *, short, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2, f3);
OUTPUT:
	RETVAL

short
nci_spssf( c_func, p0, s1, s2, f3 )
	SV* c_func
	void * p0
	short s1
	short s2
	float f3
PREINIT:
	short(*func)(void *, short, short, float);
CODE:
	func   = INT2PTR(short(*)(void *, short, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2, f3);
OUTPUT:
	RETVAL

float
nci_fpssf( c_func, p0, s1, s2, f3 )
	SV* c_func
	void * p0
	short s1
	short s2
	float f3
PREINIT:
	float(*func)(void *, short, short, float);
CODE:
	func   = INT2PTR(float(*)(void *, short, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2, f3);
OUTPUT:
	RETVAL

char *
nci_tpssf( c_func, p0, s1, s2, f3 )
	SV* c_func
	void * p0
	short s1
	short s2
	float f3
PREINIT:
	char *(*func)(void *, short, short, float);
CODE:
	func   = INT2PTR(char *(*)(void *, short, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2, f3);
OUTPUT:
	RETVAL

int
nci_ipssf( c_func, p0, s1, s2, f3 )
	SV* c_func
	void * p0
	short s1
	short s2
	float f3
PREINIT:
	int(*func)(void *, short, short, float);
CODE:
	func   = INT2PTR(int(*)(void *, short, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2, f3);
OUTPUT:
	RETVAL

void *
nci_pvssf( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvssf( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvssf( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svssf( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvssf( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvssf( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivssf( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdssf( c_func, d0, s1, s2, f3 )
	SV* c_func
	double d0
	short s1
	short s2
	float f3
PREINIT:
	void *(*func)(double, short, short, float);
CODE:
	func   = INT2PTR(void *(*)(double, short, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2, f3);
OUTPUT:
	RETVAL

void
nci_vdssf( c_func, d0, s1, s2, f3 )
	SV* c_func
	double d0
	short s1
	short s2
	float f3
PREINIT:
	void(*func)(double, short, short, float);
CODE:
	func   = INT2PTR(void(*)(double, short, short, float), SvIV(c_func) );
	(*func)(d0, s1, s2, f3);

double
nci_ddssf( c_func, d0, s1, s2, f3 )
	SV* c_func
	double d0
	short s1
	short s2
	float f3
PREINIT:
	double(*func)(double, short, short, float);
CODE:
	func   = INT2PTR(double(*)(double, short, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2, f3);
OUTPUT:
	RETVAL

short
nci_sdssf( c_func, d0, s1, s2, f3 )
	SV* c_func
	double d0
	short s1
	short s2
	float f3
PREINIT:
	short(*func)(double, short, short, float);
CODE:
	func   = INT2PTR(short(*)(double, short, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2, f3);
OUTPUT:
	RETVAL

float
nci_fdssf( c_func, d0, s1, s2, f3 )
	SV* c_func
	double d0
	short s1
	short s2
	float f3
PREINIT:
	float(*func)(double, short, short, float);
CODE:
	func   = INT2PTR(float(*)(double, short, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2, f3);
OUTPUT:
	RETVAL

char *
nci_tdssf( c_func, d0, s1, s2, f3 )
	SV* c_func
	double d0
	short s1
	short s2
	float f3
PREINIT:
	char *(*func)(double, short, short, float);
CODE:
	func   = INT2PTR(char *(*)(double, short, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2, f3);
OUTPUT:
	RETVAL

int
nci_idssf( c_func, d0, s1, s2, f3 )
	SV* c_func
	double d0
	short s1
	short s2
	float f3
PREINIT:
	int(*func)(double, short, short, float);
CODE:
	func   = INT2PTR(int(*)(double, short, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2, f3);
OUTPUT:
	RETVAL

void *
nci_psssf( c_func, s0, s1, s2, f3 )
	SV* c_func
	short s0
	short s1
	short s2
	float f3
PREINIT:
	void *(*func)(short, short, short, float);
CODE:
	func   = INT2PTR(void *(*)(short, short, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2, f3);
OUTPUT:
	RETVAL

void
nci_vsssf( c_func, s0, s1, s2, f3 )
	SV* c_func
	short s0
	short s1
	short s2
	float f3
PREINIT:
	void(*func)(short, short, short, float);
CODE:
	func   = INT2PTR(void(*)(short, short, short, float), SvIV(c_func) );
	(*func)(s0, s1, s2, f3);

double
nci_dsssf( c_func, s0, s1, s2, f3 )
	SV* c_func
	short s0
	short s1
	short s2
	float f3
PREINIT:
	double(*func)(short, short, short, float);
CODE:
	func   = INT2PTR(double(*)(short, short, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2, f3);
OUTPUT:
	RETVAL

short
nci_ssssf( c_func, s0, s1, s2, f3 )
	SV* c_func
	short s0
	short s1
	short s2
	float f3
PREINIT:
	short(*func)(short, short, short, float);
CODE:
	func   = INT2PTR(short(*)(short, short, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2, f3);
OUTPUT:
	RETVAL

float
nci_fsssf( c_func, s0, s1, s2, f3 )
	SV* c_func
	short s0
	short s1
	short s2
	float f3
PREINIT:
	float(*func)(short, short, short, float);
CODE:
	func   = INT2PTR(float(*)(short, short, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2, f3);
OUTPUT:
	RETVAL

char *
nci_tsssf( c_func, s0, s1, s2, f3 )
	SV* c_func
	short s0
	short s1
	short s2
	float f3
PREINIT:
	char *(*func)(short, short, short, float);
CODE:
	func   = INT2PTR(char *(*)(short, short, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2, f3);
OUTPUT:
	RETVAL

int
nci_isssf( c_func, s0, s1, s2, f3 )
	SV* c_func
	short s0
	short s1
	short s2
	float f3
PREINIT:
	int(*func)(short, short, short, float);
CODE:
	func   = INT2PTR(int(*)(short, short, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2, f3);
OUTPUT:
	RETVAL

void *
nci_pfssf( c_func, f0, s1, s2, f3 )
	SV* c_func
	float f0
	short s1
	short s2
	float f3
PREINIT:
	void *(*func)(float, short, short, float);
CODE:
	func   = INT2PTR(void *(*)(float, short, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2, f3);
OUTPUT:
	RETVAL

void
nci_vfssf( c_func, f0, s1, s2, f3 )
	SV* c_func
	float f0
	short s1
	short s2
	float f3
PREINIT:
	void(*func)(float, short, short, float);
CODE:
	func   = INT2PTR(void(*)(float, short, short, float), SvIV(c_func) );
	(*func)(f0, s1, s2, f3);

double
nci_dfssf( c_func, f0, s1, s2, f3 )
	SV* c_func
	float f0
	short s1
	short s2
	float f3
PREINIT:
	double(*func)(float, short, short, float);
CODE:
	func   = INT2PTR(double(*)(float, short, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2, f3);
OUTPUT:
	RETVAL

short
nci_sfssf( c_func, f0, s1, s2, f3 )
	SV* c_func
	float f0
	short s1
	short s2
	float f3
PREINIT:
	short(*func)(float, short, short, float);
CODE:
	func   = INT2PTR(short(*)(float, short, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2, f3);
OUTPUT:
	RETVAL

float
nci_ffssf( c_func, f0, s1, s2, f3 )
	SV* c_func
	float f0
	short s1
	short s2
	float f3
PREINIT:
	float(*func)(float, short, short, float);
CODE:
	func   = INT2PTR(float(*)(float, short, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2, f3);
OUTPUT:
	RETVAL

char *
nci_tfssf( c_func, f0, s1, s2, f3 )
	SV* c_func
	float f0
	short s1
	short s2
	float f3
PREINIT:
	char *(*func)(float, short, short, float);
CODE:
	func   = INT2PTR(char *(*)(float, short, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2, f3);
OUTPUT:
	RETVAL

int
nci_ifssf( c_func, f0, s1, s2, f3 )
	SV* c_func
	float f0
	short s1
	short s2
	float f3
PREINIT:
	int(*func)(float, short, short, float);
CODE:
	func   = INT2PTR(int(*)(float, short, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2, f3);
OUTPUT:
	RETVAL

void *
nci_ptssf( c_func, t0, s1, s2, f3 )
	SV* c_func
	char * t0
	short s1
	short s2
	float f3
PREINIT:
	void *(*func)(char *, short, short, float);
CODE:
	func   = INT2PTR(void *(*)(char *, short, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2, f3);
OUTPUT:
	RETVAL

void
nci_vtssf( c_func, t0, s1, s2, f3 )
	SV* c_func
	char * t0
	short s1
	short s2
	float f3
PREINIT:
	void(*func)(char *, short, short, float);
CODE:
	func   = INT2PTR(void(*)(char *, short, short, float), SvIV(c_func) );
	(*func)(t0, s1, s2, f3);

double
nci_dtssf( c_func, t0, s1, s2, f3 )
	SV* c_func
	char * t0
	short s1
	short s2
	float f3
PREINIT:
	double(*func)(char *, short, short, float);
CODE:
	func   = INT2PTR(double(*)(char *, short, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2, f3);
OUTPUT:
	RETVAL

short
nci_stssf( c_func, t0, s1, s2, f3 )
	SV* c_func
	char * t0
	short s1
	short s2
	float f3
PREINIT:
	short(*func)(char *, short, short, float);
CODE:
	func   = INT2PTR(short(*)(char *, short, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2, f3);
OUTPUT:
	RETVAL

float
nci_ftssf( c_func, t0, s1, s2, f3 )
	SV* c_func
	char * t0
	short s1
	short s2
	float f3
PREINIT:
	float(*func)(char *, short, short, float);
CODE:
	func   = INT2PTR(float(*)(char *, short, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2, f3);
OUTPUT:
	RETVAL

char *
nci_ttssf( c_func, t0, s1, s2, f3 )
	SV* c_func
	char * t0
	short s1
	short s2
	float f3
PREINIT:
	char *(*func)(char *, short, short, float);
CODE:
	func   = INT2PTR(char *(*)(char *, short, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2, f3);
OUTPUT:
	RETVAL

int
nci_itssf( c_func, t0, s1, s2, f3 )
	SV* c_func
	char * t0
	short s1
	short s2
	float f3
PREINIT:
	int(*func)(char *, short, short, float);
CODE:
	func   = INT2PTR(int(*)(char *, short, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2, f3);
OUTPUT:
	RETVAL

void *
nci_pissf( c_func, i0, s1, s2, f3 )
	SV* c_func
	int i0
	short s1
	short s2
	float f3
PREINIT:
	void *(*func)(int, short, short, float);
CODE:
	func   = INT2PTR(void *(*)(int, short, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2, f3);
OUTPUT:
	RETVAL

void
nci_vissf( c_func, i0, s1, s2, f3 )
	SV* c_func
	int i0
	short s1
	short s2
	float f3
PREINIT:
	void(*func)(int, short, short, float);
CODE:
	func   = INT2PTR(void(*)(int, short, short, float), SvIV(c_func) );
	(*func)(i0, s1, s2, f3);

double
nci_dissf( c_func, i0, s1, s2, f3 )
	SV* c_func
	int i0
	short s1
	short s2
	float f3
PREINIT:
	double(*func)(int, short, short, float);
CODE:
	func   = INT2PTR(double(*)(int, short, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2, f3);
OUTPUT:
	RETVAL

short
nci_sissf( c_func, i0, s1, s2, f3 )
	SV* c_func
	int i0
	short s1
	short s2
	float f3
PREINIT:
	short(*func)(int, short, short, float);
CODE:
	func   = INT2PTR(short(*)(int, short, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2, f3);
OUTPUT:
	RETVAL

float
nci_fissf( c_func, i0, s1, s2, f3 )
	SV* c_func
	int i0
	short s1
	short s2
	float f3
PREINIT:
	float(*func)(int, short, short, float);
CODE:
	func   = INT2PTR(float(*)(int, short, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2, f3);
OUTPUT:
	RETVAL

char *
nci_tissf( c_func, i0, s1, s2, f3 )
	SV* c_func
	int i0
	short s1
	short s2
	float f3
PREINIT:
	char *(*func)(int, short, short, float);
CODE:
	func   = INT2PTR(char *(*)(int, short, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2, f3);
OUTPUT:
	RETVAL

int
nci_iissf( c_func, i0, s1, s2, f3 )
	SV* c_func
	int i0
	short s1
	short s2
	float f3
PREINIT:
	int(*func)(int, short, short, float);
CODE:
	func   = INT2PTR(int(*)(int, short, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2, f3);
OUTPUT:
	RETVAL

void *
nci_ppfsf( c_func, p0, f1, s2, f3 )
	SV* c_func
	void * p0
	float f1
	short s2
	float f3
PREINIT:
	void *(*func)(void *, float, short, float);
CODE:
	func   = INT2PTR(void *(*)(void *, float, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2, f3);
OUTPUT:
	RETVAL

void
nci_vpfsf( c_func, p0, f1, s2, f3 )
	SV* c_func
	void * p0
	float f1
	short s2
	float f3
PREINIT:
	void(*func)(void *, float, short, float);
CODE:
	func   = INT2PTR(void(*)(void *, float, short, float), SvIV(c_func) );
	(*func)(p0, f1, s2, f3);

double
nci_dpfsf( c_func, p0, f1, s2, f3 )
	SV* c_func
	void * p0
	float f1
	short s2
	float f3
PREINIT:
	double(*func)(void *, float, short, float);
CODE:
	func   = INT2PTR(double(*)(void *, float, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2, f3);
OUTPUT:
	RETVAL

short
nci_spfsf( c_func, p0, f1, s2, f3 )
	SV* c_func
	void * p0
	float f1
	short s2
	float f3
PREINIT:
	short(*func)(void *, float, short, float);
CODE:
	func   = INT2PTR(short(*)(void *, float, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2, f3);
OUTPUT:
	RETVAL

float
nci_fpfsf( c_func, p0, f1, s2, f3 )
	SV* c_func
	void * p0
	float f1
	short s2
	float f3
PREINIT:
	float(*func)(void *, float, short, float);
CODE:
	func   = INT2PTR(float(*)(void *, float, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2, f3);
OUTPUT:
	RETVAL

char *
nci_tpfsf( c_func, p0, f1, s2, f3 )
	SV* c_func
	void * p0
	float f1
	short s2
	float f3
PREINIT:
	char *(*func)(void *, float, short, float);
CODE:
	func   = INT2PTR(char *(*)(void *, float, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2, f3);
OUTPUT:
	RETVAL

int
nci_ipfsf( c_func, p0, f1, s2, f3 )
	SV* c_func
	void * p0
	float f1
	short s2
	float f3
PREINIT:
	int(*func)(void *, float, short, float);
CODE:
	func   = INT2PTR(int(*)(void *, float, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2, f3);
OUTPUT:
	RETVAL

void *
nci_pvfsf( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvfsf( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvfsf( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svfsf( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvfsf( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvfsf( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivfsf( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdfsf( c_func, d0, f1, s2, f3 )
	SV* c_func
	double d0
	float f1
	short s2
	float f3
PREINIT:
	void *(*func)(double, float, short, float);
CODE:
	func   = INT2PTR(void *(*)(double, float, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2, f3);
OUTPUT:
	RETVAL

void
nci_vdfsf( c_func, d0, f1, s2, f3 )
	SV* c_func
	double d0
	float f1
	short s2
	float f3
PREINIT:
	void(*func)(double, float, short, float);
CODE:
	func   = INT2PTR(void(*)(double, float, short, float), SvIV(c_func) );
	(*func)(d0, f1, s2, f3);

double
nci_ddfsf( c_func, d0, f1, s2, f3 )
	SV* c_func
	double d0
	float f1
	short s2
	float f3
PREINIT:
	double(*func)(double, float, short, float);
CODE:
	func   = INT2PTR(double(*)(double, float, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2, f3);
OUTPUT:
	RETVAL

short
nci_sdfsf( c_func, d0, f1, s2, f3 )
	SV* c_func
	double d0
	float f1
	short s2
	float f3
PREINIT:
	short(*func)(double, float, short, float);
CODE:
	func   = INT2PTR(short(*)(double, float, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2, f3);
OUTPUT:
	RETVAL

float
nci_fdfsf( c_func, d0, f1, s2, f3 )
	SV* c_func
	double d0
	float f1
	short s2
	float f3
PREINIT:
	float(*func)(double, float, short, float);
CODE:
	func   = INT2PTR(float(*)(double, float, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2, f3);
OUTPUT:
	RETVAL

char *
nci_tdfsf( c_func, d0, f1, s2, f3 )
	SV* c_func
	double d0
	float f1
	short s2
	float f3
PREINIT:
	char *(*func)(double, float, short, float);
CODE:
	func   = INT2PTR(char *(*)(double, float, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2, f3);
OUTPUT:
	RETVAL

int
nci_idfsf( c_func, d0, f1, s2, f3 )
	SV* c_func
	double d0
	float f1
	short s2
	float f3
PREINIT:
	int(*func)(double, float, short, float);
CODE:
	func   = INT2PTR(int(*)(double, float, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2, f3);
OUTPUT:
	RETVAL

void *
nci_psfsf( c_func, s0, f1, s2, f3 )
	SV* c_func
	short s0
	float f1
	short s2
	float f3
PREINIT:
	void *(*func)(short, float, short, float);
CODE:
	func   = INT2PTR(void *(*)(short, float, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2, f3);
OUTPUT:
	RETVAL

void
nci_vsfsf( c_func, s0, f1, s2, f3 )
	SV* c_func
	short s0
	float f1
	short s2
	float f3
PREINIT:
	void(*func)(short, float, short, float);
CODE:
	func   = INT2PTR(void(*)(short, float, short, float), SvIV(c_func) );
	(*func)(s0, f1, s2, f3);

double
nci_dsfsf( c_func, s0, f1, s2, f3 )
	SV* c_func
	short s0
	float f1
	short s2
	float f3
PREINIT:
	double(*func)(short, float, short, float);
CODE:
	func   = INT2PTR(double(*)(short, float, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2, f3);
OUTPUT:
	RETVAL

short
nci_ssfsf( c_func, s0, f1, s2, f3 )
	SV* c_func
	short s0
	float f1
	short s2
	float f3
PREINIT:
	short(*func)(short, float, short, float);
CODE:
	func   = INT2PTR(short(*)(short, float, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2, f3);
OUTPUT:
	RETVAL

float
nci_fsfsf( c_func, s0, f1, s2, f3 )
	SV* c_func
	short s0
	float f1
	short s2
	float f3
PREINIT:
	float(*func)(short, float, short, float);
CODE:
	func   = INT2PTR(float(*)(short, float, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2, f3);
OUTPUT:
	RETVAL

char *
nci_tsfsf( c_func, s0, f1, s2, f3 )
	SV* c_func
	short s0
	float f1
	short s2
	float f3
PREINIT:
	char *(*func)(short, float, short, float);
CODE:
	func   = INT2PTR(char *(*)(short, float, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2, f3);
OUTPUT:
	RETVAL

int
nci_isfsf( c_func, s0, f1, s2, f3 )
	SV* c_func
	short s0
	float f1
	short s2
	float f3
PREINIT:
	int(*func)(short, float, short, float);
CODE:
	func   = INT2PTR(int(*)(short, float, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2, f3);
OUTPUT:
	RETVAL

void *
nci_pffsf( c_func, f0, f1, s2, f3 )
	SV* c_func
	float f0
	float f1
	short s2
	float f3
PREINIT:
	void *(*func)(float, float, short, float);
CODE:
	func   = INT2PTR(void *(*)(float, float, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2, f3);
OUTPUT:
	RETVAL

void
nci_vffsf( c_func, f0, f1, s2, f3 )
	SV* c_func
	float f0
	float f1
	short s2
	float f3
PREINIT:
	void(*func)(float, float, short, float);
CODE:
	func   = INT2PTR(void(*)(float, float, short, float), SvIV(c_func) );
	(*func)(f0, f1, s2, f3);

double
nci_dffsf( c_func, f0, f1, s2, f3 )
	SV* c_func
	float f0
	float f1
	short s2
	float f3
PREINIT:
	double(*func)(float, float, short, float);
CODE:
	func   = INT2PTR(double(*)(float, float, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2, f3);
OUTPUT:
	RETVAL

short
nci_sffsf( c_func, f0, f1, s2, f3 )
	SV* c_func
	float f0
	float f1
	short s2
	float f3
PREINIT:
	short(*func)(float, float, short, float);
CODE:
	func   = INT2PTR(short(*)(float, float, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2, f3);
OUTPUT:
	RETVAL

float
nci_fffsf( c_func, f0, f1, s2, f3 )
	SV* c_func
	float f0
	float f1
	short s2
	float f3
PREINIT:
	float(*func)(float, float, short, float);
CODE:
	func   = INT2PTR(float(*)(float, float, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2, f3);
OUTPUT:
	RETVAL

char *
nci_tffsf( c_func, f0, f1, s2, f3 )
	SV* c_func
	float f0
	float f1
	short s2
	float f3
PREINIT:
	char *(*func)(float, float, short, float);
CODE:
	func   = INT2PTR(char *(*)(float, float, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2, f3);
OUTPUT:
	RETVAL

int
nci_iffsf( c_func, f0, f1, s2, f3 )
	SV* c_func
	float f0
	float f1
	short s2
	float f3
PREINIT:
	int(*func)(float, float, short, float);
CODE:
	func   = INT2PTR(int(*)(float, float, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2, f3);
OUTPUT:
	RETVAL

void *
nci_ptfsf( c_func, t0, f1, s2, f3 )
	SV* c_func
	char * t0
	float f1
	short s2
	float f3
PREINIT:
	void *(*func)(char *, float, short, float);
CODE:
	func   = INT2PTR(void *(*)(char *, float, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2, f3);
OUTPUT:
	RETVAL

void
nci_vtfsf( c_func, t0, f1, s2, f3 )
	SV* c_func
	char * t0
	float f1
	short s2
	float f3
PREINIT:
	void(*func)(char *, float, short, float);
CODE:
	func   = INT2PTR(void(*)(char *, float, short, float), SvIV(c_func) );
	(*func)(t0, f1, s2, f3);

double
nci_dtfsf( c_func, t0, f1, s2, f3 )
	SV* c_func
	char * t0
	float f1
	short s2
	float f3
PREINIT:
	double(*func)(char *, float, short, float);
CODE:
	func   = INT2PTR(double(*)(char *, float, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2, f3);
OUTPUT:
	RETVAL

short
nci_stfsf( c_func, t0, f1, s2, f3 )
	SV* c_func
	char * t0
	float f1
	short s2
	float f3
PREINIT:
	short(*func)(char *, float, short, float);
CODE:
	func   = INT2PTR(short(*)(char *, float, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2, f3);
OUTPUT:
	RETVAL

float
nci_ftfsf( c_func, t0, f1, s2, f3 )
	SV* c_func
	char * t0
	float f1
	short s2
	float f3
PREINIT:
	float(*func)(char *, float, short, float);
CODE:
	func   = INT2PTR(float(*)(char *, float, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2, f3);
OUTPUT:
	RETVAL

char *
nci_ttfsf( c_func, t0, f1, s2, f3 )
	SV* c_func
	char * t0
	float f1
	short s2
	float f3
PREINIT:
	char *(*func)(char *, float, short, float);
CODE:
	func   = INT2PTR(char *(*)(char *, float, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2, f3);
OUTPUT:
	RETVAL

int
nci_itfsf( c_func, t0, f1, s2, f3 )
	SV* c_func
	char * t0
	float f1
	short s2
	float f3
PREINIT:
	int(*func)(char *, float, short, float);
CODE:
	func   = INT2PTR(int(*)(char *, float, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2, f3);
OUTPUT:
	RETVAL

void *
nci_pifsf( c_func, i0, f1, s2, f3 )
	SV* c_func
	int i0
	float f1
	short s2
	float f3
PREINIT:
	void *(*func)(int, float, short, float);
CODE:
	func   = INT2PTR(void *(*)(int, float, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2, f3);
OUTPUT:
	RETVAL

void
nci_vifsf( c_func, i0, f1, s2, f3 )
	SV* c_func
	int i0
	float f1
	short s2
	float f3
PREINIT:
	void(*func)(int, float, short, float);
CODE:
	func   = INT2PTR(void(*)(int, float, short, float), SvIV(c_func) );
	(*func)(i0, f1, s2, f3);

double
nci_difsf( c_func, i0, f1, s2, f3 )
	SV* c_func
	int i0
	float f1
	short s2
	float f3
PREINIT:
	double(*func)(int, float, short, float);
CODE:
	func   = INT2PTR(double(*)(int, float, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2, f3);
OUTPUT:
	RETVAL

short
nci_sifsf( c_func, i0, f1, s2, f3 )
	SV* c_func
	int i0
	float f1
	short s2
	float f3
PREINIT:
	short(*func)(int, float, short, float);
CODE:
	func   = INT2PTR(short(*)(int, float, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2, f3);
OUTPUT:
	RETVAL

float
nci_fifsf( c_func, i0, f1, s2, f3 )
	SV* c_func
	int i0
	float f1
	short s2
	float f3
PREINIT:
	float(*func)(int, float, short, float);
CODE:
	func   = INT2PTR(float(*)(int, float, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2, f3);
OUTPUT:
	RETVAL

char *
nci_tifsf( c_func, i0, f1, s2, f3 )
	SV* c_func
	int i0
	float f1
	short s2
	float f3
PREINIT:
	char *(*func)(int, float, short, float);
CODE:
	func   = INT2PTR(char *(*)(int, float, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2, f3);
OUTPUT:
	RETVAL

int
nci_iifsf( c_func, i0, f1, s2, f3 )
	SV* c_func
	int i0
	float f1
	short s2
	float f3
PREINIT:
	int(*func)(int, float, short, float);
CODE:
	func   = INT2PTR(int(*)(int, float, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2, f3);
OUTPUT:
	RETVAL

void *
nci_pptsf( c_func, p0, t1, s2, f3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	float f3
PREINIT:
	void *(*func)(void *, char *, short, float);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2, f3);
OUTPUT:
	RETVAL

void
nci_vptsf( c_func, p0, t1, s2, f3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	float f3
PREINIT:
	void(*func)(void *, char *, short, float);
CODE:
	func   = INT2PTR(void(*)(void *, char *, short, float), SvIV(c_func) );
	(*func)(p0, t1, s2, f3);

double
nci_dptsf( c_func, p0, t1, s2, f3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	float f3
PREINIT:
	double(*func)(void *, char *, short, float);
CODE:
	func   = INT2PTR(double(*)(void *, char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2, f3);
OUTPUT:
	RETVAL

short
nci_sptsf( c_func, p0, t1, s2, f3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	float f3
PREINIT:
	short(*func)(void *, char *, short, float);
CODE:
	func   = INT2PTR(short(*)(void *, char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2, f3);
OUTPUT:
	RETVAL

float
nci_fptsf( c_func, p0, t1, s2, f3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	float f3
PREINIT:
	float(*func)(void *, char *, short, float);
CODE:
	func   = INT2PTR(float(*)(void *, char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2, f3);
OUTPUT:
	RETVAL

char *
nci_tptsf( c_func, p0, t1, s2, f3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	float f3
PREINIT:
	char *(*func)(void *, char *, short, float);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2, f3);
OUTPUT:
	RETVAL

int
nci_iptsf( c_func, p0, t1, s2, f3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	float f3
PREINIT:
	int(*func)(void *, char *, short, float);
CODE:
	func   = INT2PTR(int(*)(void *, char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2, f3);
OUTPUT:
	RETVAL

void *
nci_pvtsf( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvtsf( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvtsf( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svtsf( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvtsf( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvtsf( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivtsf( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdtsf( c_func, d0, t1, s2, f3 )
	SV* c_func
	double d0
	char * t1
	short s2
	float f3
PREINIT:
	void *(*func)(double, char *, short, float);
CODE:
	func   = INT2PTR(void *(*)(double, char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2, f3);
OUTPUT:
	RETVAL

void
nci_vdtsf( c_func, d0, t1, s2, f3 )
	SV* c_func
	double d0
	char * t1
	short s2
	float f3
PREINIT:
	void(*func)(double, char *, short, float);
CODE:
	func   = INT2PTR(void(*)(double, char *, short, float), SvIV(c_func) );
	(*func)(d0, t1, s2, f3);

double
nci_ddtsf( c_func, d0, t1, s2, f3 )
	SV* c_func
	double d0
	char * t1
	short s2
	float f3
PREINIT:
	double(*func)(double, char *, short, float);
CODE:
	func   = INT2PTR(double(*)(double, char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2, f3);
OUTPUT:
	RETVAL

short
nci_sdtsf( c_func, d0, t1, s2, f3 )
	SV* c_func
	double d0
	char * t1
	short s2
	float f3
PREINIT:
	short(*func)(double, char *, short, float);
CODE:
	func   = INT2PTR(short(*)(double, char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2, f3);
OUTPUT:
	RETVAL

float
nci_fdtsf( c_func, d0, t1, s2, f3 )
	SV* c_func
	double d0
	char * t1
	short s2
	float f3
PREINIT:
	float(*func)(double, char *, short, float);
CODE:
	func   = INT2PTR(float(*)(double, char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2, f3);
OUTPUT:
	RETVAL

char *
nci_tdtsf( c_func, d0, t1, s2, f3 )
	SV* c_func
	double d0
	char * t1
	short s2
	float f3
PREINIT:
	char *(*func)(double, char *, short, float);
CODE:
	func   = INT2PTR(char *(*)(double, char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2, f3);
OUTPUT:
	RETVAL

int
nci_idtsf( c_func, d0, t1, s2, f3 )
	SV* c_func
	double d0
	char * t1
	short s2
	float f3
PREINIT:
	int(*func)(double, char *, short, float);
CODE:
	func   = INT2PTR(int(*)(double, char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2, f3);
OUTPUT:
	RETVAL

void *
nci_pstsf( c_func, s0, t1, s2, f3 )
	SV* c_func
	short s0
	char * t1
	short s2
	float f3
PREINIT:
	void *(*func)(short, char *, short, float);
CODE:
	func   = INT2PTR(void *(*)(short, char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2, f3);
OUTPUT:
	RETVAL

void
nci_vstsf( c_func, s0, t1, s2, f3 )
	SV* c_func
	short s0
	char * t1
	short s2
	float f3
PREINIT:
	void(*func)(short, char *, short, float);
CODE:
	func   = INT2PTR(void(*)(short, char *, short, float), SvIV(c_func) );
	(*func)(s0, t1, s2, f3);

double
nci_dstsf( c_func, s0, t1, s2, f3 )
	SV* c_func
	short s0
	char * t1
	short s2
	float f3
PREINIT:
	double(*func)(short, char *, short, float);
CODE:
	func   = INT2PTR(double(*)(short, char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2, f3);
OUTPUT:
	RETVAL

short
nci_sstsf( c_func, s0, t1, s2, f3 )
	SV* c_func
	short s0
	char * t1
	short s2
	float f3
PREINIT:
	short(*func)(short, char *, short, float);
CODE:
	func   = INT2PTR(short(*)(short, char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2, f3);
OUTPUT:
	RETVAL

float
nci_fstsf( c_func, s0, t1, s2, f3 )
	SV* c_func
	short s0
	char * t1
	short s2
	float f3
PREINIT:
	float(*func)(short, char *, short, float);
CODE:
	func   = INT2PTR(float(*)(short, char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2, f3);
OUTPUT:
	RETVAL

char *
nci_tstsf( c_func, s0, t1, s2, f3 )
	SV* c_func
	short s0
	char * t1
	short s2
	float f3
PREINIT:
	char *(*func)(short, char *, short, float);
CODE:
	func   = INT2PTR(char *(*)(short, char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2, f3);
OUTPUT:
	RETVAL

int
nci_istsf( c_func, s0, t1, s2, f3 )
	SV* c_func
	short s0
	char * t1
	short s2
	float f3
PREINIT:
	int(*func)(short, char *, short, float);
CODE:
	func   = INT2PTR(int(*)(short, char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2, f3);
OUTPUT:
	RETVAL

void *
nci_pftsf( c_func, f0, t1, s2, f3 )
	SV* c_func
	float f0
	char * t1
	short s2
	float f3
PREINIT:
	void *(*func)(float, char *, short, float);
CODE:
	func   = INT2PTR(void *(*)(float, char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2, f3);
OUTPUT:
	RETVAL

void
nci_vftsf( c_func, f0, t1, s2, f3 )
	SV* c_func
	float f0
	char * t1
	short s2
	float f3
PREINIT:
	void(*func)(float, char *, short, float);
CODE:
	func   = INT2PTR(void(*)(float, char *, short, float), SvIV(c_func) );
	(*func)(f0, t1, s2, f3);

double
nci_dftsf( c_func, f0, t1, s2, f3 )
	SV* c_func
	float f0
	char * t1
	short s2
	float f3
PREINIT:
	double(*func)(float, char *, short, float);
CODE:
	func   = INT2PTR(double(*)(float, char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2, f3);
OUTPUT:
	RETVAL

short
nci_sftsf( c_func, f0, t1, s2, f3 )
	SV* c_func
	float f0
	char * t1
	short s2
	float f3
PREINIT:
	short(*func)(float, char *, short, float);
CODE:
	func   = INT2PTR(short(*)(float, char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2, f3);
OUTPUT:
	RETVAL

float
nci_fftsf( c_func, f0, t1, s2, f3 )
	SV* c_func
	float f0
	char * t1
	short s2
	float f3
PREINIT:
	float(*func)(float, char *, short, float);
CODE:
	func   = INT2PTR(float(*)(float, char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2, f3);
OUTPUT:
	RETVAL

char *
nci_tftsf( c_func, f0, t1, s2, f3 )
	SV* c_func
	float f0
	char * t1
	short s2
	float f3
PREINIT:
	char *(*func)(float, char *, short, float);
CODE:
	func   = INT2PTR(char *(*)(float, char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2, f3);
OUTPUT:
	RETVAL

int
nci_iftsf( c_func, f0, t1, s2, f3 )
	SV* c_func
	float f0
	char * t1
	short s2
	float f3
PREINIT:
	int(*func)(float, char *, short, float);
CODE:
	func   = INT2PTR(int(*)(float, char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2, f3);
OUTPUT:
	RETVAL

void *
nci_pttsf( c_func, t0, t1, s2, f3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	float f3
PREINIT:
	void *(*func)(char *, char *, short, float);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2, f3);
OUTPUT:
	RETVAL

void
nci_vttsf( c_func, t0, t1, s2, f3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	float f3
PREINIT:
	void(*func)(char *, char *, short, float);
CODE:
	func   = INT2PTR(void(*)(char *, char *, short, float), SvIV(c_func) );
	(*func)(t0, t1, s2, f3);

double
nci_dttsf( c_func, t0, t1, s2, f3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	float f3
PREINIT:
	double(*func)(char *, char *, short, float);
CODE:
	func   = INT2PTR(double(*)(char *, char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2, f3);
OUTPUT:
	RETVAL

short
nci_sttsf( c_func, t0, t1, s2, f3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	float f3
PREINIT:
	short(*func)(char *, char *, short, float);
CODE:
	func   = INT2PTR(short(*)(char *, char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2, f3);
OUTPUT:
	RETVAL

float
nci_fttsf( c_func, t0, t1, s2, f3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	float f3
PREINIT:
	float(*func)(char *, char *, short, float);
CODE:
	func   = INT2PTR(float(*)(char *, char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2, f3);
OUTPUT:
	RETVAL

char *
nci_tttsf( c_func, t0, t1, s2, f3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	float f3
PREINIT:
	char *(*func)(char *, char *, short, float);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2, f3);
OUTPUT:
	RETVAL

int
nci_ittsf( c_func, t0, t1, s2, f3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	float f3
PREINIT:
	int(*func)(char *, char *, short, float);
CODE:
	func   = INT2PTR(int(*)(char *, char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2, f3);
OUTPUT:
	RETVAL

void *
nci_pitsf( c_func, i0, t1, s2, f3 )
	SV* c_func
	int i0
	char * t1
	short s2
	float f3
PREINIT:
	void *(*func)(int, char *, short, float);
CODE:
	func   = INT2PTR(void *(*)(int, char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2, f3);
OUTPUT:
	RETVAL

void
nci_vitsf( c_func, i0, t1, s2, f3 )
	SV* c_func
	int i0
	char * t1
	short s2
	float f3
PREINIT:
	void(*func)(int, char *, short, float);
CODE:
	func   = INT2PTR(void(*)(int, char *, short, float), SvIV(c_func) );
	(*func)(i0, t1, s2, f3);

double
nci_ditsf( c_func, i0, t1, s2, f3 )
	SV* c_func
	int i0
	char * t1
	short s2
	float f3
PREINIT:
	double(*func)(int, char *, short, float);
CODE:
	func   = INT2PTR(double(*)(int, char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2, f3);
OUTPUT:
	RETVAL

short
nci_sitsf( c_func, i0, t1, s2, f3 )
	SV* c_func
	int i0
	char * t1
	short s2
	float f3
PREINIT:
	short(*func)(int, char *, short, float);
CODE:
	func   = INT2PTR(short(*)(int, char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2, f3);
OUTPUT:
	RETVAL

float
nci_fitsf( c_func, i0, t1, s2, f3 )
	SV* c_func
	int i0
	char * t1
	short s2
	float f3
PREINIT:
	float(*func)(int, char *, short, float);
CODE:
	func   = INT2PTR(float(*)(int, char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2, f3);
OUTPUT:
	RETVAL

char *
nci_titsf( c_func, i0, t1, s2, f3 )
	SV* c_func
	int i0
	char * t1
	short s2
	float f3
PREINIT:
	char *(*func)(int, char *, short, float);
CODE:
	func   = INT2PTR(char *(*)(int, char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2, f3);
OUTPUT:
	RETVAL

int
nci_iitsf( c_func, i0, t1, s2, f3 )
	SV* c_func
	int i0
	char * t1
	short s2
	float f3
PREINIT:
	int(*func)(int, char *, short, float);
CODE:
	func   = INT2PTR(int(*)(int, char *, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2, f3);
OUTPUT:
	RETVAL

void *
nci_ppisf( c_func, p0, i1, s2, f3 )
	SV* c_func
	void * p0
	int i1
	short s2
	float f3
PREINIT:
	void *(*func)(void *, int, short, float);
CODE:
	func   = INT2PTR(void *(*)(void *, int, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2, f3);
OUTPUT:
	RETVAL

void
nci_vpisf( c_func, p0, i1, s2, f3 )
	SV* c_func
	void * p0
	int i1
	short s2
	float f3
PREINIT:
	void(*func)(void *, int, short, float);
CODE:
	func   = INT2PTR(void(*)(void *, int, short, float), SvIV(c_func) );
	(*func)(p0, i1, s2, f3);

double
nci_dpisf( c_func, p0, i1, s2, f3 )
	SV* c_func
	void * p0
	int i1
	short s2
	float f3
PREINIT:
	double(*func)(void *, int, short, float);
CODE:
	func   = INT2PTR(double(*)(void *, int, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2, f3);
OUTPUT:
	RETVAL

short
nci_spisf( c_func, p0, i1, s2, f3 )
	SV* c_func
	void * p0
	int i1
	short s2
	float f3
PREINIT:
	short(*func)(void *, int, short, float);
CODE:
	func   = INT2PTR(short(*)(void *, int, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2, f3);
OUTPUT:
	RETVAL

float
nci_fpisf( c_func, p0, i1, s2, f3 )
	SV* c_func
	void * p0
	int i1
	short s2
	float f3
PREINIT:
	float(*func)(void *, int, short, float);
CODE:
	func   = INT2PTR(float(*)(void *, int, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2, f3);
OUTPUT:
	RETVAL

char *
nci_tpisf( c_func, p0, i1, s2, f3 )
	SV* c_func
	void * p0
	int i1
	short s2
	float f3
PREINIT:
	char *(*func)(void *, int, short, float);
CODE:
	func   = INT2PTR(char *(*)(void *, int, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2, f3);
OUTPUT:
	RETVAL

int
nci_ipisf( c_func, p0, i1, s2, f3 )
	SV* c_func
	void * p0
	int i1
	short s2
	float f3
PREINIT:
	int(*func)(void *, int, short, float);
CODE:
	func   = INT2PTR(int(*)(void *, int, short, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2, f3);
OUTPUT:
	RETVAL

void *
nci_pvisf( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvisf( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvisf( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svisf( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvisf( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvisf( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivisf( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdisf( c_func, d0, i1, s2, f3 )
	SV* c_func
	double d0
	int i1
	short s2
	float f3
PREINIT:
	void *(*func)(double, int, short, float);
CODE:
	func   = INT2PTR(void *(*)(double, int, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2, f3);
OUTPUT:
	RETVAL

void
nci_vdisf( c_func, d0, i1, s2, f3 )
	SV* c_func
	double d0
	int i1
	short s2
	float f3
PREINIT:
	void(*func)(double, int, short, float);
CODE:
	func   = INT2PTR(void(*)(double, int, short, float), SvIV(c_func) );
	(*func)(d0, i1, s2, f3);

double
nci_ddisf( c_func, d0, i1, s2, f3 )
	SV* c_func
	double d0
	int i1
	short s2
	float f3
PREINIT:
	double(*func)(double, int, short, float);
CODE:
	func   = INT2PTR(double(*)(double, int, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2, f3);
OUTPUT:
	RETVAL

short
nci_sdisf( c_func, d0, i1, s2, f3 )
	SV* c_func
	double d0
	int i1
	short s2
	float f3
PREINIT:
	short(*func)(double, int, short, float);
CODE:
	func   = INT2PTR(short(*)(double, int, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2, f3);
OUTPUT:
	RETVAL

float
nci_fdisf( c_func, d0, i1, s2, f3 )
	SV* c_func
	double d0
	int i1
	short s2
	float f3
PREINIT:
	float(*func)(double, int, short, float);
CODE:
	func   = INT2PTR(float(*)(double, int, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2, f3);
OUTPUT:
	RETVAL

char *
nci_tdisf( c_func, d0, i1, s2, f3 )
	SV* c_func
	double d0
	int i1
	short s2
	float f3
PREINIT:
	char *(*func)(double, int, short, float);
CODE:
	func   = INT2PTR(char *(*)(double, int, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2, f3);
OUTPUT:
	RETVAL

int
nci_idisf( c_func, d0, i1, s2, f3 )
	SV* c_func
	double d0
	int i1
	short s2
	float f3
PREINIT:
	int(*func)(double, int, short, float);
CODE:
	func   = INT2PTR(int(*)(double, int, short, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2, f3);
OUTPUT:
	RETVAL

void *
nci_psisf( c_func, s0, i1, s2, f3 )
	SV* c_func
	short s0
	int i1
	short s2
	float f3
PREINIT:
	void *(*func)(short, int, short, float);
CODE:
	func   = INT2PTR(void *(*)(short, int, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2, f3);
OUTPUT:
	RETVAL

void
nci_vsisf( c_func, s0, i1, s2, f3 )
	SV* c_func
	short s0
	int i1
	short s2
	float f3
PREINIT:
	void(*func)(short, int, short, float);
CODE:
	func   = INT2PTR(void(*)(short, int, short, float), SvIV(c_func) );
	(*func)(s0, i1, s2, f3);

double
nci_dsisf( c_func, s0, i1, s2, f3 )
	SV* c_func
	short s0
	int i1
	short s2
	float f3
PREINIT:
	double(*func)(short, int, short, float);
CODE:
	func   = INT2PTR(double(*)(short, int, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2, f3);
OUTPUT:
	RETVAL

short
nci_ssisf( c_func, s0, i1, s2, f3 )
	SV* c_func
	short s0
	int i1
	short s2
	float f3
PREINIT:
	short(*func)(short, int, short, float);
CODE:
	func   = INT2PTR(short(*)(short, int, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2, f3);
OUTPUT:
	RETVAL

float
nci_fsisf( c_func, s0, i1, s2, f3 )
	SV* c_func
	short s0
	int i1
	short s2
	float f3
PREINIT:
	float(*func)(short, int, short, float);
CODE:
	func   = INT2PTR(float(*)(short, int, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2, f3);
OUTPUT:
	RETVAL

char *
nci_tsisf( c_func, s0, i1, s2, f3 )
	SV* c_func
	short s0
	int i1
	short s2
	float f3
PREINIT:
	char *(*func)(short, int, short, float);
CODE:
	func   = INT2PTR(char *(*)(short, int, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2, f3);
OUTPUT:
	RETVAL

int
nci_isisf( c_func, s0, i1, s2, f3 )
	SV* c_func
	short s0
	int i1
	short s2
	float f3
PREINIT:
	int(*func)(short, int, short, float);
CODE:
	func   = INT2PTR(int(*)(short, int, short, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2, f3);
OUTPUT:
	RETVAL

void *
nci_pfisf( c_func, f0, i1, s2, f3 )
	SV* c_func
	float f0
	int i1
	short s2
	float f3
PREINIT:
	void *(*func)(float, int, short, float);
CODE:
	func   = INT2PTR(void *(*)(float, int, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2, f3);
OUTPUT:
	RETVAL

void
nci_vfisf( c_func, f0, i1, s2, f3 )
	SV* c_func
	float f0
	int i1
	short s2
	float f3
PREINIT:
	void(*func)(float, int, short, float);
CODE:
	func   = INT2PTR(void(*)(float, int, short, float), SvIV(c_func) );
	(*func)(f0, i1, s2, f3);

double
nci_dfisf( c_func, f0, i1, s2, f3 )
	SV* c_func
	float f0
	int i1
	short s2
	float f3
PREINIT:
	double(*func)(float, int, short, float);
CODE:
	func   = INT2PTR(double(*)(float, int, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2, f3);
OUTPUT:
	RETVAL

short
nci_sfisf( c_func, f0, i1, s2, f3 )
	SV* c_func
	float f0
	int i1
	short s2
	float f3
PREINIT:
	short(*func)(float, int, short, float);
CODE:
	func   = INT2PTR(short(*)(float, int, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2, f3);
OUTPUT:
	RETVAL

float
nci_ffisf( c_func, f0, i1, s2, f3 )
	SV* c_func
	float f0
	int i1
	short s2
	float f3
PREINIT:
	float(*func)(float, int, short, float);
CODE:
	func   = INT2PTR(float(*)(float, int, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2, f3);
OUTPUT:
	RETVAL

char *
nci_tfisf( c_func, f0, i1, s2, f3 )
	SV* c_func
	float f0
	int i1
	short s2
	float f3
PREINIT:
	char *(*func)(float, int, short, float);
CODE:
	func   = INT2PTR(char *(*)(float, int, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2, f3);
OUTPUT:
	RETVAL

int
nci_ifisf( c_func, f0, i1, s2, f3 )
	SV* c_func
	float f0
	int i1
	short s2
	float f3
PREINIT:
	int(*func)(float, int, short, float);
CODE:
	func   = INT2PTR(int(*)(float, int, short, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2, f3);
OUTPUT:
	RETVAL

void *
nci_ptisf( c_func, t0, i1, s2, f3 )
	SV* c_func
	char * t0
	int i1
	short s2
	float f3
PREINIT:
	void *(*func)(char *, int, short, float);
CODE:
	func   = INT2PTR(void *(*)(char *, int, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2, f3);
OUTPUT:
	RETVAL

void
nci_vtisf( c_func, t0, i1, s2, f3 )
	SV* c_func
	char * t0
	int i1
	short s2
	float f3
PREINIT:
	void(*func)(char *, int, short, float);
CODE:
	func   = INT2PTR(void(*)(char *, int, short, float), SvIV(c_func) );
	(*func)(t0, i1, s2, f3);

double
nci_dtisf( c_func, t0, i1, s2, f3 )
	SV* c_func
	char * t0
	int i1
	short s2
	float f3
PREINIT:
	double(*func)(char *, int, short, float);
CODE:
	func   = INT2PTR(double(*)(char *, int, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2, f3);
OUTPUT:
	RETVAL

short
nci_stisf( c_func, t0, i1, s2, f3 )
	SV* c_func
	char * t0
	int i1
	short s2
	float f3
PREINIT:
	short(*func)(char *, int, short, float);
CODE:
	func   = INT2PTR(short(*)(char *, int, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2, f3);
OUTPUT:
	RETVAL

float
nci_ftisf( c_func, t0, i1, s2, f3 )
	SV* c_func
	char * t0
	int i1
	short s2
	float f3
PREINIT:
	float(*func)(char *, int, short, float);
CODE:
	func   = INT2PTR(float(*)(char *, int, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2, f3);
OUTPUT:
	RETVAL

char *
nci_ttisf( c_func, t0, i1, s2, f3 )
	SV* c_func
	char * t0
	int i1
	short s2
	float f3
PREINIT:
	char *(*func)(char *, int, short, float);
CODE:
	func   = INT2PTR(char *(*)(char *, int, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2, f3);
OUTPUT:
	RETVAL

int
nci_itisf( c_func, t0, i1, s2, f3 )
	SV* c_func
	char * t0
	int i1
	short s2
	float f3
PREINIT:
	int(*func)(char *, int, short, float);
CODE:
	func   = INT2PTR(int(*)(char *, int, short, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2, f3);
OUTPUT:
	RETVAL

void *
nci_piisf( c_func, i0, i1, s2, f3 )
	SV* c_func
	int i0
	int i1
	short s2
	float f3
PREINIT:
	void *(*func)(int, int, short, float);
CODE:
	func   = INT2PTR(void *(*)(int, int, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2, f3);
OUTPUT:
	RETVAL

void
nci_viisf( c_func, i0, i1, s2, f3 )
	SV* c_func
	int i0
	int i1
	short s2
	float f3
PREINIT:
	void(*func)(int, int, short, float);
CODE:
	func   = INT2PTR(void(*)(int, int, short, float), SvIV(c_func) );
	(*func)(i0, i1, s2, f3);

double
nci_diisf( c_func, i0, i1, s2, f3 )
	SV* c_func
	int i0
	int i1
	short s2
	float f3
PREINIT:
	double(*func)(int, int, short, float);
CODE:
	func   = INT2PTR(double(*)(int, int, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2, f3);
OUTPUT:
	RETVAL

short
nci_siisf( c_func, i0, i1, s2, f3 )
	SV* c_func
	int i0
	int i1
	short s2
	float f3
PREINIT:
	short(*func)(int, int, short, float);
CODE:
	func   = INT2PTR(short(*)(int, int, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2, f3);
OUTPUT:
	RETVAL

float
nci_fiisf( c_func, i0, i1, s2, f3 )
	SV* c_func
	int i0
	int i1
	short s2
	float f3
PREINIT:
	float(*func)(int, int, short, float);
CODE:
	func   = INT2PTR(float(*)(int, int, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2, f3);
OUTPUT:
	RETVAL

char *
nci_tiisf( c_func, i0, i1, s2, f3 )
	SV* c_func
	int i0
	int i1
	short s2
	float f3
PREINIT:
	char *(*func)(int, int, short, float);
CODE:
	func   = INT2PTR(char *(*)(int, int, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2, f3);
OUTPUT:
	RETVAL

int
nci_iiisf( c_func, i0, i1, s2, f3 )
	SV* c_func
	int i0
	int i1
	short s2
	float f3
PREINIT:
	int(*func)(int, int, short, float);
CODE:
	func   = INT2PTR(int(*)(int, int, short, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2, f3);
OUTPUT:
	RETVAL

void *
nci_pppff( c_func, p0, p1, f2, f3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	float f3
PREINIT:
	void *(*func)(void *, void *, float, float);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2, f3);
OUTPUT:
	RETVAL

void
nci_vppff( c_func, p0, p1, f2, f3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	float f3
PREINIT:
	void(*func)(void *, void *, float, float);
CODE:
	func   = INT2PTR(void(*)(void *, void *, float, float), SvIV(c_func) );
	(*func)(p0, p1, f2, f3);

double
nci_dppff( c_func, p0, p1, f2, f3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	float f3
PREINIT:
	double(*func)(void *, void *, float, float);
CODE:
	func   = INT2PTR(double(*)(void *, void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2, f3);
OUTPUT:
	RETVAL

short
nci_sppff( c_func, p0, p1, f2, f3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	float f3
PREINIT:
	short(*func)(void *, void *, float, float);
CODE:
	func   = INT2PTR(short(*)(void *, void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2, f3);
OUTPUT:
	RETVAL

float
nci_fppff( c_func, p0, p1, f2, f3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	float f3
PREINIT:
	float(*func)(void *, void *, float, float);
CODE:
	func   = INT2PTR(float(*)(void *, void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2, f3);
OUTPUT:
	RETVAL

char *
nci_tppff( c_func, p0, p1, f2, f3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	float f3
PREINIT:
	char *(*func)(void *, void *, float, float);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2, f3);
OUTPUT:
	RETVAL

int
nci_ippff( c_func, p0, p1, f2, f3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	float f3
PREINIT:
	int(*func)(void *, void *, float, float);
CODE:
	func   = INT2PTR(int(*)(void *, void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2, f3);
OUTPUT:
	RETVAL

void *
nci_pvpff( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvpff( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvpff( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svpff( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvpff( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvpff( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivpff( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdpff( c_func, d0, p1, f2, f3 )
	SV* c_func
	double d0
	void * p1
	float f2
	float f3
PREINIT:
	void *(*func)(double, void *, float, float);
CODE:
	func   = INT2PTR(void *(*)(double, void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2, f3);
OUTPUT:
	RETVAL

void
nci_vdpff( c_func, d0, p1, f2, f3 )
	SV* c_func
	double d0
	void * p1
	float f2
	float f3
PREINIT:
	void(*func)(double, void *, float, float);
CODE:
	func   = INT2PTR(void(*)(double, void *, float, float), SvIV(c_func) );
	(*func)(d0, p1, f2, f3);

double
nci_ddpff( c_func, d0, p1, f2, f3 )
	SV* c_func
	double d0
	void * p1
	float f2
	float f3
PREINIT:
	double(*func)(double, void *, float, float);
CODE:
	func   = INT2PTR(double(*)(double, void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2, f3);
OUTPUT:
	RETVAL

short
nci_sdpff( c_func, d0, p1, f2, f3 )
	SV* c_func
	double d0
	void * p1
	float f2
	float f3
PREINIT:
	short(*func)(double, void *, float, float);
CODE:
	func   = INT2PTR(short(*)(double, void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2, f3);
OUTPUT:
	RETVAL

float
nci_fdpff( c_func, d0, p1, f2, f3 )
	SV* c_func
	double d0
	void * p1
	float f2
	float f3
PREINIT:
	float(*func)(double, void *, float, float);
CODE:
	func   = INT2PTR(float(*)(double, void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2, f3);
OUTPUT:
	RETVAL

char *
nci_tdpff( c_func, d0, p1, f2, f3 )
	SV* c_func
	double d0
	void * p1
	float f2
	float f3
PREINIT:
	char *(*func)(double, void *, float, float);
CODE:
	func   = INT2PTR(char *(*)(double, void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2, f3);
OUTPUT:
	RETVAL

int
nci_idpff( c_func, d0, p1, f2, f3 )
	SV* c_func
	double d0
	void * p1
	float f2
	float f3
PREINIT:
	int(*func)(double, void *, float, float);
CODE:
	func   = INT2PTR(int(*)(double, void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2, f3);
OUTPUT:
	RETVAL

void *
nci_pspff( c_func, s0, p1, f2, f3 )
	SV* c_func
	short s0
	void * p1
	float f2
	float f3
PREINIT:
	void *(*func)(short, void *, float, float);
CODE:
	func   = INT2PTR(void *(*)(short, void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2, f3);
OUTPUT:
	RETVAL

void
nci_vspff( c_func, s0, p1, f2, f3 )
	SV* c_func
	short s0
	void * p1
	float f2
	float f3
PREINIT:
	void(*func)(short, void *, float, float);
CODE:
	func   = INT2PTR(void(*)(short, void *, float, float), SvIV(c_func) );
	(*func)(s0, p1, f2, f3);

double
nci_dspff( c_func, s0, p1, f2, f3 )
	SV* c_func
	short s0
	void * p1
	float f2
	float f3
PREINIT:
	double(*func)(short, void *, float, float);
CODE:
	func   = INT2PTR(double(*)(short, void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2, f3);
OUTPUT:
	RETVAL

short
nci_sspff( c_func, s0, p1, f2, f3 )
	SV* c_func
	short s0
	void * p1
	float f2
	float f3
PREINIT:
	short(*func)(short, void *, float, float);
CODE:
	func   = INT2PTR(short(*)(short, void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2, f3);
OUTPUT:
	RETVAL

float
nci_fspff( c_func, s0, p1, f2, f3 )
	SV* c_func
	short s0
	void * p1
	float f2
	float f3
PREINIT:
	float(*func)(short, void *, float, float);
CODE:
	func   = INT2PTR(float(*)(short, void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2, f3);
OUTPUT:
	RETVAL

char *
nci_tspff( c_func, s0, p1, f2, f3 )
	SV* c_func
	short s0
	void * p1
	float f2
	float f3
PREINIT:
	char *(*func)(short, void *, float, float);
CODE:
	func   = INT2PTR(char *(*)(short, void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2, f3);
OUTPUT:
	RETVAL

int
nci_ispff( c_func, s0, p1, f2, f3 )
	SV* c_func
	short s0
	void * p1
	float f2
	float f3
PREINIT:
	int(*func)(short, void *, float, float);
CODE:
	func   = INT2PTR(int(*)(short, void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2, f3);
OUTPUT:
	RETVAL

void *
nci_pfpff( c_func, f0, p1, f2, f3 )
	SV* c_func
	float f0
	void * p1
	float f2
	float f3
PREINIT:
	void *(*func)(float, void *, float, float);
CODE:
	func   = INT2PTR(void *(*)(float, void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2, f3);
OUTPUT:
	RETVAL

void
nci_vfpff( c_func, f0, p1, f2, f3 )
	SV* c_func
	float f0
	void * p1
	float f2
	float f3
PREINIT:
	void(*func)(float, void *, float, float);
CODE:
	func   = INT2PTR(void(*)(float, void *, float, float), SvIV(c_func) );
	(*func)(f0, p1, f2, f3);

double
nci_dfpff( c_func, f0, p1, f2, f3 )
	SV* c_func
	float f0
	void * p1
	float f2
	float f3
PREINIT:
	double(*func)(float, void *, float, float);
CODE:
	func   = INT2PTR(double(*)(float, void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2, f3);
OUTPUT:
	RETVAL

short
nci_sfpff( c_func, f0, p1, f2, f3 )
	SV* c_func
	float f0
	void * p1
	float f2
	float f3
PREINIT:
	short(*func)(float, void *, float, float);
CODE:
	func   = INT2PTR(short(*)(float, void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2, f3);
OUTPUT:
	RETVAL

float
nci_ffpff( c_func, f0, p1, f2, f3 )
	SV* c_func
	float f0
	void * p1
	float f2
	float f3
PREINIT:
	float(*func)(float, void *, float, float);
CODE:
	func   = INT2PTR(float(*)(float, void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2, f3);
OUTPUT:
	RETVAL

char *
nci_tfpff( c_func, f0, p1, f2, f3 )
	SV* c_func
	float f0
	void * p1
	float f2
	float f3
PREINIT:
	char *(*func)(float, void *, float, float);
CODE:
	func   = INT2PTR(char *(*)(float, void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2, f3);
OUTPUT:
	RETVAL

int
nci_ifpff( c_func, f0, p1, f2, f3 )
	SV* c_func
	float f0
	void * p1
	float f2
	float f3
PREINIT:
	int(*func)(float, void *, float, float);
CODE:
	func   = INT2PTR(int(*)(float, void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2, f3);
OUTPUT:
	RETVAL

void *
nci_ptpff( c_func, t0, p1, f2, f3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	float f3
PREINIT:
	void *(*func)(char *, void *, float, float);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2, f3);
OUTPUT:
	RETVAL

void
nci_vtpff( c_func, t0, p1, f2, f3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	float f3
PREINIT:
	void(*func)(char *, void *, float, float);
CODE:
	func   = INT2PTR(void(*)(char *, void *, float, float), SvIV(c_func) );
	(*func)(t0, p1, f2, f3);

double
nci_dtpff( c_func, t0, p1, f2, f3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	float f3
PREINIT:
	double(*func)(char *, void *, float, float);
CODE:
	func   = INT2PTR(double(*)(char *, void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2, f3);
OUTPUT:
	RETVAL

short
nci_stpff( c_func, t0, p1, f2, f3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	float f3
PREINIT:
	short(*func)(char *, void *, float, float);
CODE:
	func   = INT2PTR(short(*)(char *, void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2, f3);
OUTPUT:
	RETVAL

float
nci_ftpff( c_func, t0, p1, f2, f3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	float f3
PREINIT:
	float(*func)(char *, void *, float, float);
CODE:
	func   = INT2PTR(float(*)(char *, void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2, f3);
OUTPUT:
	RETVAL

char *
nci_ttpff( c_func, t0, p1, f2, f3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	float f3
PREINIT:
	char *(*func)(char *, void *, float, float);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2, f3);
OUTPUT:
	RETVAL

int
nci_itpff( c_func, t0, p1, f2, f3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	float f3
PREINIT:
	int(*func)(char *, void *, float, float);
CODE:
	func   = INT2PTR(int(*)(char *, void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2, f3);
OUTPUT:
	RETVAL

void *
nci_pipff( c_func, i0, p1, f2, f3 )
	SV* c_func
	int i0
	void * p1
	float f2
	float f3
PREINIT:
	void *(*func)(int, void *, float, float);
CODE:
	func   = INT2PTR(void *(*)(int, void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2, f3);
OUTPUT:
	RETVAL

void
nci_vipff( c_func, i0, p1, f2, f3 )
	SV* c_func
	int i0
	void * p1
	float f2
	float f3
PREINIT:
	void(*func)(int, void *, float, float);
CODE:
	func   = INT2PTR(void(*)(int, void *, float, float), SvIV(c_func) );
	(*func)(i0, p1, f2, f3);

double
nci_dipff( c_func, i0, p1, f2, f3 )
	SV* c_func
	int i0
	void * p1
	float f2
	float f3
PREINIT:
	double(*func)(int, void *, float, float);
CODE:
	func   = INT2PTR(double(*)(int, void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2, f3);
OUTPUT:
	RETVAL

short
nci_sipff( c_func, i0, p1, f2, f3 )
	SV* c_func
	int i0
	void * p1
	float f2
	float f3
PREINIT:
	short(*func)(int, void *, float, float);
CODE:
	func   = INT2PTR(short(*)(int, void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2, f3);
OUTPUT:
	RETVAL

float
nci_fipff( c_func, i0, p1, f2, f3 )
	SV* c_func
	int i0
	void * p1
	float f2
	float f3
PREINIT:
	float(*func)(int, void *, float, float);
CODE:
	func   = INT2PTR(float(*)(int, void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2, f3);
OUTPUT:
	RETVAL

char *
nci_tipff( c_func, i0, p1, f2, f3 )
	SV* c_func
	int i0
	void * p1
	float f2
	float f3
PREINIT:
	char *(*func)(int, void *, float, float);
CODE:
	func   = INT2PTR(char *(*)(int, void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2, f3);
OUTPUT:
	RETVAL

int
nci_iipff( c_func, i0, p1, f2, f3 )
	SV* c_func
	int i0
	void * p1
	float f2
	float f3
PREINIT:
	int(*func)(int, void *, float, float);
CODE:
	func   = INT2PTR(int(*)(int, void *, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2, f3);
OUTPUT:
	RETVAL

void *
nci_ppdff( c_func, p0, d1, f2, f3 )
	SV* c_func
	void * p0
	double d1
	float f2
	float f3
PREINIT:
	void *(*func)(void *, double, float, float);
CODE:
	func   = INT2PTR(void *(*)(void *, double, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2, f3);
OUTPUT:
	RETVAL

void
nci_vpdff( c_func, p0, d1, f2, f3 )
	SV* c_func
	void * p0
	double d1
	float f2
	float f3
PREINIT:
	void(*func)(void *, double, float, float);
CODE:
	func   = INT2PTR(void(*)(void *, double, float, float), SvIV(c_func) );
	(*func)(p0, d1, f2, f3);

double
nci_dpdff( c_func, p0, d1, f2, f3 )
	SV* c_func
	void * p0
	double d1
	float f2
	float f3
PREINIT:
	double(*func)(void *, double, float, float);
CODE:
	func   = INT2PTR(double(*)(void *, double, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2, f3);
OUTPUT:
	RETVAL

short
nci_spdff( c_func, p0, d1, f2, f3 )
	SV* c_func
	void * p0
	double d1
	float f2
	float f3
PREINIT:
	short(*func)(void *, double, float, float);
CODE:
	func   = INT2PTR(short(*)(void *, double, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2, f3);
OUTPUT:
	RETVAL

float
nci_fpdff( c_func, p0, d1, f2, f3 )
	SV* c_func
	void * p0
	double d1
	float f2
	float f3
PREINIT:
	float(*func)(void *, double, float, float);
CODE:
	func   = INT2PTR(float(*)(void *, double, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2, f3);
OUTPUT:
	RETVAL

char *
nci_tpdff( c_func, p0, d1, f2, f3 )
	SV* c_func
	void * p0
	double d1
	float f2
	float f3
PREINIT:
	char *(*func)(void *, double, float, float);
CODE:
	func   = INT2PTR(char *(*)(void *, double, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2, f3);
OUTPUT:
	RETVAL

int
nci_ipdff( c_func, p0, d1, f2, f3 )
	SV* c_func
	void * p0
	double d1
	float f2
	float f3
PREINIT:
	int(*func)(void *, double, float, float);
CODE:
	func   = INT2PTR(int(*)(void *, double, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2, f3);
OUTPUT:
	RETVAL

void *
nci_pvdff( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvdff( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvdff( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svdff( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvdff( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvdff( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivdff( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pddff( c_func, d0, d1, f2, f3 )
	SV* c_func
	double d0
	double d1
	float f2
	float f3
PREINIT:
	void *(*func)(double, double, float, float);
CODE:
	func   = INT2PTR(void *(*)(double, double, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2, f3);
OUTPUT:
	RETVAL

void
nci_vddff( c_func, d0, d1, f2, f3 )
	SV* c_func
	double d0
	double d1
	float f2
	float f3
PREINIT:
	void(*func)(double, double, float, float);
CODE:
	func   = INT2PTR(void(*)(double, double, float, float), SvIV(c_func) );
	(*func)(d0, d1, f2, f3);

double
nci_dddff( c_func, d0, d1, f2, f3 )
	SV* c_func
	double d0
	double d1
	float f2
	float f3
PREINIT:
	double(*func)(double, double, float, float);
CODE:
	func   = INT2PTR(double(*)(double, double, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2, f3);
OUTPUT:
	RETVAL

short
nci_sddff( c_func, d0, d1, f2, f3 )
	SV* c_func
	double d0
	double d1
	float f2
	float f3
PREINIT:
	short(*func)(double, double, float, float);
CODE:
	func   = INT2PTR(short(*)(double, double, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2, f3);
OUTPUT:
	RETVAL

float
nci_fddff( c_func, d0, d1, f2, f3 )
	SV* c_func
	double d0
	double d1
	float f2
	float f3
PREINIT:
	float(*func)(double, double, float, float);
CODE:
	func   = INT2PTR(float(*)(double, double, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2, f3);
OUTPUT:
	RETVAL

char *
nci_tddff( c_func, d0, d1, f2, f3 )
	SV* c_func
	double d0
	double d1
	float f2
	float f3
PREINIT:
	char *(*func)(double, double, float, float);
CODE:
	func   = INT2PTR(char *(*)(double, double, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2, f3);
OUTPUT:
	RETVAL

int
nci_iddff( c_func, d0, d1, f2, f3 )
	SV* c_func
	double d0
	double d1
	float f2
	float f3
PREINIT:
	int(*func)(double, double, float, float);
CODE:
	func   = INT2PTR(int(*)(double, double, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2, f3);
OUTPUT:
	RETVAL

void *
nci_psdff( c_func, s0, d1, f2, f3 )
	SV* c_func
	short s0
	double d1
	float f2
	float f3
PREINIT:
	void *(*func)(short, double, float, float);
CODE:
	func   = INT2PTR(void *(*)(short, double, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2, f3);
OUTPUT:
	RETVAL

void
nci_vsdff( c_func, s0, d1, f2, f3 )
	SV* c_func
	short s0
	double d1
	float f2
	float f3
PREINIT:
	void(*func)(short, double, float, float);
CODE:
	func   = INT2PTR(void(*)(short, double, float, float), SvIV(c_func) );
	(*func)(s0, d1, f2, f3);

double
nci_dsdff( c_func, s0, d1, f2, f3 )
	SV* c_func
	short s0
	double d1
	float f2
	float f3
PREINIT:
	double(*func)(short, double, float, float);
CODE:
	func   = INT2PTR(double(*)(short, double, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2, f3);
OUTPUT:
	RETVAL

short
nci_ssdff( c_func, s0, d1, f2, f3 )
	SV* c_func
	short s0
	double d1
	float f2
	float f3
PREINIT:
	short(*func)(short, double, float, float);
CODE:
	func   = INT2PTR(short(*)(short, double, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2, f3);
OUTPUT:
	RETVAL

float
nci_fsdff( c_func, s0, d1, f2, f3 )
	SV* c_func
	short s0
	double d1
	float f2
	float f3
PREINIT:
	float(*func)(short, double, float, float);
CODE:
	func   = INT2PTR(float(*)(short, double, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2, f3);
OUTPUT:
	RETVAL

char *
nci_tsdff( c_func, s0, d1, f2, f3 )
	SV* c_func
	short s0
	double d1
	float f2
	float f3
PREINIT:
	char *(*func)(short, double, float, float);
CODE:
	func   = INT2PTR(char *(*)(short, double, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2, f3);
OUTPUT:
	RETVAL

int
nci_isdff( c_func, s0, d1, f2, f3 )
	SV* c_func
	short s0
	double d1
	float f2
	float f3
PREINIT:
	int(*func)(short, double, float, float);
CODE:
	func   = INT2PTR(int(*)(short, double, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2, f3);
OUTPUT:
	RETVAL

void *
nci_pfdff( c_func, f0, d1, f2, f3 )
	SV* c_func
	float f0
	double d1
	float f2
	float f3
PREINIT:
	void *(*func)(float, double, float, float);
CODE:
	func   = INT2PTR(void *(*)(float, double, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2, f3);
OUTPUT:
	RETVAL

void
nci_vfdff( c_func, f0, d1, f2, f3 )
	SV* c_func
	float f0
	double d1
	float f2
	float f3
PREINIT:
	void(*func)(float, double, float, float);
CODE:
	func   = INT2PTR(void(*)(float, double, float, float), SvIV(c_func) );
	(*func)(f0, d1, f2, f3);

double
nci_dfdff( c_func, f0, d1, f2, f3 )
	SV* c_func
	float f0
	double d1
	float f2
	float f3
PREINIT:
	double(*func)(float, double, float, float);
CODE:
	func   = INT2PTR(double(*)(float, double, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2, f3);
OUTPUT:
	RETVAL

short
nci_sfdff( c_func, f0, d1, f2, f3 )
	SV* c_func
	float f0
	double d1
	float f2
	float f3
PREINIT:
	short(*func)(float, double, float, float);
CODE:
	func   = INT2PTR(short(*)(float, double, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2, f3);
OUTPUT:
	RETVAL

float
nci_ffdff( c_func, f0, d1, f2, f3 )
	SV* c_func
	float f0
	double d1
	float f2
	float f3
PREINIT:
	float(*func)(float, double, float, float);
CODE:
	func   = INT2PTR(float(*)(float, double, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2, f3);
OUTPUT:
	RETVAL

char *
nci_tfdff( c_func, f0, d1, f2, f3 )
	SV* c_func
	float f0
	double d1
	float f2
	float f3
PREINIT:
	char *(*func)(float, double, float, float);
CODE:
	func   = INT2PTR(char *(*)(float, double, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2, f3);
OUTPUT:
	RETVAL

int
nci_ifdff( c_func, f0, d1, f2, f3 )
	SV* c_func
	float f0
	double d1
	float f2
	float f3
PREINIT:
	int(*func)(float, double, float, float);
CODE:
	func   = INT2PTR(int(*)(float, double, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2, f3);
OUTPUT:
	RETVAL

void *
nci_ptdff( c_func, t0, d1, f2, f3 )
	SV* c_func
	char * t0
	double d1
	float f2
	float f3
PREINIT:
	void *(*func)(char *, double, float, float);
CODE:
	func   = INT2PTR(void *(*)(char *, double, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2, f3);
OUTPUT:
	RETVAL

void
nci_vtdff( c_func, t0, d1, f2, f3 )
	SV* c_func
	char * t0
	double d1
	float f2
	float f3
PREINIT:
	void(*func)(char *, double, float, float);
CODE:
	func   = INT2PTR(void(*)(char *, double, float, float), SvIV(c_func) );
	(*func)(t0, d1, f2, f3);

double
nci_dtdff( c_func, t0, d1, f2, f3 )
	SV* c_func
	char * t0
	double d1
	float f2
	float f3
PREINIT:
	double(*func)(char *, double, float, float);
CODE:
	func   = INT2PTR(double(*)(char *, double, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2, f3);
OUTPUT:
	RETVAL

short
nci_stdff( c_func, t0, d1, f2, f3 )
	SV* c_func
	char * t0
	double d1
	float f2
	float f3
PREINIT:
	short(*func)(char *, double, float, float);
CODE:
	func   = INT2PTR(short(*)(char *, double, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2, f3);
OUTPUT:
	RETVAL

float
nci_ftdff( c_func, t0, d1, f2, f3 )
	SV* c_func
	char * t0
	double d1
	float f2
	float f3
PREINIT:
	float(*func)(char *, double, float, float);
CODE:
	func   = INT2PTR(float(*)(char *, double, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2, f3);
OUTPUT:
	RETVAL

char *
nci_ttdff( c_func, t0, d1, f2, f3 )
	SV* c_func
	char * t0
	double d1
	float f2
	float f3
PREINIT:
	char *(*func)(char *, double, float, float);
CODE:
	func   = INT2PTR(char *(*)(char *, double, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2, f3);
OUTPUT:
	RETVAL

int
nci_itdff( c_func, t0, d1, f2, f3 )
	SV* c_func
	char * t0
	double d1
	float f2
	float f3
PREINIT:
	int(*func)(char *, double, float, float);
CODE:
	func   = INT2PTR(int(*)(char *, double, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2, f3);
OUTPUT:
	RETVAL

void *
nci_pidff( c_func, i0, d1, f2, f3 )
	SV* c_func
	int i0
	double d1
	float f2
	float f3
PREINIT:
	void *(*func)(int, double, float, float);
CODE:
	func   = INT2PTR(void *(*)(int, double, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2, f3);
OUTPUT:
	RETVAL

void
nci_vidff( c_func, i0, d1, f2, f3 )
	SV* c_func
	int i0
	double d1
	float f2
	float f3
PREINIT:
	void(*func)(int, double, float, float);
CODE:
	func   = INT2PTR(void(*)(int, double, float, float), SvIV(c_func) );
	(*func)(i0, d1, f2, f3);

double
nci_didff( c_func, i0, d1, f2, f3 )
	SV* c_func
	int i0
	double d1
	float f2
	float f3
PREINIT:
	double(*func)(int, double, float, float);
CODE:
	func   = INT2PTR(double(*)(int, double, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2, f3);
OUTPUT:
	RETVAL

short
nci_sidff( c_func, i0, d1, f2, f3 )
	SV* c_func
	int i0
	double d1
	float f2
	float f3
PREINIT:
	short(*func)(int, double, float, float);
CODE:
	func   = INT2PTR(short(*)(int, double, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2, f3);
OUTPUT:
	RETVAL

float
nci_fidff( c_func, i0, d1, f2, f3 )
	SV* c_func
	int i0
	double d1
	float f2
	float f3
PREINIT:
	float(*func)(int, double, float, float);
CODE:
	func   = INT2PTR(float(*)(int, double, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2, f3);
OUTPUT:
	RETVAL

char *
nci_tidff( c_func, i0, d1, f2, f3 )
	SV* c_func
	int i0
	double d1
	float f2
	float f3
PREINIT:
	char *(*func)(int, double, float, float);
CODE:
	func   = INT2PTR(char *(*)(int, double, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2, f3);
OUTPUT:
	RETVAL

int
nci_iidff( c_func, i0, d1, f2, f3 )
	SV* c_func
	int i0
	double d1
	float f2
	float f3
PREINIT:
	int(*func)(int, double, float, float);
CODE:
	func   = INT2PTR(int(*)(int, double, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2, f3);
OUTPUT:
	RETVAL

void *
nci_ppsff( c_func, p0, s1, f2, f3 )
	SV* c_func
	void * p0
	short s1
	float f2
	float f3
PREINIT:
	void *(*func)(void *, short, float, float);
CODE:
	func   = INT2PTR(void *(*)(void *, short, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2, f3);
OUTPUT:
	RETVAL

void
nci_vpsff( c_func, p0, s1, f2, f3 )
	SV* c_func
	void * p0
	short s1
	float f2
	float f3
PREINIT:
	void(*func)(void *, short, float, float);
CODE:
	func   = INT2PTR(void(*)(void *, short, float, float), SvIV(c_func) );
	(*func)(p0, s1, f2, f3);

double
nci_dpsff( c_func, p0, s1, f2, f3 )
	SV* c_func
	void * p0
	short s1
	float f2
	float f3
PREINIT:
	double(*func)(void *, short, float, float);
CODE:
	func   = INT2PTR(double(*)(void *, short, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2, f3);
OUTPUT:
	RETVAL

short
nci_spsff( c_func, p0, s1, f2, f3 )
	SV* c_func
	void * p0
	short s1
	float f2
	float f3
PREINIT:
	short(*func)(void *, short, float, float);
CODE:
	func   = INT2PTR(short(*)(void *, short, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2, f3);
OUTPUT:
	RETVAL

float
nci_fpsff( c_func, p0, s1, f2, f3 )
	SV* c_func
	void * p0
	short s1
	float f2
	float f3
PREINIT:
	float(*func)(void *, short, float, float);
CODE:
	func   = INT2PTR(float(*)(void *, short, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2, f3);
OUTPUT:
	RETVAL

char *
nci_tpsff( c_func, p0, s1, f2, f3 )
	SV* c_func
	void * p0
	short s1
	float f2
	float f3
PREINIT:
	char *(*func)(void *, short, float, float);
CODE:
	func   = INT2PTR(char *(*)(void *, short, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2, f3);
OUTPUT:
	RETVAL

int
nci_ipsff( c_func, p0, s1, f2, f3 )
	SV* c_func
	void * p0
	short s1
	float f2
	float f3
PREINIT:
	int(*func)(void *, short, float, float);
CODE:
	func   = INT2PTR(int(*)(void *, short, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2, f3);
OUTPUT:
	RETVAL

void *
nci_pvsff( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvsff( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvsff( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svsff( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvsff( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvsff( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivsff( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdsff( c_func, d0, s1, f2, f3 )
	SV* c_func
	double d0
	short s1
	float f2
	float f3
PREINIT:
	void *(*func)(double, short, float, float);
CODE:
	func   = INT2PTR(void *(*)(double, short, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2, f3);
OUTPUT:
	RETVAL

void
nci_vdsff( c_func, d0, s1, f2, f3 )
	SV* c_func
	double d0
	short s1
	float f2
	float f3
PREINIT:
	void(*func)(double, short, float, float);
CODE:
	func   = INT2PTR(void(*)(double, short, float, float), SvIV(c_func) );
	(*func)(d0, s1, f2, f3);

double
nci_ddsff( c_func, d0, s1, f2, f3 )
	SV* c_func
	double d0
	short s1
	float f2
	float f3
PREINIT:
	double(*func)(double, short, float, float);
CODE:
	func   = INT2PTR(double(*)(double, short, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2, f3);
OUTPUT:
	RETVAL

short
nci_sdsff( c_func, d0, s1, f2, f3 )
	SV* c_func
	double d0
	short s1
	float f2
	float f3
PREINIT:
	short(*func)(double, short, float, float);
CODE:
	func   = INT2PTR(short(*)(double, short, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2, f3);
OUTPUT:
	RETVAL

float
nci_fdsff( c_func, d0, s1, f2, f3 )
	SV* c_func
	double d0
	short s1
	float f2
	float f3
PREINIT:
	float(*func)(double, short, float, float);
CODE:
	func   = INT2PTR(float(*)(double, short, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2, f3);
OUTPUT:
	RETVAL

char *
nci_tdsff( c_func, d0, s1, f2, f3 )
	SV* c_func
	double d0
	short s1
	float f2
	float f3
PREINIT:
	char *(*func)(double, short, float, float);
CODE:
	func   = INT2PTR(char *(*)(double, short, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2, f3);
OUTPUT:
	RETVAL

int
nci_idsff( c_func, d0, s1, f2, f3 )
	SV* c_func
	double d0
	short s1
	float f2
	float f3
PREINIT:
	int(*func)(double, short, float, float);
CODE:
	func   = INT2PTR(int(*)(double, short, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2, f3);
OUTPUT:
	RETVAL

void *
nci_pssff( c_func, s0, s1, f2, f3 )
	SV* c_func
	short s0
	short s1
	float f2
	float f3
PREINIT:
	void *(*func)(short, short, float, float);
CODE:
	func   = INT2PTR(void *(*)(short, short, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2, f3);
OUTPUT:
	RETVAL

void
nci_vssff( c_func, s0, s1, f2, f3 )
	SV* c_func
	short s0
	short s1
	float f2
	float f3
PREINIT:
	void(*func)(short, short, float, float);
CODE:
	func   = INT2PTR(void(*)(short, short, float, float), SvIV(c_func) );
	(*func)(s0, s1, f2, f3);

double
nci_dssff( c_func, s0, s1, f2, f3 )
	SV* c_func
	short s0
	short s1
	float f2
	float f3
PREINIT:
	double(*func)(short, short, float, float);
CODE:
	func   = INT2PTR(double(*)(short, short, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2, f3);
OUTPUT:
	RETVAL

short
nci_sssff( c_func, s0, s1, f2, f3 )
	SV* c_func
	short s0
	short s1
	float f2
	float f3
PREINIT:
	short(*func)(short, short, float, float);
CODE:
	func   = INT2PTR(short(*)(short, short, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2, f3);
OUTPUT:
	RETVAL

float
nci_fssff( c_func, s0, s1, f2, f3 )
	SV* c_func
	short s0
	short s1
	float f2
	float f3
PREINIT:
	float(*func)(short, short, float, float);
CODE:
	func   = INT2PTR(float(*)(short, short, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2, f3);
OUTPUT:
	RETVAL

char *
nci_tssff( c_func, s0, s1, f2, f3 )
	SV* c_func
	short s0
	short s1
	float f2
	float f3
PREINIT:
	char *(*func)(short, short, float, float);
CODE:
	func   = INT2PTR(char *(*)(short, short, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2, f3);
OUTPUT:
	RETVAL

int
nci_issff( c_func, s0, s1, f2, f3 )
	SV* c_func
	short s0
	short s1
	float f2
	float f3
PREINIT:
	int(*func)(short, short, float, float);
CODE:
	func   = INT2PTR(int(*)(short, short, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2, f3);
OUTPUT:
	RETVAL

void *
nci_pfsff( c_func, f0, s1, f2, f3 )
	SV* c_func
	float f0
	short s1
	float f2
	float f3
PREINIT:
	void *(*func)(float, short, float, float);
CODE:
	func   = INT2PTR(void *(*)(float, short, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2, f3);
OUTPUT:
	RETVAL

void
nci_vfsff( c_func, f0, s1, f2, f3 )
	SV* c_func
	float f0
	short s1
	float f2
	float f3
PREINIT:
	void(*func)(float, short, float, float);
CODE:
	func   = INT2PTR(void(*)(float, short, float, float), SvIV(c_func) );
	(*func)(f0, s1, f2, f3);

double
nci_dfsff( c_func, f0, s1, f2, f3 )
	SV* c_func
	float f0
	short s1
	float f2
	float f3
PREINIT:
	double(*func)(float, short, float, float);
CODE:
	func   = INT2PTR(double(*)(float, short, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2, f3);
OUTPUT:
	RETVAL

short
nci_sfsff( c_func, f0, s1, f2, f3 )
	SV* c_func
	float f0
	short s1
	float f2
	float f3
PREINIT:
	short(*func)(float, short, float, float);
CODE:
	func   = INT2PTR(short(*)(float, short, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2, f3);
OUTPUT:
	RETVAL

float
nci_ffsff( c_func, f0, s1, f2, f3 )
	SV* c_func
	float f0
	short s1
	float f2
	float f3
PREINIT:
	float(*func)(float, short, float, float);
CODE:
	func   = INT2PTR(float(*)(float, short, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2, f3);
OUTPUT:
	RETVAL

char *
nci_tfsff( c_func, f0, s1, f2, f3 )
	SV* c_func
	float f0
	short s1
	float f2
	float f3
PREINIT:
	char *(*func)(float, short, float, float);
CODE:
	func   = INT2PTR(char *(*)(float, short, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2, f3);
OUTPUT:
	RETVAL

int
nci_ifsff( c_func, f0, s1, f2, f3 )
	SV* c_func
	float f0
	short s1
	float f2
	float f3
PREINIT:
	int(*func)(float, short, float, float);
CODE:
	func   = INT2PTR(int(*)(float, short, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2, f3);
OUTPUT:
	RETVAL

void *
nci_ptsff( c_func, t0, s1, f2, f3 )
	SV* c_func
	char * t0
	short s1
	float f2
	float f3
PREINIT:
	void *(*func)(char *, short, float, float);
CODE:
	func   = INT2PTR(void *(*)(char *, short, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2, f3);
OUTPUT:
	RETVAL

void
nci_vtsff( c_func, t0, s1, f2, f3 )
	SV* c_func
	char * t0
	short s1
	float f2
	float f3
PREINIT:
	void(*func)(char *, short, float, float);
CODE:
	func   = INT2PTR(void(*)(char *, short, float, float), SvIV(c_func) );
	(*func)(t0, s1, f2, f3);

double
nci_dtsff( c_func, t0, s1, f2, f3 )
	SV* c_func
	char * t0
	short s1
	float f2
	float f3
PREINIT:
	double(*func)(char *, short, float, float);
CODE:
	func   = INT2PTR(double(*)(char *, short, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2, f3);
OUTPUT:
	RETVAL

short
nci_stsff( c_func, t0, s1, f2, f3 )
	SV* c_func
	char * t0
	short s1
	float f2
	float f3
PREINIT:
	short(*func)(char *, short, float, float);
CODE:
	func   = INT2PTR(short(*)(char *, short, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2, f3);
OUTPUT:
	RETVAL

float
nci_ftsff( c_func, t0, s1, f2, f3 )
	SV* c_func
	char * t0
	short s1
	float f2
	float f3
PREINIT:
	float(*func)(char *, short, float, float);
CODE:
	func   = INT2PTR(float(*)(char *, short, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2, f3);
OUTPUT:
	RETVAL

char *
nci_ttsff( c_func, t0, s1, f2, f3 )
	SV* c_func
	char * t0
	short s1
	float f2
	float f3
PREINIT:
	char *(*func)(char *, short, float, float);
CODE:
	func   = INT2PTR(char *(*)(char *, short, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2, f3);
OUTPUT:
	RETVAL

int
nci_itsff( c_func, t0, s1, f2, f3 )
	SV* c_func
	char * t0
	short s1
	float f2
	float f3
PREINIT:
	int(*func)(char *, short, float, float);
CODE:
	func   = INT2PTR(int(*)(char *, short, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2, f3);
OUTPUT:
	RETVAL

void *
nci_pisff( c_func, i0, s1, f2, f3 )
	SV* c_func
	int i0
	short s1
	float f2
	float f3
PREINIT:
	void *(*func)(int, short, float, float);
CODE:
	func   = INT2PTR(void *(*)(int, short, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2, f3);
OUTPUT:
	RETVAL

void
nci_visff( c_func, i0, s1, f2, f3 )
	SV* c_func
	int i0
	short s1
	float f2
	float f3
PREINIT:
	void(*func)(int, short, float, float);
CODE:
	func   = INT2PTR(void(*)(int, short, float, float), SvIV(c_func) );
	(*func)(i0, s1, f2, f3);

double
nci_disff( c_func, i0, s1, f2, f3 )
	SV* c_func
	int i0
	short s1
	float f2
	float f3
PREINIT:
	double(*func)(int, short, float, float);
CODE:
	func   = INT2PTR(double(*)(int, short, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2, f3);
OUTPUT:
	RETVAL

short
nci_sisff( c_func, i0, s1, f2, f3 )
	SV* c_func
	int i0
	short s1
	float f2
	float f3
PREINIT:
	short(*func)(int, short, float, float);
CODE:
	func   = INT2PTR(short(*)(int, short, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2, f3);
OUTPUT:
	RETVAL

float
nci_fisff( c_func, i0, s1, f2, f3 )
	SV* c_func
	int i0
	short s1
	float f2
	float f3
PREINIT:
	float(*func)(int, short, float, float);
CODE:
	func   = INT2PTR(float(*)(int, short, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2, f3);
OUTPUT:
	RETVAL

char *
nci_tisff( c_func, i0, s1, f2, f3 )
	SV* c_func
	int i0
	short s1
	float f2
	float f3
PREINIT:
	char *(*func)(int, short, float, float);
CODE:
	func   = INT2PTR(char *(*)(int, short, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2, f3);
OUTPUT:
	RETVAL

int
nci_iisff( c_func, i0, s1, f2, f3 )
	SV* c_func
	int i0
	short s1
	float f2
	float f3
PREINIT:
	int(*func)(int, short, float, float);
CODE:
	func   = INT2PTR(int(*)(int, short, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2, f3);
OUTPUT:
	RETVAL

void *
nci_ppfff( c_func, p0, f1, f2, f3 )
	SV* c_func
	void * p0
	float f1
	float f2
	float f3
PREINIT:
	void *(*func)(void *, float, float, float);
CODE:
	func   = INT2PTR(void *(*)(void *, float, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2, f3);
OUTPUT:
	RETVAL

void
nci_vpfff( c_func, p0, f1, f2, f3 )
	SV* c_func
	void * p0
	float f1
	float f2
	float f3
PREINIT:
	void(*func)(void *, float, float, float);
CODE:
	func   = INT2PTR(void(*)(void *, float, float, float), SvIV(c_func) );
	(*func)(p0, f1, f2, f3);

double
nci_dpfff( c_func, p0, f1, f2, f3 )
	SV* c_func
	void * p0
	float f1
	float f2
	float f3
PREINIT:
	double(*func)(void *, float, float, float);
CODE:
	func   = INT2PTR(double(*)(void *, float, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2, f3);
OUTPUT:
	RETVAL

short
nci_spfff( c_func, p0, f1, f2, f3 )
	SV* c_func
	void * p0
	float f1
	float f2
	float f3
PREINIT:
	short(*func)(void *, float, float, float);
CODE:
	func   = INT2PTR(short(*)(void *, float, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2, f3);
OUTPUT:
	RETVAL

float
nci_fpfff( c_func, p0, f1, f2, f3 )
	SV* c_func
	void * p0
	float f1
	float f2
	float f3
PREINIT:
	float(*func)(void *, float, float, float);
CODE:
	func   = INT2PTR(float(*)(void *, float, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2, f3);
OUTPUT:
	RETVAL

char *
nci_tpfff( c_func, p0, f1, f2, f3 )
	SV* c_func
	void * p0
	float f1
	float f2
	float f3
PREINIT:
	char *(*func)(void *, float, float, float);
CODE:
	func   = INT2PTR(char *(*)(void *, float, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2, f3);
OUTPUT:
	RETVAL

int
nci_ipfff( c_func, p0, f1, f2, f3 )
	SV* c_func
	void * p0
	float f1
	float f2
	float f3
PREINIT:
	int(*func)(void *, float, float, float);
CODE:
	func   = INT2PTR(int(*)(void *, float, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2, f3);
OUTPUT:
	RETVAL

void *
nci_pvfff( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvfff( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvfff( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svfff( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvfff( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvfff( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivfff( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdfff( c_func, d0, f1, f2, f3 )
	SV* c_func
	double d0
	float f1
	float f2
	float f3
PREINIT:
	void *(*func)(double, float, float, float);
CODE:
	func   = INT2PTR(void *(*)(double, float, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2, f3);
OUTPUT:
	RETVAL

void
nci_vdfff( c_func, d0, f1, f2, f3 )
	SV* c_func
	double d0
	float f1
	float f2
	float f3
PREINIT:
	void(*func)(double, float, float, float);
CODE:
	func   = INT2PTR(void(*)(double, float, float, float), SvIV(c_func) );
	(*func)(d0, f1, f2, f3);

double
nci_ddfff( c_func, d0, f1, f2, f3 )
	SV* c_func
	double d0
	float f1
	float f2
	float f3
PREINIT:
	double(*func)(double, float, float, float);
CODE:
	func   = INT2PTR(double(*)(double, float, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2, f3);
OUTPUT:
	RETVAL

short
nci_sdfff( c_func, d0, f1, f2, f3 )
	SV* c_func
	double d0
	float f1
	float f2
	float f3
PREINIT:
	short(*func)(double, float, float, float);
CODE:
	func   = INT2PTR(short(*)(double, float, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2, f3);
OUTPUT:
	RETVAL

float
nci_fdfff( c_func, d0, f1, f2, f3 )
	SV* c_func
	double d0
	float f1
	float f2
	float f3
PREINIT:
	float(*func)(double, float, float, float);
CODE:
	func   = INT2PTR(float(*)(double, float, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2, f3);
OUTPUT:
	RETVAL

char *
nci_tdfff( c_func, d0, f1, f2, f3 )
	SV* c_func
	double d0
	float f1
	float f2
	float f3
PREINIT:
	char *(*func)(double, float, float, float);
CODE:
	func   = INT2PTR(char *(*)(double, float, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2, f3);
OUTPUT:
	RETVAL

int
nci_idfff( c_func, d0, f1, f2, f3 )
	SV* c_func
	double d0
	float f1
	float f2
	float f3
PREINIT:
	int(*func)(double, float, float, float);
CODE:
	func   = INT2PTR(int(*)(double, float, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2, f3);
OUTPUT:
	RETVAL

void *
nci_psfff( c_func, s0, f1, f2, f3 )
	SV* c_func
	short s0
	float f1
	float f2
	float f3
PREINIT:
	void *(*func)(short, float, float, float);
CODE:
	func   = INT2PTR(void *(*)(short, float, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2, f3);
OUTPUT:
	RETVAL

void
nci_vsfff( c_func, s0, f1, f2, f3 )
	SV* c_func
	short s0
	float f1
	float f2
	float f3
PREINIT:
	void(*func)(short, float, float, float);
CODE:
	func   = INT2PTR(void(*)(short, float, float, float), SvIV(c_func) );
	(*func)(s0, f1, f2, f3);

double
nci_dsfff( c_func, s0, f1, f2, f3 )
	SV* c_func
	short s0
	float f1
	float f2
	float f3
PREINIT:
	double(*func)(short, float, float, float);
CODE:
	func   = INT2PTR(double(*)(short, float, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2, f3);
OUTPUT:
	RETVAL

short
nci_ssfff( c_func, s0, f1, f2, f3 )
	SV* c_func
	short s0
	float f1
	float f2
	float f3
PREINIT:
	short(*func)(short, float, float, float);
CODE:
	func   = INT2PTR(short(*)(short, float, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2, f3);
OUTPUT:
	RETVAL

float
nci_fsfff( c_func, s0, f1, f2, f3 )
	SV* c_func
	short s0
	float f1
	float f2
	float f3
PREINIT:
	float(*func)(short, float, float, float);
CODE:
	func   = INT2PTR(float(*)(short, float, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2, f3);
OUTPUT:
	RETVAL

char *
nci_tsfff( c_func, s0, f1, f2, f3 )
	SV* c_func
	short s0
	float f1
	float f2
	float f3
PREINIT:
	char *(*func)(short, float, float, float);
CODE:
	func   = INT2PTR(char *(*)(short, float, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2, f3);
OUTPUT:
	RETVAL

int
nci_isfff( c_func, s0, f1, f2, f3 )
	SV* c_func
	short s0
	float f1
	float f2
	float f3
PREINIT:
	int(*func)(short, float, float, float);
CODE:
	func   = INT2PTR(int(*)(short, float, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2, f3);
OUTPUT:
	RETVAL

void *
nci_pffff( c_func, f0, f1, f2, f3 )
	SV* c_func
	float f0
	float f1
	float f2
	float f3
PREINIT:
	void *(*func)(float, float, float, float);
CODE:
	func   = INT2PTR(void *(*)(float, float, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2, f3);
OUTPUT:
	RETVAL

void
nci_vffff( c_func, f0, f1, f2, f3 )
	SV* c_func
	float f0
	float f1
	float f2
	float f3
PREINIT:
	void(*func)(float, float, float, float);
CODE:
	func   = INT2PTR(void(*)(float, float, float, float), SvIV(c_func) );
	(*func)(f0, f1, f2, f3);

double
nci_dffff( c_func, f0, f1, f2, f3 )
	SV* c_func
	float f0
	float f1
	float f2
	float f3
PREINIT:
	double(*func)(float, float, float, float);
CODE:
	func   = INT2PTR(double(*)(float, float, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2, f3);
OUTPUT:
	RETVAL

short
nci_sffff( c_func, f0, f1, f2, f3 )
	SV* c_func
	float f0
	float f1
	float f2
	float f3
PREINIT:
	short(*func)(float, float, float, float);
CODE:
	func   = INT2PTR(short(*)(float, float, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2, f3);
OUTPUT:
	RETVAL

float
nci_fffff( c_func, f0, f1, f2, f3 )
	SV* c_func
	float f0
	float f1
	float f2
	float f3
PREINIT:
	float(*func)(float, float, float, float);
CODE:
	func   = INT2PTR(float(*)(float, float, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2, f3);
OUTPUT:
	RETVAL

char *
nci_tffff( c_func, f0, f1, f2, f3 )
	SV* c_func
	float f0
	float f1
	float f2
	float f3
PREINIT:
	char *(*func)(float, float, float, float);
CODE:
	func   = INT2PTR(char *(*)(float, float, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2, f3);
OUTPUT:
	RETVAL

int
nci_iffff( c_func, f0, f1, f2, f3 )
	SV* c_func
	float f0
	float f1
	float f2
	float f3
PREINIT:
	int(*func)(float, float, float, float);
CODE:
	func   = INT2PTR(int(*)(float, float, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2, f3);
OUTPUT:
	RETVAL

void *
nci_ptfff( c_func, t0, f1, f2, f3 )
	SV* c_func
	char * t0
	float f1
	float f2
	float f3
PREINIT:
	void *(*func)(char *, float, float, float);
CODE:
	func   = INT2PTR(void *(*)(char *, float, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2, f3);
OUTPUT:
	RETVAL

void
nci_vtfff( c_func, t0, f1, f2, f3 )
	SV* c_func
	char * t0
	float f1
	float f2
	float f3
PREINIT:
	void(*func)(char *, float, float, float);
CODE:
	func   = INT2PTR(void(*)(char *, float, float, float), SvIV(c_func) );
	(*func)(t0, f1, f2, f3);

double
nci_dtfff( c_func, t0, f1, f2, f3 )
	SV* c_func
	char * t0
	float f1
	float f2
	float f3
PREINIT:
	double(*func)(char *, float, float, float);
CODE:
	func   = INT2PTR(double(*)(char *, float, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2, f3);
OUTPUT:
	RETVAL

short
nci_stfff( c_func, t0, f1, f2, f3 )
	SV* c_func
	char * t0
	float f1
	float f2
	float f3
PREINIT:
	short(*func)(char *, float, float, float);
CODE:
	func   = INT2PTR(short(*)(char *, float, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2, f3);
OUTPUT:
	RETVAL

float
nci_ftfff( c_func, t0, f1, f2, f3 )
	SV* c_func
	char * t0
	float f1
	float f2
	float f3
PREINIT:
	float(*func)(char *, float, float, float);
CODE:
	func   = INT2PTR(float(*)(char *, float, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2, f3);
OUTPUT:
	RETVAL

char *
nci_ttfff( c_func, t0, f1, f2, f3 )
	SV* c_func
	char * t0
	float f1
	float f2
	float f3
PREINIT:
	char *(*func)(char *, float, float, float);
CODE:
	func   = INT2PTR(char *(*)(char *, float, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2, f3);
OUTPUT:
	RETVAL

int
nci_itfff( c_func, t0, f1, f2, f3 )
	SV* c_func
	char * t0
	float f1
	float f2
	float f3
PREINIT:
	int(*func)(char *, float, float, float);
CODE:
	func   = INT2PTR(int(*)(char *, float, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2, f3);
OUTPUT:
	RETVAL

void *
nci_pifff( c_func, i0, f1, f2, f3 )
	SV* c_func
	int i0
	float f1
	float f2
	float f3
PREINIT:
	void *(*func)(int, float, float, float);
CODE:
	func   = INT2PTR(void *(*)(int, float, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2, f3);
OUTPUT:
	RETVAL

void
nci_vifff( c_func, i0, f1, f2, f3 )
	SV* c_func
	int i0
	float f1
	float f2
	float f3
PREINIT:
	void(*func)(int, float, float, float);
CODE:
	func   = INT2PTR(void(*)(int, float, float, float), SvIV(c_func) );
	(*func)(i0, f1, f2, f3);

double
nci_difff( c_func, i0, f1, f2, f3 )
	SV* c_func
	int i0
	float f1
	float f2
	float f3
PREINIT:
	double(*func)(int, float, float, float);
CODE:
	func   = INT2PTR(double(*)(int, float, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2, f3);
OUTPUT:
	RETVAL

short
nci_sifff( c_func, i0, f1, f2, f3 )
	SV* c_func
	int i0
	float f1
	float f2
	float f3
PREINIT:
	short(*func)(int, float, float, float);
CODE:
	func   = INT2PTR(short(*)(int, float, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2, f3);
OUTPUT:
	RETVAL

float
nci_fifff( c_func, i0, f1, f2, f3 )
	SV* c_func
	int i0
	float f1
	float f2
	float f3
PREINIT:
	float(*func)(int, float, float, float);
CODE:
	func   = INT2PTR(float(*)(int, float, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2, f3);
OUTPUT:
	RETVAL

char *
nci_tifff( c_func, i0, f1, f2, f3 )
	SV* c_func
	int i0
	float f1
	float f2
	float f3
PREINIT:
	char *(*func)(int, float, float, float);
CODE:
	func   = INT2PTR(char *(*)(int, float, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2, f3);
OUTPUT:
	RETVAL

int
nci_iifff( c_func, i0, f1, f2, f3 )
	SV* c_func
	int i0
	float f1
	float f2
	float f3
PREINIT:
	int(*func)(int, float, float, float);
CODE:
	func   = INT2PTR(int(*)(int, float, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2, f3);
OUTPUT:
	RETVAL

void *
nci_pptff( c_func, p0, t1, f2, f3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	float f3
PREINIT:
	void *(*func)(void *, char *, float, float);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2, f3);
OUTPUT:
	RETVAL

void
nci_vptff( c_func, p0, t1, f2, f3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	float f3
PREINIT:
	void(*func)(void *, char *, float, float);
CODE:
	func   = INT2PTR(void(*)(void *, char *, float, float), SvIV(c_func) );
	(*func)(p0, t1, f2, f3);

double
nci_dptff( c_func, p0, t1, f2, f3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	float f3
PREINIT:
	double(*func)(void *, char *, float, float);
CODE:
	func   = INT2PTR(double(*)(void *, char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2, f3);
OUTPUT:
	RETVAL

short
nci_sptff( c_func, p0, t1, f2, f3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	float f3
PREINIT:
	short(*func)(void *, char *, float, float);
CODE:
	func   = INT2PTR(short(*)(void *, char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2, f3);
OUTPUT:
	RETVAL

float
nci_fptff( c_func, p0, t1, f2, f3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	float f3
PREINIT:
	float(*func)(void *, char *, float, float);
CODE:
	func   = INT2PTR(float(*)(void *, char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2, f3);
OUTPUT:
	RETVAL

char *
nci_tptff( c_func, p0, t1, f2, f3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	float f3
PREINIT:
	char *(*func)(void *, char *, float, float);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2, f3);
OUTPUT:
	RETVAL

int
nci_iptff( c_func, p0, t1, f2, f3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	float f3
PREINIT:
	int(*func)(void *, char *, float, float);
CODE:
	func   = INT2PTR(int(*)(void *, char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2, f3);
OUTPUT:
	RETVAL

void *
nci_pvtff( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvtff( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvtff( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svtff( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvtff( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvtff( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivtff( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdtff( c_func, d0, t1, f2, f3 )
	SV* c_func
	double d0
	char * t1
	float f2
	float f3
PREINIT:
	void *(*func)(double, char *, float, float);
CODE:
	func   = INT2PTR(void *(*)(double, char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2, f3);
OUTPUT:
	RETVAL

void
nci_vdtff( c_func, d0, t1, f2, f3 )
	SV* c_func
	double d0
	char * t1
	float f2
	float f3
PREINIT:
	void(*func)(double, char *, float, float);
CODE:
	func   = INT2PTR(void(*)(double, char *, float, float), SvIV(c_func) );
	(*func)(d0, t1, f2, f3);

double
nci_ddtff( c_func, d0, t1, f2, f3 )
	SV* c_func
	double d0
	char * t1
	float f2
	float f3
PREINIT:
	double(*func)(double, char *, float, float);
CODE:
	func   = INT2PTR(double(*)(double, char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2, f3);
OUTPUT:
	RETVAL

short
nci_sdtff( c_func, d0, t1, f2, f3 )
	SV* c_func
	double d0
	char * t1
	float f2
	float f3
PREINIT:
	short(*func)(double, char *, float, float);
CODE:
	func   = INT2PTR(short(*)(double, char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2, f3);
OUTPUT:
	RETVAL

float
nci_fdtff( c_func, d0, t1, f2, f3 )
	SV* c_func
	double d0
	char * t1
	float f2
	float f3
PREINIT:
	float(*func)(double, char *, float, float);
CODE:
	func   = INT2PTR(float(*)(double, char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2, f3);
OUTPUT:
	RETVAL

char *
nci_tdtff( c_func, d0, t1, f2, f3 )
	SV* c_func
	double d0
	char * t1
	float f2
	float f3
PREINIT:
	char *(*func)(double, char *, float, float);
CODE:
	func   = INT2PTR(char *(*)(double, char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2, f3);
OUTPUT:
	RETVAL

int
nci_idtff( c_func, d0, t1, f2, f3 )
	SV* c_func
	double d0
	char * t1
	float f2
	float f3
PREINIT:
	int(*func)(double, char *, float, float);
CODE:
	func   = INT2PTR(int(*)(double, char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2, f3);
OUTPUT:
	RETVAL

void *
nci_pstff( c_func, s0, t1, f2, f3 )
	SV* c_func
	short s0
	char * t1
	float f2
	float f3
PREINIT:
	void *(*func)(short, char *, float, float);
CODE:
	func   = INT2PTR(void *(*)(short, char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2, f3);
OUTPUT:
	RETVAL

void
nci_vstff( c_func, s0, t1, f2, f3 )
	SV* c_func
	short s0
	char * t1
	float f2
	float f3
PREINIT:
	void(*func)(short, char *, float, float);
CODE:
	func   = INT2PTR(void(*)(short, char *, float, float), SvIV(c_func) );
	(*func)(s0, t1, f2, f3);

double
nci_dstff( c_func, s0, t1, f2, f3 )
	SV* c_func
	short s0
	char * t1
	float f2
	float f3
PREINIT:
	double(*func)(short, char *, float, float);
CODE:
	func   = INT2PTR(double(*)(short, char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2, f3);
OUTPUT:
	RETVAL

short
nci_sstff( c_func, s0, t1, f2, f3 )
	SV* c_func
	short s0
	char * t1
	float f2
	float f3
PREINIT:
	short(*func)(short, char *, float, float);
CODE:
	func   = INT2PTR(short(*)(short, char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2, f3);
OUTPUT:
	RETVAL

float
nci_fstff( c_func, s0, t1, f2, f3 )
	SV* c_func
	short s0
	char * t1
	float f2
	float f3
PREINIT:
	float(*func)(short, char *, float, float);
CODE:
	func   = INT2PTR(float(*)(short, char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2, f3);
OUTPUT:
	RETVAL

char *
nci_tstff( c_func, s0, t1, f2, f3 )
	SV* c_func
	short s0
	char * t1
	float f2
	float f3
PREINIT:
	char *(*func)(short, char *, float, float);
CODE:
	func   = INT2PTR(char *(*)(short, char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2, f3);
OUTPUT:
	RETVAL

int
nci_istff( c_func, s0, t1, f2, f3 )
	SV* c_func
	short s0
	char * t1
	float f2
	float f3
PREINIT:
	int(*func)(short, char *, float, float);
CODE:
	func   = INT2PTR(int(*)(short, char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2, f3);
OUTPUT:
	RETVAL

void *
nci_pftff( c_func, f0, t1, f2, f3 )
	SV* c_func
	float f0
	char * t1
	float f2
	float f3
PREINIT:
	void *(*func)(float, char *, float, float);
CODE:
	func   = INT2PTR(void *(*)(float, char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2, f3);
OUTPUT:
	RETVAL

void
nci_vftff( c_func, f0, t1, f2, f3 )
	SV* c_func
	float f0
	char * t1
	float f2
	float f3
PREINIT:
	void(*func)(float, char *, float, float);
CODE:
	func   = INT2PTR(void(*)(float, char *, float, float), SvIV(c_func) );
	(*func)(f0, t1, f2, f3);

double
nci_dftff( c_func, f0, t1, f2, f3 )
	SV* c_func
	float f0
	char * t1
	float f2
	float f3
PREINIT:
	double(*func)(float, char *, float, float);
CODE:
	func   = INT2PTR(double(*)(float, char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2, f3);
OUTPUT:
	RETVAL

short
nci_sftff( c_func, f0, t1, f2, f3 )
	SV* c_func
	float f0
	char * t1
	float f2
	float f3
PREINIT:
	short(*func)(float, char *, float, float);
CODE:
	func   = INT2PTR(short(*)(float, char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2, f3);
OUTPUT:
	RETVAL

float
nci_fftff( c_func, f0, t1, f2, f3 )
	SV* c_func
	float f0
	char * t1
	float f2
	float f3
PREINIT:
	float(*func)(float, char *, float, float);
CODE:
	func   = INT2PTR(float(*)(float, char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2, f3);
OUTPUT:
	RETVAL

char *
nci_tftff( c_func, f0, t1, f2, f3 )
	SV* c_func
	float f0
	char * t1
	float f2
	float f3
PREINIT:
	char *(*func)(float, char *, float, float);
CODE:
	func   = INT2PTR(char *(*)(float, char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2, f3);
OUTPUT:
	RETVAL

int
nci_iftff( c_func, f0, t1, f2, f3 )
	SV* c_func
	float f0
	char * t1
	float f2
	float f3
PREINIT:
	int(*func)(float, char *, float, float);
CODE:
	func   = INT2PTR(int(*)(float, char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2, f3);
OUTPUT:
	RETVAL

void *
nci_pttff( c_func, t0, t1, f2, f3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	float f3
PREINIT:
	void *(*func)(char *, char *, float, float);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2, f3);
OUTPUT:
	RETVAL

void
nci_vttff( c_func, t0, t1, f2, f3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	float f3
PREINIT:
	void(*func)(char *, char *, float, float);
CODE:
	func   = INT2PTR(void(*)(char *, char *, float, float), SvIV(c_func) );
	(*func)(t0, t1, f2, f3);

double
nci_dttff( c_func, t0, t1, f2, f3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	float f3
PREINIT:
	double(*func)(char *, char *, float, float);
CODE:
	func   = INT2PTR(double(*)(char *, char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2, f3);
OUTPUT:
	RETVAL

short
nci_sttff( c_func, t0, t1, f2, f3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	float f3
PREINIT:
	short(*func)(char *, char *, float, float);
CODE:
	func   = INT2PTR(short(*)(char *, char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2, f3);
OUTPUT:
	RETVAL

float
nci_fttff( c_func, t0, t1, f2, f3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	float f3
PREINIT:
	float(*func)(char *, char *, float, float);
CODE:
	func   = INT2PTR(float(*)(char *, char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2, f3);
OUTPUT:
	RETVAL

char *
nci_tttff( c_func, t0, t1, f2, f3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	float f3
PREINIT:
	char *(*func)(char *, char *, float, float);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2, f3);
OUTPUT:
	RETVAL

int
nci_ittff( c_func, t0, t1, f2, f3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	float f3
PREINIT:
	int(*func)(char *, char *, float, float);
CODE:
	func   = INT2PTR(int(*)(char *, char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2, f3);
OUTPUT:
	RETVAL

void *
nci_pitff( c_func, i0, t1, f2, f3 )
	SV* c_func
	int i0
	char * t1
	float f2
	float f3
PREINIT:
	void *(*func)(int, char *, float, float);
CODE:
	func   = INT2PTR(void *(*)(int, char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2, f3);
OUTPUT:
	RETVAL

void
nci_vitff( c_func, i0, t1, f2, f3 )
	SV* c_func
	int i0
	char * t1
	float f2
	float f3
PREINIT:
	void(*func)(int, char *, float, float);
CODE:
	func   = INT2PTR(void(*)(int, char *, float, float), SvIV(c_func) );
	(*func)(i0, t1, f2, f3);

double
nci_ditff( c_func, i0, t1, f2, f3 )
	SV* c_func
	int i0
	char * t1
	float f2
	float f3
PREINIT:
	double(*func)(int, char *, float, float);
CODE:
	func   = INT2PTR(double(*)(int, char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2, f3);
OUTPUT:
	RETVAL

short
nci_sitff( c_func, i0, t1, f2, f3 )
	SV* c_func
	int i0
	char * t1
	float f2
	float f3
PREINIT:
	short(*func)(int, char *, float, float);
CODE:
	func   = INT2PTR(short(*)(int, char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2, f3);
OUTPUT:
	RETVAL

float
nci_fitff( c_func, i0, t1, f2, f3 )
	SV* c_func
	int i0
	char * t1
	float f2
	float f3
PREINIT:
	float(*func)(int, char *, float, float);
CODE:
	func   = INT2PTR(float(*)(int, char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2, f3);
OUTPUT:
	RETVAL

char *
nci_titff( c_func, i0, t1, f2, f3 )
	SV* c_func
	int i0
	char * t1
	float f2
	float f3
PREINIT:
	char *(*func)(int, char *, float, float);
CODE:
	func   = INT2PTR(char *(*)(int, char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2, f3);
OUTPUT:
	RETVAL

int
nci_iitff( c_func, i0, t1, f2, f3 )
	SV* c_func
	int i0
	char * t1
	float f2
	float f3
PREINIT:
	int(*func)(int, char *, float, float);
CODE:
	func   = INT2PTR(int(*)(int, char *, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2, f3);
OUTPUT:
	RETVAL

void *
nci_ppiff( c_func, p0, i1, f2, f3 )
	SV* c_func
	void * p0
	int i1
	float f2
	float f3
PREINIT:
	void *(*func)(void *, int, float, float);
CODE:
	func   = INT2PTR(void *(*)(void *, int, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2, f3);
OUTPUT:
	RETVAL

void
nci_vpiff( c_func, p0, i1, f2, f3 )
	SV* c_func
	void * p0
	int i1
	float f2
	float f3
PREINIT:
	void(*func)(void *, int, float, float);
CODE:
	func   = INT2PTR(void(*)(void *, int, float, float), SvIV(c_func) );
	(*func)(p0, i1, f2, f3);

double
nci_dpiff( c_func, p0, i1, f2, f3 )
	SV* c_func
	void * p0
	int i1
	float f2
	float f3
PREINIT:
	double(*func)(void *, int, float, float);
CODE:
	func   = INT2PTR(double(*)(void *, int, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2, f3);
OUTPUT:
	RETVAL

short
nci_spiff( c_func, p0, i1, f2, f3 )
	SV* c_func
	void * p0
	int i1
	float f2
	float f3
PREINIT:
	short(*func)(void *, int, float, float);
CODE:
	func   = INT2PTR(short(*)(void *, int, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2, f3);
OUTPUT:
	RETVAL

float
nci_fpiff( c_func, p0, i1, f2, f3 )
	SV* c_func
	void * p0
	int i1
	float f2
	float f3
PREINIT:
	float(*func)(void *, int, float, float);
CODE:
	func   = INT2PTR(float(*)(void *, int, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2, f3);
OUTPUT:
	RETVAL

char *
nci_tpiff( c_func, p0, i1, f2, f3 )
	SV* c_func
	void * p0
	int i1
	float f2
	float f3
PREINIT:
	char *(*func)(void *, int, float, float);
CODE:
	func   = INT2PTR(char *(*)(void *, int, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2, f3);
OUTPUT:
	RETVAL

int
nci_ipiff( c_func, p0, i1, f2, f3 )
	SV* c_func
	void * p0
	int i1
	float f2
	float f3
PREINIT:
	int(*func)(void *, int, float, float);
CODE:
	func   = INT2PTR(int(*)(void *, int, float, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2, f3);
OUTPUT:
	RETVAL

void *
nci_pviff( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vviff( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dviff( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_sviff( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fviff( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tviff( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_iviff( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdiff( c_func, d0, i1, f2, f3 )
	SV* c_func
	double d0
	int i1
	float f2
	float f3
PREINIT:
	void *(*func)(double, int, float, float);
CODE:
	func   = INT2PTR(void *(*)(double, int, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2, f3);
OUTPUT:
	RETVAL

void
nci_vdiff( c_func, d0, i1, f2, f3 )
	SV* c_func
	double d0
	int i1
	float f2
	float f3
PREINIT:
	void(*func)(double, int, float, float);
CODE:
	func   = INT2PTR(void(*)(double, int, float, float), SvIV(c_func) );
	(*func)(d0, i1, f2, f3);

double
nci_ddiff( c_func, d0, i1, f2, f3 )
	SV* c_func
	double d0
	int i1
	float f2
	float f3
PREINIT:
	double(*func)(double, int, float, float);
CODE:
	func   = INT2PTR(double(*)(double, int, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2, f3);
OUTPUT:
	RETVAL

short
nci_sdiff( c_func, d0, i1, f2, f3 )
	SV* c_func
	double d0
	int i1
	float f2
	float f3
PREINIT:
	short(*func)(double, int, float, float);
CODE:
	func   = INT2PTR(short(*)(double, int, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2, f3);
OUTPUT:
	RETVAL

float
nci_fdiff( c_func, d0, i1, f2, f3 )
	SV* c_func
	double d0
	int i1
	float f2
	float f3
PREINIT:
	float(*func)(double, int, float, float);
CODE:
	func   = INT2PTR(float(*)(double, int, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2, f3);
OUTPUT:
	RETVAL

char *
nci_tdiff( c_func, d0, i1, f2, f3 )
	SV* c_func
	double d0
	int i1
	float f2
	float f3
PREINIT:
	char *(*func)(double, int, float, float);
CODE:
	func   = INT2PTR(char *(*)(double, int, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2, f3);
OUTPUT:
	RETVAL

int
nci_idiff( c_func, d0, i1, f2, f3 )
	SV* c_func
	double d0
	int i1
	float f2
	float f3
PREINIT:
	int(*func)(double, int, float, float);
CODE:
	func   = INT2PTR(int(*)(double, int, float, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2, f3);
OUTPUT:
	RETVAL

void *
nci_psiff( c_func, s0, i1, f2, f3 )
	SV* c_func
	short s0
	int i1
	float f2
	float f3
PREINIT:
	void *(*func)(short, int, float, float);
CODE:
	func   = INT2PTR(void *(*)(short, int, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2, f3);
OUTPUT:
	RETVAL

void
nci_vsiff( c_func, s0, i1, f2, f3 )
	SV* c_func
	short s0
	int i1
	float f2
	float f3
PREINIT:
	void(*func)(short, int, float, float);
CODE:
	func   = INT2PTR(void(*)(short, int, float, float), SvIV(c_func) );
	(*func)(s0, i1, f2, f3);

double
nci_dsiff( c_func, s0, i1, f2, f3 )
	SV* c_func
	short s0
	int i1
	float f2
	float f3
PREINIT:
	double(*func)(short, int, float, float);
CODE:
	func   = INT2PTR(double(*)(short, int, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2, f3);
OUTPUT:
	RETVAL

short
nci_ssiff( c_func, s0, i1, f2, f3 )
	SV* c_func
	short s0
	int i1
	float f2
	float f3
PREINIT:
	short(*func)(short, int, float, float);
CODE:
	func   = INT2PTR(short(*)(short, int, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2, f3);
OUTPUT:
	RETVAL

float
nci_fsiff( c_func, s0, i1, f2, f3 )
	SV* c_func
	short s0
	int i1
	float f2
	float f3
PREINIT:
	float(*func)(short, int, float, float);
CODE:
	func   = INT2PTR(float(*)(short, int, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2, f3);
OUTPUT:
	RETVAL

char *
nci_tsiff( c_func, s0, i1, f2, f3 )
	SV* c_func
	short s0
	int i1
	float f2
	float f3
PREINIT:
	char *(*func)(short, int, float, float);
CODE:
	func   = INT2PTR(char *(*)(short, int, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2, f3);
OUTPUT:
	RETVAL

int
nci_isiff( c_func, s0, i1, f2, f3 )
	SV* c_func
	short s0
	int i1
	float f2
	float f3
PREINIT:
	int(*func)(short, int, float, float);
CODE:
	func   = INT2PTR(int(*)(short, int, float, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2, f3);
OUTPUT:
	RETVAL

void *
nci_pfiff( c_func, f0, i1, f2, f3 )
	SV* c_func
	float f0
	int i1
	float f2
	float f3
PREINIT:
	void *(*func)(float, int, float, float);
CODE:
	func   = INT2PTR(void *(*)(float, int, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2, f3);
OUTPUT:
	RETVAL

void
nci_vfiff( c_func, f0, i1, f2, f3 )
	SV* c_func
	float f0
	int i1
	float f2
	float f3
PREINIT:
	void(*func)(float, int, float, float);
CODE:
	func   = INT2PTR(void(*)(float, int, float, float), SvIV(c_func) );
	(*func)(f0, i1, f2, f3);

double
nci_dfiff( c_func, f0, i1, f2, f3 )
	SV* c_func
	float f0
	int i1
	float f2
	float f3
PREINIT:
	double(*func)(float, int, float, float);
CODE:
	func   = INT2PTR(double(*)(float, int, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2, f3);
OUTPUT:
	RETVAL

short
nci_sfiff( c_func, f0, i1, f2, f3 )
	SV* c_func
	float f0
	int i1
	float f2
	float f3
PREINIT:
	short(*func)(float, int, float, float);
CODE:
	func   = INT2PTR(short(*)(float, int, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2, f3);
OUTPUT:
	RETVAL

float
nci_ffiff( c_func, f0, i1, f2, f3 )
	SV* c_func
	float f0
	int i1
	float f2
	float f3
PREINIT:
	float(*func)(float, int, float, float);
CODE:
	func   = INT2PTR(float(*)(float, int, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2, f3);
OUTPUT:
	RETVAL

char *
nci_tfiff( c_func, f0, i1, f2, f3 )
	SV* c_func
	float f0
	int i1
	float f2
	float f3
PREINIT:
	char *(*func)(float, int, float, float);
CODE:
	func   = INT2PTR(char *(*)(float, int, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2, f3);
OUTPUT:
	RETVAL

int
nci_ififf( c_func, f0, i1, f2, f3 )
	SV* c_func
	float f0
	int i1
	float f2
	float f3
PREINIT:
	int(*func)(float, int, float, float);
CODE:
	func   = INT2PTR(int(*)(float, int, float, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2, f3);
OUTPUT:
	RETVAL

void *
nci_ptiff( c_func, t0, i1, f2, f3 )
	SV* c_func
	char * t0
	int i1
	float f2
	float f3
PREINIT:
	void *(*func)(char *, int, float, float);
CODE:
	func   = INT2PTR(void *(*)(char *, int, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2, f3);
OUTPUT:
	RETVAL

void
nci_vtiff( c_func, t0, i1, f2, f3 )
	SV* c_func
	char * t0
	int i1
	float f2
	float f3
PREINIT:
	void(*func)(char *, int, float, float);
CODE:
	func   = INT2PTR(void(*)(char *, int, float, float), SvIV(c_func) );
	(*func)(t0, i1, f2, f3);

double
nci_dtiff( c_func, t0, i1, f2, f3 )
	SV* c_func
	char * t0
	int i1
	float f2
	float f3
PREINIT:
	double(*func)(char *, int, float, float);
CODE:
	func   = INT2PTR(double(*)(char *, int, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2, f3);
OUTPUT:
	RETVAL

short
nci_stiff( c_func, t0, i1, f2, f3 )
	SV* c_func
	char * t0
	int i1
	float f2
	float f3
PREINIT:
	short(*func)(char *, int, float, float);
CODE:
	func   = INT2PTR(short(*)(char *, int, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2, f3);
OUTPUT:
	RETVAL

float
nci_ftiff( c_func, t0, i1, f2, f3 )
	SV* c_func
	char * t0
	int i1
	float f2
	float f3
PREINIT:
	float(*func)(char *, int, float, float);
CODE:
	func   = INT2PTR(float(*)(char *, int, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2, f3);
OUTPUT:
	RETVAL

char *
nci_ttiff( c_func, t0, i1, f2, f3 )
	SV* c_func
	char * t0
	int i1
	float f2
	float f3
PREINIT:
	char *(*func)(char *, int, float, float);
CODE:
	func   = INT2PTR(char *(*)(char *, int, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2, f3);
OUTPUT:
	RETVAL

int
nci_itiff( c_func, t0, i1, f2, f3 )
	SV* c_func
	char * t0
	int i1
	float f2
	float f3
PREINIT:
	int(*func)(char *, int, float, float);
CODE:
	func   = INT2PTR(int(*)(char *, int, float, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2, f3);
OUTPUT:
	RETVAL

void *
nci_piiff( c_func, i0, i1, f2, f3 )
	SV* c_func
	int i0
	int i1
	float f2
	float f3
PREINIT:
	void *(*func)(int, int, float, float);
CODE:
	func   = INT2PTR(void *(*)(int, int, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2, f3);
OUTPUT:
	RETVAL

void
nci_viiff( c_func, i0, i1, f2, f3 )
	SV* c_func
	int i0
	int i1
	float f2
	float f3
PREINIT:
	void(*func)(int, int, float, float);
CODE:
	func   = INT2PTR(void(*)(int, int, float, float), SvIV(c_func) );
	(*func)(i0, i1, f2, f3);

double
nci_diiff( c_func, i0, i1, f2, f3 )
	SV* c_func
	int i0
	int i1
	float f2
	float f3
PREINIT:
	double(*func)(int, int, float, float);
CODE:
	func   = INT2PTR(double(*)(int, int, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2, f3);
OUTPUT:
	RETVAL

short
nci_siiff( c_func, i0, i1, f2, f3 )
	SV* c_func
	int i0
	int i1
	float f2
	float f3
PREINIT:
	short(*func)(int, int, float, float);
CODE:
	func   = INT2PTR(short(*)(int, int, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2, f3);
OUTPUT:
	RETVAL

float
nci_fiiff( c_func, i0, i1, f2, f3 )
	SV* c_func
	int i0
	int i1
	float f2
	float f3
PREINIT:
	float(*func)(int, int, float, float);
CODE:
	func   = INT2PTR(float(*)(int, int, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2, f3);
OUTPUT:
	RETVAL

char *
nci_tiiff( c_func, i0, i1, f2, f3 )
	SV* c_func
	int i0
	int i1
	float f2
	float f3
PREINIT:
	char *(*func)(int, int, float, float);
CODE:
	func   = INT2PTR(char *(*)(int, int, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2, f3);
OUTPUT:
	RETVAL

int
nci_iiiff( c_func, i0, i1, f2, f3 )
	SV* c_func
	int i0
	int i1
	float f2
	float f3
PREINIT:
	int(*func)(int, int, float, float);
CODE:
	func   = INT2PTR(int(*)(int, int, float, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2, f3);
OUTPUT:
	RETVAL

void *
nci_ppptf( c_func, p0, p1, t2, f3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	float f3
PREINIT:
	void *(*func)(void *, void *, char *, float);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2, f3);
OUTPUT:
	RETVAL

void
nci_vpptf( c_func, p0, p1, t2, f3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	float f3
PREINIT:
	void(*func)(void *, void *, char *, float);
CODE:
	func   = INT2PTR(void(*)(void *, void *, char *, float), SvIV(c_func) );
	(*func)(p0, p1, t2, f3);

double
nci_dpptf( c_func, p0, p1, t2, f3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	float f3
PREINIT:
	double(*func)(void *, void *, char *, float);
CODE:
	func   = INT2PTR(double(*)(void *, void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2, f3);
OUTPUT:
	RETVAL

short
nci_spptf( c_func, p0, p1, t2, f3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	float f3
PREINIT:
	short(*func)(void *, void *, char *, float);
CODE:
	func   = INT2PTR(short(*)(void *, void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2, f3);
OUTPUT:
	RETVAL

float
nci_fpptf( c_func, p0, p1, t2, f3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	float f3
PREINIT:
	float(*func)(void *, void *, char *, float);
CODE:
	func   = INT2PTR(float(*)(void *, void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2, f3);
OUTPUT:
	RETVAL

char *
nci_tpptf( c_func, p0, p1, t2, f3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	float f3
PREINIT:
	char *(*func)(void *, void *, char *, float);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2, f3);
OUTPUT:
	RETVAL

int
nci_ipptf( c_func, p0, p1, t2, f3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	float f3
PREINIT:
	int(*func)(void *, void *, char *, float);
CODE:
	func   = INT2PTR(int(*)(void *, void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2, f3);
OUTPUT:
	RETVAL

void *
nci_pvptf( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvptf( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvptf( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svptf( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvptf( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvptf( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivptf( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdptf( c_func, d0, p1, t2, f3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	float f3
PREINIT:
	void *(*func)(double, void *, char *, float);
CODE:
	func   = INT2PTR(void *(*)(double, void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2, f3);
OUTPUT:
	RETVAL

void
nci_vdptf( c_func, d0, p1, t2, f3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	float f3
PREINIT:
	void(*func)(double, void *, char *, float);
CODE:
	func   = INT2PTR(void(*)(double, void *, char *, float), SvIV(c_func) );
	(*func)(d0, p1, t2, f3);

double
nci_ddptf( c_func, d0, p1, t2, f3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	float f3
PREINIT:
	double(*func)(double, void *, char *, float);
CODE:
	func   = INT2PTR(double(*)(double, void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2, f3);
OUTPUT:
	RETVAL

short
nci_sdptf( c_func, d0, p1, t2, f3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	float f3
PREINIT:
	short(*func)(double, void *, char *, float);
CODE:
	func   = INT2PTR(short(*)(double, void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2, f3);
OUTPUT:
	RETVAL

float
nci_fdptf( c_func, d0, p1, t2, f3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	float f3
PREINIT:
	float(*func)(double, void *, char *, float);
CODE:
	func   = INT2PTR(float(*)(double, void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2, f3);
OUTPUT:
	RETVAL

char *
nci_tdptf( c_func, d0, p1, t2, f3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	float f3
PREINIT:
	char *(*func)(double, void *, char *, float);
CODE:
	func   = INT2PTR(char *(*)(double, void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2, f3);
OUTPUT:
	RETVAL

int
nci_idptf( c_func, d0, p1, t2, f3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	float f3
PREINIT:
	int(*func)(double, void *, char *, float);
CODE:
	func   = INT2PTR(int(*)(double, void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2, f3);
OUTPUT:
	RETVAL

void *
nci_psptf( c_func, s0, p1, t2, f3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	float f3
PREINIT:
	void *(*func)(short, void *, char *, float);
CODE:
	func   = INT2PTR(void *(*)(short, void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2, f3);
OUTPUT:
	RETVAL

void
nci_vsptf( c_func, s0, p1, t2, f3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	float f3
PREINIT:
	void(*func)(short, void *, char *, float);
CODE:
	func   = INT2PTR(void(*)(short, void *, char *, float), SvIV(c_func) );
	(*func)(s0, p1, t2, f3);

double
nci_dsptf( c_func, s0, p1, t2, f3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	float f3
PREINIT:
	double(*func)(short, void *, char *, float);
CODE:
	func   = INT2PTR(double(*)(short, void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2, f3);
OUTPUT:
	RETVAL

short
nci_ssptf( c_func, s0, p1, t2, f3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	float f3
PREINIT:
	short(*func)(short, void *, char *, float);
CODE:
	func   = INT2PTR(short(*)(short, void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2, f3);
OUTPUT:
	RETVAL

float
nci_fsptf( c_func, s0, p1, t2, f3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	float f3
PREINIT:
	float(*func)(short, void *, char *, float);
CODE:
	func   = INT2PTR(float(*)(short, void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2, f3);
OUTPUT:
	RETVAL

char *
nci_tsptf( c_func, s0, p1, t2, f3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	float f3
PREINIT:
	char *(*func)(short, void *, char *, float);
CODE:
	func   = INT2PTR(char *(*)(short, void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2, f3);
OUTPUT:
	RETVAL

int
nci_isptf( c_func, s0, p1, t2, f3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	float f3
PREINIT:
	int(*func)(short, void *, char *, float);
CODE:
	func   = INT2PTR(int(*)(short, void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2, f3);
OUTPUT:
	RETVAL

void *
nci_pfptf( c_func, f0, p1, t2, f3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	float f3
PREINIT:
	void *(*func)(float, void *, char *, float);
CODE:
	func   = INT2PTR(void *(*)(float, void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2, f3);
OUTPUT:
	RETVAL

void
nci_vfptf( c_func, f0, p1, t2, f3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	float f3
PREINIT:
	void(*func)(float, void *, char *, float);
CODE:
	func   = INT2PTR(void(*)(float, void *, char *, float), SvIV(c_func) );
	(*func)(f0, p1, t2, f3);

double
nci_dfptf( c_func, f0, p1, t2, f3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	float f3
PREINIT:
	double(*func)(float, void *, char *, float);
CODE:
	func   = INT2PTR(double(*)(float, void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2, f3);
OUTPUT:
	RETVAL

short
nci_sfptf( c_func, f0, p1, t2, f3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	float f3
PREINIT:
	short(*func)(float, void *, char *, float);
CODE:
	func   = INT2PTR(short(*)(float, void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2, f3);
OUTPUT:
	RETVAL

float
nci_ffptf( c_func, f0, p1, t2, f3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	float f3
PREINIT:
	float(*func)(float, void *, char *, float);
CODE:
	func   = INT2PTR(float(*)(float, void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2, f3);
OUTPUT:
	RETVAL

char *
nci_tfptf( c_func, f0, p1, t2, f3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	float f3
PREINIT:
	char *(*func)(float, void *, char *, float);
CODE:
	func   = INT2PTR(char *(*)(float, void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2, f3);
OUTPUT:
	RETVAL

int
nci_ifptf( c_func, f0, p1, t2, f3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	float f3
PREINIT:
	int(*func)(float, void *, char *, float);
CODE:
	func   = INT2PTR(int(*)(float, void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2, f3);
OUTPUT:
	RETVAL

void *
nci_ptptf( c_func, t0, p1, t2, f3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	float f3
PREINIT:
	void *(*func)(char *, void *, char *, float);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2, f3);
OUTPUT:
	RETVAL

void
nci_vtptf( c_func, t0, p1, t2, f3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	float f3
PREINIT:
	void(*func)(char *, void *, char *, float);
CODE:
	func   = INT2PTR(void(*)(char *, void *, char *, float), SvIV(c_func) );
	(*func)(t0, p1, t2, f3);

double
nci_dtptf( c_func, t0, p1, t2, f3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	float f3
PREINIT:
	double(*func)(char *, void *, char *, float);
CODE:
	func   = INT2PTR(double(*)(char *, void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2, f3);
OUTPUT:
	RETVAL

short
nci_stptf( c_func, t0, p1, t2, f3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	float f3
PREINIT:
	short(*func)(char *, void *, char *, float);
CODE:
	func   = INT2PTR(short(*)(char *, void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2, f3);
OUTPUT:
	RETVAL

float
nci_ftptf( c_func, t0, p1, t2, f3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	float f3
PREINIT:
	float(*func)(char *, void *, char *, float);
CODE:
	func   = INT2PTR(float(*)(char *, void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2, f3);
OUTPUT:
	RETVAL

char *
nci_ttptf( c_func, t0, p1, t2, f3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	float f3
PREINIT:
	char *(*func)(char *, void *, char *, float);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2, f3);
OUTPUT:
	RETVAL

int
nci_itptf( c_func, t0, p1, t2, f3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	float f3
PREINIT:
	int(*func)(char *, void *, char *, float);
CODE:
	func   = INT2PTR(int(*)(char *, void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2, f3);
OUTPUT:
	RETVAL

void *
nci_piptf( c_func, i0, p1, t2, f3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	float f3
PREINIT:
	void *(*func)(int, void *, char *, float);
CODE:
	func   = INT2PTR(void *(*)(int, void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2, f3);
OUTPUT:
	RETVAL

void
nci_viptf( c_func, i0, p1, t2, f3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	float f3
PREINIT:
	void(*func)(int, void *, char *, float);
CODE:
	func   = INT2PTR(void(*)(int, void *, char *, float), SvIV(c_func) );
	(*func)(i0, p1, t2, f3);

double
nci_diptf( c_func, i0, p1, t2, f3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	float f3
PREINIT:
	double(*func)(int, void *, char *, float);
CODE:
	func   = INT2PTR(double(*)(int, void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2, f3);
OUTPUT:
	RETVAL

short
nci_siptf( c_func, i0, p1, t2, f3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	float f3
PREINIT:
	short(*func)(int, void *, char *, float);
CODE:
	func   = INT2PTR(short(*)(int, void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2, f3);
OUTPUT:
	RETVAL

float
nci_fiptf( c_func, i0, p1, t2, f3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	float f3
PREINIT:
	float(*func)(int, void *, char *, float);
CODE:
	func   = INT2PTR(float(*)(int, void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2, f3);
OUTPUT:
	RETVAL

char *
nci_tiptf( c_func, i0, p1, t2, f3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	float f3
PREINIT:
	char *(*func)(int, void *, char *, float);
CODE:
	func   = INT2PTR(char *(*)(int, void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2, f3);
OUTPUT:
	RETVAL

int
nci_iiptf( c_func, i0, p1, t2, f3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	float f3
PREINIT:
	int(*func)(int, void *, char *, float);
CODE:
	func   = INT2PTR(int(*)(int, void *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2, f3);
OUTPUT:
	RETVAL

void *
nci_ppdtf( c_func, p0, d1, t2, f3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	float f3
PREINIT:
	void *(*func)(void *, double, char *, float);
CODE:
	func   = INT2PTR(void *(*)(void *, double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2, f3);
OUTPUT:
	RETVAL

void
nci_vpdtf( c_func, p0, d1, t2, f3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	float f3
PREINIT:
	void(*func)(void *, double, char *, float);
CODE:
	func   = INT2PTR(void(*)(void *, double, char *, float), SvIV(c_func) );
	(*func)(p0, d1, t2, f3);

double
nci_dpdtf( c_func, p0, d1, t2, f3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	float f3
PREINIT:
	double(*func)(void *, double, char *, float);
CODE:
	func   = INT2PTR(double(*)(void *, double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2, f3);
OUTPUT:
	RETVAL

short
nci_spdtf( c_func, p0, d1, t2, f3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	float f3
PREINIT:
	short(*func)(void *, double, char *, float);
CODE:
	func   = INT2PTR(short(*)(void *, double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2, f3);
OUTPUT:
	RETVAL

float
nci_fpdtf( c_func, p0, d1, t2, f3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	float f3
PREINIT:
	float(*func)(void *, double, char *, float);
CODE:
	func   = INT2PTR(float(*)(void *, double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2, f3);
OUTPUT:
	RETVAL

char *
nci_tpdtf( c_func, p0, d1, t2, f3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	float f3
PREINIT:
	char *(*func)(void *, double, char *, float);
CODE:
	func   = INT2PTR(char *(*)(void *, double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2, f3);
OUTPUT:
	RETVAL

int
nci_ipdtf( c_func, p0, d1, t2, f3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	float f3
PREINIT:
	int(*func)(void *, double, char *, float);
CODE:
	func   = INT2PTR(int(*)(void *, double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2, f3);
OUTPUT:
	RETVAL

void *
nci_pvdtf( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvdtf( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvdtf( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svdtf( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvdtf( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvdtf( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivdtf( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pddtf( c_func, d0, d1, t2, f3 )
	SV* c_func
	double d0
	double d1
	char * t2
	float f3
PREINIT:
	void *(*func)(double, double, char *, float);
CODE:
	func   = INT2PTR(void *(*)(double, double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2, f3);
OUTPUT:
	RETVAL

void
nci_vddtf( c_func, d0, d1, t2, f3 )
	SV* c_func
	double d0
	double d1
	char * t2
	float f3
PREINIT:
	void(*func)(double, double, char *, float);
CODE:
	func   = INT2PTR(void(*)(double, double, char *, float), SvIV(c_func) );
	(*func)(d0, d1, t2, f3);

double
nci_dddtf( c_func, d0, d1, t2, f3 )
	SV* c_func
	double d0
	double d1
	char * t2
	float f3
PREINIT:
	double(*func)(double, double, char *, float);
CODE:
	func   = INT2PTR(double(*)(double, double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2, f3);
OUTPUT:
	RETVAL

short
nci_sddtf( c_func, d0, d1, t2, f3 )
	SV* c_func
	double d0
	double d1
	char * t2
	float f3
PREINIT:
	short(*func)(double, double, char *, float);
CODE:
	func   = INT2PTR(short(*)(double, double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2, f3);
OUTPUT:
	RETVAL

float
nci_fddtf( c_func, d0, d1, t2, f3 )
	SV* c_func
	double d0
	double d1
	char * t2
	float f3
PREINIT:
	float(*func)(double, double, char *, float);
CODE:
	func   = INT2PTR(float(*)(double, double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2, f3);
OUTPUT:
	RETVAL

char *
nci_tddtf( c_func, d0, d1, t2, f3 )
	SV* c_func
	double d0
	double d1
	char * t2
	float f3
PREINIT:
	char *(*func)(double, double, char *, float);
CODE:
	func   = INT2PTR(char *(*)(double, double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2, f3);
OUTPUT:
	RETVAL

int
nci_iddtf( c_func, d0, d1, t2, f3 )
	SV* c_func
	double d0
	double d1
	char * t2
	float f3
PREINIT:
	int(*func)(double, double, char *, float);
CODE:
	func   = INT2PTR(int(*)(double, double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2, f3);
OUTPUT:
	RETVAL

void *
nci_psdtf( c_func, s0, d1, t2, f3 )
	SV* c_func
	short s0
	double d1
	char * t2
	float f3
PREINIT:
	void *(*func)(short, double, char *, float);
CODE:
	func   = INT2PTR(void *(*)(short, double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2, f3);
OUTPUT:
	RETVAL

void
nci_vsdtf( c_func, s0, d1, t2, f3 )
	SV* c_func
	short s0
	double d1
	char * t2
	float f3
PREINIT:
	void(*func)(short, double, char *, float);
CODE:
	func   = INT2PTR(void(*)(short, double, char *, float), SvIV(c_func) );
	(*func)(s0, d1, t2, f3);

double
nci_dsdtf( c_func, s0, d1, t2, f3 )
	SV* c_func
	short s0
	double d1
	char * t2
	float f3
PREINIT:
	double(*func)(short, double, char *, float);
CODE:
	func   = INT2PTR(double(*)(short, double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2, f3);
OUTPUT:
	RETVAL

short
nci_ssdtf( c_func, s0, d1, t2, f3 )
	SV* c_func
	short s0
	double d1
	char * t2
	float f3
PREINIT:
	short(*func)(short, double, char *, float);
CODE:
	func   = INT2PTR(short(*)(short, double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2, f3);
OUTPUT:
	RETVAL

float
nci_fsdtf( c_func, s0, d1, t2, f3 )
	SV* c_func
	short s0
	double d1
	char * t2
	float f3
PREINIT:
	float(*func)(short, double, char *, float);
CODE:
	func   = INT2PTR(float(*)(short, double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2, f3);
OUTPUT:
	RETVAL

char *
nci_tsdtf( c_func, s0, d1, t2, f3 )
	SV* c_func
	short s0
	double d1
	char * t2
	float f3
PREINIT:
	char *(*func)(short, double, char *, float);
CODE:
	func   = INT2PTR(char *(*)(short, double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2, f3);
OUTPUT:
	RETVAL

int
nci_isdtf( c_func, s0, d1, t2, f3 )
	SV* c_func
	short s0
	double d1
	char * t2
	float f3
PREINIT:
	int(*func)(short, double, char *, float);
CODE:
	func   = INT2PTR(int(*)(short, double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2, f3);
OUTPUT:
	RETVAL

void *
nci_pfdtf( c_func, f0, d1, t2, f3 )
	SV* c_func
	float f0
	double d1
	char * t2
	float f3
PREINIT:
	void *(*func)(float, double, char *, float);
CODE:
	func   = INT2PTR(void *(*)(float, double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2, f3);
OUTPUT:
	RETVAL

void
nci_vfdtf( c_func, f0, d1, t2, f3 )
	SV* c_func
	float f0
	double d1
	char * t2
	float f3
PREINIT:
	void(*func)(float, double, char *, float);
CODE:
	func   = INT2PTR(void(*)(float, double, char *, float), SvIV(c_func) );
	(*func)(f0, d1, t2, f3);

double
nci_dfdtf( c_func, f0, d1, t2, f3 )
	SV* c_func
	float f0
	double d1
	char * t2
	float f3
PREINIT:
	double(*func)(float, double, char *, float);
CODE:
	func   = INT2PTR(double(*)(float, double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2, f3);
OUTPUT:
	RETVAL

short
nci_sfdtf( c_func, f0, d1, t2, f3 )
	SV* c_func
	float f0
	double d1
	char * t2
	float f3
PREINIT:
	short(*func)(float, double, char *, float);
CODE:
	func   = INT2PTR(short(*)(float, double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2, f3);
OUTPUT:
	RETVAL

float
nci_ffdtf( c_func, f0, d1, t2, f3 )
	SV* c_func
	float f0
	double d1
	char * t2
	float f3
PREINIT:
	float(*func)(float, double, char *, float);
CODE:
	func   = INT2PTR(float(*)(float, double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2, f3);
OUTPUT:
	RETVAL

char *
nci_tfdtf( c_func, f0, d1, t2, f3 )
	SV* c_func
	float f0
	double d1
	char * t2
	float f3
PREINIT:
	char *(*func)(float, double, char *, float);
CODE:
	func   = INT2PTR(char *(*)(float, double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2, f3);
OUTPUT:
	RETVAL

int
nci_ifdtf( c_func, f0, d1, t2, f3 )
	SV* c_func
	float f0
	double d1
	char * t2
	float f3
PREINIT:
	int(*func)(float, double, char *, float);
CODE:
	func   = INT2PTR(int(*)(float, double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2, f3);
OUTPUT:
	RETVAL

void *
nci_ptdtf( c_func, t0, d1, t2, f3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	float f3
PREINIT:
	void *(*func)(char *, double, char *, float);
CODE:
	func   = INT2PTR(void *(*)(char *, double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2, f3);
OUTPUT:
	RETVAL

void
nci_vtdtf( c_func, t0, d1, t2, f3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	float f3
PREINIT:
	void(*func)(char *, double, char *, float);
CODE:
	func   = INT2PTR(void(*)(char *, double, char *, float), SvIV(c_func) );
	(*func)(t0, d1, t2, f3);

double
nci_dtdtf( c_func, t0, d1, t2, f3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	float f3
PREINIT:
	double(*func)(char *, double, char *, float);
CODE:
	func   = INT2PTR(double(*)(char *, double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2, f3);
OUTPUT:
	RETVAL

short
nci_stdtf( c_func, t0, d1, t2, f3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	float f3
PREINIT:
	short(*func)(char *, double, char *, float);
CODE:
	func   = INT2PTR(short(*)(char *, double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2, f3);
OUTPUT:
	RETVAL

float
nci_ftdtf( c_func, t0, d1, t2, f3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	float f3
PREINIT:
	float(*func)(char *, double, char *, float);
CODE:
	func   = INT2PTR(float(*)(char *, double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2, f3);
OUTPUT:
	RETVAL

char *
nci_ttdtf( c_func, t0, d1, t2, f3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	float f3
PREINIT:
	char *(*func)(char *, double, char *, float);
CODE:
	func   = INT2PTR(char *(*)(char *, double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2, f3);
OUTPUT:
	RETVAL

int
nci_itdtf( c_func, t0, d1, t2, f3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	float f3
PREINIT:
	int(*func)(char *, double, char *, float);
CODE:
	func   = INT2PTR(int(*)(char *, double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2, f3);
OUTPUT:
	RETVAL

void *
nci_pidtf( c_func, i0, d1, t2, f3 )
	SV* c_func
	int i0
	double d1
	char * t2
	float f3
PREINIT:
	void *(*func)(int, double, char *, float);
CODE:
	func   = INT2PTR(void *(*)(int, double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2, f3);
OUTPUT:
	RETVAL

void
nci_vidtf( c_func, i0, d1, t2, f3 )
	SV* c_func
	int i0
	double d1
	char * t2
	float f3
PREINIT:
	void(*func)(int, double, char *, float);
CODE:
	func   = INT2PTR(void(*)(int, double, char *, float), SvIV(c_func) );
	(*func)(i0, d1, t2, f3);

double
nci_didtf( c_func, i0, d1, t2, f3 )
	SV* c_func
	int i0
	double d1
	char * t2
	float f3
PREINIT:
	double(*func)(int, double, char *, float);
CODE:
	func   = INT2PTR(double(*)(int, double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2, f3);
OUTPUT:
	RETVAL

short
nci_sidtf( c_func, i0, d1, t2, f3 )
	SV* c_func
	int i0
	double d1
	char * t2
	float f3
PREINIT:
	short(*func)(int, double, char *, float);
CODE:
	func   = INT2PTR(short(*)(int, double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2, f3);
OUTPUT:
	RETVAL

float
nci_fidtf( c_func, i0, d1, t2, f3 )
	SV* c_func
	int i0
	double d1
	char * t2
	float f3
PREINIT:
	float(*func)(int, double, char *, float);
CODE:
	func   = INT2PTR(float(*)(int, double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2, f3);
OUTPUT:
	RETVAL

char *
nci_tidtf( c_func, i0, d1, t2, f3 )
	SV* c_func
	int i0
	double d1
	char * t2
	float f3
PREINIT:
	char *(*func)(int, double, char *, float);
CODE:
	func   = INT2PTR(char *(*)(int, double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2, f3);
OUTPUT:
	RETVAL

int
nci_iidtf( c_func, i0, d1, t2, f3 )
	SV* c_func
	int i0
	double d1
	char * t2
	float f3
PREINIT:
	int(*func)(int, double, char *, float);
CODE:
	func   = INT2PTR(int(*)(int, double, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2, f3);
OUTPUT:
	RETVAL

void *
nci_ppstf( c_func, p0, s1, t2, f3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	float f3
PREINIT:
	void *(*func)(void *, short, char *, float);
CODE:
	func   = INT2PTR(void *(*)(void *, short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2, f3);
OUTPUT:
	RETVAL

void
nci_vpstf( c_func, p0, s1, t2, f3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	float f3
PREINIT:
	void(*func)(void *, short, char *, float);
CODE:
	func   = INT2PTR(void(*)(void *, short, char *, float), SvIV(c_func) );
	(*func)(p0, s1, t2, f3);

double
nci_dpstf( c_func, p0, s1, t2, f3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	float f3
PREINIT:
	double(*func)(void *, short, char *, float);
CODE:
	func   = INT2PTR(double(*)(void *, short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2, f3);
OUTPUT:
	RETVAL

short
nci_spstf( c_func, p0, s1, t2, f3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	float f3
PREINIT:
	short(*func)(void *, short, char *, float);
CODE:
	func   = INT2PTR(short(*)(void *, short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2, f3);
OUTPUT:
	RETVAL

float
nci_fpstf( c_func, p0, s1, t2, f3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	float f3
PREINIT:
	float(*func)(void *, short, char *, float);
CODE:
	func   = INT2PTR(float(*)(void *, short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2, f3);
OUTPUT:
	RETVAL

char *
nci_tpstf( c_func, p0, s1, t2, f3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	float f3
PREINIT:
	char *(*func)(void *, short, char *, float);
CODE:
	func   = INT2PTR(char *(*)(void *, short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2, f3);
OUTPUT:
	RETVAL

int
nci_ipstf( c_func, p0, s1, t2, f3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	float f3
PREINIT:
	int(*func)(void *, short, char *, float);
CODE:
	func   = INT2PTR(int(*)(void *, short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2, f3);
OUTPUT:
	RETVAL

void *
nci_pvstf( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvstf( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvstf( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svstf( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvstf( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvstf( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivstf( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdstf( c_func, d0, s1, t2, f3 )
	SV* c_func
	double d0
	short s1
	char * t2
	float f3
PREINIT:
	void *(*func)(double, short, char *, float);
CODE:
	func   = INT2PTR(void *(*)(double, short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2, f3);
OUTPUT:
	RETVAL

void
nci_vdstf( c_func, d0, s1, t2, f3 )
	SV* c_func
	double d0
	short s1
	char * t2
	float f3
PREINIT:
	void(*func)(double, short, char *, float);
CODE:
	func   = INT2PTR(void(*)(double, short, char *, float), SvIV(c_func) );
	(*func)(d0, s1, t2, f3);

double
nci_ddstf( c_func, d0, s1, t2, f3 )
	SV* c_func
	double d0
	short s1
	char * t2
	float f3
PREINIT:
	double(*func)(double, short, char *, float);
CODE:
	func   = INT2PTR(double(*)(double, short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2, f3);
OUTPUT:
	RETVAL

short
nci_sdstf( c_func, d0, s1, t2, f3 )
	SV* c_func
	double d0
	short s1
	char * t2
	float f3
PREINIT:
	short(*func)(double, short, char *, float);
CODE:
	func   = INT2PTR(short(*)(double, short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2, f3);
OUTPUT:
	RETVAL

float
nci_fdstf( c_func, d0, s1, t2, f3 )
	SV* c_func
	double d0
	short s1
	char * t2
	float f3
PREINIT:
	float(*func)(double, short, char *, float);
CODE:
	func   = INT2PTR(float(*)(double, short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2, f3);
OUTPUT:
	RETVAL

char *
nci_tdstf( c_func, d0, s1, t2, f3 )
	SV* c_func
	double d0
	short s1
	char * t2
	float f3
PREINIT:
	char *(*func)(double, short, char *, float);
CODE:
	func   = INT2PTR(char *(*)(double, short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2, f3);
OUTPUT:
	RETVAL

int
nci_idstf( c_func, d0, s1, t2, f3 )
	SV* c_func
	double d0
	short s1
	char * t2
	float f3
PREINIT:
	int(*func)(double, short, char *, float);
CODE:
	func   = INT2PTR(int(*)(double, short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2, f3);
OUTPUT:
	RETVAL

void *
nci_psstf( c_func, s0, s1, t2, f3 )
	SV* c_func
	short s0
	short s1
	char * t2
	float f3
PREINIT:
	void *(*func)(short, short, char *, float);
CODE:
	func   = INT2PTR(void *(*)(short, short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2, f3);
OUTPUT:
	RETVAL

void
nci_vsstf( c_func, s0, s1, t2, f3 )
	SV* c_func
	short s0
	short s1
	char * t2
	float f3
PREINIT:
	void(*func)(short, short, char *, float);
CODE:
	func   = INT2PTR(void(*)(short, short, char *, float), SvIV(c_func) );
	(*func)(s0, s1, t2, f3);

double
nci_dsstf( c_func, s0, s1, t2, f3 )
	SV* c_func
	short s0
	short s1
	char * t2
	float f3
PREINIT:
	double(*func)(short, short, char *, float);
CODE:
	func   = INT2PTR(double(*)(short, short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2, f3);
OUTPUT:
	RETVAL

short
nci_ssstf( c_func, s0, s1, t2, f3 )
	SV* c_func
	short s0
	short s1
	char * t2
	float f3
PREINIT:
	short(*func)(short, short, char *, float);
CODE:
	func   = INT2PTR(short(*)(short, short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2, f3);
OUTPUT:
	RETVAL

float
nci_fsstf( c_func, s0, s1, t2, f3 )
	SV* c_func
	short s0
	short s1
	char * t2
	float f3
PREINIT:
	float(*func)(short, short, char *, float);
CODE:
	func   = INT2PTR(float(*)(short, short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2, f3);
OUTPUT:
	RETVAL

char *
nci_tsstf( c_func, s0, s1, t2, f3 )
	SV* c_func
	short s0
	short s1
	char * t2
	float f3
PREINIT:
	char *(*func)(short, short, char *, float);
CODE:
	func   = INT2PTR(char *(*)(short, short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2, f3);
OUTPUT:
	RETVAL

int
nci_isstf( c_func, s0, s1, t2, f3 )
	SV* c_func
	short s0
	short s1
	char * t2
	float f3
PREINIT:
	int(*func)(short, short, char *, float);
CODE:
	func   = INT2PTR(int(*)(short, short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2, f3);
OUTPUT:
	RETVAL

void *
nci_pfstf( c_func, f0, s1, t2, f3 )
	SV* c_func
	float f0
	short s1
	char * t2
	float f3
PREINIT:
	void *(*func)(float, short, char *, float);
CODE:
	func   = INT2PTR(void *(*)(float, short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2, f3);
OUTPUT:
	RETVAL

void
nci_vfstf( c_func, f0, s1, t2, f3 )
	SV* c_func
	float f0
	short s1
	char * t2
	float f3
PREINIT:
	void(*func)(float, short, char *, float);
CODE:
	func   = INT2PTR(void(*)(float, short, char *, float), SvIV(c_func) );
	(*func)(f0, s1, t2, f3);

double
nci_dfstf( c_func, f0, s1, t2, f3 )
	SV* c_func
	float f0
	short s1
	char * t2
	float f3
PREINIT:
	double(*func)(float, short, char *, float);
CODE:
	func   = INT2PTR(double(*)(float, short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2, f3);
OUTPUT:
	RETVAL

short
nci_sfstf( c_func, f0, s1, t2, f3 )
	SV* c_func
	float f0
	short s1
	char * t2
	float f3
PREINIT:
	short(*func)(float, short, char *, float);
CODE:
	func   = INT2PTR(short(*)(float, short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2, f3);
OUTPUT:
	RETVAL

float
nci_ffstf( c_func, f0, s1, t2, f3 )
	SV* c_func
	float f0
	short s1
	char * t2
	float f3
PREINIT:
	float(*func)(float, short, char *, float);
CODE:
	func   = INT2PTR(float(*)(float, short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2, f3);
OUTPUT:
	RETVAL

char *
nci_tfstf( c_func, f0, s1, t2, f3 )
	SV* c_func
	float f0
	short s1
	char * t2
	float f3
PREINIT:
	char *(*func)(float, short, char *, float);
CODE:
	func   = INT2PTR(char *(*)(float, short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2, f3);
OUTPUT:
	RETVAL

int
nci_ifstf( c_func, f0, s1, t2, f3 )
	SV* c_func
	float f0
	short s1
	char * t2
	float f3
PREINIT:
	int(*func)(float, short, char *, float);
CODE:
	func   = INT2PTR(int(*)(float, short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2, f3);
OUTPUT:
	RETVAL

void *
nci_ptstf( c_func, t0, s1, t2, f3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	float f3
PREINIT:
	void *(*func)(char *, short, char *, float);
CODE:
	func   = INT2PTR(void *(*)(char *, short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2, f3);
OUTPUT:
	RETVAL

void
nci_vtstf( c_func, t0, s1, t2, f3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	float f3
PREINIT:
	void(*func)(char *, short, char *, float);
CODE:
	func   = INT2PTR(void(*)(char *, short, char *, float), SvIV(c_func) );
	(*func)(t0, s1, t2, f3);

double
nci_dtstf( c_func, t0, s1, t2, f3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	float f3
PREINIT:
	double(*func)(char *, short, char *, float);
CODE:
	func   = INT2PTR(double(*)(char *, short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2, f3);
OUTPUT:
	RETVAL

short
nci_ststf( c_func, t0, s1, t2, f3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	float f3
PREINIT:
	short(*func)(char *, short, char *, float);
CODE:
	func   = INT2PTR(short(*)(char *, short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2, f3);
OUTPUT:
	RETVAL

float
nci_ftstf( c_func, t0, s1, t2, f3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	float f3
PREINIT:
	float(*func)(char *, short, char *, float);
CODE:
	func   = INT2PTR(float(*)(char *, short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2, f3);
OUTPUT:
	RETVAL

char *
nci_ttstf( c_func, t0, s1, t2, f3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	float f3
PREINIT:
	char *(*func)(char *, short, char *, float);
CODE:
	func   = INT2PTR(char *(*)(char *, short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2, f3);
OUTPUT:
	RETVAL

int
nci_itstf( c_func, t0, s1, t2, f3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	float f3
PREINIT:
	int(*func)(char *, short, char *, float);
CODE:
	func   = INT2PTR(int(*)(char *, short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2, f3);
OUTPUT:
	RETVAL

void *
nci_pistf( c_func, i0, s1, t2, f3 )
	SV* c_func
	int i0
	short s1
	char * t2
	float f3
PREINIT:
	void *(*func)(int, short, char *, float);
CODE:
	func   = INT2PTR(void *(*)(int, short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2, f3);
OUTPUT:
	RETVAL

void
nci_vistf( c_func, i0, s1, t2, f3 )
	SV* c_func
	int i0
	short s1
	char * t2
	float f3
PREINIT:
	void(*func)(int, short, char *, float);
CODE:
	func   = INT2PTR(void(*)(int, short, char *, float), SvIV(c_func) );
	(*func)(i0, s1, t2, f3);

double
nci_distf( c_func, i0, s1, t2, f3 )
	SV* c_func
	int i0
	short s1
	char * t2
	float f3
PREINIT:
	double(*func)(int, short, char *, float);
CODE:
	func   = INT2PTR(double(*)(int, short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2, f3);
OUTPUT:
	RETVAL

short
nci_sistf( c_func, i0, s1, t2, f3 )
	SV* c_func
	int i0
	short s1
	char * t2
	float f3
PREINIT:
	short(*func)(int, short, char *, float);
CODE:
	func   = INT2PTR(short(*)(int, short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2, f3);
OUTPUT:
	RETVAL

float
nci_fistf( c_func, i0, s1, t2, f3 )
	SV* c_func
	int i0
	short s1
	char * t2
	float f3
PREINIT:
	float(*func)(int, short, char *, float);
CODE:
	func   = INT2PTR(float(*)(int, short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2, f3);
OUTPUT:
	RETVAL

char *
nci_tistf( c_func, i0, s1, t2, f3 )
	SV* c_func
	int i0
	short s1
	char * t2
	float f3
PREINIT:
	char *(*func)(int, short, char *, float);
CODE:
	func   = INT2PTR(char *(*)(int, short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2, f3);
OUTPUT:
	RETVAL

int
nci_iistf( c_func, i0, s1, t2, f3 )
	SV* c_func
	int i0
	short s1
	char * t2
	float f3
PREINIT:
	int(*func)(int, short, char *, float);
CODE:
	func   = INT2PTR(int(*)(int, short, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2, f3);
OUTPUT:
	RETVAL

void *
nci_ppftf( c_func, p0, f1, t2, f3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	float f3
PREINIT:
	void *(*func)(void *, float, char *, float);
CODE:
	func   = INT2PTR(void *(*)(void *, float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2, f3);
OUTPUT:
	RETVAL

void
nci_vpftf( c_func, p0, f1, t2, f3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	float f3
PREINIT:
	void(*func)(void *, float, char *, float);
CODE:
	func   = INT2PTR(void(*)(void *, float, char *, float), SvIV(c_func) );
	(*func)(p0, f1, t2, f3);

double
nci_dpftf( c_func, p0, f1, t2, f3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	float f3
PREINIT:
	double(*func)(void *, float, char *, float);
CODE:
	func   = INT2PTR(double(*)(void *, float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2, f3);
OUTPUT:
	RETVAL

short
nci_spftf( c_func, p0, f1, t2, f3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	float f3
PREINIT:
	short(*func)(void *, float, char *, float);
CODE:
	func   = INT2PTR(short(*)(void *, float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2, f3);
OUTPUT:
	RETVAL

float
nci_fpftf( c_func, p0, f1, t2, f3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	float f3
PREINIT:
	float(*func)(void *, float, char *, float);
CODE:
	func   = INT2PTR(float(*)(void *, float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2, f3);
OUTPUT:
	RETVAL

char *
nci_tpftf( c_func, p0, f1, t2, f3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	float f3
PREINIT:
	char *(*func)(void *, float, char *, float);
CODE:
	func   = INT2PTR(char *(*)(void *, float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2, f3);
OUTPUT:
	RETVAL

int
nci_ipftf( c_func, p0, f1, t2, f3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	float f3
PREINIT:
	int(*func)(void *, float, char *, float);
CODE:
	func   = INT2PTR(int(*)(void *, float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2, f3);
OUTPUT:
	RETVAL

void *
nci_pvftf( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvftf( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvftf( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svftf( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvftf( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvftf( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivftf( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdftf( c_func, d0, f1, t2, f3 )
	SV* c_func
	double d0
	float f1
	char * t2
	float f3
PREINIT:
	void *(*func)(double, float, char *, float);
CODE:
	func   = INT2PTR(void *(*)(double, float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2, f3);
OUTPUT:
	RETVAL

void
nci_vdftf( c_func, d0, f1, t2, f3 )
	SV* c_func
	double d0
	float f1
	char * t2
	float f3
PREINIT:
	void(*func)(double, float, char *, float);
CODE:
	func   = INT2PTR(void(*)(double, float, char *, float), SvIV(c_func) );
	(*func)(d0, f1, t2, f3);

double
nci_ddftf( c_func, d0, f1, t2, f3 )
	SV* c_func
	double d0
	float f1
	char * t2
	float f3
PREINIT:
	double(*func)(double, float, char *, float);
CODE:
	func   = INT2PTR(double(*)(double, float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2, f3);
OUTPUT:
	RETVAL

short
nci_sdftf( c_func, d0, f1, t2, f3 )
	SV* c_func
	double d0
	float f1
	char * t2
	float f3
PREINIT:
	short(*func)(double, float, char *, float);
CODE:
	func   = INT2PTR(short(*)(double, float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2, f3);
OUTPUT:
	RETVAL

float
nci_fdftf( c_func, d0, f1, t2, f3 )
	SV* c_func
	double d0
	float f1
	char * t2
	float f3
PREINIT:
	float(*func)(double, float, char *, float);
CODE:
	func   = INT2PTR(float(*)(double, float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2, f3);
OUTPUT:
	RETVAL

char *
nci_tdftf( c_func, d0, f1, t2, f3 )
	SV* c_func
	double d0
	float f1
	char * t2
	float f3
PREINIT:
	char *(*func)(double, float, char *, float);
CODE:
	func   = INT2PTR(char *(*)(double, float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2, f3);
OUTPUT:
	RETVAL

int
nci_idftf( c_func, d0, f1, t2, f3 )
	SV* c_func
	double d0
	float f1
	char * t2
	float f3
PREINIT:
	int(*func)(double, float, char *, float);
CODE:
	func   = INT2PTR(int(*)(double, float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2, f3);
OUTPUT:
	RETVAL

void *
nci_psftf( c_func, s0, f1, t2, f3 )
	SV* c_func
	short s0
	float f1
	char * t2
	float f3
PREINIT:
	void *(*func)(short, float, char *, float);
CODE:
	func   = INT2PTR(void *(*)(short, float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2, f3);
OUTPUT:
	RETVAL

void
nci_vsftf( c_func, s0, f1, t2, f3 )
	SV* c_func
	short s0
	float f1
	char * t2
	float f3
PREINIT:
	void(*func)(short, float, char *, float);
CODE:
	func   = INT2PTR(void(*)(short, float, char *, float), SvIV(c_func) );
	(*func)(s0, f1, t2, f3);

double
nci_dsftf( c_func, s0, f1, t2, f3 )
	SV* c_func
	short s0
	float f1
	char * t2
	float f3
PREINIT:
	double(*func)(short, float, char *, float);
CODE:
	func   = INT2PTR(double(*)(short, float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2, f3);
OUTPUT:
	RETVAL

short
nci_ssftf( c_func, s0, f1, t2, f3 )
	SV* c_func
	short s0
	float f1
	char * t2
	float f3
PREINIT:
	short(*func)(short, float, char *, float);
CODE:
	func   = INT2PTR(short(*)(short, float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2, f3);
OUTPUT:
	RETVAL

float
nci_fsftf( c_func, s0, f1, t2, f3 )
	SV* c_func
	short s0
	float f1
	char * t2
	float f3
PREINIT:
	float(*func)(short, float, char *, float);
CODE:
	func   = INT2PTR(float(*)(short, float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2, f3);
OUTPUT:
	RETVAL

char *
nci_tsftf( c_func, s0, f1, t2, f3 )
	SV* c_func
	short s0
	float f1
	char * t2
	float f3
PREINIT:
	char *(*func)(short, float, char *, float);
CODE:
	func   = INT2PTR(char *(*)(short, float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2, f3);
OUTPUT:
	RETVAL

int
nci_isftf( c_func, s0, f1, t2, f3 )
	SV* c_func
	short s0
	float f1
	char * t2
	float f3
PREINIT:
	int(*func)(short, float, char *, float);
CODE:
	func   = INT2PTR(int(*)(short, float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2, f3);
OUTPUT:
	RETVAL

void *
nci_pfftf( c_func, f0, f1, t2, f3 )
	SV* c_func
	float f0
	float f1
	char * t2
	float f3
PREINIT:
	void *(*func)(float, float, char *, float);
CODE:
	func   = INT2PTR(void *(*)(float, float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2, f3);
OUTPUT:
	RETVAL

void
nci_vfftf( c_func, f0, f1, t2, f3 )
	SV* c_func
	float f0
	float f1
	char * t2
	float f3
PREINIT:
	void(*func)(float, float, char *, float);
CODE:
	func   = INT2PTR(void(*)(float, float, char *, float), SvIV(c_func) );
	(*func)(f0, f1, t2, f3);

double
nci_dfftf( c_func, f0, f1, t2, f3 )
	SV* c_func
	float f0
	float f1
	char * t2
	float f3
PREINIT:
	double(*func)(float, float, char *, float);
CODE:
	func   = INT2PTR(double(*)(float, float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2, f3);
OUTPUT:
	RETVAL

short
nci_sfftf( c_func, f0, f1, t2, f3 )
	SV* c_func
	float f0
	float f1
	char * t2
	float f3
PREINIT:
	short(*func)(float, float, char *, float);
CODE:
	func   = INT2PTR(short(*)(float, float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2, f3);
OUTPUT:
	RETVAL

float
nci_ffftf( c_func, f0, f1, t2, f3 )
	SV* c_func
	float f0
	float f1
	char * t2
	float f3
PREINIT:
	float(*func)(float, float, char *, float);
CODE:
	func   = INT2PTR(float(*)(float, float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2, f3);
OUTPUT:
	RETVAL

char *
nci_tfftf( c_func, f0, f1, t2, f3 )
	SV* c_func
	float f0
	float f1
	char * t2
	float f3
PREINIT:
	char *(*func)(float, float, char *, float);
CODE:
	func   = INT2PTR(char *(*)(float, float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2, f3);
OUTPUT:
	RETVAL

int
nci_ifftf( c_func, f0, f1, t2, f3 )
	SV* c_func
	float f0
	float f1
	char * t2
	float f3
PREINIT:
	int(*func)(float, float, char *, float);
CODE:
	func   = INT2PTR(int(*)(float, float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2, f3);
OUTPUT:
	RETVAL

void *
nci_ptftf( c_func, t0, f1, t2, f3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	float f3
PREINIT:
	void *(*func)(char *, float, char *, float);
CODE:
	func   = INT2PTR(void *(*)(char *, float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2, f3);
OUTPUT:
	RETVAL

void
nci_vtftf( c_func, t0, f1, t2, f3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	float f3
PREINIT:
	void(*func)(char *, float, char *, float);
CODE:
	func   = INT2PTR(void(*)(char *, float, char *, float), SvIV(c_func) );
	(*func)(t0, f1, t2, f3);

double
nci_dtftf( c_func, t0, f1, t2, f3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	float f3
PREINIT:
	double(*func)(char *, float, char *, float);
CODE:
	func   = INT2PTR(double(*)(char *, float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2, f3);
OUTPUT:
	RETVAL

short
nci_stftf( c_func, t0, f1, t2, f3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	float f3
PREINIT:
	short(*func)(char *, float, char *, float);
CODE:
	func   = INT2PTR(short(*)(char *, float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2, f3);
OUTPUT:
	RETVAL

float
nci_ftftf( c_func, t0, f1, t2, f3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	float f3
PREINIT:
	float(*func)(char *, float, char *, float);
CODE:
	func   = INT2PTR(float(*)(char *, float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2, f3);
OUTPUT:
	RETVAL

char *
nci_ttftf( c_func, t0, f1, t2, f3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	float f3
PREINIT:
	char *(*func)(char *, float, char *, float);
CODE:
	func   = INT2PTR(char *(*)(char *, float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2, f3);
OUTPUT:
	RETVAL

int
nci_itftf( c_func, t0, f1, t2, f3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	float f3
PREINIT:
	int(*func)(char *, float, char *, float);
CODE:
	func   = INT2PTR(int(*)(char *, float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2, f3);
OUTPUT:
	RETVAL

void *
nci_piftf( c_func, i0, f1, t2, f3 )
	SV* c_func
	int i0
	float f1
	char * t2
	float f3
PREINIT:
	void *(*func)(int, float, char *, float);
CODE:
	func   = INT2PTR(void *(*)(int, float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2, f3);
OUTPUT:
	RETVAL

void
nci_viftf( c_func, i0, f1, t2, f3 )
	SV* c_func
	int i0
	float f1
	char * t2
	float f3
PREINIT:
	void(*func)(int, float, char *, float);
CODE:
	func   = INT2PTR(void(*)(int, float, char *, float), SvIV(c_func) );
	(*func)(i0, f1, t2, f3);

double
nci_diftf( c_func, i0, f1, t2, f3 )
	SV* c_func
	int i0
	float f1
	char * t2
	float f3
PREINIT:
	double(*func)(int, float, char *, float);
CODE:
	func   = INT2PTR(double(*)(int, float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2, f3);
OUTPUT:
	RETVAL

short
nci_siftf( c_func, i0, f1, t2, f3 )
	SV* c_func
	int i0
	float f1
	char * t2
	float f3
PREINIT:
	short(*func)(int, float, char *, float);
CODE:
	func   = INT2PTR(short(*)(int, float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2, f3);
OUTPUT:
	RETVAL

float
nci_fiftf( c_func, i0, f1, t2, f3 )
	SV* c_func
	int i0
	float f1
	char * t2
	float f3
PREINIT:
	float(*func)(int, float, char *, float);
CODE:
	func   = INT2PTR(float(*)(int, float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2, f3);
OUTPUT:
	RETVAL

char *
nci_tiftf( c_func, i0, f1, t2, f3 )
	SV* c_func
	int i0
	float f1
	char * t2
	float f3
PREINIT:
	char *(*func)(int, float, char *, float);
CODE:
	func   = INT2PTR(char *(*)(int, float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2, f3);
OUTPUT:
	RETVAL

int
nci_iiftf( c_func, i0, f1, t2, f3 )
	SV* c_func
	int i0
	float f1
	char * t2
	float f3
PREINIT:
	int(*func)(int, float, char *, float);
CODE:
	func   = INT2PTR(int(*)(int, float, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2, f3);
OUTPUT:
	RETVAL

void *
nci_ppttf( c_func, p0, t1, t2, f3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	float f3
PREINIT:
	void *(*func)(void *, char *, char *, float);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2, f3);
OUTPUT:
	RETVAL

void
nci_vpttf( c_func, p0, t1, t2, f3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	float f3
PREINIT:
	void(*func)(void *, char *, char *, float);
CODE:
	func   = INT2PTR(void(*)(void *, char *, char *, float), SvIV(c_func) );
	(*func)(p0, t1, t2, f3);

double
nci_dpttf( c_func, p0, t1, t2, f3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	float f3
PREINIT:
	double(*func)(void *, char *, char *, float);
CODE:
	func   = INT2PTR(double(*)(void *, char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2, f3);
OUTPUT:
	RETVAL

short
nci_spttf( c_func, p0, t1, t2, f3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	float f3
PREINIT:
	short(*func)(void *, char *, char *, float);
CODE:
	func   = INT2PTR(short(*)(void *, char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2, f3);
OUTPUT:
	RETVAL

float
nci_fpttf( c_func, p0, t1, t2, f3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	float f3
PREINIT:
	float(*func)(void *, char *, char *, float);
CODE:
	func   = INT2PTR(float(*)(void *, char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2, f3);
OUTPUT:
	RETVAL

char *
nci_tpttf( c_func, p0, t1, t2, f3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	float f3
PREINIT:
	char *(*func)(void *, char *, char *, float);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2, f3);
OUTPUT:
	RETVAL

int
nci_ipttf( c_func, p0, t1, t2, f3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	float f3
PREINIT:
	int(*func)(void *, char *, char *, float);
CODE:
	func   = INT2PTR(int(*)(void *, char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2, f3);
OUTPUT:
	RETVAL

void *
nci_pvttf( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvttf( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvttf( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svttf( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvttf( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvttf( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivttf( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdttf( c_func, d0, t1, t2, f3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	float f3
PREINIT:
	void *(*func)(double, char *, char *, float);
CODE:
	func   = INT2PTR(void *(*)(double, char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2, f3);
OUTPUT:
	RETVAL

void
nci_vdttf( c_func, d0, t1, t2, f3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	float f3
PREINIT:
	void(*func)(double, char *, char *, float);
CODE:
	func   = INT2PTR(void(*)(double, char *, char *, float), SvIV(c_func) );
	(*func)(d0, t1, t2, f3);

double
nci_ddttf( c_func, d0, t1, t2, f3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	float f3
PREINIT:
	double(*func)(double, char *, char *, float);
CODE:
	func   = INT2PTR(double(*)(double, char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2, f3);
OUTPUT:
	RETVAL

short
nci_sdttf( c_func, d0, t1, t2, f3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	float f3
PREINIT:
	short(*func)(double, char *, char *, float);
CODE:
	func   = INT2PTR(short(*)(double, char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2, f3);
OUTPUT:
	RETVAL

float
nci_fdttf( c_func, d0, t1, t2, f3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	float f3
PREINIT:
	float(*func)(double, char *, char *, float);
CODE:
	func   = INT2PTR(float(*)(double, char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2, f3);
OUTPUT:
	RETVAL

char *
nci_tdttf( c_func, d0, t1, t2, f3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	float f3
PREINIT:
	char *(*func)(double, char *, char *, float);
CODE:
	func   = INT2PTR(char *(*)(double, char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2, f3);
OUTPUT:
	RETVAL

int
nci_idttf( c_func, d0, t1, t2, f3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	float f3
PREINIT:
	int(*func)(double, char *, char *, float);
CODE:
	func   = INT2PTR(int(*)(double, char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2, f3);
OUTPUT:
	RETVAL

void *
nci_psttf( c_func, s0, t1, t2, f3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	float f3
PREINIT:
	void *(*func)(short, char *, char *, float);
CODE:
	func   = INT2PTR(void *(*)(short, char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2, f3);
OUTPUT:
	RETVAL

void
nci_vsttf( c_func, s0, t1, t2, f3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	float f3
PREINIT:
	void(*func)(short, char *, char *, float);
CODE:
	func   = INT2PTR(void(*)(short, char *, char *, float), SvIV(c_func) );
	(*func)(s0, t1, t2, f3);

double
nci_dsttf( c_func, s0, t1, t2, f3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	float f3
PREINIT:
	double(*func)(short, char *, char *, float);
CODE:
	func   = INT2PTR(double(*)(short, char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2, f3);
OUTPUT:
	RETVAL

short
nci_ssttf( c_func, s0, t1, t2, f3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	float f3
PREINIT:
	short(*func)(short, char *, char *, float);
CODE:
	func   = INT2PTR(short(*)(short, char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2, f3);
OUTPUT:
	RETVAL

float
nci_fsttf( c_func, s0, t1, t2, f3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	float f3
PREINIT:
	float(*func)(short, char *, char *, float);
CODE:
	func   = INT2PTR(float(*)(short, char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2, f3);
OUTPUT:
	RETVAL

char *
nci_tsttf( c_func, s0, t1, t2, f3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	float f3
PREINIT:
	char *(*func)(short, char *, char *, float);
CODE:
	func   = INT2PTR(char *(*)(short, char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2, f3);
OUTPUT:
	RETVAL

int
nci_isttf( c_func, s0, t1, t2, f3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	float f3
PREINIT:
	int(*func)(short, char *, char *, float);
CODE:
	func   = INT2PTR(int(*)(short, char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2, f3);
OUTPUT:
	RETVAL

void *
nci_pfttf( c_func, f0, t1, t2, f3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	float f3
PREINIT:
	void *(*func)(float, char *, char *, float);
CODE:
	func   = INT2PTR(void *(*)(float, char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2, f3);
OUTPUT:
	RETVAL

void
nci_vfttf( c_func, f0, t1, t2, f3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	float f3
PREINIT:
	void(*func)(float, char *, char *, float);
CODE:
	func   = INT2PTR(void(*)(float, char *, char *, float), SvIV(c_func) );
	(*func)(f0, t1, t2, f3);

double
nci_dfttf( c_func, f0, t1, t2, f3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	float f3
PREINIT:
	double(*func)(float, char *, char *, float);
CODE:
	func   = INT2PTR(double(*)(float, char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2, f3);
OUTPUT:
	RETVAL

short
nci_sfttf( c_func, f0, t1, t2, f3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	float f3
PREINIT:
	short(*func)(float, char *, char *, float);
CODE:
	func   = INT2PTR(short(*)(float, char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2, f3);
OUTPUT:
	RETVAL

float
nci_ffttf( c_func, f0, t1, t2, f3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	float f3
PREINIT:
	float(*func)(float, char *, char *, float);
CODE:
	func   = INT2PTR(float(*)(float, char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2, f3);
OUTPUT:
	RETVAL

char *
nci_tfttf( c_func, f0, t1, t2, f3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	float f3
PREINIT:
	char *(*func)(float, char *, char *, float);
CODE:
	func   = INT2PTR(char *(*)(float, char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2, f3);
OUTPUT:
	RETVAL

int
nci_ifttf( c_func, f0, t1, t2, f3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	float f3
PREINIT:
	int(*func)(float, char *, char *, float);
CODE:
	func   = INT2PTR(int(*)(float, char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2, f3);
OUTPUT:
	RETVAL

void *
nci_ptttf( c_func, t0, t1, t2, f3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	float f3
PREINIT:
	void *(*func)(char *, char *, char *, float);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2, f3);
OUTPUT:
	RETVAL

void
nci_vtttf( c_func, t0, t1, t2, f3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	float f3
PREINIT:
	void(*func)(char *, char *, char *, float);
CODE:
	func   = INT2PTR(void(*)(char *, char *, char *, float), SvIV(c_func) );
	(*func)(t0, t1, t2, f3);

double
nci_dtttf( c_func, t0, t1, t2, f3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	float f3
PREINIT:
	double(*func)(char *, char *, char *, float);
CODE:
	func   = INT2PTR(double(*)(char *, char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2, f3);
OUTPUT:
	RETVAL

short
nci_stttf( c_func, t0, t1, t2, f3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	float f3
PREINIT:
	short(*func)(char *, char *, char *, float);
CODE:
	func   = INT2PTR(short(*)(char *, char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2, f3);
OUTPUT:
	RETVAL

float
nci_ftttf( c_func, t0, t1, t2, f3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	float f3
PREINIT:
	float(*func)(char *, char *, char *, float);
CODE:
	func   = INT2PTR(float(*)(char *, char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2, f3);
OUTPUT:
	RETVAL

char *
nci_ttttf( c_func, t0, t1, t2, f3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	float f3
PREINIT:
	char *(*func)(char *, char *, char *, float);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2, f3);
OUTPUT:
	RETVAL

int
nci_itttf( c_func, t0, t1, t2, f3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	float f3
PREINIT:
	int(*func)(char *, char *, char *, float);
CODE:
	func   = INT2PTR(int(*)(char *, char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2, f3);
OUTPUT:
	RETVAL

void *
nci_pittf( c_func, i0, t1, t2, f3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	float f3
PREINIT:
	void *(*func)(int, char *, char *, float);
CODE:
	func   = INT2PTR(void *(*)(int, char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2, f3);
OUTPUT:
	RETVAL

void
nci_vittf( c_func, i0, t1, t2, f3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	float f3
PREINIT:
	void(*func)(int, char *, char *, float);
CODE:
	func   = INT2PTR(void(*)(int, char *, char *, float), SvIV(c_func) );
	(*func)(i0, t1, t2, f3);

double
nci_dittf( c_func, i0, t1, t2, f3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	float f3
PREINIT:
	double(*func)(int, char *, char *, float);
CODE:
	func   = INT2PTR(double(*)(int, char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2, f3);
OUTPUT:
	RETVAL

short
nci_sittf( c_func, i0, t1, t2, f3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	float f3
PREINIT:
	short(*func)(int, char *, char *, float);
CODE:
	func   = INT2PTR(short(*)(int, char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2, f3);
OUTPUT:
	RETVAL

float
nci_fittf( c_func, i0, t1, t2, f3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	float f3
PREINIT:
	float(*func)(int, char *, char *, float);
CODE:
	func   = INT2PTR(float(*)(int, char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2, f3);
OUTPUT:
	RETVAL

char *
nci_tittf( c_func, i0, t1, t2, f3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	float f3
PREINIT:
	char *(*func)(int, char *, char *, float);
CODE:
	func   = INT2PTR(char *(*)(int, char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2, f3);
OUTPUT:
	RETVAL

int
nci_iittf( c_func, i0, t1, t2, f3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	float f3
PREINIT:
	int(*func)(int, char *, char *, float);
CODE:
	func   = INT2PTR(int(*)(int, char *, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2, f3);
OUTPUT:
	RETVAL

void *
nci_ppitf( c_func, p0, i1, t2, f3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	float f3
PREINIT:
	void *(*func)(void *, int, char *, float);
CODE:
	func   = INT2PTR(void *(*)(void *, int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2, f3);
OUTPUT:
	RETVAL

void
nci_vpitf( c_func, p0, i1, t2, f3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	float f3
PREINIT:
	void(*func)(void *, int, char *, float);
CODE:
	func   = INT2PTR(void(*)(void *, int, char *, float), SvIV(c_func) );
	(*func)(p0, i1, t2, f3);

double
nci_dpitf( c_func, p0, i1, t2, f3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	float f3
PREINIT:
	double(*func)(void *, int, char *, float);
CODE:
	func   = INT2PTR(double(*)(void *, int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2, f3);
OUTPUT:
	RETVAL

short
nci_spitf( c_func, p0, i1, t2, f3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	float f3
PREINIT:
	short(*func)(void *, int, char *, float);
CODE:
	func   = INT2PTR(short(*)(void *, int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2, f3);
OUTPUT:
	RETVAL

float
nci_fpitf( c_func, p0, i1, t2, f3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	float f3
PREINIT:
	float(*func)(void *, int, char *, float);
CODE:
	func   = INT2PTR(float(*)(void *, int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2, f3);
OUTPUT:
	RETVAL

char *
nci_tpitf( c_func, p0, i1, t2, f3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	float f3
PREINIT:
	char *(*func)(void *, int, char *, float);
CODE:
	func   = INT2PTR(char *(*)(void *, int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2, f3);
OUTPUT:
	RETVAL

int
nci_ipitf( c_func, p0, i1, t2, f3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	float f3
PREINIT:
	int(*func)(void *, int, char *, float);
CODE:
	func   = INT2PTR(int(*)(void *, int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2, f3);
OUTPUT:
	RETVAL

void *
nci_pvitf( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvitf( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvitf( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svitf( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvitf( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvitf( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivitf( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pditf( c_func, d0, i1, t2, f3 )
	SV* c_func
	double d0
	int i1
	char * t2
	float f3
PREINIT:
	void *(*func)(double, int, char *, float);
CODE:
	func   = INT2PTR(void *(*)(double, int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2, f3);
OUTPUT:
	RETVAL

void
nci_vditf( c_func, d0, i1, t2, f3 )
	SV* c_func
	double d0
	int i1
	char * t2
	float f3
PREINIT:
	void(*func)(double, int, char *, float);
CODE:
	func   = INT2PTR(void(*)(double, int, char *, float), SvIV(c_func) );
	(*func)(d0, i1, t2, f3);

double
nci_dditf( c_func, d0, i1, t2, f3 )
	SV* c_func
	double d0
	int i1
	char * t2
	float f3
PREINIT:
	double(*func)(double, int, char *, float);
CODE:
	func   = INT2PTR(double(*)(double, int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2, f3);
OUTPUT:
	RETVAL

short
nci_sditf( c_func, d0, i1, t2, f3 )
	SV* c_func
	double d0
	int i1
	char * t2
	float f3
PREINIT:
	short(*func)(double, int, char *, float);
CODE:
	func   = INT2PTR(short(*)(double, int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2, f3);
OUTPUT:
	RETVAL

float
nci_fditf( c_func, d0, i1, t2, f3 )
	SV* c_func
	double d0
	int i1
	char * t2
	float f3
PREINIT:
	float(*func)(double, int, char *, float);
CODE:
	func   = INT2PTR(float(*)(double, int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2, f3);
OUTPUT:
	RETVAL

char *
nci_tditf( c_func, d0, i1, t2, f3 )
	SV* c_func
	double d0
	int i1
	char * t2
	float f3
PREINIT:
	char *(*func)(double, int, char *, float);
CODE:
	func   = INT2PTR(char *(*)(double, int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2, f3);
OUTPUT:
	RETVAL

int
nci_iditf( c_func, d0, i1, t2, f3 )
	SV* c_func
	double d0
	int i1
	char * t2
	float f3
PREINIT:
	int(*func)(double, int, char *, float);
CODE:
	func   = INT2PTR(int(*)(double, int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2, f3);
OUTPUT:
	RETVAL

void *
nci_psitf( c_func, s0, i1, t2, f3 )
	SV* c_func
	short s0
	int i1
	char * t2
	float f3
PREINIT:
	void *(*func)(short, int, char *, float);
CODE:
	func   = INT2PTR(void *(*)(short, int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2, f3);
OUTPUT:
	RETVAL

void
nci_vsitf( c_func, s0, i1, t2, f3 )
	SV* c_func
	short s0
	int i1
	char * t2
	float f3
PREINIT:
	void(*func)(short, int, char *, float);
CODE:
	func   = INT2PTR(void(*)(short, int, char *, float), SvIV(c_func) );
	(*func)(s0, i1, t2, f3);

double
nci_dsitf( c_func, s0, i1, t2, f3 )
	SV* c_func
	short s0
	int i1
	char * t2
	float f3
PREINIT:
	double(*func)(short, int, char *, float);
CODE:
	func   = INT2PTR(double(*)(short, int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2, f3);
OUTPUT:
	RETVAL

short
nci_ssitf( c_func, s0, i1, t2, f3 )
	SV* c_func
	short s0
	int i1
	char * t2
	float f3
PREINIT:
	short(*func)(short, int, char *, float);
CODE:
	func   = INT2PTR(short(*)(short, int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2, f3);
OUTPUT:
	RETVAL

float
nci_fsitf( c_func, s0, i1, t2, f3 )
	SV* c_func
	short s0
	int i1
	char * t2
	float f3
PREINIT:
	float(*func)(short, int, char *, float);
CODE:
	func   = INT2PTR(float(*)(short, int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2, f3);
OUTPUT:
	RETVAL

char *
nci_tsitf( c_func, s0, i1, t2, f3 )
	SV* c_func
	short s0
	int i1
	char * t2
	float f3
PREINIT:
	char *(*func)(short, int, char *, float);
CODE:
	func   = INT2PTR(char *(*)(short, int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2, f3);
OUTPUT:
	RETVAL

int
nci_isitf( c_func, s0, i1, t2, f3 )
	SV* c_func
	short s0
	int i1
	char * t2
	float f3
PREINIT:
	int(*func)(short, int, char *, float);
CODE:
	func   = INT2PTR(int(*)(short, int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2, f3);
OUTPUT:
	RETVAL

void *
nci_pfitf( c_func, f0, i1, t2, f3 )
	SV* c_func
	float f0
	int i1
	char * t2
	float f3
PREINIT:
	void *(*func)(float, int, char *, float);
CODE:
	func   = INT2PTR(void *(*)(float, int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2, f3);
OUTPUT:
	RETVAL

void
nci_vfitf( c_func, f0, i1, t2, f3 )
	SV* c_func
	float f0
	int i1
	char * t2
	float f3
PREINIT:
	void(*func)(float, int, char *, float);
CODE:
	func   = INT2PTR(void(*)(float, int, char *, float), SvIV(c_func) );
	(*func)(f0, i1, t2, f3);

double
nci_dfitf( c_func, f0, i1, t2, f3 )
	SV* c_func
	float f0
	int i1
	char * t2
	float f3
PREINIT:
	double(*func)(float, int, char *, float);
CODE:
	func   = INT2PTR(double(*)(float, int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2, f3);
OUTPUT:
	RETVAL

short
nci_sfitf( c_func, f0, i1, t2, f3 )
	SV* c_func
	float f0
	int i1
	char * t2
	float f3
PREINIT:
	short(*func)(float, int, char *, float);
CODE:
	func   = INT2PTR(short(*)(float, int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2, f3);
OUTPUT:
	RETVAL

float
nci_ffitf( c_func, f0, i1, t2, f3 )
	SV* c_func
	float f0
	int i1
	char * t2
	float f3
PREINIT:
	float(*func)(float, int, char *, float);
CODE:
	func   = INT2PTR(float(*)(float, int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2, f3);
OUTPUT:
	RETVAL

char *
nci_tfitf( c_func, f0, i1, t2, f3 )
	SV* c_func
	float f0
	int i1
	char * t2
	float f3
PREINIT:
	char *(*func)(float, int, char *, float);
CODE:
	func   = INT2PTR(char *(*)(float, int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2, f3);
OUTPUT:
	RETVAL

int
nci_ifitf( c_func, f0, i1, t2, f3 )
	SV* c_func
	float f0
	int i1
	char * t2
	float f3
PREINIT:
	int(*func)(float, int, char *, float);
CODE:
	func   = INT2PTR(int(*)(float, int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2, f3);
OUTPUT:
	RETVAL

void *
nci_ptitf( c_func, t0, i1, t2, f3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	float f3
PREINIT:
	void *(*func)(char *, int, char *, float);
CODE:
	func   = INT2PTR(void *(*)(char *, int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2, f3);
OUTPUT:
	RETVAL

void
nci_vtitf( c_func, t0, i1, t2, f3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	float f3
PREINIT:
	void(*func)(char *, int, char *, float);
CODE:
	func   = INT2PTR(void(*)(char *, int, char *, float), SvIV(c_func) );
	(*func)(t0, i1, t2, f3);

double
nci_dtitf( c_func, t0, i1, t2, f3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	float f3
PREINIT:
	double(*func)(char *, int, char *, float);
CODE:
	func   = INT2PTR(double(*)(char *, int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2, f3);
OUTPUT:
	RETVAL

short
nci_stitf( c_func, t0, i1, t2, f3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	float f3
PREINIT:
	short(*func)(char *, int, char *, float);
CODE:
	func   = INT2PTR(short(*)(char *, int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2, f3);
OUTPUT:
	RETVAL

float
nci_ftitf( c_func, t0, i1, t2, f3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	float f3
PREINIT:
	float(*func)(char *, int, char *, float);
CODE:
	func   = INT2PTR(float(*)(char *, int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2, f3);
OUTPUT:
	RETVAL

char *
nci_ttitf( c_func, t0, i1, t2, f3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	float f3
PREINIT:
	char *(*func)(char *, int, char *, float);
CODE:
	func   = INT2PTR(char *(*)(char *, int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2, f3);
OUTPUT:
	RETVAL

int
nci_ititf( c_func, t0, i1, t2, f3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	float f3
PREINIT:
	int(*func)(char *, int, char *, float);
CODE:
	func   = INT2PTR(int(*)(char *, int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2, f3);
OUTPUT:
	RETVAL

void *
nci_piitf( c_func, i0, i1, t2, f3 )
	SV* c_func
	int i0
	int i1
	char * t2
	float f3
PREINIT:
	void *(*func)(int, int, char *, float);
CODE:
	func   = INT2PTR(void *(*)(int, int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2, f3);
OUTPUT:
	RETVAL

void
nci_viitf( c_func, i0, i1, t2, f3 )
	SV* c_func
	int i0
	int i1
	char * t2
	float f3
PREINIT:
	void(*func)(int, int, char *, float);
CODE:
	func   = INT2PTR(void(*)(int, int, char *, float), SvIV(c_func) );
	(*func)(i0, i1, t2, f3);

double
nci_diitf( c_func, i0, i1, t2, f3 )
	SV* c_func
	int i0
	int i1
	char * t2
	float f3
PREINIT:
	double(*func)(int, int, char *, float);
CODE:
	func   = INT2PTR(double(*)(int, int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2, f3);
OUTPUT:
	RETVAL

short
nci_siitf( c_func, i0, i1, t2, f3 )
	SV* c_func
	int i0
	int i1
	char * t2
	float f3
PREINIT:
	short(*func)(int, int, char *, float);
CODE:
	func   = INT2PTR(short(*)(int, int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2, f3);
OUTPUT:
	RETVAL

float
nci_fiitf( c_func, i0, i1, t2, f3 )
	SV* c_func
	int i0
	int i1
	char * t2
	float f3
PREINIT:
	float(*func)(int, int, char *, float);
CODE:
	func   = INT2PTR(float(*)(int, int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2, f3);
OUTPUT:
	RETVAL

char *
nci_tiitf( c_func, i0, i1, t2, f3 )
	SV* c_func
	int i0
	int i1
	char * t2
	float f3
PREINIT:
	char *(*func)(int, int, char *, float);
CODE:
	func   = INT2PTR(char *(*)(int, int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2, f3);
OUTPUT:
	RETVAL

int
nci_iiitf( c_func, i0, i1, t2, f3 )
	SV* c_func
	int i0
	int i1
	char * t2
	float f3
PREINIT:
	int(*func)(int, int, char *, float);
CODE:
	func   = INT2PTR(int(*)(int, int, char *, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2, f3);
OUTPUT:
	RETVAL

void *
nci_pppif( c_func, p0, p1, i2, f3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	float f3
PREINIT:
	void *(*func)(void *, void *, int, float);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2, f3);
OUTPUT:
	RETVAL

void
nci_vppif( c_func, p0, p1, i2, f3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	float f3
PREINIT:
	void(*func)(void *, void *, int, float);
CODE:
	func   = INT2PTR(void(*)(void *, void *, int, float), SvIV(c_func) );
	(*func)(p0, p1, i2, f3);

double
nci_dppif( c_func, p0, p1, i2, f3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	float f3
PREINIT:
	double(*func)(void *, void *, int, float);
CODE:
	func   = INT2PTR(double(*)(void *, void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2, f3);
OUTPUT:
	RETVAL

short
nci_sppif( c_func, p0, p1, i2, f3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	float f3
PREINIT:
	short(*func)(void *, void *, int, float);
CODE:
	func   = INT2PTR(short(*)(void *, void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2, f3);
OUTPUT:
	RETVAL

float
nci_fppif( c_func, p0, p1, i2, f3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	float f3
PREINIT:
	float(*func)(void *, void *, int, float);
CODE:
	func   = INT2PTR(float(*)(void *, void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2, f3);
OUTPUT:
	RETVAL

char *
nci_tppif( c_func, p0, p1, i2, f3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	float f3
PREINIT:
	char *(*func)(void *, void *, int, float);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2, f3);
OUTPUT:
	RETVAL

int
nci_ippif( c_func, p0, p1, i2, f3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	float f3
PREINIT:
	int(*func)(void *, void *, int, float);
CODE:
	func   = INT2PTR(int(*)(void *, void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2, f3);
OUTPUT:
	RETVAL

void *
nci_pvpif( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvpif( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvpif( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svpif( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvpif( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvpif( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivpif( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdpif( c_func, d0, p1, i2, f3 )
	SV* c_func
	double d0
	void * p1
	int i2
	float f3
PREINIT:
	void *(*func)(double, void *, int, float);
CODE:
	func   = INT2PTR(void *(*)(double, void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2, f3);
OUTPUT:
	RETVAL

void
nci_vdpif( c_func, d0, p1, i2, f3 )
	SV* c_func
	double d0
	void * p1
	int i2
	float f3
PREINIT:
	void(*func)(double, void *, int, float);
CODE:
	func   = INT2PTR(void(*)(double, void *, int, float), SvIV(c_func) );
	(*func)(d0, p1, i2, f3);

double
nci_ddpif( c_func, d0, p1, i2, f3 )
	SV* c_func
	double d0
	void * p1
	int i2
	float f3
PREINIT:
	double(*func)(double, void *, int, float);
CODE:
	func   = INT2PTR(double(*)(double, void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2, f3);
OUTPUT:
	RETVAL

short
nci_sdpif( c_func, d0, p1, i2, f3 )
	SV* c_func
	double d0
	void * p1
	int i2
	float f3
PREINIT:
	short(*func)(double, void *, int, float);
CODE:
	func   = INT2PTR(short(*)(double, void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2, f3);
OUTPUT:
	RETVAL

float
nci_fdpif( c_func, d0, p1, i2, f3 )
	SV* c_func
	double d0
	void * p1
	int i2
	float f3
PREINIT:
	float(*func)(double, void *, int, float);
CODE:
	func   = INT2PTR(float(*)(double, void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2, f3);
OUTPUT:
	RETVAL

char *
nci_tdpif( c_func, d0, p1, i2, f3 )
	SV* c_func
	double d0
	void * p1
	int i2
	float f3
PREINIT:
	char *(*func)(double, void *, int, float);
CODE:
	func   = INT2PTR(char *(*)(double, void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2, f3);
OUTPUT:
	RETVAL

int
nci_idpif( c_func, d0, p1, i2, f3 )
	SV* c_func
	double d0
	void * p1
	int i2
	float f3
PREINIT:
	int(*func)(double, void *, int, float);
CODE:
	func   = INT2PTR(int(*)(double, void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2, f3);
OUTPUT:
	RETVAL

void *
nci_pspif( c_func, s0, p1, i2, f3 )
	SV* c_func
	short s0
	void * p1
	int i2
	float f3
PREINIT:
	void *(*func)(short, void *, int, float);
CODE:
	func   = INT2PTR(void *(*)(short, void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2, f3);
OUTPUT:
	RETVAL

void
nci_vspif( c_func, s0, p1, i2, f3 )
	SV* c_func
	short s0
	void * p1
	int i2
	float f3
PREINIT:
	void(*func)(short, void *, int, float);
CODE:
	func   = INT2PTR(void(*)(short, void *, int, float), SvIV(c_func) );
	(*func)(s0, p1, i2, f3);

double
nci_dspif( c_func, s0, p1, i2, f3 )
	SV* c_func
	short s0
	void * p1
	int i2
	float f3
PREINIT:
	double(*func)(short, void *, int, float);
CODE:
	func   = INT2PTR(double(*)(short, void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2, f3);
OUTPUT:
	RETVAL

short
nci_sspif( c_func, s0, p1, i2, f3 )
	SV* c_func
	short s0
	void * p1
	int i2
	float f3
PREINIT:
	short(*func)(short, void *, int, float);
CODE:
	func   = INT2PTR(short(*)(short, void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2, f3);
OUTPUT:
	RETVAL

float
nci_fspif( c_func, s0, p1, i2, f3 )
	SV* c_func
	short s0
	void * p1
	int i2
	float f3
PREINIT:
	float(*func)(short, void *, int, float);
CODE:
	func   = INT2PTR(float(*)(short, void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2, f3);
OUTPUT:
	RETVAL

char *
nci_tspif( c_func, s0, p1, i2, f3 )
	SV* c_func
	short s0
	void * p1
	int i2
	float f3
PREINIT:
	char *(*func)(short, void *, int, float);
CODE:
	func   = INT2PTR(char *(*)(short, void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2, f3);
OUTPUT:
	RETVAL

int
nci_ispif( c_func, s0, p1, i2, f3 )
	SV* c_func
	short s0
	void * p1
	int i2
	float f3
PREINIT:
	int(*func)(short, void *, int, float);
CODE:
	func   = INT2PTR(int(*)(short, void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2, f3);
OUTPUT:
	RETVAL

void *
nci_pfpif( c_func, f0, p1, i2, f3 )
	SV* c_func
	float f0
	void * p1
	int i2
	float f3
PREINIT:
	void *(*func)(float, void *, int, float);
CODE:
	func   = INT2PTR(void *(*)(float, void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2, f3);
OUTPUT:
	RETVAL

void
nci_vfpif( c_func, f0, p1, i2, f3 )
	SV* c_func
	float f0
	void * p1
	int i2
	float f3
PREINIT:
	void(*func)(float, void *, int, float);
CODE:
	func   = INT2PTR(void(*)(float, void *, int, float), SvIV(c_func) );
	(*func)(f0, p1, i2, f3);

double
nci_dfpif( c_func, f0, p1, i2, f3 )
	SV* c_func
	float f0
	void * p1
	int i2
	float f3
PREINIT:
	double(*func)(float, void *, int, float);
CODE:
	func   = INT2PTR(double(*)(float, void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2, f3);
OUTPUT:
	RETVAL

short
nci_sfpif( c_func, f0, p1, i2, f3 )
	SV* c_func
	float f0
	void * p1
	int i2
	float f3
PREINIT:
	short(*func)(float, void *, int, float);
CODE:
	func   = INT2PTR(short(*)(float, void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2, f3);
OUTPUT:
	RETVAL

float
nci_ffpif( c_func, f0, p1, i2, f3 )
	SV* c_func
	float f0
	void * p1
	int i2
	float f3
PREINIT:
	float(*func)(float, void *, int, float);
CODE:
	func   = INT2PTR(float(*)(float, void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2, f3);
OUTPUT:
	RETVAL

char *
nci_tfpif( c_func, f0, p1, i2, f3 )
	SV* c_func
	float f0
	void * p1
	int i2
	float f3
PREINIT:
	char *(*func)(float, void *, int, float);
CODE:
	func   = INT2PTR(char *(*)(float, void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2, f3);
OUTPUT:
	RETVAL

int
nci_ifpif( c_func, f0, p1, i2, f3 )
	SV* c_func
	float f0
	void * p1
	int i2
	float f3
PREINIT:
	int(*func)(float, void *, int, float);
CODE:
	func   = INT2PTR(int(*)(float, void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2, f3);
OUTPUT:
	RETVAL

void *
nci_ptpif( c_func, t0, p1, i2, f3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	float f3
PREINIT:
	void *(*func)(char *, void *, int, float);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2, f3);
OUTPUT:
	RETVAL

void
nci_vtpif( c_func, t0, p1, i2, f3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	float f3
PREINIT:
	void(*func)(char *, void *, int, float);
CODE:
	func   = INT2PTR(void(*)(char *, void *, int, float), SvIV(c_func) );
	(*func)(t0, p1, i2, f3);

double
nci_dtpif( c_func, t0, p1, i2, f3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	float f3
PREINIT:
	double(*func)(char *, void *, int, float);
CODE:
	func   = INT2PTR(double(*)(char *, void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2, f3);
OUTPUT:
	RETVAL

short
nci_stpif( c_func, t0, p1, i2, f3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	float f3
PREINIT:
	short(*func)(char *, void *, int, float);
CODE:
	func   = INT2PTR(short(*)(char *, void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2, f3);
OUTPUT:
	RETVAL

float
nci_ftpif( c_func, t0, p1, i2, f3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	float f3
PREINIT:
	float(*func)(char *, void *, int, float);
CODE:
	func   = INT2PTR(float(*)(char *, void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2, f3);
OUTPUT:
	RETVAL

char *
nci_ttpif( c_func, t0, p1, i2, f3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	float f3
PREINIT:
	char *(*func)(char *, void *, int, float);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2, f3);
OUTPUT:
	RETVAL

int
nci_itpif( c_func, t0, p1, i2, f3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	float f3
PREINIT:
	int(*func)(char *, void *, int, float);
CODE:
	func   = INT2PTR(int(*)(char *, void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2, f3);
OUTPUT:
	RETVAL

void *
nci_pipif( c_func, i0, p1, i2, f3 )
	SV* c_func
	int i0
	void * p1
	int i2
	float f3
PREINIT:
	void *(*func)(int, void *, int, float);
CODE:
	func   = INT2PTR(void *(*)(int, void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2, f3);
OUTPUT:
	RETVAL

void
nci_vipif( c_func, i0, p1, i2, f3 )
	SV* c_func
	int i0
	void * p1
	int i2
	float f3
PREINIT:
	void(*func)(int, void *, int, float);
CODE:
	func   = INT2PTR(void(*)(int, void *, int, float), SvIV(c_func) );
	(*func)(i0, p1, i2, f3);

double
nci_dipif( c_func, i0, p1, i2, f3 )
	SV* c_func
	int i0
	void * p1
	int i2
	float f3
PREINIT:
	double(*func)(int, void *, int, float);
CODE:
	func   = INT2PTR(double(*)(int, void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2, f3);
OUTPUT:
	RETVAL

short
nci_sipif( c_func, i0, p1, i2, f3 )
	SV* c_func
	int i0
	void * p1
	int i2
	float f3
PREINIT:
	short(*func)(int, void *, int, float);
CODE:
	func   = INT2PTR(short(*)(int, void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2, f3);
OUTPUT:
	RETVAL

float
nci_fipif( c_func, i0, p1, i2, f3 )
	SV* c_func
	int i0
	void * p1
	int i2
	float f3
PREINIT:
	float(*func)(int, void *, int, float);
CODE:
	func   = INT2PTR(float(*)(int, void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2, f3);
OUTPUT:
	RETVAL

char *
nci_tipif( c_func, i0, p1, i2, f3 )
	SV* c_func
	int i0
	void * p1
	int i2
	float f3
PREINIT:
	char *(*func)(int, void *, int, float);
CODE:
	func   = INT2PTR(char *(*)(int, void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2, f3);
OUTPUT:
	RETVAL

int
nci_iipif( c_func, i0, p1, i2, f3 )
	SV* c_func
	int i0
	void * p1
	int i2
	float f3
PREINIT:
	int(*func)(int, void *, int, float);
CODE:
	func   = INT2PTR(int(*)(int, void *, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2, f3);
OUTPUT:
	RETVAL

void *
nci_ppdif( c_func, p0, d1, i2, f3 )
	SV* c_func
	void * p0
	double d1
	int i2
	float f3
PREINIT:
	void *(*func)(void *, double, int, float);
CODE:
	func   = INT2PTR(void *(*)(void *, double, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2, f3);
OUTPUT:
	RETVAL

void
nci_vpdif( c_func, p0, d1, i2, f3 )
	SV* c_func
	void * p0
	double d1
	int i2
	float f3
PREINIT:
	void(*func)(void *, double, int, float);
CODE:
	func   = INT2PTR(void(*)(void *, double, int, float), SvIV(c_func) );
	(*func)(p0, d1, i2, f3);

double
nci_dpdif( c_func, p0, d1, i2, f3 )
	SV* c_func
	void * p0
	double d1
	int i2
	float f3
PREINIT:
	double(*func)(void *, double, int, float);
CODE:
	func   = INT2PTR(double(*)(void *, double, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2, f3);
OUTPUT:
	RETVAL

short
nci_spdif( c_func, p0, d1, i2, f3 )
	SV* c_func
	void * p0
	double d1
	int i2
	float f3
PREINIT:
	short(*func)(void *, double, int, float);
CODE:
	func   = INT2PTR(short(*)(void *, double, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2, f3);
OUTPUT:
	RETVAL

float
nci_fpdif( c_func, p0, d1, i2, f3 )
	SV* c_func
	void * p0
	double d1
	int i2
	float f3
PREINIT:
	float(*func)(void *, double, int, float);
CODE:
	func   = INT2PTR(float(*)(void *, double, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2, f3);
OUTPUT:
	RETVAL

char *
nci_tpdif( c_func, p0, d1, i2, f3 )
	SV* c_func
	void * p0
	double d1
	int i2
	float f3
PREINIT:
	char *(*func)(void *, double, int, float);
CODE:
	func   = INT2PTR(char *(*)(void *, double, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2, f3);
OUTPUT:
	RETVAL

int
nci_ipdif( c_func, p0, d1, i2, f3 )
	SV* c_func
	void * p0
	double d1
	int i2
	float f3
PREINIT:
	int(*func)(void *, double, int, float);
CODE:
	func   = INT2PTR(int(*)(void *, double, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2, f3);
OUTPUT:
	RETVAL

void *
nci_pvdif( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvdif( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvdif( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svdif( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvdif( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvdif( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivdif( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pddif( c_func, d0, d1, i2, f3 )
	SV* c_func
	double d0
	double d1
	int i2
	float f3
PREINIT:
	void *(*func)(double, double, int, float);
CODE:
	func   = INT2PTR(void *(*)(double, double, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2, f3);
OUTPUT:
	RETVAL

void
nci_vddif( c_func, d0, d1, i2, f3 )
	SV* c_func
	double d0
	double d1
	int i2
	float f3
PREINIT:
	void(*func)(double, double, int, float);
CODE:
	func   = INT2PTR(void(*)(double, double, int, float), SvIV(c_func) );
	(*func)(d0, d1, i2, f3);

double
nci_dddif( c_func, d0, d1, i2, f3 )
	SV* c_func
	double d0
	double d1
	int i2
	float f3
PREINIT:
	double(*func)(double, double, int, float);
CODE:
	func   = INT2PTR(double(*)(double, double, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2, f3);
OUTPUT:
	RETVAL

short
nci_sddif( c_func, d0, d1, i2, f3 )
	SV* c_func
	double d0
	double d1
	int i2
	float f3
PREINIT:
	short(*func)(double, double, int, float);
CODE:
	func   = INT2PTR(short(*)(double, double, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2, f3);
OUTPUT:
	RETVAL

float
nci_fddif( c_func, d0, d1, i2, f3 )
	SV* c_func
	double d0
	double d1
	int i2
	float f3
PREINIT:
	float(*func)(double, double, int, float);
CODE:
	func   = INT2PTR(float(*)(double, double, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2, f3);
OUTPUT:
	RETVAL

char *
nci_tddif( c_func, d0, d1, i2, f3 )
	SV* c_func
	double d0
	double d1
	int i2
	float f3
PREINIT:
	char *(*func)(double, double, int, float);
CODE:
	func   = INT2PTR(char *(*)(double, double, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2, f3);
OUTPUT:
	RETVAL

int
nci_iddif( c_func, d0, d1, i2, f3 )
	SV* c_func
	double d0
	double d1
	int i2
	float f3
PREINIT:
	int(*func)(double, double, int, float);
CODE:
	func   = INT2PTR(int(*)(double, double, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2, f3);
OUTPUT:
	RETVAL

void *
nci_psdif( c_func, s0, d1, i2, f3 )
	SV* c_func
	short s0
	double d1
	int i2
	float f3
PREINIT:
	void *(*func)(short, double, int, float);
CODE:
	func   = INT2PTR(void *(*)(short, double, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2, f3);
OUTPUT:
	RETVAL

void
nci_vsdif( c_func, s0, d1, i2, f3 )
	SV* c_func
	short s0
	double d1
	int i2
	float f3
PREINIT:
	void(*func)(short, double, int, float);
CODE:
	func   = INT2PTR(void(*)(short, double, int, float), SvIV(c_func) );
	(*func)(s0, d1, i2, f3);

double
nci_dsdif( c_func, s0, d1, i2, f3 )
	SV* c_func
	short s0
	double d1
	int i2
	float f3
PREINIT:
	double(*func)(short, double, int, float);
CODE:
	func   = INT2PTR(double(*)(short, double, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2, f3);
OUTPUT:
	RETVAL

short
nci_ssdif( c_func, s0, d1, i2, f3 )
	SV* c_func
	short s0
	double d1
	int i2
	float f3
PREINIT:
	short(*func)(short, double, int, float);
CODE:
	func   = INT2PTR(short(*)(short, double, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2, f3);
OUTPUT:
	RETVAL

float
nci_fsdif( c_func, s0, d1, i2, f3 )
	SV* c_func
	short s0
	double d1
	int i2
	float f3
PREINIT:
	float(*func)(short, double, int, float);
CODE:
	func   = INT2PTR(float(*)(short, double, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2, f3);
OUTPUT:
	RETVAL

char *
nci_tsdif( c_func, s0, d1, i2, f3 )
	SV* c_func
	short s0
	double d1
	int i2
	float f3
PREINIT:
	char *(*func)(short, double, int, float);
CODE:
	func   = INT2PTR(char *(*)(short, double, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2, f3);
OUTPUT:
	RETVAL

int
nci_isdif( c_func, s0, d1, i2, f3 )
	SV* c_func
	short s0
	double d1
	int i2
	float f3
PREINIT:
	int(*func)(short, double, int, float);
CODE:
	func   = INT2PTR(int(*)(short, double, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2, f3);
OUTPUT:
	RETVAL

void *
nci_pfdif( c_func, f0, d1, i2, f3 )
	SV* c_func
	float f0
	double d1
	int i2
	float f3
PREINIT:
	void *(*func)(float, double, int, float);
CODE:
	func   = INT2PTR(void *(*)(float, double, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2, f3);
OUTPUT:
	RETVAL

void
nci_vfdif( c_func, f0, d1, i2, f3 )
	SV* c_func
	float f0
	double d1
	int i2
	float f3
PREINIT:
	void(*func)(float, double, int, float);
CODE:
	func   = INT2PTR(void(*)(float, double, int, float), SvIV(c_func) );
	(*func)(f0, d1, i2, f3);

double
nci_dfdif( c_func, f0, d1, i2, f3 )
	SV* c_func
	float f0
	double d1
	int i2
	float f3
PREINIT:
	double(*func)(float, double, int, float);
CODE:
	func   = INT2PTR(double(*)(float, double, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2, f3);
OUTPUT:
	RETVAL

short
nci_sfdif( c_func, f0, d1, i2, f3 )
	SV* c_func
	float f0
	double d1
	int i2
	float f3
PREINIT:
	short(*func)(float, double, int, float);
CODE:
	func   = INT2PTR(short(*)(float, double, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2, f3);
OUTPUT:
	RETVAL

float
nci_ffdif( c_func, f0, d1, i2, f3 )
	SV* c_func
	float f0
	double d1
	int i2
	float f3
PREINIT:
	float(*func)(float, double, int, float);
CODE:
	func   = INT2PTR(float(*)(float, double, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2, f3);
OUTPUT:
	RETVAL

char *
nci_tfdif( c_func, f0, d1, i2, f3 )
	SV* c_func
	float f0
	double d1
	int i2
	float f3
PREINIT:
	char *(*func)(float, double, int, float);
CODE:
	func   = INT2PTR(char *(*)(float, double, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2, f3);
OUTPUT:
	RETVAL

int
nci_ifdif( c_func, f0, d1, i2, f3 )
	SV* c_func
	float f0
	double d1
	int i2
	float f3
PREINIT:
	int(*func)(float, double, int, float);
CODE:
	func   = INT2PTR(int(*)(float, double, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2, f3);
OUTPUT:
	RETVAL

void *
nci_ptdif( c_func, t0, d1, i2, f3 )
	SV* c_func
	char * t0
	double d1
	int i2
	float f3
PREINIT:
	void *(*func)(char *, double, int, float);
CODE:
	func   = INT2PTR(void *(*)(char *, double, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2, f3);
OUTPUT:
	RETVAL

void
nci_vtdif( c_func, t0, d1, i2, f3 )
	SV* c_func
	char * t0
	double d1
	int i2
	float f3
PREINIT:
	void(*func)(char *, double, int, float);
CODE:
	func   = INT2PTR(void(*)(char *, double, int, float), SvIV(c_func) );
	(*func)(t0, d1, i2, f3);

double
nci_dtdif( c_func, t0, d1, i2, f3 )
	SV* c_func
	char * t0
	double d1
	int i2
	float f3
PREINIT:
	double(*func)(char *, double, int, float);
CODE:
	func   = INT2PTR(double(*)(char *, double, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2, f3);
OUTPUT:
	RETVAL

short
nci_stdif( c_func, t0, d1, i2, f3 )
	SV* c_func
	char * t0
	double d1
	int i2
	float f3
PREINIT:
	short(*func)(char *, double, int, float);
CODE:
	func   = INT2PTR(short(*)(char *, double, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2, f3);
OUTPUT:
	RETVAL

float
nci_ftdif( c_func, t0, d1, i2, f3 )
	SV* c_func
	char * t0
	double d1
	int i2
	float f3
PREINIT:
	float(*func)(char *, double, int, float);
CODE:
	func   = INT2PTR(float(*)(char *, double, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2, f3);
OUTPUT:
	RETVAL

char *
nci_ttdif( c_func, t0, d1, i2, f3 )
	SV* c_func
	char * t0
	double d1
	int i2
	float f3
PREINIT:
	char *(*func)(char *, double, int, float);
CODE:
	func   = INT2PTR(char *(*)(char *, double, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2, f3);
OUTPUT:
	RETVAL

int
nci_itdif( c_func, t0, d1, i2, f3 )
	SV* c_func
	char * t0
	double d1
	int i2
	float f3
PREINIT:
	int(*func)(char *, double, int, float);
CODE:
	func   = INT2PTR(int(*)(char *, double, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2, f3);
OUTPUT:
	RETVAL

void *
nci_pidif( c_func, i0, d1, i2, f3 )
	SV* c_func
	int i0
	double d1
	int i2
	float f3
PREINIT:
	void *(*func)(int, double, int, float);
CODE:
	func   = INT2PTR(void *(*)(int, double, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2, f3);
OUTPUT:
	RETVAL

void
nci_vidif( c_func, i0, d1, i2, f3 )
	SV* c_func
	int i0
	double d1
	int i2
	float f3
PREINIT:
	void(*func)(int, double, int, float);
CODE:
	func   = INT2PTR(void(*)(int, double, int, float), SvIV(c_func) );
	(*func)(i0, d1, i2, f3);

double
nci_didif( c_func, i0, d1, i2, f3 )
	SV* c_func
	int i0
	double d1
	int i2
	float f3
PREINIT:
	double(*func)(int, double, int, float);
CODE:
	func   = INT2PTR(double(*)(int, double, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2, f3);
OUTPUT:
	RETVAL

short
nci_sidif( c_func, i0, d1, i2, f3 )
	SV* c_func
	int i0
	double d1
	int i2
	float f3
PREINIT:
	short(*func)(int, double, int, float);
CODE:
	func   = INT2PTR(short(*)(int, double, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2, f3);
OUTPUT:
	RETVAL

float
nci_fidif( c_func, i0, d1, i2, f3 )
	SV* c_func
	int i0
	double d1
	int i2
	float f3
PREINIT:
	float(*func)(int, double, int, float);
CODE:
	func   = INT2PTR(float(*)(int, double, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2, f3);
OUTPUT:
	RETVAL

char *
nci_tidif( c_func, i0, d1, i2, f3 )
	SV* c_func
	int i0
	double d1
	int i2
	float f3
PREINIT:
	char *(*func)(int, double, int, float);
CODE:
	func   = INT2PTR(char *(*)(int, double, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2, f3);
OUTPUT:
	RETVAL

int
nci_iidif( c_func, i0, d1, i2, f3 )
	SV* c_func
	int i0
	double d1
	int i2
	float f3
PREINIT:
	int(*func)(int, double, int, float);
CODE:
	func   = INT2PTR(int(*)(int, double, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2, f3);
OUTPUT:
	RETVAL

void *
nci_ppsif( c_func, p0, s1, i2, f3 )
	SV* c_func
	void * p0
	short s1
	int i2
	float f3
PREINIT:
	void *(*func)(void *, short, int, float);
CODE:
	func   = INT2PTR(void *(*)(void *, short, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2, f3);
OUTPUT:
	RETVAL

void
nci_vpsif( c_func, p0, s1, i2, f3 )
	SV* c_func
	void * p0
	short s1
	int i2
	float f3
PREINIT:
	void(*func)(void *, short, int, float);
CODE:
	func   = INT2PTR(void(*)(void *, short, int, float), SvIV(c_func) );
	(*func)(p0, s1, i2, f3);

double
nci_dpsif( c_func, p0, s1, i2, f3 )
	SV* c_func
	void * p0
	short s1
	int i2
	float f3
PREINIT:
	double(*func)(void *, short, int, float);
CODE:
	func   = INT2PTR(double(*)(void *, short, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2, f3);
OUTPUT:
	RETVAL

short
nci_spsif( c_func, p0, s1, i2, f3 )
	SV* c_func
	void * p0
	short s1
	int i2
	float f3
PREINIT:
	short(*func)(void *, short, int, float);
CODE:
	func   = INT2PTR(short(*)(void *, short, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2, f3);
OUTPUT:
	RETVAL

float
nci_fpsif( c_func, p0, s1, i2, f3 )
	SV* c_func
	void * p0
	short s1
	int i2
	float f3
PREINIT:
	float(*func)(void *, short, int, float);
CODE:
	func   = INT2PTR(float(*)(void *, short, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2, f3);
OUTPUT:
	RETVAL

char *
nci_tpsif( c_func, p0, s1, i2, f3 )
	SV* c_func
	void * p0
	short s1
	int i2
	float f3
PREINIT:
	char *(*func)(void *, short, int, float);
CODE:
	func   = INT2PTR(char *(*)(void *, short, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2, f3);
OUTPUT:
	RETVAL

int
nci_ipsif( c_func, p0, s1, i2, f3 )
	SV* c_func
	void * p0
	short s1
	int i2
	float f3
PREINIT:
	int(*func)(void *, short, int, float);
CODE:
	func   = INT2PTR(int(*)(void *, short, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2, f3);
OUTPUT:
	RETVAL

void *
nci_pvsif( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvsif( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvsif( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svsif( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvsif( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvsif( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivsif( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdsif( c_func, d0, s1, i2, f3 )
	SV* c_func
	double d0
	short s1
	int i2
	float f3
PREINIT:
	void *(*func)(double, short, int, float);
CODE:
	func   = INT2PTR(void *(*)(double, short, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2, f3);
OUTPUT:
	RETVAL

void
nci_vdsif( c_func, d0, s1, i2, f3 )
	SV* c_func
	double d0
	short s1
	int i2
	float f3
PREINIT:
	void(*func)(double, short, int, float);
CODE:
	func   = INT2PTR(void(*)(double, short, int, float), SvIV(c_func) );
	(*func)(d0, s1, i2, f3);

double
nci_ddsif( c_func, d0, s1, i2, f3 )
	SV* c_func
	double d0
	short s1
	int i2
	float f3
PREINIT:
	double(*func)(double, short, int, float);
CODE:
	func   = INT2PTR(double(*)(double, short, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2, f3);
OUTPUT:
	RETVAL

short
nci_sdsif( c_func, d0, s1, i2, f3 )
	SV* c_func
	double d0
	short s1
	int i2
	float f3
PREINIT:
	short(*func)(double, short, int, float);
CODE:
	func   = INT2PTR(short(*)(double, short, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2, f3);
OUTPUT:
	RETVAL

float
nci_fdsif( c_func, d0, s1, i2, f3 )
	SV* c_func
	double d0
	short s1
	int i2
	float f3
PREINIT:
	float(*func)(double, short, int, float);
CODE:
	func   = INT2PTR(float(*)(double, short, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2, f3);
OUTPUT:
	RETVAL

char *
nci_tdsif( c_func, d0, s1, i2, f3 )
	SV* c_func
	double d0
	short s1
	int i2
	float f3
PREINIT:
	char *(*func)(double, short, int, float);
CODE:
	func   = INT2PTR(char *(*)(double, short, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2, f3);
OUTPUT:
	RETVAL

int
nci_idsif( c_func, d0, s1, i2, f3 )
	SV* c_func
	double d0
	short s1
	int i2
	float f3
PREINIT:
	int(*func)(double, short, int, float);
CODE:
	func   = INT2PTR(int(*)(double, short, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2, f3);
OUTPUT:
	RETVAL

void *
nci_pssif( c_func, s0, s1, i2, f3 )
	SV* c_func
	short s0
	short s1
	int i2
	float f3
PREINIT:
	void *(*func)(short, short, int, float);
CODE:
	func   = INT2PTR(void *(*)(short, short, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2, f3);
OUTPUT:
	RETVAL

void
nci_vssif( c_func, s0, s1, i2, f3 )
	SV* c_func
	short s0
	short s1
	int i2
	float f3
PREINIT:
	void(*func)(short, short, int, float);
CODE:
	func   = INT2PTR(void(*)(short, short, int, float), SvIV(c_func) );
	(*func)(s0, s1, i2, f3);

double
nci_dssif( c_func, s0, s1, i2, f3 )
	SV* c_func
	short s0
	short s1
	int i2
	float f3
PREINIT:
	double(*func)(short, short, int, float);
CODE:
	func   = INT2PTR(double(*)(short, short, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2, f3);
OUTPUT:
	RETVAL

short
nci_sssif( c_func, s0, s1, i2, f3 )
	SV* c_func
	short s0
	short s1
	int i2
	float f3
PREINIT:
	short(*func)(short, short, int, float);
CODE:
	func   = INT2PTR(short(*)(short, short, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2, f3);
OUTPUT:
	RETVAL

float
nci_fssif( c_func, s0, s1, i2, f3 )
	SV* c_func
	short s0
	short s1
	int i2
	float f3
PREINIT:
	float(*func)(short, short, int, float);
CODE:
	func   = INT2PTR(float(*)(short, short, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2, f3);
OUTPUT:
	RETVAL

char *
nci_tssif( c_func, s0, s1, i2, f3 )
	SV* c_func
	short s0
	short s1
	int i2
	float f3
PREINIT:
	char *(*func)(short, short, int, float);
CODE:
	func   = INT2PTR(char *(*)(short, short, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2, f3);
OUTPUT:
	RETVAL

int
nci_issif( c_func, s0, s1, i2, f3 )
	SV* c_func
	short s0
	short s1
	int i2
	float f3
PREINIT:
	int(*func)(short, short, int, float);
CODE:
	func   = INT2PTR(int(*)(short, short, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2, f3);
OUTPUT:
	RETVAL

void *
nci_pfsif( c_func, f0, s1, i2, f3 )
	SV* c_func
	float f0
	short s1
	int i2
	float f3
PREINIT:
	void *(*func)(float, short, int, float);
CODE:
	func   = INT2PTR(void *(*)(float, short, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2, f3);
OUTPUT:
	RETVAL

void
nci_vfsif( c_func, f0, s1, i2, f3 )
	SV* c_func
	float f0
	short s1
	int i2
	float f3
PREINIT:
	void(*func)(float, short, int, float);
CODE:
	func   = INT2PTR(void(*)(float, short, int, float), SvIV(c_func) );
	(*func)(f0, s1, i2, f3);

double
nci_dfsif( c_func, f0, s1, i2, f3 )
	SV* c_func
	float f0
	short s1
	int i2
	float f3
PREINIT:
	double(*func)(float, short, int, float);
CODE:
	func   = INT2PTR(double(*)(float, short, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2, f3);
OUTPUT:
	RETVAL

short
nci_sfsif( c_func, f0, s1, i2, f3 )
	SV* c_func
	float f0
	short s1
	int i2
	float f3
PREINIT:
	short(*func)(float, short, int, float);
CODE:
	func   = INT2PTR(short(*)(float, short, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2, f3);
OUTPUT:
	RETVAL

float
nci_ffsif( c_func, f0, s1, i2, f3 )
	SV* c_func
	float f0
	short s1
	int i2
	float f3
PREINIT:
	float(*func)(float, short, int, float);
CODE:
	func   = INT2PTR(float(*)(float, short, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2, f3);
OUTPUT:
	RETVAL

char *
nci_tfsif( c_func, f0, s1, i2, f3 )
	SV* c_func
	float f0
	short s1
	int i2
	float f3
PREINIT:
	char *(*func)(float, short, int, float);
CODE:
	func   = INT2PTR(char *(*)(float, short, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2, f3);
OUTPUT:
	RETVAL

int
nci_ifsif( c_func, f0, s1, i2, f3 )
	SV* c_func
	float f0
	short s1
	int i2
	float f3
PREINIT:
	int(*func)(float, short, int, float);
CODE:
	func   = INT2PTR(int(*)(float, short, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2, f3);
OUTPUT:
	RETVAL

void *
nci_ptsif( c_func, t0, s1, i2, f3 )
	SV* c_func
	char * t0
	short s1
	int i2
	float f3
PREINIT:
	void *(*func)(char *, short, int, float);
CODE:
	func   = INT2PTR(void *(*)(char *, short, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2, f3);
OUTPUT:
	RETVAL

void
nci_vtsif( c_func, t0, s1, i2, f3 )
	SV* c_func
	char * t0
	short s1
	int i2
	float f3
PREINIT:
	void(*func)(char *, short, int, float);
CODE:
	func   = INT2PTR(void(*)(char *, short, int, float), SvIV(c_func) );
	(*func)(t0, s1, i2, f3);

double
nci_dtsif( c_func, t0, s1, i2, f3 )
	SV* c_func
	char * t0
	short s1
	int i2
	float f3
PREINIT:
	double(*func)(char *, short, int, float);
CODE:
	func   = INT2PTR(double(*)(char *, short, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2, f3);
OUTPUT:
	RETVAL

short
nci_stsif( c_func, t0, s1, i2, f3 )
	SV* c_func
	char * t0
	short s1
	int i2
	float f3
PREINIT:
	short(*func)(char *, short, int, float);
CODE:
	func   = INT2PTR(short(*)(char *, short, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2, f3);
OUTPUT:
	RETVAL

float
nci_ftsif( c_func, t0, s1, i2, f3 )
	SV* c_func
	char * t0
	short s1
	int i2
	float f3
PREINIT:
	float(*func)(char *, short, int, float);
CODE:
	func   = INT2PTR(float(*)(char *, short, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2, f3);
OUTPUT:
	RETVAL

char *
nci_ttsif( c_func, t0, s1, i2, f3 )
	SV* c_func
	char * t0
	short s1
	int i2
	float f3
PREINIT:
	char *(*func)(char *, short, int, float);
CODE:
	func   = INT2PTR(char *(*)(char *, short, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2, f3);
OUTPUT:
	RETVAL

int
nci_itsif( c_func, t0, s1, i2, f3 )
	SV* c_func
	char * t0
	short s1
	int i2
	float f3
PREINIT:
	int(*func)(char *, short, int, float);
CODE:
	func   = INT2PTR(int(*)(char *, short, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2, f3);
OUTPUT:
	RETVAL

void *
nci_pisif( c_func, i0, s1, i2, f3 )
	SV* c_func
	int i0
	short s1
	int i2
	float f3
PREINIT:
	void *(*func)(int, short, int, float);
CODE:
	func   = INT2PTR(void *(*)(int, short, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2, f3);
OUTPUT:
	RETVAL

void
nci_visif( c_func, i0, s1, i2, f3 )
	SV* c_func
	int i0
	short s1
	int i2
	float f3
PREINIT:
	void(*func)(int, short, int, float);
CODE:
	func   = INT2PTR(void(*)(int, short, int, float), SvIV(c_func) );
	(*func)(i0, s1, i2, f3);

double
nci_disif( c_func, i0, s1, i2, f3 )
	SV* c_func
	int i0
	short s1
	int i2
	float f3
PREINIT:
	double(*func)(int, short, int, float);
CODE:
	func   = INT2PTR(double(*)(int, short, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2, f3);
OUTPUT:
	RETVAL

short
nci_sisif( c_func, i0, s1, i2, f3 )
	SV* c_func
	int i0
	short s1
	int i2
	float f3
PREINIT:
	short(*func)(int, short, int, float);
CODE:
	func   = INT2PTR(short(*)(int, short, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2, f3);
OUTPUT:
	RETVAL

float
nci_fisif( c_func, i0, s1, i2, f3 )
	SV* c_func
	int i0
	short s1
	int i2
	float f3
PREINIT:
	float(*func)(int, short, int, float);
CODE:
	func   = INT2PTR(float(*)(int, short, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2, f3);
OUTPUT:
	RETVAL

char *
nci_tisif( c_func, i0, s1, i2, f3 )
	SV* c_func
	int i0
	short s1
	int i2
	float f3
PREINIT:
	char *(*func)(int, short, int, float);
CODE:
	func   = INT2PTR(char *(*)(int, short, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2, f3);
OUTPUT:
	RETVAL

int
nci_iisif( c_func, i0, s1, i2, f3 )
	SV* c_func
	int i0
	short s1
	int i2
	float f3
PREINIT:
	int(*func)(int, short, int, float);
CODE:
	func   = INT2PTR(int(*)(int, short, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2, f3);
OUTPUT:
	RETVAL

void *
nci_ppfif( c_func, p0, f1, i2, f3 )
	SV* c_func
	void * p0
	float f1
	int i2
	float f3
PREINIT:
	void *(*func)(void *, float, int, float);
CODE:
	func   = INT2PTR(void *(*)(void *, float, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2, f3);
OUTPUT:
	RETVAL

void
nci_vpfif( c_func, p0, f1, i2, f3 )
	SV* c_func
	void * p0
	float f1
	int i2
	float f3
PREINIT:
	void(*func)(void *, float, int, float);
CODE:
	func   = INT2PTR(void(*)(void *, float, int, float), SvIV(c_func) );
	(*func)(p0, f1, i2, f3);

double
nci_dpfif( c_func, p0, f1, i2, f3 )
	SV* c_func
	void * p0
	float f1
	int i2
	float f3
PREINIT:
	double(*func)(void *, float, int, float);
CODE:
	func   = INT2PTR(double(*)(void *, float, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2, f3);
OUTPUT:
	RETVAL

short
nci_spfif( c_func, p0, f1, i2, f3 )
	SV* c_func
	void * p0
	float f1
	int i2
	float f3
PREINIT:
	short(*func)(void *, float, int, float);
CODE:
	func   = INT2PTR(short(*)(void *, float, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2, f3);
OUTPUT:
	RETVAL

float
nci_fpfif( c_func, p0, f1, i2, f3 )
	SV* c_func
	void * p0
	float f1
	int i2
	float f3
PREINIT:
	float(*func)(void *, float, int, float);
CODE:
	func   = INT2PTR(float(*)(void *, float, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2, f3);
OUTPUT:
	RETVAL

char *
nci_tpfif( c_func, p0, f1, i2, f3 )
	SV* c_func
	void * p0
	float f1
	int i2
	float f3
PREINIT:
	char *(*func)(void *, float, int, float);
CODE:
	func   = INT2PTR(char *(*)(void *, float, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2, f3);
OUTPUT:
	RETVAL

int
nci_ipfif( c_func, p0, f1, i2, f3 )
	SV* c_func
	void * p0
	float f1
	int i2
	float f3
PREINIT:
	int(*func)(void *, float, int, float);
CODE:
	func   = INT2PTR(int(*)(void *, float, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2, f3);
OUTPUT:
	RETVAL

void *
nci_pvfif( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvfif( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvfif( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svfif( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvfif( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvfif( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivfif( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdfif( c_func, d0, f1, i2, f3 )
	SV* c_func
	double d0
	float f1
	int i2
	float f3
PREINIT:
	void *(*func)(double, float, int, float);
CODE:
	func   = INT2PTR(void *(*)(double, float, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2, f3);
OUTPUT:
	RETVAL

void
nci_vdfif( c_func, d0, f1, i2, f3 )
	SV* c_func
	double d0
	float f1
	int i2
	float f3
PREINIT:
	void(*func)(double, float, int, float);
CODE:
	func   = INT2PTR(void(*)(double, float, int, float), SvIV(c_func) );
	(*func)(d0, f1, i2, f3);

double
nci_ddfif( c_func, d0, f1, i2, f3 )
	SV* c_func
	double d0
	float f1
	int i2
	float f3
PREINIT:
	double(*func)(double, float, int, float);
CODE:
	func   = INT2PTR(double(*)(double, float, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2, f3);
OUTPUT:
	RETVAL

short
nci_sdfif( c_func, d0, f1, i2, f3 )
	SV* c_func
	double d0
	float f1
	int i2
	float f3
PREINIT:
	short(*func)(double, float, int, float);
CODE:
	func   = INT2PTR(short(*)(double, float, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2, f3);
OUTPUT:
	RETVAL

float
nci_fdfif( c_func, d0, f1, i2, f3 )
	SV* c_func
	double d0
	float f1
	int i2
	float f3
PREINIT:
	float(*func)(double, float, int, float);
CODE:
	func   = INT2PTR(float(*)(double, float, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2, f3);
OUTPUT:
	RETVAL

char *
nci_tdfif( c_func, d0, f1, i2, f3 )
	SV* c_func
	double d0
	float f1
	int i2
	float f3
PREINIT:
	char *(*func)(double, float, int, float);
CODE:
	func   = INT2PTR(char *(*)(double, float, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2, f3);
OUTPUT:
	RETVAL

int
nci_idfif( c_func, d0, f1, i2, f3 )
	SV* c_func
	double d0
	float f1
	int i2
	float f3
PREINIT:
	int(*func)(double, float, int, float);
CODE:
	func   = INT2PTR(int(*)(double, float, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2, f3);
OUTPUT:
	RETVAL

void *
nci_psfif( c_func, s0, f1, i2, f3 )
	SV* c_func
	short s0
	float f1
	int i2
	float f3
PREINIT:
	void *(*func)(short, float, int, float);
CODE:
	func   = INT2PTR(void *(*)(short, float, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2, f3);
OUTPUT:
	RETVAL

void
nci_vsfif( c_func, s0, f1, i2, f3 )
	SV* c_func
	short s0
	float f1
	int i2
	float f3
PREINIT:
	void(*func)(short, float, int, float);
CODE:
	func   = INT2PTR(void(*)(short, float, int, float), SvIV(c_func) );
	(*func)(s0, f1, i2, f3);

double
nci_dsfif( c_func, s0, f1, i2, f3 )
	SV* c_func
	short s0
	float f1
	int i2
	float f3
PREINIT:
	double(*func)(short, float, int, float);
CODE:
	func   = INT2PTR(double(*)(short, float, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2, f3);
OUTPUT:
	RETVAL

short
nci_ssfif( c_func, s0, f1, i2, f3 )
	SV* c_func
	short s0
	float f1
	int i2
	float f3
PREINIT:
	short(*func)(short, float, int, float);
CODE:
	func   = INT2PTR(short(*)(short, float, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2, f3);
OUTPUT:
	RETVAL

float
nci_fsfif( c_func, s0, f1, i2, f3 )
	SV* c_func
	short s0
	float f1
	int i2
	float f3
PREINIT:
	float(*func)(short, float, int, float);
CODE:
	func   = INT2PTR(float(*)(short, float, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2, f3);
OUTPUT:
	RETVAL

char *
nci_tsfif( c_func, s0, f1, i2, f3 )
	SV* c_func
	short s0
	float f1
	int i2
	float f3
PREINIT:
	char *(*func)(short, float, int, float);
CODE:
	func   = INT2PTR(char *(*)(short, float, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2, f3);
OUTPUT:
	RETVAL

int
nci_isfif( c_func, s0, f1, i2, f3 )
	SV* c_func
	short s0
	float f1
	int i2
	float f3
PREINIT:
	int(*func)(short, float, int, float);
CODE:
	func   = INT2PTR(int(*)(short, float, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2, f3);
OUTPUT:
	RETVAL

void *
nci_pffif( c_func, f0, f1, i2, f3 )
	SV* c_func
	float f0
	float f1
	int i2
	float f3
PREINIT:
	void *(*func)(float, float, int, float);
CODE:
	func   = INT2PTR(void *(*)(float, float, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2, f3);
OUTPUT:
	RETVAL

void
nci_vffif( c_func, f0, f1, i2, f3 )
	SV* c_func
	float f0
	float f1
	int i2
	float f3
PREINIT:
	void(*func)(float, float, int, float);
CODE:
	func   = INT2PTR(void(*)(float, float, int, float), SvIV(c_func) );
	(*func)(f0, f1, i2, f3);

double
nci_dffif( c_func, f0, f1, i2, f3 )
	SV* c_func
	float f0
	float f1
	int i2
	float f3
PREINIT:
	double(*func)(float, float, int, float);
CODE:
	func   = INT2PTR(double(*)(float, float, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2, f3);
OUTPUT:
	RETVAL

short
nci_sffif( c_func, f0, f1, i2, f3 )
	SV* c_func
	float f0
	float f1
	int i2
	float f3
PREINIT:
	short(*func)(float, float, int, float);
CODE:
	func   = INT2PTR(short(*)(float, float, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2, f3);
OUTPUT:
	RETVAL

float
nci_fffif( c_func, f0, f1, i2, f3 )
	SV* c_func
	float f0
	float f1
	int i2
	float f3
PREINIT:
	float(*func)(float, float, int, float);
CODE:
	func   = INT2PTR(float(*)(float, float, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2, f3);
OUTPUT:
	RETVAL

char *
nci_tffif( c_func, f0, f1, i2, f3 )
	SV* c_func
	float f0
	float f1
	int i2
	float f3
PREINIT:
	char *(*func)(float, float, int, float);
CODE:
	func   = INT2PTR(char *(*)(float, float, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2, f3);
OUTPUT:
	RETVAL

int
nci_iffif( c_func, f0, f1, i2, f3 )
	SV* c_func
	float f0
	float f1
	int i2
	float f3
PREINIT:
	int(*func)(float, float, int, float);
CODE:
	func   = INT2PTR(int(*)(float, float, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2, f3);
OUTPUT:
	RETVAL

void *
nci_ptfif( c_func, t0, f1, i2, f3 )
	SV* c_func
	char * t0
	float f1
	int i2
	float f3
PREINIT:
	void *(*func)(char *, float, int, float);
CODE:
	func   = INT2PTR(void *(*)(char *, float, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2, f3);
OUTPUT:
	RETVAL

void
nci_vtfif( c_func, t0, f1, i2, f3 )
	SV* c_func
	char * t0
	float f1
	int i2
	float f3
PREINIT:
	void(*func)(char *, float, int, float);
CODE:
	func   = INT2PTR(void(*)(char *, float, int, float), SvIV(c_func) );
	(*func)(t0, f1, i2, f3);

double
nci_dtfif( c_func, t0, f1, i2, f3 )
	SV* c_func
	char * t0
	float f1
	int i2
	float f3
PREINIT:
	double(*func)(char *, float, int, float);
CODE:
	func   = INT2PTR(double(*)(char *, float, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2, f3);
OUTPUT:
	RETVAL

short
nci_stfif( c_func, t0, f1, i2, f3 )
	SV* c_func
	char * t0
	float f1
	int i2
	float f3
PREINIT:
	short(*func)(char *, float, int, float);
CODE:
	func   = INT2PTR(short(*)(char *, float, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2, f3);
OUTPUT:
	RETVAL

float
nci_ftfif( c_func, t0, f1, i2, f3 )
	SV* c_func
	char * t0
	float f1
	int i2
	float f3
PREINIT:
	float(*func)(char *, float, int, float);
CODE:
	func   = INT2PTR(float(*)(char *, float, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2, f3);
OUTPUT:
	RETVAL

char *
nci_ttfif( c_func, t0, f1, i2, f3 )
	SV* c_func
	char * t0
	float f1
	int i2
	float f3
PREINIT:
	char *(*func)(char *, float, int, float);
CODE:
	func   = INT2PTR(char *(*)(char *, float, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2, f3);
OUTPUT:
	RETVAL

int
nci_itfif( c_func, t0, f1, i2, f3 )
	SV* c_func
	char * t0
	float f1
	int i2
	float f3
PREINIT:
	int(*func)(char *, float, int, float);
CODE:
	func   = INT2PTR(int(*)(char *, float, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2, f3);
OUTPUT:
	RETVAL

void *
nci_pifif( c_func, i0, f1, i2, f3 )
	SV* c_func
	int i0
	float f1
	int i2
	float f3
PREINIT:
	void *(*func)(int, float, int, float);
CODE:
	func   = INT2PTR(void *(*)(int, float, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2, f3);
OUTPUT:
	RETVAL

void
nci_vifif( c_func, i0, f1, i2, f3 )
	SV* c_func
	int i0
	float f1
	int i2
	float f3
PREINIT:
	void(*func)(int, float, int, float);
CODE:
	func   = INT2PTR(void(*)(int, float, int, float), SvIV(c_func) );
	(*func)(i0, f1, i2, f3);

double
nci_difif( c_func, i0, f1, i2, f3 )
	SV* c_func
	int i0
	float f1
	int i2
	float f3
PREINIT:
	double(*func)(int, float, int, float);
CODE:
	func   = INT2PTR(double(*)(int, float, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2, f3);
OUTPUT:
	RETVAL

short
nci_sifif( c_func, i0, f1, i2, f3 )
	SV* c_func
	int i0
	float f1
	int i2
	float f3
PREINIT:
	short(*func)(int, float, int, float);
CODE:
	func   = INT2PTR(short(*)(int, float, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2, f3);
OUTPUT:
	RETVAL

float
nci_fifif( c_func, i0, f1, i2, f3 )
	SV* c_func
	int i0
	float f1
	int i2
	float f3
PREINIT:
	float(*func)(int, float, int, float);
CODE:
	func   = INT2PTR(float(*)(int, float, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2, f3);
OUTPUT:
	RETVAL

char *
nci_tifif( c_func, i0, f1, i2, f3 )
	SV* c_func
	int i0
	float f1
	int i2
	float f3
PREINIT:
	char *(*func)(int, float, int, float);
CODE:
	func   = INT2PTR(char *(*)(int, float, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2, f3);
OUTPUT:
	RETVAL

int
nci_iifif( c_func, i0, f1, i2, f3 )
	SV* c_func
	int i0
	float f1
	int i2
	float f3
PREINIT:
	int(*func)(int, float, int, float);
CODE:
	func   = INT2PTR(int(*)(int, float, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2, f3);
OUTPUT:
	RETVAL

void *
nci_pptif( c_func, p0, t1, i2, f3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	float f3
PREINIT:
	void *(*func)(void *, char *, int, float);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2, f3);
OUTPUT:
	RETVAL

void
nci_vptif( c_func, p0, t1, i2, f3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	float f3
PREINIT:
	void(*func)(void *, char *, int, float);
CODE:
	func   = INT2PTR(void(*)(void *, char *, int, float), SvIV(c_func) );
	(*func)(p0, t1, i2, f3);

double
nci_dptif( c_func, p0, t1, i2, f3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	float f3
PREINIT:
	double(*func)(void *, char *, int, float);
CODE:
	func   = INT2PTR(double(*)(void *, char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2, f3);
OUTPUT:
	RETVAL

short
nci_sptif( c_func, p0, t1, i2, f3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	float f3
PREINIT:
	short(*func)(void *, char *, int, float);
CODE:
	func   = INT2PTR(short(*)(void *, char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2, f3);
OUTPUT:
	RETVAL

float
nci_fptif( c_func, p0, t1, i2, f3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	float f3
PREINIT:
	float(*func)(void *, char *, int, float);
CODE:
	func   = INT2PTR(float(*)(void *, char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2, f3);
OUTPUT:
	RETVAL

char *
nci_tptif( c_func, p0, t1, i2, f3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	float f3
PREINIT:
	char *(*func)(void *, char *, int, float);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2, f3);
OUTPUT:
	RETVAL

int
nci_iptif( c_func, p0, t1, i2, f3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	float f3
PREINIT:
	int(*func)(void *, char *, int, float);
CODE:
	func   = INT2PTR(int(*)(void *, char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2, f3);
OUTPUT:
	RETVAL

void *
nci_pvtif( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvtif( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvtif( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svtif( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvtif( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvtif( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivtif( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdtif( c_func, d0, t1, i2, f3 )
	SV* c_func
	double d0
	char * t1
	int i2
	float f3
PREINIT:
	void *(*func)(double, char *, int, float);
CODE:
	func   = INT2PTR(void *(*)(double, char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2, f3);
OUTPUT:
	RETVAL

void
nci_vdtif( c_func, d0, t1, i2, f3 )
	SV* c_func
	double d0
	char * t1
	int i2
	float f3
PREINIT:
	void(*func)(double, char *, int, float);
CODE:
	func   = INT2PTR(void(*)(double, char *, int, float), SvIV(c_func) );
	(*func)(d0, t1, i2, f3);

double
nci_ddtif( c_func, d0, t1, i2, f3 )
	SV* c_func
	double d0
	char * t1
	int i2
	float f3
PREINIT:
	double(*func)(double, char *, int, float);
CODE:
	func   = INT2PTR(double(*)(double, char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2, f3);
OUTPUT:
	RETVAL

short
nci_sdtif( c_func, d0, t1, i2, f3 )
	SV* c_func
	double d0
	char * t1
	int i2
	float f3
PREINIT:
	short(*func)(double, char *, int, float);
CODE:
	func   = INT2PTR(short(*)(double, char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2, f3);
OUTPUT:
	RETVAL

float
nci_fdtif( c_func, d0, t1, i2, f3 )
	SV* c_func
	double d0
	char * t1
	int i2
	float f3
PREINIT:
	float(*func)(double, char *, int, float);
CODE:
	func   = INT2PTR(float(*)(double, char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2, f3);
OUTPUT:
	RETVAL

char *
nci_tdtif( c_func, d0, t1, i2, f3 )
	SV* c_func
	double d0
	char * t1
	int i2
	float f3
PREINIT:
	char *(*func)(double, char *, int, float);
CODE:
	func   = INT2PTR(char *(*)(double, char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2, f3);
OUTPUT:
	RETVAL

int
nci_idtif( c_func, d0, t1, i2, f3 )
	SV* c_func
	double d0
	char * t1
	int i2
	float f3
PREINIT:
	int(*func)(double, char *, int, float);
CODE:
	func   = INT2PTR(int(*)(double, char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2, f3);
OUTPUT:
	RETVAL

void *
nci_pstif( c_func, s0, t1, i2, f3 )
	SV* c_func
	short s0
	char * t1
	int i2
	float f3
PREINIT:
	void *(*func)(short, char *, int, float);
CODE:
	func   = INT2PTR(void *(*)(short, char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2, f3);
OUTPUT:
	RETVAL

void
nci_vstif( c_func, s0, t1, i2, f3 )
	SV* c_func
	short s0
	char * t1
	int i2
	float f3
PREINIT:
	void(*func)(short, char *, int, float);
CODE:
	func   = INT2PTR(void(*)(short, char *, int, float), SvIV(c_func) );
	(*func)(s0, t1, i2, f3);

double
nci_dstif( c_func, s0, t1, i2, f3 )
	SV* c_func
	short s0
	char * t1
	int i2
	float f3
PREINIT:
	double(*func)(short, char *, int, float);
CODE:
	func   = INT2PTR(double(*)(short, char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2, f3);
OUTPUT:
	RETVAL

short
nci_sstif( c_func, s0, t1, i2, f3 )
	SV* c_func
	short s0
	char * t1
	int i2
	float f3
PREINIT:
	short(*func)(short, char *, int, float);
CODE:
	func   = INT2PTR(short(*)(short, char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2, f3);
OUTPUT:
	RETVAL

float
nci_fstif( c_func, s0, t1, i2, f3 )
	SV* c_func
	short s0
	char * t1
	int i2
	float f3
PREINIT:
	float(*func)(short, char *, int, float);
CODE:
	func   = INT2PTR(float(*)(short, char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2, f3);
OUTPUT:
	RETVAL

char *
nci_tstif( c_func, s0, t1, i2, f3 )
	SV* c_func
	short s0
	char * t1
	int i2
	float f3
PREINIT:
	char *(*func)(short, char *, int, float);
CODE:
	func   = INT2PTR(char *(*)(short, char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2, f3);
OUTPUT:
	RETVAL

int
nci_istif( c_func, s0, t1, i2, f3 )
	SV* c_func
	short s0
	char * t1
	int i2
	float f3
PREINIT:
	int(*func)(short, char *, int, float);
CODE:
	func   = INT2PTR(int(*)(short, char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2, f3);
OUTPUT:
	RETVAL

void *
nci_pftif( c_func, f0, t1, i2, f3 )
	SV* c_func
	float f0
	char * t1
	int i2
	float f3
PREINIT:
	void *(*func)(float, char *, int, float);
CODE:
	func   = INT2PTR(void *(*)(float, char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2, f3);
OUTPUT:
	RETVAL

void
nci_vftif( c_func, f0, t1, i2, f3 )
	SV* c_func
	float f0
	char * t1
	int i2
	float f3
PREINIT:
	void(*func)(float, char *, int, float);
CODE:
	func   = INT2PTR(void(*)(float, char *, int, float), SvIV(c_func) );
	(*func)(f0, t1, i2, f3);

double
nci_dftif( c_func, f0, t1, i2, f3 )
	SV* c_func
	float f0
	char * t1
	int i2
	float f3
PREINIT:
	double(*func)(float, char *, int, float);
CODE:
	func   = INT2PTR(double(*)(float, char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2, f3);
OUTPUT:
	RETVAL

short
nci_sftif( c_func, f0, t1, i2, f3 )
	SV* c_func
	float f0
	char * t1
	int i2
	float f3
PREINIT:
	short(*func)(float, char *, int, float);
CODE:
	func   = INT2PTR(short(*)(float, char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2, f3);
OUTPUT:
	RETVAL

float
nci_fftif( c_func, f0, t1, i2, f3 )
	SV* c_func
	float f0
	char * t1
	int i2
	float f3
PREINIT:
	float(*func)(float, char *, int, float);
CODE:
	func   = INT2PTR(float(*)(float, char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2, f3);
OUTPUT:
	RETVAL

char *
nci_tftif( c_func, f0, t1, i2, f3 )
	SV* c_func
	float f0
	char * t1
	int i2
	float f3
PREINIT:
	char *(*func)(float, char *, int, float);
CODE:
	func   = INT2PTR(char *(*)(float, char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2, f3);
OUTPUT:
	RETVAL

int
nci_iftif( c_func, f0, t1, i2, f3 )
	SV* c_func
	float f0
	char * t1
	int i2
	float f3
PREINIT:
	int(*func)(float, char *, int, float);
CODE:
	func   = INT2PTR(int(*)(float, char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2, f3);
OUTPUT:
	RETVAL

void *
nci_pttif( c_func, t0, t1, i2, f3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	float f3
PREINIT:
	void *(*func)(char *, char *, int, float);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2, f3);
OUTPUT:
	RETVAL

void
nci_vttif( c_func, t0, t1, i2, f3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	float f3
PREINIT:
	void(*func)(char *, char *, int, float);
CODE:
	func   = INT2PTR(void(*)(char *, char *, int, float), SvIV(c_func) );
	(*func)(t0, t1, i2, f3);

double
nci_dttif( c_func, t0, t1, i2, f3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	float f3
PREINIT:
	double(*func)(char *, char *, int, float);
CODE:
	func   = INT2PTR(double(*)(char *, char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2, f3);
OUTPUT:
	RETVAL

short
nci_sttif( c_func, t0, t1, i2, f3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	float f3
PREINIT:
	short(*func)(char *, char *, int, float);
CODE:
	func   = INT2PTR(short(*)(char *, char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2, f3);
OUTPUT:
	RETVAL

float
nci_fttif( c_func, t0, t1, i2, f3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	float f3
PREINIT:
	float(*func)(char *, char *, int, float);
CODE:
	func   = INT2PTR(float(*)(char *, char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2, f3);
OUTPUT:
	RETVAL

char *
nci_tttif( c_func, t0, t1, i2, f3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	float f3
PREINIT:
	char *(*func)(char *, char *, int, float);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2, f3);
OUTPUT:
	RETVAL

int
nci_ittif( c_func, t0, t1, i2, f3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	float f3
PREINIT:
	int(*func)(char *, char *, int, float);
CODE:
	func   = INT2PTR(int(*)(char *, char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2, f3);
OUTPUT:
	RETVAL

void *
nci_pitif( c_func, i0, t1, i2, f3 )
	SV* c_func
	int i0
	char * t1
	int i2
	float f3
PREINIT:
	void *(*func)(int, char *, int, float);
CODE:
	func   = INT2PTR(void *(*)(int, char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2, f3);
OUTPUT:
	RETVAL

void
nci_vitif( c_func, i0, t1, i2, f3 )
	SV* c_func
	int i0
	char * t1
	int i2
	float f3
PREINIT:
	void(*func)(int, char *, int, float);
CODE:
	func   = INT2PTR(void(*)(int, char *, int, float), SvIV(c_func) );
	(*func)(i0, t1, i2, f3);

double
nci_ditif( c_func, i0, t1, i2, f3 )
	SV* c_func
	int i0
	char * t1
	int i2
	float f3
PREINIT:
	double(*func)(int, char *, int, float);
CODE:
	func   = INT2PTR(double(*)(int, char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2, f3);
OUTPUT:
	RETVAL

short
nci_sitif( c_func, i0, t1, i2, f3 )
	SV* c_func
	int i0
	char * t1
	int i2
	float f3
PREINIT:
	short(*func)(int, char *, int, float);
CODE:
	func   = INT2PTR(short(*)(int, char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2, f3);
OUTPUT:
	RETVAL

float
nci_fitif( c_func, i0, t1, i2, f3 )
	SV* c_func
	int i0
	char * t1
	int i2
	float f3
PREINIT:
	float(*func)(int, char *, int, float);
CODE:
	func   = INT2PTR(float(*)(int, char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2, f3);
OUTPUT:
	RETVAL

char *
nci_titif( c_func, i0, t1, i2, f3 )
	SV* c_func
	int i0
	char * t1
	int i2
	float f3
PREINIT:
	char *(*func)(int, char *, int, float);
CODE:
	func   = INT2PTR(char *(*)(int, char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2, f3);
OUTPUT:
	RETVAL

int
nci_iitif( c_func, i0, t1, i2, f3 )
	SV* c_func
	int i0
	char * t1
	int i2
	float f3
PREINIT:
	int(*func)(int, char *, int, float);
CODE:
	func   = INT2PTR(int(*)(int, char *, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2, f3);
OUTPUT:
	RETVAL

void *
nci_ppiif( c_func, p0, i1, i2, f3 )
	SV* c_func
	void * p0
	int i1
	int i2
	float f3
PREINIT:
	void *(*func)(void *, int, int, float);
CODE:
	func   = INT2PTR(void *(*)(void *, int, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2, f3);
OUTPUT:
	RETVAL

void
nci_vpiif( c_func, p0, i1, i2, f3 )
	SV* c_func
	void * p0
	int i1
	int i2
	float f3
PREINIT:
	void(*func)(void *, int, int, float);
CODE:
	func   = INT2PTR(void(*)(void *, int, int, float), SvIV(c_func) );
	(*func)(p0, i1, i2, f3);

double
nci_dpiif( c_func, p0, i1, i2, f3 )
	SV* c_func
	void * p0
	int i1
	int i2
	float f3
PREINIT:
	double(*func)(void *, int, int, float);
CODE:
	func   = INT2PTR(double(*)(void *, int, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2, f3);
OUTPUT:
	RETVAL

short
nci_spiif( c_func, p0, i1, i2, f3 )
	SV* c_func
	void * p0
	int i1
	int i2
	float f3
PREINIT:
	short(*func)(void *, int, int, float);
CODE:
	func   = INT2PTR(short(*)(void *, int, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2, f3);
OUTPUT:
	RETVAL

float
nci_fpiif( c_func, p0, i1, i2, f3 )
	SV* c_func
	void * p0
	int i1
	int i2
	float f3
PREINIT:
	float(*func)(void *, int, int, float);
CODE:
	func   = INT2PTR(float(*)(void *, int, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2, f3);
OUTPUT:
	RETVAL

char *
nci_tpiif( c_func, p0, i1, i2, f3 )
	SV* c_func
	void * p0
	int i1
	int i2
	float f3
PREINIT:
	char *(*func)(void *, int, int, float);
CODE:
	func   = INT2PTR(char *(*)(void *, int, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2, f3);
OUTPUT:
	RETVAL

int
nci_ipiif( c_func, p0, i1, i2, f3 )
	SV* c_func
	void * p0
	int i1
	int i2
	float f3
PREINIT:
	int(*func)(void *, int, int, float);
CODE:
	func   = INT2PTR(int(*)(void *, int, int, float), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2, f3);
OUTPUT:
	RETVAL

void *
nci_pviif( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vviif( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dviif( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_sviif( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fviif( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tviif( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_iviif( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdiif( c_func, d0, i1, i2, f3 )
	SV* c_func
	double d0
	int i1
	int i2
	float f3
PREINIT:
	void *(*func)(double, int, int, float);
CODE:
	func   = INT2PTR(void *(*)(double, int, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2, f3);
OUTPUT:
	RETVAL

void
nci_vdiif( c_func, d0, i1, i2, f3 )
	SV* c_func
	double d0
	int i1
	int i2
	float f3
PREINIT:
	void(*func)(double, int, int, float);
CODE:
	func   = INT2PTR(void(*)(double, int, int, float), SvIV(c_func) );
	(*func)(d0, i1, i2, f3);

double
nci_ddiif( c_func, d0, i1, i2, f3 )
	SV* c_func
	double d0
	int i1
	int i2
	float f3
PREINIT:
	double(*func)(double, int, int, float);
CODE:
	func   = INT2PTR(double(*)(double, int, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2, f3);
OUTPUT:
	RETVAL

short
nci_sdiif( c_func, d0, i1, i2, f3 )
	SV* c_func
	double d0
	int i1
	int i2
	float f3
PREINIT:
	short(*func)(double, int, int, float);
CODE:
	func   = INT2PTR(short(*)(double, int, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2, f3);
OUTPUT:
	RETVAL

float
nci_fdiif( c_func, d0, i1, i2, f3 )
	SV* c_func
	double d0
	int i1
	int i2
	float f3
PREINIT:
	float(*func)(double, int, int, float);
CODE:
	func   = INT2PTR(float(*)(double, int, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2, f3);
OUTPUT:
	RETVAL

char *
nci_tdiif( c_func, d0, i1, i2, f3 )
	SV* c_func
	double d0
	int i1
	int i2
	float f3
PREINIT:
	char *(*func)(double, int, int, float);
CODE:
	func   = INT2PTR(char *(*)(double, int, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2, f3);
OUTPUT:
	RETVAL

int
nci_idiif( c_func, d0, i1, i2, f3 )
	SV* c_func
	double d0
	int i1
	int i2
	float f3
PREINIT:
	int(*func)(double, int, int, float);
CODE:
	func   = INT2PTR(int(*)(double, int, int, float), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2, f3);
OUTPUT:
	RETVAL

void *
nci_psiif( c_func, s0, i1, i2, f3 )
	SV* c_func
	short s0
	int i1
	int i2
	float f3
PREINIT:
	void *(*func)(short, int, int, float);
CODE:
	func   = INT2PTR(void *(*)(short, int, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2, f3);
OUTPUT:
	RETVAL

void
nci_vsiif( c_func, s0, i1, i2, f3 )
	SV* c_func
	short s0
	int i1
	int i2
	float f3
PREINIT:
	void(*func)(short, int, int, float);
CODE:
	func   = INT2PTR(void(*)(short, int, int, float), SvIV(c_func) );
	(*func)(s0, i1, i2, f3);

double
nci_dsiif( c_func, s0, i1, i2, f3 )
	SV* c_func
	short s0
	int i1
	int i2
	float f3
PREINIT:
	double(*func)(short, int, int, float);
CODE:
	func   = INT2PTR(double(*)(short, int, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2, f3);
OUTPUT:
	RETVAL

short
nci_ssiif( c_func, s0, i1, i2, f3 )
	SV* c_func
	short s0
	int i1
	int i2
	float f3
PREINIT:
	short(*func)(short, int, int, float);
CODE:
	func   = INT2PTR(short(*)(short, int, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2, f3);
OUTPUT:
	RETVAL

float
nci_fsiif( c_func, s0, i1, i2, f3 )
	SV* c_func
	short s0
	int i1
	int i2
	float f3
PREINIT:
	float(*func)(short, int, int, float);
CODE:
	func   = INT2PTR(float(*)(short, int, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2, f3);
OUTPUT:
	RETVAL

char *
nci_tsiif( c_func, s0, i1, i2, f3 )
	SV* c_func
	short s0
	int i1
	int i2
	float f3
PREINIT:
	char *(*func)(short, int, int, float);
CODE:
	func   = INT2PTR(char *(*)(short, int, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2, f3);
OUTPUT:
	RETVAL

int
nci_isiif( c_func, s0, i1, i2, f3 )
	SV* c_func
	short s0
	int i1
	int i2
	float f3
PREINIT:
	int(*func)(short, int, int, float);
CODE:
	func   = INT2PTR(int(*)(short, int, int, float), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2, f3);
OUTPUT:
	RETVAL

void *
nci_pfiif( c_func, f0, i1, i2, f3 )
	SV* c_func
	float f0
	int i1
	int i2
	float f3
PREINIT:
	void *(*func)(float, int, int, float);
CODE:
	func   = INT2PTR(void *(*)(float, int, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2, f3);
OUTPUT:
	RETVAL

void
nci_vfiif( c_func, f0, i1, i2, f3 )
	SV* c_func
	float f0
	int i1
	int i2
	float f3
PREINIT:
	void(*func)(float, int, int, float);
CODE:
	func   = INT2PTR(void(*)(float, int, int, float), SvIV(c_func) );
	(*func)(f0, i1, i2, f3);

double
nci_dfiif( c_func, f0, i1, i2, f3 )
	SV* c_func
	float f0
	int i1
	int i2
	float f3
PREINIT:
	double(*func)(float, int, int, float);
CODE:
	func   = INT2PTR(double(*)(float, int, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2, f3);
OUTPUT:
	RETVAL

short
nci_sfiif( c_func, f0, i1, i2, f3 )
	SV* c_func
	float f0
	int i1
	int i2
	float f3
PREINIT:
	short(*func)(float, int, int, float);
CODE:
	func   = INT2PTR(short(*)(float, int, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2, f3);
OUTPUT:
	RETVAL

float
nci_ffiif( c_func, f0, i1, i2, f3 )
	SV* c_func
	float f0
	int i1
	int i2
	float f3
PREINIT:
	float(*func)(float, int, int, float);
CODE:
	func   = INT2PTR(float(*)(float, int, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2, f3);
OUTPUT:
	RETVAL

char *
nci_tfiif( c_func, f0, i1, i2, f3 )
	SV* c_func
	float f0
	int i1
	int i2
	float f3
PREINIT:
	char *(*func)(float, int, int, float);
CODE:
	func   = INT2PTR(char *(*)(float, int, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2, f3);
OUTPUT:
	RETVAL

int
nci_ifiif( c_func, f0, i1, i2, f3 )
	SV* c_func
	float f0
	int i1
	int i2
	float f3
PREINIT:
	int(*func)(float, int, int, float);
CODE:
	func   = INT2PTR(int(*)(float, int, int, float), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2, f3);
OUTPUT:
	RETVAL

void *
nci_ptiif( c_func, t0, i1, i2, f3 )
	SV* c_func
	char * t0
	int i1
	int i2
	float f3
PREINIT:
	void *(*func)(char *, int, int, float);
CODE:
	func   = INT2PTR(void *(*)(char *, int, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2, f3);
OUTPUT:
	RETVAL

void
nci_vtiif( c_func, t0, i1, i2, f3 )
	SV* c_func
	char * t0
	int i1
	int i2
	float f3
PREINIT:
	void(*func)(char *, int, int, float);
CODE:
	func   = INT2PTR(void(*)(char *, int, int, float), SvIV(c_func) );
	(*func)(t0, i1, i2, f3);

double
nci_dtiif( c_func, t0, i1, i2, f3 )
	SV* c_func
	char * t0
	int i1
	int i2
	float f3
PREINIT:
	double(*func)(char *, int, int, float);
CODE:
	func   = INT2PTR(double(*)(char *, int, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2, f3);
OUTPUT:
	RETVAL

short
nci_stiif( c_func, t0, i1, i2, f3 )
	SV* c_func
	char * t0
	int i1
	int i2
	float f3
PREINIT:
	short(*func)(char *, int, int, float);
CODE:
	func   = INT2PTR(short(*)(char *, int, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2, f3);
OUTPUT:
	RETVAL

float
nci_ftiif( c_func, t0, i1, i2, f3 )
	SV* c_func
	char * t0
	int i1
	int i2
	float f3
PREINIT:
	float(*func)(char *, int, int, float);
CODE:
	func   = INT2PTR(float(*)(char *, int, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2, f3);
OUTPUT:
	RETVAL

char *
nci_ttiif( c_func, t0, i1, i2, f3 )
	SV* c_func
	char * t0
	int i1
	int i2
	float f3
PREINIT:
	char *(*func)(char *, int, int, float);
CODE:
	func   = INT2PTR(char *(*)(char *, int, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2, f3);
OUTPUT:
	RETVAL

int
nci_itiif( c_func, t0, i1, i2, f3 )
	SV* c_func
	char * t0
	int i1
	int i2
	float f3
PREINIT:
	int(*func)(char *, int, int, float);
CODE:
	func   = INT2PTR(int(*)(char *, int, int, float), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2, f3);
OUTPUT:
	RETVAL

void *
nci_piiif( c_func, i0, i1, i2, f3 )
	SV* c_func
	int i0
	int i1
	int i2
	float f3
PREINIT:
	void *(*func)(int, int, int, float);
CODE:
	func   = INT2PTR(void *(*)(int, int, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2, f3);
OUTPUT:
	RETVAL

void
nci_viiif( c_func, i0, i1, i2, f3 )
	SV* c_func
	int i0
	int i1
	int i2
	float f3
PREINIT:
	void(*func)(int, int, int, float);
CODE:
	func   = INT2PTR(void(*)(int, int, int, float), SvIV(c_func) );
	(*func)(i0, i1, i2, f3);

double
nci_diiif( c_func, i0, i1, i2, f3 )
	SV* c_func
	int i0
	int i1
	int i2
	float f3
PREINIT:
	double(*func)(int, int, int, float);
CODE:
	func   = INT2PTR(double(*)(int, int, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2, f3);
OUTPUT:
	RETVAL

short
nci_siiif( c_func, i0, i1, i2, f3 )
	SV* c_func
	int i0
	int i1
	int i2
	float f3
PREINIT:
	short(*func)(int, int, int, float);
CODE:
	func   = INT2PTR(short(*)(int, int, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2, f3);
OUTPUT:
	RETVAL

float
nci_fiiif( c_func, i0, i1, i2, f3 )
	SV* c_func
	int i0
	int i1
	int i2
	float f3
PREINIT:
	float(*func)(int, int, int, float);
CODE:
	func   = INT2PTR(float(*)(int, int, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2, f3);
OUTPUT:
	RETVAL

char *
nci_tiiif( c_func, i0, i1, i2, f3 )
	SV* c_func
	int i0
	int i1
	int i2
	float f3
PREINIT:
	char *(*func)(int, int, int, float);
CODE:
	func   = INT2PTR(char *(*)(int, int, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2, f3);
OUTPUT:
	RETVAL

int
nci_iiiif( c_func, i0, i1, i2, f3 )
	SV* c_func
	int i0
	int i1
	int i2
	float f3
PREINIT:
	int(*func)(int, int, int, float);
CODE:
	func   = INT2PTR(int(*)(int, int, int, float), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2, f3);
OUTPUT:
	RETVAL

void *
nci_ppppt( c_func, p0, p1, p2, t3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	char * t3
PREINIT:
	void *(*func)(void *, void *, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2, t3);
OUTPUT:
	RETVAL

void
nci_vpppt( c_func, p0, p1, p2, t3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	char * t3
PREINIT:
	void(*func)(void *, void *, void *, char *);
CODE:
	func   = INT2PTR(void(*)(void *, void *, void *, char *), SvIV(c_func) );
	(*func)(p0, p1, p2, t3);

double
nci_dpppt( c_func, p0, p1, p2, t3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	char * t3
PREINIT:
	double(*func)(void *, void *, void *, char *);
CODE:
	func   = INT2PTR(double(*)(void *, void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2, t3);
OUTPUT:
	RETVAL

short
nci_spppt( c_func, p0, p1, p2, t3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	char * t3
PREINIT:
	short(*func)(void *, void *, void *, char *);
CODE:
	func   = INT2PTR(short(*)(void *, void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2, t3);
OUTPUT:
	RETVAL

float
nci_fpppt( c_func, p0, p1, p2, t3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	char * t3
PREINIT:
	float(*func)(void *, void *, void *, char *);
CODE:
	func   = INT2PTR(float(*)(void *, void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2, t3);
OUTPUT:
	RETVAL

char *
nci_tpppt( c_func, p0, p1, p2, t3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	char * t3
PREINIT:
	char *(*func)(void *, void *, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2, t3);
OUTPUT:
	RETVAL

int
nci_ipppt( c_func, p0, p1, p2, t3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	char * t3
PREINIT:
	int(*func)(void *, void *, void *, char *);
CODE:
	func   = INT2PTR(int(*)(void *, void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2, t3);
OUTPUT:
	RETVAL

void *
nci_pvppt( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvppt( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvppt( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svppt( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvppt( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvppt( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivppt( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdppt( c_func, d0, p1, p2, t3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	char * t3
PREINIT:
	void *(*func)(double, void *, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(double, void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2, t3);
OUTPUT:
	RETVAL

void
nci_vdppt( c_func, d0, p1, p2, t3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	char * t3
PREINIT:
	void(*func)(double, void *, void *, char *);
CODE:
	func   = INT2PTR(void(*)(double, void *, void *, char *), SvIV(c_func) );
	(*func)(d0, p1, p2, t3);

double
nci_ddppt( c_func, d0, p1, p2, t3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	char * t3
PREINIT:
	double(*func)(double, void *, void *, char *);
CODE:
	func   = INT2PTR(double(*)(double, void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2, t3);
OUTPUT:
	RETVAL

short
nci_sdppt( c_func, d0, p1, p2, t3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	char * t3
PREINIT:
	short(*func)(double, void *, void *, char *);
CODE:
	func   = INT2PTR(short(*)(double, void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2, t3);
OUTPUT:
	RETVAL

float
nci_fdppt( c_func, d0, p1, p2, t3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	char * t3
PREINIT:
	float(*func)(double, void *, void *, char *);
CODE:
	func   = INT2PTR(float(*)(double, void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2, t3);
OUTPUT:
	RETVAL

char *
nci_tdppt( c_func, d0, p1, p2, t3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	char * t3
PREINIT:
	char *(*func)(double, void *, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(double, void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2, t3);
OUTPUT:
	RETVAL

int
nci_idppt( c_func, d0, p1, p2, t3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	char * t3
PREINIT:
	int(*func)(double, void *, void *, char *);
CODE:
	func   = INT2PTR(int(*)(double, void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2, t3);
OUTPUT:
	RETVAL

void *
nci_psppt( c_func, s0, p1, p2, t3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	char * t3
PREINIT:
	void *(*func)(short, void *, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(short, void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2, t3);
OUTPUT:
	RETVAL

void
nci_vsppt( c_func, s0, p1, p2, t3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	char * t3
PREINIT:
	void(*func)(short, void *, void *, char *);
CODE:
	func   = INT2PTR(void(*)(short, void *, void *, char *), SvIV(c_func) );
	(*func)(s0, p1, p2, t3);

double
nci_dsppt( c_func, s0, p1, p2, t3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	char * t3
PREINIT:
	double(*func)(short, void *, void *, char *);
CODE:
	func   = INT2PTR(double(*)(short, void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2, t3);
OUTPUT:
	RETVAL

short
nci_ssppt( c_func, s0, p1, p2, t3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	char * t3
PREINIT:
	short(*func)(short, void *, void *, char *);
CODE:
	func   = INT2PTR(short(*)(short, void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2, t3);
OUTPUT:
	RETVAL

float
nci_fsppt( c_func, s0, p1, p2, t3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	char * t3
PREINIT:
	float(*func)(short, void *, void *, char *);
CODE:
	func   = INT2PTR(float(*)(short, void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2, t3);
OUTPUT:
	RETVAL

char *
nci_tsppt( c_func, s0, p1, p2, t3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	char * t3
PREINIT:
	char *(*func)(short, void *, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(short, void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2, t3);
OUTPUT:
	RETVAL

int
nci_isppt( c_func, s0, p1, p2, t3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	char * t3
PREINIT:
	int(*func)(short, void *, void *, char *);
CODE:
	func   = INT2PTR(int(*)(short, void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2, t3);
OUTPUT:
	RETVAL

void *
nci_pfppt( c_func, f0, p1, p2, t3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	char * t3
PREINIT:
	void *(*func)(float, void *, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(float, void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2, t3);
OUTPUT:
	RETVAL

void
nci_vfppt( c_func, f0, p1, p2, t3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	char * t3
PREINIT:
	void(*func)(float, void *, void *, char *);
CODE:
	func   = INT2PTR(void(*)(float, void *, void *, char *), SvIV(c_func) );
	(*func)(f0, p1, p2, t3);

double
nci_dfppt( c_func, f0, p1, p2, t3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	char * t3
PREINIT:
	double(*func)(float, void *, void *, char *);
CODE:
	func   = INT2PTR(double(*)(float, void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2, t3);
OUTPUT:
	RETVAL

short
nci_sfppt( c_func, f0, p1, p2, t3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	char * t3
PREINIT:
	short(*func)(float, void *, void *, char *);
CODE:
	func   = INT2PTR(short(*)(float, void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2, t3);
OUTPUT:
	RETVAL

float
nci_ffppt( c_func, f0, p1, p2, t3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	char * t3
PREINIT:
	float(*func)(float, void *, void *, char *);
CODE:
	func   = INT2PTR(float(*)(float, void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2, t3);
OUTPUT:
	RETVAL

char *
nci_tfppt( c_func, f0, p1, p2, t3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	char * t3
PREINIT:
	char *(*func)(float, void *, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(float, void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2, t3);
OUTPUT:
	RETVAL

int
nci_ifppt( c_func, f0, p1, p2, t3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	char * t3
PREINIT:
	int(*func)(float, void *, void *, char *);
CODE:
	func   = INT2PTR(int(*)(float, void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2, t3);
OUTPUT:
	RETVAL

void *
nci_ptppt( c_func, t0, p1, p2, t3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	char * t3
PREINIT:
	void *(*func)(char *, void *, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2, t3);
OUTPUT:
	RETVAL

void
nci_vtppt( c_func, t0, p1, p2, t3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	char * t3
PREINIT:
	void(*func)(char *, void *, void *, char *);
CODE:
	func   = INT2PTR(void(*)(char *, void *, void *, char *), SvIV(c_func) );
	(*func)(t0, p1, p2, t3);

double
nci_dtppt( c_func, t0, p1, p2, t3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	char * t3
PREINIT:
	double(*func)(char *, void *, void *, char *);
CODE:
	func   = INT2PTR(double(*)(char *, void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2, t3);
OUTPUT:
	RETVAL

short
nci_stppt( c_func, t0, p1, p2, t3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	char * t3
PREINIT:
	short(*func)(char *, void *, void *, char *);
CODE:
	func   = INT2PTR(short(*)(char *, void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2, t3);
OUTPUT:
	RETVAL

float
nci_ftppt( c_func, t0, p1, p2, t3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	char * t3
PREINIT:
	float(*func)(char *, void *, void *, char *);
CODE:
	func   = INT2PTR(float(*)(char *, void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2, t3);
OUTPUT:
	RETVAL

char *
nci_ttppt( c_func, t0, p1, p2, t3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	char * t3
PREINIT:
	char *(*func)(char *, void *, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2, t3);
OUTPUT:
	RETVAL

int
nci_itppt( c_func, t0, p1, p2, t3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	char * t3
PREINIT:
	int(*func)(char *, void *, void *, char *);
CODE:
	func   = INT2PTR(int(*)(char *, void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2, t3);
OUTPUT:
	RETVAL

void *
nci_pippt( c_func, i0, p1, p2, t3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	char * t3
PREINIT:
	void *(*func)(int, void *, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(int, void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2, t3);
OUTPUT:
	RETVAL

void
nci_vippt( c_func, i0, p1, p2, t3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	char * t3
PREINIT:
	void(*func)(int, void *, void *, char *);
CODE:
	func   = INT2PTR(void(*)(int, void *, void *, char *), SvIV(c_func) );
	(*func)(i0, p1, p2, t3);

double
nci_dippt( c_func, i0, p1, p2, t3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	char * t3
PREINIT:
	double(*func)(int, void *, void *, char *);
CODE:
	func   = INT2PTR(double(*)(int, void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2, t3);
OUTPUT:
	RETVAL

short
nci_sippt( c_func, i0, p1, p2, t3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	char * t3
PREINIT:
	short(*func)(int, void *, void *, char *);
CODE:
	func   = INT2PTR(short(*)(int, void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2, t3);
OUTPUT:
	RETVAL

float
nci_fippt( c_func, i0, p1, p2, t3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	char * t3
PREINIT:
	float(*func)(int, void *, void *, char *);
CODE:
	func   = INT2PTR(float(*)(int, void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2, t3);
OUTPUT:
	RETVAL

char *
nci_tippt( c_func, i0, p1, p2, t3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	char * t3
PREINIT:
	char *(*func)(int, void *, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(int, void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2, t3);
OUTPUT:
	RETVAL

int
nci_iippt( c_func, i0, p1, p2, t3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	char * t3
PREINIT:
	int(*func)(int, void *, void *, char *);
CODE:
	func   = INT2PTR(int(*)(int, void *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2, t3);
OUTPUT:
	RETVAL

void *
nci_ppdpt( c_func, p0, d1, p2, t3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	char * t3
PREINIT:
	void *(*func)(void *, double, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2, t3);
OUTPUT:
	RETVAL

void
nci_vpdpt( c_func, p0, d1, p2, t3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	char * t3
PREINIT:
	void(*func)(void *, double, void *, char *);
CODE:
	func   = INT2PTR(void(*)(void *, double, void *, char *), SvIV(c_func) );
	(*func)(p0, d1, p2, t3);

double
nci_dpdpt( c_func, p0, d1, p2, t3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	char * t3
PREINIT:
	double(*func)(void *, double, void *, char *);
CODE:
	func   = INT2PTR(double(*)(void *, double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2, t3);
OUTPUT:
	RETVAL

short
nci_spdpt( c_func, p0, d1, p2, t3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	char * t3
PREINIT:
	short(*func)(void *, double, void *, char *);
CODE:
	func   = INT2PTR(short(*)(void *, double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2, t3);
OUTPUT:
	RETVAL

float
nci_fpdpt( c_func, p0, d1, p2, t3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	char * t3
PREINIT:
	float(*func)(void *, double, void *, char *);
CODE:
	func   = INT2PTR(float(*)(void *, double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2, t3);
OUTPUT:
	RETVAL

char *
nci_tpdpt( c_func, p0, d1, p2, t3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	char * t3
PREINIT:
	char *(*func)(void *, double, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2, t3);
OUTPUT:
	RETVAL

int
nci_ipdpt( c_func, p0, d1, p2, t3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	char * t3
PREINIT:
	int(*func)(void *, double, void *, char *);
CODE:
	func   = INT2PTR(int(*)(void *, double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2, t3);
OUTPUT:
	RETVAL

void *
nci_pvdpt( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvdpt( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvdpt( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svdpt( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvdpt( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvdpt( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivdpt( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pddpt( c_func, d0, d1, p2, t3 )
	SV* c_func
	double d0
	double d1
	void * p2
	char * t3
PREINIT:
	void *(*func)(double, double, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(double, double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2, t3);
OUTPUT:
	RETVAL

void
nci_vddpt( c_func, d0, d1, p2, t3 )
	SV* c_func
	double d0
	double d1
	void * p2
	char * t3
PREINIT:
	void(*func)(double, double, void *, char *);
CODE:
	func   = INT2PTR(void(*)(double, double, void *, char *), SvIV(c_func) );
	(*func)(d0, d1, p2, t3);

double
nci_dddpt( c_func, d0, d1, p2, t3 )
	SV* c_func
	double d0
	double d1
	void * p2
	char * t3
PREINIT:
	double(*func)(double, double, void *, char *);
CODE:
	func   = INT2PTR(double(*)(double, double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2, t3);
OUTPUT:
	RETVAL

short
nci_sddpt( c_func, d0, d1, p2, t3 )
	SV* c_func
	double d0
	double d1
	void * p2
	char * t3
PREINIT:
	short(*func)(double, double, void *, char *);
CODE:
	func   = INT2PTR(short(*)(double, double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2, t3);
OUTPUT:
	RETVAL

float
nci_fddpt( c_func, d0, d1, p2, t3 )
	SV* c_func
	double d0
	double d1
	void * p2
	char * t3
PREINIT:
	float(*func)(double, double, void *, char *);
CODE:
	func   = INT2PTR(float(*)(double, double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2, t3);
OUTPUT:
	RETVAL

char *
nci_tddpt( c_func, d0, d1, p2, t3 )
	SV* c_func
	double d0
	double d1
	void * p2
	char * t3
PREINIT:
	char *(*func)(double, double, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(double, double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2, t3);
OUTPUT:
	RETVAL

int
nci_iddpt( c_func, d0, d1, p2, t3 )
	SV* c_func
	double d0
	double d1
	void * p2
	char * t3
PREINIT:
	int(*func)(double, double, void *, char *);
CODE:
	func   = INT2PTR(int(*)(double, double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2, t3);
OUTPUT:
	RETVAL

void *
nci_psdpt( c_func, s0, d1, p2, t3 )
	SV* c_func
	short s0
	double d1
	void * p2
	char * t3
PREINIT:
	void *(*func)(short, double, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(short, double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2, t3);
OUTPUT:
	RETVAL

void
nci_vsdpt( c_func, s0, d1, p2, t3 )
	SV* c_func
	short s0
	double d1
	void * p2
	char * t3
PREINIT:
	void(*func)(short, double, void *, char *);
CODE:
	func   = INT2PTR(void(*)(short, double, void *, char *), SvIV(c_func) );
	(*func)(s0, d1, p2, t3);

double
nci_dsdpt( c_func, s0, d1, p2, t3 )
	SV* c_func
	short s0
	double d1
	void * p2
	char * t3
PREINIT:
	double(*func)(short, double, void *, char *);
CODE:
	func   = INT2PTR(double(*)(short, double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2, t3);
OUTPUT:
	RETVAL

short
nci_ssdpt( c_func, s0, d1, p2, t3 )
	SV* c_func
	short s0
	double d1
	void * p2
	char * t3
PREINIT:
	short(*func)(short, double, void *, char *);
CODE:
	func   = INT2PTR(short(*)(short, double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2, t3);
OUTPUT:
	RETVAL

float
nci_fsdpt( c_func, s0, d1, p2, t3 )
	SV* c_func
	short s0
	double d1
	void * p2
	char * t3
PREINIT:
	float(*func)(short, double, void *, char *);
CODE:
	func   = INT2PTR(float(*)(short, double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2, t3);
OUTPUT:
	RETVAL

char *
nci_tsdpt( c_func, s0, d1, p2, t3 )
	SV* c_func
	short s0
	double d1
	void * p2
	char * t3
PREINIT:
	char *(*func)(short, double, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(short, double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2, t3);
OUTPUT:
	RETVAL

int
nci_isdpt( c_func, s0, d1, p2, t3 )
	SV* c_func
	short s0
	double d1
	void * p2
	char * t3
PREINIT:
	int(*func)(short, double, void *, char *);
CODE:
	func   = INT2PTR(int(*)(short, double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2, t3);
OUTPUT:
	RETVAL

void *
nci_pfdpt( c_func, f0, d1, p2, t3 )
	SV* c_func
	float f0
	double d1
	void * p2
	char * t3
PREINIT:
	void *(*func)(float, double, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(float, double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2, t3);
OUTPUT:
	RETVAL

void
nci_vfdpt( c_func, f0, d1, p2, t3 )
	SV* c_func
	float f0
	double d1
	void * p2
	char * t3
PREINIT:
	void(*func)(float, double, void *, char *);
CODE:
	func   = INT2PTR(void(*)(float, double, void *, char *), SvIV(c_func) );
	(*func)(f0, d1, p2, t3);

double
nci_dfdpt( c_func, f0, d1, p2, t3 )
	SV* c_func
	float f0
	double d1
	void * p2
	char * t3
PREINIT:
	double(*func)(float, double, void *, char *);
CODE:
	func   = INT2PTR(double(*)(float, double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2, t3);
OUTPUT:
	RETVAL

short
nci_sfdpt( c_func, f0, d1, p2, t3 )
	SV* c_func
	float f0
	double d1
	void * p2
	char * t3
PREINIT:
	short(*func)(float, double, void *, char *);
CODE:
	func   = INT2PTR(short(*)(float, double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2, t3);
OUTPUT:
	RETVAL

float
nci_ffdpt( c_func, f0, d1, p2, t3 )
	SV* c_func
	float f0
	double d1
	void * p2
	char * t3
PREINIT:
	float(*func)(float, double, void *, char *);
CODE:
	func   = INT2PTR(float(*)(float, double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2, t3);
OUTPUT:
	RETVAL

char *
nci_tfdpt( c_func, f0, d1, p2, t3 )
	SV* c_func
	float f0
	double d1
	void * p2
	char * t3
PREINIT:
	char *(*func)(float, double, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(float, double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2, t3);
OUTPUT:
	RETVAL

int
nci_ifdpt( c_func, f0, d1, p2, t3 )
	SV* c_func
	float f0
	double d1
	void * p2
	char * t3
PREINIT:
	int(*func)(float, double, void *, char *);
CODE:
	func   = INT2PTR(int(*)(float, double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2, t3);
OUTPUT:
	RETVAL

void *
nci_ptdpt( c_func, t0, d1, p2, t3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	char * t3
PREINIT:
	void *(*func)(char *, double, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2, t3);
OUTPUT:
	RETVAL

void
nci_vtdpt( c_func, t0, d1, p2, t3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	char * t3
PREINIT:
	void(*func)(char *, double, void *, char *);
CODE:
	func   = INT2PTR(void(*)(char *, double, void *, char *), SvIV(c_func) );
	(*func)(t0, d1, p2, t3);

double
nci_dtdpt( c_func, t0, d1, p2, t3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	char * t3
PREINIT:
	double(*func)(char *, double, void *, char *);
CODE:
	func   = INT2PTR(double(*)(char *, double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2, t3);
OUTPUT:
	RETVAL

short
nci_stdpt( c_func, t0, d1, p2, t3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	char * t3
PREINIT:
	short(*func)(char *, double, void *, char *);
CODE:
	func   = INT2PTR(short(*)(char *, double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2, t3);
OUTPUT:
	RETVAL

float
nci_ftdpt( c_func, t0, d1, p2, t3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	char * t3
PREINIT:
	float(*func)(char *, double, void *, char *);
CODE:
	func   = INT2PTR(float(*)(char *, double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2, t3);
OUTPUT:
	RETVAL

char *
nci_ttdpt( c_func, t0, d1, p2, t3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	char * t3
PREINIT:
	char *(*func)(char *, double, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2, t3);
OUTPUT:
	RETVAL

int
nci_itdpt( c_func, t0, d1, p2, t3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	char * t3
PREINIT:
	int(*func)(char *, double, void *, char *);
CODE:
	func   = INT2PTR(int(*)(char *, double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2, t3);
OUTPUT:
	RETVAL

void *
nci_pidpt( c_func, i0, d1, p2, t3 )
	SV* c_func
	int i0
	double d1
	void * p2
	char * t3
PREINIT:
	void *(*func)(int, double, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(int, double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2, t3);
OUTPUT:
	RETVAL

void
nci_vidpt( c_func, i0, d1, p2, t3 )
	SV* c_func
	int i0
	double d1
	void * p2
	char * t3
PREINIT:
	void(*func)(int, double, void *, char *);
CODE:
	func   = INT2PTR(void(*)(int, double, void *, char *), SvIV(c_func) );
	(*func)(i0, d1, p2, t3);

double
nci_didpt( c_func, i0, d1, p2, t3 )
	SV* c_func
	int i0
	double d1
	void * p2
	char * t3
PREINIT:
	double(*func)(int, double, void *, char *);
CODE:
	func   = INT2PTR(double(*)(int, double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2, t3);
OUTPUT:
	RETVAL

short
nci_sidpt( c_func, i0, d1, p2, t3 )
	SV* c_func
	int i0
	double d1
	void * p2
	char * t3
PREINIT:
	short(*func)(int, double, void *, char *);
CODE:
	func   = INT2PTR(short(*)(int, double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2, t3);
OUTPUT:
	RETVAL

float
nci_fidpt( c_func, i0, d1, p2, t3 )
	SV* c_func
	int i0
	double d1
	void * p2
	char * t3
PREINIT:
	float(*func)(int, double, void *, char *);
CODE:
	func   = INT2PTR(float(*)(int, double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2, t3);
OUTPUT:
	RETVAL

char *
nci_tidpt( c_func, i0, d1, p2, t3 )
	SV* c_func
	int i0
	double d1
	void * p2
	char * t3
PREINIT:
	char *(*func)(int, double, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(int, double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2, t3);
OUTPUT:
	RETVAL

int
nci_iidpt( c_func, i0, d1, p2, t3 )
	SV* c_func
	int i0
	double d1
	void * p2
	char * t3
PREINIT:
	int(*func)(int, double, void *, char *);
CODE:
	func   = INT2PTR(int(*)(int, double, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2, t3);
OUTPUT:
	RETVAL

void *
nci_ppspt( c_func, p0, s1, p2, t3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	char * t3
PREINIT:
	void *(*func)(void *, short, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2, t3);
OUTPUT:
	RETVAL

void
nci_vpspt( c_func, p0, s1, p2, t3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	char * t3
PREINIT:
	void(*func)(void *, short, void *, char *);
CODE:
	func   = INT2PTR(void(*)(void *, short, void *, char *), SvIV(c_func) );
	(*func)(p0, s1, p2, t3);

double
nci_dpspt( c_func, p0, s1, p2, t3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	char * t3
PREINIT:
	double(*func)(void *, short, void *, char *);
CODE:
	func   = INT2PTR(double(*)(void *, short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2, t3);
OUTPUT:
	RETVAL

short
nci_spspt( c_func, p0, s1, p2, t3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	char * t3
PREINIT:
	short(*func)(void *, short, void *, char *);
CODE:
	func   = INT2PTR(short(*)(void *, short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2, t3);
OUTPUT:
	RETVAL

float
nci_fpspt( c_func, p0, s1, p2, t3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	char * t3
PREINIT:
	float(*func)(void *, short, void *, char *);
CODE:
	func   = INT2PTR(float(*)(void *, short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2, t3);
OUTPUT:
	RETVAL

char *
nci_tpspt( c_func, p0, s1, p2, t3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	char * t3
PREINIT:
	char *(*func)(void *, short, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2, t3);
OUTPUT:
	RETVAL

int
nci_ipspt( c_func, p0, s1, p2, t3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	char * t3
PREINIT:
	int(*func)(void *, short, void *, char *);
CODE:
	func   = INT2PTR(int(*)(void *, short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2, t3);
OUTPUT:
	RETVAL

void *
nci_pvspt( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvspt( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvspt( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svspt( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvspt( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvspt( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivspt( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdspt( c_func, d0, s1, p2, t3 )
	SV* c_func
	double d0
	short s1
	void * p2
	char * t3
PREINIT:
	void *(*func)(double, short, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(double, short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2, t3);
OUTPUT:
	RETVAL

void
nci_vdspt( c_func, d0, s1, p2, t3 )
	SV* c_func
	double d0
	short s1
	void * p2
	char * t3
PREINIT:
	void(*func)(double, short, void *, char *);
CODE:
	func   = INT2PTR(void(*)(double, short, void *, char *), SvIV(c_func) );
	(*func)(d0, s1, p2, t3);

double
nci_ddspt( c_func, d0, s1, p2, t3 )
	SV* c_func
	double d0
	short s1
	void * p2
	char * t3
PREINIT:
	double(*func)(double, short, void *, char *);
CODE:
	func   = INT2PTR(double(*)(double, short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2, t3);
OUTPUT:
	RETVAL

short
nci_sdspt( c_func, d0, s1, p2, t3 )
	SV* c_func
	double d0
	short s1
	void * p2
	char * t3
PREINIT:
	short(*func)(double, short, void *, char *);
CODE:
	func   = INT2PTR(short(*)(double, short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2, t3);
OUTPUT:
	RETVAL

float
nci_fdspt( c_func, d0, s1, p2, t3 )
	SV* c_func
	double d0
	short s1
	void * p2
	char * t3
PREINIT:
	float(*func)(double, short, void *, char *);
CODE:
	func   = INT2PTR(float(*)(double, short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2, t3);
OUTPUT:
	RETVAL

char *
nci_tdspt( c_func, d0, s1, p2, t3 )
	SV* c_func
	double d0
	short s1
	void * p2
	char * t3
PREINIT:
	char *(*func)(double, short, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(double, short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2, t3);
OUTPUT:
	RETVAL

int
nci_idspt( c_func, d0, s1, p2, t3 )
	SV* c_func
	double d0
	short s1
	void * p2
	char * t3
PREINIT:
	int(*func)(double, short, void *, char *);
CODE:
	func   = INT2PTR(int(*)(double, short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2, t3);
OUTPUT:
	RETVAL

void *
nci_psspt( c_func, s0, s1, p2, t3 )
	SV* c_func
	short s0
	short s1
	void * p2
	char * t3
PREINIT:
	void *(*func)(short, short, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(short, short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2, t3);
OUTPUT:
	RETVAL

void
nci_vsspt( c_func, s0, s1, p2, t3 )
	SV* c_func
	short s0
	short s1
	void * p2
	char * t3
PREINIT:
	void(*func)(short, short, void *, char *);
CODE:
	func   = INT2PTR(void(*)(short, short, void *, char *), SvIV(c_func) );
	(*func)(s0, s1, p2, t3);

double
nci_dsspt( c_func, s0, s1, p2, t3 )
	SV* c_func
	short s0
	short s1
	void * p2
	char * t3
PREINIT:
	double(*func)(short, short, void *, char *);
CODE:
	func   = INT2PTR(double(*)(short, short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2, t3);
OUTPUT:
	RETVAL

short
nci_ssspt( c_func, s0, s1, p2, t3 )
	SV* c_func
	short s0
	short s1
	void * p2
	char * t3
PREINIT:
	short(*func)(short, short, void *, char *);
CODE:
	func   = INT2PTR(short(*)(short, short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2, t3);
OUTPUT:
	RETVAL

float
nci_fsspt( c_func, s0, s1, p2, t3 )
	SV* c_func
	short s0
	short s1
	void * p2
	char * t3
PREINIT:
	float(*func)(short, short, void *, char *);
CODE:
	func   = INT2PTR(float(*)(short, short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2, t3);
OUTPUT:
	RETVAL

char *
nci_tsspt( c_func, s0, s1, p2, t3 )
	SV* c_func
	short s0
	short s1
	void * p2
	char * t3
PREINIT:
	char *(*func)(short, short, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(short, short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2, t3);
OUTPUT:
	RETVAL

int
nci_isspt( c_func, s0, s1, p2, t3 )
	SV* c_func
	short s0
	short s1
	void * p2
	char * t3
PREINIT:
	int(*func)(short, short, void *, char *);
CODE:
	func   = INT2PTR(int(*)(short, short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2, t3);
OUTPUT:
	RETVAL

void *
nci_pfspt( c_func, f0, s1, p2, t3 )
	SV* c_func
	float f0
	short s1
	void * p2
	char * t3
PREINIT:
	void *(*func)(float, short, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(float, short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2, t3);
OUTPUT:
	RETVAL

void
nci_vfspt( c_func, f0, s1, p2, t3 )
	SV* c_func
	float f0
	short s1
	void * p2
	char * t3
PREINIT:
	void(*func)(float, short, void *, char *);
CODE:
	func   = INT2PTR(void(*)(float, short, void *, char *), SvIV(c_func) );
	(*func)(f0, s1, p2, t3);

double
nci_dfspt( c_func, f0, s1, p2, t3 )
	SV* c_func
	float f0
	short s1
	void * p2
	char * t3
PREINIT:
	double(*func)(float, short, void *, char *);
CODE:
	func   = INT2PTR(double(*)(float, short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2, t3);
OUTPUT:
	RETVAL

short
nci_sfspt( c_func, f0, s1, p2, t3 )
	SV* c_func
	float f0
	short s1
	void * p2
	char * t3
PREINIT:
	short(*func)(float, short, void *, char *);
CODE:
	func   = INT2PTR(short(*)(float, short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2, t3);
OUTPUT:
	RETVAL

float
nci_ffspt( c_func, f0, s1, p2, t3 )
	SV* c_func
	float f0
	short s1
	void * p2
	char * t3
PREINIT:
	float(*func)(float, short, void *, char *);
CODE:
	func   = INT2PTR(float(*)(float, short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2, t3);
OUTPUT:
	RETVAL

char *
nci_tfspt( c_func, f0, s1, p2, t3 )
	SV* c_func
	float f0
	short s1
	void * p2
	char * t3
PREINIT:
	char *(*func)(float, short, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(float, short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2, t3);
OUTPUT:
	RETVAL

int
nci_ifspt( c_func, f0, s1, p2, t3 )
	SV* c_func
	float f0
	short s1
	void * p2
	char * t3
PREINIT:
	int(*func)(float, short, void *, char *);
CODE:
	func   = INT2PTR(int(*)(float, short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2, t3);
OUTPUT:
	RETVAL

void *
nci_ptspt( c_func, t0, s1, p2, t3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	char * t3
PREINIT:
	void *(*func)(char *, short, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2, t3);
OUTPUT:
	RETVAL

void
nci_vtspt( c_func, t0, s1, p2, t3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	char * t3
PREINIT:
	void(*func)(char *, short, void *, char *);
CODE:
	func   = INT2PTR(void(*)(char *, short, void *, char *), SvIV(c_func) );
	(*func)(t0, s1, p2, t3);

double
nci_dtspt( c_func, t0, s1, p2, t3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	char * t3
PREINIT:
	double(*func)(char *, short, void *, char *);
CODE:
	func   = INT2PTR(double(*)(char *, short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2, t3);
OUTPUT:
	RETVAL

short
nci_stspt( c_func, t0, s1, p2, t3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	char * t3
PREINIT:
	short(*func)(char *, short, void *, char *);
CODE:
	func   = INT2PTR(short(*)(char *, short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2, t3);
OUTPUT:
	RETVAL

float
nci_ftspt( c_func, t0, s1, p2, t3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	char * t3
PREINIT:
	float(*func)(char *, short, void *, char *);
CODE:
	func   = INT2PTR(float(*)(char *, short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2, t3);
OUTPUT:
	RETVAL

char *
nci_ttspt( c_func, t0, s1, p2, t3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	char * t3
PREINIT:
	char *(*func)(char *, short, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2, t3);
OUTPUT:
	RETVAL

int
nci_itspt( c_func, t0, s1, p2, t3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	char * t3
PREINIT:
	int(*func)(char *, short, void *, char *);
CODE:
	func   = INT2PTR(int(*)(char *, short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2, t3);
OUTPUT:
	RETVAL

void *
nci_pispt( c_func, i0, s1, p2, t3 )
	SV* c_func
	int i0
	short s1
	void * p2
	char * t3
PREINIT:
	void *(*func)(int, short, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(int, short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2, t3);
OUTPUT:
	RETVAL

void
nci_vispt( c_func, i0, s1, p2, t3 )
	SV* c_func
	int i0
	short s1
	void * p2
	char * t3
PREINIT:
	void(*func)(int, short, void *, char *);
CODE:
	func   = INT2PTR(void(*)(int, short, void *, char *), SvIV(c_func) );
	(*func)(i0, s1, p2, t3);

double
nci_dispt( c_func, i0, s1, p2, t3 )
	SV* c_func
	int i0
	short s1
	void * p2
	char * t3
PREINIT:
	double(*func)(int, short, void *, char *);
CODE:
	func   = INT2PTR(double(*)(int, short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2, t3);
OUTPUT:
	RETVAL

short
nci_sispt( c_func, i0, s1, p2, t3 )
	SV* c_func
	int i0
	short s1
	void * p2
	char * t3
PREINIT:
	short(*func)(int, short, void *, char *);
CODE:
	func   = INT2PTR(short(*)(int, short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2, t3);
OUTPUT:
	RETVAL

float
nci_fispt( c_func, i0, s1, p2, t3 )
	SV* c_func
	int i0
	short s1
	void * p2
	char * t3
PREINIT:
	float(*func)(int, short, void *, char *);
CODE:
	func   = INT2PTR(float(*)(int, short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2, t3);
OUTPUT:
	RETVAL

char *
nci_tispt( c_func, i0, s1, p2, t3 )
	SV* c_func
	int i0
	short s1
	void * p2
	char * t3
PREINIT:
	char *(*func)(int, short, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(int, short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2, t3);
OUTPUT:
	RETVAL

int
nci_iispt( c_func, i0, s1, p2, t3 )
	SV* c_func
	int i0
	short s1
	void * p2
	char * t3
PREINIT:
	int(*func)(int, short, void *, char *);
CODE:
	func   = INT2PTR(int(*)(int, short, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2, t3);
OUTPUT:
	RETVAL

void *
nci_ppfpt( c_func, p0, f1, p2, t3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	char * t3
PREINIT:
	void *(*func)(void *, float, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2, t3);
OUTPUT:
	RETVAL

void
nci_vpfpt( c_func, p0, f1, p2, t3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	char * t3
PREINIT:
	void(*func)(void *, float, void *, char *);
CODE:
	func   = INT2PTR(void(*)(void *, float, void *, char *), SvIV(c_func) );
	(*func)(p0, f1, p2, t3);

double
nci_dpfpt( c_func, p0, f1, p2, t3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	char * t3
PREINIT:
	double(*func)(void *, float, void *, char *);
CODE:
	func   = INT2PTR(double(*)(void *, float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2, t3);
OUTPUT:
	RETVAL

short
nci_spfpt( c_func, p0, f1, p2, t3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	char * t3
PREINIT:
	short(*func)(void *, float, void *, char *);
CODE:
	func   = INT2PTR(short(*)(void *, float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2, t3);
OUTPUT:
	RETVAL

float
nci_fpfpt( c_func, p0, f1, p2, t3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	char * t3
PREINIT:
	float(*func)(void *, float, void *, char *);
CODE:
	func   = INT2PTR(float(*)(void *, float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2, t3);
OUTPUT:
	RETVAL

char *
nci_tpfpt( c_func, p0, f1, p2, t3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	char * t3
PREINIT:
	char *(*func)(void *, float, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2, t3);
OUTPUT:
	RETVAL

int
nci_ipfpt( c_func, p0, f1, p2, t3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	char * t3
PREINIT:
	int(*func)(void *, float, void *, char *);
CODE:
	func   = INT2PTR(int(*)(void *, float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2, t3);
OUTPUT:
	RETVAL

void *
nci_pvfpt( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvfpt( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvfpt( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svfpt( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvfpt( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvfpt( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivfpt( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdfpt( c_func, d0, f1, p2, t3 )
	SV* c_func
	double d0
	float f1
	void * p2
	char * t3
PREINIT:
	void *(*func)(double, float, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(double, float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2, t3);
OUTPUT:
	RETVAL

void
nci_vdfpt( c_func, d0, f1, p2, t3 )
	SV* c_func
	double d0
	float f1
	void * p2
	char * t3
PREINIT:
	void(*func)(double, float, void *, char *);
CODE:
	func   = INT2PTR(void(*)(double, float, void *, char *), SvIV(c_func) );
	(*func)(d0, f1, p2, t3);

double
nci_ddfpt( c_func, d0, f1, p2, t3 )
	SV* c_func
	double d0
	float f1
	void * p2
	char * t3
PREINIT:
	double(*func)(double, float, void *, char *);
CODE:
	func   = INT2PTR(double(*)(double, float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2, t3);
OUTPUT:
	RETVAL

short
nci_sdfpt( c_func, d0, f1, p2, t3 )
	SV* c_func
	double d0
	float f1
	void * p2
	char * t3
PREINIT:
	short(*func)(double, float, void *, char *);
CODE:
	func   = INT2PTR(short(*)(double, float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2, t3);
OUTPUT:
	RETVAL

float
nci_fdfpt( c_func, d0, f1, p2, t3 )
	SV* c_func
	double d0
	float f1
	void * p2
	char * t3
PREINIT:
	float(*func)(double, float, void *, char *);
CODE:
	func   = INT2PTR(float(*)(double, float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2, t3);
OUTPUT:
	RETVAL

char *
nci_tdfpt( c_func, d0, f1, p2, t3 )
	SV* c_func
	double d0
	float f1
	void * p2
	char * t3
PREINIT:
	char *(*func)(double, float, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(double, float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2, t3);
OUTPUT:
	RETVAL

int
nci_idfpt( c_func, d0, f1, p2, t3 )
	SV* c_func
	double d0
	float f1
	void * p2
	char * t3
PREINIT:
	int(*func)(double, float, void *, char *);
CODE:
	func   = INT2PTR(int(*)(double, float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2, t3);
OUTPUT:
	RETVAL

void *
nci_psfpt( c_func, s0, f1, p2, t3 )
	SV* c_func
	short s0
	float f1
	void * p2
	char * t3
PREINIT:
	void *(*func)(short, float, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(short, float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2, t3);
OUTPUT:
	RETVAL

void
nci_vsfpt( c_func, s0, f1, p2, t3 )
	SV* c_func
	short s0
	float f1
	void * p2
	char * t3
PREINIT:
	void(*func)(short, float, void *, char *);
CODE:
	func   = INT2PTR(void(*)(short, float, void *, char *), SvIV(c_func) );
	(*func)(s0, f1, p2, t3);

double
nci_dsfpt( c_func, s0, f1, p2, t3 )
	SV* c_func
	short s0
	float f1
	void * p2
	char * t3
PREINIT:
	double(*func)(short, float, void *, char *);
CODE:
	func   = INT2PTR(double(*)(short, float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2, t3);
OUTPUT:
	RETVAL

short
nci_ssfpt( c_func, s0, f1, p2, t3 )
	SV* c_func
	short s0
	float f1
	void * p2
	char * t3
PREINIT:
	short(*func)(short, float, void *, char *);
CODE:
	func   = INT2PTR(short(*)(short, float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2, t3);
OUTPUT:
	RETVAL

float
nci_fsfpt( c_func, s0, f1, p2, t3 )
	SV* c_func
	short s0
	float f1
	void * p2
	char * t3
PREINIT:
	float(*func)(short, float, void *, char *);
CODE:
	func   = INT2PTR(float(*)(short, float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2, t3);
OUTPUT:
	RETVAL

char *
nci_tsfpt( c_func, s0, f1, p2, t3 )
	SV* c_func
	short s0
	float f1
	void * p2
	char * t3
PREINIT:
	char *(*func)(short, float, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(short, float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2, t3);
OUTPUT:
	RETVAL

int
nci_isfpt( c_func, s0, f1, p2, t3 )
	SV* c_func
	short s0
	float f1
	void * p2
	char * t3
PREINIT:
	int(*func)(short, float, void *, char *);
CODE:
	func   = INT2PTR(int(*)(short, float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2, t3);
OUTPUT:
	RETVAL

void *
nci_pffpt( c_func, f0, f1, p2, t3 )
	SV* c_func
	float f0
	float f1
	void * p2
	char * t3
PREINIT:
	void *(*func)(float, float, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(float, float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2, t3);
OUTPUT:
	RETVAL

void
nci_vffpt( c_func, f0, f1, p2, t3 )
	SV* c_func
	float f0
	float f1
	void * p2
	char * t3
PREINIT:
	void(*func)(float, float, void *, char *);
CODE:
	func   = INT2PTR(void(*)(float, float, void *, char *), SvIV(c_func) );
	(*func)(f0, f1, p2, t3);

double
nci_dffpt( c_func, f0, f1, p2, t3 )
	SV* c_func
	float f0
	float f1
	void * p2
	char * t3
PREINIT:
	double(*func)(float, float, void *, char *);
CODE:
	func   = INT2PTR(double(*)(float, float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2, t3);
OUTPUT:
	RETVAL

short
nci_sffpt( c_func, f0, f1, p2, t3 )
	SV* c_func
	float f0
	float f1
	void * p2
	char * t3
PREINIT:
	short(*func)(float, float, void *, char *);
CODE:
	func   = INT2PTR(short(*)(float, float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2, t3);
OUTPUT:
	RETVAL

float
nci_fffpt( c_func, f0, f1, p2, t3 )
	SV* c_func
	float f0
	float f1
	void * p2
	char * t3
PREINIT:
	float(*func)(float, float, void *, char *);
CODE:
	func   = INT2PTR(float(*)(float, float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2, t3);
OUTPUT:
	RETVAL

char *
nci_tffpt( c_func, f0, f1, p2, t3 )
	SV* c_func
	float f0
	float f1
	void * p2
	char * t3
PREINIT:
	char *(*func)(float, float, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(float, float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2, t3);
OUTPUT:
	RETVAL

int
nci_iffpt( c_func, f0, f1, p2, t3 )
	SV* c_func
	float f0
	float f1
	void * p2
	char * t3
PREINIT:
	int(*func)(float, float, void *, char *);
CODE:
	func   = INT2PTR(int(*)(float, float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2, t3);
OUTPUT:
	RETVAL

void *
nci_ptfpt( c_func, t0, f1, p2, t3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	char * t3
PREINIT:
	void *(*func)(char *, float, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2, t3);
OUTPUT:
	RETVAL

void
nci_vtfpt( c_func, t0, f1, p2, t3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	char * t3
PREINIT:
	void(*func)(char *, float, void *, char *);
CODE:
	func   = INT2PTR(void(*)(char *, float, void *, char *), SvIV(c_func) );
	(*func)(t0, f1, p2, t3);

double
nci_dtfpt( c_func, t0, f1, p2, t3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	char * t3
PREINIT:
	double(*func)(char *, float, void *, char *);
CODE:
	func   = INT2PTR(double(*)(char *, float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2, t3);
OUTPUT:
	RETVAL

short
nci_stfpt( c_func, t0, f1, p2, t3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	char * t3
PREINIT:
	short(*func)(char *, float, void *, char *);
CODE:
	func   = INT2PTR(short(*)(char *, float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2, t3);
OUTPUT:
	RETVAL

float
nci_ftfpt( c_func, t0, f1, p2, t3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	char * t3
PREINIT:
	float(*func)(char *, float, void *, char *);
CODE:
	func   = INT2PTR(float(*)(char *, float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2, t3);
OUTPUT:
	RETVAL

char *
nci_ttfpt( c_func, t0, f1, p2, t3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	char * t3
PREINIT:
	char *(*func)(char *, float, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2, t3);
OUTPUT:
	RETVAL

int
nci_itfpt( c_func, t0, f1, p2, t3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	char * t3
PREINIT:
	int(*func)(char *, float, void *, char *);
CODE:
	func   = INT2PTR(int(*)(char *, float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2, t3);
OUTPUT:
	RETVAL

void *
nci_pifpt( c_func, i0, f1, p2, t3 )
	SV* c_func
	int i0
	float f1
	void * p2
	char * t3
PREINIT:
	void *(*func)(int, float, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(int, float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2, t3);
OUTPUT:
	RETVAL

void
nci_vifpt( c_func, i0, f1, p2, t3 )
	SV* c_func
	int i0
	float f1
	void * p2
	char * t3
PREINIT:
	void(*func)(int, float, void *, char *);
CODE:
	func   = INT2PTR(void(*)(int, float, void *, char *), SvIV(c_func) );
	(*func)(i0, f1, p2, t3);

double
nci_difpt( c_func, i0, f1, p2, t3 )
	SV* c_func
	int i0
	float f1
	void * p2
	char * t3
PREINIT:
	double(*func)(int, float, void *, char *);
CODE:
	func   = INT2PTR(double(*)(int, float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2, t3);
OUTPUT:
	RETVAL

short
nci_sifpt( c_func, i0, f1, p2, t3 )
	SV* c_func
	int i0
	float f1
	void * p2
	char * t3
PREINIT:
	short(*func)(int, float, void *, char *);
CODE:
	func   = INT2PTR(short(*)(int, float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2, t3);
OUTPUT:
	RETVAL

float
nci_fifpt( c_func, i0, f1, p2, t3 )
	SV* c_func
	int i0
	float f1
	void * p2
	char * t3
PREINIT:
	float(*func)(int, float, void *, char *);
CODE:
	func   = INT2PTR(float(*)(int, float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2, t3);
OUTPUT:
	RETVAL

char *
nci_tifpt( c_func, i0, f1, p2, t3 )
	SV* c_func
	int i0
	float f1
	void * p2
	char * t3
PREINIT:
	char *(*func)(int, float, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(int, float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2, t3);
OUTPUT:
	RETVAL

int
nci_iifpt( c_func, i0, f1, p2, t3 )
	SV* c_func
	int i0
	float f1
	void * p2
	char * t3
PREINIT:
	int(*func)(int, float, void *, char *);
CODE:
	func   = INT2PTR(int(*)(int, float, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2, t3);
OUTPUT:
	RETVAL

void *
nci_pptpt( c_func, p0, t1, p2, t3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	char * t3
PREINIT:
	void *(*func)(void *, char *, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2, t3);
OUTPUT:
	RETVAL

void
nci_vptpt( c_func, p0, t1, p2, t3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	char * t3
PREINIT:
	void(*func)(void *, char *, void *, char *);
CODE:
	func   = INT2PTR(void(*)(void *, char *, void *, char *), SvIV(c_func) );
	(*func)(p0, t1, p2, t3);

double
nci_dptpt( c_func, p0, t1, p2, t3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	char * t3
PREINIT:
	double(*func)(void *, char *, void *, char *);
CODE:
	func   = INT2PTR(double(*)(void *, char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2, t3);
OUTPUT:
	RETVAL

short
nci_sptpt( c_func, p0, t1, p2, t3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	char * t3
PREINIT:
	short(*func)(void *, char *, void *, char *);
CODE:
	func   = INT2PTR(short(*)(void *, char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2, t3);
OUTPUT:
	RETVAL

float
nci_fptpt( c_func, p0, t1, p2, t3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	char * t3
PREINIT:
	float(*func)(void *, char *, void *, char *);
CODE:
	func   = INT2PTR(float(*)(void *, char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2, t3);
OUTPUT:
	RETVAL

char *
nci_tptpt( c_func, p0, t1, p2, t3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	char * t3
PREINIT:
	char *(*func)(void *, char *, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2, t3);
OUTPUT:
	RETVAL

int
nci_iptpt( c_func, p0, t1, p2, t3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	char * t3
PREINIT:
	int(*func)(void *, char *, void *, char *);
CODE:
	func   = INT2PTR(int(*)(void *, char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2, t3);
OUTPUT:
	RETVAL

void *
nci_pvtpt( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvtpt( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvtpt( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svtpt( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvtpt( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvtpt( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivtpt( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdtpt( c_func, d0, t1, p2, t3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	char * t3
PREINIT:
	void *(*func)(double, char *, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(double, char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2, t3);
OUTPUT:
	RETVAL

void
nci_vdtpt( c_func, d0, t1, p2, t3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	char * t3
PREINIT:
	void(*func)(double, char *, void *, char *);
CODE:
	func   = INT2PTR(void(*)(double, char *, void *, char *), SvIV(c_func) );
	(*func)(d0, t1, p2, t3);

double
nci_ddtpt( c_func, d0, t1, p2, t3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	char * t3
PREINIT:
	double(*func)(double, char *, void *, char *);
CODE:
	func   = INT2PTR(double(*)(double, char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2, t3);
OUTPUT:
	RETVAL

short
nci_sdtpt( c_func, d0, t1, p2, t3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	char * t3
PREINIT:
	short(*func)(double, char *, void *, char *);
CODE:
	func   = INT2PTR(short(*)(double, char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2, t3);
OUTPUT:
	RETVAL

float
nci_fdtpt( c_func, d0, t1, p2, t3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	char * t3
PREINIT:
	float(*func)(double, char *, void *, char *);
CODE:
	func   = INT2PTR(float(*)(double, char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2, t3);
OUTPUT:
	RETVAL

char *
nci_tdtpt( c_func, d0, t1, p2, t3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	char * t3
PREINIT:
	char *(*func)(double, char *, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(double, char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2, t3);
OUTPUT:
	RETVAL

int
nci_idtpt( c_func, d0, t1, p2, t3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	char * t3
PREINIT:
	int(*func)(double, char *, void *, char *);
CODE:
	func   = INT2PTR(int(*)(double, char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2, t3);
OUTPUT:
	RETVAL

void *
nci_pstpt( c_func, s0, t1, p2, t3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	char * t3
PREINIT:
	void *(*func)(short, char *, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(short, char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2, t3);
OUTPUT:
	RETVAL

void
nci_vstpt( c_func, s0, t1, p2, t3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	char * t3
PREINIT:
	void(*func)(short, char *, void *, char *);
CODE:
	func   = INT2PTR(void(*)(short, char *, void *, char *), SvIV(c_func) );
	(*func)(s0, t1, p2, t3);

double
nci_dstpt( c_func, s0, t1, p2, t3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	char * t3
PREINIT:
	double(*func)(short, char *, void *, char *);
CODE:
	func   = INT2PTR(double(*)(short, char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2, t3);
OUTPUT:
	RETVAL

short
nci_sstpt( c_func, s0, t1, p2, t3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	char * t3
PREINIT:
	short(*func)(short, char *, void *, char *);
CODE:
	func   = INT2PTR(short(*)(short, char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2, t3);
OUTPUT:
	RETVAL

float
nci_fstpt( c_func, s0, t1, p2, t3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	char * t3
PREINIT:
	float(*func)(short, char *, void *, char *);
CODE:
	func   = INT2PTR(float(*)(short, char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2, t3);
OUTPUT:
	RETVAL

char *
nci_tstpt( c_func, s0, t1, p2, t3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	char * t3
PREINIT:
	char *(*func)(short, char *, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(short, char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2, t3);
OUTPUT:
	RETVAL

int
nci_istpt( c_func, s0, t1, p2, t3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	char * t3
PREINIT:
	int(*func)(short, char *, void *, char *);
CODE:
	func   = INT2PTR(int(*)(short, char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2, t3);
OUTPUT:
	RETVAL

void *
nci_pftpt( c_func, f0, t1, p2, t3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	char * t3
PREINIT:
	void *(*func)(float, char *, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(float, char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2, t3);
OUTPUT:
	RETVAL

void
nci_vftpt( c_func, f0, t1, p2, t3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	char * t3
PREINIT:
	void(*func)(float, char *, void *, char *);
CODE:
	func   = INT2PTR(void(*)(float, char *, void *, char *), SvIV(c_func) );
	(*func)(f0, t1, p2, t3);

double
nci_dftpt( c_func, f0, t1, p2, t3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	char * t3
PREINIT:
	double(*func)(float, char *, void *, char *);
CODE:
	func   = INT2PTR(double(*)(float, char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2, t3);
OUTPUT:
	RETVAL

short
nci_sftpt( c_func, f0, t1, p2, t3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	char * t3
PREINIT:
	short(*func)(float, char *, void *, char *);
CODE:
	func   = INT2PTR(short(*)(float, char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2, t3);
OUTPUT:
	RETVAL

float
nci_fftpt( c_func, f0, t1, p2, t3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	char * t3
PREINIT:
	float(*func)(float, char *, void *, char *);
CODE:
	func   = INT2PTR(float(*)(float, char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2, t3);
OUTPUT:
	RETVAL

char *
nci_tftpt( c_func, f0, t1, p2, t3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	char * t3
PREINIT:
	char *(*func)(float, char *, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(float, char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2, t3);
OUTPUT:
	RETVAL

int
nci_iftpt( c_func, f0, t1, p2, t3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	char * t3
PREINIT:
	int(*func)(float, char *, void *, char *);
CODE:
	func   = INT2PTR(int(*)(float, char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2, t3);
OUTPUT:
	RETVAL

void *
nci_pttpt( c_func, t0, t1, p2, t3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	char * t3
PREINIT:
	void *(*func)(char *, char *, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2, t3);
OUTPUT:
	RETVAL

void
nci_vttpt( c_func, t0, t1, p2, t3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	char * t3
PREINIT:
	void(*func)(char *, char *, void *, char *);
CODE:
	func   = INT2PTR(void(*)(char *, char *, void *, char *), SvIV(c_func) );
	(*func)(t0, t1, p2, t3);

double
nci_dttpt( c_func, t0, t1, p2, t3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	char * t3
PREINIT:
	double(*func)(char *, char *, void *, char *);
CODE:
	func   = INT2PTR(double(*)(char *, char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2, t3);
OUTPUT:
	RETVAL

short
nci_sttpt( c_func, t0, t1, p2, t3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	char * t3
PREINIT:
	short(*func)(char *, char *, void *, char *);
CODE:
	func   = INT2PTR(short(*)(char *, char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2, t3);
OUTPUT:
	RETVAL

float
nci_fttpt( c_func, t0, t1, p2, t3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	char * t3
PREINIT:
	float(*func)(char *, char *, void *, char *);
CODE:
	func   = INT2PTR(float(*)(char *, char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2, t3);
OUTPUT:
	RETVAL

char *
nci_tttpt( c_func, t0, t1, p2, t3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	char * t3
PREINIT:
	char *(*func)(char *, char *, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2, t3);
OUTPUT:
	RETVAL

int
nci_ittpt( c_func, t0, t1, p2, t3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	char * t3
PREINIT:
	int(*func)(char *, char *, void *, char *);
CODE:
	func   = INT2PTR(int(*)(char *, char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2, t3);
OUTPUT:
	RETVAL

void *
nci_pitpt( c_func, i0, t1, p2, t3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	char * t3
PREINIT:
	void *(*func)(int, char *, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(int, char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2, t3);
OUTPUT:
	RETVAL

void
nci_vitpt( c_func, i0, t1, p2, t3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	char * t3
PREINIT:
	void(*func)(int, char *, void *, char *);
CODE:
	func   = INT2PTR(void(*)(int, char *, void *, char *), SvIV(c_func) );
	(*func)(i0, t1, p2, t3);

double
nci_ditpt( c_func, i0, t1, p2, t3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	char * t3
PREINIT:
	double(*func)(int, char *, void *, char *);
CODE:
	func   = INT2PTR(double(*)(int, char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2, t3);
OUTPUT:
	RETVAL

short
nci_sitpt( c_func, i0, t1, p2, t3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	char * t3
PREINIT:
	short(*func)(int, char *, void *, char *);
CODE:
	func   = INT2PTR(short(*)(int, char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2, t3);
OUTPUT:
	RETVAL

float
nci_fitpt( c_func, i0, t1, p2, t3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	char * t3
PREINIT:
	float(*func)(int, char *, void *, char *);
CODE:
	func   = INT2PTR(float(*)(int, char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2, t3);
OUTPUT:
	RETVAL

char *
nci_titpt( c_func, i0, t1, p2, t3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	char * t3
PREINIT:
	char *(*func)(int, char *, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(int, char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2, t3);
OUTPUT:
	RETVAL

int
nci_iitpt( c_func, i0, t1, p2, t3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	char * t3
PREINIT:
	int(*func)(int, char *, void *, char *);
CODE:
	func   = INT2PTR(int(*)(int, char *, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2, t3);
OUTPUT:
	RETVAL

void *
nci_ppipt( c_func, p0, i1, p2, t3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	char * t3
PREINIT:
	void *(*func)(void *, int, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2, t3);
OUTPUT:
	RETVAL

void
nci_vpipt( c_func, p0, i1, p2, t3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	char * t3
PREINIT:
	void(*func)(void *, int, void *, char *);
CODE:
	func   = INT2PTR(void(*)(void *, int, void *, char *), SvIV(c_func) );
	(*func)(p0, i1, p2, t3);

double
nci_dpipt( c_func, p0, i1, p2, t3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	char * t3
PREINIT:
	double(*func)(void *, int, void *, char *);
CODE:
	func   = INT2PTR(double(*)(void *, int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2, t3);
OUTPUT:
	RETVAL

short
nci_spipt( c_func, p0, i1, p2, t3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	char * t3
PREINIT:
	short(*func)(void *, int, void *, char *);
CODE:
	func   = INT2PTR(short(*)(void *, int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2, t3);
OUTPUT:
	RETVAL

float
nci_fpipt( c_func, p0, i1, p2, t3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	char * t3
PREINIT:
	float(*func)(void *, int, void *, char *);
CODE:
	func   = INT2PTR(float(*)(void *, int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2, t3);
OUTPUT:
	RETVAL

char *
nci_tpipt( c_func, p0, i1, p2, t3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	char * t3
PREINIT:
	char *(*func)(void *, int, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2, t3);
OUTPUT:
	RETVAL

int
nci_ipipt( c_func, p0, i1, p2, t3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	char * t3
PREINIT:
	int(*func)(void *, int, void *, char *);
CODE:
	func   = INT2PTR(int(*)(void *, int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2, t3);
OUTPUT:
	RETVAL

void *
nci_pvipt( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvipt( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvipt( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svipt( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvipt( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvipt( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivipt( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdipt( c_func, d0, i1, p2, t3 )
	SV* c_func
	double d0
	int i1
	void * p2
	char * t3
PREINIT:
	void *(*func)(double, int, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(double, int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2, t3);
OUTPUT:
	RETVAL

void
nci_vdipt( c_func, d0, i1, p2, t3 )
	SV* c_func
	double d0
	int i1
	void * p2
	char * t3
PREINIT:
	void(*func)(double, int, void *, char *);
CODE:
	func   = INT2PTR(void(*)(double, int, void *, char *), SvIV(c_func) );
	(*func)(d0, i1, p2, t3);

double
nci_ddipt( c_func, d0, i1, p2, t3 )
	SV* c_func
	double d0
	int i1
	void * p2
	char * t3
PREINIT:
	double(*func)(double, int, void *, char *);
CODE:
	func   = INT2PTR(double(*)(double, int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2, t3);
OUTPUT:
	RETVAL

short
nci_sdipt( c_func, d0, i1, p2, t3 )
	SV* c_func
	double d0
	int i1
	void * p2
	char * t3
PREINIT:
	short(*func)(double, int, void *, char *);
CODE:
	func   = INT2PTR(short(*)(double, int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2, t3);
OUTPUT:
	RETVAL

float
nci_fdipt( c_func, d0, i1, p2, t3 )
	SV* c_func
	double d0
	int i1
	void * p2
	char * t3
PREINIT:
	float(*func)(double, int, void *, char *);
CODE:
	func   = INT2PTR(float(*)(double, int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2, t3);
OUTPUT:
	RETVAL

char *
nci_tdipt( c_func, d0, i1, p2, t3 )
	SV* c_func
	double d0
	int i1
	void * p2
	char * t3
PREINIT:
	char *(*func)(double, int, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(double, int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2, t3);
OUTPUT:
	RETVAL

int
nci_idipt( c_func, d0, i1, p2, t3 )
	SV* c_func
	double d0
	int i1
	void * p2
	char * t3
PREINIT:
	int(*func)(double, int, void *, char *);
CODE:
	func   = INT2PTR(int(*)(double, int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2, t3);
OUTPUT:
	RETVAL

void *
nci_psipt( c_func, s0, i1, p2, t3 )
	SV* c_func
	short s0
	int i1
	void * p2
	char * t3
PREINIT:
	void *(*func)(short, int, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(short, int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2, t3);
OUTPUT:
	RETVAL

void
nci_vsipt( c_func, s0, i1, p2, t3 )
	SV* c_func
	short s0
	int i1
	void * p2
	char * t3
PREINIT:
	void(*func)(short, int, void *, char *);
CODE:
	func   = INT2PTR(void(*)(short, int, void *, char *), SvIV(c_func) );
	(*func)(s0, i1, p2, t3);

double
nci_dsipt( c_func, s0, i1, p2, t3 )
	SV* c_func
	short s0
	int i1
	void * p2
	char * t3
PREINIT:
	double(*func)(short, int, void *, char *);
CODE:
	func   = INT2PTR(double(*)(short, int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2, t3);
OUTPUT:
	RETVAL

short
nci_ssipt( c_func, s0, i1, p2, t3 )
	SV* c_func
	short s0
	int i1
	void * p2
	char * t3
PREINIT:
	short(*func)(short, int, void *, char *);
CODE:
	func   = INT2PTR(short(*)(short, int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2, t3);
OUTPUT:
	RETVAL

float
nci_fsipt( c_func, s0, i1, p2, t3 )
	SV* c_func
	short s0
	int i1
	void * p2
	char * t3
PREINIT:
	float(*func)(short, int, void *, char *);
CODE:
	func   = INT2PTR(float(*)(short, int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2, t3);
OUTPUT:
	RETVAL

char *
nci_tsipt( c_func, s0, i1, p2, t3 )
	SV* c_func
	short s0
	int i1
	void * p2
	char * t3
PREINIT:
	char *(*func)(short, int, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(short, int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2, t3);
OUTPUT:
	RETVAL

int
nci_isipt( c_func, s0, i1, p2, t3 )
	SV* c_func
	short s0
	int i1
	void * p2
	char * t3
PREINIT:
	int(*func)(short, int, void *, char *);
CODE:
	func   = INT2PTR(int(*)(short, int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2, t3);
OUTPUT:
	RETVAL

void *
nci_pfipt( c_func, f0, i1, p2, t3 )
	SV* c_func
	float f0
	int i1
	void * p2
	char * t3
PREINIT:
	void *(*func)(float, int, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(float, int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2, t3);
OUTPUT:
	RETVAL

void
nci_vfipt( c_func, f0, i1, p2, t3 )
	SV* c_func
	float f0
	int i1
	void * p2
	char * t3
PREINIT:
	void(*func)(float, int, void *, char *);
CODE:
	func   = INT2PTR(void(*)(float, int, void *, char *), SvIV(c_func) );
	(*func)(f0, i1, p2, t3);

double
nci_dfipt( c_func, f0, i1, p2, t3 )
	SV* c_func
	float f0
	int i1
	void * p2
	char * t3
PREINIT:
	double(*func)(float, int, void *, char *);
CODE:
	func   = INT2PTR(double(*)(float, int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2, t3);
OUTPUT:
	RETVAL

short
nci_sfipt( c_func, f0, i1, p2, t3 )
	SV* c_func
	float f0
	int i1
	void * p2
	char * t3
PREINIT:
	short(*func)(float, int, void *, char *);
CODE:
	func   = INT2PTR(short(*)(float, int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2, t3);
OUTPUT:
	RETVAL

float
nci_ffipt( c_func, f0, i1, p2, t3 )
	SV* c_func
	float f0
	int i1
	void * p2
	char * t3
PREINIT:
	float(*func)(float, int, void *, char *);
CODE:
	func   = INT2PTR(float(*)(float, int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2, t3);
OUTPUT:
	RETVAL

char *
nci_tfipt( c_func, f0, i1, p2, t3 )
	SV* c_func
	float f0
	int i1
	void * p2
	char * t3
PREINIT:
	char *(*func)(float, int, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(float, int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2, t3);
OUTPUT:
	RETVAL

int
nci_ifipt( c_func, f0, i1, p2, t3 )
	SV* c_func
	float f0
	int i1
	void * p2
	char * t3
PREINIT:
	int(*func)(float, int, void *, char *);
CODE:
	func   = INT2PTR(int(*)(float, int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2, t3);
OUTPUT:
	RETVAL

void *
nci_ptipt( c_func, t0, i1, p2, t3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	char * t3
PREINIT:
	void *(*func)(char *, int, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2, t3);
OUTPUT:
	RETVAL

void
nci_vtipt( c_func, t0, i1, p2, t3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	char * t3
PREINIT:
	void(*func)(char *, int, void *, char *);
CODE:
	func   = INT2PTR(void(*)(char *, int, void *, char *), SvIV(c_func) );
	(*func)(t0, i1, p2, t3);

double
nci_dtipt( c_func, t0, i1, p2, t3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	char * t3
PREINIT:
	double(*func)(char *, int, void *, char *);
CODE:
	func   = INT2PTR(double(*)(char *, int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2, t3);
OUTPUT:
	RETVAL

short
nci_stipt( c_func, t0, i1, p2, t3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	char * t3
PREINIT:
	short(*func)(char *, int, void *, char *);
CODE:
	func   = INT2PTR(short(*)(char *, int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2, t3);
OUTPUT:
	RETVAL

float
nci_ftipt( c_func, t0, i1, p2, t3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	char * t3
PREINIT:
	float(*func)(char *, int, void *, char *);
CODE:
	func   = INT2PTR(float(*)(char *, int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2, t3);
OUTPUT:
	RETVAL

char *
nci_ttipt( c_func, t0, i1, p2, t3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	char * t3
PREINIT:
	char *(*func)(char *, int, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2, t3);
OUTPUT:
	RETVAL

int
nci_itipt( c_func, t0, i1, p2, t3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	char * t3
PREINIT:
	int(*func)(char *, int, void *, char *);
CODE:
	func   = INT2PTR(int(*)(char *, int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2, t3);
OUTPUT:
	RETVAL

void *
nci_piipt( c_func, i0, i1, p2, t3 )
	SV* c_func
	int i0
	int i1
	void * p2
	char * t3
PREINIT:
	void *(*func)(int, int, void *, char *);
CODE:
	func   = INT2PTR(void *(*)(int, int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2, t3);
OUTPUT:
	RETVAL

void
nci_viipt( c_func, i0, i1, p2, t3 )
	SV* c_func
	int i0
	int i1
	void * p2
	char * t3
PREINIT:
	void(*func)(int, int, void *, char *);
CODE:
	func   = INT2PTR(void(*)(int, int, void *, char *), SvIV(c_func) );
	(*func)(i0, i1, p2, t3);

double
nci_diipt( c_func, i0, i1, p2, t3 )
	SV* c_func
	int i0
	int i1
	void * p2
	char * t3
PREINIT:
	double(*func)(int, int, void *, char *);
CODE:
	func   = INT2PTR(double(*)(int, int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2, t3);
OUTPUT:
	RETVAL

short
nci_siipt( c_func, i0, i1, p2, t3 )
	SV* c_func
	int i0
	int i1
	void * p2
	char * t3
PREINIT:
	short(*func)(int, int, void *, char *);
CODE:
	func   = INT2PTR(short(*)(int, int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2, t3);
OUTPUT:
	RETVAL

float
nci_fiipt( c_func, i0, i1, p2, t3 )
	SV* c_func
	int i0
	int i1
	void * p2
	char * t3
PREINIT:
	float(*func)(int, int, void *, char *);
CODE:
	func   = INT2PTR(float(*)(int, int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2, t3);
OUTPUT:
	RETVAL

char *
nci_tiipt( c_func, i0, i1, p2, t3 )
	SV* c_func
	int i0
	int i1
	void * p2
	char * t3
PREINIT:
	char *(*func)(int, int, void *, char *);
CODE:
	func   = INT2PTR(char *(*)(int, int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2, t3);
OUTPUT:
	RETVAL

int
nci_iiipt( c_func, i0, i1, p2, t3 )
	SV* c_func
	int i0
	int i1
	void * p2
	char * t3
PREINIT:
	int(*func)(int, int, void *, char *);
CODE:
	func   = INT2PTR(int(*)(int, int, void *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2, t3);
OUTPUT:
	RETVAL

void *
nci_pppdt( c_func, p0, p1, d2, t3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	char * t3
PREINIT:
	void *(*func)(void *, void *, double, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2, t3);
OUTPUT:
	RETVAL

void
nci_vppdt( c_func, p0, p1, d2, t3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	char * t3
PREINIT:
	void(*func)(void *, void *, double, char *);
CODE:
	func   = INT2PTR(void(*)(void *, void *, double, char *), SvIV(c_func) );
	(*func)(p0, p1, d2, t3);

double
nci_dppdt( c_func, p0, p1, d2, t3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	char * t3
PREINIT:
	double(*func)(void *, void *, double, char *);
CODE:
	func   = INT2PTR(double(*)(void *, void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2, t3);
OUTPUT:
	RETVAL

short
nci_sppdt( c_func, p0, p1, d2, t3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	char * t3
PREINIT:
	short(*func)(void *, void *, double, char *);
CODE:
	func   = INT2PTR(short(*)(void *, void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2, t3);
OUTPUT:
	RETVAL

float
nci_fppdt( c_func, p0, p1, d2, t3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	char * t3
PREINIT:
	float(*func)(void *, void *, double, char *);
CODE:
	func   = INT2PTR(float(*)(void *, void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2, t3);
OUTPUT:
	RETVAL

char *
nci_tppdt( c_func, p0, p1, d2, t3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	char * t3
PREINIT:
	char *(*func)(void *, void *, double, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2, t3);
OUTPUT:
	RETVAL

int
nci_ippdt( c_func, p0, p1, d2, t3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	char * t3
PREINIT:
	int(*func)(void *, void *, double, char *);
CODE:
	func   = INT2PTR(int(*)(void *, void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2, t3);
OUTPUT:
	RETVAL

void *
nci_pvpdt( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvpdt( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvpdt( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svpdt( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvpdt( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvpdt( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivpdt( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdpdt( c_func, d0, p1, d2, t3 )
	SV* c_func
	double d0
	void * p1
	double d2
	char * t3
PREINIT:
	void *(*func)(double, void *, double, char *);
CODE:
	func   = INT2PTR(void *(*)(double, void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2, t3);
OUTPUT:
	RETVAL

void
nci_vdpdt( c_func, d0, p1, d2, t3 )
	SV* c_func
	double d0
	void * p1
	double d2
	char * t3
PREINIT:
	void(*func)(double, void *, double, char *);
CODE:
	func   = INT2PTR(void(*)(double, void *, double, char *), SvIV(c_func) );
	(*func)(d0, p1, d2, t3);

double
nci_ddpdt( c_func, d0, p1, d2, t3 )
	SV* c_func
	double d0
	void * p1
	double d2
	char * t3
PREINIT:
	double(*func)(double, void *, double, char *);
CODE:
	func   = INT2PTR(double(*)(double, void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2, t3);
OUTPUT:
	RETVAL

short
nci_sdpdt( c_func, d0, p1, d2, t3 )
	SV* c_func
	double d0
	void * p1
	double d2
	char * t3
PREINIT:
	short(*func)(double, void *, double, char *);
CODE:
	func   = INT2PTR(short(*)(double, void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2, t3);
OUTPUT:
	RETVAL

float
nci_fdpdt( c_func, d0, p1, d2, t3 )
	SV* c_func
	double d0
	void * p1
	double d2
	char * t3
PREINIT:
	float(*func)(double, void *, double, char *);
CODE:
	func   = INT2PTR(float(*)(double, void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2, t3);
OUTPUT:
	RETVAL

char *
nci_tdpdt( c_func, d0, p1, d2, t3 )
	SV* c_func
	double d0
	void * p1
	double d2
	char * t3
PREINIT:
	char *(*func)(double, void *, double, char *);
CODE:
	func   = INT2PTR(char *(*)(double, void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2, t3);
OUTPUT:
	RETVAL

int
nci_idpdt( c_func, d0, p1, d2, t3 )
	SV* c_func
	double d0
	void * p1
	double d2
	char * t3
PREINIT:
	int(*func)(double, void *, double, char *);
CODE:
	func   = INT2PTR(int(*)(double, void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2, t3);
OUTPUT:
	RETVAL

void *
nci_pspdt( c_func, s0, p1, d2, t3 )
	SV* c_func
	short s0
	void * p1
	double d2
	char * t3
PREINIT:
	void *(*func)(short, void *, double, char *);
CODE:
	func   = INT2PTR(void *(*)(short, void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2, t3);
OUTPUT:
	RETVAL

void
nci_vspdt( c_func, s0, p1, d2, t3 )
	SV* c_func
	short s0
	void * p1
	double d2
	char * t3
PREINIT:
	void(*func)(short, void *, double, char *);
CODE:
	func   = INT2PTR(void(*)(short, void *, double, char *), SvIV(c_func) );
	(*func)(s0, p1, d2, t3);

double
nci_dspdt( c_func, s0, p1, d2, t3 )
	SV* c_func
	short s0
	void * p1
	double d2
	char * t3
PREINIT:
	double(*func)(short, void *, double, char *);
CODE:
	func   = INT2PTR(double(*)(short, void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2, t3);
OUTPUT:
	RETVAL

short
nci_sspdt( c_func, s0, p1, d2, t3 )
	SV* c_func
	short s0
	void * p1
	double d2
	char * t3
PREINIT:
	short(*func)(short, void *, double, char *);
CODE:
	func   = INT2PTR(short(*)(short, void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2, t3);
OUTPUT:
	RETVAL

float
nci_fspdt( c_func, s0, p1, d2, t3 )
	SV* c_func
	short s0
	void * p1
	double d2
	char * t3
PREINIT:
	float(*func)(short, void *, double, char *);
CODE:
	func   = INT2PTR(float(*)(short, void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2, t3);
OUTPUT:
	RETVAL

char *
nci_tspdt( c_func, s0, p1, d2, t3 )
	SV* c_func
	short s0
	void * p1
	double d2
	char * t3
PREINIT:
	char *(*func)(short, void *, double, char *);
CODE:
	func   = INT2PTR(char *(*)(short, void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2, t3);
OUTPUT:
	RETVAL

int
nci_ispdt( c_func, s0, p1, d2, t3 )
	SV* c_func
	short s0
	void * p1
	double d2
	char * t3
PREINIT:
	int(*func)(short, void *, double, char *);
CODE:
	func   = INT2PTR(int(*)(short, void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2, t3);
OUTPUT:
	RETVAL

void *
nci_pfpdt( c_func, f0, p1, d2, t3 )
	SV* c_func
	float f0
	void * p1
	double d2
	char * t3
PREINIT:
	void *(*func)(float, void *, double, char *);
CODE:
	func   = INT2PTR(void *(*)(float, void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2, t3);
OUTPUT:
	RETVAL

void
nci_vfpdt( c_func, f0, p1, d2, t3 )
	SV* c_func
	float f0
	void * p1
	double d2
	char * t3
PREINIT:
	void(*func)(float, void *, double, char *);
CODE:
	func   = INT2PTR(void(*)(float, void *, double, char *), SvIV(c_func) );
	(*func)(f0, p1, d2, t3);

double
nci_dfpdt( c_func, f0, p1, d2, t3 )
	SV* c_func
	float f0
	void * p1
	double d2
	char * t3
PREINIT:
	double(*func)(float, void *, double, char *);
CODE:
	func   = INT2PTR(double(*)(float, void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2, t3);
OUTPUT:
	RETVAL

short
nci_sfpdt( c_func, f0, p1, d2, t3 )
	SV* c_func
	float f0
	void * p1
	double d2
	char * t3
PREINIT:
	short(*func)(float, void *, double, char *);
CODE:
	func   = INT2PTR(short(*)(float, void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2, t3);
OUTPUT:
	RETVAL

float
nci_ffpdt( c_func, f0, p1, d2, t3 )
	SV* c_func
	float f0
	void * p1
	double d2
	char * t3
PREINIT:
	float(*func)(float, void *, double, char *);
CODE:
	func   = INT2PTR(float(*)(float, void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2, t3);
OUTPUT:
	RETVAL

char *
nci_tfpdt( c_func, f0, p1, d2, t3 )
	SV* c_func
	float f0
	void * p1
	double d2
	char * t3
PREINIT:
	char *(*func)(float, void *, double, char *);
CODE:
	func   = INT2PTR(char *(*)(float, void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2, t3);
OUTPUT:
	RETVAL

int
nci_ifpdt( c_func, f0, p1, d2, t3 )
	SV* c_func
	float f0
	void * p1
	double d2
	char * t3
PREINIT:
	int(*func)(float, void *, double, char *);
CODE:
	func   = INT2PTR(int(*)(float, void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2, t3);
OUTPUT:
	RETVAL

void *
nci_ptpdt( c_func, t0, p1, d2, t3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	char * t3
PREINIT:
	void *(*func)(char *, void *, double, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2, t3);
OUTPUT:
	RETVAL

void
nci_vtpdt( c_func, t0, p1, d2, t3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	char * t3
PREINIT:
	void(*func)(char *, void *, double, char *);
CODE:
	func   = INT2PTR(void(*)(char *, void *, double, char *), SvIV(c_func) );
	(*func)(t0, p1, d2, t3);

double
nci_dtpdt( c_func, t0, p1, d2, t3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	char * t3
PREINIT:
	double(*func)(char *, void *, double, char *);
CODE:
	func   = INT2PTR(double(*)(char *, void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2, t3);
OUTPUT:
	RETVAL

short
nci_stpdt( c_func, t0, p1, d2, t3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	char * t3
PREINIT:
	short(*func)(char *, void *, double, char *);
CODE:
	func   = INT2PTR(short(*)(char *, void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2, t3);
OUTPUT:
	RETVAL

float
nci_ftpdt( c_func, t0, p1, d2, t3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	char * t3
PREINIT:
	float(*func)(char *, void *, double, char *);
CODE:
	func   = INT2PTR(float(*)(char *, void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2, t3);
OUTPUT:
	RETVAL

char *
nci_ttpdt( c_func, t0, p1, d2, t3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	char * t3
PREINIT:
	char *(*func)(char *, void *, double, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2, t3);
OUTPUT:
	RETVAL

int
nci_itpdt( c_func, t0, p1, d2, t3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	char * t3
PREINIT:
	int(*func)(char *, void *, double, char *);
CODE:
	func   = INT2PTR(int(*)(char *, void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2, t3);
OUTPUT:
	RETVAL

void *
nci_pipdt( c_func, i0, p1, d2, t3 )
	SV* c_func
	int i0
	void * p1
	double d2
	char * t3
PREINIT:
	void *(*func)(int, void *, double, char *);
CODE:
	func   = INT2PTR(void *(*)(int, void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2, t3);
OUTPUT:
	RETVAL

void
nci_vipdt( c_func, i0, p1, d2, t3 )
	SV* c_func
	int i0
	void * p1
	double d2
	char * t3
PREINIT:
	void(*func)(int, void *, double, char *);
CODE:
	func   = INT2PTR(void(*)(int, void *, double, char *), SvIV(c_func) );
	(*func)(i0, p1, d2, t3);

double
nci_dipdt( c_func, i0, p1, d2, t3 )
	SV* c_func
	int i0
	void * p1
	double d2
	char * t3
PREINIT:
	double(*func)(int, void *, double, char *);
CODE:
	func   = INT2PTR(double(*)(int, void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2, t3);
OUTPUT:
	RETVAL

short
nci_sipdt( c_func, i0, p1, d2, t3 )
	SV* c_func
	int i0
	void * p1
	double d2
	char * t3
PREINIT:
	short(*func)(int, void *, double, char *);
CODE:
	func   = INT2PTR(short(*)(int, void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2, t3);
OUTPUT:
	RETVAL

float
nci_fipdt( c_func, i0, p1, d2, t3 )
	SV* c_func
	int i0
	void * p1
	double d2
	char * t3
PREINIT:
	float(*func)(int, void *, double, char *);
CODE:
	func   = INT2PTR(float(*)(int, void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2, t3);
OUTPUT:
	RETVAL

char *
nci_tipdt( c_func, i0, p1, d2, t3 )
	SV* c_func
	int i0
	void * p1
	double d2
	char * t3
PREINIT:
	char *(*func)(int, void *, double, char *);
CODE:
	func   = INT2PTR(char *(*)(int, void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2, t3);
OUTPUT:
	RETVAL

int
nci_iipdt( c_func, i0, p1, d2, t3 )
	SV* c_func
	int i0
	void * p1
	double d2
	char * t3
PREINIT:
	int(*func)(int, void *, double, char *);
CODE:
	func   = INT2PTR(int(*)(int, void *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2, t3);
OUTPUT:
	RETVAL

void *
nci_ppddt( c_func, p0, d1, d2, t3 )
	SV* c_func
	void * p0
	double d1
	double d2
	char * t3
PREINIT:
	void *(*func)(void *, double, double, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2, t3);
OUTPUT:
	RETVAL

void
nci_vpddt( c_func, p0, d1, d2, t3 )
	SV* c_func
	void * p0
	double d1
	double d2
	char * t3
PREINIT:
	void(*func)(void *, double, double, char *);
CODE:
	func   = INT2PTR(void(*)(void *, double, double, char *), SvIV(c_func) );
	(*func)(p0, d1, d2, t3);

double
nci_dpddt( c_func, p0, d1, d2, t3 )
	SV* c_func
	void * p0
	double d1
	double d2
	char * t3
PREINIT:
	double(*func)(void *, double, double, char *);
CODE:
	func   = INT2PTR(double(*)(void *, double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2, t3);
OUTPUT:
	RETVAL

short
nci_spddt( c_func, p0, d1, d2, t3 )
	SV* c_func
	void * p0
	double d1
	double d2
	char * t3
PREINIT:
	short(*func)(void *, double, double, char *);
CODE:
	func   = INT2PTR(short(*)(void *, double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2, t3);
OUTPUT:
	RETVAL

float
nci_fpddt( c_func, p0, d1, d2, t3 )
	SV* c_func
	void * p0
	double d1
	double d2
	char * t3
PREINIT:
	float(*func)(void *, double, double, char *);
CODE:
	func   = INT2PTR(float(*)(void *, double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2, t3);
OUTPUT:
	RETVAL

char *
nci_tpddt( c_func, p0, d1, d2, t3 )
	SV* c_func
	void * p0
	double d1
	double d2
	char * t3
PREINIT:
	char *(*func)(void *, double, double, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2, t3);
OUTPUT:
	RETVAL

int
nci_ipddt( c_func, p0, d1, d2, t3 )
	SV* c_func
	void * p0
	double d1
	double d2
	char * t3
PREINIT:
	int(*func)(void *, double, double, char *);
CODE:
	func   = INT2PTR(int(*)(void *, double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2, t3);
OUTPUT:
	RETVAL

void *
nci_pvddt( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvddt( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvddt( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svddt( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvddt( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvddt( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivddt( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdddt( c_func, d0, d1, d2, t3 )
	SV* c_func
	double d0
	double d1
	double d2
	char * t3
PREINIT:
	void *(*func)(double, double, double, char *);
CODE:
	func   = INT2PTR(void *(*)(double, double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2, t3);
OUTPUT:
	RETVAL

void
nci_vdddt( c_func, d0, d1, d2, t3 )
	SV* c_func
	double d0
	double d1
	double d2
	char * t3
PREINIT:
	void(*func)(double, double, double, char *);
CODE:
	func   = INT2PTR(void(*)(double, double, double, char *), SvIV(c_func) );
	(*func)(d0, d1, d2, t3);

double
nci_ddddt( c_func, d0, d1, d2, t3 )
	SV* c_func
	double d0
	double d1
	double d2
	char * t3
PREINIT:
	double(*func)(double, double, double, char *);
CODE:
	func   = INT2PTR(double(*)(double, double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2, t3);
OUTPUT:
	RETVAL

short
nci_sdddt( c_func, d0, d1, d2, t3 )
	SV* c_func
	double d0
	double d1
	double d2
	char * t3
PREINIT:
	short(*func)(double, double, double, char *);
CODE:
	func   = INT2PTR(short(*)(double, double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2, t3);
OUTPUT:
	RETVAL

float
nci_fdddt( c_func, d0, d1, d2, t3 )
	SV* c_func
	double d0
	double d1
	double d2
	char * t3
PREINIT:
	float(*func)(double, double, double, char *);
CODE:
	func   = INT2PTR(float(*)(double, double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2, t3);
OUTPUT:
	RETVAL

char *
nci_tdddt( c_func, d0, d1, d2, t3 )
	SV* c_func
	double d0
	double d1
	double d2
	char * t3
PREINIT:
	char *(*func)(double, double, double, char *);
CODE:
	func   = INT2PTR(char *(*)(double, double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2, t3);
OUTPUT:
	RETVAL

int
nci_idddt( c_func, d0, d1, d2, t3 )
	SV* c_func
	double d0
	double d1
	double d2
	char * t3
PREINIT:
	int(*func)(double, double, double, char *);
CODE:
	func   = INT2PTR(int(*)(double, double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2, t3);
OUTPUT:
	RETVAL

void *
nci_psddt( c_func, s0, d1, d2, t3 )
	SV* c_func
	short s0
	double d1
	double d2
	char * t3
PREINIT:
	void *(*func)(short, double, double, char *);
CODE:
	func   = INT2PTR(void *(*)(short, double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2, t3);
OUTPUT:
	RETVAL

void
nci_vsddt( c_func, s0, d1, d2, t3 )
	SV* c_func
	short s0
	double d1
	double d2
	char * t3
PREINIT:
	void(*func)(short, double, double, char *);
CODE:
	func   = INT2PTR(void(*)(short, double, double, char *), SvIV(c_func) );
	(*func)(s0, d1, d2, t3);

double
nci_dsddt( c_func, s0, d1, d2, t3 )
	SV* c_func
	short s0
	double d1
	double d2
	char * t3
PREINIT:
	double(*func)(short, double, double, char *);
CODE:
	func   = INT2PTR(double(*)(short, double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2, t3);
OUTPUT:
	RETVAL

short
nci_ssddt( c_func, s0, d1, d2, t3 )
	SV* c_func
	short s0
	double d1
	double d2
	char * t3
PREINIT:
	short(*func)(short, double, double, char *);
CODE:
	func   = INT2PTR(short(*)(short, double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2, t3);
OUTPUT:
	RETVAL

float
nci_fsddt( c_func, s0, d1, d2, t3 )
	SV* c_func
	short s0
	double d1
	double d2
	char * t3
PREINIT:
	float(*func)(short, double, double, char *);
CODE:
	func   = INT2PTR(float(*)(short, double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2, t3);
OUTPUT:
	RETVAL

char *
nci_tsddt( c_func, s0, d1, d2, t3 )
	SV* c_func
	short s0
	double d1
	double d2
	char * t3
PREINIT:
	char *(*func)(short, double, double, char *);
CODE:
	func   = INT2PTR(char *(*)(short, double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2, t3);
OUTPUT:
	RETVAL

int
nci_isddt( c_func, s0, d1, d2, t3 )
	SV* c_func
	short s0
	double d1
	double d2
	char * t3
PREINIT:
	int(*func)(short, double, double, char *);
CODE:
	func   = INT2PTR(int(*)(short, double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2, t3);
OUTPUT:
	RETVAL

void *
nci_pfddt( c_func, f0, d1, d2, t3 )
	SV* c_func
	float f0
	double d1
	double d2
	char * t3
PREINIT:
	void *(*func)(float, double, double, char *);
CODE:
	func   = INT2PTR(void *(*)(float, double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2, t3);
OUTPUT:
	RETVAL

void
nci_vfddt( c_func, f0, d1, d2, t3 )
	SV* c_func
	float f0
	double d1
	double d2
	char * t3
PREINIT:
	void(*func)(float, double, double, char *);
CODE:
	func   = INT2PTR(void(*)(float, double, double, char *), SvIV(c_func) );
	(*func)(f0, d1, d2, t3);

double
nci_dfddt( c_func, f0, d1, d2, t3 )
	SV* c_func
	float f0
	double d1
	double d2
	char * t3
PREINIT:
	double(*func)(float, double, double, char *);
CODE:
	func   = INT2PTR(double(*)(float, double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2, t3);
OUTPUT:
	RETVAL

short
nci_sfddt( c_func, f0, d1, d2, t3 )
	SV* c_func
	float f0
	double d1
	double d2
	char * t3
PREINIT:
	short(*func)(float, double, double, char *);
CODE:
	func   = INT2PTR(short(*)(float, double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2, t3);
OUTPUT:
	RETVAL

float
nci_ffddt( c_func, f0, d1, d2, t3 )
	SV* c_func
	float f0
	double d1
	double d2
	char * t3
PREINIT:
	float(*func)(float, double, double, char *);
CODE:
	func   = INT2PTR(float(*)(float, double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2, t3);
OUTPUT:
	RETVAL

char *
nci_tfddt( c_func, f0, d1, d2, t3 )
	SV* c_func
	float f0
	double d1
	double d2
	char * t3
PREINIT:
	char *(*func)(float, double, double, char *);
CODE:
	func   = INT2PTR(char *(*)(float, double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2, t3);
OUTPUT:
	RETVAL

int
nci_ifddt( c_func, f0, d1, d2, t3 )
	SV* c_func
	float f0
	double d1
	double d2
	char * t3
PREINIT:
	int(*func)(float, double, double, char *);
CODE:
	func   = INT2PTR(int(*)(float, double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2, t3);
OUTPUT:
	RETVAL

void *
nci_ptddt( c_func, t0, d1, d2, t3 )
	SV* c_func
	char * t0
	double d1
	double d2
	char * t3
PREINIT:
	void *(*func)(char *, double, double, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2, t3);
OUTPUT:
	RETVAL

void
nci_vtddt( c_func, t0, d1, d2, t3 )
	SV* c_func
	char * t0
	double d1
	double d2
	char * t3
PREINIT:
	void(*func)(char *, double, double, char *);
CODE:
	func   = INT2PTR(void(*)(char *, double, double, char *), SvIV(c_func) );
	(*func)(t0, d1, d2, t3);

double
nci_dtddt( c_func, t0, d1, d2, t3 )
	SV* c_func
	char * t0
	double d1
	double d2
	char * t3
PREINIT:
	double(*func)(char *, double, double, char *);
CODE:
	func   = INT2PTR(double(*)(char *, double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2, t3);
OUTPUT:
	RETVAL

short
nci_stddt( c_func, t0, d1, d2, t3 )
	SV* c_func
	char * t0
	double d1
	double d2
	char * t3
PREINIT:
	short(*func)(char *, double, double, char *);
CODE:
	func   = INT2PTR(short(*)(char *, double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2, t3);
OUTPUT:
	RETVAL

float
nci_ftddt( c_func, t0, d1, d2, t3 )
	SV* c_func
	char * t0
	double d1
	double d2
	char * t3
PREINIT:
	float(*func)(char *, double, double, char *);
CODE:
	func   = INT2PTR(float(*)(char *, double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2, t3);
OUTPUT:
	RETVAL

char *
nci_ttddt( c_func, t0, d1, d2, t3 )
	SV* c_func
	char * t0
	double d1
	double d2
	char * t3
PREINIT:
	char *(*func)(char *, double, double, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2, t3);
OUTPUT:
	RETVAL

int
nci_itddt( c_func, t0, d1, d2, t3 )
	SV* c_func
	char * t0
	double d1
	double d2
	char * t3
PREINIT:
	int(*func)(char *, double, double, char *);
CODE:
	func   = INT2PTR(int(*)(char *, double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2, t3);
OUTPUT:
	RETVAL

void *
nci_piddt( c_func, i0, d1, d2, t3 )
	SV* c_func
	int i0
	double d1
	double d2
	char * t3
PREINIT:
	void *(*func)(int, double, double, char *);
CODE:
	func   = INT2PTR(void *(*)(int, double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2, t3);
OUTPUT:
	RETVAL

void
nci_viddt( c_func, i0, d1, d2, t3 )
	SV* c_func
	int i0
	double d1
	double d2
	char * t3
PREINIT:
	void(*func)(int, double, double, char *);
CODE:
	func   = INT2PTR(void(*)(int, double, double, char *), SvIV(c_func) );
	(*func)(i0, d1, d2, t3);

double
nci_diddt( c_func, i0, d1, d2, t3 )
	SV* c_func
	int i0
	double d1
	double d2
	char * t3
PREINIT:
	double(*func)(int, double, double, char *);
CODE:
	func   = INT2PTR(double(*)(int, double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2, t3);
OUTPUT:
	RETVAL

short
nci_siddt( c_func, i0, d1, d2, t3 )
	SV* c_func
	int i0
	double d1
	double d2
	char * t3
PREINIT:
	short(*func)(int, double, double, char *);
CODE:
	func   = INT2PTR(short(*)(int, double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2, t3);
OUTPUT:
	RETVAL

float
nci_fiddt( c_func, i0, d1, d2, t3 )
	SV* c_func
	int i0
	double d1
	double d2
	char * t3
PREINIT:
	float(*func)(int, double, double, char *);
CODE:
	func   = INT2PTR(float(*)(int, double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2, t3);
OUTPUT:
	RETVAL

char *
nci_tiddt( c_func, i0, d1, d2, t3 )
	SV* c_func
	int i0
	double d1
	double d2
	char * t3
PREINIT:
	char *(*func)(int, double, double, char *);
CODE:
	func   = INT2PTR(char *(*)(int, double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2, t3);
OUTPUT:
	RETVAL

int
nci_iiddt( c_func, i0, d1, d2, t3 )
	SV* c_func
	int i0
	double d1
	double d2
	char * t3
PREINIT:
	int(*func)(int, double, double, char *);
CODE:
	func   = INT2PTR(int(*)(int, double, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2, t3);
OUTPUT:
	RETVAL

void *
nci_ppsdt( c_func, p0, s1, d2, t3 )
	SV* c_func
	void * p0
	short s1
	double d2
	char * t3
PREINIT:
	void *(*func)(void *, short, double, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2, t3);
OUTPUT:
	RETVAL

void
nci_vpsdt( c_func, p0, s1, d2, t3 )
	SV* c_func
	void * p0
	short s1
	double d2
	char * t3
PREINIT:
	void(*func)(void *, short, double, char *);
CODE:
	func   = INT2PTR(void(*)(void *, short, double, char *), SvIV(c_func) );
	(*func)(p0, s1, d2, t3);

double
nci_dpsdt( c_func, p0, s1, d2, t3 )
	SV* c_func
	void * p0
	short s1
	double d2
	char * t3
PREINIT:
	double(*func)(void *, short, double, char *);
CODE:
	func   = INT2PTR(double(*)(void *, short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2, t3);
OUTPUT:
	RETVAL

short
nci_spsdt( c_func, p0, s1, d2, t3 )
	SV* c_func
	void * p0
	short s1
	double d2
	char * t3
PREINIT:
	short(*func)(void *, short, double, char *);
CODE:
	func   = INT2PTR(short(*)(void *, short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2, t3);
OUTPUT:
	RETVAL

float
nci_fpsdt( c_func, p0, s1, d2, t3 )
	SV* c_func
	void * p0
	short s1
	double d2
	char * t3
PREINIT:
	float(*func)(void *, short, double, char *);
CODE:
	func   = INT2PTR(float(*)(void *, short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2, t3);
OUTPUT:
	RETVAL

char *
nci_tpsdt( c_func, p0, s1, d2, t3 )
	SV* c_func
	void * p0
	short s1
	double d2
	char * t3
PREINIT:
	char *(*func)(void *, short, double, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2, t3);
OUTPUT:
	RETVAL

int
nci_ipsdt( c_func, p0, s1, d2, t3 )
	SV* c_func
	void * p0
	short s1
	double d2
	char * t3
PREINIT:
	int(*func)(void *, short, double, char *);
CODE:
	func   = INT2PTR(int(*)(void *, short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2, t3);
OUTPUT:
	RETVAL

void *
nci_pvsdt( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvsdt( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvsdt( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svsdt( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvsdt( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvsdt( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivsdt( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdsdt( c_func, d0, s1, d2, t3 )
	SV* c_func
	double d0
	short s1
	double d2
	char * t3
PREINIT:
	void *(*func)(double, short, double, char *);
CODE:
	func   = INT2PTR(void *(*)(double, short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2, t3);
OUTPUT:
	RETVAL

void
nci_vdsdt( c_func, d0, s1, d2, t3 )
	SV* c_func
	double d0
	short s1
	double d2
	char * t3
PREINIT:
	void(*func)(double, short, double, char *);
CODE:
	func   = INT2PTR(void(*)(double, short, double, char *), SvIV(c_func) );
	(*func)(d0, s1, d2, t3);

double
nci_ddsdt( c_func, d0, s1, d2, t3 )
	SV* c_func
	double d0
	short s1
	double d2
	char * t3
PREINIT:
	double(*func)(double, short, double, char *);
CODE:
	func   = INT2PTR(double(*)(double, short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2, t3);
OUTPUT:
	RETVAL

short
nci_sdsdt( c_func, d0, s1, d2, t3 )
	SV* c_func
	double d0
	short s1
	double d2
	char * t3
PREINIT:
	short(*func)(double, short, double, char *);
CODE:
	func   = INT2PTR(short(*)(double, short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2, t3);
OUTPUT:
	RETVAL

float
nci_fdsdt( c_func, d0, s1, d2, t3 )
	SV* c_func
	double d0
	short s1
	double d2
	char * t3
PREINIT:
	float(*func)(double, short, double, char *);
CODE:
	func   = INT2PTR(float(*)(double, short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2, t3);
OUTPUT:
	RETVAL

char *
nci_tdsdt( c_func, d0, s1, d2, t3 )
	SV* c_func
	double d0
	short s1
	double d2
	char * t3
PREINIT:
	char *(*func)(double, short, double, char *);
CODE:
	func   = INT2PTR(char *(*)(double, short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2, t3);
OUTPUT:
	RETVAL

int
nci_idsdt( c_func, d0, s1, d2, t3 )
	SV* c_func
	double d0
	short s1
	double d2
	char * t3
PREINIT:
	int(*func)(double, short, double, char *);
CODE:
	func   = INT2PTR(int(*)(double, short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2, t3);
OUTPUT:
	RETVAL

void *
nci_pssdt( c_func, s0, s1, d2, t3 )
	SV* c_func
	short s0
	short s1
	double d2
	char * t3
PREINIT:
	void *(*func)(short, short, double, char *);
CODE:
	func   = INT2PTR(void *(*)(short, short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2, t3);
OUTPUT:
	RETVAL

void
nci_vssdt( c_func, s0, s1, d2, t3 )
	SV* c_func
	short s0
	short s1
	double d2
	char * t3
PREINIT:
	void(*func)(short, short, double, char *);
CODE:
	func   = INT2PTR(void(*)(short, short, double, char *), SvIV(c_func) );
	(*func)(s0, s1, d2, t3);

double
nci_dssdt( c_func, s0, s1, d2, t3 )
	SV* c_func
	short s0
	short s1
	double d2
	char * t3
PREINIT:
	double(*func)(short, short, double, char *);
CODE:
	func   = INT2PTR(double(*)(short, short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2, t3);
OUTPUT:
	RETVAL

short
nci_sssdt( c_func, s0, s1, d2, t3 )
	SV* c_func
	short s0
	short s1
	double d2
	char * t3
PREINIT:
	short(*func)(short, short, double, char *);
CODE:
	func   = INT2PTR(short(*)(short, short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2, t3);
OUTPUT:
	RETVAL

float
nci_fssdt( c_func, s0, s1, d2, t3 )
	SV* c_func
	short s0
	short s1
	double d2
	char * t3
PREINIT:
	float(*func)(short, short, double, char *);
CODE:
	func   = INT2PTR(float(*)(short, short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2, t3);
OUTPUT:
	RETVAL

char *
nci_tssdt( c_func, s0, s1, d2, t3 )
	SV* c_func
	short s0
	short s1
	double d2
	char * t3
PREINIT:
	char *(*func)(short, short, double, char *);
CODE:
	func   = INT2PTR(char *(*)(short, short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2, t3);
OUTPUT:
	RETVAL

int
nci_issdt( c_func, s0, s1, d2, t3 )
	SV* c_func
	short s0
	short s1
	double d2
	char * t3
PREINIT:
	int(*func)(short, short, double, char *);
CODE:
	func   = INT2PTR(int(*)(short, short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2, t3);
OUTPUT:
	RETVAL

void *
nci_pfsdt( c_func, f0, s1, d2, t3 )
	SV* c_func
	float f0
	short s1
	double d2
	char * t3
PREINIT:
	void *(*func)(float, short, double, char *);
CODE:
	func   = INT2PTR(void *(*)(float, short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2, t3);
OUTPUT:
	RETVAL

void
nci_vfsdt( c_func, f0, s1, d2, t3 )
	SV* c_func
	float f0
	short s1
	double d2
	char * t3
PREINIT:
	void(*func)(float, short, double, char *);
CODE:
	func   = INT2PTR(void(*)(float, short, double, char *), SvIV(c_func) );
	(*func)(f0, s1, d2, t3);

double
nci_dfsdt( c_func, f0, s1, d2, t3 )
	SV* c_func
	float f0
	short s1
	double d2
	char * t3
PREINIT:
	double(*func)(float, short, double, char *);
CODE:
	func   = INT2PTR(double(*)(float, short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2, t3);
OUTPUT:
	RETVAL

short
nci_sfsdt( c_func, f0, s1, d2, t3 )
	SV* c_func
	float f0
	short s1
	double d2
	char * t3
PREINIT:
	short(*func)(float, short, double, char *);
CODE:
	func   = INT2PTR(short(*)(float, short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2, t3);
OUTPUT:
	RETVAL

float
nci_ffsdt( c_func, f0, s1, d2, t3 )
	SV* c_func
	float f0
	short s1
	double d2
	char * t3
PREINIT:
	float(*func)(float, short, double, char *);
CODE:
	func   = INT2PTR(float(*)(float, short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2, t3);
OUTPUT:
	RETVAL

char *
nci_tfsdt( c_func, f0, s1, d2, t3 )
	SV* c_func
	float f0
	short s1
	double d2
	char * t3
PREINIT:
	char *(*func)(float, short, double, char *);
CODE:
	func   = INT2PTR(char *(*)(float, short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2, t3);
OUTPUT:
	RETVAL

int
nci_ifsdt( c_func, f0, s1, d2, t3 )
	SV* c_func
	float f0
	short s1
	double d2
	char * t3
PREINIT:
	int(*func)(float, short, double, char *);
CODE:
	func   = INT2PTR(int(*)(float, short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2, t3);
OUTPUT:
	RETVAL

void *
nci_ptsdt( c_func, t0, s1, d2, t3 )
	SV* c_func
	char * t0
	short s1
	double d2
	char * t3
PREINIT:
	void *(*func)(char *, short, double, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2, t3);
OUTPUT:
	RETVAL

void
nci_vtsdt( c_func, t0, s1, d2, t3 )
	SV* c_func
	char * t0
	short s1
	double d2
	char * t3
PREINIT:
	void(*func)(char *, short, double, char *);
CODE:
	func   = INT2PTR(void(*)(char *, short, double, char *), SvIV(c_func) );
	(*func)(t0, s1, d2, t3);

double
nci_dtsdt( c_func, t0, s1, d2, t3 )
	SV* c_func
	char * t0
	short s1
	double d2
	char * t3
PREINIT:
	double(*func)(char *, short, double, char *);
CODE:
	func   = INT2PTR(double(*)(char *, short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2, t3);
OUTPUT:
	RETVAL

short
nci_stsdt( c_func, t0, s1, d2, t3 )
	SV* c_func
	char * t0
	short s1
	double d2
	char * t3
PREINIT:
	short(*func)(char *, short, double, char *);
CODE:
	func   = INT2PTR(short(*)(char *, short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2, t3);
OUTPUT:
	RETVAL

float
nci_ftsdt( c_func, t0, s1, d2, t3 )
	SV* c_func
	char * t0
	short s1
	double d2
	char * t3
PREINIT:
	float(*func)(char *, short, double, char *);
CODE:
	func   = INT2PTR(float(*)(char *, short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2, t3);
OUTPUT:
	RETVAL

char *
nci_ttsdt( c_func, t0, s1, d2, t3 )
	SV* c_func
	char * t0
	short s1
	double d2
	char * t3
PREINIT:
	char *(*func)(char *, short, double, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2, t3);
OUTPUT:
	RETVAL

int
nci_itsdt( c_func, t0, s1, d2, t3 )
	SV* c_func
	char * t0
	short s1
	double d2
	char * t3
PREINIT:
	int(*func)(char *, short, double, char *);
CODE:
	func   = INT2PTR(int(*)(char *, short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2, t3);
OUTPUT:
	RETVAL

void *
nci_pisdt( c_func, i0, s1, d2, t3 )
	SV* c_func
	int i0
	short s1
	double d2
	char * t3
PREINIT:
	void *(*func)(int, short, double, char *);
CODE:
	func   = INT2PTR(void *(*)(int, short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2, t3);
OUTPUT:
	RETVAL

void
nci_visdt( c_func, i0, s1, d2, t3 )
	SV* c_func
	int i0
	short s1
	double d2
	char * t3
PREINIT:
	void(*func)(int, short, double, char *);
CODE:
	func   = INT2PTR(void(*)(int, short, double, char *), SvIV(c_func) );
	(*func)(i0, s1, d2, t3);

double
nci_disdt( c_func, i0, s1, d2, t3 )
	SV* c_func
	int i0
	short s1
	double d2
	char * t3
PREINIT:
	double(*func)(int, short, double, char *);
CODE:
	func   = INT2PTR(double(*)(int, short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2, t3);
OUTPUT:
	RETVAL

short
nci_sisdt( c_func, i0, s1, d2, t3 )
	SV* c_func
	int i0
	short s1
	double d2
	char * t3
PREINIT:
	short(*func)(int, short, double, char *);
CODE:
	func   = INT2PTR(short(*)(int, short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2, t3);
OUTPUT:
	RETVAL

float
nci_fisdt( c_func, i0, s1, d2, t3 )
	SV* c_func
	int i0
	short s1
	double d2
	char * t3
PREINIT:
	float(*func)(int, short, double, char *);
CODE:
	func   = INT2PTR(float(*)(int, short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2, t3);
OUTPUT:
	RETVAL

char *
nci_tisdt( c_func, i0, s1, d2, t3 )
	SV* c_func
	int i0
	short s1
	double d2
	char * t3
PREINIT:
	char *(*func)(int, short, double, char *);
CODE:
	func   = INT2PTR(char *(*)(int, short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2, t3);
OUTPUT:
	RETVAL

int
nci_iisdt( c_func, i0, s1, d2, t3 )
	SV* c_func
	int i0
	short s1
	double d2
	char * t3
PREINIT:
	int(*func)(int, short, double, char *);
CODE:
	func   = INT2PTR(int(*)(int, short, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2, t3);
OUTPUT:
	RETVAL

void *
nci_ppfdt( c_func, p0, f1, d2, t3 )
	SV* c_func
	void * p0
	float f1
	double d2
	char * t3
PREINIT:
	void *(*func)(void *, float, double, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2, t3);
OUTPUT:
	RETVAL

void
nci_vpfdt( c_func, p0, f1, d2, t3 )
	SV* c_func
	void * p0
	float f1
	double d2
	char * t3
PREINIT:
	void(*func)(void *, float, double, char *);
CODE:
	func   = INT2PTR(void(*)(void *, float, double, char *), SvIV(c_func) );
	(*func)(p0, f1, d2, t3);

double
nci_dpfdt( c_func, p0, f1, d2, t3 )
	SV* c_func
	void * p0
	float f1
	double d2
	char * t3
PREINIT:
	double(*func)(void *, float, double, char *);
CODE:
	func   = INT2PTR(double(*)(void *, float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2, t3);
OUTPUT:
	RETVAL

short
nci_spfdt( c_func, p0, f1, d2, t3 )
	SV* c_func
	void * p0
	float f1
	double d2
	char * t3
PREINIT:
	short(*func)(void *, float, double, char *);
CODE:
	func   = INT2PTR(short(*)(void *, float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2, t3);
OUTPUT:
	RETVAL

float
nci_fpfdt( c_func, p0, f1, d2, t3 )
	SV* c_func
	void * p0
	float f1
	double d2
	char * t3
PREINIT:
	float(*func)(void *, float, double, char *);
CODE:
	func   = INT2PTR(float(*)(void *, float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2, t3);
OUTPUT:
	RETVAL

char *
nci_tpfdt( c_func, p0, f1, d2, t3 )
	SV* c_func
	void * p0
	float f1
	double d2
	char * t3
PREINIT:
	char *(*func)(void *, float, double, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2, t3);
OUTPUT:
	RETVAL

int
nci_ipfdt( c_func, p0, f1, d2, t3 )
	SV* c_func
	void * p0
	float f1
	double d2
	char * t3
PREINIT:
	int(*func)(void *, float, double, char *);
CODE:
	func   = INT2PTR(int(*)(void *, float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2, t3);
OUTPUT:
	RETVAL

void *
nci_pvfdt( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvfdt( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvfdt( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svfdt( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvfdt( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvfdt( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivfdt( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdfdt( c_func, d0, f1, d2, t3 )
	SV* c_func
	double d0
	float f1
	double d2
	char * t3
PREINIT:
	void *(*func)(double, float, double, char *);
CODE:
	func   = INT2PTR(void *(*)(double, float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2, t3);
OUTPUT:
	RETVAL

void
nci_vdfdt( c_func, d0, f1, d2, t3 )
	SV* c_func
	double d0
	float f1
	double d2
	char * t3
PREINIT:
	void(*func)(double, float, double, char *);
CODE:
	func   = INT2PTR(void(*)(double, float, double, char *), SvIV(c_func) );
	(*func)(d0, f1, d2, t3);

double
nci_ddfdt( c_func, d0, f1, d2, t3 )
	SV* c_func
	double d0
	float f1
	double d2
	char * t3
PREINIT:
	double(*func)(double, float, double, char *);
CODE:
	func   = INT2PTR(double(*)(double, float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2, t3);
OUTPUT:
	RETVAL

short
nci_sdfdt( c_func, d0, f1, d2, t3 )
	SV* c_func
	double d0
	float f1
	double d2
	char * t3
PREINIT:
	short(*func)(double, float, double, char *);
CODE:
	func   = INT2PTR(short(*)(double, float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2, t3);
OUTPUT:
	RETVAL

float
nci_fdfdt( c_func, d0, f1, d2, t3 )
	SV* c_func
	double d0
	float f1
	double d2
	char * t3
PREINIT:
	float(*func)(double, float, double, char *);
CODE:
	func   = INT2PTR(float(*)(double, float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2, t3);
OUTPUT:
	RETVAL

char *
nci_tdfdt( c_func, d0, f1, d2, t3 )
	SV* c_func
	double d0
	float f1
	double d2
	char * t3
PREINIT:
	char *(*func)(double, float, double, char *);
CODE:
	func   = INT2PTR(char *(*)(double, float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2, t3);
OUTPUT:
	RETVAL

int
nci_idfdt( c_func, d0, f1, d2, t3 )
	SV* c_func
	double d0
	float f1
	double d2
	char * t3
PREINIT:
	int(*func)(double, float, double, char *);
CODE:
	func   = INT2PTR(int(*)(double, float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2, t3);
OUTPUT:
	RETVAL

void *
nci_psfdt( c_func, s0, f1, d2, t3 )
	SV* c_func
	short s0
	float f1
	double d2
	char * t3
PREINIT:
	void *(*func)(short, float, double, char *);
CODE:
	func   = INT2PTR(void *(*)(short, float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2, t3);
OUTPUT:
	RETVAL

void
nci_vsfdt( c_func, s0, f1, d2, t3 )
	SV* c_func
	short s0
	float f1
	double d2
	char * t3
PREINIT:
	void(*func)(short, float, double, char *);
CODE:
	func   = INT2PTR(void(*)(short, float, double, char *), SvIV(c_func) );
	(*func)(s0, f1, d2, t3);

double
nci_dsfdt( c_func, s0, f1, d2, t3 )
	SV* c_func
	short s0
	float f1
	double d2
	char * t3
PREINIT:
	double(*func)(short, float, double, char *);
CODE:
	func   = INT2PTR(double(*)(short, float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2, t3);
OUTPUT:
	RETVAL

short
nci_ssfdt( c_func, s0, f1, d2, t3 )
	SV* c_func
	short s0
	float f1
	double d2
	char * t3
PREINIT:
	short(*func)(short, float, double, char *);
CODE:
	func   = INT2PTR(short(*)(short, float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2, t3);
OUTPUT:
	RETVAL

float
nci_fsfdt( c_func, s0, f1, d2, t3 )
	SV* c_func
	short s0
	float f1
	double d2
	char * t3
PREINIT:
	float(*func)(short, float, double, char *);
CODE:
	func   = INT2PTR(float(*)(short, float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2, t3);
OUTPUT:
	RETVAL

char *
nci_tsfdt( c_func, s0, f1, d2, t3 )
	SV* c_func
	short s0
	float f1
	double d2
	char * t3
PREINIT:
	char *(*func)(short, float, double, char *);
CODE:
	func   = INT2PTR(char *(*)(short, float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2, t3);
OUTPUT:
	RETVAL

int
nci_isfdt( c_func, s0, f1, d2, t3 )
	SV* c_func
	short s0
	float f1
	double d2
	char * t3
PREINIT:
	int(*func)(short, float, double, char *);
CODE:
	func   = INT2PTR(int(*)(short, float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2, t3);
OUTPUT:
	RETVAL

void *
nci_pffdt( c_func, f0, f1, d2, t3 )
	SV* c_func
	float f0
	float f1
	double d2
	char * t3
PREINIT:
	void *(*func)(float, float, double, char *);
CODE:
	func   = INT2PTR(void *(*)(float, float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2, t3);
OUTPUT:
	RETVAL

void
nci_vffdt( c_func, f0, f1, d2, t3 )
	SV* c_func
	float f0
	float f1
	double d2
	char * t3
PREINIT:
	void(*func)(float, float, double, char *);
CODE:
	func   = INT2PTR(void(*)(float, float, double, char *), SvIV(c_func) );
	(*func)(f0, f1, d2, t3);

double
nci_dffdt( c_func, f0, f1, d2, t3 )
	SV* c_func
	float f0
	float f1
	double d2
	char * t3
PREINIT:
	double(*func)(float, float, double, char *);
CODE:
	func   = INT2PTR(double(*)(float, float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2, t3);
OUTPUT:
	RETVAL

short
nci_sffdt( c_func, f0, f1, d2, t3 )
	SV* c_func
	float f0
	float f1
	double d2
	char * t3
PREINIT:
	short(*func)(float, float, double, char *);
CODE:
	func   = INT2PTR(short(*)(float, float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2, t3);
OUTPUT:
	RETVAL

float
nci_fffdt( c_func, f0, f1, d2, t3 )
	SV* c_func
	float f0
	float f1
	double d2
	char * t3
PREINIT:
	float(*func)(float, float, double, char *);
CODE:
	func   = INT2PTR(float(*)(float, float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2, t3);
OUTPUT:
	RETVAL

char *
nci_tffdt( c_func, f0, f1, d2, t3 )
	SV* c_func
	float f0
	float f1
	double d2
	char * t3
PREINIT:
	char *(*func)(float, float, double, char *);
CODE:
	func   = INT2PTR(char *(*)(float, float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2, t3);
OUTPUT:
	RETVAL

int
nci_iffdt( c_func, f0, f1, d2, t3 )
	SV* c_func
	float f0
	float f1
	double d2
	char * t3
PREINIT:
	int(*func)(float, float, double, char *);
CODE:
	func   = INT2PTR(int(*)(float, float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2, t3);
OUTPUT:
	RETVAL

void *
nci_ptfdt( c_func, t0, f1, d2, t3 )
	SV* c_func
	char * t0
	float f1
	double d2
	char * t3
PREINIT:
	void *(*func)(char *, float, double, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2, t3);
OUTPUT:
	RETVAL

void
nci_vtfdt( c_func, t0, f1, d2, t3 )
	SV* c_func
	char * t0
	float f1
	double d2
	char * t3
PREINIT:
	void(*func)(char *, float, double, char *);
CODE:
	func   = INT2PTR(void(*)(char *, float, double, char *), SvIV(c_func) );
	(*func)(t0, f1, d2, t3);

double
nci_dtfdt( c_func, t0, f1, d2, t3 )
	SV* c_func
	char * t0
	float f1
	double d2
	char * t3
PREINIT:
	double(*func)(char *, float, double, char *);
CODE:
	func   = INT2PTR(double(*)(char *, float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2, t3);
OUTPUT:
	RETVAL

short
nci_stfdt( c_func, t0, f1, d2, t3 )
	SV* c_func
	char * t0
	float f1
	double d2
	char * t3
PREINIT:
	short(*func)(char *, float, double, char *);
CODE:
	func   = INT2PTR(short(*)(char *, float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2, t3);
OUTPUT:
	RETVAL

float
nci_ftfdt( c_func, t0, f1, d2, t3 )
	SV* c_func
	char * t0
	float f1
	double d2
	char * t3
PREINIT:
	float(*func)(char *, float, double, char *);
CODE:
	func   = INT2PTR(float(*)(char *, float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2, t3);
OUTPUT:
	RETVAL

char *
nci_ttfdt( c_func, t0, f1, d2, t3 )
	SV* c_func
	char * t0
	float f1
	double d2
	char * t3
PREINIT:
	char *(*func)(char *, float, double, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2, t3);
OUTPUT:
	RETVAL

int
nci_itfdt( c_func, t0, f1, d2, t3 )
	SV* c_func
	char * t0
	float f1
	double d2
	char * t3
PREINIT:
	int(*func)(char *, float, double, char *);
CODE:
	func   = INT2PTR(int(*)(char *, float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2, t3);
OUTPUT:
	RETVAL

void *
nci_pifdt( c_func, i0, f1, d2, t3 )
	SV* c_func
	int i0
	float f1
	double d2
	char * t3
PREINIT:
	void *(*func)(int, float, double, char *);
CODE:
	func   = INT2PTR(void *(*)(int, float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2, t3);
OUTPUT:
	RETVAL

void
nci_vifdt( c_func, i0, f1, d2, t3 )
	SV* c_func
	int i0
	float f1
	double d2
	char * t3
PREINIT:
	void(*func)(int, float, double, char *);
CODE:
	func   = INT2PTR(void(*)(int, float, double, char *), SvIV(c_func) );
	(*func)(i0, f1, d2, t3);

double
nci_difdt( c_func, i0, f1, d2, t3 )
	SV* c_func
	int i0
	float f1
	double d2
	char * t3
PREINIT:
	double(*func)(int, float, double, char *);
CODE:
	func   = INT2PTR(double(*)(int, float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2, t3);
OUTPUT:
	RETVAL

short
nci_sifdt( c_func, i0, f1, d2, t3 )
	SV* c_func
	int i0
	float f1
	double d2
	char * t3
PREINIT:
	short(*func)(int, float, double, char *);
CODE:
	func   = INT2PTR(short(*)(int, float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2, t3);
OUTPUT:
	RETVAL

float
nci_fifdt( c_func, i0, f1, d2, t3 )
	SV* c_func
	int i0
	float f1
	double d2
	char * t3
PREINIT:
	float(*func)(int, float, double, char *);
CODE:
	func   = INT2PTR(float(*)(int, float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2, t3);
OUTPUT:
	RETVAL

char *
nci_tifdt( c_func, i0, f1, d2, t3 )
	SV* c_func
	int i0
	float f1
	double d2
	char * t3
PREINIT:
	char *(*func)(int, float, double, char *);
CODE:
	func   = INT2PTR(char *(*)(int, float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2, t3);
OUTPUT:
	RETVAL

int
nci_iifdt( c_func, i0, f1, d2, t3 )
	SV* c_func
	int i0
	float f1
	double d2
	char * t3
PREINIT:
	int(*func)(int, float, double, char *);
CODE:
	func   = INT2PTR(int(*)(int, float, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2, t3);
OUTPUT:
	RETVAL

void *
nci_pptdt( c_func, p0, t1, d2, t3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	char * t3
PREINIT:
	void *(*func)(void *, char *, double, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2, t3);
OUTPUT:
	RETVAL

void
nci_vptdt( c_func, p0, t1, d2, t3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	char * t3
PREINIT:
	void(*func)(void *, char *, double, char *);
CODE:
	func   = INT2PTR(void(*)(void *, char *, double, char *), SvIV(c_func) );
	(*func)(p0, t1, d2, t3);

double
nci_dptdt( c_func, p0, t1, d2, t3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	char * t3
PREINIT:
	double(*func)(void *, char *, double, char *);
CODE:
	func   = INT2PTR(double(*)(void *, char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2, t3);
OUTPUT:
	RETVAL

short
nci_sptdt( c_func, p0, t1, d2, t3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	char * t3
PREINIT:
	short(*func)(void *, char *, double, char *);
CODE:
	func   = INT2PTR(short(*)(void *, char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2, t3);
OUTPUT:
	RETVAL

float
nci_fptdt( c_func, p0, t1, d2, t3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	char * t3
PREINIT:
	float(*func)(void *, char *, double, char *);
CODE:
	func   = INT2PTR(float(*)(void *, char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2, t3);
OUTPUT:
	RETVAL

char *
nci_tptdt( c_func, p0, t1, d2, t3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	char * t3
PREINIT:
	char *(*func)(void *, char *, double, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2, t3);
OUTPUT:
	RETVAL

int
nci_iptdt( c_func, p0, t1, d2, t3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	char * t3
PREINIT:
	int(*func)(void *, char *, double, char *);
CODE:
	func   = INT2PTR(int(*)(void *, char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2, t3);
OUTPUT:
	RETVAL

void *
nci_pvtdt( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvtdt( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvtdt( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svtdt( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvtdt( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvtdt( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivtdt( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdtdt( c_func, d0, t1, d2, t3 )
	SV* c_func
	double d0
	char * t1
	double d2
	char * t3
PREINIT:
	void *(*func)(double, char *, double, char *);
CODE:
	func   = INT2PTR(void *(*)(double, char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2, t3);
OUTPUT:
	RETVAL

void
nci_vdtdt( c_func, d0, t1, d2, t3 )
	SV* c_func
	double d0
	char * t1
	double d2
	char * t3
PREINIT:
	void(*func)(double, char *, double, char *);
CODE:
	func   = INT2PTR(void(*)(double, char *, double, char *), SvIV(c_func) );
	(*func)(d0, t1, d2, t3);

double
nci_ddtdt( c_func, d0, t1, d2, t3 )
	SV* c_func
	double d0
	char * t1
	double d2
	char * t3
PREINIT:
	double(*func)(double, char *, double, char *);
CODE:
	func   = INT2PTR(double(*)(double, char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2, t3);
OUTPUT:
	RETVAL

short
nci_sdtdt( c_func, d0, t1, d2, t3 )
	SV* c_func
	double d0
	char * t1
	double d2
	char * t3
PREINIT:
	short(*func)(double, char *, double, char *);
CODE:
	func   = INT2PTR(short(*)(double, char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2, t3);
OUTPUT:
	RETVAL

float
nci_fdtdt( c_func, d0, t1, d2, t3 )
	SV* c_func
	double d0
	char * t1
	double d2
	char * t3
PREINIT:
	float(*func)(double, char *, double, char *);
CODE:
	func   = INT2PTR(float(*)(double, char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2, t3);
OUTPUT:
	RETVAL

char *
nci_tdtdt( c_func, d0, t1, d2, t3 )
	SV* c_func
	double d0
	char * t1
	double d2
	char * t3
PREINIT:
	char *(*func)(double, char *, double, char *);
CODE:
	func   = INT2PTR(char *(*)(double, char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2, t3);
OUTPUT:
	RETVAL

int
nci_idtdt( c_func, d0, t1, d2, t3 )
	SV* c_func
	double d0
	char * t1
	double d2
	char * t3
PREINIT:
	int(*func)(double, char *, double, char *);
CODE:
	func   = INT2PTR(int(*)(double, char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2, t3);
OUTPUT:
	RETVAL

void *
nci_pstdt( c_func, s0, t1, d2, t3 )
	SV* c_func
	short s0
	char * t1
	double d2
	char * t3
PREINIT:
	void *(*func)(short, char *, double, char *);
CODE:
	func   = INT2PTR(void *(*)(short, char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2, t3);
OUTPUT:
	RETVAL

void
nci_vstdt( c_func, s0, t1, d2, t3 )
	SV* c_func
	short s0
	char * t1
	double d2
	char * t3
PREINIT:
	void(*func)(short, char *, double, char *);
CODE:
	func   = INT2PTR(void(*)(short, char *, double, char *), SvIV(c_func) );
	(*func)(s0, t1, d2, t3);

double
nci_dstdt( c_func, s0, t1, d2, t3 )
	SV* c_func
	short s0
	char * t1
	double d2
	char * t3
PREINIT:
	double(*func)(short, char *, double, char *);
CODE:
	func   = INT2PTR(double(*)(short, char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2, t3);
OUTPUT:
	RETVAL

short
nci_sstdt( c_func, s0, t1, d2, t3 )
	SV* c_func
	short s0
	char * t1
	double d2
	char * t3
PREINIT:
	short(*func)(short, char *, double, char *);
CODE:
	func   = INT2PTR(short(*)(short, char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2, t3);
OUTPUT:
	RETVAL

float
nci_fstdt( c_func, s0, t1, d2, t3 )
	SV* c_func
	short s0
	char * t1
	double d2
	char * t3
PREINIT:
	float(*func)(short, char *, double, char *);
CODE:
	func   = INT2PTR(float(*)(short, char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2, t3);
OUTPUT:
	RETVAL

char *
nci_tstdt( c_func, s0, t1, d2, t3 )
	SV* c_func
	short s0
	char * t1
	double d2
	char * t3
PREINIT:
	char *(*func)(short, char *, double, char *);
CODE:
	func   = INT2PTR(char *(*)(short, char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2, t3);
OUTPUT:
	RETVAL

int
nci_istdt( c_func, s0, t1, d2, t3 )
	SV* c_func
	short s0
	char * t1
	double d2
	char * t3
PREINIT:
	int(*func)(short, char *, double, char *);
CODE:
	func   = INT2PTR(int(*)(short, char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2, t3);
OUTPUT:
	RETVAL

void *
nci_pftdt( c_func, f0, t1, d2, t3 )
	SV* c_func
	float f0
	char * t1
	double d2
	char * t3
PREINIT:
	void *(*func)(float, char *, double, char *);
CODE:
	func   = INT2PTR(void *(*)(float, char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2, t3);
OUTPUT:
	RETVAL

void
nci_vftdt( c_func, f0, t1, d2, t3 )
	SV* c_func
	float f0
	char * t1
	double d2
	char * t3
PREINIT:
	void(*func)(float, char *, double, char *);
CODE:
	func   = INT2PTR(void(*)(float, char *, double, char *), SvIV(c_func) );
	(*func)(f0, t1, d2, t3);

double
nci_dftdt( c_func, f0, t1, d2, t3 )
	SV* c_func
	float f0
	char * t1
	double d2
	char * t3
PREINIT:
	double(*func)(float, char *, double, char *);
CODE:
	func   = INT2PTR(double(*)(float, char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2, t3);
OUTPUT:
	RETVAL

short
nci_sftdt( c_func, f0, t1, d2, t3 )
	SV* c_func
	float f0
	char * t1
	double d2
	char * t3
PREINIT:
	short(*func)(float, char *, double, char *);
CODE:
	func   = INT2PTR(short(*)(float, char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2, t3);
OUTPUT:
	RETVAL

float
nci_fftdt( c_func, f0, t1, d2, t3 )
	SV* c_func
	float f0
	char * t1
	double d2
	char * t3
PREINIT:
	float(*func)(float, char *, double, char *);
CODE:
	func   = INT2PTR(float(*)(float, char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2, t3);
OUTPUT:
	RETVAL

char *
nci_tftdt( c_func, f0, t1, d2, t3 )
	SV* c_func
	float f0
	char * t1
	double d2
	char * t3
PREINIT:
	char *(*func)(float, char *, double, char *);
CODE:
	func   = INT2PTR(char *(*)(float, char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2, t3);
OUTPUT:
	RETVAL

int
nci_iftdt( c_func, f0, t1, d2, t3 )
	SV* c_func
	float f0
	char * t1
	double d2
	char * t3
PREINIT:
	int(*func)(float, char *, double, char *);
CODE:
	func   = INT2PTR(int(*)(float, char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2, t3);
OUTPUT:
	RETVAL

void *
nci_pttdt( c_func, t0, t1, d2, t3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	char * t3
PREINIT:
	void *(*func)(char *, char *, double, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2, t3);
OUTPUT:
	RETVAL

void
nci_vttdt( c_func, t0, t1, d2, t3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	char * t3
PREINIT:
	void(*func)(char *, char *, double, char *);
CODE:
	func   = INT2PTR(void(*)(char *, char *, double, char *), SvIV(c_func) );
	(*func)(t0, t1, d2, t3);

double
nci_dttdt( c_func, t0, t1, d2, t3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	char * t3
PREINIT:
	double(*func)(char *, char *, double, char *);
CODE:
	func   = INT2PTR(double(*)(char *, char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2, t3);
OUTPUT:
	RETVAL

short
nci_sttdt( c_func, t0, t1, d2, t3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	char * t3
PREINIT:
	short(*func)(char *, char *, double, char *);
CODE:
	func   = INT2PTR(short(*)(char *, char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2, t3);
OUTPUT:
	RETVAL

float
nci_fttdt( c_func, t0, t1, d2, t3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	char * t3
PREINIT:
	float(*func)(char *, char *, double, char *);
CODE:
	func   = INT2PTR(float(*)(char *, char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2, t3);
OUTPUT:
	RETVAL

char *
nci_tttdt( c_func, t0, t1, d2, t3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	char * t3
PREINIT:
	char *(*func)(char *, char *, double, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2, t3);
OUTPUT:
	RETVAL

int
nci_ittdt( c_func, t0, t1, d2, t3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	char * t3
PREINIT:
	int(*func)(char *, char *, double, char *);
CODE:
	func   = INT2PTR(int(*)(char *, char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2, t3);
OUTPUT:
	RETVAL

void *
nci_pitdt( c_func, i0, t1, d2, t3 )
	SV* c_func
	int i0
	char * t1
	double d2
	char * t3
PREINIT:
	void *(*func)(int, char *, double, char *);
CODE:
	func   = INT2PTR(void *(*)(int, char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2, t3);
OUTPUT:
	RETVAL

void
nci_vitdt( c_func, i0, t1, d2, t3 )
	SV* c_func
	int i0
	char * t1
	double d2
	char * t3
PREINIT:
	void(*func)(int, char *, double, char *);
CODE:
	func   = INT2PTR(void(*)(int, char *, double, char *), SvIV(c_func) );
	(*func)(i0, t1, d2, t3);

double
nci_ditdt( c_func, i0, t1, d2, t3 )
	SV* c_func
	int i0
	char * t1
	double d2
	char * t3
PREINIT:
	double(*func)(int, char *, double, char *);
CODE:
	func   = INT2PTR(double(*)(int, char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2, t3);
OUTPUT:
	RETVAL

short
nci_sitdt( c_func, i0, t1, d2, t3 )
	SV* c_func
	int i0
	char * t1
	double d2
	char * t3
PREINIT:
	short(*func)(int, char *, double, char *);
CODE:
	func   = INT2PTR(short(*)(int, char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2, t3);
OUTPUT:
	RETVAL

float
nci_fitdt( c_func, i0, t1, d2, t3 )
	SV* c_func
	int i0
	char * t1
	double d2
	char * t3
PREINIT:
	float(*func)(int, char *, double, char *);
CODE:
	func   = INT2PTR(float(*)(int, char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2, t3);
OUTPUT:
	RETVAL

char *
nci_titdt( c_func, i0, t1, d2, t3 )
	SV* c_func
	int i0
	char * t1
	double d2
	char * t3
PREINIT:
	char *(*func)(int, char *, double, char *);
CODE:
	func   = INT2PTR(char *(*)(int, char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2, t3);
OUTPUT:
	RETVAL

int
nci_iitdt( c_func, i0, t1, d2, t3 )
	SV* c_func
	int i0
	char * t1
	double d2
	char * t3
PREINIT:
	int(*func)(int, char *, double, char *);
CODE:
	func   = INT2PTR(int(*)(int, char *, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2, t3);
OUTPUT:
	RETVAL

void *
nci_ppidt( c_func, p0, i1, d2, t3 )
	SV* c_func
	void * p0
	int i1
	double d2
	char * t3
PREINIT:
	void *(*func)(void *, int, double, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2, t3);
OUTPUT:
	RETVAL

void
nci_vpidt( c_func, p0, i1, d2, t3 )
	SV* c_func
	void * p0
	int i1
	double d2
	char * t3
PREINIT:
	void(*func)(void *, int, double, char *);
CODE:
	func   = INT2PTR(void(*)(void *, int, double, char *), SvIV(c_func) );
	(*func)(p0, i1, d2, t3);

double
nci_dpidt( c_func, p0, i1, d2, t3 )
	SV* c_func
	void * p0
	int i1
	double d2
	char * t3
PREINIT:
	double(*func)(void *, int, double, char *);
CODE:
	func   = INT2PTR(double(*)(void *, int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2, t3);
OUTPUT:
	RETVAL

short
nci_spidt( c_func, p0, i1, d2, t3 )
	SV* c_func
	void * p0
	int i1
	double d2
	char * t3
PREINIT:
	short(*func)(void *, int, double, char *);
CODE:
	func   = INT2PTR(short(*)(void *, int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2, t3);
OUTPUT:
	RETVAL

float
nci_fpidt( c_func, p0, i1, d2, t3 )
	SV* c_func
	void * p0
	int i1
	double d2
	char * t3
PREINIT:
	float(*func)(void *, int, double, char *);
CODE:
	func   = INT2PTR(float(*)(void *, int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2, t3);
OUTPUT:
	RETVAL

char *
nci_tpidt( c_func, p0, i1, d2, t3 )
	SV* c_func
	void * p0
	int i1
	double d2
	char * t3
PREINIT:
	char *(*func)(void *, int, double, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2, t3);
OUTPUT:
	RETVAL

int
nci_ipidt( c_func, p0, i1, d2, t3 )
	SV* c_func
	void * p0
	int i1
	double d2
	char * t3
PREINIT:
	int(*func)(void *, int, double, char *);
CODE:
	func   = INT2PTR(int(*)(void *, int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2, t3);
OUTPUT:
	RETVAL

void *
nci_pvidt( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvidt( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvidt( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svidt( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvidt( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvidt( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ividt( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdidt( c_func, d0, i1, d2, t3 )
	SV* c_func
	double d0
	int i1
	double d2
	char * t3
PREINIT:
	void *(*func)(double, int, double, char *);
CODE:
	func   = INT2PTR(void *(*)(double, int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2, t3);
OUTPUT:
	RETVAL

void
nci_vdidt( c_func, d0, i1, d2, t3 )
	SV* c_func
	double d0
	int i1
	double d2
	char * t3
PREINIT:
	void(*func)(double, int, double, char *);
CODE:
	func   = INT2PTR(void(*)(double, int, double, char *), SvIV(c_func) );
	(*func)(d0, i1, d2, t3);

double
nci_ddidt( c_func, d0, i1, d2, t3 )
	SV* c_func
	double d0
	int i1
	double d2
	char * t3
PREINIT:
	double(*func)(double, int, double, char *);
CODE:
	func   = INT2PTR(double(*)(double, int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2, t3);
OUTPUT:
	RETVAL

short
nci_sdidt( c_func, d0, i1, d2, t3 )
	SV* c_func
	double d0
	int i1
	double d2
	char * t3
PREINIT:
	short(*func)(double, int, double, char *);
CODE:
	func   = INT2PTR(short(*)(double, int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2, t3);
OUTPUT:
	RETVAL

float
nci_fdidt( c_func, d0, i1, d2, t3 )
	SV* c_func
	double d0
	int i1
	double d2
	char * t3
PREINIT:
	float(*func)(double, int, double, char *);
CODE:
	func   = INT2PTR(float(*)(double, int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2, t3);
OUTPUT:
	RETVAL

char *
nci_tdidt( c_func, d0, i1, d2, t3 )
	SV* c_func
	double d0
	int i1
	double d2
	char * t3
PREINIT:
	char *(*func)(double, int, double, char *);
CODE:
	func   = INT2PTR(char *(*)(double, int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2, t3);
OUTPUT:
	RETVAL

int
nci_ididt( c_func, d0, i1, d2, t3 )
	SV* c_func
	double d0
	int i1
	double d2
	char * t3
PREINIT:
	int(*func)(double, int, double, char *);
CODE:
	func   = INT2PTR(int(*)(double, int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2, t3);
OUTPUT:
	RETVAL

void *
nci_psidt( c_func, s0, i1, d2, t3 )
	SV* c_func
	short s0
	int i1
	double d2
	char * t3
PREINIT:
	void *(*func)(short, int, double, char *);
CODE:
	func   = INT2PTR(void *(*)(short, int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2, t3);
OUTPUT:
	RETVAL

void
nci_vsidt( c_func, s0, i1, d2, t3 )
	SV* c_func
	short s0
	int i1
	double d2
	char * t3
PREINIT:
	void(*func)(short, int, double, char *);
CODE:
	func   = INT2PTR(void(*)(short, int, double, char *), SvIV(c_func) );
	(*func)(s0, i1, d2, t3);

double
nci_dsidt( c_func, s0, i1, d2, t3 )
	SV* c_func
	short s0
	int i1
	double d2
	char * t3
PREINIT:
	double(*func)(short, int, double, char *);
CODE:
	func   = INT2PTR(double(*)(short, int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2, t3);
OUTPUT:
	RETVAL

short
nci_ssidt( c_func, s0, i1, d2, t3 )
	SV* c_func
	short s0
	int i1
	double d2
	char * t3
PREINIT:
	short(*func)(short, int, double, char *);
CODE:
	func   = INT2PTR(short(*)(short, int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2, t3);
OUTPUT:
	RETVAL

float
nci_fsidt( c_func, s0, i1, d2, t3 )
	SV* c_func
	short s0
	int i1
	double d2
	char * t3
PREINIT:
	float(*func)(short, int, double, char *);
CODE:
	func   = INT2PTR(float(*)(short, int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2, t3);
OUTPUT:
	RETVAL

char *
nci_tsidt( c_func, s0, i1, d2, t3 )
	SV* c_func
	short s0
	int i1
	double d2
	char * t3
PREINIT:
	char *(*func)(short, int, double, char *);
CODE:
	func   = INT2PTR(char *(*)(short, int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2, t3);
OUTPUT:
	RETVAL

int
nci_isidt( c_func, s0, i1, d2, t3 )
	SV* c_func
	short s0
	int i1
	double d2
	char * t3
PREINIT:
	int(*func)(short, int, double, char *);
CODE:
	func   = INT2PTR(int(*)(short, int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2, t3);
OUTPUT:
	RETVAL

void *
nci_pfidt( c_func, f0, i1, d2, t3 )
	SV* c_func
	float f0
	int i1
	double d2
	char * t3
PREINIT:
	void *(*func)(float, int, double, char *);
CODE:
	func   = INT2PTR(void *(*)(float, int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2, t3);
OUTPUT:
	RETVAL

void
nci_vfidt( c_func, f0, i1, d2, t3 )
	SV* c_func
	float f0
	int i1
	double d2
	char * t3
PREINIT:
	void(*func)(float, int, double, char *);
CODE:
	func   = INT2PTR(void(*)(float, int, double, char *), SvIV(c_func) );
	(*func)(f0, i1, d2, t3);

double
nci_dfidt( c_func, f0, i1, d2, t3 )
	SV* c_func
	float f0
	int i1
	double d2
	char * t3
PREINIT:
	double(*func)(float, int, double, char *);
CODE:
	func   = INT2PTR(double(*)(float, int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2, t3);
OUTPUT:
	RETVAL

short
nci_sfidt( c_func, f0, i1, d2, t3 )
	SV* c_func
	float f0
	int i1
	double d2
	char * t3
PREINIT:
	short(*func)(float, int, double, char *);
CODE:
	func   = INT2PTR(short(*)(float, int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2, t3);
OUTPUT:
	RETVAL

float
nci_ffidt( c_func, f0, i1, d2, t3 )
	SV* c_func
	float f0
	int i1
	double d2
	char * t3
PREINIT:
	float(*func)(float, int, double, char *);
CODE:
	func   = INT2PTR(float(*)(float, int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2, t3);
OUTPUT:
	RETVAL

char *
nci_tfidt( c_func, f0, i1, d2, t3 )
	SV* c_func
	float f0
	int i1
	double d2
	char * t3
PREINIT:
	char *(*func)(float, int, double, char *);
CODE:
	func   = INT2PTR(char *(*)(float, int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2, t3);
OUTPUT:
	RETVAL

int
nci_ifidt( c_func, f0, i1, d2, t3 )
	SV* c_func
	float f0
	int i1
	double d2
	char * t3
PREINIT:
	int(*func)(float, int, double, char *);
CODE:
	func   = INT2PTR(int(*)(float, int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2, t3);
OUTPUT:
	RETVAL

void *
nci_ptidt( c_func, t0, i1, d2, t3 )
	SV* c_func
	char * t0
	int i1
	double d2
	char * t3
PREINIT:
	void *(*func)(char *, int, double, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2, t3);
OUTPUT:
	RETVAL

void
nci_vtidt( c_func, t0, i1, d2, t3 )
	SV* c_func
	char * t0
	int i1
	double d2
	char * t3
PREINIT:
	void(*func)(char *, int, double, char *);
CODE:
	func   = INT2PTR(void(*)(char *, int, double, char *), SvIV(c_func) );
	(*func)(t0, i1, d2, t3);

double
nci_dtidt( c_func, t0, i1, d2, t3 )
	SV* c_func
	char * t0
	int i1
	double d2
	char * t3
PREINIT:
	double(*func)(char *, int, double, char *);
CODE:
	func   = INT2PTR(double(*)(char *, int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2, t3);
OUTPUT:
	RETVAL

short
nci_stidt( c_func, t0, i1, d2, t3 )
	SV* c_func
	char * t0
	int i1
	double d2
	char * t3
PREINIT:
	short(*func)(char *, int, double, char *);
CODE:
	func   = INT2PTR(short(*)(char *, int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2, t3);
OUTPUT:
	RETVAL

float
nci_ftidt( c_func, t0, i1, d2, t3 )
	SV* c_func
	char * t0
	int i1
	double d2
	char * t3
PREINIT:
	float(*func)(char *, int, double, char *);
CODE:
	func   = INT2PTR(float(*)(char *, int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2, t3);
OUTPUT:
	RETVAL

char *
nci_ttidt( c_func, t0, i1, d2, t3 )
	SV* c_func
	char * t0
	int i1
	double d2
	char * t3
PREINIT:
	char *(*func)(char *, int, double, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2, t3);
OUTPUT:
	RETVAL

int
nci_itidt( c_func, t0, i1, d2, t3 )
	SV* c_func
	char * t0
	int i1
	double d2
	char * t3
PREINIT:
	int(*func)(char *, int, double, char *);
CODE:
	func   = INT2PTR(int(*)(char *, int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2, t3);
OUTPUT:
	RETVAL

void *
nci_piidt( c_func, i0, i1, d2, t3 )
	SV* c_func
	int i0
	int i1
	double d2
	char * t3
PREINIT:
	void *(*func)(int, int, double, char *);
CODE:
	func   = INT2PTR(void *(*)(int, int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2, t3);
OUTPUT:
	RETVAL

void
nci_viidt( c_func, i0, i1, d2, t3 )
	SV* c_func
	int i0
	int i1
	double d2
	char * t3
PREINIT:
	void(*func)(int, int, double, char *);
CODE:
	func   = INT2PTR(void(*)(int, int, double, char *), SvIV(c_func) );
	(*func)(i0, i1, d2, t3);

double
nci_diidt( c_func, i0, i1, d2, t3 )
	SV* c_func
	int i0
	int i1
	double d2
	char * t3
PREINIT:
	double(*func)(int, int, double, char *);
CODE:
	func   = INT2PTR(double(*)(int, int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2, t3);
OUTPUT:
	RETVAL

short
nci_siidt( c_func, i0, i1, d2, t3 )
	SV* c_func
	int i0
	int i1
	double d2
	char * t3
PREINIT:
	short(*func)(int, int, double, char *);
CODE:
	func   = INT2PTR(short(*)(int, int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2, t3);
OUTPUT:
	RETVAL

float
nci_fiidt( c_func, i0, i1, d2, t3 )
	SV* c_func
	int i0
	int i1
	double d2
	char * t3
PREINIT:
	float(*func)(int, int, double, char *);
CODE:
	func   = INT2PTR(float(*)(int, int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2, t3);
OUTPUT:
	RETVAL

char *
nci_tiidt( c_func, i0, i1, d2, t3 )
	SV* c_func
	int i0
	int i1
	double d2
	char * t3
PREINIT:
	char *(*func)(int, int, double, char *);
CODE:
	func   = INT2PTR(char *(*)(int, int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2, t3);
OUTPUT:
	RETVAL

int
nci_iiidt( c_func, i0, i1, d2, t3 )
	SV* c_func
	int i0
	int i1
	double d2
	char * t3
PREINIT:
	int(*func)(int, int, double, char *);
CODE:
	func   = INT2PTR(int(*)(int, int, double, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2, t3);
OUTPUT:
	RETVAL

void *
nci_pppst( c_func, p0, p1, s2, t3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	char * t3
PREINIT:
	void *(*func)(void *, void *, short, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2, t3);
OUTPUT:
	RETVAL

void
nci_vppst( c_func, p0, p1, s2, t3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	char * t3
PREINIT:
	void(*func)(void *, void *, short, char *);
CODE:
	func   = INT2PTR(void(*)(void *, void *, short, char *), SvIV(c_func) );
	(*func)(p0, p1, s2, t3);

double
nci_dppst( c_func, p0, p1, s2, t3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	char * t3
PREINIT:
	double(*func)(void *, void *, short, char *);
CODE:
	func   = INT2PTR(double(*)(void *, void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2, t3);
OUTPUT:
	RETVAL

short
nci_sppst( c_func, p0, p1, s2, t3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	char * t3
PREINIT:
	short(*func)(void *, void *, short, char *);
CODE:
	func   = INT2PTR(short(*)(void *, void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2, t3);
OUTPUT:
	RETVAL

float
nci_fppst( c_func, p0, p1, s2, t3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	char * t3
PREINIT:
	float(*func)(void *, void *, short, char *);
CODE:
	func   = INT2PTR(float(*)(void *, void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2, t3);
OUTPUT:
	RETVAL

char *
nci_tppst( c_func, p0, p1, s2, t3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	char * t3
PREINIT:
	char *(*func)(void *, void *, short, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2, t3);
OUTPUT:
	RETVAL

int
nci_ippst( c_func, p0, p1, s2, t3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	char * t3
PREINIT:
	int(*func)(void *, void *, short, char *);
CODE:
	func   = INT2PTR(int(*)(void *, void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2, t3);
OUTPUT:
	RETVAL

void *
nci_pvpst( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvpst( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvpst( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svpst( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvpst( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvpst( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivpst( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdpst( c_func, d0, p1, s2, t3 )
	SV* c_func
	double d0
	void * p1
	short s2
	char * t3
PREINIT:
	void *(*func)(double, void *, short, char *);
CODE:
	func   = INT2PTR(void *(*)(double, void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2, t3);
OUTPUT:
	RETVAL

void
nci_vdpst( c_func, d0, p1, s2, t3 )
	SV* c_func
	double d0
	void * p1
	short s2
	char * t3
PREINIT:
	void(*func)(double, void *, short, char *);
CODE:
	func   = INT2PTR(void(*)(double, void *, short, char *), SvIV(c_func) );
	(*func)(d0, p1, s2, t3);

double
nci_ddpst( c_func, d0, p1, s2, t3 )
	SV* c_func
	double d0
	void * p1
	short s2
	char * t3
PREINIT:
	double(*func)(double, void *, short, char *);
CODE:
	func   = INT2PTR(double(*)(double, void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2, t3);
OUTPUT:
	RETVAL

short
nci_sdpst( c_func, d0, p1, s2, t3 )
	SV* c_func
	double d0
	void * p1
	short s2
	char * t3
PREINIT:
	short(*func)(double, void *, short, char *);
CODE:
	func   = INT2PTR(short(*)(double, void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2, t3);
OUTPUT:
	RETVAL

float
nci_fdpst( c_func, d0, p1, s2, t3 )
	SV* c_func
	double d0
	void * p1
	short s2
	char * t3
PREINIT:
	float(*func)(double, void *, short, char *);
CODE:
	func   = INT2PTR(float(*)(double, void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2, t3);
OUTPUT:
	RETVAL

char *
nci_tdpst( c_func, d0, p1, s2, t3 )
	SV* c_func
	double d0
	void * p1
	short s2
	char * t3
PREINIT:
	char *(*func)(double, void *, short, char *);
CODE:
	func   = INT2PTR(char *(*)(double, void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2, t3);
OUTPUT:
	RETVAL

int
nci_idpst( c_func, d0, p1, s2, t3 )
	SV* c_func
	double d0
	void * p1
	short s2
	char * t3
PREINIT:
	int(*func)(double, void *, short, char *);
CODE:
	func   = INT2PTR(int(*)(double, void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2, t3);
OUTPUT:
	RETVAL

void *
nci_pspst( c_func, s0, p1, s2, t3 )
	SV* c_func
	short s0
	void * p1
	short s2
	char * t3
PREINIT:
	void *(*func)(short, void *, short, char *);
CODE:
	func   = INT2PTR(void *(*)(short, void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2, t3);
OUTPUT:
	RETVAL

void
nci_vspst( c_func, s0, p1, s2, t3 )
	SV* c_func
	short s0
	void * p1
	short s2
	char * t3
PREINIT:
	void(*func)(short, void *, short, char *);
CODE:
	func   = INT2PTR(void(*)(short, void *, short, char *), SvIV(c_func) );
	(*func)(s0, p1, s2, t3);

double
nci_dspst( c_func, s0, p1, s2, t3 )
	SV* c_func
	short s0
	void * p1
	short s2
	char * t3
PREINIT:
	double(*func)(short, void *, short, char *);
CODE:
	func   = INT2PTR(double(*)(short, void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2, t3);
OUTPUT:
	RETVAL

short
nci_sspst( c_func, s0, p1, s2, t3 )
	SV* c_func
	short s0
	void * p1
	short s2
	char * t3
PREINIT:
	short(*func)(short, void *, short, char *);
CODE:
	func   = INT2PTR(short(*)(short, void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2, t3);
OUTPUT:
	RETVAL

float
nci_fspst( c_func, s0, p1, s2, t3 )
	SV* c_func
	short s0
	void * p1
	short s2
	char * t3
PREINIT:
	float(*func)(short, void *, short, char *);
CODE:
	func   = INT2PTR(float(*)(short, void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2, t3);
OUTPUT:
	RETVAL

char *
nci_tspst( c_func, s0, p1, s2, t3 )
	SV* c_func
	short s0
	void * p1
	short s2
	char * t3
PREINIT:
	char *(*func)(short, void *, short, char *);
CODE:
	func   = INT2PTR(char *(*)(short, void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2, t3);
OUTPUT:
	RETVAL

int
nci_ispst( c_func, s0, p1, s2, t3 )
	SV* c_func
	short s0
	void * p1
	short s2
	char * t3
PREINIT:
	int(*func)(short, void *, short, char *);
CODE:
	func   = INT2PTR(int(*)(short, void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2, t3);
OUTPUT:
	RETVAL

void *
nci_pfpst( c_func, f0, p1, s2, t3 )
	SV* c_func
	float f0
	void * p1
	short s2
	char * t3
PREINIT:
	void *(*func)(float, void *, short, char *);
CODE:
	func   = INT2PTR(void *(*)(float, void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2, t3);
OUTPUT:
	RETVAL

void
nci_vfpst( c_func, f0, p1, s2, t3 )
	SV* c_func
	float f0
	void * p1
	short s2
	char * t3
PREINIT:
	void(*func)(float, void *, short, char *);
CODE:
	func   = INT2PTR(void(*)(float, void *, short, char *), SvIV(c_func) );
	(*func)(f0, p1, s2, t3);

double
nci_dfpst( c_func, f0, p1, s2, t3 )
	SV* c_func
	float f0
	void * p1
	short s2
	char * t3
PREINIT:
	double(*func)(float, void *, short, char *);
CODE:
	func   = INT2PTR(double(*)(float, void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2, t3);
OUTPUT:
	RETVAL

short
nci_sfpst( c_func, f0, p1, s2, t3 )
	SV* c_func
	float f0
	void * p1
	short s2
	char * t3
PREINIT:
	short(*func)(float, void *, short, char *);
CODE:
	func   = INT2PTR(short(*)(float, void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2, t3);
OUTPUT:
	RETVAL

float
nci_ffpst( c_func, f0, p1, s2, t3 )
	SV* c_func
	float f0
	void * p1
	short s2
	char * t3
PREINIT:
	float(*func)(float, void *, short, char *);
CODE:
	func   = INT2PTR(float(*)(float, void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2, t3);
OUTPUT:
	RETVAL

char *
nci_tfpst( c_func, f0, p1, s2, t3 )
	SV* c_func
	float f0
	void * p1
	short s2
	char * t3
PREINIT:
	char *(*func)(float, void *, short, char *);
CODE:
	func   = INT2PTR(char *(*)(float, void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2, t3);
OUTPUT:
	RETVAL

int
nci_ifpst( c_func, f0, p1, s2, t3 )
	SV* c_func
	float f0
	void * p1
	short s2
	char * t3
PREINIT:
	int(*func)(float, void *, short, char *);
CODE:
	func   = INT2PTR(int(*)(float, void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2, t3);
OUTPUT:
	RETVAL

void *
nci_ptpst( c_func, t0, p1, s2, t3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	char * t3
PREINIT:
	void *(*func)(char *, void *, short, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2, t3);
OUTPUT:
	RETVAL

void
nci_vtpst( c_func, t0, p1, s2, t3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	char * t3
PREINIT:
	void(*func)(char *, void *, short, char *);
CODE:
	func   = INT2PTR(void(*)(char *, void *, short, char *), SvIV(c_func) );
	(*func)(t0, p1, s2, t3);

double
nci_dtpst( c_func, t0, p1, s2, t3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	char * t3
PREINIT:
	double(*func)(char *, void *, short, char *);
CODE:
	func   = INT2PTR(double(*)(char *, void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2, t3);
OUTPUT:
	RETVAL

short
nci_stpst( c_func, t0, p1, s2, t3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	char * t3
PREINIT:
	short(*func)(char *, void *, short, char *);
CODE:
	func   = INT2PTR(short(*)(char *, void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2, t3);
OUTPUT:
	RETVAL

float
nci_ftpst( c_func, t0, p1, s2, t3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	char * t3
PREINIT:
	float(*func)(char *, void *, short, char *);
CODE:
	func   = INT2PTR(float(*)(char *, void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2, t3);
OUTPUT:
	RETVAL

char *
nci_ttpst( c_func, t0, p1, s2, t3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	char * t3
PREINIT:
	char *(*func)(char *, void *, short, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2, t3);
OUTPUT:
	RETVAL

int
nci_itpst( c_func, t0, p1, s2, t3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	char * t3
PREINIT:
	int(*func)(char *, void *, short, char *);
CODE:
	func   = INT2PTR(int(*)(char *, void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2, t3);
OUTPUT:
	RETVAL

void *
nci_pipst( c_func, i0, p1, s2, t3 )
	SV* c_func
	int i0
	void * p1
	short s2
	char * t3
PREINIT:
	void *(*func)(int, void *, short, char *);
CODE:
	func   = INT2PTR(void *(*)(int, void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2, t3);
OUTPUT:
	RETVAL

void
nci_vipst( c_func, i0, p1, s2, t3 )
	SV* c_func
	int i0
	void * p1
	short s2
	char * t3
PREINIT:
	void(*func)(int, void *, short, char *);
CODE:
	func   = INT2PTR(void(*)(int, void *, short, char *), SvIV(c_func) );
	(*func)(i0, p1, s2, t3);

double
nci_dipst( c_func, i0, p1, s2, t3 )
	SV* c_func
	int i0
	void * p1
	short s2
	char * t3
PREINIT:
	double(*func)(int, void *, short, char *);
CODE:
	func   = INT2PTR(double(*)(int, void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2, t3);
OUTPUT:
	RETVAL

short
nci_sipst( c_func, i0, p1, s2, t3 )
	SV* c_func
	int i0
	void * p1
	short s2
	char * t3
PREINIT:
	short(*func)(int, void *, short, char *);
CODE:
	func   = INT2PTR(short(*)(int, void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2, t3);
OUTPUT:
	RETVAL

float
nci_fipst( c_func, i0, p1, s2, t3 )
	SV* c_func
	int i0
	void * p1
	short s2
	char * t3
PREINIT:
	float(*func)(int, void *, short, char *);
CODE:
	func   = INT2PTR(float(*)(int, void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2, t3);
OUTPUT:
	RETVAL

char *
nci_tipst( c_func, i0, p1, s2, t3 )
	SV* c_func
	int i0
	void * p1
	short s2
	char * t3
PREINIT:
	char *(*func)(int, void *, short, char *);
CODE:
	func   = INT2PTR(char *(*)(int, void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2, t3);
OUTPUT:
	RETVAL

int
nci_iipst( c_func, i0, p1, s2, t3 )
	SV* c_func
	int i0
	void * p1
	short s2
	char * t3
PREINIT:
	int(*func)(int, void *, short, char *);
CODE:
	func   = INT2PTR(int(*)(int, void *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2, t3);
OUTPUT:
	RETVAL

void *
nci_ppdst( c_func, p0, d1, s2, t3 )
	SV* c_func
	void * p0
	double d1
	short s2
	char * t3
PREINIT:
	void *(*func)(void *, double, short, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2, t3);
OUTPUT:
	RETVAL

void
nci_vpdst( c_func, p0, d1, s2, t3 )
	SV* c_func
	void * p0
	double d1
	short s2
	char * t3
PREINIT:
	void(*func)(void *, double, short, char *);
CODE:
	func   = INT2PTR(void(*)(void *, double, short, char *), SvIV(c_func) );
	(*func)(p0, d1, s2, t3);

double
nci_dpdst( c_func, p0, d1, s2, t3 )
	SV* c_func
	void * p0
	double d1
	short s2
	char * t3
PREINIT:
	double(*func)(void *, double, short, char *);
CODE:
	func   = INT2PTR(double(*)(void *, double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2, t3);
OUTPUT:
	RETVAL

short
nci_spdst( c_func, p0, d1, s2, t3 )
	SV* c_func
	void * p0
	double d1
	short s2
	char * t3
PREINIT:
	short(*func)(void *, double, short, char *);
CODE:
	func   = INT2PTR(short(*)(void *, double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2, t3);
OUTPUT:
	RETVAL

float
nci_fpdst( c_func, p0, d1, s2, t3 )
	SV* c_func
	void * p0
	double d1
	short s2
	char * t3
PREINIT:
	float(*func)(void *, double, short, char *);
CODE:
	func   = INT2PTR(float(*)(void *, double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2, t3);
OUTPUT:
	RETVAL

char *
nci_tpdst( c_func, p0, d1, s2, t3 )
	SV* c_func
	void * p0
	double d1
	short s2
	char * t3
PREINIT:
	char *(*func)(void *, double, short, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2, t3);
OUTPUT:
	RETVAL

int
nci_ipdst( c_func, p0, d1, s2, t3 )
	SV* c_func
	void * p0
	double d1
	short s2
	char * t3
PREINIT:
	int(*func)(void *, double, short, char *);
CODE:
	func   = INT2PTR(int(*)(void *, double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2, t3);
OUTPUT:
	RETVAL

void *
nci_pvdst( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvdst( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvdst( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svdst( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvdst( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvdst( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivdst( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pddst( c_func, d0, d1, s2, t3 )
	SV* c_func
	double d0
	double d1
	short s2
	char * t3
PREINIT:
	void *(*func)(double, double, short, char *);
CODE:
	func   = INT2PTR(void *(*)(double, double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2, t3);
OUTPUT:
	RETVAL

void
nci_vddst( c_func, d0, d1, s2, t3 )
	SV* c_func
	double d0
	double d1
	short s2
	char * t3
PREINIT:
	void(*func)(double, double, short, char *);
CODE:
	func   = INT2PTR(void(*)(double, double, short, char *), SvIV(c_func) );
	(*func)(d0, d1, s2, t3);

double
nci_dddst( c_func, d0, d1, s2, t3 )
	SV* c_func
	double d0
	double d1
	short s2
	char * t3
PREINIT:
	double(*func)(double, double, short, char *);
CODE:
	func   = INT2PTR(double(*)(double, double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2, t3);
OUTPUT:
	RETVAL

short
nci_sddst( c_func, d0, d1, s2, t3 )
	SV* c_func
	double d0
	double d1
	short s2
	char * t3
PREINIT:
	short(*func)(double, double, short, char *);
CODE:
	func   = INT2PTR(short(*)(double, double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2, t3);
OUTPUT:
	RETVAL

float
nci_fddst( c_func, d0, d1, s2, t3 )
	SV* c_func
	double d0
	double d1
	short s2
	char * t3
PREINIT:
	float(*func)(double, double, short, char *);
CODE:
	func   = INT2PTR(float(*)(double, double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2, t3);
OUTPUT:
	RETVAL

char *
nci_tddst( c_func, d0, d1, s2, t3 )
	SV* c_func
	double d0
	double d1
	short s2
	char * t3
PREINIT:
	char *(*func)(double, double, short, char *);
CODE:
	func   = INT2PTR(char *(*)(double, double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2, t3);
OUTPUT:
	RETVAL

int
nci_iddst( c_func, d0, d1, s2, t3 )
	SV* c_func
	double d0
	double d1
	short s2
	char * t3
PREINIT:
	int(*func)(double, double, short, char *);
CODE:
	func   = INT2PTR(int(*)(double, double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2, t3);
OUTPUT:
	RETVAL

void *
nci_psdst( c_func, s0, d1, s2, t3 )
	SV* c_func
	short s0
	double d1
	short s2
	char * t3
PREINIT:
	void *(*func)(short, double, short, char *);
CODE:
	func   = INT2PTR(void *(*)(short, double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2, t3);
OUTPUT:
	RETVAL

void
nci_vsdst( c_func, s0, d1, s2, t3 )
	SV* c_func
	short s0
	double d1
	short s2
	char * t3
PREINIT:
	void(*func)(short, double, short, char *);
CODE:
	func   = INT2PTR(void(*)(short, double, short, char *), SvIV(c_func) );
	(*func)(s0, d1, s2, t3);

double
nci_dsdst( c_func, s0, d1, s2, t3 )
	SV* c_func
	short s0
	double d1
	short s2
	char * t3
PREINIT:
	double(*func)(short, double, short, char *);
CODE:
	func   = INT2PTR(double(*)(short, double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2, t3);
OUTPUT:
	RETVAL

short
nci_ssdst( c_func, s0, d1, s2, t3 )
	SV* c_func
	short s0
	double d1
	short s2
	char * t3
PREINIT:
	short(*func)(short, double, short, char *);
CODE:
	func   = INT2PTR(short(*)(short, double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2, t3);
OUTPUT:
	RETVAL

float
nci_fsdst( c_func, s0, d1, s2, t3 )
	SV* c_func
	short s0
	double d1
	short s2
	char * t3
PREINIT:
	float(*func)(short, double, short, char *);
CODE:
	func   = INT2PTR(float(*)(short, double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2, t3);
OUTPUT:
	RETVAL

char *
nci_tsdst( c_func, s0, d1, s2, t3 )
	SV* c_func
	short s0
	double d1
	short s2
	char * t3
PREINIT:
	char *(*func)(short, double, short, char *);
CODE:
	func   = INT2PTR(char *(*)(short, double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2, t3);
OUTPUT:
	RETVAL

int
nci_isdst( c_func, s0, d1, s2, t3 )
	SV* c_func
	short s0
	double d1
	short s2
	char * t3
PREINIT:
	int(*func)(short, double, short, char *);
CODE:
	func   = INT2PTR(int(*)(short, double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2, t3);
OUTPUT:
	RETVAL

void *
nci_pfdst( c_func, f0, d1, s2, t3 )
	SV* c_func
	float f0
	double d1
	short s2
	char * t3
PREINIT:
	void *(*func)(float, double, short, char *);
CODE:
	func   = INT2PTR(void *(*)(float, double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2, t3);
OUTPUT:
	RETVAL

void
nci_vfdst( c_func, f0, d1, s2, t3 )
	SV* c_func
	float f0
	double d1
	short s2
	char * t3
PREINIT:
	void(*func)(float, double, short, char *);
CODE:
	func   = INT2PTR(void(*)(float, double, short, char *), SvIV(c_func) );
	(*func)(f0, d1, s2, t3);

double
nci_dfdst( c_func, f0, d1, s2, t3 )
	SV* c_func
	float f0
	double d1
	short s2
	char * t3
PREINIT:
	double(*func)(float, double, short, char *);
CODE:
	func   = INT2PTR(double(*)(float, double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2, t3);
OUTPUT:
	RETVAL

short
nci_sfdst( c_func, f0, d1, s2, t3 )
	SV* c_func
	float f0
	double d1
	short s2
	char * t3
PREINIT:
	short(*func)(float, double, short, char *);
CODE:
	func   = INT2PTR(short(*)(float, double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2, t3);
OUTPUT:
	RETVAL

float
nci_ffdst( c_func, f0, d1, s2, t3 )
	SV* c_func
	float f0
	double d1
	short s2
	char * t3
PREINIT:
	float(*func)(float, double, short, char *);
CODE:
	func   = INT2PTR(float(*)(float, double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2, t3);
OUTPUT:
	RETVAL

char *
nci_tfdst( c_func, f0, d1, s2, t3 )
	SV* c_func
	float f0
	double d1
	short s2
	char * t3
PREINIT:
	char *(*func)(float, double, short, char *);
CODE:
	func   = INT2PTR(char *(*)(float, double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2, t3);
OUTPUT:
	RETVAL

int
nci_ifdst( c_func, f0, d1, s2, t3 )
	SV* c_func
	float f0
	double d1
	short s2
	char * t3
PREINIT:
	int(*func)(float, double, short, char *);
CODE:
	func   = INT2PTR(int(*)(float, double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2, t3);
OUTPUT:
	RETVAL

void *
nci_ptdst( c_func, t0, d1, s2, t3 )
	SV* c_func
	char * t0
	double d1
	short s2
	char * t3
PREINIT:
	void *(*func)(char *, double, short, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2, t3);
OUTPUT:
	RETVAL

void
nci_vtdst( c_func, t0, d1, s2, t3 )
	SV* c_func
	char * t0
	double d1
	short s2
	char * t3
PREINIT:
	void(*func)(char *, double, short, char *);
CODE:
	func   = INT2PTR(void(*)(char *, double, short, char *), SvIV(c_func) );
	(*func)(t0, d1, s2, t3);

double
nci_dtdst( c_func, t0, d1, s2, t3 )
	SV* c_func
	char * t0
	double d1
	short s2
	char * t3
PREINIT:
	double(*func)(char *, double, short, char *);
CODE:
	func   = INT2PTR(double(*)(char *, double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2, t3);
OUTPUT:
	RETVAL

short
nci_stdst( c_func, t0, d1, s2, t3 )
	SV* c_func
	char * t0
	double d1
	short s2
	char * t3
PREINIT:
	short(*func)(char *, double, short, char *);
CODE:
	func   = INT2PTR(short(*)(char *, double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2, t3);
OUTPUT:
	RETVAL

float
nci_ftdst( c_func, t0, d1, s2, t3 )
	SV* c_func
	char * t0
	double d1
	short s2
	char * t3
PREINIT:
	float(*func)(char *, double, short, char *);
CODE:
	func   = INT2PTR(float(*)(char *, double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2, t3);
OUTPUT:
	RETVAL

char *
nci_ttdst( c_func, t0, d1, s2, t3 )
	SV* c_func
	char * t0
	double d1
	short s2
	char * t3
PREINIT:
	char *(*func)(char *, double, short, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2, t3);
OUTPUT:
	RETVAL

int
nci_itdst( c_func, t0, d1, s2, t3 )
	SV* c_func
	char * t0
	double d1
	short s2
	char * t3
PREINIT:
	int(*func)(char *, double, short, char *);
CODE:
	func   = INT2PTR(int(*)(char *, double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2, t3);
OUTPUT:
	RETVAL

void *
nci_pidst( c_func, i0, d1, s2, t3 )
	SV* c_func
	int i0
	double d1
	short s2
	char * t3
PREINIT:
	void *(*func)(int, double, short, char *);
CODE:
	func   = INT2PTR(void *(*)(int, double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2, t3);
OUTPUT:
	RETVAL

void
nci_vidst( c_func, i0, d1, s2, t3 )
	SV* c_func
	int i0
	double d1
	short s2
	char * t3
PREINIT:
	void(*func)(int, double, short, char *);
CODE:
	func   = INT2PTR(void(*)(int, double, short, char *), SvIV(c_func) );
	(*func)(i0, d1, s2, t3);

double
nci_didst( c_func, i0, d1, s2, t3 )
	SV* c_func
	int i0
	double d1
	short s2
	char * t3
PREINIT:
	double(*func)(int, double, short, char *);
CODE:
	func   = INT2PTR(double(*)(int, double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2, t3);
OUTPUT:
	RETVAL

short
nci_sidst( c_func, i0, d1, s2, t3 )
	SV* c_func
	int i0
	double d1
	short s2
	char * t3
PREINIT:
	short(*func)(int, double, short, char *);
CODE:
	func   = INT2PTR(short(*)(int, double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2, t3);
OUTPUT:
	RETVAL

float
nci_fidst( c_func, i0, d1, s2, t3 )
	SV* c_func
	int i0
	double d1
	short s2
	char * t3
PREINIT:
	float(*func)(int, double, short, char *);
CODE:
	func   = INT2PTR(float(*)(int, double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2, t3);
OUTPUT:
	RETVAL

char *
nci_tidst( c_func, i0, d1, s2, t3 )
	SV* c_func
	int i0
	double d1
	short s2
	char * t3
PREINIT:
	char *(*func)(int, double, short, char *);
CODE:
	func   = INT2PTR(char *(*)(int, double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2, t3);
OUTPUT:
	RETVAL

int
nci_iidst( c_func, i0, d1, s2, t3 )
	SV* c_func
	int i0
	double d1
	short s2
	char * t3
PREINIT:
	int(*func)(int, double, short, char *);
CODE:
	func   = INT2PTR(int(*)(int, double, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2, t3);
OUTPUT:
	RETVAL

void *
nci_ppsst( c_func, p0, s1, s2, t3 )
	SV* c_func
	void * p0
	short s1
	short s2
	char * t3
PREINIT:
	void *(*func)(void *, short, short, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2, t3);
OUTPUT:
	RETVAL

void
nci_vpsst( c_func, p0, s1, s2, t3 )
	SV* c_func
	void * p0
	short s1
	short s2
	char * t3
PREINIT:
	void(*func)(void *, short, short, char *);
CODE:
	func   = INT2PTR(void(*)(void *, short, short, char *), SvIV(c_func) );
	(*func)(p0, s1, s2, t3);

double
nci_dpsst( c_func, p0, s1, s2, t3 )
	SV* c_func
	void * p0
	short s1
	short s2
	char * t3
PREINIT:
	double(*func)(void *, short, short, char *);
CODE:
	func   = INT2PTR(double(*)(void *, short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2, t3);
OUTPUT:
	RETVAL

short
nci_spsst( c_func, p0, s1, s2, t3 )
	SV* c_func
	void * p0
	short s1
	short s2
	char * t3
PREINIT:
	short(*func)(void *, short, short, char *);
CODE:
	func   = INT2PTR(short(*)(void *, short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2, t3);
OUTPUT:
	RETVAL

float
nci_fpsst( c_func, p0, s1, s2, t3 )
	SV* c_func
	void * p0
	short s1
	short s2
	char * t3
PREINIT:
	float(*func)(void *, short, short, char *);
CODE:
	func   = INT2PTR(float(*)(void *, short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2, t3);
OUTPUT:
	RETVAL

char *
nci_tpsst( c_func, p0, s1, s2, t3 )
	SV* c_func
	void * p0
	short s1
	short s2
	char * t3
PREINIT:
	char *(*func)(void *, short, short, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2, t3);
OUTPUT:
	RETVAL

int
nci_ipsst( c_func, p0, s1, s2, t3 )
	SV* c_func
	void * p0
	short s1
	short s2
	char * t3
PREINIT:
	int(*func)(void *, short, short, char *);
CODE:
	func   = INT2PTR(int(*)(void *, short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2, t3);
OUTPUT:
	RETVAL

void *
nci_pvsst( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvsst( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvsst( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svsst( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvsst( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvsst( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivsst( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdsst( c_func, d0, s1, s2, t3 )
	SV* c_func
	double d0
	short s1
	short s2
	char * t3
PREINIT:
	void *(*func)(double, short, short, char *);
CODE:
	func   = INT2PTR(void *(*)(double, short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2, t3);
OUTPUT:
	RETVAL

void
nci_vdsst( c_func, d0, s1, s2, t3 )
	SV* c_func
	double d0
	short s1
	short s2
	char * t3
PREINIT:
	void(*func)(double, short, short, char *);
CODE:
	func   = INT2PTR(void(*)(double, short, short, char *), SvIV(c_func) );
	(*func)(d0, s1, s2, t3);

double
nci_ddsst( c_func, d0, s1, s2, t3 )
	SV* c_func
	double d0
	short s1
	short s2
	char * t3
PREINIT:
	double(*func)(double, short, short, char *);
CODE:
	func   = INT2PTR(double(*)(double, short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2, t3);
OUTPUT:
	RETVAL

short
nci_sdsst( c_func, d0, s1, s2, t3 )
	SV* c_func
	double d0
	short s1
	short s2
	char * t3
PREINIT:
	short(*func)(double, short, short, char *);
CODE:
	func   = INT2PTR(short(*)(double, short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2, t3);
OUTPUT:
	RETVAL

float
nci_fdsst( c_func, d0, s1, s2, t3 )
	SV* c_func
	double d0
	short s1
	short s2
	char * t3
PREINIT:
	float(*func)(double, short, short, char *);
CODE:
	func   = INT2PTR(float(*)(double, short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2, t3);
OUTPUT:
	RETVAL

char *
nci_tdsst( c_func, d0, s1, s2, t3 )
	SV* c_func
	double d0
	short s1
	short s2
	char * t3
PREINIT:
	char *(*func)(double, short, short, char *);
CODE:
	func   = INT2PTR(char *(*)(double, short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2, t3);
OUTPUT:
	RETVAL

int
nci_idsst( c_func, d0, s1, s2, t3 )
	SV* c_func
	double d0
	short s1
	short s2
	char * t3
PREINIT:
	int(*func)(double, short, short, char *);
CODE:
	func   = INT2PTR(int(*)(double, short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2, t3);
OUTPUT:
	RETVAL

void *
nci_pssst( c_func, s0, s1, s2, t3 )
	SV* c_func
	short s0
	short s1
	short s2
	char * t3
PREINIT:
	void *(*func)(short, short, short, char *);
CODE:
	func   = INT2PTR(void *(*)(short, short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2, t3);
OUTPUT:
	RETVAL

void
nci_vssst( c_func, s0, s1, s2, t3 )
	SV* c_func
	short s0
	short s1
	short s2
	char * t3
PREINIT:
	void(*func)(short, short, short, char *);
CODE:
	func   = INT2PTR(void(*)(short, short, short, char *), SvIV(c_func) );
	(*func)(s0, s1, s2, t3);

double
nci_dssst( c_func, s0, s1, s2, t3 )
	SV* c_func
	short s0
	short s1
	short s2
	char * t3
PREINIT:
	double(*func)(short, short, short, char *);
CODE:
	func   = INT2PTR(double(*)(short, short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2, t3);
OUTPUT:
	RETVAL

short
nci_sssst( c_func, s0, s1, s2, t3 )
	SV* c_func
	short s0
	short s1
	short s2
	char * t3
PREINIT:
	short(*func)(short, short, short, char *);
CODE:
	func   = INT2PTR(short(*)(short, short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2, t3);
OUTPUT:
	RETVAL

float
nci_fssst( c_func, s0, s1, s2, t3 )
	SV* c_func
	short s0
	short s1
	short s2
	char * t3
PREINIT:
	float(*func)(short, short, short, char *);
CODE:
	func   = INT2PTR(float(*)(short, short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2, t3);
OUTPUT:
	RETVAL

char *
nci_tssst( c_func, s0, s1, s2, t3 )
	SV* c_func
	short s0
	short s1
	short s2
	char * t3
PREINIT:
	char *(*func)(short, short, short, char *);
CODE:
	func   = INT2PTR(char *(*)(short, short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2, t3);
OUTPUT:
	RETVAL

int
nci_issst( c_func, s0, s1, s2, t3 )
	SV* c_func
	short s0
	short s1
	short s2
	char * t3
PREINIT:
	int(*func)(short, short, short, char *);
CODE:
	func   = INT2PTR(int(*)(short, short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2, t3);
OUTPUT:
	RETVAL

void *
nci_pfsst( c_func, f0, s1, s2, t3 )
	SV* c_func
	float f0
	short s1
	short s2
	char * t3
PREINIT:
	void *(*func)(float, short, short, char *);
CODE:
	func   = INT2PTR(void *(*)(float, short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2, t3);
OUTPUT:
	RETVAL

void
nci_vfsst( c_func, f0, s1, s2, t3 )
	SV* c_func
	float f0
	short s1
	short s2
	char * t3
PREINIT:
	void(*func)(float, short, short, char *);
CODE:
	func   = INT2PTR(void(*)(float, short, short, char *), SvIV(c_func) );
	(*func)(f0, s1, s2, t3);

double
nci_dfsst( c_func, f0, s1, s2, t3 )
	SV* c_func
	float f0
	short s1
	short s2
	char * t3
PREINIT:
	double(*func)(float, short, short, char *);
CODE:
	func   = INT2PTR(double(*)(float, short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2, t3);
OUTPUT:
	RETVAL

short
nci_sfsst( c_func, f0, s1, s2, t3 )
	SV* c_func
	float f0
	short s1
	short s2
	char * t3
PREINIT:
	short(*func)(float, short, short, char *);
CODE:
	func   = INT2PTR(short(*)(float, short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2, t3);
OUTPUT:
	RETVAL

float
nci_ffsst( c_func, f0, s1, s2, t3 )
	SV* c_func
	float f0
	short s1
	short s2
	char * t3
PREINIT:
	float(*func)(float, short, short, char *);
CODE:
	func   = INT2PTR(float(*)(float, short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2, t3);
OUTPUT:
	RETVAL

char *
nci_tfsst( c_func, f0, s1, s2, t3 )
	SV* c_func
	float f0
	short s1
	short s2
	char * t3
PREINIT:
	char *(*func)(float, short, short, char *);
CODE:
	func   = INT2PTR(char *(*)(float, short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2, t3);
OUTPUT:
	RETVAL

int
nci_ifsst( c_func, f0, s1, s2, t3 )
	SV* c_func
	float f0
	short s1
	short s2
	char * t3
PREINIT:
	int(*func)(float, short, short, char *);
CODE:
	func   = INT2PTR(int(*)(float, short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2, t3);
OUTPUT:
	RETVAL

void *
nci_ptsst( c_func, t0, s1, s2, t3 )
	SV* c_func
	char * t0
	short s1
	short s2
	char * t3
PREINIT:
	void *(*func)(char *, short, short, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2, t3);
OUTPUT:
	RETVAL

void
nci_vtsst( c_func, t0, s1, s2, t3 )
	SV* c_func
	char * t0
	short s1
	short s2
	char * t3
PREINIT:
	void(*func)(char *, short, short, char *);
CODE:
	func   = INT2PTR(void(*)(char *, short, short, char *), SvIV(c_func) );
	(*func)(t0, s1, s2, t3);

double
nci_dtsst( c_func, t0, s1, s2, t3 )
	SV* c_func
	char * t0
	short s1
	short s2
	char * t3
PREINIT:
	double(*func)(char *, short, short, char *);
CODE:
	func   = INT2PTR(double(*)(char *, short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2, t3);
OUTPUT:
	RETVAL

short
nci_stsst( c_func, t0, s1, s2, t3 )
	SV* c_func
	char * t0
	short s1
	short s2
	char * t3
PREINIT:
	short(*func)(char *, short, short, char *);
CODE:
	func   = INT2PTR(short(*)(char *, short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2, t3);
OUTPUT:
	RETVAL

float
nci_ftsst( c_func, t0, s1, s2, t3 )
	SV* c_func
	char * t0
	short s1
	short s2
	char * t3
PREINIT:
	float(*func)(char *, short, short, char *);
CODE:
	func   = INT2PTR(float(*)(char *, short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2, t3);
OUTPUT:
	RETVAL

char *
nci_ttsst( c_func, t0, s1, s2, t3 )
	SV* c_func
	char * t0
	short s1
	short s2
	char * t3
PREINIT:
	char *(*func)(char *, short, short, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2, t3);
OUTPUT:
	RETVAL

int
nci_itsst( c_func, t0, s1, s2, t3 )
	SV* c_func
	char * t0
	short s1
	short s2
	char * t3
PREINIT:
	int(*func)(char *, short, short, char *);
CODE:
	func   = INT2PTR(int(*)(char *, short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2, t3);
OUTPUT:
	RETVAL

void *
nci_pisst( c_func, i0, s1, s2, t3 )
	SV* c_func
	int i0
	short s1
	short s2
	char * t3
PREINIT:
	void *(*func)(int, short, short, char *);
CODE:
	func   = INT2PTR(void *(*)(int, short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2, t3);
OUTPUT:
	RETVAL

void
nci_visst( c_func, i0, s1, s2, t3 )
	SV* c_func
	int i0
	short s1
	short s2
	char * t3
PREINIT:
	void(*func)(int, short, short, char *);
CODE:
	func   = INT2PTR(void(*)(int, short, short, char *), SvIV(c_func) );
	(*func)(i0, s1, s2, t3);

double
nci_disst( c_func, i0, s1, s2, t3 )
	SV* c_func
	int i0
	short s1
	short s2
	char * t3
PREINIT:
	double(*func)(int, short, short, char *);
CODE:
	func   = INT2PTR(double(*)(int, short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2, t3);
OUTPUT:
	RETVAL

short
nci_sisst( c_func, i0, s1, s2, t3 )
	SV* c_func
	int i0
	short s1
	short s2
	char * t3
PREINIT:
	short(*func)(int, short, short, char *);
CODE:
	func   = INT2PTR(short(*)(int, short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2, t3);
OUTPUT:
	RETVAL

float
nci_fisst( c_func, i0, s1, s2, t3 )
	SV* c_func
	int i0
	short s1
	short s2
	char * t3
PREINIT:
	float(*func)(int, short, short, char *);
CODE:
	func   = INT2PTR(float(*)(int, short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2, t3);
OUTPUT:
	RETVAL

char *
nci_tisst( c_func, i0, s1, s2, t3 )
	SV* c_func
	int i0
	short s1
	short s2
	char * t3
PREINIT:
	char *(*func)(int, short, short, char *);
CODE:
	func   = INT2PTR(char *(*)(int, short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2, t3);
OUTPUT:
	RETVAL

int
nci_iisst( c_func, i0, s1, s2, t3 )
	SV* c_func
	int i0
	short s1
	short s2
	char * t3
PREINIT:
	int(*func)(int, short, short, char *);
CODE:
	func   = INT2PTR(int(*)(int, short, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2, t3);
OUTPUT:
	RETVAL

void *
nci_ppfst( c_func, p0, f1, s2, t3 )
	SV* c_func
	void * p0
	float f1
	short s2
	char * t3
PREINIT:
	void *(*func)(void *, float, short, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2, t3);
OUTPUT:
	RETVAL

void
nci_vpfst( c_func, p0, f1, s2, t3 )
	SV* c_func
	void * p0
	float f1
	short s2
	char * t3
PREINIT:
	void(*func)(void *, float, short, char *);
CODE:
	func   = INT2PTR(void(*)(void *, float, short, char *), SvIV(c_func) );
	(*func)(p0, f1, s2, t3);

double
nci_dpfst( c_func, p0, f1, s2, t3 )
	SV* c_func
	void * p0
	float f1
	short s2
	char * t3
PREINIT:
	double(*func)(void *, float, short, char *);
CODE:
	func   = INT2PTR(double(*)(void *, float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2, t3);
OUTPUT:
	RETVAL

short
nci_spfst( c_func, p0, f1, s2, t3 )
	SV* c_func
	void * p0
	float f1
	short s2
	char * t3
PREINIT:
	short(*func)(void *, float, short, char *);
CODE:
	func   = INT2PTR(short(*)(void *, float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2, t3);
OUTPUT:
	RETVAL

float
nci_fpfst( c_func, p0, f1, s2, t3 )
	SV* c_func
	void * p0
	float f1
	short s2
	char * t3
PREINIT:
	float(*func)(void *, float, short, char *);
CODE:
	func   = INT2PTR(float(*)(void *, float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2, t3);
OUTPUT:
	RETVAL

char *
nci_tpfst( c_func, p0, f1, s2, t3 )
	SV* c_func
	void * p0
	float f1
	short s2
	char * t3
PREINIT:
	char *(*func)(void *, float, short, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2, t3);
OUTPUT:
	RETVAL

int
nci_ipfst( c_func, p0, f1, s2, t3 )
	SV* c_func
	void * p0
	float f1
	short s2
	char * t3
PREINIT:
	int(*func)(void *, float, short, char *);
CODE:
	func   = INT2PTR(int(*)(void *, float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2, t3);
OUTPUT:
	RETVAL

void *
nci_pvfst( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvfst( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvfst( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svfst( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvfst( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvfst( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivfst( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdfst( c_func, d0, f1, s2, t3 )
	SV* c_func
	double d0
	float f1
	short s2
	char * t3
PREINIT:
	void *(*func)(double, float, short, char *);
CODE:
	func   = INT2PTR(void *(*)(double, float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2, t3);
OUTPUT:
	RETVAL

void
nci_vdfst( c_func, d0, f1, s2, t3 )
	SV* c_func
	double d0
	float f1
	short s2
	char * t3
PREINIT:
	void(*func)(double, float, short, char *);
CODE:
	func   = INT2PTR(void(*)(double, float, short, char *), SvIV(c_func) );
	(*func)(d0, f1, s2, t3);

double
nci_ddfst( c_func, d0, f1, s2, t3 )
	SV* c_func
	double d0
	float f1
	short s2
	char * t3
PREINIT:
	double(*func)(double, float, short, char *);
CODE:
	func   = INT2PTR(double(*)(double, float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2, t3);
OUTPUT:
	RETVAL

short
nci_sdfst( c_func, d0, f1, s2, t3 )
	SV* c_func
	double d0
	float f1
	short s2
	char * t3
PREINIT:
	short(*func)(double, float, short, char *);
CODE:
	func   = INT2PTR(short(*)(double, float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2, t3);
OUTPUT:
	RETVAL

float
nci_fdfst( c_func, d0, f1, s2, t3 )
	SV* c_func
	double d0
	float f1
	short s2
	char * t3
PREINIT:
	float(*func)(double, float, short, char *);
CODE:
	func   = INT2PTR(float(*)(double, float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2, t3);
OUTPUT:
	RETVAL

char *
nci_tdfst( c_func, d0, f1, s2, t3 )
	SV* c_func
	double d0
	float f1
	short s2
	char * t3
PREINIT:
	char *(*func)(double, float, short, char *);
CODE:
	func   = INT2PTR(char *(*)(double, float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2, t3);
OUTPUT:
	RETVAL

int
nci_idfst( c_func, d0, f1, s2, t3 )
	SV* c_func
	double d0
	float f1
	short s2
	char * t3
PREINIT:
	int(*func)(double, float, short, char *);
CODE:
	func   = INT2PTR(int(*)(double, float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2, t3);
OUTPUT:
	RETVAL

void *
nci_psfst( c_func, s0, f1, s2, t3 )
	SV* c_func
	short s0
	float f1
	short s2
	char * t3
PREINIT:
	void *(*func)(short, float, short, char *);
CODE:
	func   = INT2PTR(void *(*)(short, float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2, t3);
OUTPUT:
	RETVAL

void
nci_vsfst( c_func, s0, f1, s2, t3 )
	SV* c_func
	short s0
	float f1
	short s2
	char * t3
PREINIT:
	void(*func)(short, float, short, char *);
CODE:
	func   = INT2PTR(void(*)(short, float, short, char *), SvIV(c_func) );
	(*func)(s0, f1, s2, t3);

double
nci_dsfst( c_func, s0, f1, s2, t3 )
	SV* c_func
	short s0
	float f1
	short s2
	char * t3
PREINIT:
	double(*func)(short, float, short, char *);
CODE:
	func   = INT2PTR(double(*)(short, float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2, t3);
OUTPUT:
	RETVAL

short
nci_ssfst( c_func, s0, f1, s2, t3 )
	SV* c_func
	short s0
	float f1
	short s2
	char * t3
PREINIT:
	short(*func)(short, float, short, char *);
CODE:
	func   = INT2PTR(short(*)(short, float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2, t3);
OUTPUT:
	RETVAL

float
nci_fsfst( c_func, s0, f1, s2, t3 )
	SV* c_func
	short s0
	float f1
	short s2
	char * t3
PREINIT:
	float(*func)(short, float, short, char *);
CODE:
	func   = INT2PTR(float(*)(short, float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2, t3);
OUTPUT:
	RETVAL

char *
nci_tsfst( c_func, s0, f1, s2, t3 )
	SV* c_func
	short s0
	float f1
	short s2
	char * t3
PREINIT:
	char *(*func)(short, float, short, char *);
CODE:
	func   = INT2PTR(char *(*)(short, float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2, t3);
OUTPUT:
	RETVAL

int
nci_isfst( c_func, s0, f1, s2, t3 )
	SV* c_func
	short s0
	float f1
	short s2
	char * t3
PREINIT:
	int(*func)(short, float, short, char *);
CODE:
	func   = INT2PTR(int(*)(short, float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2, t3);
OUTPUT:
	RETVAL

void *
nci_pffst( c_func, f0, f1, s2, t3 )
	SV* c_func
	float f0
	float f1
	short s2
	char * t3
PREINIT:
	void *(*func)(float, float, short, char *);
CODE:
	func   = INT2PTR(void *(*)(float, float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2, t3);
OUTPUT:
	RETVAL

void
nci_vffst( c_func, f0, f1, s2, t3 )
	SV* c_func
	float f0
	float f1
	short s2
	char * t3
PREINIT:
	void(*func)(float, float, short, char *);
CODE:
	func   = INT2PTR(void(*)(float, float, short, char *), SvIV(c_func) );
	(*func)(f0, f1, s2, t3);

double
nci_dffst( c_func, f0, f1, s2, t3 )
	SV* c_func
	float f0
	float f1
	short s2
	char * t3
PREINIT:
	double(*func)(float, float, short, char *);
CODE:
	func   = INT2PTR(double(*)(float, float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2, t3);
OUTPUT:
	RETVAL

short
nci_sffst( c_func, f0, f1, s2, t3 )
	SV* c_func
	float f0
	float f1
	short s2
	char * t3
PREINIT:
	short(*func)(float, float, short, char *);
CODE:
	func   = INT2PTR(short(*)(float, float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2, t3);
OUTPUT:
	RETVAL

float
nci_fffst( c_func, f0, f1, s2, t3 )
	SV* c_func
	float f0
	float f1
	short s2
	char * t3
PREINIT:
	float(*func)(float, float, short, char *);
CODE:
	func   = INT2PTR(float(*)(float, float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2, t3);
OUTPUT:
	RETVAL

char *
nci_tffst( c_func, f0, f1, s2, t3 )
	SV* c_func
	float f0
	float f1
	short s2
	char * t3
PREINIT:
	char *(*func)(float, float, short, char *);
CODE:
	func   = INT2PTR(char *(*)(float, float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2, t3);
OUTPUT:
	RETVAL

int
nci_iffst( c_func, f0, f1, s2, t3 )
	SV* c_func
	float f0
	float f1
	short s2
	char * t3
PREINIT:
	int(*func)(float, float, short, char *);
CODE:
	func   = INT2PTR(int(*)(float, float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2, t3);
OUTPUT:
	RETVAL

void *
nci_ptfst( c_func, t0, f1, s2, t3 )
	SV* c_func
	char * t0
	float f1
	short s2
	char * t3
PREINIT:
	void *(*func)(char *, float, short, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2, t3);
OUTPUT:
	RETVAL

void
nci_vtfst( c_func, t0, f1, s2, t3 )
	SV* c_func
	char * t0
	float f1
	short s2
	char * t3
PREINIT:
	void(*func)(char *, float, short, char *);
CODE:
	func   = INT2PTR(void(*)(char *, float, short, char *), SvIV(c_func) );
	(*func)(t0, f1, s2, t3);

double
nci_dtfst( c_func, t0, f1, s2, t3 )
	SV* c_func
	char * t0
	float f1
	short s2
	char * t3
PREINIT:
	double(*func)(char *, float, short, char *);
CODE:
	func   = INT2PTR(double(*)(char *, float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2, t3);
OUTPUT:
	RETVAL

short
nci_stfst( c_func, t0, f1, s2, t3 )
	SV* c_func
	char * t0
	float f1
	short s2
	char * t3
PREINIT:
	short(*func)(char *, float, short, char *);
CODE:
	func   = INT2PTR(short(*)(char *, float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2, t3);
OUTPUT:
	RETVAL

float
nci_ftfst( c_func, t0, f1, s2, t3 )
	SV* c_func
	char * t0
	float f1
	short s2
	char * t3
PREINIT:
	float(*func)(char *, float, short, char *);
CODE:
	func   = INT2PTR(float(*)(char *, float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2, t3);
OUTPUT:
	RETVAL

char *
nci_ttfst( c_func, t0, f1, s2, t3 )
	SV* c_func
	char * t0
	float f1
	short s2
	char * t3
PREINIT:
	char *(*func)(char *, float, short, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2, t3);
OUTPUT:
	RETVAL

int
nci_itfst( c_func, t0, f1, s2, t3 )
	SV* c_func
	char * t0
	float f1
	short s2
	char * t3
PREINIT:
	int(*func)(char *, float, short, char *);
CODE:
	func   = INT2PTR(int(*)(char *, float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2, t3);
OUTPUT:
	RETVAL

void *
nci_pifst( c_func, i0, f1, s2, t3 )
	SV* c_func
	int i0
	float f1
	short s2
	char * t3
PREINIT:
	void *(*func)(int, float, short, char *);
CODE:
	func   = INT2PTR(void *(*)(int, float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2, t3);
OUTPUT:
	RETVAL

void
nci_vifst( c_func, i0, f1, s2, t3 )
	SV* c_func
	int i0
	float f1
	short s2
	char * t3
PREINIT:
	void(*func)(int, float, short, char *);
CODE:
	func   = INT2PTR(void(*)(int, float, short, char *), SvIV(c_func) );
	(*func)(i0, f1, s2, t3);

double
nci_difst( c_func, i0, f1, s2, t3 )
	SV* c_func
	int i0
	float f1
	short s2
	char * t3
PREINIT:
	double(*func)(int, float, short, char *);
CODE:
	func   = INT2PTR(double(*)(int, float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2, t3);
OUTPUT:
	RETVAL

short
nci_sifst( c_func, i0, f1, s2, t3 )
	SV* c_func
	int i0
	float f1
	short s2
	char * t3
PREINIT:
	short(*func)(int, float, short, char *);
CODE:
	func   = INT2PTR(short(*)(int, float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2, t3);
OUTPUT:
	RETVAL

float
nci_fifst( c_func, i0, f1, s2, t3 )
	SV* c_func
	int i0
	float f1
	short s2
	char * t3
PREINIT:
	float(*func)(int, float, short, char *);
CODE:
	func   = INT2PTR(float(*)(int, float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2, t3);
OUTPUT:
	RETVAL

char *
nci_tifst( c_func, i0, f1, s2, t3 )
	SV* c_func
	int i0
	float f1
	short s2
	char * t3
PREINIT:
	char *(*func)(int, float, short, char *);
CODE:
	func   = INT2PTR(char *(*)(int, float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2, t3);
OUTPUT:
	RETVAL

int
nci_iifst( c_func, i0, f1, s2, t3 )
	SV* c_func
	int i0
	float f1
	short s2
	char * t3
PREINIT:
	int(*func)(int, float, short, char *);
CODE:
	func   = INT2PTR(int(*)(int, float, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2, t3);
OUTPUT:
	RETVAL

void *
nci_pptst( c_func, p0, t1, s2, t3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	char * t3
PREINIT:
	void *(*func)(void *, char *, short, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2, t3);
OUTPUT:
	RETVAL

void
nci_vptst( c_func, p0, t1, s2, t3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	char * t3
PREINIT:
	void(*func)(void *, char *, short, char *);
CODE:
	func   = INT2PTR(void(*)(void *, char *, short, char *), SvIV(c_func) );
	(*func)(p0, t1, s2, t3);

double
nci_dptst( c_func, p0, t1, s2, t3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	char * t3
PREINIT:
	double(*func)(void *, char *, short, char *);
CODE:
	func   = INT2PTR(double(*)(void *, char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2, t3);
OUTPUT:
	RETVAL

short
nci_sptst( c_func, p0, t1, s2, t3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	char * t3
PREINIT:
	short(*func)(void *, char *, short, char *);
CODE:
	func   = INT2PTR(short(*)(void *, char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2, t3);
OUTPUT:
	RETVAL

float
nci_fptst( c_func, p0, t1, s2, t3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	char * t3
PREINIT:
	float(*func)(void *, char *, short, char *);
CODE:
	func   = INT2PTR(float(*)(void *, char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2, t3);
OUTPUT:
	RETVAL

char *
nci_tptst( c_func, p0, t1, s2, t3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	char * t3
PREINIT:
	char *(*func)(void *, char *, short, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2, t3);
OUTPUT:
	RETVAL

int
nci_iptst( c_func, p0, t1, s2, t3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	char * t3
PREINIT:
	int(*func)(void *, char *, short, char *);
CODE:
	func   = INT2PTR(int(*)(void *, char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2, t3);
OUTPUT:
	RETVAL

void *
nci_pvtst( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvtst( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvtst( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svtst( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvtst( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvtst( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivtst( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdtst( c_func, d0, t1, s2, t3 )
	SV* c_func
	double d0
	char * t1
	short s2
	char * t3
PREINIT:
	void *(*func)(double, char *, short, char *);
CODE:
	func   = INT2PTR(void *(*)(double, char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2, t3);
OUTPUT:
	RETVAL

void
nci_vdtst( c_func, d0, t1, s2, t3 )
	SV* c_func
	double d0
	char * t1
	short s2
	char * t3
PREINIT:
	void(*func)(double, char *, short, char *);
CODE:
	func   = INT2PTR(void(*)(double, char *, short, char *), SvIV(c_func) );
	(*func)(d0, t1, s2, t3);

double
nci_ddtst( c_func, d0, t1, s2, t3 )
	SV* c_func
	double d0
	char * t1
	short s2
	char * t3
PREINIT:
	double(*func)(double, char *, short, char *);
CODE:
	func   = INT2PTR(double(*)(double, char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2, t3);
OUTPUT:
	RETVAL

short
nci_sdtst( c_func, d0, t1, s2, t3 )
	SV* c_func
	double d0
	char * t1
	short s2
	char * t3
PREINIT:
	short(*func)(double, char *, short, char *);
CODE:
	func   = INT2PTR(short(*)(double, char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2, t3);
OUTPUT:
	RETVAL

float
nci_fdtst( c_func, d0, t1, s2, t3 )
	SV* c_func
	double d0
	char * t1
	short s2
	char * t3
PREINIT:
	float(*func)(double, char *, short, char *);
CODE:
	func   = INT2PTR(float(*)(double, char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2, t3);
OUTPUT:
	RETVAL

char *
nci_tdtst( c_func, d0, t1, s2, t3 )
	SV* c_func
	double d0
	char * t1
	short s2
	char * t3
PREINIT:
	char *(*func)(double, char *, short, char *);
CODE:
	func   = INT2PTR(char *(*)(double, char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2, t3);
OUTPUT:
	RETVAL

int
nci_idtst( c_func, d0, t1, s2, t3 )
	SV* c_func
	double d0
	char * t1
	short s2
	char * t3
PREINIT:
	int(*func)(double, char *, short, char *);
CODE:
	func   = INT2PTR(int(*)(double, char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2, t3);
OUTPUT:
	RETVAL

void *
nci_pstst( c_func, s0, t1, s2, t3 )
	SV* c_func
	short s0
	char * t1
	short s2
	char * t3
PREINIT:
	void *(*func)(short, char *, short, char *);
CODE:
	func   = INT2PTR(void *(*)(short, char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2, t3);
OUTPUT:
	RETVAL

void
nci_vstst( c_func, s0, t1, s2, t3 )
	SV* c_func
	short s0
	char * t1
	short s2
	char * t3
PREINIT:
	void(*func)(short, char *, short, char *);
CODE:
	func   = INT2PTR(void(*)(short, char *, short, char *), SvIV(c_func) );
	(*func)(s0, t1, s2, t3);

double
nci_dstst( c_func, s0, t1, s2, t3 )
	SV* c_func
	short s0
	char * t1
	short s2
	char * t3
PREINIT:
	double(*func)(short, char *, short, char *);
CODE:
	func   = INT2PTR(double(*)(short, char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2, t3);
OUTPUT:
	RETVAL

short
nci_sstst( c_func, s0, t1, s2, t3 )
	SV* c_func
	short s0
	char * t1
	short s2
	char * t3
PREINIT:
	short(*func)(short, char *, short, char *);
CODE:
	func   = INT2PTR(short(*)(short, char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2, t3);
OUTPUT:
	RETVAL

float
nci_fstst( c_func, s0, t1, s2, t3 )
	SV* c_func
	short s0
	char * t1
	short s2
	char * t3
PREINIT:
	float(*func)(short, char *, short, char *);
CODE:
	func   = INT2PTR(float(*)(short, char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2, t3);
OUTPUT:
	RETVAL

char *
nci_tstst( c_func, s0, t1, s2, t3 )
	SV* c_func
	short s0
	char * t1
	short s2
	char * t3
PREINIT:
	char *(*func)(short, char *, short, char *);
CODE:
	func   = INT2PTR(char *(*)(short, char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2, t3);
OUTPUT:
	RETVAL

int
nci_istst( c_func, s0, t1, s2, t3 )
	SV* c_func
	short s0
	char * t1
	short s2
	char * t3
PREINIT:
	int(*func)(short, char *, short, char *);
CODE:
	func   = INT2PTR(int(*)(short, char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2, t3);
OUTPUT:
	RETVAL

void *
nci_pftst( c_func, f0, t1, s2, t3 )
	SV* c_func
	float f0
	char * t1
	short s2
	char * t3
PREINIT:
	void *(*func)(float, char *, short, char *);
CODE:
	func   = INT2PTR(void *(*)(float, char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2, t3);
OUTPUT:
	RETVAL

void
nci_vftst( c_func, f0, t1, s2, t3 )
	SV* c_func
	float f0
	char * t1
	short s2
	char * t3
PREINIT:
	void(*func)(float, char *, short, char *);
CODE:
	func   = INT2PTR(void(*)(float, char *, short, char *), SvIV(c_func) );
	(*func)(f0, t1, s2, t3);

double
nci_dftst( c_func, f0, t1, s2, t3 )
	SV* c_func
	float f0
	char * t1
	short s2
	char * t3
PREINIT:
	double(*func)(float, char *, short, char *);
CODE:
	func   = INT2PTR(double(*)(float, char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2, t3);
OUTPUT:
	RETVAL

short
nci_sftst( c_func, f0, t1, s2, t3 )
	SV* c_func
	float f0
	char * t1
	short s2
	char * t3
PREINIT:
	short(*func)(float, char *, short, char *);
CODE:
	func   = INT2PTR(short(*)(float, char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2, t3);
OUTPUT:
	RETVAL

float
nci_fftst( c_func, f0, t1, s2, t3 )
	SV* c_func
	float f0
	char * t1
	short s2
	char * t3
PREINIT:
	float(*func)(float, char *, short, char *);
CODE:
	func   = INT2PTR(float(*)(float, char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2, t3);
OUTPUT:
	RETVAL

char *
nci_tftst( c_func, f0, t1, s2, t3 )
	SV* c_func
	float f0
	char * t1
	short s2
	char * t3
PREINIT:
	char *(*func)(float, char *, short, char *);
CODE:
	func   = INT2PTR(char *(*)(float, char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2, t3);
OUTPUT:
	RETVAL

int
nci_iftst( c_func, f0, t1, s2, t3 )
	SV* c_func
	float f0
	char * t1
	short s2
	char * t3
PREINIT:
	int(*func)(float, char *, short, char *);
CODE:
	func   = INT2PTR(int(*)(float, char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2, t3);
OUTPUT:
	RETVAL

void *
nci_pttst( c_func, t0, t1, s2, t3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	char * t3
PREINIT:
	void *(*func)(char *, char *, short, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2, t3);
OUTPUT:
	RETVAL

void
nci_vttst( c_func, t0, t1, s2, t3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	char * t3
PREINIT:
	void(*func)(char *, char *, short, char *);
CODE:
	func   = INT2PTR(void(*)(char *, char *, short, char *), SvIV(c_func) );
	(*func)(t0, t1, s2, t3);

double
nci_dttst( c_func, t0, t1, s2, t3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	char * t3
PREINIT:
	double(*func)(char *, char *, short, char *);
CODE:
	func   = INT2PTR(double(*)(char *, char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2, t3);
OUTPUT:
	RETVAL

short
nci_sttst( c_func, t0, t1, s2, t3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	char * t3
PREINIT:
	short(*func)(char *, char *, short, char *);
CODE:
	func   = INT2PTR(short(*)(char *, char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2, t3);
OUTPUT:
	RETVAL

float
nci_fttst( c_func, t0, t1, s2, t3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	char * t3
PREINIT:
	float(*func)(char *, char *, short, char *);
CODE:
	func   = INT2PTR(float(*)(char *, char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2, t3);
OUTPUT:
	RETVAL

char *
nci_tttst( c_func, t0, t1, s2, t3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	char * t3
PREINIT:
	char *(*func)(char *, char *, short, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2, t3);
OUTPUT:
	RETVAL

int
nci_ittst( c_func, t0, t1, s2, t3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	char * t3
PREINIT:
	int(*func)(char *, char *, short, char *);
CODE:
	func   = INT2PTR(int(*)(char *, char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2, t3);
OUTPUT:
	RETVAL

void *
nci_pitst( c_func, i0, t1, s2, t3 )
	SV* c_func
	int i0
	char * t1
	short s2
	char * t3
PREINIT:
	void *(*func)(int, char *, short, char *);
CODE:
	func   = INT2PTR(void *(*)(int, char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2, t3);
OUTPUT:
	RETVAL

void
nci_vitst( c_func, i0, t1, s2, t3 )
	SV* c_func
	int i0
	char * t1
	short s2
	char * t3
PREINIT:
	void(*func)(int, char *, short, char *);
CODE:
	func   = INT2PTR(void(*)(int, char *, short, char *), SvIV(c_func) );
	(*func)(i0, t1, s2, t3);

double
nci_ditst( c_func, i0, t1, s2, t3 )
	SV* c_func
	int i0
	char * t1
	short s2
	char * t3
PREINIT:
	double(*func)(int, char *, short, char *);
CODE:
	func   = INT2PTR(double(*)(int, char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2, t3);
OUTPUT:
	RETVAL

short
nci_sitst( c_func, i0, t1, s2, t3 )
	SV* c_func
	int i0
	char * t1
	short s2
	char * t3
PREINIT:
	short(*func)(int, char *, short, char *);
CODE:
	func   = INT2PTR(short(*)(int, char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2, t3);
OUTPUT:
	RETVAL

float
nci_fitst( c_func, i0, t1, s2, t3 )
	SV* c_func
	int i0
	char * t1
	short s2
	char * t3
PREINIT:
	float(*func)(int, char *, short, char *);
CODE:
	func   = INT2PTR(float(*)(int, char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2, t3);
OUTPUT:
	RETVAL

char *
nci_titst( c_func, i0, t1, s2, t3 )
	SV* c_func
	int i0
	char * t1
	short s2
	char * t3
PREINIT:
	char *(*func)(int, char *, short, char *);
CODE:
	func   = INT2PTR(char *(*)(int, char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2, t3);
OUTPUT:
	RETVAL

int
nci_iitst( c_func, i0, t1, s2, t3 )
	SV* c_func
	int i0
	char * t1
	short s2
	char * t3
PREINIT:
	int(*func)(int, char *, short, char *);
CODE:
	func   = INT2PTR(int(*)(int, char *, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2, t3);
OUTPUT:
	RETVAL

void *
nci_ppist( c_func, p0, i1, s2, t3 )
	SV* c_func
	void * p0
	int i1
	short s2
	char * t3
PREINIT:
	void *(*func)(void *, int, short, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2, t3);
OUTPUT:
	RETVAL

void
nci_vpist( c_func, p0, i1, s2, t3 )
	SV* c_func
	void * p0
	int i1
	short s2
	char * t3
PREINIT:
	void(*func)(void *, int, short, char *);
CODE:
	func   = INT2PTR(void(*)(void *, int, short, char *), SvIV(c_func) );
	(*func)(p0, i1, s2, t3);

double
nci_dpist( c_func, p0, i1, s2, t3 )
	SV* c_func
	void * p0
	int i1
	short s2
	char * t3
PREINIT:
	double(*func)(void *, int, short, char *);
CODE:
	func   = INT2PTR(double(*)(void *, int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2, t3);
OUTPUT:
	RETVAL

short
nci_spist( c_func, p0, i1, s2, t3 )
	SV* c_func
	void * p0
	int i1
	short s2
	char * t3
PREINIT:
	short(*func)(void *, int, short, char *);
CODE:
	func   = INT2PTR(short(*)(void *, int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2, t3);
OUTPUT:
	RETVAL

float
nci_fpist( c_func, p0, i1, s2, t3 )
	SV* c_func
	void * p0
	int i1
	short s2
	char * t3
PREINIT:
	float(*func)(void *, int, short, char *);
CODE:
	func   = INT2PTR(float(*)(void *, int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2, t3);
OUTPUT:
	RETVAL

char *
nci_tpist( c_func, p0, i1, s2, t3 )
	SV* c_func
	void * p0
	int i1
	short s2
	char * t3
PREINIT:
	char *(*func)(void *, int, short, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2, t3);
OUTPUT:
	RETVAL

int
nci_ipist( c_func, p0, i1, s2, t3 )
	SV* c_func
	void * p0
	int i1
	short s2
	char * t3
PREINIT:
	int(*func)(void *, int, short, char *);
CODE:
	func   = INT2PTR(int(*)(void *, int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2, t3);
OUTPUT:
	RETVAL

void *
nci_pvist( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvist( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvist( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svist( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvist( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvist( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivist( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdist( c_func, d0, i1, s2, t3 )
	SV* c_func
	double d0
	int i1
	short s2
	char * t3
PREINIT:
	void *(*func)(double, int, short, char *);
CODE:
	func   = INT2PTR(void *(*)(double, int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2, t3);
OUTPUT:
	RETVAL

void
nci_vdist( c_func, d0, i1, s2, t3 )
	SV* c_func
	double d0
	int i1
	short s2
	char * t3
PREINIT:
	void(*func)(double, int, short, char *);
CODE:
	func   = INT2PTR(void(*)(double, int, short, char *), SvIV(c_func) );
	(*func)(d0, i1, s2, t3);

double
nci_ddist( c_func, d0, i1, s2, t3 )
	SV* c_func
	double d0
	int i1
	short s2
	char * t3
PREINIT:
	double(*func)(double, int, short, char *);
CODE:
	func   = INT2PTR(double(*)(double, int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2, t3);
OUTPUT:
	RETVAL

short
nci_sdist( c_func, d0, i1, s2, t3 )
	SV* c_func
	double d0
	int i1
	short s2
	char * t3
PREINIT:
	short(*func)(double, int, short, char *);
CODE:
	func   = INT2PTR(short(*)(double, int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2, t3);
OUTPUT:
	RETVAL

float
nci_fdist( c_func, d0, i1, s2, t3 )
	SV* c_func
	double d0
	int i1
	short s2
	char * t3
PREINIT:
	float(*func)(double, int, short, char *);
CODE:
	func   = INT2PTR(float(*)(double, int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2, t3);
OUTPUT:
	RETVAL

char *
nci_tdist( c_func, d0, i1, s2, t3 )
	SV* c_func
	double d0
	int i1
	short s2
	char * t3
PREINIT:
	char *(*func)(double, int, short, char *);
CODE:
	func   = INT2PTR(char *(*)(double, int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2, t3);
OUTPUT:
	RETVAL

int
nci_idist( c_func, d0, i1, s2, t3 )
	SV* c_func
	double d0
	int i1
	short s2
	char * t3
PREINIT:
	int(*func)(double, int, short, char *);
CODE:
	func   = INT2PTR(int(*)(double, int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2, t3);
OUTPUT:
	RETVAL

void *
nci_psist( c_func, s0, i1, s2, t3 )
	SV* c_func
	short s0
	int i1
	short s2
	char * t3
PREINIT:
	void *(*func)(short, int, short, char *);
CODE:
	func   = INT2PTR(void *(*)(short, int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2, t3);
OUTPUT:
	RETVAL

void
nci_vsist( c_func, s0, i1, s2, t3 )
	SV* c_func
	short s0
	int i1
	short s2
	char * t3
PREINIT:
	void(*func)(short, int, short, char *);
CODE:
	func   = INT2PTR(void(*)(short, int, short, char *), SvIV(c_func) );
	(*func)(s0, i1, s2, t3);

double
nci_dsist( c_func, s0, i1, s2, t3 )
	SV* c_func
	short s0
	int i1
	short s2
	char * t3
PREINIT:
	double(*func)(short, int, short, char *);
CODE:
	func   = INT2PTR(double(*)(short, int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2, t3);
OUTPUT:
	RETVAL

short
nci_ssist( c_func, s0, i1, s2, t3 )
	SV* c_func
	short s0
	int i1
	short s2
	char * t3
PREINIT:
	short(*func)(short, int, short, char *);
CODE:
	func   = INT2PTR(short(*)(short, int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2, t3);
OUTPUT:
	RETVAL

float
nci_fsist( c_func, s0, i1, s2, t3 )
	SV* c_func
	short s0
	int i1
	short s2
	char * t3
PREINIT:
	float(*func)(short, int, short, char *);
CODE:
	func   = INT2PTR(float(*)(short, int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2, t3);
OUTPUT:
	RETVAL

char *
nci_tsist( c_func, s0, i1, s2, t3 )
	SV* c_func
	short s0
	int i1
	short s2
	char * t3
PREINIT:
	char *(*func)(short, int, short, char *);
CODE:
	func   = INT2PTR(char *(*)(short, int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2, t3);
OUTPUT:
	RETVAL

int
nci_isist( c_func, s0, i1, s2, t3 )
	SV* c_func
	short s0
	int i1
	short s2
	char * t3
PREINIT:
	int(*func)(short, int, short, char *);
CODE:
	func   = INT2PTR(int(*)(short, int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2, t3);
OUTPUT:
	RETVAL

void *
nci_pfist( c_func, f0, i1, s2, t3 )
	SV* c_func
	float f0
	int i1
	short s2
	char * t3
PREINIT:
	void *(*func)(float, int, short, char *);
CODE:
	func   = INT2PTR(void *(*)(float, int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2, t3);
OUTPUT:
	RETVAL

void
nci_vfist( c_func, f0, i1, s2, t3 )
	SV* c_func
	float f0
	int i1
	short s2
	char * t3
PREINIT:
	void(*func)(float, int, short, char *);
CODE:
	func   = INT2PTR(void(*)(float, int, short, char *), SvIV(c_func) );
	(*func)(f0, i1, s2, t3);

double
nci_dfist( c_func, f0, i1, s2, t3 )
	SV* c_func
	float f0
	int i1
	short s2
	char * t3
PREINIT:
	double(*func)(float, int, short, char *);
CODE:
	func   = INT2PTR(double(*)(float, int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2, t3);
OUTPUT:
	RETVAL

short
nci_sfist( c_func, f0, i1, s2, t3 )
	SV* c_func
	float f0
	int i1
	short s2
	char * t3
PREINIT:
	short(*func)(float, int, short, char *);
CODE:
	func   = INT2PTR(short(*)(float, int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2, t3);
OUTPUT:
	RETVAL

float
nci_ffist( c_func, f0, i1, s2, t3 )
	SV* c_func
	float f0
	int i1
	short s2
	char * t3
PREINIT:
	float(*func)(float, int, short, char *);
CODE:
	func   = INT2PTR(float(*)(float, int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2, t3);
OUTPUT:
	RETVAL

char *
nci_tfist( c_func, f0, i1, s2, t3 )
	SV* c_func
	float f0
	int i1
	short s2
	char * t3
PREINIT:
	char *(*func)(float, int, short, char *);
CODE:
	func   = INT2PTR(char *(*)(float, int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2, t3);
OUTPUT:
	RETVAL

int
nci_ifist( c_func, f0, i1, s2, t3 )
	SV* c_func
	float f0
	int i1
	short s2
	char * t3
PREINIT:
	int(*func)(float, int, short, char *);
CODE:
	func   = INT2PTR(int(*)(float, int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2, t3);
OUTPUT:
	RETVAL

void *
nci_ptist( c_func, t0, i1, s2, t3 )
	SV* c_func
	char * t0
	int i1
	short s2
	char * t3
PREINIT:
	void *(*func)(char *, int, short, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2, t3);
OUTPUT:
	RETVAL

void
nci_vtist( c_func, t0, i1, s2, t3 )
	SV* c_func
	char * t0
	int i1
	short s2
	char * t3
PREINIT:
	void(*func)(char *, int, short, char *);
CODE:
	func   = INT2PTR(void(*)(char *, int, short, char *), SvIV(c_func) );
	(*func)(t0, i1, s2, t3);

double
nci_dtist( c_func, t0, i1, s2, t3 )
	SV* c_func
	char * t0
	int i1
	short s2
	char * t3
PREINIT:
	double(*func)(char *, int, short, char *);
CODE:
	func   = INT2PTR(double(*)(char *, int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2, t3);
OUTPUT:
	RETVAL

short
nci_stist( c_func, t0, i1, s2, t3 )
	SV* c_func
	char * t0
	int i1
	short s2
	char * t3
PREINIT:
	short(*func)(char *, int, short, char *);
CODE:
	func   = INT2PTR(short(*)(char *, int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2, t3);
OUTPUT:
	RETVAL

float
nci_ftist( c_func, t0, i1, s2, t3 )
	SV* c_func
	char * t0
	int i1
	short s2
	char * t3
PREINIT:
	float(*func)(char *, int, short, char *);
CODE:
	func   = INT2PTR(float(*)(char *, int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2, t3);
OUTPUT:
	RETVAL

char *
nci_ttist( c_func, t0, i1, s2, t3 )
	SV* c_func
	char * t0
	int i1
	short s2
	char * t3
PREINIT:
	char *(*func)(char *, int, short, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2, t3);
OUTPUT:
	RETVAL

int
nci_itist( c_func, t0, i1, s2, t3 )
	SV* c_func
	char * t0
	int i1
	short s2
	char * t3
PREINIT:
	int(*func)(char *, int, short, char *);
CODE:
	func   = INT2PTR(int(*)(char *, int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2, t3);
OUTPUT:
	RETVAL

void *
nci_piist( c_func, i0, i1, s2, t3 )
	SV* c_func
	int i0
	int i1
	short s2
	char * t3
PREINIT:
	void *(*func)(int, int, short, char *);
CODE:
	func   = INT2PTR(void *(*)(int, int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2, t3);
OUTPUT:
	RETVAL

void
nci_viist( c_func, i0, i1, s2, t3 )
	SV* c_func
	int i0
	int i1
	short s2
	char * t3
PREINIT:
	void(*func)(int, int, short, char *);
CODE:
	func   = INT2PTR(void(*)(int, int, short, char *), SvIV(c_func) );
	(*func)(i0, i1, s2, t3);

double
nci_diist( c_func, i0, i1, s2, t3 )
	SV* c_func
	int i0
	int i1
	short s2
	char * t3
PREINIT:
	double(*func)(int, int, short, char *);
CODE:
	func   = INT2PTR(double(*)(int, int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2, t3);
OUTPUT:
	RETVAL

short
nci_siist( c_func, i0, i1, s2, t3 )
	SV* c_func
	int i0
	int i1
	short s2
	char * t3
PREINIT:
	short(*func)(int, int, short, char *);
CODE:
	func   = INT2PTR(short(*)(int, int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2, t3);
OUTPUT:
	RETVAL

float
nci_fiist( c_func, i0, i1, s2, t3 )
	SV* c_func
	int i0
	int i1
	short s2
	char * t3
PREINIT:
	float(*func)(int, int, short, char *);
CODE:
	func   = INT2PTR(float(*)(int, int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2, t3);
OUTPUT:
	RETVAL

char *
nci_tiist( c_func, i0, i1, s2, t3 )
	SV* c_func
	int i0
	int i1
	short s2
	char * t3
PREINIT:
	char *(*func)(int, int, short, char *);
CODE:
	func   = INT2PTR(char *(*)(int, int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2, t3);
OUTPUT:
	RETVAL

int
nci_iiist( c_func, i0, i1, s2, t3 )
	SV* c_func
	int i0
	int i1
	short s2
	char * t3
PREINIT:
	int(*func)(int, int, short, char *);
CODE:
	func   = INT2PTR(int(*)(int, int, short, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2, t3);
OUTPUT:
	RETVAL

void *
nci_pppft( c_func, p0, p1, f2, t3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	char * t3
PREINIT:
	void *(*func)(void *, void *, float, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2, t3);
OUTPUT:
	RETVAL

void
nci_vppft( c_func, p0, p1, f2, t3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	char * t3
PREINIT:
	void(*func)(void *, void *, float, char *);
CODE:
	func   = INT2PTR(void(*)(void *, void *, float, char *), SvIV(c_func) );
	(*func)(p0, p1, f2, t3);

double
nci_dppft( c_func, p0, p1, f2, t3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	char * t3
PREINIT:
	double(*func)(void *, void *, float, char *);
CODE:
	func   = INT2PTR(double(*)(void *, void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2, t3);
OUTPUT:
	RETVAL

short
nci_sppft( c_func, p0, p1, f2, t3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	char * t3
PREINIT:
	short(*func)(void *, void *, float, char *);
CODE:
	func   = INT2PTR(short(*)(void *, void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2, t3);
OUTPUT:
	RETVAL

float
nci_fppft( c_func, p0, p1, f2, t3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	char * t3
PREINIT:
	float(*func)(void *, void *, float, char *);
CODE:
	func   = INT2PTR(float(*)(void *, void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2, t3);
OUTPUT:
	RETVAL

char *
nci_tppft( c_func, p0, p1, f2, t3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	char * t3
PREINIT:
	char *(*func)(void *, void *, float, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2, t3);
OUTPUT:
	RETVAL

int
nci_ippft( c_func, p0, p1, f2, t3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	char * t3
PREINIT:
	int(*func)(void *, void *, float, char *);
CODE:
	func   = INT2PTR(int(*)(void *, void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2, t3);
OUTPUT:
	RETVAL

void *
nci_pvpft( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvpft( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvpft( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svpft( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvpft( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvpft( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivpft( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdpft( c_func, d0, p1, f2, t3 )
	SV* c_func
	double d0
	void * p1
	float f2
	char * t3
PREINIT:
	void *(*func)(double, void *, float, char *);
CODE:
	func   = INT2PTR(void *(*)(double, void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2, t3);
OUTPUT:
	RETVAL

void
nci_vdpft( c_func, d0, p1, f2, t3 )
	SV* c_func
	double d0
	void * p1
	float f2
	char * t3
PREINIT:
	void(*func)(double, void *, float, char *);
CODE:
	func   = INT2PTR(void(*)(double, void *, float, char *), SvIV(c_func) );
	(*func)(d0, p1, f2, t3);

double
nci_ddpft( c_func, d0, p1, f2, t3 )
	SV* c_func
	double d0
	void * p1
	float f2
	char * t3
PREINIT:
	double(*func)(double, void *, float, char *);
CODE:
	func   = INT2PTR(double(*)(double, void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2, t3);
OUTPUT:
	RETVAL

short
nci_sdpft( c_func, d0, p1, f2, t3 )
	SV* c_func
	double d0
	void * p1
	float f2
	char * t3
PREINIT:
	short(*func)(double, void *, float, char *);
CODE:
	func   = INT2PTR(short(*)(double, void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2, t3);
OUTPUT:
	RETVAL

float
nci_fdpft( c_func, d0, p1, f2, t3 )
	SV* c_func
	double d0
	void * p1
	float f2
	char * t3
PREINIT:
	float(*func)(double, void *, float, char *);
CODE:
	func   = INT2PTR(float(*)(double, void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2, t3);
OUTPUT:
	RETVAL

char *
nci_tdpft( c_func, d0, p1, f2, t3 )
	SV* c_func
	double d0
	void * p1
	float f2
	char * t3
PREINIT:
	char *(*func)(double, void *, float, char *);
CODE:
	func   = INT2PTR(char *(*)(double, void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2, t3);
OUTPUT:
	RETVAL

int
nci_idpft( c_func, d0, p1, f2, t3 )
	SV* c_func
	double d0
	void * p1
	float f2
	char * t3
PREINIT:
	int(*func)(double, void *, float, char *);
CODE:
	func   = INT2PTR(int(*)(double, void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2, t3);
OUTPUT:
	RETVAL

void *
nci_pspft( c_func, s0, p1, f2, t3 )
	SV* c_func
	short s0
	void * p1
	float f2
	char * t3
PREINIT:
	void *(*func)(short, void *, float, char *);
CODE:
	func   = INT2PTR(void *(*)(short, void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2, t3);
OUTPUT:
	RETVAL

void
nci_vspft( c_func, s0, p1, f2, t3 )
	SV* c_func
	short s0
	void * p1
	float f2
	char * t3
PREINIT:
	void(*func)(short, void *, float, char *);
CODE:
	func   = INT2PTR(void(*)(short, void *, float, char *), SvIV(c_func) );
	(*func)(s0, p1, f2, t3);

double
nci_dspft( c_func, s0, p1, f2, t3 )
	SV* c_func
	short s0
	void * p1
	float f2
	char * t3
PREINIT:
	double(*func)(short, void *, float, char *);
CODE:
	func   = INT2PTR(double(*)(short, void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2, t3);
OUTPUT:
	RETVAL

short
nci_sspft( c_func, s0, p1, f2, t3 )
	SV* c_func
	short s0
	void * p1
	float f2
	char * t3
PREINIT:
	short(*func)(short, void *, float, char *);
CODE:
	func   = INT2PTR(short(*)(short, void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2, t3);
OUTPUT:
	RETVAL

float
nci_fspft( c_func, s0, p1, f2, t3 )
	SV* c_func
	short s0
	void * p1
	float f2
	char * t3
PREINIT:
	float(*func)(short, void *, float, char *);
CODE:
	func   = INT2PTR(float(*)(short, void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2, t3);
OUTPUT:
	RETVAL

char *
nci_tspft( c_func, s0, p1, f2, t3 )
	SV* c_func
	short s0
	void * p1
	float f2
	char * t3
PREINIT:
	char *(*func)(short, void *, float, char *);
CODE:
	func   = INT2PTR(char *(*)(short, void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2, t3);
OUTPUT:
	RETVAL

int
nci_ispft( c_func, s0, p1, f2, t3 )
	SV* c_func
	short s0
	void * p1
	float f2
	char * t3
PREINIT:
	int(*func)(short, void *, float, char *);
CODE:
	func   = INT2PTR(int(*)(short, void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2, t3);
OUTPUT:
	RETVAL

void *
nci_pfpft( c_func, f0, p1, f2, t3 )
	SV* c_func
	float f0
	void * p1
	float f2
	char * t3
PREINIT:
	void *(*func)(float, void *, float, char *);
CODE:
	func   = INT2PTR(void *(*)(float, void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2, t3);
OUTPUT:
	RETVAL

void
nci_vfpft( c_func, f0, p1, f2, t3 )
	SV* c_func
	float f0
	void * p1
	float f2
	char * t3
PREINIT:
	void(*func)(float, void *, float, char *);
CODE:
	func   = INT2PTR(void(*)(float, void *, float, char *), SvIV(c_func) );
	(*func)(f0, p1, f2, t3);

double
nci_dfpft( c_func, f0, p1, f2, t3 )
	SV* c_func
	float f0
	void * p1
	float f2
	char * t3
PREINIT:
	double(*func)(float, void *, float, char *);
CODE:
	func   = INT2PTR(double(*)(float, void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2, t3);
OUTPUT:
	RETVAL

short
nci_sfpft( c_func, f0, p1, f2, t3 )
	SV* c_func
	float f0
	void * p1
	float f2
	char * t3
PREINIT:
	short(*func)(float, void *, float, char *);
CODE:
	func   = INT2PTR(short(*)(float, void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2, t3);
OUTPUT:
	RETVAL

float
nci_ffpft( c_func, f0, p1, f2, t3 )
	SV* c_func
	float f0
	void * p1
	float f2
	char * t3
PREINIT:
	float(*func)(float, void *, float, char *);
CODE:
	func   = INT2PTR(float(*)(float, void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2, t3);
OUTPUT:
	RETVAL

char *
nci_tfpft( c_func, f0, p1, f2, t3 )
	SV* c_func
	float f0
	void * p1
	float f2
	char * t3
PREINIT:
	char *(*func)(float, void *, float, char *);
CODE:
	func   = INT2PTR(char *(*)(float, void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2, t3);
OUTPUT:
	RETVAL

int
nci_ifpft( c_func, f0, p1, f2, t3 )
	SV* c_func
	float f0
	void * p1
	float f2
	char * t3
PREINIT:
	int(*func)(float, void *, float, char *);
CODE:
	func   = INT2PTR(int(*)(float, void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2, t3);
OUTPUT:
	RETVAL

void *
nci_ptpft( c_func, t0, p1, f2, t3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	char * t3
PREINIT:
	void *(*func)(char *, void *, float, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2, t3);
OUTPUT:
	RETVAL

void
nci_vtpft( c_func, t0, p1, f2, t3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	char * t3
PREINIT:
	void(*func)(char *, void *, float, char *);
CODE:
	func   = INT2PTR(void(*)(char *, void *, float, char *), SvIV(c_func) );
	(*func)(t0, p1, f2, t3);

double
nci_dtpft( c_func, t0, p1, f2, t3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	char * t3
PREINIT:
	double(*func)(char *, void *, float, char *);
CODE:
	func   = INT2PTR(double(*)(char *, void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2, t3);
OUTPUT:
	RETVAL

short
nci_stpft( c_func, t0, p1, f2, t3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	char * t3
PREINIT:
	short(*func)(char *, void *, float, char *);
CODE:
	func   = INT2PTR(short(*)(char *, void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2, t3);
OUTPUT:
	RETVAL

float
nci_ftpft( c_func, t0, p1, f2, t3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	char * t3
PREINIT:
	float(*func)(char *, void *, float, char *);
CODE:
	func   = INT2PTR(float(*)(char *, void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2, t3);
OUTPUT:
	RETVAL

char *
nci_ttpft( c_func, t0, p1, f2, t3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	char * t3
PREINIT:
	char *(*func)(char *, void *, float, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2, t3);
OUTPUT:
	RETVAL

int
nci_itpft( c_func, t0, p1, f2, t3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	char * t3
PREINIT:
	int(*func)(char *, void *, float, char *);
CODE:
	func   = INT2PTR(int(*)(char *, void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2, t3);
OUTPUT:
	RETVAL

void *
nci_pipft( c_func, i0, p1, f2, t3 )
	SV* c_func
	int i0
	void * p1
	float f2
	char * t3
PREINIT:
	void *(*func)(int, void *, float, char *);
CODE:
	func   = INT2PTR(void *(*)(int, void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2, t3);
OUTPUT:
	RETVAL

void
nci_vipft( c_func, i0, p1, f2, t3 )
	SV* c_func
	int i0
	void * p1
	float f2
	char * t3
PREINIT:
	void(*func)(int, void *, float, char *);
CODE:
	func   = INT2PTR(void(*)(int, void *, float, char *), SvIV(c_func) );
	(*func)(i0, p1, f2, t3);

double
nci_dipft( c_func, i0, p1, f2, t3 )
	SV* c_func
	int i0
	void * p1
	float f2
	char * t3
PREINIT:
	double(*func)(int, void *, float, char *);
CODE:
	func   = INT2PTR(double(*)(int, void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2, t3);
OUTPUT:
	RETVAL

short
nci_sipft( c_func, i0, p1, f2, t3 )
	SV* c_func
	int i0
	void * p1
	float f2
	char * t3
PREINIT:
	short(*func)(int, void *, float, char *);
CODE:
	func   = INT2PTR(short(*)(int, void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2, t3);
OUTPUT:
	RETVAL

float
nci_fipft( c_func, i0, p1, f2, t3 )
	SV* c_func
	int i0
	void * p1
	float f2
	char * t3
PREINIT:
	float(*func)(int, void *, float, char *);
CODE:
	func   = INT2PTR(float(*)(int, void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2, t3);
OUTPUT:
	RETVAL

char *
nci_tipft( c_func, i0, p1, f2, t3 )
	SV* c_func
	int i0
	void * p1
	float f2
	char * t3
PREINIT:
	char *(*func)(int, void *, float, char *);
CODE:
	func   = INT2PTR(char *(*)(int, void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2, t3);
OUTPUT:
	RETVAL

int
nci_iipft( c_func, i0, p1, f2, t3 )
	SV* c_func
	int i0
	void * p1
	float f2
	char * t3
PREINIT:
	int(*func)(int, void *, float, char *);
CODE:
	func   = INT2PTR(int(*)(int, void *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2, t3);
OUTPUT:
	RETVAL

void *
nci_ppdft( c_func, p0, d1, f2, t3 )
	SV* c_func
	void * p0
	double d1
	float f2
	char * t3
PREINIT:
	void *(*func)(void *, double, float, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2, t3);
OUTPUT:
	RETVAL

void
nci_vpdft( c_func, p0, d1, f2, t3 )
	SV* c_func
	void * p0
	double d1
	float f2
	char * t3
PREINIT:
	void(*func)(void *, double, float, char *);
CODE:
	func   = INT2PTR(void(*)(void *, double, float, char *), SvIV(c_func) );
	(*func)(p0, d1, f2, t3);

double
nci_dpdft( c_func, p0, d1, f2, t3 )
	SV* c_func
	void * p0
	double d1
	float f2
	char * t3
PREINIT:
	double(*func)(void *, double, float, char *);
CODE:
	func   = INT2PTR(double(*)(void *, double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2, t3);
OUTPUT:
	RETVAL

short
nci_spdft( c_func, p0, d1, f2, t3 )
	SV* c_func
	void * p0
	double d1
	float f2
	char * t3
PREINIT:
	short(*func)(void *, double, float, char *);
CODE:
	func   = INT2PTR(short(*)(void *, double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2, t3);
OUTPUT:
	RETVAL

float
nci_fpdft( c_func, p0, d1, f2, t3 )
	SV* c_func
	void * p0
	double d1
	float f2
	char * t3
PREINIT:
	float(*func)(void *, double, float, char *);
CODE:
	func   = INT2PTR(float(*)(void *, double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2, t3);
OUTPUT:
	RETVAL

char *
nci_tpdft( c_func, p0, d1, f2, t3 )
	SV* c_func
	void * p0
	double d1
	float f2
	char * t3
PREINIT:
	char *(*func)(void *, double, float, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2, t3);
OUTPUT:
	RETVAL

int
nci_ipdft( c_func, p0, d1, f2, t3 )
	SV* c_func
	void * p0
	double d1
	float f2
	char * t3
PREINIT:
	int(*func)(void *, double, float, char *);
CODE:
	func   = INT2PTR(int(*)(void *, double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2, t3);
OUTPUT:
	RETVAL

void *
nci_pvdft( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvdft( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvdft( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svdft( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvdft( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvdft( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivdft( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pddft( c_func, d0, d1, f2, t3 )
	SV* c_func
	double d0
	double d1
	float f2
	char * t3
PREINIT:
	void *(*func)(double, double, float, char *);
CODE:
	func   = INT2PTR(void *(*)(double, double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2, t3);
OUTPUT:
	RETVAL

void
nci_vddft( c_func, d0, d1, f2, t3 )
	SV* c_func
	double d0
	double d1
	float f2
	char * t3
PREINIT:
	void(*func)(double, double, float, char *);
CODE:
	func   = INT2PTR(void(*)(double, double, float, char *), SvIV(c_func) );
	(*func)(d0, d1, f2, t3);

double
nci_dddft( c_func, d0, d1, f2, t3 )
	SV* c_func
	double d0
	double d1
	float f2
	char * t3
PREINIT:
	double(*func)(double, double, float, char *);
CODE:
	func   = INT2PTR(double(*)(double, double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2, t3);
OUTPUT:
	RETVAL

short
nci_sddft( c_func, d0, d1, f2, t3 )
	SV* c_func
	double d0
	double d1
	float f2
	char * t3
PREINIT:
	short(*func)(double, double, float, char *);
CODE:
	func   = INT2PTR(short(*)(double, double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2, t3);
OUTPUT:
	RETVAL

float
nci_fddft( c_func, d0, d1, f2, t3 )
	SV* c_func
	double d0
	double d1
	float f2
	char * t3
PREINIT:
	float(*func)(double, double, float, char *);
CODE:
	func   = INT2PTR(float(*)(double, double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2, t3);
OUTPUT:
	RETVAL

char *
nci_tddft( c_func, d0, d1, f2, t3 )
	SV* c_func
	double d0
	double d1
	float f2
	char * t3
PREINIT:
	char *(*func)(double, double, float, char *);
CODE:
	func   = INT2PTR(char *(*)(double, double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2, t3);
OUTPUT:
	RETVAL

int
nci_iddft( c_func, d0, d1, f2, t3 )
	SV* c_func
	double d0
	double d1
	float f2
	char * t3
PREINIT:
	int(*func)(double, double, float, char *);
CODE:
	func   = INT2PTR(int(*)(double, double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2, t3);
OUTPUT:
	RETVAL

void *
nci_psdft( c_func, s0, d1, f2, t3 )
	SV* c_func
	short s0
	double d1
	float f2
	char * t3
PREINIT:
	void *(*func)(short, double, float, char *);
CODE:
	func   = INT2PTR(void *(*)(short, double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2, t3);
OUTPUT:
	RETVAL

void
nci_vsdft( c_func, s0, d1, f2, t3 )
	SV* c_func
	short s0
	double d1
	float f2
	char * t3
PREINIT:
	void(*func)(short, double, float, char *);
CODE:
	func   = INT2PTR(void(*)(short, double, float, char *), SvIV(c_func) );
	(*func)(s0, d1, f2, t3);

double
nci_dsdft( c_func, s0, d1, f2, t3 )
	SV* c_func
	short s0
	double d1
	float f2
	char * t3
PREINIT:
	double(*func)(short, double, float, char *);
CODE:
	func   = INT2PTR(double(*)(short, double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2, t3);
OUTPUT:
	RETVAL

short
nci_ssdft( c_func, s0, d1, f2, t3 )
	SV* c_func
	short s0
	double d1
	float f2
	char * t3
PREINIT:
	short(*func)(short, double, float, char *);
CODE:
	func   = INT2PTR(short(*)(short, double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2, t3);
OUTPUT:
	RETVAL

float
nci_fsdft( c_func, s0, d1, f2, t3 )
	SV* c_func
	short s0
	double d1
	float f2
	char * t3
PREINIT:
	float(*func)(short, double, float, char *);
CODE:
	func   = INT2PTR(float(*)(short, double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2, t3);
OUTPUT:
	RETVAL

char *
nci_tsdft( c_func, s0, d1, f2, t3 )
	SV* c_func
	short s0
	double d1
	float f2
	char * t3
PREINIT:
	char *(*func)(short, double, float, char *);
CODE:
	func   = INT2PTR(char *(*)(short, double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2, t3);
OUTPUT:
	RETVAL

int
nci_isdft( c_func, s0, d1, f2, t3 )
	SV* c_func
	short s0
	double d1
	float f2
	char * t3
PREINIT:
	int(*func)(short, double, float, char *);
CODE:
	func   = INT2PTR(int(*)(short, double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2, t3);
OUTPUT:
	RETVAL

void *
nci_pfdft( c_func, f0, d1, f2, t3 )
	SV* c_func
	float f0
	double d1
	float f2
	char * t3
PREINIT:
	void *(*func)(float, double, float, char *);
CODE:
	func   = INT2PTR(void *(*)(float, double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2, t3);
OUTPUT:
	RETVAL

void
nci_vfdft( c_func, f0, d1, f2, t3 )
	SV* c_func
	float f0
	double d1
	float f2
	char * t3
PREINIT:
	void(*func)(float, double, float, char *);
CODE:
	func   = INT2PTR(void(*)(float, double, float, char *), SvIV(c_func) );
	(*func)(f0, d1, f2, t3);

double
nci_dfdft( c_func, f0, d1, f2, t3 )
	SV* c_func
	float f0
	double d1
	float f2
	char * t3
PREINIT:
	double(*func)(float, double, float, char *);
CODE:
	func   = INT2PTR(double(*)(float, double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2, t3);
OUTPUT:
	RETVAL

short
nci_sfdft( c_func, f0, d1, f2, t3 )
	SV* c_func
	float f0
	double d1
	float f2
	char * t3
PREINIT:
	short(*func)(float, double, float, char *);
CODE:
	func   = INT2PTR(short(*)(float, double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2, t3);
OUTPUT:
	RETVAL

float
nci_ffdft( c_func, f0, d1, f2, t3 )
	SV* c_func
	float f0
	double d1
	float f2
	char * t3
PREINIT:
	float(*func)(float, double, float, char *);
CODE:
	func   = INT2PTR(float(*)(float, double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2, t3);
OUTPUT:
	RETVAL

char *
nci_tfdft( c_func, f0, d1, f2, t3 )
	SV* c_func
	float f0
	double d1
	float f2
	char * t3
PREINIT:
	char *(*func)(float, double, float, char *);
CODE:
	func   = INT2PTR(char *(*)(float, double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2, t3);
OUTPUT:
	RETVAL

int
nci_ifdft( c_func, f0, d1, f2, t3 )
	SV* c_func
	float f0
	double d1
	float f2
	char * t3
PREINIT:
	int(*func)(float, double, float, char *);
CODE:
	func   = INT2PTR(int(*)(float, double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2, t3);
OUTPUT:
	RETVAL

void *
nci_ptdft( c_func, t0, d1, f2, t3 )
	SV* c_func
	char * t0
	double d1
	float f2
	char * t3
PREINIT:
	void *(*func)(char *, double, float, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2, t3);
OUTPUT:
	RETVAL

void
nci_vtdft( c_func, t0, d1, f2, t3 )
	SV* c_func
	char * t0
	double d1
	float f2
	char * t3
PREINIT:
	void(*func)(char *, double, float, char *);
CODE:
	func   = INT2PTR(void(*)(char *, double, float, char *), SvIV(c_func) );
	(*func)(t0, d1, f2, t3);

double
nci_dtdft( c_func, t0, d1, f2, t3 )
	SV* c_func
	char * t0
	double d1
	float f2
	char * t3
PREINIT:
	double(*func)(char *, double, float, char *);
CODE:
	func   = INT2PTR(double(*)(char *, double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2, t3);
OUTPUT:
	RETVAL

short
nci_stdft( c_func, t0, d1, f2, t3 )
	SV* c_func
	char * t0
	double d1
	float f2
	char * t3
PREINIT:
	short(*func)(char *, double, float, char *);
CODE:
	func   = INT2PTR(short(*)(char *, double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2, t3);
OUTPUT:
	RETVAL

float
nci_ftdft( c_func, t0, d1, f2, t3 )
	SV* c_func
	char * t0
	double d1
	float f2
	char * t3
PREINIT:
	float(*func)(char *, double, float, char *);
CODE:
	func   = INT2PTR(float(*)(char *, double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2, t3);
OUTPUT:
	RETVAL

char *
nci_ttdft( c_func, t0, d1, f2, t3 )
	SV* c_func
	char * t0
	double d1
	float f2
	char * t3
PREINIT:
	char *(*func)(char *, double, float, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2, t3);
OUTPUT:
	RETVAL

int
nci_itdft( c_func, t0, d1, f2, t3 )
	SV* c_func
	char * t0
	double d1
	float f2
	char * t3
PREINIT:
	int(*func)(char *, double, float, char *);
CODE:
	func   = INT2PTR(int(*)(char *, double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2, t3);
OUTPUT:
	RETVAL

void *
nci_pidft( c_func, i0, d1, f2, t3 )
	SV* c_func
	int i0
	double d1
	float f2
	char * t3
PREINIT:
	void *(*func)(int, double, float, char *);
CODE:
	func   = INT2PTR(void *(*)(int, double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2, t3);
OUTPUT:
	RETVAL

void
nci_vidft( c_func, i0, d1, f2, t3 )
	SV* c_func
	int i0
	double d1
	float f2
	char * t3
PREINIT:
	void(*func)(int, double, float, char *);
CODE:
	func   = INT2PTR(void(*)(int, double, float, char *), SvIV(c_func) );
	(*func)(i0, d1, f2, t3);

double
nci_didft( c_func, i0, d1, f2, t3 )
	SV* c_func
	int i0
	double d1
	float f2
	char * t3
PREINIT:
	double(*func)(int, double, float, char *);
CODE:
	func   = INT2PTR(double(*)(int, double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2, t3);
OUTPUT:
	RETVAL

short
nci_sidft( c_func, i0, d1, f2, t3 )
	SV* c_func
	int i0
	double d1
	float f2
	char * t3
PREINIT:
	short(*func)(int, double, float, char *);
CODE:
	func   = INT2PTR(short(*)(int, double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2, t3);
OUTPUT:
	RETVAL

float
nci_fidft( c_func, i0, d1, f2, t3 )
	SV* c_func
	int i0
	double d1
	float f2
	char * t3
PREINIT:
	float(*func)(int, double, float, char *);
CODE:
	func   = INT2PTR(float(*)(int, double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2, t3);
OUTPUT:
	RETVAL

char *
nci_tidft( c_func, i0, d1, f2, t3 )
	SV* c_func
	int i0
	double d1
	float f2
	char * t3
PREINIT:
	char *(*func)(int, double, float, char *);
CODE:
	func   = INT2PTR(char *(*)(int, double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2, t3);
OUTPUT:
	RETVAL

int
nci_iidft( c_func, i0, d1, f2, t3 )
	SV* c_func
	int i0
	double d1
	float f2
	char * t3
PREINIT:
	int(*func)(int, double, float, char *);
CODE:
	func   = INT2PTR(int(*)(int, double, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2, t3);
OUTPUT:
	RETVAL

void *
nci_ppsft( c_func, p0, s1, f2, t3 )
	SV* c_func
	void * p0
	short s1
	float f2
	char * t3
PREINIT:
	void *(*func)(void *, short, float, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2, t3);
OUTPUT:
	RETVAL

void
nci_vpsft( c_func, p0, s1, f2, t3 )
	SV* c_func
	void * p0
	short s1
	float f2
	char * t3
PREINIT:
	void(*func)(void *, short, float, char *);
CODE:
	func   = INT2PTR(void(*)(void *, short, float, char *), SvIV(c_func) );
	(*func)(p0, s1, f2, t3);

double
nci_dpsft( c_func, p0, s1, f2, t3 )
	SV* c_func
	void * p0
	short s1
	float f2
	char * t3
PREINIT:
	double(*func)(void *, short, float, char *);
CODE:
	func   = INT2PTR(double(*)(void *, short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2, t3);
OUTPUT:
	RETVAL

short
nci_spsft( c_func, p0, s1, f2, t3 )
	SV* c_func
	void * p0
	short s1
	float f2
	char * t3
PREINIT:
	short(*func)(void *, short, float, char *);
CODE:
	func   = INT2PTR(short(*)(void *, short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2, t3);
OUTPUT:
	RETVAL

float
nci_fpsft( c_func, p0, s1, f2, t3 )
	SV* c_func
	void * p0
	short s1
	float f2
	char * t3
PREINIT:
	float(*func)(void *, short, float, char *);
CODE:
	func   = INT2PTR(float(*)(void *, short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2, t3);
OUTPUT:
	RETVAL

char *
nci_tpsft( c_func, p0, s1, f2, t3 )
	SV* c_func
	void * p0
	short s1
	float f2
	char * t3
PREINIT:
	char *(*func)(void *, short, float, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2, t3);
OUTPUT:
	RETVAL

int
nci_ipsft( c_func, p0, s1, f2, t3 )
	SV* c_func
	void * p0
	short s1
	float f2
	char * t3
PREINIT:
	int(*func)(void *, short, float, char *);
CODE:
	func   = INT2PTR(int(*)(void *, short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2, t3);
OUTPUT:
	RETVAL

void *
nci_pvsft( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvsft( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvsft( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svsft( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvsft( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvsft( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivsft( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdsft( c_func, d0, s1, f2, t3 )
	SV* c_func
	double d0
	short s1
	float f2
	char * t3
PREINIT:
	void *(*func)(double, short, float, char *);
CODE:
	func   = INT2PTR(void *(*)(double, short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2, t3);
OUTPUT:
	RETVAL

void
nci_vdsft( c_func, d0, s1, f2, t3 )
	SV* c_func
	double d0
	short s1
	float f2
	char * t3
PREINIT:
	void(*func)(double, short, float, char *);
CODE:
	func   = INT2PTR(void(*)(double, short, float, char *), SvIV(c_func) );
	(*func)(d0, s1, f2, t3);

double
nci_ddsft( c_func, d0, s1, f2, t3 )
	SV* c_func
	double d0
	short s1
	float f2
	char * t3
PREINIT:
	double(*func)(double, short, float, char *);
CODE:
	func   = INT2PTR(double(*)(double, short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2, t3);
OUTPUT:
	RETVAL

short
nci_sdsft( c_func, d0, s1, f2, t3 )
	SV* c_func
	double d0
	short s1
	float f2
	char * t3
PREINIT:
	short(*func)(double, short, float, char *);
CODE:
	func   = INT2PTR(short(*)(double, short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2, t3);
OUTPUT:
	RETVAL

float
nci_fdsft( c_func, d0, s1, f2, t3 )
	SV* c_func
	double d0
	short s1
	float f2
	char * t3
PREINIT:
	float(*func)(double, short, float, char *);
CODE:
	func   = INT2PTR(float(*)(double, short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2, t3);
OUTPUT:
	RETVAL

char *
nci_tdsft( c_func, d0, s1, f2, t3 )
	SV* c_func
	double d0
	short s1
	float f2
	char * t3
PREINIT:
	char *(*func)(double, short, float, char *);
CODE:
	func   = INT2PTR(char *(*)(double, short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2, t3);
OUTPUT:
	RETVAL

int
nci_idsft( c_func, d0, s1, f2, t3 )
	SV* c_func
	double d0
	short s1
	float f2
	char * t3
PREINIT:
	int(*func)(double, short, float, char *);
CODE:
	func   = INT2PTR(int(*)(double, short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2, t3);
OUTPUT:
	RETVAL

void *
nci_pssft( c_func, s0, s1, f2, t3 )
	SV* c_func
	short s0
	short s1
	float f2
	char * t3
PREINIT:
	void *(*func)(short, short, float, char *);
CODE:
	func   = INT2PTR(void *(*)(short, short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2, t3);
OUTPUT:
	RETVAL

void
nci_vssft( c_func, s0, s1, f2, t3 )
	SV* c_func
	short s0
	short s1
	float f2
	char * t3
PREINIT:
	void(*func)(short, short, float, char *);
CODE:
	func   = INT2PTR(void(*)(short, short, float, char *), SvIV(c_func) );
	(*func)(s0, s1, f2, t3);

double
nci_dssft( c_func, s0, s1, f2, t3 )
	SV* c_func
	short s0
	short s1
	float f2
	char * t3
PREINIT:
	double(*func)(short, short, float, char *);
CODE:
	func   = INT2PTR(double(*)(short, short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2, t3);
OUTPUT:
	RETVAL

short
nci_sssft( c_func, s0, s1, f2, t3 )
	SV* c_func
	short s0
	short s1
	float f2
	char * t3
PREINIT:
	short(*func)(short, short, float, char *);
CODE:
	func   = INT2PTR(short(*)(short, short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2, t3);
OUTPUT:
	RETVAL

float
nci_fssft( c_func, s0, s1, f2, t3 )
	SV* c_func
	short s0
	short s1
	float f2
	char * t3
PREINIT:
	float(*func)(short, short, float, char *);
CODE:
	func   = INT2PTR(float(*)(short, short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2, t3);
OUTPUT:
	RETVAL

char *
nci_tssft( c_func, s0, s1, f2, t3 )
	SV* c_func
	short s0
	short s1
	float f2
	char * t3
PREINIT:
	char *(*func)(short, short, float, char *);
CODE:
	func   = INT2PTR(char *(*)(short, short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2, t3);
OUTPUT:
	RETVAL

int
nci_issft( c_func, s0, s1, f2, t3 )
	SV* c_func
	short s0
	short s1
	float f2
	char * t3
PREINIT:
	int(*func)(short, short, float, char *);
CODE:
	func   = INT2PTR(int(*)(short, short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2, t3);
OUTPUT:
	RETVAL

void *
nci_pfsft( c_func, f0, s1, f2, t3 )
	SV* c_func
	float f0
	short s1
	float f2
	char * t3
PREINIT:
	void *(*func)(float, short, float, char *);
CODE:
	func   = INT2PTR(void *(*)(float, short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2, t3);
OUTPUT:
	RETVAL

void
nci_vfsft( c_func, f0, s1, f2, t3 )
	SV* c_func
	float f0
	short s1
	float f2
	char * t3
PREINIT:
	void(*func)(float, short, float, char *);
CODE:
	func   = INT2PTR(void(*)(float, short, float, char *), SvIV(c_func) );
	(*func)(f0, s1, f2, t3);

double
nci_dfsft( c_func, f0, s1, f2, t3 )
	SV* c_func
	float f0
	short s1
	float f2
	char * t3
PREINIT:
	double(*func)(float, short, float, char *);
CODE:
	func   = INT2PTR(double(*)(float, short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2, t3);
OUTPUT:
	RETVAL

short
nci_sfsft( c_func, f0, s1, f2, t3 )
	SV* c_func
	float f0
	short s1
	float f2
	char * t3
PREINIT:
	short(*func)(float, short, float, char *);
CODE:
	func   = INT2PTR(short(*)(float, short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2, t3);
OUTPUT:
	RETVAL

float
nci_ffsft( c_func, f0, s1, f2, t3 )
	SV* c_func
	float f0
	short s1
	float f2
	char * t3
PREINIT:
	float(*func)(float, short, float, char *);
CODE:
	func   = INT2PTR(float(*)(float, short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2, t3);
OUTPUT:
	RETVAL

char *
nci_tfsft( c_func, f0, s1, f2, t3 )
	SV* c_func
	float f0
	short s1
	float f2
	char * t3
PREINIT:
	char *(*func)(float, short, float, char *);
CODE:
	func   = INT2PTR(char *(*)(float, short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2, t3);
OUTPUT:
	RETVAL

int
nci_ifsft( c_func, f0, s1, f2, t3 )
	SV* c_func
	float f0
	short s1
	float f2
	char * t3
PREINIT:
	int(*func)(float, short, float, char *);
CODE:
	func   = INT2PTR(int(*)(float, short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2, t3);
OUTPUT:
	RETVAL

void *
nci_ptsft( c_func, t0, s1, f2, t3 )
	SV* c_func
	char * t0
	short s1
	float f2
	char * t3
PREINIT:
	void *(*func)(char *, short, float, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2, t3);
OUTPUT:
	RETVAL

void
nci_vtsft( c_func, t0, s1, f2, t3 )
	SV* c_func
	char * t0
	short s1
	float f2
	char * t3
PREINIT:
	void(*func)(char *, short, float, char *);
CODE:
	func   = INT2PTR(void(*)(char *, short, float, char *), SvIV(c_func) );
	(*func)(t0, s1, f2, t3);

double
nci_dtsft( c_func, t0, s1, f2, t3 )
	SV* c_func
	char * t0
	short s1
	float f2
	char * t3
PREINIT:
	double(*func)(char *, short, float, char *);
CODE:
	func   = INT2PTR(double(*)(char *, short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2, t3);
OUTPUT:
	RETVAL

short
nci_stsft( c_func, t0, s1, f2, t3 )
	SV* c_func
	char * t0
	short s1
	float f2
	char * t3
PREINIT:
	short(*func)(char *, short, float, char *);
CODE:
	func   = INT2PTR(short(*)(char *, short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2, t3);
OUTPUT:
	RETVAL

float
nci_ftsft( c_func, t0, s1, f2, t3 )
	SV* c_func
	char * t0
	short s1
	float f2
	char * t3
PREINIT:
	float(*func)(char *, short, float, char *);
CODE:
	func   = INT2PTR(float(*)(char *, short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2, t3);
OUTPUT:
	RETVAL

char *
nci_ttsft( c_func, t0, s1, f2, t3 )
	SV* c_func
	char * t0
	short s1
	float f2
	char * t3
PREINIT:
	char *(*func)(char *, short, float, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2, t3);
OUTPUT:
	RETVAL

int
nci_itsft( c_func, t0, s1, f2, t3 )
	SV* c_func
	char * t0
	short s1
	float f2
	char * t3
PREINIT:
	int(*func)(char *, short, float, char *);
CODE:
	func   = INT2PTR(int(*)(char *, short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2, t3);
OUTPUT:
	RETVAL

void *
nci_pisft( c_func, i0, s1, f2, t3 )
	SV* c_func
	int i0
	short s1
	float f2
	char * t3
PREINIT:
	void *(*func)(int, short, float, char *);
CODE:
	func   = INT2PTR(void *(*)(int, short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2, t3);
OUTPUT:
	RETVAL

void
nci_visft( c_func, i0, s1, f2, t3 )
	SV* c_func
	int i0
	short s1
	float f2
	char * t3
PREINIT:
	void(*func)(int, short, float, char *);
CODE:
	func   = INT2PTR(void(*)(int, short, float, char *), SvIV(c_func) );
	(*func)(i0, s1, f2, t3);

double
nci_disft( c_func, i0, s1, f2, t3 )
	SV* c_func
	int i0
	short s1
	float f2
	char * t3
PREINIT:
	double(*func)(int, short, float, char *);
CODE:
	func   = INT2PTR(double(*)(int, short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2, t3);
OUTPUT:
	RETVAL

short
nci_sisft( c_func, i0, s1, f2, t3 )
	SV* c_func
	int i0
	short s1
	float f2
	char * t3
PREINIT:
	short(*func)(int, short, float, char *);
CODE:
	func   = INT2PTR(short(*)(int, short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2, t3);
OUTPUT:
	RETVAL

float
nci_fisft( c_func, i0, s1, f2, t3 )
	SV* c_func
	int i0
	short s1
	float f2
	char * t3
PREINIT:
	float(*func)(int, short, float, char *);
CODE:
	func   = INT2PTR(float(*)(int, short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2, t3);
OUTPUT:
	RETVAL

char *
nci_tisft( c_func, i0, s1, f2, t3 )
	SV* c_func
	int i0
	short s1
	float f2
	char * t3
PREINIT:
	char *(*func)(int, short, float, char *);
CODE:
	func   = INT2PTR(char *(*)(int, short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2, t3);
OUTPUT:
	RETVAL

int
nci_iisft( c_func, i0, s1, f2, t3 )
	SV* c_func
	int i0
	short s1
	float f2
	char * t3
PREINIT:
	int(*func)(int, short, float, char *);
CODE:
	func   = INT2PTR(int(*)(int, short, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2, t3);
OUTPUT:
	RETVAL

void *
nci_ppfft( c_func, p0, f1, f2, t3 )
	SV* c_func
	void * p0
	float f1
	float f2
	char * t3
PREINIT:
	void *(*func)(void *, float, float, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2, t3);
OUTPUT:
	RETVAL

void
nci_vpfft( c_func, p0, f1, f2, t3 )
	SV* c_func
	void * p0
	float f1
	float f2
	char * t3
PREINIT:
	void(*func)(void *, float, float, char *);
CODE:
	func   = INT2PTR(void(*)(void *, float, float, char *), SvIV(c_func) );
	(*func)(p0, f1, f2, t3);

double
nci_dpfft( c_func, p0, f1, f2, t3 )
	SV* c_func
	void * p0
	float f1
	float f2
	char * t3
PREINIT:
	double(*func)(void *, float, float, char *);
CODE:
	func   = INT2PTR(double(*)(void *, float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2, t3);
OUTPUT:
	RETVAL

short
nci_spfft( c_func, p0, f1, f2, t3 )
	SV* c_func
	void * p0
	float f1
	float f2
	char * t3
PREINIT:
	short(*func)(void *, float, float, char *);
CODE:
	func   = INT2PTR(short(*)(void *, float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2, t3);
OUTPUT:
	RETVAL

float
nci_fpfft( c_func, p0, f1, f2, t3 )
	SV* c_func
	void * p0
	float f1
	float f2
	char * t3
PREINIT:
	float(*func)(void *, float, float, char *);
CODE:
	func   = INT2PTR(float(*)(void *, float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2, t3);
OUTPUT:
	RETVAL

char *
nci_tpfft( c_func, p0, f1, f2, t3 )
	SV* c_func
	void * p0
	float f1
	float f2
	char * t3
PREINIT:
	char *(*func)(void *, float, float, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2, t3);
OUTPUT:
	RETVAL

int
nci_ipfft( c_func, p0, f1, f2, t3 )
	SV* c_func
	void * p0
	float f1
	float f2
	char * t3
PREINIT:
	int(*func)(void *, float, float, char *);
CODE:
	func   = INT2PTR(int(*)(void *, float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2, t3);
OUTPUT:
	RETVAL

void *
nci_pvfft( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvfft( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvfft( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svfft( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvfft( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvfft( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivfft( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdfft( c_func, d0, f1, f2, t3 )
	SV* c_func
	double d0
	float f1
	float f2
	char * t3
PREINIT:
	void *(*func)(double, float, float, char *);
CODE:
	func   = INT2PTR(void *(*)(double, float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2, t3);
OUTPUT:
	RETVAL

void
nci_vdfft( c_func, d0, f1, f2, t3 )
	SV* c_func
	double d0
	float f1
	float f2
	char * t3
PREINIT:
	void(*func)(double, float, float, char *);
CODE:
	func   = INT2PTR(void(*)(double, float, float, char *), SvIV(c_func) );
	(*func)(d0, f1, f2, t3);

double
nci_ddfft( c_func, d0, f1, f2, t3 )
	SV* c_func
	double d0
	float f1
	float f2
	char * t3
PREINIT:
	double(*func)(double, float, float, char *);
CODE:
	func   = INT2PTR(double(*)(double, float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2, t3);
OUTPUT:
	RETVAL

short
nci_sdfft( c_func, d0, f1, f2, t3 )
	SV* c_func
	double d0
	float f1
	float f2
	char * t3
PREINIT:
	short(*func)(double, float, float, char *);
CODE:
	func   = INT2PTR(short(*)(double, float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2, t3);
OUTPUT:
	RETVAL

float
nci_fdfft( c_func, d0, f1, f2, t3 )
	SV* c_func
	double d0
	float f1
	float f2
	char * t3
PREINIT:
	float(*func)(double, float, float, char *);
CODE:
	func   = INT2PTR(float(*)(double, float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2, t3);
OUTPUT:
	RETVAL

char *
nci_tdfft( c_func, d0, f1, f2, t3 )
	SV* c_func
	double d0
	float f1
	float f2
	char * t3
PREINIT:
	char *(*func)(double, float, float, char *);
CODE:
	func   = INT2PTR(char *(*)(double, float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2, t3);
OUTPUT:
	RETVAL

int
nci_idfft( c_func, d0, f1, f2, t3 )
	SV* c_func
	double d0
	float f1
	float f2
	char * t3
PREINIT:
	int(*func)(double, float, float, char *);
CODE:
	func   = INT2PTR(int(*)(double, float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2, t3);
OUTPUT:
	RETVAL

void *
nci_psfft( c_func, s0, f1, f2, t3 )
	SV* c_func
	short s0
	float f1
	float f2
	char * t3
PREINIT:
	void *(*func)(short, float, float, char *);
CODE:
	func   = INT2PTR(void *(*)(short, float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2, t3);
OUTPUT:
	RETVAL

void
nci_vsfft( c_func, s0, f1, f2, t3 )
	SV* c_func
	short s0
	float f1
	float f2
	char * t3
PREINIT:
	void(*func)(short, float, float, char *);
CODE:
	func   = INT2PTR(void(*)(short, float, float, char *), SvIV(c_func) );
	(*func)(s0, f1, f2, t3);

double
nci_dsfft( c_func, s0, f1, f2, t3 )
	SV* c_func
	short s0
	float f1
	float f2
	char * t3
PREINIT:
	double(*func)(short, float, float, char *);
CODE:
	func   = INT2PTR(double(*)(short, float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2, t3);
OUTPUT:
	RETVAL

short
nci_ssfft( c_func, s0, f1, f2, t3 )
	SV* c_func
	short s0
	float f1
	float f2
	char * t3
PREINIT:
	short(*func)(short, float, float, char *);
CODE:
	func   = INT2PTR(short(*)(short, float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2, t3);
OUTPUT:
	RETVAL

float
nci_fsfft( c_func, s0, f1, f2, t3 )
	SV* c_func
	short s0
	float f1
	float f2
	char * t3
PREINIT:
	float(*func)(short, float, float, char *);
CODE:
	func   = INT2PTR(float(*)(short, float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2, t3);
OUTPUT:
	RETVAL

char *
nci_tsfft( c_func, s0, f1, f2, t3 )
	SV* c_func
	short s0
	float f1
	float f2
	char * t3
PREINIT:
	char *(*func)(short, float, float, char *);
CODE:
	func   = INT2PTR(char *(*)(short, float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2, t3);
OUTPUT:
	RETVAL

int
nci_isfft( c_func, s0, f1, f2, t3 )
	SV* c_func
	short s0
	float f1
	float f2
	char * t3
PREINIT:
	int(*func)(short, float, float, char *);
CODE:
	func   = INT2PTR(int(*)(short, float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2, t3);
OUTPUT:
	RETVAL

void *
nci_pffft( c_func, f0, f1, f2, t3 )
	SV* c_func
	float f0
	float f1
	float f2
	char * t3
PREINIT:
	void *(*func)(float, float, float, char *);
CODE:
	func   = INT2PTR(void *(*)(float, float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2, t3);
OUTPUT:
	RETVAL

void
nci_vffft( c_func, f0, f1, f2, t3 )
	SV* c_func
	float f0
	float f1
	float f2
	char * t3
PREINIT:
	void(*func)(float, float, float, char *);
CODE:
	func   = INT2PTR(void(*)(float, float, float, char *), SvIV(c_func) );
	(*func)(f0, f1, f2, t3);

double
nci_dffft( c_func, f0, f1, f2, t3 )
	SV* c_func
	float f0
	float f1
	float f2
	char * t3
PREINIT:
	double(*func)(float, float, float, char *);
CODE:
	func   = INT2PTR(double(*)(float, float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2, t3);
OUTPUT:
	RETVAL

short
nci_sffft( c_func, f0, f1, f2, t3 )
	SV* c_func
	float f0
	float f1
	float f2
	char * t3
PREINIT:
	short(*func)(float, float, float, char *);
CODE:
	func   = INT2PTR(short(*)(float, float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2, t3);
OUTPUT:
	RETVAL

float
nci_fffft( c_func, f0, f1, f2, t3 )
	SV* c_func
	float f0
	float f1
	float f2
	char * t3
PREINIT:
	float(*func)(float, float, float, char *);
CODE:
	func   = INT2PTR(float(*)(float, float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2, t3);
OUTPUT:
	RETVAL

char *
nci_tffft( c_func, f0, f1, f2, t3 )
	SV* c_func
	float f0
	float f1
	float f2
	char * t3
PREINIT:
	char *(*func)(float, float, float, char *);
CODE:
	func   = INT2PTR(char *(*)(float, float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2, t3);
OUTPUT:
	RETVAL

int
nci_iffft( c_func, f0, f1, f2, t3 )
	SV* c_func
	float f0
	float f1
	float f2
	char * t3
PREINIT:
	int(*func)(float, float, float, char *);
CODE:
	func   = INT2PTR(int(*)(float, float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2, t3);
OUTPUT:
	RETVAL

void *
nci_ptfft( c_func, t0, f1, f2, t3 )
	SV* c_func
	char * t0
	float f1
	float f2
	char * t3
PREINIT:
	void *(*func)(char *, float, float, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2, t3);
OUTPUT:
	RETVAL

void
nci_vtfft( c_func, t0, f1, f2, t3 )
	SV* c_func
	char * t0
	float f1
	float f2
	char * t3
PREINIT:
	void(*func)(char *, float, float, char *);
CODE:
	func   = INT2PTR(void(*)(char *, float, float, char *), SvIV(c_func) );
	(*func)(t0, f1, f2, t3);

double
nci_dtfft( c_func, t0, f1, f2, t3 )
	SV* c_func
	char * t0
	float f1
	float f2
	char * t3
PREINIT:
	double(*func)(char *, float, float, char *);
CODE:
	func   = INT2PTR(double(*)(char *, float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2, t3);
OUTPUT:
	RETVAL

short
nci_stfft( c_func, t0, f1, f2, t3 )
	SV* c_func
	char * t0
	float f1
	float f2
	char * t3
PREINIT:
	short(*func)(char *, float, float, char *);
CODE:
	func   = INT2PTR(short(*)(char *, float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2, t3);
OUTPUT:
	RETVAL

float
nci_ftfft( c_func, t0, f1, f2, t3 )
	SV* c_func
	char * t0
	float f1
	float f2
	char * t3
PREINIT:
	float(*func)(char *, float, float, char *);
CODE:
	func   = INT2PTR(float(*)(char *, float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2, t3);
OUTPUT:
	RETVAL

char *
nci_ttfft( c_func, t0, f1, f2, t3 )
	SV* c_func
	char * t0
	float f1
	float f2
	char * t3
PREINIT:
	char *(*func)(char *, float, float, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2, t3);
OUTPUT:
	RETVAL

int
nci_itfft( c_func, t0, f1, f2, t3 )
	SV* c_func
	char * t0
	float f1
	float f2
	char * t3
PREINIT:
	int(*func)(char *, float, float, char *);
CODE:
	func   = INT2PTR(int(*)(char *, float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2, t3);
OUTPUT:
	RETVAL

void *
nci_pifft( c_func, i0, f1, f2, t3 )
	SV* c_func
	int i0
	float f1
	float f2
	char * t3
PREINIT:
	void *(*func)(int, float, float, char *);
CODE:
	func   = INT2PTR(void *(*)(int, float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2, t3);
OUTPUT:
	RETVAL

void
nci_vifft( c_func, i0, f1, f2, t3 )
	SV* c_func
	int i0
	float f1
	float f2
	char * t3
PREINIT:
	void(*func)(int, float, float, char *);
CODE:
	func   = INT2PTR(void(*)(int, float, float, char *), SvIV(c_func) );
	(*func)(i0, f1, f2, t3);

double
nci_difft( c_func, i0, f1, f2, t3 )
	SV* c_func
	int i0
	float f1
	float f2
	char * t3
PREINIT:
	double(*func)(int, float, float, char *);
CODE:
	func   = INT2PTR(double(*)(int, float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2, t3);
OUTPUT:
	RETVAL

short
nci_sifft( c_func, i0, f1, f2, t3 )
	SV* c_func
	int i0
	float f1
	float f2
	char * t3
PREINIT:
	short(*func)(int, float, float, char *);
CODE:
	func   = INT2PTR(short(*)(int, float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2, t3);
OUTPUT:
	RETVAL

float
nci_fifft( c_func, i0, f1, f2, t3 )
	SV* c_func
	int i0
	float f1
	float f2
	char * t3
PREINIT:
	float(*func)(int, float, float, char *);
CODE:
	func   = INT2PTR(float(*)(int, float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2, t3);
OUTPUT:
	RETVAL

char *
nci_tifft( c_func, i0, f1, f2, t3 )
	SV* c_func
	int i0
	float f1
	float f2
	char * t3
PREINIT:
	char *(*func)(int, float, float, char *);
CODE:
	func   = INT2PTR(char *(*)(int, float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2, t3);
OUTPUT:
	RETVAL

int
nci_iifft( c_func, i0, f1, f2, t3 )
	SV* c_func
	int i0
	float f1
	float f2
	char * t3
PREINIT:
	int(*func)(int, float, float, char *);
CODE:
	func   = INT2PTR(int(*)(int, float, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2, t3);
OUTPUT:
	RETVAL

void *
nci_pptft( c_func, p0, t1, f2, t3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	char * t3
PREINIT:
	void *(*func)(void *, char *, float, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2, t3);
OUTPUT:
	RETVAL

void
nci_vptft( c_func, p0, t1, f2, t3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	char * t3
PREINIT:
	void(*func)(void *, char *, float, char *);
CODE:
	func   = INT2PTR(void(*)(void *, char *, float, char *), SvIV(c_func) );
	(*func)(p0, t1, f2, t3);

double
nci_dptft( c_func, p0, t1, f2, t3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	char * t3
PREINIT:
	double(*func)(void *, char *, float, char *);
CODE:
	func   = INT2PTR(double(*)(void *, char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2, t3);
OUTPUT:
	RETVAL

short
nci_sptft( c_func, p0, t1, f2, t3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	char * t3
PREINIT:
	short(*func)(void *, char *, float, char *);
CODE:
	func   = INT2PTR(short(*)(void *, char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2, t3);
OUTPUT:
	RETVAL

float
nci_fptft( c_func, p0, t1, f2, t3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	char * t3
PREINIT:
	float(*func)(void *, char *, float, char *);
CODE:
	func   = INT2PTR(float(*)(void *, char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2, t3);
OUTPUT:
	RETVAL

char *
nci_tptft( c_func, p0, t1, f2, t3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	char * t3
PREINIT:
	char *(*func)(void *, char *, float, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2, t3);
OUTPUT:
	RETVAL

int
nci_iptft( c_func, p0, t1, f2, t3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	char * t3
PREINIT:
	int(*func)(void *, char *, float, char *);
CODE:
	func   = INT2PTR(int(*)(void *, char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2, t3);
OUTPUT:
	RETVAL

void *
nci_pvtft( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvtft( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvtft( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svtft( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvtft( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvtft( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivtft( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdtft( c_func, d0, t1, f2, t3 )
	SV* c_func
	double d0
	char * t1
	float f2
	char * t3
PREINIT:
	void *(*func)(double, char *, float, char *);
CODE:
	func   = INT2PTR(void *(*)(double, char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2, t3);
OUTPUT:
	RETVAL

void
nci_vdtft( c_func, d0, t1, f2, t3 )
	SV* c_func
	double d0
	char * t1
	float f2
	char * t3
PREINIT:
	void(*func)(double, char *, float, char *);
CODE:
	func   = INT2PTR(void(*)(double, char *, float, char *), SvIV(c_func) );
	(*func)(d0, t1, f2, t3);

double
nci_ddtft( c_func, d0, t1, f2, t3 )
	SV* c_func
	double d0
	char * t1
	float f2
	char * t3
PREINIT:
	double(*func)(double, char *, float, char *);
CODE:
	func   = INT2PTR(double(*)(double, char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2, t3);
OUTPUT:
	RETVAL

short
nci_sdtft( c_func, d0, t1, f2, t3 )
	SV* c_func
	double d0
	char * t1
	float f2
	char * t3
PREINIT:
	short(*func)(double, char *, float, char *);
CODE:
	func   = INT2PTR(short(*)(double, char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2, t3);
OUTPUT:
	RETVAL

float
nci_fdtft( c_func, d0, t1, f2, t3 )
	SV* c_func
	double d0
	char * t1
	float f2
	char * t3
PREINIT:
	float(*func)(double, char *, float, char *);
CODE:
	func   = INT2PTR(float(*)(double, char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2, t3);
OUTPUT:
	RETVAL

char *
nci_tdtft( c_func, d0, t1, f2, t3 )
	SV* c_func
	double d0
	char * t1
	float f2
	char * t3
PREINIT:
	char *(*func)(double, char *, float, char *);
CODE:
	func   = INT2PTR(char *(*)(double, char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2, t3);
OUTPUT:
	RETVAL

int
nci_idtft( c_func, d0, t1, f2, t3 )
	SV* c_func
	double d0
	char * t1
	float f2
	char * t3
PREINIT:
	int(*func)(double, char *, float, char *);
CODE:
	func   = INT2PTR(int(*)(double, char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2, t3);
OUTPUT:
	RETVAL

void *
nci_pstft( c_func, s0, t1, f2, t3 )
	SV* c_func
	short s0
	char * t1
	float f2
	char * t3
PREINIT:
	void *(*func)(short, char *, float, char *);
CODE:
	func   = INT2PTR(void *(*)(short, char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2, t3);
OUTPUT:
	RETVAL

void
nci_vstft( c_func, s0, t1, f2, t3 )
	SV* c_func
	short s0
	char * t1
	float f2
	char * t3
PREINIT:
	void(*func)(short, char *, float, char *);
CODE:
	func   = INT2PTR(void(*)(short, char *, float, char *), SvIV(c_func) );
	(*func)(s0, t1, f2, t3);

double
nci_dstft( c_func, s0, t1, f2, t3 )
	SV* c_func
	short s0
	char * t1
	float f2
	char * t3
PREINIT:
	double(*func)(short, char *, float, char *);
CODE:
	func   = INT2PTR(double(*)(short, char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2, t3);
OUTPUT:
	RETVAL

short
nci_sstft( c_func, s0, t1, f2, t3 )
	SV* c_func
	short s0
	char * t1
	float f2
	char * t3
PREINIT:
	short(*func)(short, char *, float, char *);
CODE:
	func   = INT2PTR(short(*)(short, char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2, t3);
OUTPUT:
	RETVAL

float
nci_fstft( c_func, s0, t1, f2, t3 )
	SV* c_func
	short s0
	char * t1
	float f2
	char * t3
PREINIT:
	float(*func)(short, char *, float, char *);
CODE:
	func   = INT2PTR(float(*)(short, char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2, t3);
OUTPUT:
	RETVAL

char *
nci_tstft( c_func, s0, t1, f2, t3 )
	SV* c_func
	short s0
	char * t1
	float f2
	char * t3
PREINIT:
	char *(*func)(short, char *, float, char *);
CODE:
	func   = INT2PTR(char *(*)(short, char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2, t3);
OUTPUT:
	RETVAL

int
nci_istft( c_func, s0, t1, f2, t3 )
	SV* c_func
	short s0
	char * t1
	float f2
	char * t3
PREINIT:
	int(*func)(short, char *, float, char *);
CODE:
	func   = INT2PTR(int(*)(short, char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2, t3);
OUTPUT:
	RETVAL

void *
nci_pftft( c_func, f0, t1, f2, t3 )
	SV* c_func
	float f0
	char * t1
	float f2
	char * t3
PREINIT:
	void *(*func)(float, char *, float, char *);
CODE:
	func   = INT2PTR(void *(*)(float, char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2, t3);
OUTPUT:
	RETVAL

void
nci_vftft( c_func, f0, t1, f2, t3 )
	SV* c_func
	float f0
	char * t1
	float f2
	char * t3
PREINIT:
	void(*func)(float, char *, float, char *);
CODE:
	func   = INT2PTR(void(*)(float, char *, float, char *), SvIV(c_func) );
	(*func)(f0, t1, f2, t3);

double
nci_dftft( c_func, f0, t1, f2, t3 )
	SV* c_func
	float f0
	char * t1
	float f2
	char * t3
PREINIT:
	double(*func)(float, char *, float, char *);
CODE:
	func   = INT2PTR(double(*)(float, char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2, t3);
OUTPUT:
	RETVAL

short
nci_sftft( c_func, f0, t1, f2, t3 )
	SV* c_func
	float f0
	char * t1
	float f2
	char * t3
PREINIT:
	short(*func)(float, char *, float, char *);
CODE:
	func   = INT2PTR(short(*)(float, char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2, t3);
OUTPUT:
	RETVAL

float
nci_fftft( c_func, f0, t1, f2, t3 )
	SV* c_func
	float f0
	char * t1
	float f2
	char * t3
PREINIT:
	float(*func)(float, char *, float, char *);
CODE:
	func   = INT2PTR(float(*)(float, char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2, t3);
OUTPUT:
	RETVAL

char *
nci_tftft( c_func, f0, t1, f2, t3 )
	SV* c_func
	float f0
	char * t1
	float f2
	char * t3
PREINIT:
	char *(*func)(float, char *, float, char *);
CODE:
	func   = INT2PTR(char *(*)(float, char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2, t3);
OUTPUT:
	RETVAL

int
nci_iftft( c_func, f0, t1, f2, t3 )
	SV* c_func
	float f0
	char * t1
	float f2
	char * t3
PREINIT:
	int(*func)(float, char *, float, char *);
CODE:
	func   = INT2PTR(int(*)(float, char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2, t3);
OUTPUT:
	RETVAL

void *
nci_pttft( c_func, t0, t1, f2, t3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	char * t3
PREINIT:
	void *(*func)(char *, char *, float, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2, t3);
OUTPUT:
	RETVAL

void
nci_vttft( c_func, t0, t1, f2, t3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	char * t3
PREINIT:
	void(*func)(char *, char *, float, char *);
CODE:
	func   = INT2PTR(void(*)(char *, char *, float, char *), SvIV(c_func) );
	(*func)(t0, t1, f2, t3);

double
nci_dttft( c_func, t0, t1, f2, t3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	char * t3
PREINIT:
	double(*func)(char *, char *, float, char *);
CODE:
	func   = INT2PTR(double(*)(char *, char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2, t3);
OUTPUT:
	RETVAL

short
nci_sttft( c_func, t0, t1, f2, t3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	char * t3
PREINIT:
	short(*func)(char *, char *, float, char *);
CODE:
	func   = INT2PTR(short(*)(char *, char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2, t3);
OUTPUT:
	RETVAL

float
nci_fttft( c_func, t0, t1, f2, t3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	char * t3
PREINIT:
	float(*func)(char *, char *, float, char *);
CODE:
	func   = INT2PTR(float(*)(char *, char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2, t3);
OUTPUT:
	RETVAL

char *
nci_tttft( c_func, t0, t1, f2, t3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	char * t3
PREINIT:
	char *(*func)(char *, char *, float, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2, t3);
OUTPUT:
	RETVAL

int
nci_ittft( c_func, t0, t1, f2, t3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	char * t3
PREINIT:
	int(*func)(char *, char *, float, char *);
CODE:
	func   = INT2PTR(int(*)(char *, char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2, t3);
OUTPUT:
	RETVAL

void *
nci_pitft( c_func, i0, t1, f2, t3 )
	SV* c_func
	int i0
	char * t1
	float f2
	char * t3
PREINIT:
	void *(*func)(int, char *, float, char *);
CODE:
	func   = INT2PTR(void *(*)(int, char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2, t3);
OUTPUT:
	RETVAL

void
nci_vitft( c_func, i0, t1, f2, t3 )
	SV* c_func
	int i0
	char * t1
	float f2
	char * t3
PREINIT:
	void(*func)(int, char *, float, char *);
CODE:
	func   = INT2PTR(void(*)(int, char *, float, char *), SvIV(c_func) );
	(*func)(i0, t1, f2, t3);

double
nci_ditft( c_func, i0, t1, f2, t3 )
	SV* c_func
	int i0
	char * t1
	float f2
	char * t3
PREINIT:
	double(*func)(int, char *, float, char *);
CODE:
	func   = INT2PTR(double(*)(int, char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2, t3);
OUTPUT:
	RETVAL

short
nci_sitft( c_func, i0, t1, f2, t3 )
	SV* c_func
	int i0
	char * t1
	float f2
	char * t3
PREINIT:
	short(*func)(int, char *, float, char *);
CODE:
	func   = INT2PTR(short(*)(int, char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2, t3);
OUTPUT:
	RETVAL

float
nci_fitft( c_func, i0, t1, f2, t3 )
	SV* c_func
	int i0
	char * t1
	float f2
	char * t3
PREINIT:
	float(*func)(int, char *, float, char *);
CODE:
	func   = INT2PTR(float(*)(int, char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2, t3);
OUTPUT:
	RETVAL

char *
nci_titft( c_func, i0, t1, f2, t3 )
	SV* c_func
	int i0
	char * t1
	float f2
	char * t3
PREINIT:
	char *(*func)(int, char *, float, char *);
CODE:
	func   = INT2PTR(char *(*)(int, char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2, t3);
OUTPUT:
	RETVAL

int
nci_iitft( c_func, i0, t1, f2, t3 )
	SV* c_func
	int i0
	char * t1
	float f2
	char * t3
PREINIT:
	int(*func)(int, char *, float, char *);
CODE:
	func   = INT2PTR(int(*)(int, char *, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2, t3);
OUTPUT:
	RETVAL

void *
nci_ppift( c_func, p0, i1, f2, t3 )
	SV* c_func
	void * p0
	int i1
	float f2
	char * t3
PREINIT:
	void *(*func)(void *, int, float, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2, t3);
OUTPUT:
	RETVAL

void
nci_vpift( c_func, p0, i1, f2, t3 )
	SV* c_func
	void * p0
	int i1
	float f2
	char * t3
PREINIT:
	void(*func)(void *, int, float, char *);
CODE:
	func   = INT2PTR(void(*)(void *, int, float, char *), SvIV(c_func) );
	(*func)(p0, i1, f2, t3);

double
nci_dpift( c_func, p0, i1, f2, t3 )
	SV* c_func
	void * p0
	int i1
	float f2
	char * t3
PREINIT:
	double(*func)(void *, int, float, char *);
CODE:
	func   = INT2PTR(double(*)(void *, int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2, t3);
OUTPUT:
	RETVAL

short
nci_spift( c_func, p0, i1, f2, t3 )
	SV* c_func
	void * p0
	int i1
	float f2
	char * t3
PREINIT:
	short(*func)(void *, int, float, char *);
CODE:
	func   = INT2PTR(short(*)(void *, int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2, t3);
OUTPUT:
	RETVAL

float
nci_fpift( c_func, p0, i1, f2, t3 )
	SV* c_func
	void * p0
	int i1
	float f2
	char * t3
PREINIT:
	float(*func)(void *, int, float, char *);
CODE:
	func   = INT2PTR(float(*)(void *, int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2, t3);
OUTPUT:
	RETVAL

char *
nci_tpift( c_func, p0, i1, f2, t3 )
	SV* c_func
	void * p0
	int i1
	float f2
	char * t3
PREINIT:
	char *(*func)(void *, int, float, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2, t3);
OUTPUT:
	RETVAL

int
nci_ipift( c_func, p0, i1, f2, t3 )
	SV* c_func
	void * p0
	int i1
	float f2
	char * t3
PREINIT:
	int(*func)(void *, int, float, char *);
CODE:
	func   = INT2PTR(int(*)(void *, int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2, t3);
OUTPUT:
	RETVAL

void *
nci_pvift( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvift( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvift( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svift( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvift( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvift( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivift( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdift( c_func, d0, i1, f2, t3 )
	SV* c_func
	double d0
	int i1
	float f2
	char * t3
PREINIT:
	void *(*func)(double, int, float, char *);
CODE:
	func   = INT2PTR(void *(*)(double, int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2, t3);
OUTPUT:
	RETVAL

void
nci_vdift( c_func, d0, i1, f2, t3 )
	SV* c_func
	double d0
	int i1
	float f2
	char * t3
PREINIT:
	void(*func)(double, int, float, char *);
CODE:
	func   = INT2PTR(void(*)(double, int, float, char *), SvIV(c_func) );
	(*func)(d0, i1, f2, t3);

double
nci_ddift( c_func, d0, i1, f2, t3 )
	SV* c_func
	double d0
	int i1
	float f2
	char * t3
PREINIT:
	double(*func)(double, int, float, char *);
CODE:
	func   = INT2PTR(double(*)(double, int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2, t3);
OUTPUT:
	RETVAL

short
nci_sdift( c_func, d0, i1, f2, t3 )
	SV* c_func
	double d0
	int i1
	float f2
	char * t3
PREINIT:
	short(*func)(double, int, float, char *);
CODE:
	func   = INT2PTR(short(*)(double, int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2, t3);
OUTPUT:
	RETVAL

float
nci_fdift( c_func, d0, i1, f2, t3 )
	SV* c_func
	double d0
	int i1
	float f2
	char * t3
PREINIT:
	float(*func)(double, int, float, char *);
CODE:
	func   = INT2PTR(float(*)(double, int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2, t3);
OUTPUT:
	RETVAL

char *
nci_tdift( c_func, d0, i1, f2, t3 )
	SV* c_func
	double d0
	int i1
	float f2
	char * t3
PREINIT:
	char *(*func)(double, int, float, char *);
CODE:
	func   = INT2PTR(char *(*)(double, int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2, t3);
OUTPUT:
	RETVAL

int
nci_idift( c_func, d0, i1, f2, t3 )
	SV* c_func
	double d0
	int i1
	float f2
	char * t3
PREINIT:
	int(*func)(double, int, float, char *);
CODE:
	func   = INT2PTR(int(*)(double, int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2, t3);
OUTPUT:
	RETVAL

void *
nci_psift( c_func, s0, i1, f2, t3 )
	SV* c_func
	short s0
	int i1
	float f2
	char * t3
PREINIT:
	void *(*func)(short, int, float, char *);
CODE:
	func   = INT2PTR(void *(*)(short, int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2, t3);
OUTPUT:
	RETVAL

void
nci_vsift( c_func, s0, i1, f2, t3 )
	SV* c_func
	short s0
	int i1
	float f2
	char * t3
PREINIT:
	void(*func)(short, int, float, char *);
CODE:
	func   = INT2PTR(void(*)(short, int, float, char *), SvIV(c_func) );
	(*func)(s0, i1, f2, t3);

double
nci_dsift( c_func, s0, i1, f2, t3 )
	SV* c_func
	short s0
	int i1
	float f2
	char * t3
PREINIT:
	double(*func)(short, int, float, char *);
CODE:
	func   = INT2PTR(double(*)(short, int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2, t3);
OUTPUT:
	RETVAL

short
nci_ssift( c_func, s0, i1, f2, t3 )
	SV* c_func
	short s0
	int i1
	float f2
	char * t3
PREINIT:
	short(*func)(short, int, float, char *);
CODE:
	func   = INT2PTR(short(*)(short, int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2, t3);
OUTPUT:
	RETVAL

float
nci_fsift( c_func, s0, i1, f2, t3 )
	SV* c_func
	short s0
	int i1
	float f2
	char * t3
PREINIT:
	float(*func)(short, int, float, char *);
CODE:
	func   = INT2PTR(float(*)(short, int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2, t3);
OUTPUT:
	RETVAL

char *
nci_tsift( c_func, s0, i1, f2, t3 )
	SV* c_func
	short s0
	int i1
	float f2
	char * t3
PREINIT:
	char *(*func)(short, int, float, char *);
CODE:
	func   = INT2PTR(char *(*)(short, int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2, t3);
OUTPUT:
	RETVAL

int
nci_isift( c_func, s0, i1, f2, t3 )
	SV* c_func
	short s0
	int i1
	float f2
	char * t3
PREINIT:
	int(*func)(short, int, float, char *);
CODE:
	func   = INT2PTR(int(*)(short, int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2, t3);
OUTPUT:
	RETVAL

void *
nci_pfift( c_func, f0, i1, f2, t3 )
	SV* c_func
	float f0
	int i1
	float f2
	char * t3
PREINIT:
	void *(*func)(float, int, float, char *);
CODE:
	func   = INT2PTR(void *(*)(float, int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2, t3);
OUTPUT:
	RETVAL

void
nci_vfift( c_func, f0, i1, f2, t3 )
	SV* c_func
	float f0
	int i1
	float f2
	char * t3
PREINIT:
	void(*func)(float, int, float, char *);
CODE:
	func   = INT2PTR(void(*)(float, int, float, char *), SvIV(c_func) );
	(*func)(f0, i1, f2, t3);

double
nci_dfift( c_func, f0, i1, f2, t3 )
	SV* c_func
	float f0
	int i1
	float f2
	char * t3
PREINIT:
	double(*func)(float, int, float, char *);
CODE:
	func   = INT2PTR(double(*)(float, int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2, t3);
OUTPUT:
	RETVAL

short
nci_sfift( c_func, f0, i1, f2, t3 )
	SV* c_func
	float f0
	int i1
	float f2
	char * t3
PREINIT:
	short(*func)(float, int, float, char *);
CODE:
	func   = INT2PTR(short(*)(float, int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2, t3);
OUTPUT:
	RETVAL

float
nci_ffift( c_func, f0, i1, f2, t3 )
	SV* c_func
	float f0
	int i1
	float f2
	char * t3
PREINIT:
	float(*func)(float, int, float, char *);
CODE:
	func   = INT2PTR(float(*)(float, int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2, t3);
OUTPUT:
	RETVAL

char *
nci_tfift( c_func, f0, i1, f2, t3 )
	SV* c_func
	float f0
	int i1
	float f2
	char * t3
PREINIT:
	char *(*func)(float, int, float, char *);
CODE:
	func   = INT2PTR(char *(*)(float, int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2, t3);
OUTPUT:
	RETVAL

int
nci_ifift( c_func, f0, i1, f2, t3 )
	SV* c_func
	float f0
	int i1
	float f2
	char * t3
PREINIT:
	int(*func)(float, int, float, char *);
CODE:
	func   = INT2PTR(int(*)(float, int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2, t3);
OUTPUT:
	RETVAL

void *
nci_ptift( c_func, t0, i1, f2, t3 )
	SV* c_func
	char * t0
	int i1
	float f2
	char * t3
PREINIT:
	void *(*func)(char *, int, float, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2, t3);
OUTPUT:
	RETVAL

void
nci_vtift( c_func, t0, i1, f2, t3 )
	SV* c_func
	char * t0
	int i1
	float f2
	char * t3
PREINIT:
	void(*func)(char *, int, float, char *);
CODE:
	func   = INT2PTR(void(*)(char *, int, float, char *), SvIV(c_func) );
	(*func)(t0, i1, f2, t3);

double
nci_dtift( c_func, t0, i1, f2, t3 )
	SV* c_func
	char * t0
	int i1
	float f2
	char * t3
PREINIT:
	double(*func)(char *, int, float, char *);
CODE:
	func   = INT2PTR(double(*)(char *, int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2, t3);
OUTPUT:
	RETVAL

short
nci_stift( c_func, t0, i1, f2, t3 )
	SV* c_func
	char * t0
	int i1
	float f2
	char * t3
PREINIT:
	short(*func)(char *, int, float, char *);
CODE:
	func   = INT2PTR(short(*)(char *, int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2, t3);
OUTPUT:
	RETVAL

float
nci_ftift( c_func, t0, i1, f2, t3 )
	SV* c_func
	char * t0
	int i1
	float f2
	char * t3
PREINIT:
	float(*func)(char *, int, float, char *);
CODE:
	func   = INT2PTR(float(*)(char *, int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2, t3);
OUTPUT:
	RETVAL

char *
nci_ttift( c_func, t0, i1, f2, t3 )
	SV* c_func
	char * t0
	int i1
	float f2
	char * t3
PREINIT:
	char *(*func)(char *, int, float, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2, t3);
OUTPUT:
	RETVAL

int
nci_itift( c_func, t0, i1, f2, t3 )
	SV* c_func
	char * t0
	int i1
	float f2
	char * t3
PREINIT:
	int(*func)(char *, int, float, char *);
CODE:
	func   = INT2PTR(int(*)(char *, int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2, t3);
OUTPUT:
	RETVAL

void *
nci_piift( c_func, i0, i1, f2, t3 )
	SV* c_func
	int i0
	int i1
	float f2
	char * t3
PREINIT:
	void *(*func)(int, int, float, char *);
CODE:
	func   = INT2PTR(void *(*)(int, int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2, t3);
OUTPUT:
	RETVAL

void
nci_viift( c_func, i0, i1, f2, t3 )
	SV* c_func
	int i0
	int i1
	float f2
	char * t3
PREINIT:
	void(*func)(int, int, float, char *);
CODE:
	func   = INT2PTR(void(*)(int, int, float, char *), SvIV(c_func) );
	(*func)(i0, i1, f2, t3);

double
nci_diift( c_func, i0, i1, f2, t3 )
	SV* c_func
	int i0
	int i1
	float f2
	char * t3
PREINIT:
	double(*func)(int, int, float, char *);
CODE:
	func   = INT2PTR(double(*)(int, int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2, t3);
OUTPUT:
	RETVAL

short
nci_siift( c_func, i0, i1, f2, t3 )
	SV* c_func
	int i0
	int i1
	float f2
	char * t3
PREINIT:
	short(*func)(int, int, float, char *);
CODE:
	func   = INT2PTR(short(*)(int, int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2, t3);
OUTPUT:
	RETVAL

float
nci_fiift( c_func, i0, i1, f2, t3 )
	SV* c_func
	int i0
	int i1
	float f2
	char * t3
PREINIT:
	float(*func)(int, int, float, char *);
CODE:
	func   = INT2PTR(float(*)(int, int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2, t3);
OUTPUT:
	RETVAL

char *
nci_tiift( c_func, i0, i1, f2, t3 )
	SV* c_func
	int i0
	int i1
	float f2
	char * t3
PREINIT:
	char *(*func)(int, int, float, char *);
CODE:
	func   = INT2PTR(char *(*)(int, int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2, t3);
OUTPUT:
	RETVAL

int
nci_iiift( c_func, i0, i1, f2, t3 )
	SV* c_func
	int i0
	int i1
	float f2
	char * t3
PREINIT:
	int(*func)(int, int, float, char *);
CODE:
	func   = INT2PTR(int(*)(int, int, float, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2, t3);
OUTPUT:
	RETVAL

void *
nci_ppptt( c_func, p0, p1, t2, t3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	char * t3
PREINIT:
	void *(*func)(void *, void *, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2, t3);
OUTPUT:
	RETVAL

void
nci_vpptt( c_func, p0, p1, t2, t3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	char * t3
PREINIT:
	void(*func)(void *, void *, char *, char *);
CODE:
	func   = INT2PTR(void(*)(void *, void *, char *, char *), SvIV(c_func) );
	(*func)(p0, p1, t2, t3);

double
nci_dpptt( c_func, p0, p1, t2, t3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	char * t3
PREINIT:
	double(*func)(void *, void *, char *, char *);
CODE:
	func   = INT2PTR(double(*)(void *, void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2, t3);
OUTPUT:
	RETVAL

short
nci_spptt( c_func, p0, p1, t2, t3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	char * t3
PREINIT:
	short(*func)(void *, void *, char *, char *);
CODE:
	func   = INT2PTR(short(*)(void *, void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2, t3);
OUTPUT:
	RETVAL

float
nci_fpptt( c_func, p0, p1, t2, t3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	char * t3
PREINIT:
	float(*func)(void *, void *, char *, char *);
CODE:
	func   = INT2PTR(float(*)(void *, void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2, t3);
OUTPUT:
	RETVAL

char *
nci_tpptt( c_func, p0, p1, t2, t3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	char * t3
PREINIT:
	char *(*func)(void *, void *, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2, t3);
OUTPUT:
	RETVAL

int
nci_ipptt( c_func, p0, p1, t2, t3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	char * t3
PREINIT:
	int(*func)(void *, void *, char *, char *);
CODE:
	func   = INT2PTR(int(*)(void *, void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2, t3);
OUTPUT:
	RETVAL

void *
nci_pvptt( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvptt( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvptt( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svptt( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvptt( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvptt( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivptt( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdptt( c_func, d0, p1, t2, t3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	char * t3
PREINIT:
	void *(*func)(double, void *, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(double, void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2, t3);
OUTPUT:
	RETVAL

void
nci_vdptt( c_func, d0, p1, t2, t3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	char * t3
PREINIT:
	void(*func)(double, void *, char *, char *);
CODE:
	func   = INT2PTR(void(*)(double, void *, char *, char *), SvIV(c_func) );
	(*func)(d0, p1, t2, t3);

double
nci_ddptt( c_func, d0, p1, t2, t3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	char * t3
PREINIT:
	double(*func)(double, void *, char *, char *);
CODE:
	func   = INT2PTR(double(*)(double, void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2, t3);
OUTPUT:
	RETVAL

short
nci_sdptt( c_func, d0, p1, t2, t3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	char * t3
PREINIT:
	short(*func)(double, void *, char *, char *);
CODE:
	func   = INT2PTR(short(*)(double, void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2, t3);
OUTPUT:
	RETVAL

float
nci_fdptt( c_func, d0, p1, t2, t3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	char * t3
PREINIT:
	float(*func)(double, void *, char *, char *);
CODE:
	func   = INT2PTR(float(*)(double, void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2, t3);
OUTPUT:
	RETVAL

char *
nci_tdptt( c_func, d0, p1, t2, t3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	char * t3
PREINIT:
	char *(*func)(double, void *, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(double, void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2, t3);
OUTPUT:
	RETVAL

int
nci_idptt( c_func, d0, p1, t2, t3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	char * t3
PREINIT:
	int(*func)(double, void *, char *, char *);
CODE:
	func   = INT2PTR(int(*)(double, void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2, t3);
OUTPUT:
	RETVAL

void *
nci_psptt( c_func, s0, p1, t2, t3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	char * t3
PREINIT:
	void *(*func)(short, void *, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(short, void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2, t3);
OUTPUT:
	RETVAL

void
nci_vsptt( c_func, s0, p1, t2, t3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	char * t3
PREINIT:
	void(*func)(short, void *, char *, char *);
CODE:
	func   = INT2PTR(void(*)(short, void *, char *, char *), SvIV(c_func) );
	(*func)(s0, p1, t2, t3);

double
nci_dsptt( c_func, s0, p1, t2, t3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	char * t3
PREINIT:
	double(*func)(short, void *, char *, char *);
CODE:
	func   = INT2PTR(double(*)(short, void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2, t3);
OUTPUT:
	RETVAL

short
nci_ssptt( c_func, s0, p1, t2, t3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	char * t3
PREINIT:
	short(*func)(short, void *, char *, char *);
CODE:
	func   = INT2PTR(short(*)(short, void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2, t3);
OUTPUT:
	RETVAL

float
nci_fsptt( c_func, s0, p1, t2, t3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	char * t3
PREINIT:
	float(*func)(short, void *, char *, char *);
CODE:
	func   = INT2PTR(float(*)(short, void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2, t3);
OUTPUT:
	RETVAL

char *
nci_tsptt( c_func, s0, p1, t2, t3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	char * t3
PREINIT:
	char *(*func)(short, void *, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(short, void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2, t3);
OUTPUT:
	RETVAL

int
nci_isptt( c_func, s0, p1, t2, t3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	char * t3
PREINIT:
	int(*func)(short, void *, char *, char *);
CODE:
	func   = INT2PTR(int(*)(short, void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2, t3);
OUTPUT:
	RETVAL

void *
nci_pfptt( c_func, f0, p1, t2, t3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	char * t3
PREINIT:
	void *(*func)(float, void *, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(float, void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2, t3);
OUTPUT:
	RETVAL

void
nci_vfptt( c_func, f0, p1, t2, t3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	char * t3
PREINIT:
	void(*func)(float, void *, char *, char *);
CODE:
	func   = INT2PTR(void(*)(float, void *, char *, char *), SvIV(c_func) );
	(*func)(f0, p1, t2, t3);

double
nci_dfptt( c_func, f0, p1, t2, t3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	char * t3
PREINIT:
	double(*func)(float, void *, char *, char *);
CODE:
	func   = INT2PTR(double(*)(float, void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2, t3);
OUTPUT:
	RETVAL

short
nci_sfptt( c_func, f0, p1, t2, t3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	char * t3
PREINIT:
	short(*func)(float, void *, char *, char *);
CODE:
	func   = INT2PTR(short(*)(float, void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2, t3);
OUTPUT:
	RETVAL

float
nci_ffptt( c_func, f0, p1, t2, t3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	char * t3
PREINIT:
	float(*func)(float, void *, char *, char *);
CODE:
	func   = INT2PTR(float(*)(float, void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2, t3);
OUTPUT:
	RETVAL

char *
nci_tfptt( c_func, f0, p1, t2, t3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	char * t3
PREINIT:
	char *(*func)(float, void *, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(float, void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2, t3);
OUTPUT:
	RETVAL

int
nci_ifptt( c_func, f0, p1, t2, t3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	char * t3
PREINIT:
	int(*func)(float, void *, char *, char *);
CODE:
	func   = INT2PTR(int(*)(float, void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2, t3);
OUTPUT:
	RETVAL

void *
nci_ptptt( c_func, t0, p1, t2, t3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	char * t3
PREINIT:
	void *(*func)(char *, void *, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2, t3);
OUTPUT:
	RETVAL

void
nci_vtptt( c_func, t0, p1, t2, t3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	char * t3
PREINIT:
	void(*func)(char *, void *, char *, char *);
CODE:
	func   = INT2PTR(void(*)(char *, void *, char *, char *), SvIV(c_func) );
	(*func)(t0, p1, t2, t3);

double
nci_dtptt( c_func, t0, p1, t2, t3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	char * t3
PREINIT:
	double(*func)(char *, void *, char *, char *);
CODE:
	func   = INT2PTR(double(*)(char *, void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2, t3);
OUTPUT:
	RETVAL

short
nci_stptt( c_func, t0, p1, t2, t3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	char * t3
PREINIT:
	short(*func)(char *, void *, char *, char *);
CODE:
	func   = INT2PTR(short(*)(char *, void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2, t3);
OUTPUT:
	RETVAL

float
nci_ftptt( c_func, t0, p1, t2, t3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	char * t3
PREINIT:
	float(*func)(char *, void *, char *, char *);
CODE:
	func   = INT2PTR(float(*)(char *, void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2, t3);
OUTPUT:
	RETVAL

char *
nci_ttptt( c_func, t0, p1, t2, t3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	char * t3
PREINIT:
	char *(*func)(char *, void *, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2, t3);
OUTPUT:
	RETVAL

int
nci_itptt( c_func, t0, p1, t2, t3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	char * t3
PREINIT:
	int(*func)(char *, void *, char *, char *);
CODE:
	func   = INT2PTR(int(*)(char *, void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2, t3);
OUTPUT:
	RETVAL

void *
nci_piptt( c_func, i0, p1, t2, t3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	char * t3
PREINIT:
	void *(*func)(int, void *, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(int, void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2, t3);
OUTPUT:
	RETVAL

void
nci_viptt( c_func, i0, p1, t2, t3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	char * t3
PREINIT:
	void(*func)(int, void *, char *, char *);
CODE:
	func   = INT2PTR(void(*)(int, void *, char *, char *), SvIV(c_func) );
	(*func)(i0, p1, t2, t3);

double
nci_diptt( c_func, i0, p1, t2, t3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	char * t3
PREINIT:
	double(*func)(int, void *, char *, char *);
CODE:
	func   = INT2PTR(double(*)(int, void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2, t3);
OUTPUT:
	RETVAL

short
nci_siptt( c_func, i0, p1, t2, t3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	char * t3
PREINIT:
	short(*func)(int, void *, char *, char *);
CODE:
	func   = INT2PTR(short(*)(int, void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2, t3);
OUTPUT:
	RETVAL

float
nci_fiptt( c_func, i0, p1, t2, t3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	char * t3
PREINIT:
	float(*func)(int, void *, char *, char *);
CODE:
	func   = INT2PTR(float(*)(int, void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2, t3);
OUTPUT:
	RETVAL

char *
nci_tiptt( c_func, i0, p1, t2, t3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	char * t3
PREINIT:
	char *(*func)(int, void *, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(int, void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2, t3);
OUTPUT:
	RETVAL

int
nci_iiptt( c_func, i0, p1, t2, t3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	char * t3
PREINIT:
	int(*func)(int, void *, char *, char *);
CODE:
	func   = INT2PTR(int(*)(int, void *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2, t3);
OUTPUT:
	RETVAL

void *
nci_ppdtt( c_func, p0, d1, t2, t3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	char * t3
PREINIT:
	void *(*func)(void *, double, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2, t3);
OUTPUT:
	RETVAL

void
nci_vpdtt( c_func, p0, d1, t2, t3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	char * t3
PREINIT:
	void(*func)(void *, double, char *, char *);
CODE:
	func   = INT2PTR(void(*)(void *, double, char *, char *), SvIV(c_func) );
	(*func)(p0, d1, t2, t3);

double
nci_dpdtt( c_func, p0, d1, t2, t3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	char * t3
PREINIT:
	double(*func)(void *, double, char *, char *);
CODE:
	func   = INT2PTR(double(*)(void *, double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2, t3);
OUTPUT:
	RETVAL

short
nci_spdtt( c_func, p0, d1, t2, t3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	char * t3
PREINIT:
	short(*func)(void *, double, char *, char *);
CODE:
	func   = INT2PTR(short(*)(void *, double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2, t3);
OUTPUT:
	RETVAL

float
nci_fpdtt( c_func, p0, d1, t2, t3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	char * t3
PREINIT:
	float(*func)(void *, double, char *, char *);
CODE:
	func   = INT2PTR(float(*)(void *, double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2, t3);
OUTPUT:
	RETVAL

char *
nci_tpdtt( c_func, p0, d1, t2, t3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	char * t3
PREINIT:
	char *(*func)(void *, double, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2, t3);
OUTPUT:
	RETVAL

int
nci_ipdtt( c_func, p0, d1, t2, t3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	char * t3
PREINIT:
	int(*func)(void *, double, char *, char *);
CODE:
	func   = INT2PTR(int(*)(void *, double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2, t3);
OUTPUT:
	RETVAL

void *
nci_pvdtt( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvdtt( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvdtt( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svdtt( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvdtt( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvdtt( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivdtt( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pddtt( c_func, d0, d1, t2, t3 )
	SV* c_func
	double d0
	double d1
	char * t2
	char * t3
PREINIT:
	void *(*func)(double, double, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(double, double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2, t3);
OUTPUT:
	RETVAL

void
nci_vddtt( c_func, d0, d1, t2, t3 )
	SV* c_func
	double d0
	double d1
	char * t2
	char * t3
PREINIT:
	void(*func)(double, double, char *, char *);
CODE:
	func   = INT2PTR(void(*)(double, double, char *, char *), SvIV(c_func) );
	(*func)(d0, d1, t2, t3);

double
nci_dddtt( c_func, d0, d1, t2, t3 )
	SV* c_func
	double d0
	double d1
	char * t2
	char * t3
PREINIT:
	double(*func)(double, double, char *, char *);
CODE:
	func   = INT2PTR(double(*)(double, double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2, t3);
OUTPUT:
	RETVAL

short
nci_sddtt( c_func, d0, d1, t2, t3 )
	SV* c_func
	double d0
	double d1
	char * t2
	char * t3
PREINIT:
	short(*func)(double, double, char *, char *);
CODE:
	func   = INT2PTR(short(*)(double, double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2, t3);
OUTPUT:
	RETVAL

float
nci_fddtt( c_func, d0, d1, t2, t3 )
	SV* c_func
	double d0
	double d1
	char * t2
	char * t3
PREINIT:
	float(*func)(double, double, char *, char *);
CODE:
	func   = INT2PTR(float(*)(double, double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2, t3);
OUTPUT:
	RETVAL

char *
nci_tddtt( c_func, d0, d1, t2, t3 )
	SV* c_func
	double d0
	double d1
	char * t2
	char * t3
PREINIT:
	char *(*func)(double, double, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(double, double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2, t3);
OUTPUT:
	RETVAL

int
nci_iddtt( c_func, d0, d1, t2, t3 )
	SV* c_func
	double d0
	double d1
	char * t2
	char * t3
PREINIT:
	int(*func)(double, double, char *, char *);
CODE:
	func   = INT2PTR(int(*)(double, double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2, t3);
OUTPUT:
	RETVAL

void *
nci_psdtt( c_func, s0, d1, t2, t3 )
	SV* c_func
	short s0
	double d1
	char * t2
	char * t3
PREINIT:
	void *(*func)(short, double, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(short, double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2, t3);
OUTPUT:
	RETVAL

void
nci_vsdtt( c_func, s0, d1, t2, t3 )
	SV* c_func
	short s0
	double d1
	char * t2
	char * t3
PREINIT:
	void(*func)(short, double, char *, char *);
CODE:
	func   = INT2PTR(void(*)(short, double, char *, char *), SvIV(c_func) );
	(*func)(s0, d1, t2, t3);

double
nci_dsdtt( c_func, s0, d1, t2, t3 )
	SV* c_func
	short s0
	double d1
	char * t2
	char * t3
PREINIT:
	double(*func)(short, double, char *, char *);
CODE:
	func   = INT2PTR(double(*)(short, double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2, t3);
OUTPUT:
	RETVAL

short
nci_ssdtt( c_func, s0, d1, t2, t3 )
	SV* c_func
	short s0
	double d1
	char * t2
	char * t3
PREINIT:
	short(*func)(short, double, char *, char *);
CODE:
	func   = INT2PTR(short(*)(short, double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2, t3);
OUTPUT:
	RETVAL

float
nci_fsdtt( c_func, s0, d1, t2, t3 )
	SV* c_func
	short s0
	double d1
	char * t2
	char * t3
PREINIT:
	float(*func)(short, double, char *, char *);
CODE:
	func   = INT2PTR(float(*)(short, double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2, t3);
OUTPUT:
	RETVAL

char *
nci_tsdtt( c_func, s0, d1, t2, t3 )
	SV* c_func
	short s0
	double d1
	char * t2
	char * t3
PREINIT:
	char *(*func)(short, double, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(short, double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2, t3);
OUTPUT:
	RETVAL

int
nci_isdtt( c_func, s0, d1, t2, t3 )
	SV* c_func
	short s0
	double d1
	char * t2
	char * t3
PREINIT:
	int(*func)(short, double, char *, char *);
CODE:
	func   = INT2PTR(int(*)(short, double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2, t3);
OUTPUT:
	RETVAL

void *
nci_pfdtt( c_func, f0, d1, t2, t3 )
	SV* c_func
	float f0
	double d1
	char * t2
	char * t3
PREINIT:
	void *(*func)(float, double, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(float, double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2, t3);
OUTPUT:
	RETVAL

void
nci_vfdtt( c_func, f0, d1, t2, t3 )
	SV* c_func
	float f0
	double d1
	char * t2
	char * t3
PREINIT:
	void(*func)(float, double, char *, char *);
CODE:
	func   = INT2PTR(void(*)(float, double, char *, char *), SvIV(c_func) );
	(*func)(f0, d1, t2, t3);

double
nci_dfdtt( c_func, f0, d1, t2, t3 )
	SV* c_func
	float f0
	double d1
	char * t2
	char * t3
PREINIT:
	double(*func)(float, double, char *, char *);
CODE:
	func   = INT2PTR(double(*)(float, double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2, t3);
OUTPUT:
	RETVAL

short
nci_sfdtt( c_func, f0, d1, t2, t3 )
	SV* c_func
	float f0
	double d1
	char * t2
	char * t3
PREINIT:
	short(*func)(float, double, char *, char *);
CODE:
	func   = INT2PTR(short(*)(float, double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2, t3);
OUTPUT:
	RETVAL

float
nci_ffdtt( c_func, f0, d1, t2, t3 )
	SV* c_func
	float f0
	double d1
	char * t2
	char * t3
PREINIT:
	float(*func)(float, double, char *, char *);
CODE:
	func   = INT2PTR(float(*)(float, double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2, t3);
OUTPUT:
	RETVAL

char *
nci_tfdtt( c_func, f0, d1, t2, t3 )
	SV* c_func
	float f0
	double d1
	char * t2
	char * t3
PREINIT:
	char *(*func)(float, double, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(float, double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2, t3);
OUTPUT:
	RETVAL

int
nci_ifdtt( c_func, f0, d1, t2, t3 )
	SV* c_func
	float f0
	double d1
	char * t2
	char * t3
PREINIT:
	int(*func)(float, double, char *, char *);
CODE:
	func   = INT2PTR(int(*)(float, double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2, t3);
OUTPUT:
	RETVAL

void *
nci_ptdtt( c_func, t0, d1, t2, t3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	char * t3
PREINIT:
	void *(*func)(char *, double, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2, t3);
OUTPUT:
	RETVAL

void
nci_vtdtt( c_func, t0, d1, t2, t3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	char * t3
PREINIT:
	void(*func)(char *, double, char *, char *);
CODE:
	func   = INT2PTR(void(*)(char *, double, char *, char *), SvIV(c_func) );
	(*func)(t0, d1, t2, t3);

double
nci_dtdtt( c_func, t0, d1, t2, t3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	char * t3
PREINIT:
	double(*func)(char *, double, char *, char *);
CODE:
	func   = INT2PTR(double(*)(char *, double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2, t3);
OUTPUT:
	RETVAL

short
nci_stdtt( c_func, t0, d1, t2, t3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	char * t3
PREINIT:
	short(*func)(char *, double, char *, char *);
CODE:
	func   = INT2PTR(short(*)(char *, double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2, t3);
OUTPUT:
	RETVAL

float
nci_ftdtt( c_func, t0, d1, t2, t3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	char * t3
PREINIT:
	float(*func)(char *, double, char *, char *);
CODE:
	func   = INT2PTR(float(*)(char *, double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2, t3);
OUTPUT:
	RETVAL

char *
nci_ttdtt( c_func, t0, d1, t2, t3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	char * t3
PREINIT:
	char *(*func)(char *, double, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2, t3);
OUTPUT:
	RETVAL

int
nci_itdtt( c_func, t0, d1, t2, t3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	char * t3
PREINIT:
	int(*func)(char *, double, char *, char *);
CODE:
	func   = INT2PTR(int(*)(char *, double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2, t3);
OUTPUT:
	RETVAL

void *
nci_pidtt( c_func, i0, d1, t2, t3 )
	SV* c_func
	int i0
	double d1
	char * t2
	char * t3
PREINIT:
	void *(*func)(int, double, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(int, double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2, t3);
OUTPUT:
	RETVAL

void
nci_vidtt( c_func, i0, d1, t2, t3 )
	SV* c_func
	int i0
	double d1
	char * t2
	char * t3
PREINIT:
	void(*func)(int, double, char *, char *);
CODE:
	func   = INT2PTR(void(*)(int, double, char *, char *), SvIV(c_func) );
	(*func)(i0, d1, t2, t3);

double
nci_didtt( c_func, i0, d1, t2, t3 )
	SV* c_func
	int i0
	double d1
	char * t2
	char * t3
PREINIT:
	double(*func)(int, double, char *, char *);
CODE:
	func   = INT2PTR(double(*)(int, double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2, t3);
OUTPUT:
	RETVAL

short
nci_sidtt( c_func, i0, d1, t2, t3 )
	SV* c_func
	int i0
	double d1
	char * t2
	char * t3
PREINIT:
	short(*func)(int, double, char *, char *);
CODE:
	func   = INT2PTR(short(*)(int, double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2, t3);
OUTPUT:
	RETVAL

float
nci_fidtt( c_func, i0, d1, t2, t3 )
	SV* c_func
	int i0
	double d1
	char * t2
	char * t3
PREINIT:
	float(*func)(int, double, char *, char *);
CODE:
	func   = INT2PTR(float(*)(int, double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2, t3);
OUTPUT:
	RETVAL

char *
nci_tidtt( c_func, i0, d1, t2, t3 )
	SV* c_func
	int i0
	double d1
	char * t2
	char * t3
PREINIT:
	char *(*func)(int, double, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(int, double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2, t3);
OUTPUT:
	RETVAL

int
nci_iidtt( c_func, i0, d1, t2, t3 )
	SV* c_func
	int i0
	double d1
	char * t2
	char * t3
PREINIT:
	int(*func)(int, double, char *, char *);
CODE:
	func   = INT2PTR(int(*)(int, double, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2, t3);
OUTPUT:
	RETVAL

void *
nci_ppstt( c_func, p0, s1, t2, t3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	char * t3
PREINIT:
	void *(*func)(void *, short, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2, t3);
OUTPUT:
	RETVAL

void
nci_vpstt( c_func, p0, s1, t2, t3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	char * t3
PREINIT:
	void(*func)(void *, short, char *, char *);
CODE:
	func   = INT2PTR(void(*)(void *, short, char *, char *), SvIV(c_func) );
	(*func)(p0, s1, t2, t3);

double
nci_dpstt( c_func, p0, s1, t2, t3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	char * t3
PREINIT:
	double(*func)(void *, short, char *, char *);
CODE:
	func   = INT2PTR(double(*)(void *, short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2, t3);
OUTPUT:
	RETVAL

short
nci_spstt( c_func, p0, s1, t2, t3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	char * t3
PREINIT:
	short(*func)(void *, short, char *, char *);
CODE:
	func   = INT2PTR(short(*)(void *, short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2, t3);
OUTPUT:
	RETVAL

float
nci_fpstt( c_func, p0, s1, t2, t3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	char * t3
PREINIT:
	float(*func)(void *, short, char *, char *);
CODE:
	func   = INT2PTR(float(*)(void *, short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2, t3);
OUTPUT:
	RETVAL

char *
nci_tpstt( c_func, p0, s1, t2, t3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	char * t3
PREINIT:
	char *(*func)(void *, short, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2, t3);
OUTPUT:
	RETVAL

int
nci_ipstt( c_func, p0, s1, t2, t3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	char * t3
PREINIT:
	int(*func)(void *, short, char *, char *);
CODE:
	func   = INT2PTR(int(*)(void *, short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2, t3);
OUTPUT:
	RETVAL

void *
nci_pvstt( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvstt( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvstt( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svstt( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvstt( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvstt( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivstt( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdstt( c_func, d0, s1, t2, t3 )
	SV* c_func
	double d0
	short s1
	char * t2
	char * t3
PREINIT:
	void *(*func)(double, short, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(double, short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2, t3);
OUTPUT:
	RETVAL

void
nci_vdstt( c_func, d0, s1, t2, t3 )
	SV* c_func
	double d0
	short s1
	char * t2
	char * t3
PREINIT:
	void(*func)(double, short, char *, char *);
CODE:
	func   = INT2PTR(void(*)(double, short, char *, char *), SvIV(c_func) );
	(*func)(d0, s1, t2, t3);

double
nci_ddstt( c_func, d0, s1, t2, t3 )
	SV* c_func
	double d0
	short s1
	char * t2
	char * t3
PREINIT:
	double(*func)(double, short, char *, char *);
CODE:
	func   = INT2PTR(double(*)(double, short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2, t3);
OUTPUT:
	RETVAL

short
nci_sdstt( c_func, d0, s1, t2, t3 )
	SV* c_func
	double d0
	short s1
	char * t2
	char * t3
PREINIT:
	short(*func)(double, short, char *, char *);
CODE:
	func   = INT2PTR(short(*)(double, short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2, t3);
OUTPUT:
	RETVAL

float
nci_fdstt( c_func, d0, s1, t2, t3 )
	SV* c_func
	double d0
	short s1
	char * t2
	char * t3
PREINIT:
	float(*func)(double, short, char *, char *);
CODE:
	func   = INT2PTR(float(*)(double, short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2, t3);
OUTPUT:
	RETVAL

char *
nci_tdstt( c_func, d0, s1, t2, t3 )
	SV* c_func
	double d0
	short s1
	char * t2
	char * t3
PREINIT:
	char *(*func)(double, short, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(double, short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2, t3);
OUTPUT:
	RETVAL

int
nci_idstt( c_func, d0, s1, t2, t3 )
	SV* c_func
	double d0
	short s1
	char * t2
	char * t3
PREINIT:
	int(*func)(double, short, char *, char *);
CODE:
	func   = INT2PTR(int(*)(double, short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2, t3);
OUTPUT:
	RETVAL

void *
nci_psstt( c_func, s0, s1, t2, t3 )
	SV* c_func
	short s0
	short s1
	char * t2
	char * t3
PREINIT:
	void *(*func)(short, short, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(short, short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2, t3);
OUTPUT:
	RETVAL

void
nci_vsstt( c_func, s0, s1, t2, t3 )
	SV* c_func
	short s0
	short s1
	char * t2
	char * t3
PREINIT:
	void(*func)(short, short, char *, char *);
CODE:
	func   = INT2PTR(void(*)(short, short, char *, char *), SvIV(c_func) );
	(*func)(s0, s1, t2, t3);

double
nci_dsstt( c_func, s0, s1, t2, t3 )
	SV* c_func
	short s0
	short s1
	char * t2
	char * t3
PREINIT:
	double(*func)(short, short, char *, char *);
CODE:
	func   = INT2PTR(double(*)(short, short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2, t3);
OUTPUT:
	RETVAL

short
nci_ssstt( c_func, s0, s1, t2, t3 )
	SV* c_func
	short s0
	short s1
	char * t2
	char * t3
PREINIT:
	short(*func)(short, short, char *, char *);
CODE:
	func   = INT2PTR(short(*)(short, short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2, t3);
OUTPUT:
	RETVAL

float
nci_fsstt( c_func, s0, s1, t2, t3 )
	SV* c_func
	short s0
	short s1
	char * t2
	char * t3
PREINIT:
	float(*func)(short, short, char *, char *);
CODE:
	func   = INT2PTR(float(*)(short, short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2, t3);
OUTPUT:
	RETVAL

char *
nci_tsstt( c_func, s0, s1, t2, t3 )
	SV* c_func
	short s0
	short s1
	char * t2
	char * t3
PREINIT:
	char *(*func)(short, short, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(short, short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2, t3);
OUTPUT:
	RETVAL

int
nci_isstt( c_func, s0, s1, t2, t3 )
	SV* c_func
	short s0
	short s1
	char * t2
	char * t3
PREINIT:
	int(*func)(short, short, char *, char *);
CODE:
	func   = INT2PTR(int(*)(short, short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2, t3);
OUTPUT:
	RETVAL

void *
nci_pfstt( c_func, f0, s1, t2, t3 )
	SV* c_func
	float f0
	short s1
	char * t2
	char * t3
PREINIT:
	void *(*func)(float, short, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(float, short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2, t3);
OUTPUT:
	RETVAL

void
nci_vfstt( c_func, f0, s1, t2, t3 )
	SV* c_func
	float f0
	short s1
	char * t2
	char * t3
PREINIT:
	void(*func)(float, short, char *, char *);
CODE:
	func   = INT2PTR(void(*)(float, short, char *, char *), SvIV(c_func) );
	(*func)(f0, s1, t2, t3);

double
nci_dfstt( c_func, f0, s1, t2, t3 )
	SV* c_func
	float f0
	short s1
	char * t2
	char * t3
PREINIT:
	double(*func)(float, short, char *, char *);
CODE:
	func   = INT2PTR(double(*)(float, short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2, t3);
OUTPUT:
	RETVAL

short
nci_sfstt( c_func, f0, s1, t2, t3 )
	SV* c_func
	float f0
	short s1
	char * t2
	char * t3
PREINIT:
	short(*func)(float, short, char *, char *);
CODE:
	func   = INT2PTR(short(*)(float, short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2, t3);
OUTPUT:
	RETVAL

float
nci_ffstt( c_func, f0, s1, t2, t3 )
	SV* c_func
	float f0
	short s1
	char * t2
	char * t3
PREINIT:
	float(*func)(float, short, char *, char *);
CODE:
	func   = INT2PTR(float(*)(float, short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2, t3);
OUTPUT:
	RETVAL

char *
nci_tfstt( c_func, f0, s1, t2, t3 )
	SV* c_func
	float f0
	short s1
	char * t2
	char * t3
PREINIT:
	char *(*func)(float, short, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(float, short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2, t3);
OUTPUT:
	RETVAL

int
nci_ifstt( c_func, f0, s1, t2, t3 )
	SV* c_func
	float f0
	short s1
	char * t2
	char * t3
PREINIT:
	int(*func)(float, short, char *, char *);
CODE:
	func   = INT2PTR(int(*)(float, short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2, t3);
OUTPUT:
	RETVAL

void *
nci_ptstt( c_func, t0, s1, t2, t3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	char * t3
PREINIT:
	void *(*func)(char *, short, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2, t3);
OUTPUT:
	RETVAL

void
nci_vtstt( c_func, t0, s1, t2, t3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	char * t3
PREINIT:
	void(*func)(char *, short, char *, char *);
CODE:
	func   = INT2PTR(void(*)(char *, short, char *, char *), SvIV(c_func) );
	(*func)(t0, s1, t2, t3);

double
nci_dtstt( c_func, t0, s1, t2, t3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	char * t3
PREINIT:
	double(*func)(char *, short, char *, char *);
CODE:
	func   = INT2PTR(double(*)(char *, short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2, t3);
OUTPUT:
	RETVAL

short
nci_ststt( c_func, t0, s1, t2, t3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	char * t3
PREINIT:
	short(*func)(char *, short, char *, char *);
CODE:
	func   = INT2PTR(short(*)(char *, short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2, t3);
OUTPUT:
	RETVAL

float
nci_ftstt( c_func, t0, s1, t2, t3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	char * t3
PREINIT:
	float(*func)(char *, short, char *, char *);
CODE:
	func   = INT2PTR(float(*)(char *, short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2, t3);
OUTPUT:
	RETVAL

char *
nci_ttstt( c_func, t0, s1, t2, t3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	char * t3
PREINIT:
	char *(*func)(char *, short, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2, t3);
OUTPUT:
	RETVAL

int
nci_itstt( c_func, t0, s1, t2, t3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	char * t3
PREINIT:
	int(*func)(char *, short, char *, char *);
CODE:
	func   = INT2PTR(int(*)(char *, short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2, t3);
OUTPUT:
	RETVAL

void *
nci_pistt( c_func, i0, s1, t2, t3 )
	SV* c_func
	int i0
	short s1
	char * t2
	char * t3
PREINIT:
	void *(*func)(int, short, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(int, short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2, t3);
OUTPUT:
	RETVAL

void
nci_vistt( c_func, i0, s1, t2, t3 )
	SV* c_func
	int i0
	short s1
	char * t2
	char * t3
PREINIT:
	void(*func)(int, short, char *, char *);
CODE:
	func   = INT2PTR(void(*)(int, short, char *, char *), SvIV(c_func) );
	(*func)(i0, s1, t2, t3);

double
nci_distt( c_func, i0, s1, t2, t3 )
	SV* c_func
	int i0
	short s1
	char * t2
	char * t3
PREINIT:
	double(*func)(int, short, char *, char *);
CODE:
	func   = INT2PTR(double(*)(int, short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2, t3);
OUTPUT:
	RETVAL

short
nci_sistt( c_func, i0, s1, t2, t3 )
	SV* c_func
	int i0
	short s1
	char * t2
	char * t3
PREINIT:
	short(*func)(int, short, char *, char *);
CODE:
	func   = INT2PTR(short(*)(int, short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2, t3);
OUTPUT:
	RETVAL

float
nci_fistt( c_func, i0, s1, t2, t3 )
	SV* c_func
	int i0
	short s1
	char * t2
	char * t3
PREINIT:
	float(*func)(int, short, char *, char *);
CODE:
	func   = INT2PTR(float(*)(int, short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2, t3);
OUTPUT:
	RETVAL

char *
nci_tistt( c_func, i0, s1, t2, t3 )
	SV* c_func
	int i0
	short s1
	char * t2
	char * t3
PREINIT:
	char *(*func)(int, short, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(int, short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2, t3);
OUTPUT:
	RETVAL

int
nci_iistt( c_func, i0, s1, t2, t3 )
	SV* c_func
	int i0
	short s1
	char * t2
	char * t3
PREINIT:
	int(*func)(int, short, char *, char *);
CODE:
	func   = INT2PTR(int(*)(int, short, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2, t3);
OUTPUT:
	RETVAL

void *
nci_ppftt( c_func, p0, f1, t2, t3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	char * t3
PREINIT:
	void *(*func)(void *, float, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2, t3);
OUTPUT:
	RETVAL

void
nci_vpftt( c_func, p0, f1, t2, t3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	char * t3
PREINIT:
	void(*func)(void *, float, char *, char *);
CODE:
	func   = INT2PTR(void(*)(void *, float, char *, char *), SvIV(c_func) );
	(*func)(p0, f1, t2, t3);

double
nci_dpftt( c_func, p0, f1, t2, t3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	char * t3
PREINIT:
	double(*func)(void *, float, char *, char *);
CODE:
	func   = INT2PTR(double(*)(void *, float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2, t3);
OUTPUT:
	RETVAL

short
nci_spftt( c_func, p0, f1, t2, t3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	char * t3
PREINIT:
	short(*func)(void *, float, char *, char *);
CODE:
	func   = INT2PTR(short(*)(void *, float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2, t3);
OUTPUT:
	RETVAL

float
nci_fpftt( c_func, p0, f1, t2, t3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	char * t3
PREINIT:
	float(*func)(void *, float, char *, char *);
CODE:
	func   = INT2PTR(float(*)(void *, float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2, t3);
OUTPUT:
	RETVAL

char *
nci_tpftt( c_func, p0, f1, t2, t3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	char * t3
PREINIT:
	char *(*func)(void *, float, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2, t3);
OUTPUT:
	RETVAL

int
nci_ipftt( c_func, p0, f1, t2, t3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	char * t3
PREINIT:
	int(*func)(void *, float, char *, char *);
CODE:
	func   = INT2PTR(int(*)(void *, float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2, t3);
OUTPUT:
	RETVAL

void *
nci_pvftt( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvftt( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvftt( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svftt( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvftt( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvftt( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivftt( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdftt( c_func, d0, f1, t2, t3 )
	SV* c_func
	double d0
	float f1
	char * t2
	char * t3
PREINIT:
	void *(*func)(double, float, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(double, float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2, t3);
OUTPUT:
	RETVAL

void
nci_vdftt( c_func, d0, f1, t2, t3 )
	SV* c_func
	double d0
	float f1
	char * t2
	char * t3
PREINIT:
	void(*func)(double, float, char *, char *);
CODE:
	func   = INT2PTR(void(*)(double, float, char *, char *), SvIV(c_func) );
	(*func)(d0, f1, t2, t3);

double
nci_ddftt( c_func, d0, f1, t2, t3 )
	SV* c_func
	double d0
	float f1
	char * t2
	char * t3
PREINIT:
	double(*func)(double, float, char *, char *);
CODE:
	func   = INT2PTR(double(*)(double, float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2, t3);
OUTPUT:
	RETVAL

short
nci_sdftt( c_func, d0, f1, t2, t3 )
	SV* c_func
	double d0
	float f1
	char * t2
	char * t3
PREINIT:
	short(*func)(double, float, char *, char *);
CODE:
	func   = INT2PTR(short(*)(double, float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2, t3);
OUTPUT:
	RETVAL

float
nci_fdftt( c_func, d0, f1, t2, t3 )
	SV* c_func
	double d0
	float f1
	char * t2
	char * t3
PREINIT:
	float(*func)(double, float, char *, char *);
CODE:
	func   = INT2PTR(float(*)(double, float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2, t3);
OUTPUT:
	RETVAL

char *
nci_tdftt( c_func, d0, f1, t2, t3 )
	SV* c_func
	double d0
	float f1
	char * t2
	char * t3
PREINIT:
	char *(*func)(double, float, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(double, float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2, t3);
OUTPUT:
	RETVAL

int
nci_idftt( c_func, d0, f1, t2, t3 )
	SV* c_func
	double d0
	float f1
	char * t2
	char * t3
PREINIT:
	int(*func)(double, float, char *, char *);
CODE:
	func   = INT2PTR(int(*)(double, float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2, t3);
OUTPUT:
	RETVAL

void *
nci_psftt( c_func, s0, f1, t2, t3 )
	SV* c_func
	short s0
	float f1
	char * t2
	char * t3
PREINIT:
	void *(*func)(short, float, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(short, float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2, t3);
OUTPUT:
	RETVAL

void
nci_vsftt( c_func, s0, f1, t2, t3 )
	SV* c_func
	short s0
	float f1
	char * t2
	char * t3
PREINIT:
	void(*func)(short, float, char *, char *);
CODE:
	func   = INT2PTR(void(*)(short, float, char *, char *), SvIV(c_func) );
	(*func)(s0, f1, t2, t3);

double
nci_dsftt( c_func, s0, f1, t2, t3 )
	SV* c_func
	short s0
	float f1
	char * t2
	char * t3
PREINIT:
	double(*func)(short, float, char *, char *);
CODE:
	func   = INT2PTR(double(*)(short, float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2, t3);
OUTPUT:
	RETVAL

short
nci_ssftt( c_func, s0, f1, t2, t3 )
	SV* c_func
	short s0
	float f1
	char * t2
	char * t3
PREINIT:
	short(*func)(short, float, char *, char *);
CODE:
	func   = INT2PTR(short(*)(short, float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2, t3);
OUTPUT:
	RETVAL

float
nci_fsftt( c_func, s0, f1, t2, t3 )
	SV* c_func
	short s0
	float f1
	char * t2
	char * t3
PREINIT:
	float(*func)(short, float, char *, char *);
CODE:
	func   = INT2PTR(float(*)(short, float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2, t3);
OUTPUT:
	RETVAL

char *
nci_tsftt( c_func, s0, f1, t2, t3 )
	SV* c_func
	short s0
	float f1
	char * t2
	char * t3
PREINIT:
	char *(*func)(short, float, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(short, float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2, t3);
OUTPUT:
	RETVAL

int
nci_isftt( c_func, s0, f1, t2, t3 )
	SV* c_func
	short s0
	float f1
	char * t2
	char * t3
PREINIT:
	int(*func)(short, float, char *, char *);
CODE:
	func   = INT2PTR(int(*)(short, float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2, t3);
OUTPUT:
	RETVAL

void *
nci_pfftt( c_func, f0, f1, t2, t3 )
	SV* c_func
	float f0
	float f1
	char * t2
	char * t3
PREINIT:
	void *(*func)(float, float, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(float, float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2, t3);
OUTPUT:
	RETVAL

void
nci_vfftt( c_func, f0, f1, t2, t3 )
	SV* c_func
	float f0
	float f1
	char * t2
	char * t3
PREINIT:
	void(*func)(float, float, char *, char *);
CODE:
	func   = INT2PTR(void(*)(float, float, char *, char *), SvIV(c_func) );
	(*func)(f0, f1, t2, t3);

double
nci_dfftt( c_func, f0, f1, t2, t3 )
	SV* c_func
	float f0
	float f1
	char * t2
	char * t3
PREINIT:
	double(*func)(float, float, char *, char *);
CODE:
	func   = INT2PTR(double(*)(float, float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2, t3);
OUTPUT:
	RETVAL

short
nci_sfftt( c_func, f0, f1, t2, t3 )
	SV* c_func
	float f0
	float f1
	char * t2
	char * t3
PREINIT:
	short(*func)(float, float, char *, char *);
CODE:
	func   = INT2PTR(short(*)(float, float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2, t3);
OUTPUT:
	RETVAL

float
nci_ffftt( c_func, f0, f1, t2, t3 )
	SV* c_func
	float f0
	float f1
	char * t2
	char * t3
PREINIT:
	float(*func)(float, float, char *, char *);
CODE:
	func   = INT2PTR(float(*)(float, float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2, t3);
OUTPUT:
	RETVAL

char *
nci_tfftt( c_func, f0, f1, t2, t3 )
	SV* c_func
	float f0
	float f1
	char * t2
	char * t3
PREINIT:
	char *(*func)(float, float, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(float, float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2, t3);
OUTPUT:
	RETVAL

int
nci_ifftt( c_func, f0, f1, t2, t3 )
	SV* c_func
	float f0
	float f1
	char * t2
	char * t3
PREINIT:
	int(*func)(float, float, char *, char *);
CODE:
	func   = INT2PTR(int(*)(float, float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2, t3);
OUTPUT:
	RETVAL

void *
nci_ptftt( c_func, t0, f1, t2, t3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	char * t3
PREINIT:
	void *(*func)(char *, float, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2, t3);
OUTPUT:
	RETVAL

void
nci_vtftt( c_func, t0, f1, t2, t3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	char * t3
PREINIT:
	void(*func)(char *, float, char *, char *);
CODE:
	func   = INT2PTR(void(*)(char *, float, char *, char *), SvIV(c_func) );
	(*func)(t0, f1, t2, t3);

double
nci_dtftt( c_func, t0, f1, t2, t3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	char * t3
PREINIT:
	double(*func)(char *, float, char *, char *);
CODE:
	func   = INT2PTR(double(*)(char *, float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2, t3);
OUTPUT:
	RETVAL

short
nci_stftt( c_func, t0, f1, t2, t3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	char * t3
PREINIT:
	short(*func)(char *, float, char *, char *);
CODE:
	func   = INT2PTR(short(*)(char *, float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2, t3);
OUTPUT:
	RETVAL

float
nci_ftftt( c_func, t0, f1, t2, t3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	char * t3
PREINIT:
	float(*func)(char *, float, char *, char *);
CODE:
	func   = INT2PTR(float(*)(char *, float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2, t3);
OUTPUT:
	RETVAL

char *
nci_ttftt( c_func, t0, f1, t2, t3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	char * t3
PREINIT:
	char *(*func)(char *, float, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2, t3);
OUTPUT:
	RETVAL

int
nci_itftt( c_func, t0, f1, t2, t3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	char * t3
PREINIT:
	int(*func)(char *, float, char *, char *);
CODE:
	func   = INT2PTR(int(*)(char *, float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2, t3);
OUTPUT:
	RETVAL

void *
nci_piftt( c_func, i0, f1, t2, t3 )
	SV* c_func
	int i0
	float f1
	char * t2
	char * t3
PREINIT:
	void *(*func)(int, float, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(int, float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2, t3);
OUTPUT:
	RETVAL

void
nci_viftt( c_func, i0, f1, t2, t3 )
	SV* c_func
	int i0
	float f1
	char * t2
	char * t3
PREINIT:
	void(*func)(int, float, char *, char *);
CODE:
	func   = INT2PTR(void(*)(int, float, char *, char *), SvIV(c_func) );
	(*func)(i0, f1, t2, t3);

double
nci_diftt( c_func, i0, f1, t2, t3 )
	SV* c_func
	int i0
	float f1
	char * t2
	char * t3
PREINIT:
	double(*func)(int, float, char *, char *);
CODE:
	func   = INT2PTR(double(*)(int, float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2, t3);
OUTPUT:
	RETVAL

short
nci_siftt( c_func, i0, f1, t2, t3 )
	SV* c_func
	int i0
	float f1
	char * t2
	char * t3
PREINIT:
	short(*func)(int, float, char *, char *);
CODE:
	func   = INT2PTR(short(*)(int, float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2, t3);
OUTPUT:
	RETVAL

float
nci_fiftt( c_func, i0, f1, t2, t3 )
	SV* c_func
	int i0
	float f1
	char * t2
	char * t3
PREINIT:
	float(*func)(int, float, char *, char *);
CODE:
	func   = INT2PTR(float(*)(int, float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2, t3);
OUTPUT:
	RETVAL

char *
nci_tiftt( c_func, i0, f1, t2, t3 )
	SV* c_func
	int i0
	float f1
	char * t2
	char * t3
PREINIT:
	char *(*func)(int, float, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(int, float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2, t3);
OUTPUT:
	RETVAL

int
nci_iiftt( c_func, i0, f1, t2, t3 )
	SV* c_func
	int i0
	float f1
	char * t2
	char * t3
PREINIT:
	int(*func)(int, float, char *, char *);
CODE:
	func   = INT2PTR(int(*)(int, float, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2, t3);
OUTPUT:
	RETVAL

void *
nci_ppttt( c_func, p0, t1, t2, t3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	char * t3
PREINIT:
	void *(*func)(void *, char *, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2, t3);
OUTPUT:
	RETVAL

void
nci_vpttt( c_func, p0, t1, t2, t3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	char * t3
PREINIT:
	void(*func)(void *, char *, char *, char *);
CODE:
	func   = INT2PTR(void(*)(void *, char *, char *, char *), SvIV(c_func) );
	(*func)(p0, t1, t2, t3);

double
nci_dpttt( c_func, p0, t1, t2, t3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	char * t3
PREINIT:
	double(*func)(void *, char *, char *, char *);
CODE:
	func   = INT2PTR(double(*)(void *, char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2, t3);
OUTPUT:
	RETVAL

short
nci_spttt( c_func, p0, t1, t2, t3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	char * t3
PREINIT:
	short(*func)(void *, char *, char *, char *);
CODE:
	func   = INT2PTR(short(*)(void *, char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2, t3);
OUTPUT:
	RETVAL

float
nci_fpttt( c_func, p0, t1, t2, t3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	char * t3
PREINIT:
	float(*func)(void *, char *, char *, char *);
CODE:
	func   = INT2PTR(float(*)(void *, char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2, t3);
OUTPUT:
	RETVAL

char *
nci_tpttt( c_func, p0, t1, t2, t3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	char * t3
PREINIT:
	char *(*func)(void *, char *, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2, t3);
OUTPUT:
	RETVAL

int
nci_ipttt( c_func, p0, t1, t2, t3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	char * t3
PREINIT:
	int(*func)(void *, char *, char *, char *);
CODE:
	func   = INT2PTR(int(*)(void *, char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2, t3);
OUTPUT:
	RETVAL

void *
nci_pvttt( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvttt( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvttt( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svttt( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvttt( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvttt( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivttt( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdttt( c_func, d0, t1, t2, t3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	char * t3
PREINIT:
	void *(*func)(double, char *, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(double, char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2, t3);
OUTPUT:
	RETVAL

void
nci_vdttt( c_func, d0, t1, t2, t3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	char * t3
PREINIT:
	void(*func)(double, char *, char *, char *);
CODE:
	func   = INT2PTR(void(*)(double, char *, char *, char *), SvIV(c_func) );
	(*func)(d0, t1, t2, t3);

double
nci_ddttt( c_func, d0, t1, t2, t3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	char * t3
PREINIT:
	double(*func)(double, char *, char *, char *);
CODE:
	func   = INT2PTR(double(*)(double, char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2, t3);
OUTPUT:
	RETVAL

short
nci_sdttt( c_func, d0, t1, t2, t3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	char * t3
PREINIT:
	short(*func)(double, char *, char *, char *);
CODE:
	func   = INT2PTR(short(*)(double, char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2, t3);
OUTPUT:
	RETVAL

float
nci_fdttt( c_func, d0, t1, t2, t3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	char * t3
PREINIT:
	float(*func)(double, char *, char *, char *);
CODE:
	func   = INT2PTR(float(*)(double, char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2, t3);
OUTPUT:
	RETVAL

char *
nci_tdttt( c_func, d0, t1, t2, t3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	char * t3
PREINIT:
	char *(*func)(double, char *, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(double, char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2, t3);
OUTPUT:
	RETVAL

int
nci_idttt( c_func, d0, t1, t2, t3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	char * t3
PREINIT:
	int(*func)(double, char *, char *, char *);
CODE:
	func   = INT2PTR(int(*)(double, char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2, t3);
OUTPUT:
	RETVAL

void *
nci_psttt( c_func, s0, t1, t2, t3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	char * t3
PREINIT:
	void *(*func)(short, char *, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(short, char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2, t3);
OUTPUT:
	RETVAL

void
nci_vsttt( c_func, s0, t1, t2, t3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	char * t3
PREINIT:
	void(*func)(short, char *, char *, char *);
CODE:
	func   = INT2PTR(void(*)(short, char *, char *, char *), SvIV(c_func) );
	(*func)(s0, t1, t2, t3);

double
nci_dsttt( c_func, s0, t1, t2, t3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	char * t3
PREINIT:
	double(*func)(short, char *, char *, char *);
CODE:
	func   = INT2PTR(double(*)(short, char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2, t3);
OUTPUT:
	RETVAL

short
nci_ssttt( c_func, s0, t1, t2, t3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	char * t3
PREINIT:
	short(*func)(short, char *, char *, char *);
CODE:
	func   = INT2PTR(short(*)(short, char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2, t3);
OUTPUT:
	RETVAL

float
nci_fsttt( c_func, s0, t1, t2, t3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	char * t3
PREINIT:
	float(*func)(short, char *, char *, char *);
CODE:
	func   = INT2PTR(float(*)(short, char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2, t3);
OUTPUT:
	RETVAL

char *
nci_tsttt( c_func, s0, t1, t2, t3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	char * t3
PREINIT:
	char *(*func)(short, char *, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(short, char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2, t3);
OUTPUT:
	RETVAL

int
nci_isttt( c_func, s0, t1, t2, t3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	char * t3
PREINIT:
	int(*func)(short, char *, char *, char *);
CODE:
	func   = INT2PTR(int(*)(short, char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2, t3);
OUTPUT:
	RETVAL

void *
nci_pfttt( c_func, f0, t1, t2, t3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	char * t3
PREINIT:
	void *(*func)(float, char *, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(float, char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2, t3);
OUTPUT:
	RETVAL

void
nci_vfttt( c_func, f0, t1, t2, t3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	char * t3
PREINIT:
	void(*func)(float, char *, char *, char *);
CODE:
	func   = INT2PTR(void(*)(float, char *, char *, char *), SvIV(c_func) );
	(*func)(f0, t1, t2, t3);

double
nci_dfttt( c_func, f0, t1, t2, t3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	char * t3
PREINIT:
	double(*func)(float, char *, char *, char *);
CODE:
	func   = INT2PTR(double(*)(float, char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2, t3);
OUTPUT:
	RETVAL

short
nci_sfttt( c_func, f0, t1, t2, t3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	char * t3
PREINIT:
	short(*func)(float, char *, char *, char *);
CODE:
	func   = INT2PTR(short(*)(float, char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2, t3);
OUTPUT:
	RETVAL

float
nci_ffttt( c_func, f0, t1, t2, t3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	char * t3
PREINIT:
	float(*func)(float, char *, char *, char *);
CODE:
	func   = INT2PTR(float(*)(float, char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2, t3);
OUTPUT:
	RETVAL

char *
nci_tfttt( c_func, f0, t1, t2, t3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	char * t3
PREINIT:
	char *(*func)(float, char *, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(float, char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2, t3);
OUTPUT:
	RETVAL

int
nci_ifttt( c_func, f0, t1, t2, t3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	char * t3
PREINIT:
	int(*func)(float, char *, char *, char *);
CODE:
	func   = INT2PTR(int(*)(float, char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2, t3);
OUTPUT:
	RETVAL

void *
nci_ptttt( c_func, t0, t1, t2, t3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	char * t3
PREINIT:
	void *(*func)(char *, char *, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2, t3);
OUTPUT:
	RETVAL

void
nci_vtttt( c_func, t0, t1, t2, t3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	char * t3
PREINIT:
	void(*func)(char *, char *, char *, char *);
CODE:
	func   = INT2PTR(void(*)(char *, char *, char *, char *), SvIV(c_func) );
	(*func)(t0, t1, t2, t3);

double
nci_dtttt( c_func, t0, t1, t2, t3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	char * t3
PREINIT:
	double(*func)(char *, char *, char *, char *);
CODE:
	func   = INT2PTR(double(*)(char *, char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2, t3);
OUTPUT:
	RETVAL

short
nci_stttt( c_func, t0, t1, t2, t3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	char * t3
PREINIT:
	short(*func)(char *, char *, char *, char *);
CODE:
	func   = INT2PTR(short(*)(char *, char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2, t3);
OUTPUT:
	RETVAL

float
nci_ftttt( c_func, t0, t1, t2, t3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	char * t3
PREINIT:
	float(*func)(char *, char *, char *, char *);
CODE:
	func   = INT2PTR(float(*)(char *, char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2, t3);
OUTPUT:
	RETVAL

char *
nci_ttttt( c_func, t0, t1, t2, t3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	char * t3
PREINIT:
	char *(*func)(char *, char *, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2, t3);
OUTPUT:
	RETVAL

int
nci_itttt( c_func, t0, t1, t2, t3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	char * t3
PREINIT:
	int(*func)(char *, char *, char *, char *);
CODE:
	func   = INT2PTR(int(*)(char *, char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2, t3);
OUTPUT:
	RETVAL

void *
nci_pittt( c_func, i0, t1, t2, t3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	char * t3
PREINIT:
	void *(*func)(int, char *, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(int, char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2, t3);
OUTPUT:
	RETVAL

void
nci_vittt( c_func, i0, t1, t2, t3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	char * t3
PREINIT:
	void(*func)(int, char *, char *, char *);
CODE:
	func   = INT2PTR(void(*)(int, char *, char *, char *), SvIV(c_func) );
	(*func)(i0, t1, t2, t3);

double
nci_dittt( c_func, i0, t1, t2, t3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	char * t3
PREINIT:
	double(*func)(int, char *, char *, char *);
CODE:
	func   = INT2PTR(double(*)(int, char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2, t3);
OUTPUT:
	RETVAL

short
nci_sittt( c_func, i0, t1, t2, t3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	char * t3
PREINIT:
	short(*func)(int, char *, char *, char *);
CODE:
	func   = INT2PTR(short(*)(int, char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2, t3);
OUTPUT:
	RETVAL

float
nci_fittt( c_func, i0, t1, t2, t3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	char * t3
PREINIT:
	float(*func)(int, char *, char *, char *);
CODE:
	func   = INT2PTR(float(*)(int, char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2, t3);
OUTPUT:
	RETVAL

char *
nci_tittt( c_func, i0, t1, t2, t3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	char * t3
PREINIT:
	char *(*func)(int, char *, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(int, char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2, t3);
OUTPUT:
	RETVAL

int
nci_iittt( c_func, i0, t1, t2, t3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	char * t3
PREINIT:
	int(*func)(int, char *, char *, char *);
CODE:
	func   = INT2PTR(int(*)(int, char *, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2, t3);
OUTPUT:
	RETVAL

void *
nci_ppitt( c_func, p0, i1, t2, t3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	char * t3
PREINIT:
	void *(*func)(void *, int, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2, t3);
OUTPUT:
	RETVAL

void
nci_vpitt( c_func, p0, i1, t2, t3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	char * t3
PREINIT:
	void(*func)(void *, int, char *, char *);
CODE:
	func   = INT2PTR(void(*)(void *, int, char *, char *), SvIV(c_func) );
	(*func)(p0, i1, t2, t3);

double
nci_dpitt( c_func, p0, i1, t2, t3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	char * t3
PREINIT:
	double(*func)(void *, int, char *, char *);
CODE:
	func   = INT2PTR(double(*)(void *, int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2, t3);
OUTPUT:
	RETVAL

short
nci_spitt( c_func, p0, i1, t2, t3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	char * t3
PREINIT:
	short(*func)(void *, int, char *, char *);
CODE:
	func   = INT2PTR(short(*)(void *, int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2, t3);
OUTPUT:
	RETVAL

float
nci_fpitt( c_func, p0, i1, t2, t3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	char * t3
PREINIT:
	float(*func)(void *, int, char *, char *);
CODE:
	func   = INT2PTR(float(*)(void *, int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2, t3);
OUTPUT:
	RETVAL

char *
nci_tpitt( c_func, p0, i1, t2, t3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	char * t3
PREINIT:
	char *(*func)(void *, int, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2, t3);
OUTPUT:
	RETVAL

int
nci_ipitt( c_func, p0, i1, t2, t3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	char * t3
PREINIT:
	int(*func)(void *, int, char *, char *);
CODE:
	func   = INT2PTR(int(*)(void *, int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2, t3);
OUTPUT:
	RETVAL

void *
nci_pvitt( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvitt( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvitt( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svitt( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvitt( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvitt( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivitt( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pditt( c_func, d0, i1, t2, t3 )
	SV* c_func
	double d0
	int i1
	char * t2
	char * t3
PREINIT:
	void *(*func)(double, int, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(double, int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2, t3);
OUTPUT:
	RETVAL

void
nci_vditt( c_func, d0, i1, t2, t3 )
	SV* c_func
	double d0
	int i1
	char * t2
	char * t3
PREINIT:
	void(*func)(double, int, char *, char *);
CODE:
	func   = INT2PTR(void(*)(double, int, char *, char *), SvIV(c_func) );
	(*func)(d0, i1, t2, t3);

double
nci_dditt( c_func, d0, i1, t2, t3 )
	SV* c_func
	double d0
	int i1
	char * t2
	char * t3
PREINIT:
	double(*func)(double, int, char *, char *);
CODE:
	func   = INT2PTR(double(*)(double, int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2, t3);
OUTPUT:
	RETVAL

short
nci_sditt( c_func, d0, i1, t2, t3 )
	SV* c_func
	double d0
	int i1
	char * t2
	char * t3
PREINIT:
	short(*func)(double, int, char *, char *);
CODE:
	func   = INT2PTR(short(*)(double, int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2, t3);
OUTPUT:
	RETVAL

float
nci_fditt( c_func, d0, i1, t2, t3 )
	SV* c_func
	double d0
	int i1
	char * t2
	char * t3
PREINIT:
	float(*func)(double, int, char *, char *);
CODE:
	func   = INT2PTR(float(*)(double, int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2, t3);
OUTPUT:
	RETVAL

char *
nci_tditt( c_func, d0, i1, t2, t3 )
	SV* c_func
	double d0
	int i1
	char * t2
	char * t3
PREINIT:
	char *(*func)(double, int, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(double, int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2, t3);
OUTPUT:
	RETVAL

int
nci_iditt( c_func, d0, i1, t2, t3 )
	SV* c_func
	double d0
	int i1
	char * t2
	char * t3
PREINIT:
	int(*func)(double, int, char *, char *);
CODE:
	func   = INT2PTR(int(*)(double, int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2, t3);
OUTPUT:
	RETVAL

void *
nci_psitt( c_func, s0, i1, t2, t3 )
	SV* c_func
	short s0
	int i1
	char * t2
	char * t3
PREINIT:
	void *(*func)(short, int, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(short, int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2, t3);
OUTPUT:
	RETVAL

void
nci_vsitt( c_func, s0, i1, t2, t3 )
	SV* c_func
	short s0
	int i1
	char * t2
	char * t3
PREINIT:
	void(*func)(short, int, char *, char *);
CODE:
	func   = INT2PTR(void(*)(short, int, char *, char *), SvIV(c_func) );
	(*func)(s0, i1, t2, t3);

double
nci_dsitt( c_func, s0, i1, t2, t3 )
	SV* c_func
	short s0
	int i1
	char * t2
	char * t3
PREINIT:
	double(*func)(short, int, char *, char *);
CODE:
	func   = INT2PTR(double(*)(short, int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2, t3);
OUTPUT:
	RETVAL

short
nci_ssitt( c_func, s0, i1, t2, t3 )
	SV* c_func
	short s0
	int i1
	char * t2
	char * t3
PREINIT:
	short(*func)(short, int, char *, char *);
CODE:
	func   = INT2PTR(short(*)(short, int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2, t3);
OUTPUT:
	RETVAL

float
nci_fsitt( c_func, s0, i1, t2, t3 )
	SV* c_func
	short s0
	int i1
	char * t2
	char * t3
PREINIT:
	float(*func)(short, int, char *, char *);
CODE:
	func   = INT2PTR(float(*)(short, int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2, t3);
OUTPUT:
	RETVAL

char *
nci_tsitt( c_func, s0, i1, t2, t3 )
	SV* c_func
	short s0
	int i1
	char * t2
	char * t3
PREINIT:
	char *(*func)(short, int, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(short, int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2, t3);
OUTPUT:
	RETVAL

int
nci_isitt( c_func, s0, i1, t2, t3 )
	SV* c_func
	short s0
	int i1
	char * t2
	char * t3
PREINIT:
	int(*func)(short, int, char *, char *);
CODE:
	func   = INT2PTR(int(*)(short, int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2, t3);
OUTPUT:
	RETVAL

void *
nci_pfitt( c_func, f0, i1, t2, t3 )
	SV* c_func
	float f0
	int i1
	char * t2
	char * t3
PREINIT:
	void *(*func)(float, int, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(float, int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2, t3);
OUTPUT:
	RETVAL

void
nci_vfitt( c_func, f0, i1, t2, t3 )
	SV* c_func
	float f0
	int i1
	char * t2
	char * t3
PREINIT:
	void(*func)(float, int, char *, char *);
CODE:
	func   = INT2PTR(void(*)(float, int, char *, char *), SvIV(c_func) );
	(*func)(f0, i1, t2, t3);

double
nci_dfitt( c_func, f0, i1, t2, t3 )
	SV* c_func
	float f0
	int i1
	char * t2
	char * t3
PREINIT:
	double(*func)(float, int, char *, char *);
CODE:
	func   = INT2PTR(double(*)(float, int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2, t3);
OUTPUT:
	RETVAL

short
nci_sfitt( c_func, f0, i1, t2, t3 )
	SV* c_func
	float f0
	int i1
	char * t2
	char * t3
PREINIT:
	short(*func)(float, int, char *, char *);
CODE:
	func   = INT2PTR(short(*)(float, int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2, t3);
OUTPUT:
	RETVAL

float
nci_ffitt( c_func, f0, i1, t2, t3 )
	SV* c_func
	float f0
	int i1
	char * t2
	char * t3
PREINIT:
	float(*func)(float, int, char *, char *);
CODE:
	func   = INT2PTR(float(*)(float, int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2, t3);
OUTPUT:
	RETVAL

char *
nci_tfitt( c_func, f0, i1, t2, t3 )
	SV* c_func
	float f0
	int i1
	char * t2
	char * t3
PREINIT:
	char *(*func)(float, int, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(float, int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2, t3);
OUTPUT:
	RETVAL

int
nci_ifitt( c_func, f0, i1, t2, t3 )
	SV* c_func
	float f0
	int i1
	char * t2
	char * t3
PREINIT:
	int(*func)(float, int, char *, char *);
CODE:
	func   = INT2PTR(int(*)(float, int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2, t3);
OUTPUT:
	RETVAL

void *
nci_ptitt( c_func, t0, i1, t2, t3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	char * t3
PREINIT:
	void *(*func)(char *, int, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2, t3);
OUTPUT:
	RETVAL

void
nci_vtitt( c_func, t0, i1, t2, t3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	char * t3
PREINIT:
	void(*func)(char *, int, char *, char *);
CODE:
	func   = INT2PTR(void(*)(char *, int, char *, char *), SvIV(c_func) );
	(*func)(t0, i1, t2, t3);

double
nci_dtitt( c_func, t0, i1, t2, t3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	char * t3
PREINIT:
	double(*func)(char *, int, char *, char *);
CODE:
	func   = INT2PTR(double(*)(char *, int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2, t3);
OUTPUT:
	RETVAL

short
nci_stitt( c_func, t0, i1, t2, t3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	char * t3
PREINIT:
	short(*func)(char *, int, char *, char *);
CODE:
	func   = INT2PTR(short(*)(char *, int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2, t3);
OUTPUT:
	RETVAL

float
nci_ftitt( c_func, t0, i1, t2, t3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	char * t3
PREINIT:
	float(*func)(char *, int, char *, char *);
CODE:
	func   = INT2PTR(float(*)(char *, int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2, t3);
OUTPUT:
	RETVAL

char *
nci_ttitt( c_func, t0, i1, t2, t3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	char * t3
PREINIT:
	char *(*func)(char *, int, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2, t3);
OUTPUT:
	RETVAL

int
nci_ititt( c_func, t0, i1, t2, t3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	char * t3
PREINIT:
	int(*func)(char *, int, char *, char *);
CODE:
	func   = INT2PTR(int(*)(char *, int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2, t3);
OUTPUT:
	RETVAL

void *
nci_piitt( c_func, i0, i1, t2, t3 )
	SV* c_func
	int i0
	int i1
	char * t2
	char * t3
PREINIT:
	void *(*func)(int, int, char *, char *);
CODE:
	func   = INT2PTR(void *(*)(int, int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2, t3);
OUTPUT:
	RETVAL

void
nci_viitt( c_func, i0, i1, t2, t3 )
	SV* c_func
	int i0
	int i1
	char * t2
	char * t3
PREINIT:
	void(*func)(int, int, char *, char *);
CODE:
	func   = INT2PTR(void(*)(int, int, char *, char *), SvIV(c_func) );
	(*func)(i0, i1, t2, t3);

double
nci_diitt( c_func, i0, i1, t2, t3 )
	SV* c_func
	int i0
	int i1
	char * t2
	char * t3
PREINIT:
	double(*func)(int, int, char *, char *);
CODE:
	func   = INT2PTR(double(*)(int, int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2, t3);
OUTPUT:
	RETVAL

short
nci_siitt( c_func, i0, i1, t2, t3 )
	SV* c_func
	int i0
	int i1
	char * t2
	char * t3
PREINIT:
	short(*func)(int, int, char *, char *);
CODE:
	func   = INT2PTR(short(*)(int, int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2, t3);
OUTPUT:
	RETVAL

float
nci_fiitt( c_func, i0, i1, t2, t3 )
	SV* c_func
	int i0
	int i1
	char * t2
	char * t3
PREINIT:
	float(*func)(int, int, char *, char *);
CODE:
	func   = INT2PTR(float(*)(int, int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2, t3);
OUTPUT:
	RETVAL

char *
nci_tiitt( c_func, i0, i1, t2, t3 )
	SV* c_func
	int i0
	int i1
	char * t2
	char * t3
PREINIT:
	char *(*func)(int, int, char *, char *);
CODE:
	func   = INT2PTR(char *(*)(int, int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2, t3);
OUTPUT:
	RETVAL

int
nci_iiitt( c_func, i0, i1, t2, t3 )
	SV* c_func
	int i0
	int i1
	char * t2
	char * t3
PREINIT:
	int(*func)(int, int, char *, char *);
CODE:
	func   = INT2PTR(int(*)(int, int, char *, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2, t3);
OUTPUT:
	RETVAL

void *
nci_pppit( c_func, p0, p1, i2, t3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	char * t3
PREINIT:
	void *(*func)(void *, void *, int, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2, t3);
OUTPUT:
	RETVAL

void
nci_vppit( c_func, p0, p1, i2, t3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	char * t3
PREINIT:
	void(*func)(void *, void *, int, char *);
CODE:
	func   = INT2PTR(void(*)(void *, void *, int, char *), SvIV(c_func) );
	(*func)(p0, p1, i2, t3);

double
nci_dppit( c_func, p0, p1, i2, t3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	char * t3
PREINIT:
	double(*func)(void *, void *, int, char *);
CODE:
	func   = INT2PTR(double(*)(void *, void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2, t3);
OUTPUT:
	RETVAL

short
nci_sppit( c_func, p0, p1, i2, t3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	char * t3
PREINIT:
	short(*func)(void *, void *, int, char *);
CODE:
	func   = INT2PTR(short(*)(void *, void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2, t3);
OUTPUT:
	RETVAL

float
nci_fppit( c_func, p0, p1, i2, t3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	char * t3
PREINIT:
	float(*func)(void *, void *, int, char *);
CODE:
	func   = INT2PTR(float(*)(void *, void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2, t3);
OUTPUT:
	RETVAL

char *
nci_tppit( c_func, p0, p1, i2, t3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	char * t3
PREINIT:
	char *(*func)(void *, void *, int, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2, t3);
OUTPUT:
	RETVAL

int
nci_ippit( c_func, p0, p1, i2, t3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	char * t3
PREINIT:
	int(*func)(void *, void *, int, char *);
CODE:
	func   = INT2PTR(int(*)(void *, void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2, t3);
OUTPUT:
	RETVAL

void *
nci_pvpit( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvpit( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvpit( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svpit( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvpit( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvpit( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivpit( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdpit( c_func, d0, p1, i2, t3 )
	SV* c_func
	double d0
	void * p1
	int i2
	char * t3
PREINIT:
	void *(*func)(double, void *, int, char *);
CODE:
	func   = INT2PTR(void *(*)(double, void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2, t3);
OUTPUT:
	RETVAL

void
nci_vdpit( c_func, d0, p1, i2, t3 )
	SV* c_func
	double d0
	void * p1
	int i2
	char * t3
PREINIT:
	void(*func)(double, void *, int, char *);
CODE:
	func   = INT2PTR(void(*)(double, void *, int, char *), SvIV(c_func) );
	(*func)(d0, p1, i2, t3);

double
nci_ddpit( c_func, d0, p1, i2, t3 )
	SV* c_func
	double d0
	void * p1
	int i2
	char * t3
PREINIT:
	double(*func)(double, void *, int, char *);
CODE:
	func   = INT2PTR(double(*)(double, void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2, t3);
OUTPUT:
	RETVAL

short
nci_sdpit( c_func, d0, p1, i2, t3 )
	SV* c_func
	double d0
	void * p1
	int i2
	char * t3
PREINIT:
	short(*func)(double, void *, int, char *);
CODE:
	func   = INT2PTR(short(*)(double, void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2, t3);
OUTPUT:
	RETVAL

float
nci_fdpit( c_func, d0, p1, i2, t3 )
	SV* c_func
	double d0
	void * p1
	int i2
	char * t3
PREINIT:
	float(*func)(double, void *, int, char *);
CODE:
	func   = INT2PTR(float(*)(double, void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2, t3);
OUTPUT:
	RETVAL

char *
nci_tdpit( c_func, d0, p1, i2, t3 )
	SV* c_func
	double d0
	void * p1
	int i2
	char * t3
PREINIT:
	char *(*func)(double, void *, int, char *);
CODE:
	func   = INT2PTR(char *(*)(double, void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2, t3);
OUTPUT:
	RETVAL

int
nci_idpit( c_func, d0, p1, i2, t3 )
	SV* c_func
	double d0
	void * p1
	int i2
	char * t3
PREINIT:
	int(*func)(double, void *, int, char *);
CODE:
	func   = INT2PTR(int(*)(double, void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2, t3);
OUTPUT:
	RETVAL

void *
nci_pspit( c_func, s0, p1, i2, t3 )
	SV* c_func
	short s0
	void * p1
	int i2
	char * t3
PREINIT:
	void *(*func)(short, void *, int, char *);
CODE:
	func   = INT2PTR(void *(*)(short, void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2, t3);
OUTPUT:
	RETVAL

void
nci_vspit( c_func, s0, p1, i2, t3 )
	SV* c_func
	short s0
	void * p1
	int i2
	char * t3
PREINIT:
	void(*func)(short, void *, int, char *);
CODE:
	func   = INT2PTR(void(*)(short, void *, int, char *), SvIV(c_func) );
	(*func)(s0, p1, i2, t3);

double
nci_dspit( c_func, s0, p1, i2, t3 )
	SV* c_func
	short s0
	void * p1
	int i2
	char * t3
PREINIT:
	double(*func)(short, void *, int, char *);
CODE:
	func   = INT2PTR(double(*)(short, void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2, t3);
OUTPUT:
	RETVAL

short
nci_sspit( c_func, s0, p1, i2, t3 )
	SV* c_func
	short s0
	void * p1
	int i2
	char * t3
PREINIT:
	short(*func)(short, void *, int, char *);
CODE:
	func   = INT2PTR(short(*)(short, void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2, t3);
OUTPUT:
	RETVAL

float
nci_fspit( c_func, s0, p1, i2, t3 )
	SV* c_func
	short s0
	void * p1
	int i2
	char * t3
PREINIT:
	float(*func)(short, void *, int, char *);
CODE:
	func   = INT2PTR(float(*)(short, void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2, t3);
OUTPUT:
	RETVAL

char *
nci_tspit( c_func, s0, p1, i2, t3 )
	SV* c_func
	short s0
	void * p1
	int i2
	char * t3
PREINIT:
	char *(*func)(short, void *, int, char *);
CODE:
	func   = INT2PTR(char *(*)(short, void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2, t3);
OUTPUT:
	RETVAL

int
nci_ispit( c_func, s0, p1, i2, t3 )
	SV* c_func
	short s0
	void * p1
	int i2
	char * t3
PREINIT:
	int(*func)(short, void *, int, char *);
CODE:
	func   = INT2PTR(int(*)(short, void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2, t3);
OUTPUT:
	RETVAL

void *
nci_pfpit( c_func, f0, p1, i2, t3 )
	SV* c_func
	float f0
	void * p1
	int i2
	char * t3
PREINIT:
	void *(*func)(float, void *, int, char *);
CODE:
	func   = INT2PTR(void *(*)(float, void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2, t3);
OUTPUT:
	RETVAL

void
nci_vfpit( c_func, f0, p1, i2, t3 )
	SV* c_func
	float f0
	void * p1
	int i2
	char * t3
PREINIT:
	void(*func)(float, void *, int, char *);
CODE:
	func   = INT2PTR(void(*)(float, void *, int, char *), SvIV(c_func) );
	(*func)(f0, p1, i2, t3);

double
nci_dfpit( c_func, f0, p1, i2, t3 )
	SV* c_func
	float f0
	void * p1
	int i2
	char * t3
PREINIT:
	double(*func)(float, void *, int, char *);
CODE:
	func   = INT2PTR(double(*)(float, void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2, t3);
OUTPUT:
	RETVAL

short
nci_sfpit( c_func, f0, p1, i2, t3 )
	SV* c_func
	float f0
	void * p1
	int i2
	char * t3
PREINIT:
	short(*func)(float, void *, int, char *);
CODE:
	func   = INT2PTR(short(*)(float, void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2, t3);
OUTPUT:
	RETVAL

float
nci_ffpit( c_func, f0, p1, i2, t3 )
	SV* c_func
	float f0
	void * p1
	int i2
	char * t3
PREINIT:
	float(*func)(float, void *, int, char *);
CODE:
	func   = INT2PTR(float(*)(float, void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2, t3);
OUTPUT:
	RETVAL

char *
nci_tfpit( c_func, f0, p1, i2, t3 )
	SV* c_func
	float f0
	void * p1
	int i2
	char * t3
PREINIT:
	char *(*func)(float, void *, int, char *);
CODE:
	func   = INT2PTR(char *(*)(float, void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2, t3);
OUTPUT:
	RETVAL

int
nci_ifpit( c_func, f0, p1, i2, t3 )
	SV* c_func
	float f0
	void * p1
	int i2
	char * t3
PREINIT:
	int(*func)(float, void *, int, char *);
CODE:
	func   = INT2PTR(int(*)(float, void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2, t3);
OUTPUT:
	RETVAL

void *
nci_ptpit( c_func, t0, p1, i2, t3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	char * t3
PREINIT:
	void *(*func)(char *, void *, int, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2, t3);
OUTPUT:
	RETVAL

void
nci_vtpit( c_func, t0, p1, i2, t3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	char * t3
PREINIT:
	void(*func)(char *, void *, int, char *);
CODE:
	func   = INT2PTR(void(*)(char *, void *, int, char *), SvIV(c_func) );
	(*func)(t0, p1, i2, t3);

double
nci_dtpit( c_func, t0, p1, i2, t3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	char * t3
PREINIT:
	double(*func)(char *, void *, int, char *);
CODE:
	func   = INT2PTR(double(*)(char *, void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2, t3);
OUTPUT:
	RETVAL

short
nci_stpit( c_func, t0, p1, i2, t3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	char * t3
PREINIT:
	short(*func)(char *, void *, int, char *);
CODE:
	func   = INT2PTR(short(*)(char *, void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2, t3);
OUTPUT:
	RETVAL

float
nci_ftpit( c_func, t0, p1, i2, t3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	char * t3
PREINIT:
	float(*func)(char *, void *, int, char *);
CODE:
	func   = INT2PTR(float(*)(char *, void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2, t3);
OUTPUT:
	RETVAL

char *
nci_ttpit( c_func, t0, p1, i2, t3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	char * t3
PREINIT:
	char *(*func)(char *, void *, int, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2, t3);
OUTPUT:
	RETVAL

int
nci_itpit( c_func, t0, p1, i2, t3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	char * t3
PREINIT:
	int(*func)(char *, void *, int, char *);
CODE:
	func   = INT2PTR(int(*)(char *, void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2, t3);
OUTPUT:
	RETVAL

void *
nci_pipit( c_func, i0, p1, i2, t3 )
	SV* c_func
	int i0
	void * p1
	int i2
	char * t3
PREINIT:
	void *(*func)(int, void *, int, char *);
CODE:
	func   = INT2PTR(void *(*)(int, void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2, t3);
OUTPUT:
	RETVAL

void
nci_vipit( c_func, i0, p1, i2, t3 )
	SV* c_func
	int i0
	void * p1
	int i2
	char * t3
PREINIT:
	void(*func)(int, void *, int, char *);
CODE:
	func   = INT2PTR(void(*)(int, void *, int, char *), SvIV(c_func) );
	(*func)(i0, p1, i2, t3);

double
nci_dipit( c_func, i0, p1, i2, t3 )
	SV* c_func
	int i0
	void * p1
	int i2
	char * t3
PREINIT:
	double(*func)(int, void *, int, char *);
CODE:
	func   = INT2PTR(double(*)(int, void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2, t3);
OUTPUT:
	RETVAL

short
nci_sipit( c_func, i0, p1, i2, t3 )
	SV* c_func
	int i0
	void * p1
	int i2
	char * t3
PREINIT:
	short(*func)(int, void *, int, char *);
CODE:
	func   = INT2PTR(short(*)(int, void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2, t3);
OUTPUT:
	RETVAL

float
nci_fipit( c_func, i0, p1, i2, t3 )
	SV* c_func
	int i0
	void * p1
	int i2
	char * t3
PREINIT:
	float(*func)(int, void *, int, char *);
CODE:
	func   = INT2PTR(float(*)(int, void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2, t3);
OUTPUT:
	RETVAL

char *
nci_tipit( c_func, i0, p1, i2, t3 )
	SV* c_func
	int i0
	void * p1
	int i2
	char * t3
PREINIT:
	char *(*func)(int, void *, int, char *);
CODE:
	func   = INT2PTR(char *(*)(int, void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2, t3);
OUTPUT:
	RETVAL

int
nci_iipit( c_func, i0, p1, i2, t3 )
	SV* c_func
	int i0
	void * p1
	int i2
	char * t3
PREINIT:
	int(*func)(int, void *, int, char *);
CODE:
	func   = INT2PTR(int(*)(int, void *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2, t3);
OUTPUT:
	RETVAL

void *
nci_ppdit( c_func, p0, d1, i2, t3 )
	SV* c_func
	void * p0
	double d1
	int i2
	char * t3
PREINIT:
	void *(*func)(void *, double, int, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2, t3);
OUTPUT:
	RETVAL

void
nci_vpdit( c_func, p0, d1, i2, t3 )
	SV* c_func
	void * p0
	double d1
	int i2
	char * t3
PREINIT:
	void(*func)(void *, double, int, char *);
CODE:
	func   = INT2PTR(void(*)(void *, double, int, char *), SvIV(c_func) );
	(*func)(p0, d1, i2, t3);

double
nci_dpdit( c_func, p0, d1, i2, t3 )
	SV* c_func
	void * p0
	double d1
	int i2
	char * t3
PREINIT:
	double(*func)(void *, double, int, char *);
CODE:
	func   = INT2PTR(double(*)(void *, double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2, t3);
OUTPUT:
	RETVAL

short
nci_spdit( c_func, p0, d1, i2, t3 )
	SV* c_func
	void * p0
	double d1
	int i2
	char * t3
PREINIT:
	short(*func)(void *, double, int, char *);
CODE:
	func   = INT2PTR(short(*)(void *, double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2, t3);
OUTPUT:
	RETVAL

float
nci_fpdit( c_func, p0, d1, i2, t3 )
	SV* c_func
	void * p0
	double d1
	int i2
	char * t3
PREINIT:
	float(*func)(void *, double, int, char *);
CODE:
	func   = INT2PTR(float(*)(void *, double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2, t3);
OUTPUT:
	RETVAL

char *
nci_tpdit( c_func, p0, d1, i2, t3 )
	SV* c_func
	void * p0
	double d1
	int i2
	char * t3
PREINIT:
	char *(*func)(void *, double, int, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2, t3);
OUTPUT:
	RETVAL

int
nci_ipdit( c_func, p0, d1, i2, t3 )
	SV* c_func
	void * p0
	double d1
	int i2
	char * t3
PREINIT:
	int(*func)(void *, double, int, char *);
CODE:
	func   = INT2PTR(int(*)(void *, double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2, t3);
OUTPUT:
	RETVAL

void *
nci_pvdit( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvdit( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvdit( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svdit( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvdit( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvdit( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivdit( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pddit( c_func, d0, d1, i2, t3 )
	SV* c_func
	double d0
	double d1
	int i2
	char * t3
PREINIT:
	void *(*func)(double, double, int, char *);
CODE:
	func   = INT2PTR(void *(*)(double, double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2, t3);
OUTPUT:
	RETVAL

void
nci_vddit( c_func, d0, d1, i2, t3 )
	SV* c_func
	double d0
	double d1
	int i2
	char * t3
PREINIT:
	void(*func)(double, double, int, char *);
CODE:
	func   = INT2PTR(void(*)(double, double, int, char *), SvIV(c_func) );
	(*func)(d0, d1, i2, t3);

double
nci_dddit( c_func, d0, d1, i2, t3 )
	SV* c_func
	double d0
	double d1
	int i2
	char * t3
PREINIT:
	double(*func)(double, double, int, char *);
CODE:
	func   = INT2PTR(double(*)(double, double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2, t3);
OUTPUT:
	RETVAL

short
nci_sddit( c_func, d0, d1, i2, t3 )
	SV* c_func
	double d0
	double d1
	int i2
	char * t3
PREINIT:
	short(*func)(double, double, int, char *);
CODE:
	func   = INT2PTR(short(*)(double, double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2, t3);
OUTPUT:
	RETVAL

float
nci_fddit( c_func, d0, d1, i2, t3 )
	SV* c_func
	double d0
	double d1
	int i2
	char * t3
PREINIT:
	float(*func)(double, double, int, char *);
CODE:
	func   = INT2PTR(float(*)(double, double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2, t3);
OUTPUT:
	RETVAL

char *
nci_tddit( c_func, d0, d1, i2, t3 )
	SV* c_func
	double d0
	double d1
	int i2
	char * t3
PREINIT:
	char *(*func)(double, double, int, char *);
CODE:
	func   = INT2PTR(char *(*)(double, double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2, t3);
OUTPUT:
	RETVAL

int
nci_iddit( c_func, d0, d1, i2, t3 )
	SV* c_func
	double d0
	double d1
	int i2
	char * t3
PREINIT:
	int(*func)(double, double, int, char *);
CODE:
	func   = INT2PTR(int(*)(double, double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2, t3);
OUTPUT:
	RETVAL

void *
nci_psdit( c_func, s0, d1, i2, t3 )
	SV* c_func
	short s0
	double d1
	int i2
	char * t3
PREINIT:
	void *(*func)(short, double, int, char *);
CODE:
	func   = INT2PTR(void *(*)(short, double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2, t3);
OUTPUT:
	RETVAL

void
nci_vsdit( c_func, s0, d1, i2, t3 )
	SV* c_func
	short s0
	double d1
	int i2
	char * t3
PREINIT:
	void(*func)(short, double, int, char *);
CODE:
	func   = INT2PTR(void(*)(short, double, int, char *), SvIV(c_func) );
	(*func)(s0, d1, i2, t3);

double
nci_dsdit( c_func, s0, d1, i2, t3 )
	SV* c_func
	short s0
	double d1
	int i2
	char * t3
PREINIT:
	double(*func)(short, double, int, char *);
CODE:
	func   = INT2PTR(double(*)(short, double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2, t3);
OUTPUT:
	RETVAL

short
nci_ssdit( c_func, s0, d1, i2, t3 )
	SV* c_func
	short s0
	double d1
	int i2
	char * t3
PREINIT:
	short(*func)(short, double, int, char *);
CODE:
	func   = INT2PTR(short(*)(short, double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2, t3);
OUTPUT:
	RETVAL

float
nci_fsdit( c_func, s0, d1, i2, t3 )
	SV* c_func
	short s0
	double d1
	int i2
	char * t3
PREINIT:
	float(*func)(short, double, int, char *);
CODE:
	func   = INT2PTR(float(*)(short, double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2, t3);
OUTPUT:
	RETVAL

char *
nci_tsdit( c_func, s0, d1, i2, t3 )
	SV* c_func
	short s0
	double d1
	int i2
	char * t3
PREINIT:
	char *(*func)(short, double, int, char *);
CODE:
	func   = INT2PTR(char *(*)(short, double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2, t3);
OUTPUT:
	RETVAL

int
nci_isdit( c_func, s0, d1, i2, t3 )
	SV* c_func
	short s0
	double d1
	int i2
	char * t3
PREINIT:
	int(*func)(short, double, int, char *);
CODE:
	func   = INT2PTR(int(*)(short, double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2, t3);
OUTPUT:
	RETVAL

void *
nci_pfdit( c_func, f0, d1, i2, t3 )
	SV* c_func
	float f0
	double d1
	int i2
	char * t3
PREINIT:
	void *(*func)(float, double, int, char *);
CODE:
	func   = INT2PTR(void *(*)(float, double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2, t3);
OUTPUT:
	RETVAL

void
nci_vfdit( c_func, f0, d1, i2, t3 )
	SV* c_func
	float f0
	double d1
	int i2
	char * t3
PREINIT:
	void(*func)(float, double, int, char *);
CODE:
	func   = INT2PTR(void(*)(float, double, int, char *), SvIV(c_func) );
	(*func)(f0, d1, i2, t3);

double
nci_dfdit( c_func, f0, d1, i2, t3 )
	SV* c_func
	float f0
	double d1
	int i2
	char * t3
PREINIT:
	double(*func)(float, double, int, char *);
CODE:
	func   = INT2PTR(double(*)(float, double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2, t3);
OUTPUT:
	RETVAL

short
nci_sfdit( c_func, f0, d1, i2, t3 )
	SV* c_func
	float f0
	double d1
	int i2
	char * t3
PREINIT:
	short(*func)(float, double, int, char *);
CODE:
	func   = INT2PTR(short(*)(float, double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2, t3);
OUTPUT:
	RETVAL

float
nci_ffdit( c_func, f0, d1, i2, t3 )
	SV* c_func
	float f0
	double d1
	int i2
	char * t3
PREINIT:
	float(*func)(float, double, int, char *);
CODE:
	func   = INT2PTR(float(*)(float, double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2, t3);
OUTPUT:
	RETVAL

char *
nci_tfdit( c_func, f0, d1, i2, t3 )
	SV* c_func
	float f0
	double d1
	int i2
	char * t3
PREINIT:
	char *(*func)(float, double, int, char *);
CODE:
	func   = INT2PTR(char *(*)(float, double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2, t3);
OUTPUT:
	RETVAL

int
nci_ifdit( c_func, f0, d1, i2, t3 )
	SV* c_func
	float f0
	double d1
	int i2
	char * t3
PREINIT:
	int(*func)(float, double, int, char *);
CODE:
	func   = INT2PTR(int(*)(float, double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2, t3);
OUTPUT:
	RETVAL

void *
nci_ptdit( c_func, t0, d1, i2, t3 )
	SV* c_func
	char * t0
	double d1
	int i2
	char * t3
PREINIT:
	void *(*func)(char *, double, int, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2, t3);
OUTPUT:
	RETVAL

void
nci_vtdit( c_func, t0, d1, i2, t3 )
	SV* c_func
	char * t0
	double d1
	int i2
	char * t3
PREINIT:
	void(*func)(char *, double, int, char *);
CODE:
	func   = INT2PTR(void(*)(char *, double, int, char *), SvIV(c_func) );
	(*func)(t0, d1, i2, t3);

double
nci_dtdit( c_func, t0, d1, i2, t3 )
	SV* c_func
	char * t0
	double d1
	int i2
	char * t3
PREINIT:
	double(*func)(char *, double, int, char *);
CODE:
	func   = INT2PTR(double(*)(char *, double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2, t3);
OUTPUT:
	RETVAL

short
nci_stdit( c_func, t0, d1, i2, t3 )
	SV* c_func
	char * t0
	double d1
	int i2
	char * t3
PREINIT:
	short(*func)(char *, double, int, char *);
CODE:
	func   = INT2PTR(short(*)(char *, double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2, t3);
OUTPUT:
	RETVAL

float
nci_ftdit( c_func, t0, d1, i2, t3 )
	SV* c_func
	char * t0
	double d1
	int i2
	char * t3
PREINIT:
	float(*func)(char *, double, int, char *);
CODE:
	func   = INT2PTR(float(*)(char *, double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2, t3);
OUTPUT:
	RETVAL

char *
nci_ttdit( c_func, t0, d1, i2, t3 )
	SV* c_func
	char * t0
	double d1
	int i2
	char * t3
PREINIT:
	char *(*func)(char *, double, int, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2, t3);
OUTPUT:
	RETVAL

int
nci_itdit( c_func, t0, d1, i2, t3 )
	SV* c_func
	char * t0
	double d1
	int i2
	char * t3
PREINIT:
	int(*func)(char *, double, int, char *);
CODE:
	func   = INT2PTR(int(*)(char *, double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2, t3);
OUTPUT:
	RETVAL

void *
nci_pidit( c_func, i0, d1, i2, t3 )
	SV* c_func
	int i0
	double d1
	int i2
	char * t3
PREINIT:
	void *(*func)(int, double, int, char *);
CODE:
	func   = INT2PTR(void *(*)(int, double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2, t3);
OUTPUT:
	RETVAL

void
nci_vidit( c_func, i0, d1, i2, t3 )
	SV* c_func
	int i0
	double d1
	int i2
	char * t3
PREINIT:
	void(*func)(int, double, int, char *);
CODE:
	func   = INT2PTR(void(*)(int, double, int, char *), SvIV(c_func) );
	(*func)(i0, d1, i2, t3);

double
nci_didit( c_func, i0, d1, i2, t3 )
	SV* c_func
	int i0
	double d1
	int i2
	char * t3
PREINIT:
	double(*func)(int, double, int, char *);
CODE:
	func   = INT2PTR(double(*)(int, double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2, t3);
OUTPUT:
	RETVAL

short
nci_sidit( c_func, i0, d1, i2, t3 )
	SV* c_func
	int i0
	double d1
	int i2
	char * t3
PREINIT:
	short(*func)(int, double, int, char *);
CODE:
	func   = INT2PTR(short(*)(int, double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2, t3);
OUTPUT:
	RETVAL

float
nci_fidit( c_func, i0, d1, i2, t3 )
	SV* c_func
	int i0
	double d1
	int i2
	char * t3
PREINIT:
	float(*func)(int, double, int, char *);
CODE:
	func   = INT2PTR(float(*)(int, double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2, t3);
OUTPUT:
	RETVAL

char *
nci_tidit( c_func, i0, d1, i2, t3 )
	SV* c_func
	int i0
	double d1
	int i2
	char * t3
PREINIT:
	char *(*func)(int, double, int, char *);
CODE:
	func   = INT2PTR(char *(*)(int, double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2, t3);
OUTPUT:
	RETVAL

int
nci_iidit( c_func, i0, d1, i2, t3 )
	SV* c_func
	int i0
	double d1
	int i2
	char * t3
PREINIT:
	int(*func)(int, double, int, char *);
CODE:
	func   = INT2PTR(int(*)(int, double, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2, t3);
OUTPUT:
	RETVAL

void *
nci_ppsit( c_func, p0, s1, i2, t3 )
	SV* c_func
	void * p0
	short s1
	int i2
	char * t3
PREINIT:
	void *(*func)(void *, short, int, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2, t3);
OUTPUT:
	RETVAL

void
nci_vpsit( c_func, p0, s1, i2, t3 )
	SV* c_func
	void * p0
	short s1
	int i2
	char * t3
PREINIT:
	void(*func)(void *, short, int, char *);
CODE:
	func   = INT2PTR(void(*)(void *, short, int, char *), SvIV(c_func) );
	(*func)(p0, s1, i2, t3);

double
nci_dpsit( c_func, p0, s1, i2, t3 )
	SV* c_func
	void * p0
	short s1
	int i2
	char * t3
PREINIT:
	double(*func)(void *, short, int, char *);
CODE:
	func   = INT2PTR(double(*)(void *, short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2, t3);
OUTPUT:
	RETVAL

short
nci_spsit( c_func, p0, s1, i2, t3 )
	SV* c_func
	void * p0
	short s1
	int i2
	char * t3
PREINIT:
	short(*func)(void *, short, int, char *);
CODE:
	func   = INT2PTR(short(*)(void *, short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2, t3);
OUTPUT:
	RETVAL

float
nci_fpsit( c_func, p0, s1, i2, t3 )
	SV* c_func
	void * p0
	short s1
	int i2
	char * t3
PREINIT:
	float(*func)(void *, short, int, char *);
CODE:
	func   = INT2PTR(float(*)(void *, short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2, t3);
OUTPUT:
	RETVAL

char *
nci_tpsit( c_func, p0, s1, i2, t3 )
	SV* c_func
	void * p0
	short s1
	int i2
	char * t3
PREINIT:
	char *(*func)(void *, short, int, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2, t3);
OUTPUT:
	RETVAL

int
nci_ipsit( c_func, p0, s1, i2, t3 )
	SV* c_func
	void * p0
	short s1
	int i2
	char * t3
PREINIT:
	int(*func)(void *, short, int, char *);
CODE:
	func   = INT2PTR(int(*)(void *, short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2, t3);
OUTPUT:
	RETVAL

void *
nci_pvsit( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvsit( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvsit( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svsit( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvsit( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvsit( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivsit( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdsit( c_func, d0, s1, i2, t3 )
	SV* c_func
	double d0
	short s1
	int i2
	char * t3
PREINIT:
	void *(*func)(double, short, int, char *);
CODE:
	func   = INT2PTR(void *(*)(double, short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2, t3);
OUTPUT:
	RETVAL

void
nci_vdsit( c_func, d0, s1, i2, t3 )
	SV* c_func
	double d0
	short s1
	int i2
	char * t3
PREINIT:
	void(*func)(double, short, int, char *);
CODE:
	func   = INT2PTR(void(*)(double, short, int, char *), SvIV(c_func) );
	(*func)(d0, s1, i2, t3);

double
nci_ddsit( c_func, d0, s1, i2, t3 )
	SV* c_func
	double d0
	short s1
	int i2
	char * t3
PREINIT:
	double(*func)(double, short, int, char *);
CODE:
	func   = INT2PTR(double(*)(double, short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2, t3);
OUTPUT:
	RETVAL

short
nci_sdsit( c_func, d0, s1, i2, t3 )
	SV* c_func
	double d0
	short s1
	int i2
	char * t3
PREINIT:
	short(*func)(double, short, int, char *);
CODE:
	func   = INT2PTR(short(*)(double, short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2, t3);
OUTPUT:
	RETVAL

float
nci_fdsit( c_func, d0, s1, i2, t3 )
	SV* c_func
	double d0
	short s1
	int i2
	char * t3
PREINIT:
	float(*func)(double, short, int, char *);
CODE:
	func   = INT2PTR(float(*)(double, short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2, t3);
OUTPUT:
	RETVAL

char *
nci_tdsit( c_func, d0, s1, i2, t3 )
	SV* c_func
	double d0
	short s1
	int i2
	char * t3
PREINIT:
	char *(*func)(double, short, int, char *);
CODE:
	func   = INT2PTR(char *(*)(double, short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2, t3);
OUTPUT:
	RETVAL

int
nci_idsit( c_func, d0, s1, i2, t3 )
	SV* c_func
	double d0
	short s1
	int i2
	char * t3
PREINIT:
	int(*func)(double, short, int, char *);
CODE:
	func   = INT2PTR(int(*)(double, short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2, t3);
OUTPUT:
	RETVAL

void *
nci_pssit( c_func, s0, s1, i2, t3 )
	SV* c_func
	short s0
	short s1
	int i2
	char * t3
PREINIT:
	void *(*func)(short, short, int, char *);
CODE:
	func   = INT2PTR(void *(*)(short, short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2, t3);
OUTPUT:
	RETVAL

void
nci_vssit( c_func, s0, s1, i2, t3 )
	SV* c_func
	short s0
	short s1
	int i2
	char * t3
PREINIT:
	void(*func)(short, short, int, char *);
CODE:
	func   = INT2PTR(void(*)(short, short, int, char *), SvIV(c_func) );
	(*func)(s0, s1, i2, t3);

double
nci_dssit( c_func, s0, s1, i2, t3 )
	SV* c_func
	short s0
	short s1
	int i2
	char * t3
PREINIT:
	double(*func)(short, short, int, char *);
CODE:
	func   = INT2PTR(double(*)(short, short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2, t3);
OUTPUT:
	RETVAL

short
nci_sssit( c_func, s0, s1, i2, t3 )
	SV* c_func
	short s0
	short s1
	int i2
	char * t3
PREINIT:
	short(*func)(short, short, int, char *);
CODE:
	func   = INT2PTR(short(*)(short, short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2, t3);
OUTPUT:
	RETVAL

float
nci_fssit( c_func, s0, s1, i2, t3 )
	SV* c_func
	short s0
	short s1
	int i2
	char * t3
PREINIT:
	float(*func)(short, short, int, char *);
CODE:
	func   = INT2PTR(float(*)(short, short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2, t3);
OUTPUT:
	RETVAL

char *
nci_tssit( c_func, s0, s1, i2, t3 )
	SV* c_func
	short s0
	short s1
	int i2
	char * t3
PREINIT:
	char *(*func)(short, short, int, char *);
CODE:
	func   = INT2PTR(char *(*)(short, short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2, t3);
OUTPUT:
	RETVAL

int
nci_issit( c_func, s0, s1, i2, t3 )
	SV* c_func
	short s0
	short s1
	int i2
	char * t3
PREINIT:
	int(*func)(short, short, int, char *);
CODE:
	func   = INT2PTR(int(*)(short, short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2, t3);
OUTPUT:
	RETVAL

void *
nci_pfsit( c_func, f0, s1, i2, t3 )
	SV* c_func
	float f0
	short s1
	int i2
	char * t3
PREINIT:
	void *(*func)(float, short, int, char *);
CODE:
	func   = INT2PTR(void *(*)(float, short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2, t3);
OUTPUT:
	RETVAL

void
nci_vfsit( c_func, f0, s1, i2, t3 )
	SV* c_func
	float f0
	short s1
	int i2
	char * t3
PREINIT:
	void(*func)(float, short, int, char *);
CODE:
	func   = INT2PTR(void(*)(float, short, int, char *), SvIV(c_func) );
	(*func)(f0, s1, i2, t3);

double
nci_dfsit( c_func, f0, s1, i2, t3 )
	SV* c_func
	float f0
	short s1
	int i2
	char * t3
PREINIT:
	double(*func)(float, short, int, char *);
CODE:
	func   = INT2PTR(double(*)(float, short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2, t3);
OUTPUT:
	RETVAL

short
nci_sfsit( c_func, f0, s1, i2, t3 )
	SV* c_func
	float f0
	short s1
	int i2
	char * t3
PREINIT:
	short(*func)(float, short, int, char *);
CODE:
	func   = INT2PTR(short(*)(float, short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2, t3);
OUTPUT:
	RETVAL

float
nci_ffsit( c_func, f0, s1, i2, t3 )
	SV* c_func
	float f0
	short s1
	int i2
	char * t3
PREINIT:
	float(*func)(float, short, int, char *);
CODE:
	func   = INT2PTR(float(*)(float, short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2, t3);
OUTPUT:
	RETVAL

char *
nci_tfsit( c_func, f0, s1, i2, t3 )
	SV* c_func
	float f0
	short s1
	int i2
	char * t3
PREINIT:
	char *(*func)(float, short, int, char *);
CODE:
	func   = INT2PTR(char *(*)(float, short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2, t3);
OUTPUT:
	RETVAL

int
nci_ifsit( c_func, f0, s1, i2, t3 )
	SV* c_func
	float f0
	short s1
	int i2
	char * t3
PREINIT:
	int(*func)(float, short, int, char *);
CODE:
	func   = INT2PTR(int(*)(float, short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2, t3);
OUTPUT:
	RETVAL

void *
nci_ptsit( c_func, t0, s1, i2, t3 )
	SV* c_func
	char * t0
	short s1
	int i2
	char * t3
PREINIT:
	void *(*func)(char *, short, int, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2, t3);
OUTPUT:
	RETVAL

void
nci_vtsit( c_func, t0, s1, i2, t3 )
	SV* c_func
	char * t0
	short s1
	int i2
	char * t3
PREINIT:
	void(*func)(char *, short, int, char *);
CODE:
	func   = INT2PTR(void(*)(char *, short, int, char *), SvIV(c_func) );
	(*func)(t0, s1, i2, t3);

double
nci_dtsit( c_func, t0, s1, i2, t3 )
	SV* c_func
	char * t0
	short s1
	int i2
	char * t3
PREINIT:
	double(*func)(char *, short, int, char *);
CODE:
	func   = INT2PTR(double(*)(char *, short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2, t3);
OUTPUT:
	RETVAL

short
nci_stsit( c_func, t0, s1, i2, t3 )
	SV* c_func
	char * t0
	short s1
	int i2
	char * t3
PREINIT:
	short(*func)(char *, short, int, char *);
CODE:
	func   = INT2PTR(short(*)(char *, short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2, t3);
OUTPUT:
	RETVAL

float
nci_ftsit( c_func, t0, s1, i2, t3 )
	SV* c_func
	char * t0
	short s1
	int i2
	char * t3
PREINIT:
	float(*func)(char *, short, int, char *);
CODE:
	func   = INT2PTR(float(*)(char *, short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2, t3);
OUTPUT:
	RETVAL

char *
nci_ttsit( c_func, t0, s1, i2, t3 )
	SV* c_func
	char * t0
	short s1
	int i2
	char * t3
PREINIT:
	char *(*func)(char *, short, int, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2, t3);
OUTPUT:
	RETVAL

int
nci_itsit( c_func, t0, s1, i2, t3 )
	SV* c_func
	char * t0
	short s1
	int i2
	char * t3
PREINIT:
	int(*func)(char *, short, int, char *);
CODE:
	func   = INT2PTR(int(*)(char *, short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2, t3);
OUTPUT:
	RETVAL

void *
nci_pisit( c_func, i0, s1, i2, t3 )
	SV* c_func
	int i0
	short s1
	int i2
	char * t3
PREINIT:
	void *(*func)(int, short, int, char *);
CODE:
	func   = INT2PTR(void *(*)(int, short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2, t3);
OUTPUT:
	RETVAL

void
nci_visit( c_func, i0, s1, i2, t3 )
	SV* c_func
	int i0
	short s1
	int i2
	char * t3
PREINIT:
	void(*func)(int, short, int, char *);
CODE:
	func   = INT2PTR(void(*)(int, short, int, char *), SvIV(c_func) );
	(*func)(i0, s1, i2, t3);

double
nci_disit( c_func, i0, s1, i2, t3 )
	SV* c_func
	int i0
	short s1
	int i2
	char * t3
PREINIT:
	double(*func)(int, short, int, char *);
CODE:
	func   = INT2PTR(double(*)(int, short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2, t3);
OUTPUT:
	RETVAL

short
nci_sisit( c_func, i0, s1, i2, t3 )
	SV* c_func
	int i0
	short s1
	int i2
	char * t3
PREINIT:
	short(*func)(int, short, int, char *);
CODE:
	func   = INT2PTR(short(*)(int, short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2, t3);
OUTPUT:
	RETVAL

float
nci_fisit( c_func, i0, s1, i2, t3 )
	SV* c_func
	int i0
	short s1
	int i2
	char * t3
PREINIT:
	float(*func)(int, short, int, char *);
CODE:
	func   = INT2PTR(float(*)(int, short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2, t3);
OUTPUT:
	RETVAL

char *
nci_tisit( c_func, i0, s1, i2, t3 )
	SV* c_func
	int i0
	short s1
	int i2
	char * t3
PREINIT:
	char *(*func)(int, short, int, char *);
CODE:
	func   = INT2PTR(char *(*)(int, short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2, t3);
OUTPUT:
	RETVAL

int
nci_iisit( c_func, i0, s1, i2, t3 )
	SV* c_func
	int i0
	short s1
	int i2
	char * t3
PREINIT:
	int(*func)(int, short, int, char *);
CODE:
	func   = INT2PTR(int(*)(int, short, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2, t3);
OUTPUT:
	RETVAL

void *
nci_ppfit( c_func, p0, f1, i2, t3 )
	SV* c_func
	void * p0
	float f1
	int i2
	char * t3
PREINIT:
	void *(*func)(void *, float, int, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2, t3);
OUTPUT:
	RETVAL

void
nci_vpfit( c_func, p0, f1, i2, t3 )
	SV* c_func
	void * p0
	float f1
	int i2
	char * t3
PREINIT:
	void(*func)(void *, float, int, char *);
CODE:
	func   = INT2PTR(void(*)(void *, float, int, char *), SvIV(c_func) );
	(*func)(p0, f1, i2, t3);

double
nci_dpfit( c_func, p0, f1, i2, t3 )
	SV* c_func
	void * p0
	float f1
	int i2
	char * t3
PREINIT:
	double(*func)(void *, float, int, char *);
CODE:
	func   = INT2PTR(double(*)(void *, float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2, t3);
OUTPUT:
	RETVAL

short
nci_spfit( c_func, p0, f1, i2, t3 )
	SV* c_func
	void * p0
	float f1
	int i2
	char * t3
PREINIT:
	short(*func)(void *, float, int, char *);
CODE:
	func   = INT2PTR(short(*)(void *, float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2, t3);
OUTPUT:
	RETVAL

float
nci_fpfit( c_func, p0, f1, i2, t3 )
	SV* c_func
	void * p0
	float f1
	int i2
	char * t3
PREINIT:
	float(*func)(void *, float, int, char *);
CODE:
	func   = INT2PTR(float(*)(void *, float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2, t3);
OUTPUT:
	RETVAL

char *
nci_tpfit( c_func, p0, f1, i2, t3 )
	SV* c_func
	void * p0
	float f1
	int i2
	char * t3
PREINIT:
	char *(*func)(void *, float, int, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2, t3);
OUTPUT:
	RETVAL

int
nci_ipfit( c_func, p0, f1, i2, t3 )
	SV* c_func
	void * p0
	float f1
	int i2
	char * t3
PREINIT:
	int(*func)(void *, float, int, char *);
CODE:
	func   = INT2PTR(int(*)(void *, float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2, t3);
OUTPUT:
	RETVAL

void *
nci_pvfit( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvfit( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvfit( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svfit( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvfit( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvfit( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivfit( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdfit( c_func, d0, f1, i2, t3 )
	SV* c_func
	double d0
	float f1
	int i2
	char * t3
PREINIT:
	void *(*func)(double, float, int, char *);
CODE:
	func   = INT2PTR(void *(*)(double, float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2, t3);
OUTPUT:
	RETVAL

void
nci_vdfit( c_func, d0, f1, i2, t3 )
	SV* c_func
	double d0
	float f1
	int i2
	char * t3
PREINIT:
	void(*func)(double, float, int, char *);
CODE:
	func   = INT2PTR(void(*)(double, float, int, char *), SvIV(c_func) );
	(*func)(d0, f1, i2, t3);

double
nci_ddfit( c_func, d0, f1, i2, t3 )
	SV* c_func
	double d0
	float f1
	int i2
	char * t3
PREINIT:
	double(*func)(double, float, int, char *);
CODE:
	func   = INT2PTR(double(*)(double, float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2, t3);
OUTPUT:
	RETVAL

short
nci_sdfit( c_func, d0, f1, i2, t3 )
	SV* c_func
	double d0
	float f1
	int i2
	char * t3
PREINIT:
	short(*func)(double, float, int, char *);
CODE:
	func   = INT2PTR(short(*)(double, float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2, t3);
OUTPUT:
	RETVAL

float
nci_fdfit( c_func, d0, f1, i2, t3 )
	SV* c_func
	double d0
	float f1
	int i2
	char * t3
PREINIT:
	float(*func)(double, float, int, char *);
CODE:
	func   = INT2PTR(float(*)(double, float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2, t3);
OUTPUT:
	RETVAL

char *
nci_tdfit( c_func, d0, f1, i2, t3 )
	SV* c_func
	double d0
	float f1
	int i2
	char * t3
PREINIT:
	char *(*func)(double, float, int, char *);
CODE:
	func   = INT2PTR(char *(*)(double, float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2, t3);
OUTPUT:
	RETVAL

int
nci_idfit( c_func, d0, f1, i2, t3 )
	SV* c_func
	double d0
	float f1
	int i2
	char * t3
PREINIT:
	int(*func)(double, float, int, char *);
CODE:
	func   = INT2PTR(int(*)(double, float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2, t3);
OUTPUT:
	RETVAL

void *
nci_psfit( c_func, s0, f1, i2, t3 )
	SV* c_func
	short s0
	float f1
	int i2
	char * t3
PREINIT:
	void *(*func)(short, float, int, char *);
CODE:
	func   = INT2PTR(void *(*)(short, float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2, t3);
OUTPUT:
	RETVAL

void
nci_vsfit( c_func, s0, f1, i2, t3 )
	SV* c_func
	short s0
	float f1
	int i2
	char * t3
PREINIT:
	void(*func)(short, float, int, char *);
CODE:
	func   = INT2PTR(void(*)(short, float, int, char *), SvIV(c_func) );
	(*func)(s0, f1, i2, t3);

double
nci_dsfit( c_func, s0, f1, i2, t3 )
	SV* c_func
	short s0
	float f1
	int i2
	char * t3
PREINIT:
	double(*func)(short, float, int, char *);
CODE:
	func   = INT2PTR(double(*)(short, float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2, t3);
OUTPUT:
	RETVAL

short
nci_ssfit( c_func, s0, f1, i2, t3 )
	SV* c_func
	short s0
	float f1
	int i2
	char * t3
PREINIT:
	short(*func)(short, float, int, char *);
CODE:
	func   = INT2PTR(short(*)(short, float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2, t3);
OUTPUT:
	RETVAL

float
nci_fsfit( c_func, s0, f1, i2, t3 )
	SV* c_func
	short s0
	float f1
	int i2
	char * t3
PREINIT:
	float(*func)(short, float, int, char *);
CODE:
	func   = INT2PTR(float(*)(short, float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2, t3);
OUTPUT:
	RETVAL

char *
nci_tsfit( c_func, s0, f1, i2, t3 )
	SV* c_func
	short s0
	float f1
	int i2
	char * t3
PREINIT:
	char *(*func)(short, float, int, char *);
CODE:
	func   = INT2PTR(char *(*)(short, float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2, t3);
OUTPUT:
	RETVAL

int
nci_isfit( c_func, s0, f1, i2, t3 )
	SV* c_func
	short s0
	float f1
	int i2
	char * t3
PREINIT:
	int(*func)(short, float, int, char *);
CODE:
	func   = INT2PTR(int(*)(short, float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2, t3);
OUTPUT:
	RETVAL

void *
nci_pffit( c_func, f0, f1, i2, t3 )
	SV* c_func
	float f0
	float f1
	int i2
	char * t3
PREINIT:
	void *(*func)(float, float, int, char *);
CODE:
	func   = INT2PTR(void *(*)(float, float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2, t3);
OUTPUT:
	RETVAL

void
nci_vffit( c_func, f0, f1, i2, t3 )
	SV* c_func
	float f0
	float f1
	int i2
	char * t3
PREINIT:
	void(*func)(float, float, int, char *);
CODE:
	func   = INT2PTR(void(*)(float, float, int, char *), SvIV(c_func) );
	(*func)(f0, f1, i2, t3);

double
nci_dffit( c_func, f0, f1, i2, t3 )
	SV* c_func
	float f0
	float f1
	int i2
	char * t3
PREINIT:
	double(*func)(float, float, int, char *);
CODE:
	func   = INT2PTR(double(*)(float, float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2, t3);
OUTPUT:
	RETVAL

short
nci_sffit( c_func, f0, f1, i2, t3 )
	SV* c_func
	float f0
	float f1
	int i2
	char * t3
PREINIT:
	short(*func)(float, float, int, char *);
CODE:
	func   = INT2PTR(short(*)(float, float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2, t3);
OUTPUT:
	RETVAL

float
nci_fffit( c_func, f0, f1, i2, t3 )
	SV* c_func
	float f0
	float f1
	int i2
	char * t3
PREINIT:
	float(*func)(float, float, int, char *);
CODE:
	func   = INT2PTR(float(*)(float, float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2, t3);
OUTPUT:
	RETVAL

char *
nci_tffit( c_func, f0, f1, i2, t3 )
	SV* c_func
	float f0
	float f1
	int i2
	char * t3
PREINIT:
	char *(*func)(float, float, int, char *);
CODE:
	func   = INT2PTR(char *(*)(float, float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2, t3);
OUTPUT:
	RETVAL

int
nci_iffit( c_func, f0, f1, i2, t3 )
	SV* c_func
	float f0
	float f1
	int i2
	char * t3
PREINIT:
	int(*func)(float, float, int, char *);
CODE:
	func   = INT2PTR(int(*)(float, float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2, t3);
OUTPUT:
	RETVAL

void *
nci_ptfit( c_func, t0, f1, i2, t3 )
	SV* c_func
	char * t0
	float f1
	int i2
	char * t3
PREINIT:
	void *(*func)(char *, float, int, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2, t3);
OUTPUT:
	RETVAL

void
nci_vtfit( c_func, t0, f1, i2, t3 )
	SV* c_func
	char * t0
	float f1
	int i2
	char * t3
PREINIT:
	void(*func)(char *, float, int, char *);
CODE:
	func   = INT2PTR(void(*)(char *, float, int, char *), SvIV(c_func) );
	(*func)(t0, f1, i2, t3);

double
nci_dtfit( c_func, t0, f1, i2, t3 )
	SV* c_func
	char * t0
	float f1
	int i2
	char * t3
PREINIT:
	double(*func)(char *, float, int, char *);
CODE:
	func   = INT2PTR(double(*)(char *, float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2, t3);
OUTPUT:
	RETVAL

short
nci_stfit( c_func, t0, f1, i2, t3 )
	SV* c_func
	char * t0
	float f1
	int i2
	char * t3
PREINIT:
	short(*func)(char *, float, int, char *);
CODE:
	func   = INT2PTR(short(*)(char *, float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2, t3);
OUTPUT:
	RETVAL

float
nci_ftfit( c_func, t0, f1, i2, t3 )
	SV* c_func
	char * t0
	float f1
	int i2
	char * t3
PREINIT:
	float(*func)(char *, float, int, char *);
CODE:
	func   = INT2PTR(float(*)(char *, float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2, t3);
OUTPUT:
	RETVAL

char *
nci_ttfit( c_func, t0, f1, i2, t3 )
	SV* c_func
	char * t0
	float f1
	int i2
	char * t3
PREINIT:
	char *(*func)(char *, float, int, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2, t3);
OUTPUT:
	RETVAL

int
nci_itfit( c_func, t0, f1, i2, t3 )
	SV* c_func
	char * t0
	float f1
	int i2
	char * t3
PREINIT:
	int(*func)(char *, float, int, char *);
CODE:
	func   = INT2PTR(int(*)(char *, float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2, t3);
OUTPUT:
	RETVAL

void *
nci_pifit( c_func, i0, f1, i2, t3 )
	SV* c_func
	int i0
	float f1
	int i2
	char * t3
PREINIT:
	void *(*func)(int, float, int, char *);
CODE:
	func   = INT2PTR(void *(*)(int, float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2, t3);
OUTPUT:
	RETVAL

void
nci_vifit( c_func, i0, f1, i2, t3 )
	SV* c_func
	int i0
	float f1
	int i2
	char * t3
PREINIT:
	void(*func)(int, float, int, char *);
CODE:
	func   = INT2PTR(void(*)(int, float, int, char *), SvIV(c_func) );
	(*func)(i0, f1, i2, t3);

double
nci_difit( c_func, i0, f1, i2, t3 )
	SV* c_func
	int i0
	float f1
	int i2
	char * t3
PREINIT:
	double(*func)(int, float, int, char *);
CODE:
	func   = INT2PTR(double(*)(int, float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2, t3);
OUTPUT:
	RETVAL

short
nci_sifit( c_func, i0, f1, i2, t3 )
	SV* c_func
	int i0
	float f1
	int i2
	char * t3
PREINIT:
	short(*func)(int, float, int, char *);
CODE:
	func   = INT2PTR(short(*)(int, float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2, t3);
OUTPUT:
	RETVAL

float
nci_fifit( c_func, i0, f1, i2, t3 )
	SV* c_func
	int i0
	float f1
	int i2
	char * t3
PREINIT:
	float(*func)(int, float, int, char *);
CODE:
	func   = INT2PTR(float(*)(int, float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2, t3);
OUTPUT:
	RETVAL

char *
nci_tifit( c_func, i0, f1, i2, t3 )
	SV* c_func
	int i0
	float f1
	int i2
	char * t3
PREINIT:
	char *(*func)(int, float, int, char *);
CODE:
	func   = INT2PTR(char *(*)(int, float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2, t3);
OUTPUT:
	RETVAL

int
nci_iifit( c_func, i0, f1, i2, t3 )
	SV* c_func
	int i0
	float f1
	int i2
	char * t3
PREINIT:
	int(*func)(int, float, int, char *);
CODE:
	func   = INT2PTR(int(*)(int, float, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2, t3);
OUTPUT:
	RETVAL

void *
nci_pptit( c_func, p0, t1, i2, t3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	char * t3
PREINIT:
	void *(*func)(void *, char *, int, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2, t3);
OUTPUT:
	RETVAL

void
nci_vptit( c_func, p0, t1, i2, t3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	char * t3
PREINIT:
	void(*func)(void *, char *, int, char *);
CODE:
	func   = INT2PTR(void(*)(void *, char *, int, char *), SvIV(c_func) );
	(*func)(p0, t1, i2, t3);

double
nci_dptit( c_func, p0, t1, i2, t3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	char * t3
PREINIT:
	double(*func)(void *, char *, int, char *);
CODE:
	func   = INT2PTR(double(*)(void *, char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2, t3);
OUTPUT:
	RETVAL

short
nci_sptit( c_func, p0, t1, i2, t3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	char * t3
PREINIT:
	short(*func)(void *, char *, int, char *);
CODE:
	func   = INT2PTR(short(*)(void *, char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2, t3);
OUTPUT:
	RETVAL

float
nci_fptit( c_func, p0, t1, i2, t3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	char * t3
PREINIT:
	float(*func)(void *, char *, int, char *);
CODE:
	func   = INT2PTR(float(*)(void *, char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2, t3);
OUTPUT:
	RETVAL

char *
nci_tptit( c_func, p0, t1, i2, t3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	char * t3
PREINIT:
	char *(*func)(void *, char *, int, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2, t3);
OUTPUT:
	RETVAL

int
nci_iptit( c_func, p0, t1, i2, t3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	char * t3
PREINIT:
	int(*func)(void *, char *, int, char *);
CODE:
	func   = INT2PTR(int(*)(void *, char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2, t3);
OUTPUT:
	RETVAL

void *
nci_pvtit( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvtit( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvtit( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svtit( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvtit( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvtit( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivtit( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdtit( c_func, d0, t1, i2, t3 )
	SV* c_func
	double d0
	char * t1
	int i2
	char * t3
PREINIT:
	void *(*func)(double, char *, int, char *);
CODE:
	func   = INT2PTR(void *(*)(double, char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2, t3);
OUTPUT:
	RETVAL

void
nci_vdtit( c_func, d0, t1, i2, t3 )
	SV* c_func
	double d0
	char * t1
	int i2
	char * t3
PREINIT:
	void(*func)(double, char *, int, char *);
CODE:
	func   = INT2PTR(void(*)(double, char *, int, char *), SvIV(c_func) );
	(*func)(d0, t1, i2, t3);

double
nci_ddtit( c_func, d0, t1, i2, t3 )
	SV* c_func
	double d0
	char * t1
	int i2
	char * t3
PREINIT:
	double(*func)(double, char *, int, char *);
CODE:
	func   = INT2PTR(double(*)(double, char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2, t3);
OUTPUT:
	RETVAL

short
nci_sdtit( c_func, d0, t1, i2, t3 )
	SV* c_func
	double d0
	char * t1
	int i2
	char * t3
PREINIT:
	short(*func)(double, char *, int, char *);
CODE:
	func   = INT2PTR(short(*)(double, char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2, t3);
OUTPUT:
	RETVAL

float
nci_fdtit( c_func, d0, t1, i2, t3 )
	SV* c_func
	double d0
	char * t1
	int i2
	char * t3
PREINIT:
	float(*func)(double, char *, int, char *);
CODE:
	func   = INT2PTR(float(*)(double, char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2, t3);
OUTPUT:
	RETVAL

char *
nci_tdtit( c_func, d0, t1, i2, t3 )
	SV* c_func
	double d0
	char * t1
	int i2
	char * t3
PREINIT:
	char *(*func)(double, char *, int, char *);
CODE:
	func   = INT2PTR(char *(*)(double, char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2, t3);
OUTPUT:
	RETVAL

int
nci_idtit( c_func, d0, t1, i2, t3 )
	SV* c_func
	double d0
	char * t1
	int i2
	char * t3
PREINIT:
	int(*func)(double, char *, int, char *);
CODE:
	func   = INT2PTR(int(*)(double, char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2, t3);
OUTPUT:
	RETVAL

void *
nci_pstit( c_func, s0, t1, i2, t3 )
	SV* c_func
	short s0
	char * t1
	int i2
	char * t3
PREINIT:
	void *(*func)(short, char *, int, char *);
CODE:
	func   = INT2PTR(void *(*)(short, char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2, t3);
OUTPUT:
	RETVAL

void
nci_vstit( c_func, s0, t1, i2, t3 )
	SV* c_func
	short s0
	char * t1
	int i2
	char * t3
PREINIT:
	void(*func)(short, char *, int, char *);
CODE:
	func   = INT2PTR(void(*)(short, char *, int, char *), SvIV(c_func) );
	(*func)(s0, t1, i2, t3);

double
nci_dstit( c_func, s0, t1, i2, t3 )
	SV* c_func
	short s0
	char * t1
	int i2
	char * t3
PREINIT:
	double(*func)(short, char *, int, char *);
CODE:
	func   = INT2PTR(double(*)(short, char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2, t3);
OUTPUT:
	RETVAL

short
nci_sstit( c_func, s0, t1, i2, t3 )
	SV* c_func
	short s0
	char * t1
	int i2
	char * t3
PREINIT:
	short(*func)(short, char *, int, char *);
CODE:
	func   = INT2PTR(short(*)(short, char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2, t3);
OUTPUT:
	RETVAL

float
nci_fstit( c_func, s0, t1, i2, t3 )
	SV* c_func
	short s0
	char * t1
	int i2
	char * t3
PREINIT:
	float(*func)(short, char *, int, char *);
CODE:
	func   = INT2PTR(float(*)(short, char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2, t3);
OUTPUT:
	RETVAL

char *
nci_tstit( c_func, s0, t1, i2, t3 )
	SV* c_func
	short s0
	char * t1
	int i2
	char * t3
PREINIT:
	char *(*func)(short, char *, int, char *);
CODE:
	func   = INT2PTR(char *(*)(short, char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2, t3);
OUTPUT:
	RETVAL

int
nci_istit( c_func, s0, t1, i2, t3 )
	SV* c_func
	short s0
	char * t1
	int i2
	char * t3
PREINIT:
	int(*func)(short, char *, int, char *);
CODE:
	func   = INT2PTR(int(*)(short, char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2, t3);
OUTPUT:
	RETVAL

void *
nci_pftit( c_func, f0, t1, i2, t3 )
	SV* c_func
	float f0
	char * t1
	int i2
	char * t3
PREINIT:
	void *(*func)(float, char *, int, char *);
CODE:
	func   = INT2PTR(void *(*)(float, char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2, t3);
OUTPUT:
	RETVAL

void
nci_vftit( c_func, f0, t1, i2, t3 )
	SV* c_func
	float f0
	char * t1
	int i2
	char * t3
PREINIT:
	void(*func)(float, char *, int, char *);
CODE:
	func   = INT2PTR(void(*)(float, char *, int, char *), SvIV(c_func) );
	(*func)(f0, t1, i2, t3);

double
nci_dftit( c_func, f0, t1, i2, t3 )
	SV* c_func
	float f0
	char * t1
	int i2
	char * t3
PREINIT:
	double(*func)(float, char *, int, char *);
CODE:
	func   = INT2PTR(double(*)(float, char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2, t3);
OUTPUT:
	RETVAL

short
nci_sftit( c_func, f0, t1, i2, t3 )
	SV* c_func
	float f0
	char * t1
	int i2
	char * t3
PREINIT:
	short(*func)(float, char *, int, char *);
CODE:
	func   = INT2PTR(short(*)(float, char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2, t3);
OUTPUT:
	RETVAL

float
nci_fftit( c_func, f0, t1, i2, t3 )
	SV* c_func
	float f0
	char * t1
	int i2
	char * t3
PREINIT:
	float(*func)(float, char *, int, char *);
CODE:
	func   = INT2PTR(float(*)(float, char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2, t3);
OUTPUT:
	RETVAL

char *
nci_tftit( c_func, f0, t1, i2, t3 )
	SV* c_func
	float f0
	char * t1
	int i2
	char * t3
PREINIT:
	char *(*func)(float, char *, int, char *);
CODE:
	func   = INT2PTR(char *(*)(float, char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2, t3);
OUTPUT:
	RETVAL

int
nci_iftit( c_func, f0, t1, i2, t3 )
	SV* c_func
	float f0
	char * t1
	int i2
	char * t3
PREINIT:
	int(*func)(float, char *, int, char *);
CODE:
	func   = INT2PTR(int(*)(float, char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2, t3);
OUTPUT:
	RETVAL

void *
nci_pttit( c_func, t0, t1, i2, t3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	char * t3
PREINIT:
	void *(*func)(char *, char *, int, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2, t3);
OUTPUT:
	RETVAL

void
nci_vttit( c_func, t0, t1, i2, t3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	char * t3
PREINIT:
	void(*func)(char *, char *, int, char *);
CODE:
	func   = INT2PTR(void(*)(char *, char *, int, char *), SvIV(c_func) );
	(*func)(t0, t1, i2, t3);

double
nci_dttit( c_func, t0, t1, i2, t3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	char * t3
PREINIT:
	double(*func)(char *, char *, int, char *);
CODE:
	func   = INT2PTR(double(*)(char *, char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2, t3);
OUTPUT:
	RETVAL

short
nci_sttit( c_func, t0, t1, i2, t3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	char * t3
PREINIT:
	short(*func)(char *, char *, int, char *);
CODE:
	func   = INT2PTR(short(*)(char *, char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2, t3);
OUTPUT:
	RETVAL

float
nci_fttit( c_func, t0, t1, i2, t3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	char * t3
PREINIT:
	float(*func)(char *, char *, int, char *);
CODE:
	func   = INT2PTR(float(*)(char *, char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2, t3);
OUTPUT:
	RETVAL

char *
nci_tttit( c_func, t0, t1, i2, t3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	char * t3
PREINIT:
	char *(*func)(char *, char *, int, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2, t3);
OUTPUT:
	RETVAL

int
nci_ittit( c_func, t0, t1, i2, t3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	char * t3
PREINIT:
	int(*func)(char *, char *, int, char *);
CODE:
	func   = INT2PTR(int(*)(char *, char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2, t3);
OUTPUT:
	RETVAL

void *
nci_pitit( c_func, i0, t1, i2, t3 )
	SV* c_func
	int i0
	char * t1
	int i2
	char * t3
PREINIT:
	void *(*func)(int, char *, int, char *);
CODE:
	func   = INT2PTR(void *(*)(int, char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2, t3);
OUTPUT:
	RETVAL

void
nci_vitit( c_func, i0, t1, i2, t3 )
	SV* c_func
	int i0
	char * t1
	int i2
	char * t3
PREINIT:
	void(*func)(int, char *, int, char *);
CODE:
	func   = INT2PTR(void(*)(int, char *, int, char *), SvIV(c_func) );
	(*func)(i0, t1, i2, t3);

double
nci_ditit( c_func, i0, t1, i2, t3 )
	SV* c_func
	int i0
	char * t1
	int i2
	char * t3
PREINIT:
	double(*func)(int, char *, int, char *);
CODE:
	func   = INT2PTR(double(*)(int, char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2, t3);
OUTPUT:
	RETVAL

short
nci_sitit( c_func, i0, t1, i2, t3 )
	SV* c_func
	int i0
	char * t1
	int i2
	char * t3
PREINIT:
	short(*func)(int, char *, int, char *);
CODE:
	func   = INT2PTR(short(*)(int, char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2, t3);
OUTPUT:
	RETVAL

float
nci_fitit( c_func, i0, t1, i2, t3 )
	SV* c_func
	int i0
	char * t1
	int i2
	char * t3
PREINIT:
	float(*func)(int, char *, int, char *);
CODE:
	func   = INT2PTR(float(*)(int, char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2, t3);
OUTPUT:
	RETVAL

char *
nci_titit( c_func, i0, t1, i2, t3 )
	SV* c_func
	int i0
	char * t1
	int i2
	char * t3
PREINIT:
	char *(*func)(int, char *, int, char *);
CODE:
	func   = INT2PTR(char *(*)(int, char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2, t3);
OUTPUT:
	RETVAL

int
nci_iitit( c_func, i0, t1, i2, t3 )
	SV* c_func
	int i0
	char * t1
	int i2
	char * t3
PREINIT:
	int(*func)(int, char *, int, char *);
CODE:
	func   = INT2PTR(int(*)(int, char *, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2, t3);
OUTPUT:
	RETVAL

void *
nci_ppiit( c_func, p0, i1, i2, t3 )
	SV* c_func
	void * p0
	int i1
	int i2
	char * t3
PREINIT:
	void *(*func)(void *, int, int, char *);
CODE:
	func   = INT2PTR(void *(*)(void *, int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2, t3);
OUTPUT:
	RETVAL

void
nci_vpiit( c_func, p0, i1, i2, t3 )
	SV* c_func
	void * p0
	int i1
	int i2
	char * t3
PREINIT:
	void(*func)(void *, int, int, char *);
CODE:
	func   = INT2PTR(void(*)(void *, int, int, char *), SvIV(c_func) );
	(*func)(p0, i1, i2, t3);

double
nci_dpiit( c_func, p0, i1, i2, t3 )
	SV* c_func
	void * p0
	int i1
	int i2
	char * t3
PREINIT:
	double(*func)(void *, int, int, char *);
CODE:
	func   = INT2PTR(double(*)(void *, int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2, t3);
OUTPUT:
	RETVAL

short
nci_spiit( c_func, p0, i1, i2, t3 )
	SV* c_func
	void * p0
	int i1
	int i2
	char * t3
PREINIT:
	short(*func)(void *, int, int, char *);
CODE:
	func   = INT2PTR(short(*)(void *, int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2, t3);
OUTPUT:
	RETVAL

float
nci_fpiit( c_func, p0, i1, i2, t3 )
	SV* c_func
	void * p0
	int i1
	int i2
	char * t3
PREINIT:
	float(*func)(void *, int, int, char *);
CODE:
	func   = INT2PTR(float(*)(void *, int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2, t3);
OUTPUT:
	RETVAL

char *
nci_tpiit( c_func, p0, i1, i2, t3 )
	SV* c_func
	void * p0
	int i1
	int i2
	char * t3
PREINIT:
	char *(*func)(void *, int, int, char *);
CODE:
	func   = INT2PTR(char *(*)(void *, int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2, t3);
OUTPUT:
	RETVAL

int
nci_ipiit( c_func, p0, i1, i2, t3 )
	SV* c_func
	void * p0
	int i1
	int i2
	char * t3
PREINIT:
	int(*func)(void *, int, int, char *);
CODE:
	func   = INT2PTR(int(*)(void *, int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2, t3);
OUTPUT:
	RETVAL

void *
nci_pviit( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vviit( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dviit( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_sviit( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fviit( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tviit( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_iviit( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdiit( c_func, d0, i1, i2, t3 )
	SV* c_func
	double d0
	int i1
	int i2
	char * t3
PREINIT:
	void *(*func)(double, int, int, char *);
CODE:
	func   = INT2PTR(void *(*)(double, int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2, t3);
OUTPUT:
	RETVAL

void
nci_vdiit( c_func, d0, i1, i2, t3 )
	SV* c_func
	double d0
	int i1
	int i2
	char * t3
PREINIT:
	void(*func)(double, int, int, char *);
CODE:
	func   = INT2PTR(void(*)(double, int, int, char *), SvIV(c_func) );
	(*func)(d0, i1, i2, t3);

double
nci_ddiit( c_func, d0, i1, i2, t3 )
	SV* c_func
	double d0
	int i1
	int i2
	char * t3
PREINIT:
	double(*func)(double, int, int, char *);
CODE:
	func   = INT2PTR(double(*)(double, int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2, t3);
OUTPUT:
	RETVAL

short
nci_sdiit( c_func, d0, i1, i2, t3 )
	SV* c_func
	double d0
	int i1
	int i2
	char * t3
PREINIT:
	short(*func)(double, int, int, char *);
CODE:
	func   = INT2PTR(short(*)(double, int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2, t3);
OUTPUT:
	RETVAL

float
nci_fdiit( c_func, d0, i1, i2, t3 )
	SV* c_func
	double d0
	int i1
	int i2
	char * t3
PREINIT:
	float(*func)(double, int, int, char *);
CODE:
	func   = INT2PTR(float(*)(double, int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2, t3);
OUTPUT:
	RETVAL

char *
nci_tdiit( c_func, d0, i1, i2, t3 )
	SV* c_func
	double d0
	int i1
	int i2
	char * t3
PREINIT:
	char *(*func)(double, int, int, char *);
CODE:
	func   = INT2PTR(char *(*)(double, int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2, t3);
OUTPUT:
	RETVAL

int
nci_idiit( c_func, d0, i1, i2, t3 )
	SV* c_func
	double d0
	int i1
	int i2
	char * t3
PREINIT:
	int(*func)(double, int, int, char *);
CODE:
	func   = INT2PTR(int(*)(double, int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2, t3);
OUTPUT:
	RETVAL

void *
nci_psiit( c_func, s0, i1, i2, t3 )
	SV* c_func
	short s0
	int i1
	int i2
	char * t3
PREINIT:
	void *(*func)(short, int, int, char *);
CODE:
	func   = INT2PTR(void *(*)(short, int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2, t3);
OUTPUT:
	RETVAL

void
nci_vsiit( c_func, s0, i1, i2, t3 )
	SV* c_func
	short s0
	int i1
	int i2
	char * t3
PREINIT:
	void(*func)(short, int, int, char *);
CODE:
	func   = INT2PTR(void(*)(short, int, int, char *), SvIV(c_func) );
	(*func)(s0, i1, i2, t3);

double
nci_dsiit( c_func, s0, i1, i2, t3 )
	SV* c_func
	short s0
	int i1
	int i2
	char * t3
PREINIT:
	double(*func)(short, int, int, char *);
CODE:
	func   = INT2PTR(double(*)(short, int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2, t3);
OUTPUT:
	RETVAL

short
nci_ssiit( c_func, s0, i1, i2, t3 )
	SV* c_func
	short s0
	int i1
	int i2
	char * t3
PREINIT:
	short(*func)(short, int, int, char *);
CODE:
	func   = INT2PTR(short(*)(short, int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2, t3);
OUTPUT:
	RETVAL

float
nci_fsiit( c_func, s0, i1, i2, t3 )
	SV* c_func
	short s0
	int i1
	int i2
	char * t3
PREINIT:
	float(*func)(short, int, int, char *);
CODE:
	func   = INT2PTR(float(*)(short, int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2, t3);
OUTPUT:
	RETVAL

char *
nci_tsiit( c_func, s0, i1, i2, t3 )
	SV* c_func
	short s0
	int i1
	int i2
	char * t3
PREINIT:
	char *(*func)(short, int, int, char *);
CODE:
	func   = INT2PTR(char *(*)(short, int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2, t3);
OUTPUT:
	RETVAL

int
nci_isiit( c_func, s0, i1, i2, t3 )
	SV* c_func
	short s0
	int i1
	int i2
	char * t3
PREINIT:
	int(*func)(short, int, int, char *);
CODE:
	func   = INT2PTR(int(*)(short, int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2, t3);
OUTPUT:
	RETVAL

void *
nci_pfiit( c_func, f0, i1, i2, t3 )
	SV* c_func
	float f0
	int i1
	int i2
	char * t3
PREINIT:
	void *(*func)(float, int, int, char *);
CODE:
	func   = INT2PTR(void *(*)(float, int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2, t3);
OUTPUT:
	RETVAL

void
nci_vfiit( c_func, f0, i1, i2, t3 )
	SV* c_func
	float f0
	int i1
	int i2
	char * t3
PREINIT:
	void(*func)(float, int, int, char *);
CODE:
	func   = INT2PTR(void(*)(float, int, int, char *), SvIV(c_func) );
	(*func)(f0, i1, i2, t3);

double
nci_dfiit( c_func, f0, i1, i2, t3 )
	SV* c_func
	float f0
	int i1
	int i2
	char * t3
PREINIT:
	double(*func)(float, int, int, char *);
CODE:
	func   = INT2PTR(double(*)(float, int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2, t3);
OUTPUT:
	RETVAL

short
nci_sfiit( c_func, f0, i1, i2, t3 )
	SV* c_func
	float f0
	int i1
	int i2
	char * t3
PREINIT:
	short(*func)(float, int, int, char *);
CODE:
	func   = INT2PTR(short(*)(float, int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2, t3);
OUTPUT:
	RETVAL

float
nci_ffiit( c_func, f0, i1, i2, t3 )
	SV* c_func
	float f0
	int i1
	int i2
	char * t3
PREINIT:
	float(*func)(float, int, int, char *);
CODE:
	func   = INT2PTR(float(*)(float, int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2, t3);
OUTPUT:
	RETVAL

char *
nci_tfiit( c_func, f0, i1, i2, t3 )
	SV* c_func
	float f0
	int i1
	int i2
	char * t3
PREINIT:
	char *(*func)(float, int, int, char *);
CODE:
	func   = INT2PTR(char *(*)(float, int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2, t3);
OUTPUT:
	RETVAL

int
nci_ifiit( c_func, f0, i1, i2, t3 )
	SV* c_func
	float f0
	int i1
	int i2
	char * t3
PREINIT:
	int(*func)(float, int, int, char *);
CODE:
	func   = INT2PTR(int(*)(float, int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2, t3);
OUTPUT:
	RETVAL

void *
nci_ptiit( c_func, t0, i1, i2, t3 )
	SV* c_func
	char * t0
	int i1
	int i2
	char * t3
PREINIT:
	void *(*func)(char *, int, int, char *);
CODE:
	func   = INT2PTR(void *(*)(char *, int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2, t3);
OUTPUT:
	RETVAL

void
nci_vtiit( c_func, t0, i1, i2, t3 )
	SV* c_func
	char * t0
	int i1
	int i2
	char * t3
PREINIT:
	void(*func)(char *, int, int, char *);
CODE:
	func   = INT2PTR(void(*)(char *, int, int, char *), SvIV(c_func) );
	(*func)(t0, i1, i2, t3);

double
nci_dtiit( c_func, t0, i1, i2, t3 )
	SV* c_func
	char * t0
	int i1
	int i2
	char * t3
PREINIT:
	double(*func)(char *, int, int, char *);
CODE:
	func   = INT2PTR(double(*)(char *, int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2, t3);
OUTPUT:
	RETVAL

short
nci_stiit( c_func, t0, i1, i2, t3 )
	SV* c_func
	char * t0
	int i1
	int i2
	char * t3
PREINIT:
	short(*func)(char *, int, int, char *);
CODE:
	func   = INT2PTR(short(*)(char *, int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2, t3);
OUTPUT:
	RETVAL

float
nci_ftiit( c_func, t0, i1, i2, t3 )
	SV* c_func
	char * t0
	int i1
	int i2
	char * t3
PREINIT:
	float(*func)(char *, int, int, char *);
CODE:
	func   = INT2PTR(float(*)(char *, int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2, t3);
OUTPUT:
	RETVAL

char *
nci_ttiit( c_func, t0, i1, i2, t3 )
	SV* c_func
	char * t0
	int i1
	int i2
	char * t3
PREINIT:
	char *(*func)(char *, int, int, char *);
CODE:
	func   = INT2PTR(char *(*)(char *, int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2, t3);
OUTPUT:
	RETVAL

int
nci_itiit( c_func, t0, i1, i2, t3 )
	SV* c_func
	char * t0
	int i1
	int i2
	char * t3
PREINIT:
	int(*func)(char *, int, int, char *);
CODE:
	func   = INT2PTR(int(*)(char *, int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2, t3);
OUTPUT:
	RETVAL

void *
nci_piiit( c_func, i0, i1, i2, t3 )
	SV* c_func
	int i0
	int i1
	int i2
	char * t3
PREINIT:
	void *(*func)(int, int, int, char *);
CODE:
	func   = INT2PTR(void *(*)(int, int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2, t3);
OUTPUT:
	RETVAL

void
nci_viiit( c_func, i0, i1, i2, t3 )
	SV* c_func
	int i0
	int i1
	int i2
	char * t3
PREINIT:
	void(*func)(int, int, int, char *);
CODE:
	func   = INT2PTR(void(*)(int, int, int, char *), SvIV(c_func) );
	(*func)(i0, i1, i2, t3);

double
nci_diiit( c_func, i0, i1, i2, t3 )
	SV* c_func
	int i0
	int i1
	int i2
	char * t3
PREINIT:
	double(*func)(int, int, int, char *);
CODE:
	func   = INT2PTR(double(*)(int, int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2, t3);
OUTPUT:
	RETVAL

short
nci_siiit( c_func, i0, i1, i2, t3 )
	SV* c_func
	int i0
	int i1
	int i2
	char * t3
PREINIT:
	short(*func)(int, int, int, char *);
CODE:
	func   = INT2PTR(short(*)(int, int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2, t3);
OUTPUT:
	RETVAL

float
nci_fiiit( c_func, i0, i1, i2, t3 )
	SV* c_func
	int i0
	int i1
	int i2
	char * t3
PREINIT:
	float(*func)(int, int, int, char *);
CODE:
	func   = INT2PTR(float(*)(int, int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2, t3);
OUTPUT:
	RETVAL

char *
nci_tiiit( c_func, i0, i1, i2, t3 )
	SV* c_func
	int i0
	int i1
	int i2
	char * t3
PREINIT:
	char *(*func)(int, int, int, char *);
CODE:
	func   = INT2PTR(char *(*)(int, int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2, t3);
OUTPUT:
	RETVAL

int
nci_iiiit( c_func, i0, i1, i2, t3 )
	SV* c_func
	int i0
	int i1
	int i2
	char * t3
PREINIT:
	int(*func)(int, int, int, char *);
CODE:
	func   = INT2PTR(int(*)(int, int, int, char *), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2, t3);
OUTPUT:
	RETVAL

void *
nci_ppppi( c_func, p0, p1, p2, i3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	int i3
PREINIT:
	void *(*func)(void *, void *, void *, int);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2, i3);
OUTPUT:
	RETVAL

void
nci_vpppi( c_func, p0, p1, p2, i3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	int i3
PREINIT:
	void(*func)(void *, void *, void *, int);
CODE:
	func   = INT2PTR(void(*)(void *, void *, void *, int), SvIV(c_func) );
	(*func)(p0, p1, p2, i3);

double
nci_dpppi( c_func, p0, p1, p2, i3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	int i3
PREINIT:
	double(*func)(void *, void *, void *, int);
CODE:
	func   = INT2PTR(double(*)(void *, void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2, i3);
OUTPUT:
	RETVAL

short
nci_spppi( c_func, p0, p1, p2, i3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	int i3
PREINIT:
	short(*func)(void *, void *, void *, int);
CODE:
	func   = INT2PTR(short(*)(void *, void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2, i3);
OUTPUT:
	RETVAL

float
nci_fpppi( c_func, p0, p1, p2, i3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	int i3
PREINIT:
	float(*func)(void *, void *, void *, int);
CODE:
	func   = INT2PTR(float(*)(void *, void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2, i3);
OUTPUT:
	RETVAL

char *
nci_tpppi( c_func, p0, p1, p2, i3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	int i3
PREINIT:
	char *(*func)(void *, void *, void *, int);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2, i3);
OUTPUT:
	RETVAL

int
nci_ipppi( c_func, p0, p1, p2, i3 )
	SV* c_func
	void * p0
	void * p1
	void * p2
	int i3
PREINIT:
	int(*func)(void *, void *, void *, int);
CODE:
	func   = INT2PTR(int(*)(void *, void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, p2, i3);
OUTPUT:
	RETVAL

void *
nci_pvppi( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvppi( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvppi( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svppi( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvppi( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvppi( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivppi( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdppi( c_func, d0, p1, p2, i3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	int i3
PREINIT:
	void *(*func)(double, void *, void *, int);
CODE:
	func   = INT2PTR(void *(*)(double, void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2, i3);
OUTPUT:
	RETVAL

void
nci_vdppi( c_func, d0, p1, p2, i3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	int i3
PREINIT:
	void(*func)(double, void *, void *, int);
CODE:
	func   = INT2PTR(void(*)(double, void *, void *, int), SvIV(c_func) );
	(*func)(d0, p1, p2, i3);

double
nci_ddppi( c_func, d0, p1, p2, i3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	int i3
PREINIT:
	double(*func)(double, void *, void *, int);
CODE:
	func   = INT2PTR(double(*)(double, void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2, i3);
OUTPUT:
	RETVAL

short
nci_sdppi( c_func, d0, p1, p2, i3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	int i3
PREINIT:
	short(*func)(double, void *, void *, int);
CODE:
	func   = INT2PTR(short(*)(double, void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2, i3);
OUTPUT:
	RETVAL

float
nci_fdppi( c_func, d0, p1, p2, i3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	int i3
PREINIT:
	float(*func)(double, void *, void *, int);
CODE:
	func   = INT2PTR(float(*)(double, void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2, i3);
OUTPUT:
	RETVAL

char *
nci_tdppi( c_func, d0, p1, p2, i3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	int i3
PREINIT:
	char *(*func)(double, void *, void *, int);
CODE:
	func   = INT2PTR(char *(*)(double, void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2, i3);
OUTPUT:
	RETVAL

int
nci_idppi( c_func, d0, p1, p2, i3 )
	SV* c_func
	double d0
	void * p1
	void * p2
	int i3
PREINIT:
	int(*func)(double, void *, void *, int);
CODE:
	func   = INT2PTR(int(*)(double, void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, p2, i3);
OUTPUT:
	RETVAL

void *
nci_psppi( c_func, s0, p1, p2, i3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	int i3
PREINIT:
	void *(*func)(short, void *, void *, int);
CODE:
	func   = INT2PTR(void *(*)(short, void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2, i3);
OUTPUT:
	RETVAL

void
nci_vsppi( c_func, s0, p1, p2, i3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	int i3
PREINIT:
	void(*func)(short, void *, void *, int);
CODE:
	func   = INT2PTR(void(*)(short, void *, void *, int), SvIV(c_func) );
	(*func)(s0, p1, p2, i3);

double
nci_dsppi( c_func, s0, p1, p2, i3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	int i3
PREINIT:
	double(*func)(short, void *, void *, int);
CODE:
	func   = INT2PTR(double(*)(short, void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2, i3);
OUTPUT:
	RETVAL

short
nci_ssppi( c_func, s0, p1, p2, i3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	int i3
PREINIT:
	short(*func)(short, void *, void *, int);
CODE:
	func   = INT2PTR(short(*)(short, void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2, i3);
OUTPUT:
	RETVAL

float
nci_fsppi( c_func, s0, p1, p2, i3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	int i3
PREINIT:
	float(*func)(short, void *, void *, int);
CODE:
	func   = INT2PTR(float(*)(short, void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2, i3);
OUTPUT:
	RETVAL

char *
nci_tsppi( c_func, s0, p1, p2, i3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	int i3
PREINIT:
	char *(*func)(short, void *, void *, int);
CODE:
	func   = INT2PTR(char *(*)(short, void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2, i3);
OUTPUT:
	RETVAL

int
nci_isppi( c_func, s0, p1, p2, i3 )
	SV* c_func
	short s0
	void * p1
	void * p2
	int i3
PREINIT:
	int(*func)(short, void *, void *, int);
CODE:
	func   = INT2PTR(int(*)(short, void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, p2, i3);
OUTPUT:
	RETVAL

void *
nci_pfppi( c_func, f0, p1, p2, i3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	int i3
PREINIT:
	void *(*func)(float, void *, void *, int);
CODE:
	func   = INT2PTR(void *(*)(float, void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2, i3);
OUTPUT:
	RETVAL

void
nci_vfppi( c_func, f0, p1, p2, i3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	int i3
PREINIT:
	void(*func)(float, void *, void *, int);
CODE:
	func   = INT2PTR(void(*)(float, void *, void *, int), SvIV(c_func) );
	(*func)(f0, p1, p2, i3);

double
nci_dfppi( c_func, f0, p1, p2, i3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	int i3
PREINIT:
	double(*func)(float, void *, void *, int);
CODE:
	func   = INT2PTR(double(*)(float, void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2, i3);
OUTPUT:
	RETVAL

short
nci_sfppi( c_func, f0, p1, p2, i3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	int i3
PREINIT:
	short(*func)(float, void *, void *, int);
CODE:
	func   = INT2PTR(short(*)(float, void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2, i3);
OUTPUT:
	RETVAL

float
nci_ffppi( c_func, f0, p1, p2, i3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	int i3
PREINIT:
	float(*func)(float, void *, void *, int);
CODE:
	func   = INT2PTR(float(*)(float, void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2, i3);
OUTPUT:
	RETVAL

char *
nci_tfppi( c_func, f0, p1, p2, i3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	int i3
PREINIT:
	char *(*func)(float, void *, void *, int);
CODE:
	func   = INT2PTR(char *(*)(float, void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2, i3);
OUTPUT:
	RETVAL

int
nci_ifppi( c_func, f0, p1, p2, i3 )
	SV* c_func
	float f0
	void * p1
	void * p2
	int i3
PREINIT:
	int(*func)(float, void *, void *, int);
CODE:
	func   = INT2PTR(int(*)(float, void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, p2, i3);
OUTPUT:
	RETVAL

void *
nci_ptppi( c_func, t0, p1, p2, i3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	int i3
PREINIT:
	void *(*func)(char *, void *, void *, int);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2, i3);
OUTPUT:
	RETVAL

void
nci_vtppi( c_func, t0, p1, p2, i3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	int i3
PREINIT:
	void(*func)(char *, void *, void *, int);
CODE:
	func   = INT2PTR(void(*)(char *, void *, void *, int), SvIV(c_func) );
	(*func)(t0, p1, p2, i3);

double
nci_dtppi( c_func, t0, p1, p2, i3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	int i3
PREINIT:
	double(*func)(char *, void *, void *, int);
CODE:
	func   = INT2PTR(double(*)(char *, void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2, i3);
OUTPUT:
	RETVAL

short
nci_stppi( c_func, t0, p1, p2, i3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	int i3
PREINIT:
	short(*func)(char *, void *, void *, int);
CODE:
	func   = INT2PTR(short(*)(char *, void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2, i3);
OUTPUT:
	RETVAL

float
nci_ftppi( c_func, t0, p1, p2, i3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	int i3
PREINIT:
	float(*func)(char *, void *, void *, int);
CODE:
	func   = INT2PTR(float(*)(char *, void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2, i3);
OUTPUT:
	RETVAL

char *
nci_ttppi( c_func, t0, p1, p2, i3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	int i3
PREINIT:
	char *(*func)(char *, void *, void *, int);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2, i3);
OUTPUT:
	RETVAL

int
nci_itppi( c_func, t0, p1, p2, i3 )
	SV* c_func
	char * t0
	void * p1
	void * p2
	int i3
PREINIT:
	int(*func)(char *, void *, void *, int);
CODE:
	func   = INT2PTR(int(*)(char *, void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, p2, i3);
OUTPUT:
	RETVAL

void *
nci_pippi( c_func, i0, p1, p2, i3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	int i3
PREINIT:
	void *(*func)(int, void *, void *, int);
CODE:
	func   = INT2PTR(void *(*)(int, void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2, i3);
OUTPUT:
	RETVAL

void
nci_vippi( c_func, i0, p1, p2, i3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	int i3
PREINIT:
	void(*func)(int, void *, void *, int);
CODE:
	func   = INT2PTR(void(*)(int, void *, void *, int), SvIV(c_func) );
	(*func)(i0, p1, p2, i3);

double
nci_dippi( c_func, i0, p1, p2, i3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	int i3
PREINIT:
	double(*func)(int, void *, void *, int);
CODE:
	func   = INT2PTR(double(*)(int, void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2, i3);
OUTPUT:
	RETVAL

short
nci_sippi( c_func, i0, p1, p2, i3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	int i3
PREINIT:
	short(*func)(int, void *, void *, int);
CODE:
	func   = INT2PTR(short(*)(int, void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2, i3);
OUTPUT:
	RETVAL

float
nci_fippi( c_func, i0, p1, p2, i3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	int i3
PREINIT:
	float(*func)(int, void *, void *, int);
CODE:
	func   = INT2PTR(float(*)(int, void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2, i3);
OUTPUT:
	RETVAL

char *
nci_tippi( c_func, i0, p1, p2, i3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	int i3
PREINIT:
	char *(*func)(int, void *, void *, int);
CODE:
	func   = INT2PTR(char *(*)(int, void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2, i3);
OUTPUT:
	RETVAL

int
nci_iippi( c_func, i0, p1, p2, i3 )
	SV* c_func
	int i0
	void * p1
	void * p2
	int i3
PREINIT:
	int(*func)(int, void *, void *, int);
CODE:
	func   = INT2PTR(int(*)(int, void *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, p2, i3);
OUTPUT:
	RETVAL

void *
nci_ppdpi( c_func, p0, d1, p2, i3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	int i3
PREINIT:
	void *(*func)(void *, double, void *, int);
CODE:
	func   = INT2PTR(void *(*)(void *, double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2, i3);
OUTPUT:
	RETVAL

void
nci_vpdpi( c_func, p0, d1, p2, i3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	int i3
PREINIT:
	void(*func)(void *, double, void *, int);
CODE:
	func   = INT2PTR(void(*)(void *, double, void *, int), SvIV(c_func) );
	(*func)(p0, d1, p2, i3);

double
nci_dpdpi( c_func, p0, d1, p2, i3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	int i3
PREINIT:
	double(*func)(void *, double, void *, int);
CODE:
	func   = INT2PTR(double(*)(void *, double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2, i3);
OUTPUT:
	RETVAL

short
nci_spdpi( c_func, p0, d1, p2, i3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	int i3
PREINIT:
	short(*func)(void *, double, void *, int);
CODE:
	func   = INT2PTR(short(*)(void *, double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2, i3);
OUTPUT:
	RETVAL

float
nci_fpdpi( c_func, p0, d1, p2, i3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	int i3
PREINIT:
	float(*func)(void *, double, void *, int);
CODE:
	func   = INT2PTR(float(*)(void *, double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2, i3);
OUTPUT:
	RETVAL

char *
nci_tpdpi( c_func, p0, d1, p2, i3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	int i3
PREINIT:
	char *(*func)(void *, double, void *, int);
CODE:
	func   = INT2PTR(char *(*)(void *, double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2, i3);
OUTPUT:
	RETVAL

int
nci_ipdpi( c_func, p0, d1, p2, i3 )
	SV* c_func
	void * p0
	double d1
	void * p2
	int i3
PREINIT:
	int(*func)(void *, double, void *, int);
CODE:
	func   = INT2PTR(int(*)(void *, double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, p2, i3);
OUTPUT:
	RETVAL

void *
nci_pvdpi( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvdpi( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvdpi( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svdpi( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvdpi( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvdpi( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivdpi( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pddpi( c_func, d0, d1, p2, i3 )
	SV* c_func
	double d0
	double d1
	void * p2
	int i3
PREINIT:
	void *(*func)(double, double, void *, int);
CODE:
	func   = INT2PTR(void *(*)(double, double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2, i3);
OUTPUT:
	RETVAL

void
nci_vddpi( c_func, d0, d1, p2, i3 )
	SV* c_func
	double d0
	double d1
	void * p2
	int i3
PREINIT:
	void(*func)(double, double, void *, int);
CODE:
	func   = INT2PTR(void(*)(double, double, void *, int), SvIV(c_func) );
	(*func)(d0, d1, p2, i3);

double
nci_dddpi( c_func, d0, d1, p2, i3 )
	SV* c_func
	double d0
	double d1
	void * p2
	int i3
PREINIT:
	double(*func)(double, double, void *, int);
CODE:
	func   = INT2PTR(double(*)(double, double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2, i3);
OUTPUT:
	RETVAL

short
nci_sddpi( c_func, d0, d1, p2, i3 )
	SV* c_func
	double d0
	double d1
	void * p2
	int i3
PREINIT:
	short(*func)(double, double, void *, int);
CODE:
	func   = INT2PTR(short(*)(double, double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2, i3);
OUTPUT:
	RETVAL

float
nci_fddpi( c_func, d0, d1, p2, i3 )
	SV* c_func
	double d0
	double d1
	void * p2
	int i3
PREINIT:
	float(*func)(double, double, void *, int);
CODE:
	func   = INT2PTR(float(*)(double, double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2, i3);
OUTPUT:
	RETVAL

char *
nci_tddpi( c_func, d0, d1, p2, i3 )
	SV* c_func
	double d0
	double d1
	void * p2
	int i3
PREINIT:
	char *(*func)(double, double, void *, int);
CODE:
	func   = INT2PTR(char *(*)(double, double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2, i3);
OUTPUT:
	RETVAL

int
nci_iddpi( c_func, d0, d1, p2, i3 )
	SV* c_func
	double d0
	double d1
	void * p2
	int i3
PREINIT:
	int(*func)(double, double, void *, int);
CODE:
	func   = INT2PTR(int(*)(double, double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, p2, i3);
OUTPUT:
	RETVAL

void *
nci_psdpi( c_func, s0, d1, p2, i3 )
	SV* c_func
	short s0
	double d1
	void * p2
	int i3
PREINIT:
	void *(*func)(short, double, void *, int);
CODE:
	func   = INT2PTR(void *(*)(short, double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2, i3);
OUTPUT:
	RETVAL

void
nci_vsdpi( c_func, s0, d1, p2, i3 )
	SV* c_func
	short s0
	double d1
	void * p2
	int i3
PREINIT:
	void(*func)(short, double, void *, int);
CODE:
	func   = INT2PTR(void(*)(short, double, void *, int), SvIV(c_func) );
	(*func)(s0, d1, p2, i3);

double
nci_dsdpi( c_func, s0, d1, p2, i3 )
	SV* c_func
	short s0
	double d1
	void * p2
	int i3
PREINIT:
	double(*func)(short, double, void *, int);
CODE:
	func   = INT2PTR(double(*)(short, double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2, i3);
OUTPUT:
	RETVAL

short
nci_ssdpi( c_func, s0, d1, p2, i3 )
	SV* c_func
	short s0
	double d1
	void * p2
	int i3
PREINIT:
	short(*func)(short, double, void *, int);
CODE:
	func   = INT2PTR(short(*)(short, double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2, i3);
OUTPUT:
	RETVAL

float
nci_fsdpi( c_func, s0, d1, p2, i3 )
	SV* c_func
	short s0
	double d1
	void * p2
	int i3
PREINIT:
	float(*func)(short, double, void *, int);
CODE:
	func   = INT2PTR(float(*)(short, double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2, i3);
OUTPUT:
	RETVAL

char *
nci_tsdpi( c_func, s0, d1, p2, i3 )
	SV* c_func
	short s0
	double d1
	void * p2
	int i3
PREINIT:
	char *(*func)(short, double, void *, int);
CODE:
	func   = INT2PTR(char *(*)(short, double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2, i3);
OUTPUT:
	RETVAL

int
nci_isdpi( c_func, s0, d1, p2, i3 )
	SV* c_func
	short s0
	double d1
	void * p2
	int i3
PREINIT:
	int(*func)(short, double, void *, int);
CODE:
	func   = INT2PTR(int(*)(short, double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, p2, i3);
OUTPUT:
	RETVAL

void *
nci_pfdpi( c_func, f0, d1, p2, i3 )
	SV* c_func
	float f0
	double d1
	void * p2
	int i3
PREINIT:
	void *(*func)(float, double, void *, int);
CODE:
	func   = INT2PTR(void *(*)(float, double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2, i3);
OUTPUT:
	RETVAL

void
nci_vfdpi( c_func, f0, d1, p2, i3 )
	SV* c_func
	float f0
	double d1
	void * p2
	int i3
PREINIT:
	void(*func)(float, double, void *, int);
CODE:
	func   = INT2PTR(void(*)(float, double, void *, int), SvIV(c_func) );
	(*func)(f0, d1, p2, i3);

double
nci_dfdpi( c_func, f0, d1, p2, i3 )
	SV* c_func
	float f0
	double d1
	void * p2
	int i3
PREINIT:
	double(*func)(float, double, void *, int);
CODE:
	func   = INT2PTR(double(*)(float, double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2, i3);
OUTPUT:
	RETVAL

short
nci_sfdpi( c_func, f0, d1, p2, i3 )
	SV* c_func
	float f0
	double d1
	void * p2
	int i3
PREINIT:
	short(*func)(float, double, void *, int);
CODE:
	func   = INT2PTR(short(*)(float, double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2, i3);
OUTPUT:
	RETVAL

float
nci_ffdpi( c_func, f0, d1, p2, i3 )
	SV* c_func
	float f0
	double d1
	void * p2
	int i3
PREINIT:
	float(*func)(float, double, void *, int);
CODE:
	func   = INT2PTR(float(*)(float, double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2, i3);
OUTPUT:
	RETVAL

char *
nci_tfdpi( c_func, f0, d1, p2, i3 )
	SV* c_func
	float f0
	double d1
	void * p2
	int i3
PREINIT:
	char *(*func)(float, double, void *, int);
CODE:
	func   = INT2PTR(char *(*)(float, double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2, i3);
OUTPUT:
	RETVAL

int
nci_ifdpi( c_func, f0, d1, p2, i3 )
	SV* c_func
	float f0
	double d1
	void * p2
	int i3
PREINIT:
	int(*func)(float, double, void *, int);
CODE:
	func   = INT2PTR(int(*)(float, double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, p2, i3);
OUTPUT:
	RETVAL

void *
nci_ptdpi( c_func, t0, d1, p2, i3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	int i3
PREINIT:
	void *(*func)(char *, double, void *, int);
CODE:
	func   = INT2PTR(void *(*)(char *, double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2, i3);
OUTPUT:
	RETVAL

void
nci_vtdpi( c_func, t0, d1, p2, i3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	int i3
PREINIT:
	void(*func)(char *, double, void *, int);
CODE:
	func   = INT2PTR(void(*)(char *, double, void *, int), SvIV(c_func) );
	(*func)(t0, d1, p2, i3);

double
nci_dtdpi( c_func, t0, d1, p2, i3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	int i3
PREINIT:
	double(*func)(char *, double, void *, int);
CODE:
	func   = INT2PTR(double(*)(char *, double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2, i3);
OUTPUT:
	RETVAL

short
nci_stdpi( c_func, t0, d1, p2, i3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	int i3
PREINIT:
	short(*func)(char *, double, void *, int);
CODE:
	func   = INT2PTR(short(*)(char *, double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2, i3);
OUTPUT:
	RETVAL

float
nci_ftdpi( c_func, t0, d1, p2, i3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	int i3
PREINIT:
	float(*func)(char *, double, void *, int);
CODE:
	func   = INT2PTR(float(*)(char *, double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2, i3);
OUTPUT:
	RETVAL

char *
nci_ttdpi( c_func, t0, d1, p2, i3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	int i3
PREINIT:
	char *(*func)(char *, double, void *, int);
CODE:
	func   = INT2PTR(char *(*)(char *, double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2, i3);
OUTPUT:
	RETVAL

int
nci_itdpi( c_func, t0, d1, p2, i3 )
	SV* c_func
	char * t0
	double d1
	void * p2
	int i3
PREINIT:
	int(*func)(char *, double, void *, int);
CODE:
	func   = INT2PTR(int(*)(char *, double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, p2, i3);
OUTPUT:
	RETVAL

void *
nci_pidpi( c_func, i0, d1, p2, i3 )
	SV* c_func
	int i0
	double d1
	void * p2
	int i3
PREINIT:
	void *(*func)(int, double, void *, int);
CODE:
	func   = INT2PTR(void *(*)(int, double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2, i3);
OUTPUT:
	RETVAL

void
nci_vidpi( c_func, i0, d1, p2, i3 )
	SV* c_func
	int i0
	double d1
	void * p2
	int i3
PREINIT:
	void(*func)(int, double, void *, int);
CODE:
	func   = INT2PTR(void(*)(int, double, void *, int), SvIV(c_func) );
	(*func)(i0, d1, p2, i3);

double
nci_didpi( c_func, i0, d1, p2, i3 )
	SV* c_func
	int i0
	double d1
	void * p2
	int i3
PREINIT:
	double(*func)(int, double, void *, int);
CODE:
	func   = INT2PTR(double(*)(int, double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2, i3);
OUTPUT:
	RETVAL

short
nci_sidpi( c_func, i0, d1, p2, i3 )
	SV* c_func
	int i0
	double d1
	void * p2
	int i3
PREINIT:
	short(*func)(int, double, void *, int);
CODE:
	func   = INT2PTR(short(*)(int, double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2, i3);
OUTPUT:
	RETVAL

float
nci_fidpi( c_func, i0, d1, p2, i3 )
	SV* c_func
	int i0
	double d1
	void * p2
	int i3
PREINIT:
	float(*func)(int, double, void *, int);
CODE:
	func   = INT2PTR(float(*)(int, double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2, i3);
OUTPUT:
	RETVAL

char *
nci_tidpi( c_func, i0, d1, p2, i3 )
	SV* c_func
	int i0
	double d1
	void * p2
	int i3
PREINIT:
	char *(*func)(int, double, void *, int);
CODE:
	func   = INT2PTR(char *(*)(int, double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2, i3);
OUTPUT:
	RETVAL

int
nci_iidpi( c_func, i0, d1, p2, i3 )
	SV* c_func
	int i0
	double d1
	void * p2
	int i3
PREINIT:
	int(*func)(int, double, void *, int);
CODE:
	func   = INT2PTR(int(*)(int, double, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, p2, i3);
OUTPUT:
	RETVAL

void *
nci_ppspi( c_func, p0, s1, p2, i3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	int i3
PREINIT:
	void *(*func)(void *, short, void *, int);
CODE:
	func   = INT2PTR(void *(*)(void *, short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2, i3);
OUTPUT:
	RETVAL

void
nci_vpspi( c_func, p0, s1, p2, i3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	int i3
PREINIT:
	void(*func)(void *, short, void *, int);
CODE:
	func   = INT2PTR(void(*)(void *, short, void *, int), SvIV(c_func) );
	(*func)(p0, s1, p2, i3);

double
nci_dpspi( c_func, p0, s1, p2, i3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	int i3
PREINIT:
	double(*func)(void *, short, void *, int);
CODE:
	func   = INT2PTR(double(*)(void *, short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2, i3);
OUTPUT:
	RETVAL

short
nci_spspi( c_func, p0, s1, p2, i3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	int i3
PREINIT:
	short(*func)(void *, short, void *, int);
CODE:
	func   = INT2PTR(short(*)(void *, short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2, i3);
OUTPUT:
	RETVAL

float
nci_fpspi( c_func, p0, s1, p2, i3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	int i3
PREINIT:
	float(*func)(void *, short, void *, int);
CODE:
	func   = INT2PTR(float(*)(void *, short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2, i3);
OUTPUT:
	RETVAL

char *
nci_tpspi( c_func, p0, s1, p2, i3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	int i3
PREINIT:
	char *(*func)(void *, short, void *, int);
CODE:
	func   = INT2PTR(char *(*)(void *, short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2, i3);
OUTPUT:
	RETVAL

int
nci_ipspi( c_func, p0, s1, p2, i3 )
	SV* c_func
	void * p0
	short s1
	void * p2
	int i3
PREINIT:
	int(*func)(void *, short, void *, int);
CODE:
	func   = INT2PTR(int(*)(void *, short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, p2, i3);
OUTPUT:
	RETVAL

void *
nci_pvspi( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvspi( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvspi( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svspi( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvspi( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvspi( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivspi( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdspi( c_func, d0, s1, p2, i3 )
	SV* c_func
	double d0
	short s1
	void * p2
	int i3
PREINIT:
	void *(*func)(double, short, void *, int);
CODE:
	func   = INT2PTR(void *(*)(double, short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2, i3);
OUTPUT:
	RETVAL

void
nci_vdspi( c_func, d0, s1, p2, i3 )
	SV* c_func
	double d0
	short s1
	void * p2
	int i3
PREINIT:
	void(*func)(double, short, void *, int);
CODE:
	func   = INT2PTR(void(*)(double, short, void *, int), SvIV(c_func) );
	(*func)(d0, s1, p2, i3);

double
nci_ddspi( c_func, d0, s1, p2, i3 )
	SV* c_func
	double d0
	short s1
	void * p2
	int i3
PREINIT:
	double(*func)(double, short, void *, int);
CODE:
	func   = INT2PTR(double(*)(double, short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2, i3);
OUTPUT:
	RETVAL

short
nci_sdspi( c_func, d0, s1, p2, i3 )
	SV* c_func
	double d0
	short s1
	void * p2
	int i3
PREINIT:
	short(*func)(double, short, void *, int);
CODE:
	func   = INT2PTR(short(*)(double, short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2, i3);
OUTPUT:
	RETVAL

float
nci_fdspi( c_func, d0, s1, p2, i3 )
	SV* c_func
	double d0
	short s1
	void * p2
	int i3
PREINIT:
	float(*func)(double, short, void *, int);
CODE:
	func   = INT2PTR(float(*)(double, short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2, i3);
OUTPUT:
	RETVAL

char *
nci_tdspi( c_func, d0, s1, p2, i3 )
	SV* c_func
	double d0
	short s1
	void * p2
	int i3
PREINIT:
	char *(*func)(double, short, void *, int);
CODE:
	func   = INT2PTR(char *(*)(double, short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2, i3);
OUTPUT:
	RETVAL

int
nci_idspi( c_func, d0, s1, p2, i3 )
	SV* c_func
	double d0
	short s1
	void * p2
	int i3
PREINIT:
	int(*func)(double, short, void *, int);
CODE:
	func   = INT2PTR(int(*)(double, short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, p2, i3);
OUTPUT:
	RETVAL

void *
nci_psspi( c_func, s0, s1, p2, i3 )
	SV* c_func
	short s0
	short s1
	void * p2
	int i3
PREINIT:
	void *(*func)(short, short, void *, int);
CODE:
	func   = INT2PTR(void *(*)(short, short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2, i3);
OUTPUT:
	RETVAL

void
nci_vsspi( c_func, s0, s1, p2, i3 )
	SV* c_func
	short s0
	short s1
	void * p2
	int i3
PREINIT:
	void(*func)(short, short, void *, int);
CODE:
	func   = INT2PTR(void(*)(short, short, void *, int), SvIV(c_func) );
	(*func)(s0, s1, p2, i3);

double
nci_dsspi( c_func, s0, s1, p2, i3 )
	SV* c_func
	short s0
	short s1
	void * p2
	int i3
PREINIT:
	double(*func)(short, short, void *, int);
CODE:
	func   = INT2PTR(double(*)(short, short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2, i3);
OUTPUT:
	RETVAL

short
nci_ssspi( c_func, s0, s1, p2, i3 )
	SV* c_func
	short s0
	short s1
	void * p2
	int i3
PREINIT:
	short(*func)(short, short, void *, int);
CODE:
	func   = INT2PTR(short(*)(short, short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2, i3);
OUTPUT:
	RETVAL

float
nci_fsspi( c_func, s0, s1, p2, i3 )
	SV* c_func
	short s0
	short s1
	void * p2
	int i3
PREINIT:
	float(*func)(short, short, void *, int);
CODE:
	func   = INT2PTR(float(*)(short, short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2, i3);
OUTPUT:
	RETVAL

char *
nci_tsspi( c_func, s0, s1, p2, i3 )
	SV* c_func
	short s0
	short s1
	void * p2
	int i3
PREINIT:
	char *(*func)(short, short, void *, int);
CODE:
	func   = INT2PTR(char *(*)(short, short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2, i3);
OUTPUT:
	RETVAL

int
nci_isspi( c_func, s0, s1, p2, i3 )
	SV* c_func
	short s0
	short s1
	void * p2
	int i3
PREINIT:
	int(*func)(short, short, void *, int);
CODE:
	func   = INT2PTR(int(*)(short, short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, p2, i3);
OUTPUT:
	RETVAL

void *
nci_pfspi( c_func, f0, s1, p2, i3 )
	SV* c_func
	float f0
	short s1
	void * p2
	int i3
PREINIT:
	void *(*func)(float, short, void *, int);
CODE:
	func   = INT2PTR(void *(*)(float, short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2, i3);
OUTPUT:
	RETVAL

void
nci_vfspi( c_func, f0, s1, p2, i3 )
	SV* c_func
	float f0
	short s1
	void * p2
	int i3
PREINIT:
	void(*func)(float, short, void *, int);
CODE:
	func   = INT2PTR(void(*)(float, short, void *, int), SvIV(c_func) );
	(*func)(f0, s1, p2, i3);

double
nci_dfspi( c_func, f0, s1, p2, i3 )
	SV* c_func
	float f0
	short s1
	void * p2
	int i3
PREINIT:
	double(*func)(float, short, void *, int);
CODE:
	func   = INT2PTR(double(*)(float, short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2, i3);
OUTPUT:
	RETVAL

short
nci_sfspi( c_func, f0, s1, p2, i3 )
	SV* c_func
	float f0
	short s1
	void * p2
	int i3
PREINIT:
	short(*func)(float, short, void *, int);
CODE:
	func   = INT2PTR(short(*)(float, short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2, i3);
OUTPUT:
	RETVAL

float
nci_ffspi( c_func, f0, s1, p2, i3 )
	SV* c_func
	float f0
	short s1
	void * p2
	int i3
PREINIT:
	float(*func)(float, short, void *, int);
CODE:
	func   = INT2PTR(float(*)(float, short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2, i3);
OUTPUT:
	RETVAL

char *
nci_tfspi( c_func, f0, s1, p2, i3 )
	SV* c_func
	float f0
	short s1
	void * p2
	int i3
PREINIT:
	char *(*func)(float, short, void *, int);
CODE:
	func   = INT2PTR(char *(*)(float, short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2, i3);
OUTPUT:
	RETVAL

int
nci_ifspi( c_func, f0, s1, p2, i3 )
	SV* c_func
	float f0
	short s1
	void * p2
	int i3
PREINIT:
	int(*func)(float, short, void *, int);
CODE:
	func   = INT2PTR(int(*)(float, short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, p2, i3);
OUTPUT:
	RETVAL

void *
nci_ptspi( c_func, t0, s1, p2, i3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	int i3
PREINIT:
	void *(*func)(char *, short, void *, int);
CODE:
	func   = INT2PTR(void *(*)(char *, short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2, i3);
OUTPUT:
	RETVAL

void
nci_vtspi( c_func, t0, s1, p2, i3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	int i3
PREINIT:
	void(*func)(char *, short, void *, int);
CODE:
	func   = INT2PTR(void(*)(char *, short, void *, int), SvIV(c_func) );
	(*func)(t0, s1, p2, i3);

double
nci_dtspi( c_func, t0, s1, p2, i3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	int i3
PREINIT:
	double(*func)(char *, short, void *, int);
CODE:
	func   = INT2PTR(double(*)(char *, short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2, i3);
OUTPUT:
	RETVAL

short
nci_stspi( c_func, t0, s1, p2, i3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	int i3
PREINIT:
	short(*func)(char *, short, void *, int);
CODE:
	func   = INT2PTR(short(*)(char *, short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2, i3);
OUTPUT:
	RETVAL

float
nci_ftspi( c_func, t0, s1, p2, i3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	int i3
PREINIT:
	float(*func)(char *, short, void *, int);
CODE:
	func   = INT2PTR(float(*)(char *, short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2, i3);
OUTPUT:
	RETVAL

char *
nci_ttspi( c_func, t0, s1, p2, i3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	int i3
PREINIT:
	char *(*func)(char *, short, void *, int);
CODE:
	func   = INT2PTR(char *(*)(char *, short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2, i3);
OUTPUT:
	RETVAL

int
nci_itspi( c_func, t0, s1, p2, i3 )
	SV* c_func
	char * t0
	short s1
	void * p2
	int i3
PREINIT:
	int(*func)(char *, short, void *, int);
CODE:
	func   = INT2PTR(int(*)(char *, short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, p2, i3);
OUTPUT:
	RETVAL

void *
nci_pispi( c_func, i0, s1, p2, i3 )
	SV* c_func
	int i0
	short s1
	void * p2
	int i3
PREINIT:
	void *(*func)(int, short, void *, int);
CODE:
	func   = INT2PTR(void *(*)(int, short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2, i3);
OUTPUT:
	RETVAL

void
nci_vispi( c_func, i0, s1, p2, i3 )
	SV* c_func
	int i0
	short s1
	void * p2
	int i3
PREINIT:
	void(*func)(int, short, void *, int);
CODE:
	func   = INT2PTR(void(*)(int, short, void *, int), SvIV(c_func) );
	(*func)(i0, s1, p2, i3);

double
nci_dispi( c_func, i0, s1, p2, i3 )
	SV* c_func
	int i0
	short s1
	void * p2
	int i3
PREINIT:
	double(*func)(int, short, void *, int);
CODE:
	func   = INT2PTR(double(*)(int, short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2, i3);
OUTPUT:
	RETVAL

short
nci_sispi( c_func, i0, s1, p2, i3 )
	SV* c_func
	int i0
	short s1
	void * p2
	int i3
PREINIT:
	short(*func)(int, short, void *, int);
CODE:
	func   = INT2PTR(short(*)(int, short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2, i3);
OUTPUT:
	RETVAL

float
nci_fispi( c_func, i0, s1, p2, i3 )
	SV* c_func
	int i0
	short s1
	void * p2
	int i3
PREINIT:
	float(*func)(int, short, void *, int);
CODE:
	func   = INT2PTR(float(*)(int, short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2, i3);
OUTPUT:
	RETVAL

char *
nci_tispi( c_func, i0, s1, p2, i3 )
	SV* c_func
	int i0
	short s1
	void * p2
	int i3
PREINIT:
	char *(*func)(int, short, void *, int);
CODE:
	func   = INT2PTR(char *(*)(int, short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2, i3);
OUTPUT:
	RETVAL

int
nci_iispi( c_func, i0, s1, p2, i3 )
	SV* c_func
	int i0
	short s1
	void * p2
	int i3
PREINIT:
	int(*func)(int, short, void *, int);
CODE:
	func   = INT2PTR(int(*)(int, short, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, p2, i3);
OUTPUT:
	RETVAL

void *
nci_ppfpi( c_func, p0, f1, p2, i3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	int i3
PREINIT:
	void *(*func)(void *, float, void *, int);
CODE:
	func   = INT2PTR(void *(*)(void *, float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2, i3);
OUTPUT:
	RETVAL

void
nci_vpfpi( c_func, p0, f1, p2, i3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	int i3
PREINIT:
	void(*func)(void *, float, void *, int);
CODE:
	func   = INT2PTR(void(*)(void *, float, void *, int), SvIV(c_func) );
	(*func)(p0, f1, p2, i3);

double
nci_dpfpi( c_func, p0, f1, p2, i3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	int i3
PREINIT:
	double(*func)(void *, float, void *, int);
CODE:
	func   = INT2PTR(double(*)(void *, float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2, i3);
OUTPUT:
	RETVAL

short
nci_spfpi( c_func, p0, f1, p2, i3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	int i3
PREINIT:
	short(*func)(void *, float, void *, int);
CODE:
	func   = INT2PTR(short(*)(void *, float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2, i3);
OUTPUT:
	RETVAL

float
nci_fpfpi( c_func, p0, f1, p2, i3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	int i3
PREINIT:
	float(*func)(void *, float, void *, int);
CODE:
	func   = INT2PTR(float(*)(void *, float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2, i3);
OUTPUT:
	RETVAL

char *
nci_tpfpi( c_func, p0, f1, p2, i3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	int i3
PREINIT:
	char *(*func)(void *, float, void *, int);
CODE:
	func   = INT2PTR(char *(*)(void *, float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2, i3);
OUTPUT:
	RETVAL

int
nci_ipfpi( c_func, p0, f1, p2, i3 )
	SV* c_func
	void * p0
	float f1
	void * p2
	int i3
PREINIT:
	int(*func)(void *, float, void *, int);
CODE:
	func   = INT2PTR(int(*)(void *, float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, p2, i3);
OUTPUT:
	RETVAL

void *
nci_pvfpi( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvfpi( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvfpi( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svfpi( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvfpi( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvfpi( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivfpi( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdfpi( c_func, d0, f1, p2, i3 )
	SV* c_func
	double d0
	float f1
	void * p2
	int i3
PREINIT:
	void *(*func)(double, float, void *, int);
CODE:
	func   = INT2PTR(void *(*)(double, float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2, i3);
OUTPUT:
	RETVAL

void
nci_vdfpi( c_func, d0, f1, p2, i3 )
	SV* c_func
	double d0
	float f1
	void * p2
	int i3
PREINIT:
	void(*func)(double, float, void *, int);
CODE:
	func   = INT2PTR(void(*)(double, float, void *, int), SvIV(c_func) );
	(*func)(d0, f1, p2, i3);

double
nci_ddfpi( c_func, d0, f1, p2, i3 )
	SV* c_func
	double d0
	float f1
	void * p2
	int i3
PREINIT:
	double(*func)(double, float, void *, int);
CODE:
	func   = INT2PTR(double(*)(double, float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2, i3);
OUTPUT:
	RETVAL

short
nci_sdfpi( c_func, d0, f1, p2, i3 )
	SV* c_func
	double d0
	float f1
	void * p2
	int i3
PREINIT:
	short(*func)(double, float, void *, int);
CODE:
	func   = INT2PTR(short(*)(double, float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2, i3);
OUTPUT:
	RETVAL

float
nci_fdfpi( c_func, d0, f1, p2, i3 )
	SV* c_func
	double d0
	float f1
	void * p2
	int i3
PREINIT:
	float(*func)(double, float, void *, int);
CODE:
	func   = INT2PTR(float(*)(double, float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2, i3);
OUTPUT:
	RETVAL

char *
nci_tdfpi( c_func, d0, f1, p2, i3 )
	SV* c_func
	double d0
	float f1
	void * p2
	int i3
PREINIT:
	char *(*func)(double, float, void *, int);
CODE:
	func   = INT2PTR(char *(*)(double, float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2, i3);
OUTPUT:
	RETVAL

int
nci_idfpi( c_func, d0, f1, p2, i3 )
	SV* c_func
	double d0
	float f1
	void * p2
	int i3
PREINIT:
	int(*func)(double, float, void *, int);
CODE:
	func   = INT2PTR(int(*)(double, float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, p2, i3);
OUTPUT:
	RETVAL

void *
nci_psfpi( c_func, s0, f1, p2, i3 )
	SV* c_func
	short s0
	float f1
	void * p2
	int i3
PREINIT:
	void *(*func)(short, float, void *, int);
CODE:
	func   = INT2PTR(void *(*)(short, float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2, i3);
OUTPUT:
	RETVAL

void
nci_vsfpi( c_func, s0, f1, p2, i3 )
	SV* c_func
	short s0
	float f1
	void * p2
	int i3
PREINIT:
	void(*func)(short, float, void *, int);
CODE:
	func   = INT2PTR(void(*)(short, float, void *, int), SvIV(c_func) );
	(*func)(s0, f1, p2, i3);

double
nci_dsfpi( c_func, s0, f1, p2, i3 )
	SV* c_func
	short s0
	float f1
	void * p2
	int i3
PREINIT:
	double(*func)(short, float, void *, int);
CODE:
	func   = INT2PTR(double(*)(short, float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2, i3);
OUTPUT:
	RETVAL

short
nci_ssfpi( c_func, s0, f1, p2, i3 )
	SV* c_func
	short s0
	float f1
	void * p2
	int i3
PREINIT:
	short(*func)(short, float, void *, int);
CODE:
	func   = INT2PTR(short(*)(short, float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2, i3);
OUTPUT:
	RETVAL

float
nci_fsfpi( c_func, s0, f1, p2, i3 )
	SV* c_func
	short s0
	float f1
	void * p2
	int i3
PREINIT:
	float(*func)(short, float, void *, int);
CODE:
	func   = INT2PTR(float(*)(short, float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2, i3);
OUTPUT:
	RETVAL

char *
nci_tsfpi( c_func, s0, f1, p2, i3 )
	SV* c_func
	short s0
	float f1
	void * p2
	int i3
PREINIT:
	char *(*func)(short, float, void *, int);
CODE:
	func   = INT2PTR(char *(*)(short, float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2, i3);
OUTPUT:
	RETVAL

int
nci_isfpi( c_func, s0, f1, p2, i3 )
	SV* c_func
	short s0
	float f1
	void * p2
	int i3
PREINIT:
	int(*func)(short, float, void *, int);
CODE:
	func   = INT2PTR(int(*)(short, float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, p2, i3);
OUTPUT:
	RETVAL

void *
nci_pffpi( c_func, f0, f1, p2, i3 )
	SV* c_func
	float f0
	float f1
	void * p2
	int i3
PREINIT:
	void *(*func)(float, float, void *, int);
CODE:
	func   = INT2PTR(void *(*)(float, float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2, i3);
OUTPUT:
	RETVAL

void
nci_vffpi( c_func, f0, f1, p2, i3 )
	SV* c_func
	float f0
	float f1
	void * p2
	int i3
PREINIT:
	void(*func)(float, float, void *, int);
CODE:
	func   = INT2PTR(void(*)(float, float, void *, int), SvIV(c_func) );
	(*func)(f0, f1, p2, i3);

double
nci_dffpi( c_func, f0, f1, p2, i3 )
	SV* c_func
	float f0
	float f1
	void * p2
	int i3
PREINIT:
	double(*func)(float, float, void *, int);
CODE:
	func   = INT2PTR(double(*)(float, float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2, i3);
OUTPUT:
	RETVAL

short
nci_sffpi( c_func, f0, f1, p2, i3 )
	SV* c_func
	float f0
	float f1
	void * p2
	int i3
PREINIT:
	short(*func)(float, float, void *, int);
CODE:
	func   = INT2PTR(short(*)(float, float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2, i3);
OUTPUT:
	RETVAL

float
nci_fffpi( c_func, f0, f1, p2, i3 )
	SV* c_func
	float f0
	float f1
	void * p2
	int i3
PREINIT:
	float(*func)(float, float, void *, int);
CODE:
	func   = INT2PTR(float(*)(float, float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2, i3);
OUTPUT:
	RETVAL

char *
nci_tffpi( c_func, f0, f1, p2, i3 )
	SV* c_func
	float f0
	float f1
	void * p2
	int i3
PREINIT:
	char *(*func)(float, float, void *, int);
CODE:
	func   = INT2PTR(char *(*)(float, float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2, i3);
OUTPUT:
	RETVAL

int
nci_iffpi( c_func, f0, f1, p2, i3 )
	SV* c_func
	float f0
	float f1
	void * p2
	int i3
PREINIT:
	int(*func)(float, float, void *, int);
CODE:
	func   = INT2PTR(int(*)(float, float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, p2, i3);
OUTPUT:
	RETVAL

void *
nci_ptfpi( c_func, t0, f1, p2, i3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	int i3
PREINIT:
	void *(*func)(char *, float, void *, int);
CODE:
	func   = INT2PTR(void *(*)(char *, float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2, i3);
OUTPUT:
	RETVAL

void
nci_vtfpi( c_func, t0, f1, p2, i3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	int i3
PREINIT:
	void(*func)(char *, float, void *, int);
CODE:
	func   = INT2PTR(void(*)(char *, float, void *, int), SvIV(c_func) );
	(*func)(t0, f1, p2, i3);

double
nci_dtfpi( c_func, t0, f1, p2, i3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	int i3
PREINIT:
	double(*func)(char *, float, void *, int);
CODE:
	func   = INT2PTR(double(*)(char *, float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2, i3);
OUTPUT:
	RETVAL

short
nci_stfpi( c_func, t0, f1, p2, i3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	int i3
PREINIT:
	short(*func)(char *, float, void *, int);
CODE:
	func   = INT2PTR(short(*)(char *, float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2, i3);
OUTPUT:
	RETVAL

float
nci_ftfpi( c_func, t0, f1, p2, i3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	int i3
PREINIT:
	float(*func)(char *, float, void *, int);
CODE:
	func   = INT2PTR(float(*)(char *, float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2, i3);
OUTPUT:
	RETVAL

char *
nci_ttfpi( c_func, t0, f1, p2, i3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	int i3
PREINIT:
	char *(*func)(char *, float, void *, int);
CODE:
	func   = INT2PTR(char *(*)(char *, float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2, i3);
OUTPUT:
	RETVAL

int
nci_itfpi( c_func, t0, f1, p2, i3 )
	SV* c_func
	char * t0
	float f1
	void * p2
	int i3
PREINIT:
	int(*func)(char *, float, void *, int);
CODE:
	func   = INT2PTR(int(*)(char *, float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, p2, i3);
OUTPUT:
	RETVAL

void *
nci_pifpi( c_func, i0, f1, p2, i3 )
	SV* c_func
	int i0
	float f1
	void * p2
	int i3
PREINIT:
	void *(*func)(int, float, void *, int);
CODE:
	func   = INT2PTR(void *(*)(int, float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2, i3);
OUTPUT:
	RETVAL

void
nci_vifpi( c_func, i0, f1, p2, i3 )
	SV* c_func
	int i0
	float f1
	void * p2
	int i3
PREINIT:
	void(*func)(int, float, void *, int);
CODE:
	func   = INT2PTR(void(*)(int, float, void *, int), SvIV(c_func) );
	(*func)(i0, f1, p2, i3);

double
nci_difpi( c_func, i0, f1, p2, i3 )
	SV* c_func
	int i0
	float f1
	void * p2
	int i3
PREINIT:
	double(*func)(int, float, void *, int);
CODE:
	func   = INT2PTR(double(*)(int, float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2, i3);
OUTPUT:
	RETVAL

short
nci_sifpi( c_func, i0, f1, p2, i3 )
	SV* c_func
	int i0
	float f1
	void * p2
	int i3
PREINIT:
	short(*func)(int, float, void *, int);
CODE:
	func   = INT2PTR(short(*)(int, float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2, i3);
OUTPUT:
	RETVAL

float
nci_fifpi( c_func, i0, f1, p2, i3 )
	SV* c_func
	int i0
	float f1
	void * p2
	int i3
PREINIT:
	float(*func)(int, float, void *, int);
CODE:
	func   = INT2PTR(float(*)(int, float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2, i3);
OUTPUT:
	RETVAL

char *
nci_tifpi( c_func, i0, f1, p2, i3 )
	SV* c_func
	int i0
	float f1
	void * p2
	int i3
PREINIT:
	char *(*func)(int, float, void *, int);
CODE:
	func   = INT2PTR(char *(*)(int, float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2, i3);
OUTPUT:
	RETVAL

int
nci_iifpi( c_func, i0, f1, p2, i3 )
	SV* c_func
	int i0
	float f1
	void * p2
	int i3
PREINIT:
	int(*func)(int, float, void *, int);
CODE:
	func   = INT2PTR(int(*)(int, float, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, p2, i3);
OUTPUT:
	RETVAL

void *
nci_pptpi( c_func, p0, t1, p2, i3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	int i3
PREINIT:
	void *(*func)(void *, char *, void *, int);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2, i3);
OUTPUT:
	RETVAL

void
nci_vptpi( c_func, p0, t1, p2, i3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	int i3
PREINIT:
	void(*func)(void *, char *, void *, int);
CODE:
	func   = INT2PTR(void(*)(void *, char *, void *, int), SvIV(c_func) );
	(*func)(p0, t1, p2, i3);

double
nci_dptpi( c_func, p0, t1, p2, i3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	int i3
PREINIT:
	double(*func)(void *, char *, void *, int);
CODE:
	func   = INT2PTR(double(*)(void *, char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2, i3);
OUTPUT:
	RETVAL

short
nci_sptpi( c_func, p0, t1, p2, i3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	int i3
PREINIT:
	short(*func)(void *, char *, void *, int);
CODE:
	func   = INT2PTR(short(*)(void *, char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2, i3);
OUTPUT:
	RETVAL

float
nci_fptpi( c_func, p0, t1, p2, i3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	int i3
PREINIT:
	float(*func)(void *, char *, void *, int);
CODE:
	func   = INT2PTR(float(*)(void *, char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2, i3);
OUTPUT:
	RETVAL

char *
nci_tptpi( c_func, p0, t1, p2, i3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	int i3
PREINIT:
	char *(*func)(void *, char *, void *, int);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2, i3);
OUTPUT:
	RETVAL

int
nci_iptpi( c_func, p0, t1, p2, i3 )
	SV* c_func
	void * p0
	char * t1
	void * p2
	int i3
PREINIT:
	int(*func)(void *, char *, void *, int);
CODE:
	func   = INT2PTR(int(*)(void *, char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, p2, i3);
OUTPUT:
	RETVAL

void *
nci_pvtpi( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvtpi( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvtpi( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svtpi( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvtpi( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvtpi( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivtpi( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdtpi( c_func, d0, t1, p2, i3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	int i3
PREINIT:
	void *(*func)(double, char *, void *, int);
CODE:
	func   = INT2PTR(void *(*)(double, char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2, i3);
OUTPUT:
	RETVAL

void
nci_vdtpi( c_func, d0, t1, p2, i3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	int i3
PREINIT:
	void(*func)(double, char *, void *, int);
CODE:
	func   = INT2PTR(void(*)(double, char *, void *, int), SvIV(c_func) );
	(*func)(d0, t1, p2, i3);

double
nci_ddtpi( c_func, d0, t1, p2, i3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	int i3
PREINIT:
	double(*func)(double, char *, void *, int);
CODE:
	func   = INT2PTR(double(*)(double, char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2, i3);
OUTPUT:
	RETVAL

short
nci_sdtpi( c_func, d0, t1, p2, i3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	int i3
PREINIT:
	short(*func)(double, char *, void *, int);
CODE:
	func   = INT2PTR(short(*)(double, char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2, i3);
OUTPUT:
	RETVAL

float
nci_fdtpi( c_func, d0, t1, p2, i3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	int i3
PREINIT:
	float(*func)(double, char *, void *, int);
CODE:
	func   = INT2PTR(float(*)(double, char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2, i3);
OUTPUT:
	RETVAL

char *
nci_tdtpi( c_func, d0, t1, p2, i3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	int i3
PREINIT:
	char *(*func)(double, char *, void *, int);
CODE:
	func   = INT2PTR(char *(*)(double, char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2, i3);
OUTPUT:
	RETVAL

int
nci_idtpi( c_func, d0, t1, p2, i3 )
	SV* c_func
	double d0
	char * t1
	void * p2
	int i3
PREINIT:
	int(*func)(double, char *, void *, int);
CODE:
	func   = INT2PTR(int(*)(double, char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, p2, i3);
OUTPUT:
	RETVAL

void *
nci_pstpi( c_func, s0, t1, p2, i3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	int i3
PREINIT:
	void *(*func)(short, char *, void *, int);
CODE:
	func   = INT2PTR(void *(*)(short, char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2, i3);
OUTPUT:
	RETVAL

void
nci_vstpi( c_func, s0, t1, p2, i3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	int i3
PREINIT:
	void(*func)(short, char *, void *, int);
CODE:
	func   = INT2PTR(void(*)(short, char *, void *, int), SvIV(c_func) );
	(*func)(s0, t1, p2, i3);

double
nci_dstpi( c_func, s0, t1, p2, i3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	int i3
PREINIT:
	double(*func)(short, char *, void *, int);
CODE:
	func   = INT2PTR(double(*)(short, char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2, i3);
OUTPUT:
	RETVAL

short
nci_sstpi( c_func, s0, t1, p2, i3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	int i3
PREINIT:
	short(*func)(short, char *, void *, int);
CODE:
	func   = INT2PTR(short(*)(short, char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2, i3);
OUTPUT:
	RETVAL

float
nci_fstpi( c_func, s0, t1, p2, i3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	int i3
PREINIT:
	float(*func)(short, char *, void *, int);
CODE:
	func   = INT2PTR(float(*)(short, char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2, i3);
OUTPUT:
	RETVAL

char *
nci_tstpi( c_func, s0, t1, p2, i3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	int i3
PREINIT:
	char *(*func)(short, char *, void *, int);
CODE:
	func   = INT2PTR(char *(*)(short, char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2, i3);
OUTPUT:
	RETVAL

int
nci_istpi( c_func, s0, t1, p2, i3 )
	SV* c_func
	short s0
	char * t1
	void * p2
	int i3
PREINIT:
	int(*func)(short, char *, void *, int);
CODE:
	func   = INT2PTR(int(*)(short, char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, p2, i3);
OUTPUT:
	RETVAL

void *
nci_pftpi( c_func, f0, t1, p2, i3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	int i3
PREINIT:
	void *(*func)(float, char *, void *, int);
CODE:
	func   = INT2PTR(void *(*)(float, char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2, i3);
OUTPUT:
	RETVAL

void
nci_vftpi( c_func, f0, t1, p2, i3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	int i3
PREINIT:
	void(*func)(float, char *, void *, int);
CODE:
	func   = INT2PTR(void(*)(float, char *, void *, int), SvIV(c_func) );
	(*func)(f0, t1, p2, i3);

double
nci_dftpi( c_func, f0, t1, p2, i3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	int i3
PREINIT:
	double(*func)(float, char *, void *, int);
CODE:
	func   = INT2PTR(double(*)(float, char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2, i3);
OUTPUT:
	RETVAL

short
nci_sftpi( c_func, f0, t1, p2, i3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	int i3
PREINIT:
	short(*func)(float, char *, void *, int);
CODE:
	func   = INT2PTR(short(*)(float, char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2, i3);
OUTPUT:
	RETVAL

float
nci_fftpi( c_func, f0, t1, p2, i3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	int i3
PREINIT:
	float(*func)(float, char *, void *, int);
CODE:
	func   = INT2PTR(float(*)(float, char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2, i3);
OUTPUT:
	RETVAL

char *
nci_tftpi( c_func, f0, t1, p2, i3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	int i3
PREINIT:
	char *(*func)(float, char *, void *, int);
CODE:
	func   = INT2PTR(char *(*)(float, char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2, i3);
OUTPUT:
	RETVAL

int
nci_iftpi( c_func, f0, t1, p2, i3 )
	SV* c_func
	float f0
	char * t1
	void * p2
	int i3
PREINIT:
	int(*func)(float, char *, void *, int);
CODE:
	func   = INT2PTR(int(*)(float, char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, p2, i3);
OUTPUT:
	RETVAL

void *
nci_pttpi( c_func, t0, t1, p2, i3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	int i3
PREINIT:
	void *(*func)(char *, char *, void *, int);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2, i3);
OUTPUT:
	RETVAL

void
nci_vttpi( c_func, t0, t1, p2, i3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	int i3
PREINIT:
	void(*func)(char *, char *, void *, int);
CODE:
	func   = INT2PTR(void(*)(char *, char *, void *, int), SvIV(c_func) );
	(*func)(t0, t1, p2, i3);

double
nci_dttpi( c_func, t0, t1, p2, i3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	int i3
PREINIT:
	double(*func)(char *, char *, void *, int);
CODE:
	func   = INT2PTR(double(*)(char *, char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2, i3);
OUTPUT:
	RETVAL

short
nci_sttpi( c_func, t0, t1, p2, i3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	int i3
PREINIT:
	short(*func)(char *, char *, void *, int);
CODE:
	func   = INT2PTR(short(*)(char *, char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2, i3);
OUTPUT:
	RETVAL

float
nci_fttpi( c_func, t0, t1, p2, i3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	int i3
PREINIT:
	float(*func)(char *, char *, void *, int);
CODE:
	func   = INT2PTR(float(*)(char *, char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2, i3);
OUTPUT:
	RETVAL

char *
nci_tttpi( c_func, t0, t1, p2, i3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	int i3
PREINIT:
	char *(*func)(char *, char *, void *, int);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2, i3);
OUTPUT:
	RETVAL

int
nci_ittpi( c_func, t0, t1, p2, i3 )
	SV* c_func
	char * t0
	char * t1
	void * p2
	int i3
PREINIT:
	int(*func)(char *, char *, void *, int);
CODE:
	func   = INT2PTR(int(*)(char *, char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, p2, i3);
OUTPUT:
	RETVAL

void *
nci_pitpi( c_func, i0, t1, p2, i3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	int i3
PREINIT:
	void *(*func)(int, char *, void *, int);
CODE:
	func   = INT2PTR(void *(*)(int, char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2, i3);
OUTPUT:
	RETVAL

void
nci_vitpi( c_func, i0, t1, p2, i3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	int i3
PREINIT:
	void(*func)(int, char *, void *, int);
CODE:
	func   = INT2PTR(void(*)(int, char *, void *, int), SvIV(c_func) );
	(*func)(i0, t1, p2, i3);

double
nci_ditpi( c_func, i0, t1, p2, i3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	int i3
PREINIT:
	double(*func)(int, char *, void *, int);
CODE:
	func   = INT2PTR(double(*)(int, char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2, i3);
OUTPUT:
	RETVAL

short
nci_sitpi( c_func, i0, t1, p2, i3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	int i3
PREINIT:
	short(*func)(int, char *, void *, int);
CODE:
	func   = INT2PTR(short(*)(int, char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2, i3);
OUTPUT:
	RETVAL

float
nci_fitpi( c_func, i0, t1, p2, i3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	int i3
PREINIT:
	float(*func)(int, char *, void *, int);
CODE:
	func   = INT2PTR(float(*)(int, char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2, i3);
OUTPUT:
	RETVAL

char *
nci_titpi( c_func, i0, t1, p2, i3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	int i3
PREINIT:
	char *(*func)(int, char *, void *, int);
CODE:
	func   = INT2PTR(char *(*)(int, char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2, i3);
OUTPUT:
	RETVAL

int
nci_iitpi( c_func, i0, t1, p2, i3 )
	SV* c_func
	int i0
	char * t1
	void * p2
	int i3
PREINIT:
	int(*func)(int, char *, void *, int);
CODE:
	func   = INT2PTR(int(*)(int, char *, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, p2, i3);
OUTPUT:
	RETVAL

void *
nci_ppipi( c_func, p0, i1, p2, i3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	int i3
PREINIT:
	void *(*func)(void *, int, void *, int);
CODE:
	func   = INT2PTR(void *(*)(void *, int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2, i3);
OUTPUT:
	RETVAL

void
nci_vpipi( c_func, p0, i1, p2, i3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	int i3
PREINIT:
	void(*func)(void *, int, void *, int);
CODE:
	func   = INT2PTR(void(*)(void *, int, void *, int), SvIV(c_func) );
	(*func)(p0, i1, p2, i3);

double
nci_dpipi( c_func, p0, i1, p2, i3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	int i3
PREINIT:
	double(*func)(void *, int, void *, int);
CODE:
	func   = INT2PTR(double(*)(void *, int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2, i3);
OUTPUT:
	RETVAL

short
nci_spipi( c_func, p0, i1, p2, i3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	int i3
PREINIT:
	short(*func)(void *, int, void *, int);
CODE:
	func   = INT2PTR(short(*)(void *, int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2, i3);
OUTPUT:
	RETVAL

float
nci_fpipi( c_func, p0, i1, p2, i3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	int i3
PREINIT:
	float(*func)(void *, int, void *, int);
CODE:
	func   = INT2PTR(float(*)(void *, int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2, i3);
OUTPUT:
	RETVAL

char *
nci_tpipi( c_func, p0, i1, p2, i3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	int i3
PREINIT:
	char *(*func)(void *, int, void *, int);
CODE:
	func   = INT2PTR(char *(*)(void *, int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2, i3);
OUTPUT:
	RETVAL

int
nci_ipipi( c_func, p0, i1, p2, i3 )
	SV* c_func
	void * p0
	int i1
	void * p2
	int i3
PREINIT:
	int(*func)(void *, int, void *, int);
CODE:
	func   = INT2PTR(int(*)(void *, int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, p2, i3);
OUTPUT:
	RETVAL

void *
nci_pvipi( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvipi( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvipi( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svipi( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvipi( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvipi( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivipi( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdipi( c_func, d0, i1, p2, i3 )
	SV* c_func
	double d0
	int i1
	void * p2
	int i3
PREINIT:
	void *(*func)(double, int, void *, int);
CODE:
	func   = INT2PTR(void *(*)(double, int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2, i3);
OUTPUT:
	RETVAL

void
nci_vdipi( c_func, d0, i1, p2, i3 )
	SV* c_func
	double d0
	int i1
	void * p2
	int i3
PREINIT:
	void(*func)(double, int, void *, int);
CODE:
	func   = INT2PTR(void(*)(double, int, void *, int), SvIV(c_func) );
	(*func)(d0, i1, p2, i3);

double
nci_ddipi( c_func, d0, i1, p2, i3 )
	SV* c_func
	double d0
	int i1
	void * p2
	int i3
PREINIT:
	double(*func)(double, int, void *, int);
CODE:
	func   = INT2PTR(double(*)(double, int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2, i3);
OUTPUT:
	RETVAL

short
nci_sdipi( c_func, d0, i1, p2, i3 )
	SV* c_func
	double d0
	int i1
	void * p2
	int i3
PREINIT:
	short(*func)(double, int, void *, int);
CODE:
	func   = INT2PTR(short(*)(double, int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2, i3);
OUTPUT:
	RETVAL

float
nci_fdipi( c_func, d0, i1, p2, i3 )
	SV* c_func
	double d0
	int i1
	void * p2
	int i3
PREINIT:
	float(*func)(double, int, void *, int);
CODE:
	func   = INT2PTR(float(*)(double, int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2, i3);
OUTPUT:
	RETVAL

char *
nci_tdipi( c_func, d0, i1, p2, i3 )
	SV* c_func
	double d0
	int i1
	void * p2
	int i3
PREINIT:
	char *(*func)(double, int, void *, int);
CODE:
	func   = INT2PTR(char *(*)(double, int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2, i3);
OUTPUT:
	RETVAL

int
nci_idipi( c_func, d0, i1, p2, i3 )
	SV* c_func
	double d0
	int i1
	void * p2
	int i3
PREINIT:
	int(*func)(double, int, void *, int);
CODE:
	func   = INT2PTR(int(*)(double, int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, p2, i3);
OUTPUT:
	RETVAL

void *
nci_psipi( c_func, s0, i1, p2, i3 )
	SV* c_func
	short s0
	int i1
	void * p2
	int i3
PREINIT:
	void *(*func)(short, int, void *, int);
CODE:
	func   = INT2PTR(void *(*)(short, int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2, i3);
OUTPUT:
	RETVAL

void
nci_vsipi( c_func, s0, i1, p2, i3 )
	SV* c_func
	short s0
	int i1
	void * p2
	int i3
PREINIT:
	void(*func)(short, int, void *, int);
CODE:
	func   = INT2PTR(void(*)(short, int, void *, int), SvIV(c_func) );
	(*func)(s0, i1, p2, i3);

double
nci_dsipi( c_func, s0, i1, p2, i3 )
	SV* c_func
	short s0
	int i1
	void * p2
	int i3
PREINIT:
	double(*func)(short, int, void *, int);
CODE:
	func   = INT2PTR(double(*)(short, int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2, i3);
OUTPUT:
	RETVAL

short
nci_ssipi( c_func, s0, i1, p2, i3 )
	SV* c_func
	short s0
	int i1
	void * p2
	int i3
PREINIT:
	short(*func)(short, int, void *, int);
CODE:
	func   = INT2PTR(short(*)(short, int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2, i3);
OUTPUT:
	RETVAL

float
nci_fsipi( c_func, s0, i1, p2, i3 )
	SV* c_func
	short s0
	int i1
	void * p2
	int i3
PREINIT:
	float(*func)(short, int, void *, int);
CODE:
	func   = INT2PTR(float(*)(short, int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2, i3);
OUTPUT:
	RETVAL

char *
nci_tsipi( c_func, s0, i1, p2, i3 )
	SV* c_func
	short s0
	int i1
	void * p2
	int i3
PREINIT:
	char *(*func)(short, int, void *, int);
CODE:
	func   = INT2PTR(char *(*)(short, int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2, i3);
OUTPUT:
	RETVAL

int
nci_isipi( c_func, s0, i1, p2, i3 )
	SV* c_func
	short s0
	int i1
	void * p2
	int i3
PREINIT:
	int(*func)(short, int, void *, int);
CODE:
	func   = INT2PTR(int(*)(short, int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, p2, i3);
OUTPUT:
	RETVAL

void *
nci_pfipi( c_func, f0, i1, p2, i3 )
	SV* c_func
	float f0
	int i1
	void * p2
	int i3
PREINIT:
	void *(*func)(float, int, void *, int);
CODE:
	func   = INT2PTR(void *(*)(float, int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2, i3);
OUTPUT:
	RETVAL

void
nci_vfipi( c_func, f0, i1, p2, i3 )
	SV* c_func
	float f0
	int i1
	void * p2
	int i3
PREINIT:
	void(*func)(float, int, void *, int);
CODE:
	func   = INT2PTR(void(*)(float, int, void *, int), SvIV(c_func) );
	(*func)(f0, i1, p2, i3);

double
nci_dfipi( c_func, f0, i1, p2, i3 )
	SV* c_func
	float f0
	int i1
	void * p2
	int i3
PREINIT:
	double(*func)(float, int, void *, int);
CODE:
	func   = INT2PTR(double(*)(float, int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2, i3);
OUTPUT:
	RETVAL

short
nci_sfipi( c_func, f0, i1, p2, i3 )
	SV* c_func
	float f0
	int i1
	void * p2
	int i3
PREINIT:
	short(*func)(float, int, void *, int);
CODE:
	func   = INT2PTR(short(*)(float, int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2, i3);
OUTPUT:
	RETVAL

float
nci_ffipi( c_func, f0, i1, p2, i3 )
	SV* c_func
	float f0
	int i1
	void * p2
	int i3
PREINIT:
	float(*func)(float, int, void *, int);
CODE:
	func   = INT2PTR(float(*)(float, int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2, i3);
OUTPUT:
	RETVAL

char *
nci_tfipi( c_func, f0, i1, p2, i3 )
	SV* c_func
	float f0
	int i1
	void * p2
	int i3
PREINIT:
	char *(*func)(float, int, void *, int);
CODE:
	func   = INT2PTR(char *(*)(float, int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2, i3);
OUTPUT:
	RETVAL

int
nci_ifipi( c_func, f0, i1, p2, i3 )
	SV* c_func
	float f0
	int i1
	void * p2
	int i3
PREINIT:
	int(*func)(float, int, void *, int);
CODE:
	func   = INT2PTR(int(*)(float, int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, p2, i3);
OUTPUT:
	RETVAL

void *
nci_ptipi( c_func, t0, i1, p2, i3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	int i3
PREINIT:
	void *(*func)(char *, int, void *, int);
CODE:
	func   = INT2PTR(void *(*)(char *, int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2, i3);
OUTPUT:
	RETVAL

void
nci_vtipi( c_func, t0, i1, p2, i3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	int i3
PREINIT:
	void(*func)(char *, int, void *, int);
CODE:
	func   = INT2PTR(void(*)(char *, int, void *, int), SvIV(c_func) );
	(*func)(t0, i1, p2, i3);

double
nci_dtipi( c_func, t0, i1, p2, i3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	int i3
PREINIT:
	double(*func)(char *, int, void *, int);
CODE:
	func   = INT2PTR(double(*)(char *, int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2, i3);
OUTPUT:
	RETVAL

short
nci_stipi( c_func, t0, i1, p2, i3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	int i3
PREINIT:
	short(*func)(char *, int, void *, int);
CODE:
	func   = INT2PTR(short(*)(char *, int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2, i3);
OUTPUT:
	RETVAL

float
nci_ftipi( c_func, t0, i1, p2, i3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	int i3
PREINIT:
	float(*func)(char *, int, void *, int);
CODE:
	func   = INT2PTR(float(*)(char *, int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2, i3);
OUTPUT:
	RETVAL

char *
nci_ttipi( c_func, t0, i1, p2, i3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	int i3
PREINIT:
	char *(*func)(char *, int, void *, int);
CODE:
	func   = INT2PTR(char *(*)(char *, int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2, i3);
OUTPUT:
	RETVAL

int
nci_itipi( c_func, t0, i1, p2, i3 )
	SV* c_func
	char * t0
	int i1
	void * p2
	int i3
PREINIT:
	int(*func)(char *, int, void *, int);
CODE:
	func   = INT2PTR(int(*)(char *, int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, p2, i3);
OUTPUT:
	RETVAL

void *
nci_piipi( c_func, i0, i1, p2, i3 )
	SV* c_func
	int i0
	int i1
	void * p2
	int i3
PREINIT:
	void *(*func)(int, int, void *, int);
CODE:
	func   = INT2PTR(void *(*)(int, int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2, i3);
OUTPUT:
	RETVAL

void
nci_viipi( c_func, i0, i1, p2, i3 )
	SV* c_func
	int i0
	int i1
	void * p2
	int i3
PREINIT:
	void(*func)(int, int, void *, int);
CODE:
	func   = INT2PTR(void(*)(int, int, void *, int), SvIV(c_func) );
	(*func)(i0, i1, p2, i3);

double
nci_diipi( c_func, i0, i1, p2, i3 )
	SV* c_func
	int i0
	int i1
	void * p2
	int i3
PREINIT:
	double(*func)(int, int, void *, int);
CODE:
	func   = INT2PTR(double(*)(int, int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2, i3);
OUTPUT:
	RETVAL

short
nci_siipi( c_func, i0, i1, p2, i3 )
	SV* c_func
	int i0
	int i1
	void * p2
	int i3
PREINIT:
	short(*func)(int, int, void *, int);
CODE:
	func   = INT2PTR(short(*)(int, int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2, i3);
OUTPUT:
	RETVAL

float
nci_fiipi( c_func, i0, i1, p2, i3 )
	SV* c_func
	int i0
	int i1
	void * p2
	int i3
PREINIT:
	float(*func)(int, int, void *, int);
CODE:
	func   = INT2PTR(float(*)(int, int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2, i3);
OUTPUT:
	RETVAL

char *
nci_tiipi( c_func, i0, i1, p2, i3 )
	SV* c_func
	int i0
	int i1
	void * p2
	int i3
PREINIT:
	char *(*func)(int, int, void *, int);
CODE:
	func   = INT2PTR(char *(*)(int, int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2, i3);
OUTPUT:
	RETVAL

int
nci_iiipi( c_func, i0, i1, p2, i3 )
	SV* c_func
	int i0
	int i1
	void * p2
	int i3
PREINIT:
	int(*func)(int, int, void *, int);
CODE:
	func   = INT2PTR(int(*)(int, int, void *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, p2, i3);
OUTPUT:
	RETVAL

void *
nci_pppdi( c_func, p0, p1, d2, i3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	int i3
PREINIT:
	void *(*func)(void *, void *, double, int);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2, i3);
OUTPUT:
	RETVAL

void
nci_vppdi( c_func, p0, p1, d2, i3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	int i3
PREINIT:
	void(*func)(void *, void *, double, int);
CODE:
	func   = INT2PTR(void(*)(void *, void *, double, int), SvIV(c_func) );
	(*func)(p0, p1, d2, i3);

double
nci_dppdi( c_func, p0, p1, d2, i3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	int i3
PREINIT:
	double(*func)(void *, void *, double, int);
CODE:
	func   = INT2PTR(double(*)(void *, void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2, i3);
OUTPUT:
	RETVAL

short
nci_sppdi( c_func, p0, p1, d2, i3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	int i3
PREINIT:
	short(*func)(void *, void *, double, int);
CODE:
	func   = INT2PTR(short(*)(void *, void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2, i3);
OUTPUT:
	RETVAL

float
nci_fppdi( c_func, p0, p1, d2, i3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	int i3
PREINIT:
	float(*func)(void *, void *, double, int);
CODE:
	func   = INT2PTR(float(*)(void *, void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2, i3);
OUTPUT:
	RETVAL

char *
nci_tppdi( c_func, p0, p1, d2, i3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	int i3
PREINIT:
	char *(*func)(void *, void *, double, int);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2, i3);
OUTPUT:
	RETVAL

int
nci_ippdi( c_func, p0, p1, d2, i3 )
	SV* c_func
	void * p0
	void * p1
	double d2
	int i3
PREINIT:
	int(*func)(void *, void *, double, int);
CODE:
	func   = INT2PTR(int(*)(void *, void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, d2, i3);
OUTPUT:
	RETVAL

void *
nci_pvpdi( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvpdi( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvpdi( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svpdi( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvpdi( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvpdi( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivpdi( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdpdi( c_func, d0, p1, d2, i3 )
	SV* c_func
	double d0
	void * p1
	double d2
	int i3
PREINIT:
	void *(*func)(double, void *, double, int);
CODE:
	func   = INT2PTR(void *(*)(double, void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2, i3);
OUTPUT:
	RETVAL

void
nci_vdpdi( c_func, d0, p1, d2, i3 )
	SV* c_func
	double d0
	void * p1
	double d2
	int i3
PREINIT:
	void(*func)(double, void *, double, int);
CODE:
	func   = INT2PTR(void(*)(double, void *, double, int), SvIV(c_func) );
	(*func)(d0, p1, d2, i3);

double
nci_ddpdi( c_func, d0, p1, d2, i3 )
	SV* c_func
	double d0
	void * p1
	double d2
	int i3
PREINIT:
	double(*func)(double, void *, double, int);
CODE:
	func   = INT2PTR(double(*)(double, void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2, i3);
OUTPUT:
	RETVAL

short
nci_sdpdi( c_func, d0, p1, d2, i3 )
	SV* c_func
	double d0
	void * p1
	double d2
	int i3
PREINIT:
	short(*func)(double, void *, double, int);
CODE:
	func   = INT2PTR(short(*)(double, void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2, i3);
OUTPUT:
	RETVAL

float
nci_fdpdi( c_func, d0, p1, d2, i3 )
	SV* c_func
	double d0
	void * p1
	double d2
	int i3
PREINIT:
	float(*func)(double, void *, double, int);
CODE:
	func   = INT2PTR(float(*)(double, void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2, i3);
OUTPUT:
	RETVAL

char *
nci_tdpdi( c_func, d0, p1, d2, i3 )
	SV* c_func
	double d0
	void * p1
	double d2
	int i3
PREINIT:
	char *(*func)(double, void *, double, int);
CODE:
	func   = INT2PTR(char *(*)(double, void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2, i3);
OUTPUT:
	RETVAL

int
nci_idpdi( c_func, d0, p1, d2, i3 )
	SV* c_func
	double d0
	void * p1
	double d2
	int i3
PREINIT:
	int(*func)(double, void *, double, int);
CODE:
	func   = INT2PTR(int(*)(double, void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, d2, i3);
OUTPUT:
	RETVAL

void *
nci_pspdi( c_func, s0, p1, d2, i3 )
	SV* c_func
	short s0
	void * p1
	double d2
	int i3
PREINIT:
	void *(*func)(short, void *, double, int);
CODE:
	func   = INT2PTR(void *(*)(short, void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2, i3);
OUTPUT:
	RETVAL

void
nci_vspdi( c_func, s0, p1, d2, i3 )
	SV* c_func
	short s0
	void * p1
	double d2
	int i3
PREINIT:
	void(*func)(short, void *, double, int);
CODE:
	func   = INT2PTR(void(*)(short, void *, double, int), SvIV(c_func) );
	(*func)(s0, p1, d2, i3);

double
nci_dspdi( c_func, s0, p1, d2, i3 )
	SV* c_func
	short s0
	void * p1
	double d2
	int i3
PREINIT:
	double(*func)(short, void *, double, int);
CODE:
	func   = INT2PTR(double(*)(short, void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2, i3);
OUTPUT:
	RETVAL

short
nci_sspdi( c_func, s0, p1, d2, i3 )
	SV* c_func
	short s0
	void * p1
	double d2
	int i3
PREINIT:
	short(*func)(short, void *, double, int);
CODE:
	func   = INT2PTR(short(*)(short, void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2, i3);
OUTPUT:
	RETVAL

float
nci_fspdi( c_func, s0, p1, d2, i3 )
	SV* c_func
	short s0
	void * p1
	double d2
	int i3
PREINIT:
	float(*func)(short, void *, double, int);
CODE:
	func   = INT2PTR(float(*)(short, void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2, i3);
OUTPUT:
	RETVAL

char *
nci_tspdi( c_func, s0, p1, d2, i3 )
	SV* c_func
	short s0
	void * p1
	double d2
	int i3
PREINIT:
	char *(*func)(short, void *, double, int);
CODE:
	func   = INT2PTR(char *(*)(short, void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2, i3);
OUTPUT:
	RETVAL

int
nci_ispdi( c_func, s0, p1, d2, i3 )
	SV* c_func
	short s0
	void * p1
	double d2
	int i3
PREINIT:
	int(*func)(short, void *, double, int);
CODE:
	func   = INT2PTR(int(*)(short, void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, d2, i3);
OUTPUT:
	RETVAL

void *
nci_pfpdi( c_func, f0, p1, d2, i3 )
	SV* c_func
	float f0
	void * p1
	double d2
	int i3
PREINIT:
	void *(*func)(float, void *, double, int);
CODE:
	func   = INT2PTR(void *(*)(float, void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2, i3);
OUTPUT:
	RETVAL

void
nci_vfpdi( c_func, f0, p1, d2, i3 )
	SV* c_func
	float f0
	void * p1
	double d2
	int i3
PREINIT:
	void(*func)(float, void *, double, int);
CODE:
	func   = INT2PTR(void(*)(float, void *, double, int), SvIV(c_func) );
	(*func)(f0, p1, d2, i3);

double
nci_dfpdi( c_func, f0, p1, d2, i3 )
	SV* c_func
	float f0
	void * p1
	double d2
	int i3
PREINIT:
	double(*func)(float, void *, double, int);
CODE:
	func   = INT2PTR(double(*)(float, void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2, i3);
OUTPUT:
	RETVAL

short
nci_sfpdi( c_func, f0, p1, d2, i3 )
	SV* c_func
	float f0
	void * p1
	double d2
	int i3
PREINIT:
	short(*func)(float, void *, double, int);
CODE:
	func   = INT2PTR(short(*)(float, void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2, i3);
OUTPUT:
	RETVAL

float
nci_ffpdi( c_func, f0, p1, d2, i3 )
	SV* c_func
	float f0
	void * p1
	double d2
	int i3
PREINIT:
	float(*func)(float, void *, double, int);
CODE:
	func   = INT2PTR(float(*)(float, void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2, i3);
OUTPUT:
	RETVAL

char *
nci_tfpdi( c_func, f0, p1, d2, i3 )
	SV* c_func
	float f0
	void * p1
	double d2
	int i3
PREINIT:
	char *(*func)(float, void *, double, int);
CODE:
	func   = INT2PTR(char *(*)(float, void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2, i3);
OUTPUT:
	RETVAL

int
nci_ifpdi( c_func, f0, p1, d2, i3 )
	SV* c_func
	float f0
	void * p1
	double d2
	int i3
PREINIT:
	int(*func)(float, void *, double, int);
CODE:
	func   = INT2PTR(int(*)(float, void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, d2, i3);
OUTPUT:
	RETVAL

void *
nci_ptpdi( c_func, t0, p1, d2, i3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	int i3
PREINIT:
	void *(*func)(char *, void *, double, int);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2, i3);
OUTPUT:
	RETVAL

void
nci_vtpdi( c_func, t0, p1, d2, i3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	int i3
PREINIT:
	void(*func)(char *, void *, double, int);
CODE:
	func   = INT2PTR(void(*)(char *, void *, double, int), SvIV(c_func) );
	(*func)(t0, p1, d2, i3);

double
nci_dtpdi( c_func, t0, p1, d2, i3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	int i3
PREINIT:
	double(*func)(char *, void *, double, int);
CODE:
	func   = INT2PTR(double(*)(char *, void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2, i3);
OUTPUT:
	RETVAL

short
nci_stpdi( c_func, t0, p1, d2, i3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	int i3
PREINIT:
	short(*func)(char *, void *, double, int);
CODE:
	func   = INT2PTR(short(*)(char *, void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2, i3);
OUTPUT:
	RETVAL

float
nci_ftpdi( c_func, t0, p1, d2, i3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	int i3
PREINIT:
	float(*func)(char *, void *, double, int);
CODE:
	func   = INT2PTR(float(*)(char *, void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2, i3);
OUTPUT:
	RETVAL

char *
nci_ttpdi( c_func, t0, p1, d2, i3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	int i3
PREINIT:
	char *(*func)(char *, void *, double, int);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2, i3);
OUTPUT:
	RETVAL

int
nci_itpdi( c_func, t0, p1, d2, i3 )
	SV* c_func
	char * t0
	void * p1
	double d2
	int i3
PREINIT:
	int(*func)(char *, void *, double, int);
CODE:
	func   = INT2PTR(int(*)(char *, void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, d2, i3);
OUTPUT:
	RETVAL

void *
nci_pipdi( c_func, i0, p1, d2, i3 )
	SV* c_func
	int i0
	void * p1
	double d2
	int i3
PREINIT:
	void *(*func)(int, void *, double, int);
CODE:
	func   = INT2PTR(void *(*)(int, void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2, i3);
OUTPUT:
	RETVAL

void
nci_vipdi( c_func, i0, p1, d2, i3 )
	SV* c_func
	int i0
	void * p1
	double d2
	int i3
PREINIT:
	void(*func)(int, void *, double, int);
CODE:
	func   = INT2PTR(void(*)(int, void *, double, int), SvIV(c_func) );
	(*func)(i0, p1, d2, i3);

double
nci_dipdi( c_func, i0, p1, d2, i3 )
	SV* c_func
	int i0
	void * p1
	double d2
	int i3
PREINIT:
	double(*func)(int, void *, double, int);
CODE:
	func   = INT2PTR(double(*)(int, void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2, i3);
OUTPUT:
	RETVAL

short
nci_sipdi( c_func, i0, p1, d2, i3 )
	SV* c_func
	int i0
	void * p1
	double d2
	int i3
PREINIT:
	short(*func)(int, void *, double, int);
CODE:
	func   = INT2PTR(short(*)(int, void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2, i3);
OUTPUT:
	RETVAL

float
nci_fipdi( c_func, i0, p1, d2, i3 )
	SV* c_func
	int i0
	void * p1
	double d2
	int i3
PREINIT:
	float(*func)(int, void *, double, int);
CODE:
	func   = INT2PTR(float(*)(int, void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2, i3);
OUTPUT:
	RETVAL

char *
nci_tipdi( c_func, i0, p1, d2, i3 )
	SV* c_func
	int i0
	void * p1
	double d2
	int i3
PREINIT:
	char *(*func)(int, void *, double, int);
CODE:
	func   = INT2PTR(char *(*)(int, void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2, i3);
OUTPUT:
	RETVAL

int
nci_iipdi( c_func, i0, p1, d2, i3 )
	SV* c_func
	int i0
	void * p1
	double d2
	int i3
PREINIT:
	int(*func)(int, void *, double, int);
CODE:
	func   = INT2PTR(int(*)(int, void *, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, d2, i3);
OUTPUT:
	RETVAL

void *
nci_ppddi( c_func, p0, d1, d2, i3 )
	SV* c_func
	void * p0
	double d1
	double d2
	int i3
PREINIT:
	void *(*func)(void *, double, double, int);
CODE:
	func   = INT2PTR(void *(*)(void *, double, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2, i3);
OUTPUT:
	RETVAL

void
nci_vpddi( c_func, p0, d1, d2, i3 )
	SV* c_func
	void * p0
	double d1
	double d2
	int i3
PREINIT:
	void(*func)(void *, double, double, int);
CODE:
	func   = INT2PTR(void(*)(void *, double, double, int), SvIV(c_func) );
	(*func)(p0, d1, d2, i3);

double
nci_dpddi( c_func, p0, d1, d2, i3 )
	SV* c_func
	void * p0
	double d1
	double d2
	int i3
PREINIT:
	double(*func)(void *, double, double, int);
CODE:
	func   = INT2PTR(double(*)(void *, double, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2, i3);
OUTPUT:
	RETVAL

short
nci_spddi( c_func, p0, d1, d2, i3 )
	SV* c_func
	void * p0
	double d1
	double d2
	int i3
PREINIT:
	short(*func)(void *, double, double, int);
CODE:
	func   = INT2PTR(short(*)(void *, double, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2, i3);
OUTPUT:
	RETVAL

float
nci_fpddi( c_func, p0, d1, d2, i3 )
	SV* c_func
	void * p0
	double d1
	double d2
	int i3
PREINIT:
	float(*func)(void *, double, double, int);
CODE:
	func   = INT2PTR(float(*)(void *, double, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2, i3);
OUTPUT:
	RETVAL

char *
nci_tpddi( c_func, p0, d1, d2, i3 )
	SV* c_func
	void * p0
	double d1
	double d2
	int i3
PREINIT:
	char *(*func)(void *, double, double, int);
CODE:
	func   = INT2PTR(char *(*)(void *, double, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2, i3);
OUTPUT:
	RETVAL

int
nci_ipddi( c_func, p0, d1, d2, i3 )
	SV* c_func
	void * p0
	double d1
	double d2
	int i3
PREINIT:
	int(*func)(void *, double, double, int);
CODE:
	func   = INT2PTR(int(*)(void *, double, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, d2, i3);
OUTPUT:
	RETVAL

void *
nci_pvddi( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvddi( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvddi( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svddi( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvddi( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvddi( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivddi( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdddi( c_func, d0, d1, d2, i3 )
	SV* c_func
	double d0
	double d1
	double d2
	int i3
PREINIT:
	void *(*func)(double, double, double, int);
CODE:
	func   = INT2PTR(void *(*)(double, double, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2, i3);
OUTPUT:
	RETVAL

void
nci_vdddi( c_func, d0, d1, d2, i3 )
	SV* c_func
	double d0
	double d1
	double d2
	int i3
PREINIT:
	void(*func)(double, double, double, int);
CODE:
	func   = INT2PTR(void(*)(double, double, double, int), SvIV(c_func) );
	(*func)(d0, d1, d2, i3);

double
nci_ddddi( c_func, d0, d1, d2, i3 )
	SV* c_func
	double d0
	double d1
	double d2
	int i3
PREINIT:
	double(*func)(double, double, double, int);
CODE:
	func   = INT2PTR(double(*)(double, double, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2, i3);
OUTPUT:
	RETVAL

short
nci_sdddi( c_func, d0, d1, d2, i3 )
	SV* c_func
	double d0
	double d1
	double d2
	int i3
PREINIT:
	short(*func)(double, double, double, int);
CODE:
	func   = INT2PTR(short(*)(double, double, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2, i3);
OUTPUT:
	RETVAL

float
nci_fdddi( c_func, d0, d1, d2, i3 )
	SV* c_func
	double d0
	double d1
	double d2
	int i3
PREINIT:
	float(*func)(double, double, double, int);
CODE:
	func   = INT2PTR(float(*)(double, double, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2, i3);
OUTPUT:
	RETVAL

char *
nci_tdddi( c_func, d0, d1, d2, i3 )
	SV* c_func
	double d0
	double d1
	double d2
	int i3
PREINIT:
	char *(*func)(double, double, double, int);
CODE:
	func   = INT2PTR(char *(*)(double, double, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2, i3);
OUTPUT:
	RETVAL

int
nci_idddi( c_func, d0, d1, d2, i3 )
	SV* c_func
	double d0
	double d1
	double d2
	int i3
PREINIT:
	int(*func)(double, double, double, int);
CODE:
	func   = INT2PTR(int(*)(double, double, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, d2, i3);
OUTPUT:
	RETVAL

void *
nci_psddi( c_func, s0, d1, d2, i3 )
	SV* c_func
	short s0
	double d1
	double d2
	int i3
PREINIT:
	void *(*func)(short, double, double, int);
CODE:
	func   = INT2PTR(void *(*)(short, double, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2, i3);
OUTPUT:
	RETVAL

void
nci_vsddi( c_func, s0, d1, d2, i3 )
	SV* c_func
	short s0
	double d1
	double d2
	int i3
PREINIT:
	void(*func)(short, double, double, int);
CODE:
	func   = INT2PTR(void(*)(short, double, double, int), SvIV(c_func) );
	(*func)(s0, d1, d2, i3);

double
nci_dsddi( c_func, s0, d1, d2, i3 )
	SV* c_func
	short s0
	double d1
	double d2
	int i3
PREINIT:
	double(*func)(short, double, double, int);
CODE:
	func   = INT2PTR(double(*)(short, double, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2, i3);
OUTPUT:
	RETVAL

short
nci_ssddi( c_func, s0, d1, d2, i3 )
	SV* c_func
	short s0
	double d1
	double d2
	int i3
PREINIT:
	short(*func)(short, double, double, int);
CODE:
	func   = INT2PTR(short(*)(short, double, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2, i3);
OUTPUT:
	RETVAL

float
nci_fsddi( c_func, s0, d1, d2, i3 )
	SV* c_func
	short s0
	double d1
	double d2
	int i3
PREINIT:
	float(*func)(short, double, double, int);
CODE:
	func   = INT2PTR(float(*)(short, double, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2, i3);
OUTPUT:
	RETVAL

char *
nci_tsddi( c_func, s0, d1, d2, i3 )
	SV* c_func
	short s0
	double d1
	double d2
	int i3
PREINIT:
	char *(*func)(short, double, double, int);
CODE:
	func   = INT2PTR(char *(*)(short, double, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2, i3);
OUTPUT:
	RETVAL

int
nci_isddi( c_func, s0, d1, d2, i3 )
	SV* c_func
	short s0
	double d1
	double d2
	int i3
PREINIT:
	int(*func)(short, double, double, int);
CODE:
	func   = INT2PTR(int(*)(short, double, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, d2, i3);
OUTPUT:
	RETVAL

void *
nci_pfddi( c_func, f0, d1, d2, i3 )
	SV* c_func
	float f0
	double d1
	double d2
	int i3
PREINIT:
	void *(*func)(float, double, double, int);
CODE:
	func   = INT2PTR(void *(*)(float, double, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2, i3);
OUTPUT:
	RETVAL

void
nci_vfddi( c_func, f0, d1, d2, i3 )
	SV* c_func
	float f0
	double d1
	double d2
	int i3
PREINIT:
	void(*func)(float, double, double, int);
CODE:
	func   = INT2PTR(void(*)(float, double, double, int), SvIV(c_func) );
	(*func)(f0, d1, d2, i3);

double
nci_dfddi( c_func, f0, d1, d2, i3 )
	SV* c_func
	float f0
	double d1
	double d2
	int i3
PREINIT:
	double(*func)(float, double, double, int);
CODE:
	func   = INT2PTR(double(*)(float, double, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2, i3);
OUTPUT:
	RETVAL

short
nci_sfddi( c_func, f0, d1, d2, i3 )
	SV* c_func
	float f0
	double d1
	double d2
	int i3
PREINIT:
	short(*func)(float, double, double, int);
CODE:
	func   = INT2PTR(short(*)(float, double, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2, i3);
OUTPUT:
	RETVAL

float
nci_ffddi( c_func, f0, d1, d2, i3 )
	SV* c_func
	float f0
	double d1
	double d2
	int i3
PREINIT:
	float(*func)(float, double, double, int);
CODE:
	func   = INT2PTR(float(*)(float, double, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2, i3);
OUTPUT:
	RETVAL

char *
nci_tfddi( c_func, f0, d1, d2, i3 )
	SV* c_func
	float f0
	double d1
	double d2
	int i3
PREINIT:
	char *(*func)(float, double, double, int);
CODE:
	func   = INT2PTR(char *(*)(float, double, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2, i3);
OUTPUT:
	RETVAL

int
nci_ifddi( c_func, f0, d1, d2, i3 )
	SV* c_func
	float f0
	double d1
	double d2
	int i3
PREINIT:
	int(*func)(float, double, double, int);
CODE:
	func   = INT2PTR(int(*)(float, double, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, d2, i3);
OUTPUT:
	RETVAL

void *
nci_ptddi( c_func, t0, d1, d2, i3 )
	SV* c_func
	char * t0
	double d1
	double d2
	int i3
PREINIT:
	void *(*func)(char *, double, double, int);
CODE:
	func   = INT2PTR(void *(*)(char *, double, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2, i3);
OUTPUT:
	RETVAL

void
nci_vtddi( c_func, t0, d1, d2, i3 )
	SV* c_func
	char * t0
	double d1
	double d2
	int i3
PREINIT:
	void(*func)(char *, double, double, int);
CODE:
	func   = INT2PTR(void(*)(char *, double, double, int), SvIV(c_func) );
	(*func)(t0, d1, d2, i3);

double
nci_dtddi( c_func, t0, d1, d2, i3 )
	SV* c_func
	char * t0
	double d1
	double d2
	int i3
PREINIT:
	double(*func)(char *, double, double, int);
CODE:
	func   = INT2PTR(double(*)(char *, double, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2, i3);
OUTPUT:
	RETVAL

short
nci_stddi( c_func, t0, d1, d2, i3 )
	SV* c_func
	char * t0
	double d1
	double d2
	int i3
PREINIT:
	short(*func)(char *, double, double, int);
CODE:
	func   = INT2PTR(short(*)(char *, double, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2, i3);
OUTPUT:
	RETVAL

float
nci_ftddi( c_func, t0, d1, d2, i3 )
	SV* c_func
	char * t0
	double d1
	double d2
	int i3
PREINIT:
	float(*func)(char *, double, double, int);
CODE:
	func   = INT2PTR(float(*)(char *, double, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2, i3);
OUTPUT:
	RETVAL

char *
nci_ttddi( c_func, t0, d1, d2, i3 )
	SV* c_func
	char * t0
	double d1
	double d2
	int i3
PREINIT:
	char *(*func)(char *, double, double, int);
CODE:
	func   = INT2PTR(char *(*)(char *, double, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2, i3);
OUTPUT:
	RETVAL

int
nci_itddi( c_func, t0, d1, d2, i3 )
	SV* c_func
	char * t0
	double d1
	double d2
	int i3
PREINIT:
	int(*func)(char *, double, double, int);
CODE:
	func   = INT2PTR(int(*)(char *, double, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, d2, i3);
OUTPUT:
	RETVAL

void *
nci_piddi( c_func, i0, d1, d2, i3 )
	SV* c_func
	int i0
	double d1
	double d2
	int i3
PREINIT:
	void *(*func)(int, double, double, int);
CODE:
	func   = INT2PTR(void *(*)(int, double, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2, i3);
OUTPUT:
	RETVAL

void
nci_viddi( c_func, i0, d1, d2, i3 )
	SV* c_func
	int i0
	double d1
	double d2
	int i3
PREINIT:
	void(*func)(int, double, double, int);
CODE:
	func   = INT2PTR(void(*)(int, double, double, int), SvIV(c_func) );
	(*func)(i0, d1, d2, i3);

double
nci_diddi( c_func, i0, d1, d2, i3 )
	SV* c_func
	int i0
	double d1
	double d2
	int i3
PREINIT:
	double(*func)(int, double, double, int);
CODE:
	func   = INT2PTR(double(*)(int, double, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2, i3);
OUTPUT:
	RETVAL

short
nci_siddi( c_func, i0, d1, d2, i3 )
	SV* c_func
	int i0
	double d1
	double d2
	int i3
PREINIT:
	short(*func)(int, double, double, int);
CODE:
	func   = INT2PTR(short(*)(int, double, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2, i3);
OUTPUT:
	RETVAL

float
nci_fiddi( c_func, i0, d1, d2, i3 )
	SV* c_func
	int i0
	double d1
	double d2
	int i3
PREINIT:
	float(*func)(int, double, double, int);
CODE:
	func   = INT2PTR(float(*)(int, double, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2, i3);
OUTPUT:
	RETVAL

char *
nci_tiddi( c_func, i0, d1, d2, i3 )
	SV* c_func
	int i0
	double d1
	double d2
	int i3
PREINIT:
	char *(*func)(int, double, double, int);
CODE:
	func   = INT2PTR(char *(*)(int, double, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2, i3);
OUTPUT:
	RETVAL

int
nci_iiddi( c_func, i0, d1, d2, i3 )
	SV* c_func
	int i0
	double d1
	double d2
	int i3
PREINIT:
	int(*func)(int, double, double, int);
CODE:
	func   = INT2PTR(int(*)(int, double, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, d2, i3);
OUTPUT:
	RETVAL

void *
nci_ppsdi( c_func, p0, s1, d2, i3 )
	SV* c_func
	void * p0
	short s1
	double d2
	int i3
PREINIT:
	void *(*func)(void *, short, double, int);
CODE:
	func   = INT2PTR(void *(*)(void *, short, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2, i3);
OUTPUT:
	RETVAL

void
nci_vpsdi( c_func, p0, s1, d2, i3 )
	SV* c_func
	void * p0
	short s1
	double d2
	int i3
PREINIT:
	void(*func)(void *, short, double, int);
CODE:
	func   = INT2PTR(void(*)(void *, short, double, int), SvIV(c_func) );
	(*func)(p0, s1, d2, i3);

double
nci_dpsdi( c_func, p0, s1, d2, i3 )
	SV* c_func
	void * p0
	short s1
	double d2
	int i3
PREINIT:
	double(*func)(void *, short, double, int);
CODE:
	func   = INT2PTR(double(*)(void *, short, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2, i3);
OUTPUT:
	RETVAL

short
nci_spsdi( c_func, p0, s1, d2, i3 )
	SV* c_func
	void * p0
	short s1
	double d2
	int i3
PREINIT:
	short(*func)(void *, short, double, int);
CODE:
	func   = INT2PTR(short(*)(void *, short, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2, i3);
OUTPUT:
	RETVAL

float
nci_fpsdi( c_func, p0, s1, d2, i3 )
	SV* c_func
	void * p0
	short s1
	double d2
	int i3
PREINIT:
	float(*func)(void *, short, double, int);
CODE:
	func   = INT2PTR(float(*)(void *, short, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2, i3);
OUTPUT:
	RETVAL

char *
nci_tpsdi( c_func, p0, s1, d2, i3 )
	SV* c_func
	void * p0
	short s1
	double d2
	int i3
PREINIT:
	char *(*func)(void *, short, double, int);
CODE:
	func   = INT2PTR(char *(*)(void *, short, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2, i3);
OUTPUT:
	RETVAL

int
nci_ipsdi( c_func, p0, s1, d2, i3 )
	SV* c_func
	void * p0
	short s1
	double d2
	int i3
PREINIT:
	int(*func)(void *, short, double, int);
CODE:
	func   = INT2PTR(int(*)(void *, short, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, d2, i3);
OUTPUT:
	RETVAL

void *
nci_pvsdi( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvsdi( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvsdi( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svsdi( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvsdi( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvsdi( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivsdi( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdsdi( c_func, d0, s1, d2, i3 )
	SV* c_func
	double d0
	short s1
	double d2
	int i3
PREINIT:
	void *(*func)(double, short, double, int);
CODE:
	func   = INT2PTR(void *(*)(double, short, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2, i3);
OUTPUT:
	RETVAL

void
nci_vdsdi( c_func, d0, s1, d2, i3 )
	SV* c_func
	double d0
	short s1
	double d2
	int i3
PREINIT:
	void(*func)(double, short, double, int);
CODE:
	func   = INT2PTR(void(*)(double, short, double, int), SvIV(c_func) );
	(*func)(d0, s1, d2, i3);

double
nci_ddsdi( c_func, d0, s1, d2, i3 )
	SV* c_func
	double d0
	short s1
	double d2
	int i3
PREINIT:
	double(*func)(double, short, double, int);
CODE:
	func   = INT2PTR(double(*)(double, short, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2, i3);
OUTPUT:
	RETVAL

short
nci_sdsdi( c_func, d0, s1, d2, i3 )
	SV* c_func
	double d0
	short s1
	double d2
	int i3
PREINIT:
	short(*func)(double, short, double, int);
CODE:
	func   = INT2PTR(short(*)(double, short, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2, i3);
OUTPUT:
	RETVAL

float
nci_fdsdi( c_func, d0, s1, d2, i3 )
	SV* c_func
	double d0
	short s1
	double d2
	int i3
PREINIT:
	float(*func)(double, short, double, int);
CODE:
	func   = INT2PTR(float(*)(double, short, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2, i3);
OUTPUT:
	RETVAL

char *
nci_tdsdi( c_func, d0, s1, d2, i3 )
	SV* c_func
	double d0
	short s1
	double d2
	int i3
PREINIT:
	char *(*func)(double, short, double, int);
CODE:
	func   = INT2PTR(char *(*)(double, short, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2, i3);
OUTPUT:
	RETVAL

int
nci_idsdi( c_func, d0, s1, d2, i3 )
	SV* c_func
	double d0
	short s1
	double d2
	int i3
PREINIT:
	int(*func)(double, short, double, int);
CODE:
	func   = INT2PTR(int(*)(double, short, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, d2, i3);
OUTPUT:
	RETVAL

void *
nci_pssdi( c_func, s0, s1, d2, i3 )
	SV* c_func
	short s0
	short s1
	double d2
	int i3
PREINIT:
	void *(*func)(short, short, double, int);
CODE:
	func   = INT2PTR(void *(*)(short, short, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2, i3);
OUTPUT:
	RETVAL

void
nci_vssdi( c_func, s0, s1, d2, i3 )
	SV* c_func
	short s0
	short s1
	double d2
	int i3
PREINIT:
	void(*func)(short, short, double, int);
CODE:
	func   = INT2PTR(void(*)(short, short, double, int), SvIV(c_func) );
	(*func)(s0, s1, d2, i3);

double
nci_dssdi( c_func, s0, s1, d2, i3 )
	SV* c_func
	short s0
	short s1
	double d2
	int i3
PREINIT:
	double(*func)(short, short, double, int);
CODE:
	func   = INT2PTR(double(*)(short, short, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2, i3);
OUTPUT:
	RETVAL

short
nci_sssdi( c_func, s0, s1, d2, i3 )
	SV* c_func
	short s0
	short s1
	double d2
	int i3
PREINIT:
	short(*func)(short, short, double, int);
CODE:
	func   = INT2PTR(short(*)(short, short, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2, i3);
OUTPUT:
	RETVAL

float
nci_fssdi( c_func, s0, s1, d2, i3 )
	SV* c_func
	short s0
	short s1
	double d2
	int i3
PREINIT:
	float(*func)(short, short, double, int);
CODE:
	func   = INT2PTR(float(*)(short, short, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2, i3);
OUTPUT:
	RETVAL

char *
nci_tssdi( c_func, s0, s1, d2, i3 )
	SV* c_func
	short s0
	short s1
	double d2
	int i3
PREINIT:
	char *(*func)(short, short, double, int);
CODE:
	func   = INT2PTR(char *(*)(short, short, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2, i3);
OUTPUT:
	RETVAL

int
nci_issdi( c_func, s0, s1, d2, i3 )
	SV* c_func
	short s0
	short s1
	double d2
	int i3
PREINIT:
	int(*func)(short, short, double, int);
CODE:
	func   = INT2PTR(int(*)(short, short, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, d2, i3);
OUTPUT:
	RETVAL

void *
nci_pfsdi( c_func, f0, s1, d2, i3 )
	SV* c_func
	float f0
	short s1
	double d2
	int i3
PREINIT:
	void *(*func)(float, short, double, int);
CODE:
	func   = INT2PTR(void *(*)(float, short, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2, i3);
OUTPUT:
	RETVAL

void
nci_vfsdi( c_func, f0, s1, d2, i3 )
	SV* c_func
	float f0
	short s1
	double d2
	int i3
PREINIT:
	void(*func)(float, short, double, int);
CODE:
	func   = INT2PTR(void(*)(float, short, double, int), SvIV(c_func) );
	(*func)(f0, s1, d2, i3);

double
nci_dfsdi( c_func, f0, s1, d2, i3 )
	SV* c_func
	float f0
	short s1
	double d2
	int i3
PREINIT:
	double(*func)(float, short, double, int);
CODE:
	func   = INT2PTR(double(*)(float, short, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2, i3);
OUTPUT:
	RETVAL

short
nci_sfsdi( c_func, f0, s1, d2, i3 )
	SV* c_func
	float f0
	short s1
	double d2
	int i3
PREINIT:
	short(*func)(float, short, double, int);
CODE:
	func   = INT2PTR(short(*)(float, short, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2, i3);
OUTPUT:
	RETVAL

float
nci_ffsdi( c_func, f0, s1, d2, i3 )
	SV* c_func
	float f0
	short s1
	double d2
	int i3
PREINIT:
	float(*func)(float, short, double, int);
CODE:
	func   = INT2PTR(float(*)(float, short, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2, i3);
OUTPUT:
	RETVAL

char *
nci_tfsdi( c_func, f0, s1, d2, i3 )
	SV* c_func
	float f0
	short s1
	double d2
	int i3
PREINIT:
	char *(*func)(float, short, double, int);
CODE:
	func   = INT2PTR(char *(*)(float, short, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2, i3);
OUTPUT:
	RETVAL

int
nci_ifsdi( c_func, f0, s1, d2, i3 )
	SV* c_func
	float f0
	short s1
	double d2
	int i3
PREINIT:
	int(*func)(float, short, double, int);
CODE:
	func   = INT2PTR(int(*)(float, short, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, d2, i3);
OUTPUT:
	RETVAL

void *
nci_ptsdi( c_func, t0, s1, d2, i3 )
	SV* c_func
	char * t0
	short s1
	double d2
	int i3
PREINIT:
	void *(*func)(char *, short, double, int);
CODE:
	func   = INT2PTR(void *(*)(char *, short, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2, i3);
OUTPUT:
	RETVAL

void
nci_vtsdi( c_func, t0, s1, d2, i3 )
	SV* c_func
	char * t0
	short s1
	double d2
	int i3
PREINIT:
	void(*func)(char *, short, double, int);
CODE:
	func   = INT2PTR(void(*)(char *, short, double, int), SvIV(c_func) );
	(*func)(t0, s1, d2, i3);

double
nci_dtsdi( c_func, t0, s1, d2, i3 )
	SV* c_func
	char * t0
	short s1
	double d2
	int i3
PREINIT:
	double(*func)(char *, short, double, int);
CODE:
	func   = INT2PTR(double(*)(char *, short, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2, i3);
OUTPUT:
	RETVAL

short
nci_stsdi( c_func, t0, s1, d2, i3 )
	SV* c_func
	char * t0
	short s1
	double d2
	int i3
PREINIT:
	short(*func)(char *, short, double, int);
CODE:
	func   = INT2PTR(short(*)(char *, short, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2, i3);
OUTPUT:
	RETVAL

float
nci_ftsdi( c_func, t0, s1, d2, i3 )
	SV* c_func
	char * t0
	short s1
	double d2
	int i3
PREINIT:
	float(*func)(char *, short, double, int);
CODE:
	func   = INT2PTR(float(*)(char *, short, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2, i3);
OUTPUT:
	RETVAL

char *
nci_ttsdi( c_func, t0, s1, d2, i3 )
	SV* c_func
	char * t0
	short s1
	double d2
	int i3
PREINIT:
	char *(*func)(char *, short, double, int);
CODE:
	func   = INT2PTR(char *(*)(char *, short, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2, i3);
OUTPUT:
	RETVAL

int
nci_itsdi( c_func, t0, s1, d2, i3 )
	SV* c_func
	char * t0
	short s1
	double d2
	int i3
PREINIT:
	int(*func)(char *, short, double, int);
CODE:
	func   = INT2PTR(int(*)(char *, short, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, d2, i3);
OUTPUT:
	RETVAL

void *
nci_pisdi( c_func, i0, s1, d2, i3 )
	SV* c_func
	int i0
	short s1
	double d2
	int i3
PREINIT:
	void *(*func)(int, short, double, int);
CODE:
	func   = INT2PTR(void *(*)(int, short, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2, i3);
OUTPUT:
	RETVAL

void
nci_visdi( c_func, i0, s1, d2, i3 )
	SV* c_func
	int i0
	short s1
	double d2
	int i3
PREINIT:
	void(*func)(int, short, double, int);
CODE:
	func   = INT2PTR(void(*)(int, short, double, int), SvIV(c_func) );
	(*func)(i0, s1, d2, i3);

double
nci_disdi( c_func, i0, s1, d2, i3 )
	SV* c_func
	int i0
	short s1
	double d2
	int i3
PREINIT:
	double(*func)(int, short, double, int);
CODE:
	func   = INT2PTR(double(*)(int, short, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2, i3);
OUTPUT:
	RETVAL

short
nci_sisdi( c_func, i0, s1, d2, i3 )
	SV* c_func
	int i0
	short s1
	double d2
	int i3
PREINIT:
	short(*func)(int, short, double, int);
CODE:
	func   = INT2PTR(short(*)(int, short, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2, i3);
OUTPUT:
	RETVAL

float
nci_fisdi( c_func, i0, s1, d2, i3 )
	SV* c_func
	int i0
	short s1
	double d2
	int i3
PREINIT:
	float(*func)(int, short, double, int);
CODE:
	func   = INT2PTR(float(*)(int, short, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2, i3);
OUTPUT:
	RETVAL

char *
nci_tisdi( c_func, i0, s1, d2, i3 )
	SV* c_func
	int i0
	short s1
	double d2
	int i3
PREINIT:
	char *(*func)(int, short, double, int);
CODE:
	func   = INT2PTR(char *(*)(int, short, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2, i3);
OUTPUT:
	RETVAL

int
nci_iisdi( c_func, i0, s1, d2, i3 )
	SV* c_func
	int i0
	short s1
	double d2
	int i3
PREINIT:
	int(*func)(int, short, double, int);
CODE:
	func   = INT2PTR(int(*)(int, short, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, d2, i3);
OUTPUT:
	RETVAL

void *
nci_ppfdi( c_func, p0, f1, d2, i3 )
	SV* c_func
	void * p0
	float f1
	double d2
	int i3
PREINIT:
	void *(*func)(void *, float, double, int);
CODE:
	func   = INT2PTR(void *(*)(void *, float, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2, i3);
OUTPUT:
	RETVAL

void
nci_vpfdi( c_func, p0, f1, d2, i3 )
	SV* c_func
	void * p0
	float f1
	double d2
	int i3
PREINIT:
	void(*func)(void *, float, double, int);
CODE:
	func   = INT2PTR(void(*)(void *, float, double, int), SvIV(c_func) );
	(*func)(p0, f1, d2, i3);

double
nci_dpfdi( c_func, p0, f1, d2, i3 )
	SV* c_func
	void * p0
	float f1
	double d2
	int i3
PREINIT:
	double(*func)(void *, float, double, int);
CODE:
	func   = INT2PTR(double(*)(void *, float, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2, i3);
OUTPUT:
	RETVAL

short
nci_spfdi( c_func, p0, f1, d2, i3 )
	SV* c_func
	void * p0
	float f1
	double d2
	int i3
PREINIT:
	short(*func)(void *, float, double, int);
CODE:
	func   = INT2PTR(short(*)(void *, float, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2, i3);
OUTPUT:
	RETVAL

float
nci_fpfdi( c_func, p0, f1, d2, i3 )
	SV* c_func
	void * p0
	float f1
	double d2
	int i3
PREINIT:
	float(*func)(void *, float, double, int);
CODE:
	func   = INT2PTR(float(*)(void *, float, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2, i3);
OUTPUT:
	RETVAL

char *
nci_tpfdi( c_func, p0, f1, d2, i3 )
	SV* c_func
	void * p0
	float f1
	double d2
	int i3
PREINIT:
	char *(*func)(void *, float, double, int);
CODE:
	func   = INT2PTR(char *(*)(void *, float, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2, i3);
OUTPUT:
	RETVAL

int
nci_ipfdi( c_func, p0, f1, d2, i3 )
	SV* c_func
	void * p0
	float f1
	double d2
	int i3
PREINIT:
	int(*func)(void *, float, double, int);
CODE:
	func   = INT2PTR(int(*)(void *, float, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, d2, i3);
OUTPUT:
	RETVAL

void *
nci_pvfdi( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvfdi( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvfdi( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svfdi( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvfdi( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvfdi( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivfdi( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdfdi( c_func, d0, f1, d2, i3 )
	SV* c_func
	double d0
	float f1
	double d2
	int i3
PREINIT:
	void *(*func)(double, float, double, int);
CODE:
	func   = INT2PTR(void *(*)(double, float, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2, i3);
OUTPUT:
	RETVAL

void
nci_vdfdi( c_func, d0, f1, d2, i3 )
	SV* c_func
	double d0
	float f1
	double d2
	int i3
PREINIT:
	void(*func)(double, float, double, int);
CODE:
	func   = INT2PTR(void(*)(double, float, double, int), SvIV(c_func) );
	(*func)(d0, f1, d2, i3);

double
nci_ddfdi( c_func, d0, f1, d2, i3 )
	SV* c_func
	double d0
	float f1
	double d2
	int i3
PREINIT:
	double(*func)(double, float, double, int);
CODE:
	func   = INT2PTR(double(*)(double, float, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2, i3);
OUTPUT:
	RETVAL

short
nci_sdfdi( c_func, d0, f1, d2, i3 )
	SV* c_func
	double d0
	float f1
	double d2
	int i3
PREINIT:
	short(*func)(double, float, double, int);
CODE:
	func   = INT2PTR(short(*)(double, float, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2, i3);
OUTPUT:
	RETVAL

float
nci_fdfdi( c_func, d0, f1, d2, i3 )
	SV* c_func
	double d0
	float f1
	double d2
	int i3
PREINIT:
	float(*func)(double, float, double, int);
CODE:
	func   = INT2PTR(float(*)(double, float, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2, i3);
OUTPUT:
	RETVAL

char *
nci_tdfdi( c_func, d0, f1, d2, i3 )
	SV* c_func
	double d0
	float f1
	double d2
	int i3
PREINIT:
	char *(*func)(double, float, double, int);
CODE:
	func   = INT2PTR(char *(*)(double, float, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2, i3);
OUTPUT:
	RETVAL

int
nci_idfdi( c_func, d0, f1, d2, i3 )
	SV* c_func
	double d0
	float f1
	double d2
	int i3
PREINIT:
	int(*func)(double, float, double, int);
CODE:
	func   = INT2PTR(int(*)(double, float, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, d2, i3);
OUTPUT:
	RETVAL

void *
nci_psfdi( c_func, s0, f1, d2, i3 )
	SV* c_func
	short s0
	float f1
	double d2
	int i3
PREINIT:
	void *(*func)(short, float, double, int);
CODE:
	func   = INT2PTR(void *(*)(short, float, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2, i3);
OUTPUT:
	RETVAL

void
nci_vsfdi( c_func, s0, f1, d2, i3 )
	SV* c_func
	short s0
	float f1
	double d2
	int i3
PREINIT:
	void(*func)(short, float, double, int);
CODE:
	func   = INT2PTR(void(*)(short, float, double, int), SvIV(c_func) );
	(*func)(s0, f1, d2, i3);

double
nci_dsfdi( c_func, s0, f1, d2, i3 )
	SV* c_func
	short s0
	float f1
	double d2
	int i3
PREINIT:
	double(*func)(short, float, double, int);
CODE:
	func   = INT2PTR(double(*)(short, float, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2, i3);
OUTPUT:
	RETVAL

short
nci_ssfdi( c_func, s0, f1, d2, i3 )
	SV* c_func
	short s0
	float f1
	double d2
	int i3
PREINIT:
	short(*func)(short, float, double, int);
CODE:
	func   = INT2PTR(short(*)(short, float, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2, i3);
OUTPUT:
	RETVAL

float
nci_fsfdi( c_func, s0, f1, d2, i3 )
	SV* c_func
	short s0
	float f1
	double d2
	int i3
PREINIT:
	float(*func)(short, float, double, int);
CODE:
	func   = INT2PTR(float(*)(short, float, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2, i3);
OUTPUT:
	RETVAL

char *
nci_tsfdi( c_func, s0, f1, d2, i3 )
	SV* c_func
	short s0
	float f1
	double d2
	int i3
PREINIT:
	char *(*func)(short, float, double, int);
CODE:
	func   = INT2PTR(char *(*)(short, float, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2, i3);
OUTPUT:
	RETVAL

int
nci_isfdi( c_func, s0, f1, d2, i3 )
	SV* c_func
	short s0
	float f1
	double d2
	int i3
PREINIT:
	int(*func)(short, float, double, int);
CODE:
	func   = INT2PTR(int(*)(short, float, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, d2, i3);
OUTPUT:
	RETVAL

void *
nci_pffdi( c_func, f0, f1, d2, i3 )
	SV* c_func
	float f0
	float f1
	double d2
	int i3
PREINIT:
	void *(*func)(float, float, double, int);
CODE:
	func   = INT2PTR(void *(*)(float, float, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2, i3);
OUTPUT:
	RETVAL

void
nci_vffdi( c_func, f0, f1, d2, i3 )
	SV* c_func
	float f0
	float f1
	double d2
	int i3
PREINIT:
	void(*func)(float, float, double, int);
CODE:
	func   = INT2PTR(void(*)(float, float, double, int), SvIV(c_func) );
	(*func)(f0, f1, d2, i3);

double
nci_dffdi( c_func, f0, f1, d2, i3 )
	SV* c_func
	float f0
	float f1
	double d2
	int i3
PREINIT:
	double(*func)(float, float, double, int);
CODE:
	func   = INT2PTR(double(*)(float, float, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2, i3);
OUTPUT:
	RETVAL

short
nci_sffdi( c_func, f0, f1, d2, i3 )
	SV* c_func
	float f0
	float f1
	double d2
	int i3
PREINIT:
	short(*func)(float, float, double, int);
CODE:
	func   = INT2PTR(short(*)(float, float, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2, i3);
OUTPUT:
	RETVAL

float
nci_fffdi( c_func, f0, f1, d2, i3 )
	SV* c_func
	float f0
	float f1
	double d2
	int i3
PREINIT:
	float(*func)(float, float, double, int);
CODE:
	func   = INT2PTR(float(*)(float, float, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2, i3);
OUTPUT:
	RETVAL

char *
nci_tffdi( c_func, f0, f1, d2, i3 )
	SV* c_func
	float f0
	float f1
	double d2
	int i3
PREINIT:
	char *(*func)(float, float, double, int);
CODE:
	func   = INT2PTR(char *(*)(float, float, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2, i3);
OUTPUT:
	RETVAL

int
nci_iffdi( c_func, f0, f1, d2, i3 )
	SV* c_func
	float f0
	float f1
	double d2
	int i3
PREINIT:
	int(*func)(float, float, double, int);
CODE:
	func   = INT2PTR(int(*)(float, float, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, d2, i3);
OUTPUT:
	RETVAL

void *
nci_ptfdi( c_func, t0, f1, d2, i3 )
	SV* c_func
	char * t0
	float f1
	double d2
	int i3
PREINIT:
	void *(*func)(char *, float, double, int);
CODE:
	func   = INT2PTR(void *(*)(char *, float, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2, i3);
OUTPUT:
	RETVAL

void
nci_vtfdi( c_func, t0, f1, d2, i3 )
	SV* c_func
	char * t0
	float f1
	double d2
	int i3
PREINIT:
	void(*func)(char *, float, double, int);
CODE:
	func   = INT2PTR(void(*)(char *, float, double, int), SvIV(c_func) );
	(*func)(t0, f1, d2, i3);

double
nci_dtfdi( c_func, t0, f1, d2, i3 )
	SV* c_func
	char * t0
	float f1
	double d2
	int i3
PREINIT:
	double(*func)(char *, float, double, int);
CODE:
	func   = INT2PTR(double(*)(char *, float, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2, i3);
OUTPUT:
	RETVAL

short
nci_stfdi( c_func, t0, f1, d2, i3 )
	SV* c_func
	char * t0
	float f1
	double d2
	int i3
PREINIT:
	short(*func)(char *, float, double, int);
CODE:
	func   = INT2PTR(short(*)(char *, float, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2, i3);
OUTPUT:
	RETVAL

float
nci_ftfdi( c_func, t0, f1, d2, i3 )
	SV* c_func
	char * t0
	float f1
	double d2
	int i3
PREINIT:
	float(*func)(char *, float, double, int);
CODE:
	func   = INT2PTR(float(*)(char *, float, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2, i3);
OUTPUT:
	RETVAL

char *
nci_ttfdi( c_func, t0, f1, d2, i3 )
	SV* c_func
	char * t0
	float f1
	double d2
	int i3
PREINIT:
	char *(*func)(char *, float, double, int);
CODE:
	func   = INT2PTR(char *(*)(char *, float, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2, i3);
OUTPUT:
	RETVAL

int
nci_itfdi( c_func, t0, f1, d2, i3 )
	SV* c_func
	char * t0
	float f1
	double d2
	int i3
PREINIT:
	int(*func)(char *, float, double, int);
CODE:
	func   = INT2PTR(int(*)(char *, float, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, d2, i3);
OUTPUT:
	RETVAL

void *
nci_pifdi( c_func, i0, f1, d2, i3 )
	SV* c_func
	int i0
	float f1
	double d2
	int i3
PREINIT:
	void *(*func)(int, float, double, int);
CODE:
	func   = INT2PTR(void *(*)(int, float, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2, i3);
OUTPUT:
	RETVAL

void
nci_vifdi( c_func, i0, f1, d2, i3 )
	SV* c_func
	int i0
	float f1
	double d2
	int i3
PREINIT:
	void(*func)(int, float, double, int);
CODE:
	func   = INT2PTR(void(*)(int, float, double, int), SvIV(c_func) );
	(*func)(i0, f1, d2, i3);

double
nci_difdi( c_func, i0, f1, d2, i3 )
	SV* c_func
	int i0
	float f1
	double d2
	int i3
PREINIT:
	double(*func)(int, float, double, int);
CODE:
	func   = INT2PTR(double(*)(int, float, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2, i3);
OUTPUT:
	RETVAL

short
nci_sifdi( c_func, i0, f1, d2, i3 )
	SV* c_func
	int i0
	float f1
	double d2
	int i3
PREINIT:
	short(*func)(int, float, double, int);
CODE:
	func   = INT2PTR(short(*)(int, float, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2, i3);
OUTPUT:
	RETVAL

float
nci_fifdi( c_func, i0, f1, d2, i3 )
	SV* c_func
	int i0
	float f1
	double d2
	int i3
PREINIT:
	float(*func)(int, float, double, int);
CODE:
	func   = INT2PTR(float(*)(int, float, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2, i3);
OUTPUT:
	RETVAL

char *
nci_tifdi( c_func, i0, f1, d2, i3 )
	SV* c_func
	int i0
	float f1
	double d2
	int i3
PREINIT:
	char *(*func)(int, float, double, int);
CODE:
	func   = INT2PTR(char *(*)(int, float, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2, i3);
OUTPUT:
	RETVAL

int
nci_iifdi( c_func, i0, f1, d2, i3 )
	SV* c_func
	int i0
	float f1
	double d2
	int i3
PREINIT:
	int(*func)(int, float, double, int);
CODE:
	func   = INT2PTR(int(*)(int, float, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, d2, i3);
OUTPUT:
	RETVAL

void *
nci_pptdi( c_func, p0, t1, d2, i3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	int i3
PREINIT:
	void *(*func)(void *, char *, double, int);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2, i3);
OUTPUT:
	RETVAL

void
nci_vptdi( c_func, p0, t1, d2, i3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	int i3
PREINIT:
	void(*func)(void *, char *, double, int);
CODE:
	func   = INT2PTR(void(*)(void *, char *, double, int), SvIV(c_func) );
	(*func)(p0, t1, d2, i3);

double
nci_dptdi( c_func, p0, t1, d2, i3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	int i3
PREINIT:
	double(*func)(void *, char *, double, int);
CODE:
	func   = INT2PTR(double(*)(void *, char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2, i3);
OUTPUT:
	RETVAL

short
nci_sptdi( c_func, p0, t1, d2, i3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	int i3
PREINIT:
	short(*func)(void *, char *, double, int);
CODE:
	func   = INT2PTR(short(*)(void *, char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2, i3);
OUTPUT:
	RETVAL

float
nci_fptdi( c_func, p0, t1, d2, i3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	int i3
PREINIT:
	float(*func)(void *, char *, double, int);
CODE:
	func   = INT2PTR(float(*)(void *, char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2, i3);
OUTPUT:
	RETVAL

char *
nci_tptdi( c_func, p0, t1, d2, i3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	int i3
PREINIT:
	char *(*func)(void *, char *, double, int);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2, i3);
OUTPUT:
	RETVAL

int
nci_iptdi( c_func, p0, t1, d2, i3 )
	SV* c_func
	void * p0
	char * t1
	double d2
	int i3
PREINIT:
	int(*func)(void *, char *, double, int);
CODE:
	func   = INT2PTR(int(*)(void *, char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, d2, i3);
OUTPUT:
	RETVAL

void *
nci_pvtdi( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvtdi( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvtdi( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svtdi( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvtdi( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvtdi( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivtdi( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdtdi( c_func, d0, t1, d2, i3 )
	SV* c_func
	double d0
	char * t1
	double d2
	int i3
PREINIT:
	void *(*func)(double, char *, double, int);
CODE:
	func   = INT2PTR(void *(*)(double, char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2, i3);
OUTPUT:
	RETVAL

void
nci_vdtdi( c_func, d0, t1, d2, i3 )
	SV* c_func
	double d0
	char * t1
	double d2
	int i3
PREINIT:
	void(*func)(double, char *, double, int);
CODE:
	func   = INT2PTR(void(*)(double, char *, double, int), SvIV(c_func) );
	(*func)(d0, t1, d2, i3);

double
nci_ddtdi( c_func, d0, t1, d2, i3 )
	SV* c_func
	double d0
	char * t1
	double d2
	int i3
PREINIT:
	double(*func)(double, char *, double, int);
CODE:
	func   = INT2PTR(double(*)(double, char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2, i3);
OUTPUT:
	RETVAL

short
nci_sdtdi( c_func, d0, t1, d2, i3 )
	SV* c_func
	double d0
	char * t1
	double d2
	int i3
PREINIT:
	short(*func)(double, char *, double, int);
CODE:
	func   = INT2PTR(short(*)(double, char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2, i3);
OUTPUT:
	RETVAL

float
nci_fdtdi( c_func, d0, t1, d2, i3 )
	SV* c_func
	double d0
	char * t1
	double d2
	int i3
PREINIT:
	float(*func)(double, char *, double, int);
CODE:
	func   = INT2PTR(float(*)(double, char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2, i3);
OUTPUT:
	RETVAL

char *
nci_tdtdi( c_func, d0, t1, d2, i3 )
	SV* c_func
	double d0
	char * t1
	double d2
	int i3
PREINIT:
	char *(*func)(double, char *, double, int);
CODE:
	func   = INT2PTR(char *(*)(double, char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2, i3);
OUTPUT:
	RETVAL

int
nci_idtdi( c_func, d0, t1, d2, i3 )
	SV* c_func
	double d0
	char * t1
	double d2
	int i3
PREINIT:
	int(*func)(double, char *, double, int);
CODE:
	func   = INT2PTR(int(*)(double, char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, d2, i3);
OUTPUT:
	RETVAL

void *
nci_pstdi( c_func, s0, t1, d2, i3 )
	SV* c_func
	short s0
	char * t1
	double d2
	int i3
PREINIT:
	void *(*func)(short, char *, double, int);
CODE:
	func   = INT2PTR(void *(*)(short, char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2, i3);
OUTPUT:
	RETVAL

void
nci_vstdi( c_func, s0, t1, d2, i3 )
	SV* c_func
	short s0
	char * t1
	double d2
	int i3
PREINIT:
	void(*func)(short, char *, double, int);
CODE:
	func   = INT2PTR(void(*)(short, char *, double, int), SvIV(c_func) );
	(*func)(s0, t1, d2, i3);

double
nci_dstdi( c_func, s0, t1, d2, i3 )
	SV* c_func
	short s0
	char * t1
	double d2
	int i3
PREINIT:
	double(*func)(short, char *, double, int);
CODE:
	func   = INT2PTR(double(*)(short, char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2, i3);
OUTPUT:
	RETVAL

short
nci_sstdi( c_func, s0, t1, d2, i3 )
	SV* c_func
	short s0
	char * t1
	double d2
	int i3
PREINIT:
	short(*func)(short, char *, double, int);
CODE:
	func   = INT2PTR(short(*)(short, char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2, i3);
OUTPUT:
	RETVAL

float
nci_fstdi( c_func, s0, t1, d2, i3 )
	SV* c_func
	short s0
	char * t1
	double d2
	int i3
PREINIT:
	float(*func)(short, char *, double, int);
CODE:
	func   = INT2PTR(float(*)(short, char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2, i3);
OUTPUT:
	RETVAL

char *
nci_tstdi( c_func, s0, t1, d2, i3 )
	SV* c_func
	short s0
	char * t1
	double d2
	int i3
PREINIT:
	char *(*func)(short, char *, double, int);
CODE:
	func   = INT2PTR(char *(*)(short, char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2, i3);
OUTPUT:
	RETVAL

int
nci_istdi( c_func, s0, t1, d2, i3 )
	SV* c_func
	short s0
	char * t1
	double d2
	int i3
PREINIT:
	int(*func)(short, char *, double, int);
CODE:
	func   = INT2PTR(int(*)(short, char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, d2, i3);
OUTPUT:
	RETVAL

void *
nci_pftdi( c_func, f0, t1, d2, i3 )
	SV* c_func
	float f0
	char * t1
	double d2
	int i3
PREINIT:
	void *(*func)(float, char *, double, int);
CODE:
	func   = INT2PTR(void *(*)(float, char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2, i3);
OUTPUT:
	RETVAL

void
nci_vftdi( c_func, f0, t1, d2, i3 )
	SV* c_func
	float f0
	char * t1
	double d2
	int i3
PREINIT:
	void(*func)(float, char *, double, int);
CODE:
	func   = INT2PTR(void(*)(float, char *, double, int), SvIV(c_func) );
	(*func)(f0, t1, d2, i3);

double
nci_dftdi( c_func, f0, t1, d2, i3 )
	SV* c_func
	float f0
	char * t1
	double d2
	int i3
PREINIT:
	double(*func)(float, char *, double, int);
CODE:
	func   = INT2PTR(double(*)(float, char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2, i3);
OUTPUT:
	RETVAL

short
nci_sftdi( c_func, f0, t1, d2, i3 )
	SV* c_func
	float f0
	char * t1
	double d2
	int i3
PREINIT:
	short(*func)(float, char *, double, int);
CODE:
	func   = INT2PTR(short(*)(float, char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2, i3);
OUTPUT:
	RETVAL

float
nci_fftdi( c_func, f0, t1, d2, i3 )
	SV* c_func
	float f0
	char * t1
	double d2
	int i3
PREINIT:
	float(*func)(float, char *, double, int);
CODE:
	func   = INT2PTR(float(*)(float, char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2, i3);
OUTPUT:
	RETVAL

char *
nci_tftdi( c_func, f0, t1, d2, i3 )
	SV* c_func
	float f0
	char * t1
	double d2
	int i3
PREINIT:
	char *(*func)(float, char *, double, int);
CODE:
	func   = INT2PTR(char *(*)(float, char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2, i3);
OUTPUT:
	RETVAL

int
nci_iftdi( c_func, f0, t1, d2, i3 )
	SV* c_func
	float f0
	char * t1
	double d2
	int i3
PREINIT:
	int(*func)(float, char *, double, int);
CODE:
	func   = INT2PTR(int(*)(float, char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, d2, i3);
OUTPUT:
	RETVAL

void *
nci_pttdi( c_func, t0, t1, d2, i3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	int i3
PREINIT:
	void *(*func)(char *, char *, double, int);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2, i3);
OUTPUT:
	RETVAL

void
nci_vttdi( c_func, t0, t1, d2, i3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	int i3
PREINIT:
	void(*func)(char *, char *, double, int);
CODE:
	func   = INT2PTR(void(*)(char *, char *, double, int), SvIV(c_func) );
	(*func)(t0, t1, d2, i3);

double
nci_dttdi( c_func, t0, t1, d2, i3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	int i3
PREINIT:
	double(*func)(char *, char *, double, int);
CODE:
	func   = INT2PTR(double(*)(char *, char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2, i3);
OUTPUT:
	RETVAL

short
nci_sttdi( c_func, t0, t1, d2, i3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	int i3
PREINIT:
	short(*func)(char *, char *, double, int);
CODE:
	func   = INT2PTR(short(*)(char *, char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2, i3);
OUTPUT:
	RETVAL

float
nci_fttdi( c_func, t0, t1, d2, i3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	int i3
PREINIT:
	float(*func)(char *, char *, double, int);
CODE:
	func   = INT2PTR(float(*)(char *, char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2, i3);
OUTPUT:
	RETVAL

char *
nci_tttdi( c_func, t0, t1, d2, i3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	int i3
PREINIT:
	char *(*func)(char *, char *, double, int);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2, i3);
OUTPUT:
	RETVAL

int
nci_ittdi( c_func, t0, t1, d2, i3 )
	SV* c_func
	char * t0
	char * t1
	double d2
	int i3
PREINIT:
	int(*func)(char *, char *, double, int);
CODE:
	func   = INT2PTR(int(*)(char *, char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, d2, i3);
OUTPUT:
	RETVAL

void *
nci_pitdi( c_func, i0, t1, d2, i3 )
	SV* c_func
	int i0
	char * t1
	double d2
	int i3
PREINIT:
	void *(*func)(int, char *, double, int);
CODE:
	func   = INT2PTR(void *(*)(int, char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2, i3);
OUTPUT:
	RETVAL

void
nci_vitdi( c_func, i0, t1, d2, i3 )
	SV* c_func
	int i0
	char * t1
	double d2
	int i3
PREINIT:
	void(*func)(int, char *, double, int);
CODE:
	func   = INT2PTR(void(*)(int, char *, double, int), SvIV(c_func) );
	(*func)(i0, t1, d2, i3);

double
nci_ditdi( c_func, i0, t1, d2, i3 )
	SV* c_func
	int i0
	char * t1
	double d2
	int i3
PREINIT:
	double(*func)(int, char *, double, int);
CODE:
	func   = INT2PTR(double(*)(int, char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2, i3);
OUTPUT:
	RETVAL

short
nci_sitdi( c_func, i0, t1, d2, i3 )
	SV* c_func
	int i0
	char * t1
	double d2
	int i3
PREINIT:
	short(*func)(int, char *, double, int);
CODE:
	func   = INT2PTR(short(*)(int, char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2, i3);
OUTPUT:
	RETVAL

float
nci_fitdi( c_func, i0, t1, d2, i3 )
	SV* c_func
	int i0
	char * t1
	double d2
	int i3
PREINIT:
	float(*func)(int, char *, double, int);
CODE:
	func   = INT2PTR(float(*)(int, char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2, i3);
OUTPUT:
	RETVAL

char *
nci_titdi( c_func, i0, t1, d2, i3 )
	SV* c_func
	int i0
	char * t1
	double d2
	int i3
PREINIT:
	char *(*func)(int, char *, double, int);
CODE:
	func   = INT2PTR(char *(*)(int, char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2, i3);
OUTPUT:
	RETVAL

int
nci_iitdi( c_func, i0, t1, d2, i3 )
	SV* c_func
	int i0
	char * t1
	double d2
	int i3
PREINIT:
	int(*func)(int, char *, double, int);
CODE:
	func   = INT2PTR(int(*)(int, char *, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, d2, i3);
OUTPUT:
	RETVAL

void *
nci_ppidi( c_func, p0, i1, d2, i3 )
	SV* c_func
	void * p0
	int i1
	double d2
	int i3
PREINIT:
	void *(*func)(void *, int, double, int);
CODE:
	func   = INT2PTR(void *(*)(void *, int, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2, i3);
OUTPUT:
	RETVAL

void
nci_vpidi( c_func, p0, i1, d2, i3 )
	SV* c_func
	void * p0
	int i1
	double d2
	int i3
PREINIT:
	void(*func)(void *, int, double, int);
CODE:
	func   = INT2PTR(void(*)(void *, int, double, int), SvIV(c_func) );
	(*func)(p0, i1, d2, i3);

double
nci_dpidi( c_func, p0, i1, d2, i3 )
	SV* c_func
	void * p0
	int i1
	double d2
	int i3
PREINIT:
	double(*func)(void *, int, double, int);
CODE:
	func   = INT2PTR(double(*)(void *, int, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2, i3);
OUTPUT:
	RETVAL

short
nci_spidi( c_func, p0, i1, d2, i3 )
	SV* c_func
	void * p0
	int i1
	double d2
	int i3
PREINIT:
	short(*func)(void *, int, double, int);
CODE:
	func   = INT2PTR(short(*)(void *, int, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2, i3);
OUTPUT:
	RETVAL

float
nci_fpidi( c_func, p0, i1, d2, i3 )
	SV* c_func
	void * p0
	int i1
	double d2
	int i3
PREINIT:
	float(*func)(void *, int, double, int);
CODE:
	func   = INT2PTR(float(*)(void *, int, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2, i3);
OUTPUT:
	RETVAL

char *
nci_tpidi( c_func, p0, i1, d2, i3 )
	SV* c_func
	void * p0
	int i1
	double d2
	int i3
PREINIT:
	char *(*func)(void *, int, double, int);
CODE:
	func   = INT2PTR(char *(*)(void *, int, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2, i3);
OUTPUT:
	RETVAL

int
nci_ipidi( c_func, p0, i1, d2, i3 )
	SV* c_func
	void * p0
	int i1
	double d2
	int i3
PREINIT:
	int(*func)(void *, int, double, int);
CODE:
	func   = INT2PTR(int(*)(void *, int, double, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, d2, i3);
OUTPUT:
	RETVAL

void *
nci_pvidi( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvidi( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvidi( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svidi( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvidi( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvidi( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ividi( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdidi( c_func, d0, i1, d2, i3 )
	SV* c_func
	double d0
	int i1
	double d2
	int i3
PREINIT:
	void *(*func)(double, int, double, int);
CODE:
	func   = INT2PTR(void *(*)(double, int, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2, i3);
OUTPUT:
	RETVAL

void
nci_vdidi( c_func, d0, i1, d2, i3 )
	SV* c_func
	double d0
	int i1
	double d2
	int i3
PREINIT:
	void(*func)(double, int, double, int);
CODE:
	func   = INT2PTR(void(*)(double, int, double, int), SvIV(c_func) );
	(*func)(d0, i1, d2, i3);

double
nci_ddidi( c_func, d0, i1, d2, i3 )
	SV* c_func
	double d0
	int i1
	double d2
	int i3
PREINIT:
	double(*func)(double, int, double, int);
CODE:
	func   = INT2PTR(double(*)(double, int, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2, i3);
OUTPUT:
	RETVAL

short
nci_sdidi( c_func, d0, i1, d2, i3 )
	SV* c_func
	double d0
	int i1
	double d2
	int i3
PREINIT:
	short(*func)(double, int, double, int);
CODE:
	func   = INT2PTR(short(*)(double, int, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2, i3);
OUTPUT:
	RETVAL

float
nci_fdidi( c_func, d0, i1, d2, i3 )
	SV* c_func
	double d0
	int i1
	double d2
	int i3
PREINIT:
	float(*func)(double, int, double, int);
CODE:
	func   = INT2PTR(float(*)(double, int, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2, i3);
OUTPUT:
	RETVAL

char *
nci_tdidi( c_func, d0, i1, d2, i3 )
	SV* c_func
	double d0
	int i1
	double d2
	int i3
PREINIT:
	char *(*func)(double, int, double, int);
CODE:
	func   = INT2PTR(char *(*)(double, int, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2, i3);
OUTPUT:
	RETVAL

int
nci_ididi( c_func, d0, i1, d2, i3 )
	SV* c_func
	double d0
	int i1
	double d2
	int i3
PREINIT:
	int(*func)(double, int, double, int);
CODE:
	func   = INT2PTR(int(*)(double, int, double, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, d2, i3);
OUTPUT:
	RETVAL

void *
nci_psidi( c_func, s0, i1, d2, i3 )
	SV* c_func
	short s0
	int i1
	double d2
	int i3
PREINIT:
	void *(*func)(short, int, double, int);
CODE:
	func   = INT2PTR(void *(*)(short, int, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2, i3);
OUTPUT:
	RETVAL

void
nci_vsidi( c_func, s0, i1, d2, i3 )
	SV* c_func
	short s0
	int i1
	double d2
	int i3
PREINIT:
	void(*func)(short, int, double, int);
CODE:
	func   = INT2PTR(void(*)(short, int, double, int), SvIV(c_func) );
	(*func)(s0, i1, d2, i3);

double
nci_dsidi( c_func, s0, i1, d2, i3 )
	SV* c_func
	short s0
	int i1
	double d2
	int i3
PREINIT:
	double(*func)(short, int, double, int);
CODE:
	func   = INT2PTR(double(*)(short, int, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2, i3);
OUTPUT:
	RETVAL

short
nci_ssidi( c_func, s0, i1, d2, i3 )
	SV* c_func
	short s0
	int i1
	double d2
	int i3
PREINIT:
	short(*func)(short, int, double, int);
CODE:
	func   = INT2PTR(short(*)(short, int, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2, i3);
OUTPUT:
	RETVAL

float
nci_fsidi( c_func, s0, i1, d2, i3 )
	SV* c_func
	short s0
	int i1
	double d2
	int i3
PREINIT:
	float(*func)(short, int, double, int);
CODE:
	func   = INT2PTR(float(*)(short, int, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2, i3);
OUTPUT:
	RETVAL

char *
nci_tsidi( c_func, s0, i1, d2, i3 )
	SV* c_func
	short s0
	int i1
	double d2
	int i3
PREINIT:
	char *(*func)(short, int, double, int);
CODE:
	func   = INT2PTR(char *(*)(short, int, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2, i3);
OUTPUT:
	RETVAL

int
nci_isidi( c_func, s0, i1, d2, i3 )
	SV* c_func
	short s0
	int i1
	double d2
	int i3
PREINIT:
	int(*func)(short, int, double, int);
CODE:
	func   = INT2PTR(int(*)(short, int, double, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, d2, i3);
OUTPUT:
	RETVAL

void *
nci_pfidi( c_func, f0, i1, d2, i3 )
	SV* c_func
	float f0
	int i1
	double d2
	int i3
PREINIT:
	void *(*func)(float, int, double, int);
CODE:
	func   = INT2PTR(void *(*)(float, int, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2, i3);
OUTPUT:
	RETVAL

void
nci_vfidi( c_func, f0, i1, d2, i3 )
	SV* c_func
	float f0
	int i1
	double d2
	int i3
PREINIT:
	void(*func)(float, int, double, int);
CODE:
	func   = INT2PTR(void(*)(float, int, double, int), SvIV(c_func) );
	(*func)(f0, i1, d2, i3);

double
nci_dfidi( c_func, f0, i1, d2, i3 )
	SV* c_func
	float f0
	int i1
	double d2
	int i3
PREINIT:
	double(*func)(float, int, double, int);
CODE:
	func   = INT2PTR(double(*)(float, int, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2, i3);
OUTPUT:
	RETVAL

short
nci_sfidi( c_func, f0, i1, d2, i3 )
	SV* c_func
	float f0
	int i1
	double d2
	int i3
PREINIT:
	short(*func)(float, int, double, int);
CODE:
	func   = INT2PTR(short(*)(float, int, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2, i3);
OUTPUT:
	RETVAL

float
nci_ffidi( c_func, f0, i1, d2, i3 )
	SV* c_func
	float f0
	int i1
	double d2
	int i3
PREINIT:
	float(*func)(float, int, double, int);
CODE:
	func   = INT2PTR(float(*)(float, int, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2, i3);
OUTPUT:
	RETVAL

char *
nci_tfidi( c_func, f0, i1, d2, i3 )
	SV* c_func
	float f0
	int i1
	double d2
	int i3
PREINIT:
	char *(*func)(float, int, double, int);
CODE:
	func   = INT2PTR(char *(*)(float, int, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2, i3);
OUTPUT:
	RETVAL

int
nci_ifidi( c_func, f0, i1, d2, i3 )
	SV* c_func
	float f0
	int i1
	double d2
	int i3
PREINIT:
	int(*func)(float, int, double, int);
CODE:
	func   = INT2PTR(int(*)(float, int, double, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, d2, i3);
OUTPUT:
	RETVAL

void *
nci_ptidi( c_func, t0, i1, d2, i3 )
	SV* c_func
	char * t0
	int i1
	double d2
	int i3
PREINIT:
	void *(*func)(char *, int, double, int);
CODE:
	func   = INT2PTR(void *(*)(char *, int, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2, i3);
OUTPUT:
	RETVAL

void
nci_vtidi( c_func, t0, i1, d2, i3 )
	SV* c_func
	char * t0
	int i1
	double d2
	int i3
PREINIT:
	void(*func)(char *, int, double, int);
CODE:
	func   = INT2PTR(void(*)(char *, int, double, int), SvIV(c_func) );
	(*func)(t0, i1, d2, i3);

double
nci_dtidi( c_func, t0, i1, d2, i3 )
	SV* c_func
	char * t0
	int i1
	double d2
	int i3
PREINIT:
	double(*func)(char *, int, double, int);
CODE:
	func   = INT2PTR(double(*)(char *, int, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2, i3);
OUTPUT:
	RETVAL

short
nci_stidi( c_func, t0, i1, d2, i3 )
	SV* c_func
	char * t0
	int i1
	double d2
	int i3
PREINIT:
	short(*func)(char *, int, double, int);
CODE:
	func   = INT2PTR(short(*)(char *, int, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2, i3);
OUTPUT:
	RETVAL

float
nci_ftidi( c_func, t0, i1, d2, i3 )
	SV* c_func
	char * t0
	int i1
	double d2
	int i3
PREINIT:
	float(*func)(char *, int, double, int);
CODE:
	func   = INT2PTR(float(*)(char *, int, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2, i3);
OUTPUT:
	RETVAL

char *
nci_ttidi( c_func, t0, i1, d2, i3 )
	SV* c_func
	char * t0
	int i1
	double d2
	int i3
PREINIT:
	char *(*func)(char *, int, double, int);
CODE:
	func   = INT2PTR(char *(*)(char *, int, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2, i3);
OUTPUT:
	RETVAL

int
nci_itidi( c_func, t0, i1, d2, i3 )
	SV* c_func
	char * t0
	int i1
	double d2
	int i3
PREINIT:
	int(*func)(char *, int, double, int);
CODE:
	func   = INT2PTR(int(*)(char *, int, double, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, d2, i3);
OUTPUT:
	RETVAL

void *
nci_piidi( c_func, i0, i1, d2, i3 )
	SV* c_func
	int i0
	int i1
	double d2
	int i3
PREINIT:
	void *(*func)(int, int, double, int);
CODE:
	func   = INT2PTR(void *(*)(int, int, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2, i3);
OUTPUT:
	RETVAL

void
nci_viidi( c_func, i0, i1, d2, i3 )
	SV* c_func
	int i0
	int i1
	double d2
	int i3
PREINIT:
	void(*func)(int, int, double, int);
CODE:
	func   = INT2PTR(void(*)(int, int, double, int), SvIV(c_func) );
	(*func)(i0, i1, d2, i3);

double
nci_diidi( c_func, i0, i1, d2, i3 )
	SV* c_func
	int i0
	int i1
	double d2
	int i3
PREINIT:
	double(*func)(int, int, double, int);
CODE:
	func   = INT2PTR(double(*)(int, int, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2, i3);
OUTPUT:
	RETVAL

short
nci_siidi( c_func, i0, i1, d2, i3 )
	SV* c_func
	int i0
	int i1
	double d2
	int i3
PREINIT:
	short(*func)(int, int, double, int);
CODE:
	func   = INT2PTR(short(*)(int, int, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2, i3);
OUTPUT:
	RETVAL

float
nci_fiidi( c_func, i0, i1, d2, i3 )
	SV* c_func
	int i0
	int i1
	double d2
	int i3
PREINIT:
	float(*func)(int, int, double, int);
CODE:
	func   = INT2PTR(float(*)(int, int, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2, i3);
OUTPUT:
	RETVAL

char *
nci_tiidi( c_func, i0, i1, d2, i3 )
	SV* c_func
	int i0
	int i1
	double d2
	int i3
PREINIT:
	char *(*func)(int, int, double, int);
CODE:
	func   = INT2PTR(char *(*)(int, int, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2, i3);
OUTPUT:
	RETVAL

int
nci_iiidi( c_func, i0, i1, d2, i3 )
	SV* c_func
	int i0
	int i1
	double d2
	int i3
PREINIT:
	int(*func)(int, int, double, int);
CODE:
	func   = INT2PTR(int(*)(int, int, double, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, d2, i3);
OUTPUT:
	RETVAL

void *
nci_pppsi( c_func, p0, p1, s2, i3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	int i3
PREINIT:
	void *(*func)(void *, void *, short, int);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2, i3);
OUTPUT:
	RETVAL

void
nci_vppsi( c_func, p0, p1, s2, i3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	int i3
PREINIT:
	void(*func)(void *, void *, short, int);
CODE:
	func   = INT2PTR(void(*)(void *, void *, short, int), SvIV(c_func) );
	(*func)(p0, p1, s2, i3);

double
nci_dppsi( c_func, p0, p1, s2, i3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	int i3
PREINIT:
	double(*func)(void *, void *, short, int);
CODE:
	func   = INT2PTR(double(*)(void *, void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2, i3);
OUTPUT:
	RETVAL

short
nci_sppsi( c_func, p0, p1, s2, i3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	int i3
PREINIT:
	short(*func)(void *, void *, short, int);
CODE:
	func   = INT2PTR(short(*)(void *, void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2, i3);
OUTPUT:
	RETVAL

float
nci_fppsi( c_func, p0, p1, s2, i3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	int i3
PREINIT:
	float(*func)(void *, void *, short, int);
CODE:
	func   = INT2PTR(float(*)(void *, void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2, i3);
OUTPUT:
	RETVAL

char *
nci_tppsi( c_func, p0, p1, s2, i3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	int i3
PREINIT:
	char *(*func)(void *, void *, short, int);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2, i3);
OUTPUT:
	RETVAL

int
nci_ippsi( c_func, p0, p1, s2, i3 )
	SV* c_func
	void * p0
	void * p1
	short s2
	int i3
PREINIT:
	int(*func)(void *, void *, short, int);
CODE:
	func   = INT2PTR(int(*)(void *, void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, s2, i3);
OUTPUT:
	RETVAL

void *
nci_pvpsi( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvpsi( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvpsi( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svpsi( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvpsi( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvpsi( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivpsi( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdpsi( c_func, d0, p1, s2, i3 )
	SV* c_func
	double d0
	void * p1
	short s2
	int i3
PREINIT:
	void *(*func)(double, void *, short, int);
CODE:
	func   = INT2PTR(void *(*)(double, void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2, i3);
OUTPUT:
	RETVAL

void
nci_vdpsi( c_func, d0, p1, s2, i3 )
	SV* c_func
	double d0
	void * p1
	short s2
	int i3
PREINIT:
	void(*func)(double, void *, short, int);
CODE:
	func   = INT2PTR(void(*)(double, void *, short, int), SvIV(c_func) );
	(*func)(d0, p1, s2, i3);

double
nci_ddpsi( c_func, d0, p1, s2, i3 )
	SV* c_func
	double d0
	void * p1
	short s2
	int i3
PREINIT:
	double(*func)(double, void *, short, int);
CODE:
	func   = INT2PTR(double(*)(double, void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2, i3);
OUTPUT:
	RETVAL

short
nci_sdpsi( c_func, d0, p1, s2, i3 )
	SV* c_func
	double d0
	void * p1
	short s2
	int i3
PREINIT:
	short(*func)(double, void *, short, int);
CODE:
	func   = INT2PTR(short(*)(double, void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2, i3);
OUTPUT:
	RETVAL

float
nci_fdpsi( c_func, d0, p1, s2, i3 )
	SV* c_func
	double d0
	void * p1
	short s2
	int i3
PREINIT:
	float(*func)(double, void *, short, int);
CODE:
	func   = INT2PTR(float(*)(double, void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2, i3);
OUTPUT:
	RETVAL

char *
nci_tdpsi( c_func, d0, p1, s2, i3 )
	SV* c_func
	double d0
	void * p1
	short s2
	int i3
PREINIT:
	char *(*func)(double, void *, short, int);
CODE:
	func   = INT2PTR(char *(*)(double, void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2, i3);
OUTPUT:
	RETVAL

int
nci_idpsi( c_func, d0, p1, s2, i3 )
	SV* c_func
	double d0
	void * p1
	short s2
	int i3
PREINIT:
	int(*func)(double, void *, short, int);
CODE:
	func   = INT2PTR(int(*)(double, void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, s2, i3);
OUTPUT:
	RETVAL

void *
nci_pspsi( c_func, s0, p1, s2, i3 )
	SV* c_func
	short s0
	void * p1
	short s2
	int i3
PREINIT:
	void *(*func)(short, void *, short, int);
CODE:
	func   = INT2PTR(void *(*)(short, void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2, i3);
OUTPUT:
	RETVAL

void
nci_vspsi( c_func, s0, p1, s2, i3 )
	SV* c_func
	short s0
	void * p1
	short s2
	int i3
PREINIT:
	void(*func)(short, void *, short, int);
CODE:
	func   = INT2PTR(void(*)(short, void *, short, int), SvIV(c_func) );
	(*func)(s0, p1, s2, i3);

double
nci_dspsi( c_func, s0, p1, s2, i3 )
	SV* c_func
	short s0
	void * p1
	short s2
	int i3
PREINIT:
	double(*func)(short, void *, short, int);
CODE:
	func   = INT2PTR(double(*)(short, void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2, i3);
OUTPUT:
	RETVAL

short
nci_sspsi( c_func, s0, p1, s2, i3 )
	SV* c_func
	short s0
	void * p1
	short s2
	int i3
PREINIT:
	short(*func)(short, void *, short, int);
CODE:
	func   = INT2PTR(short(*)(short, void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2, i3);
OUTPUT:
	RETVAL

float
nci_fspsi( c_func, s0, p1, s2, i3 )
	SV* c_func
	short s0
	void * p1
	short s2
	int i3
PREINIT:
	float(*func)(short, void *, short, int);
CODE:
	func   = INT2PTR(float(*)(short, void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2, i3);
OUTPUT:
	RETVAL

char *
nci_tspsi( c_func, s0, p1, s2, i3 )
	SV* c_func
	short s0
	void * p1
	short s2
	int i3
PREINIT:
	char *(*func)(short, void *, short, int);
CODE:
	func   = INT2PTR(char *(*)(short, void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2, i3);
OUTPUT:
	RETVAL

int
nci_ispsi( c_func, s0, p1, s2, i3 )
	SV* c_func
	short s0
	void * p1
	short s2
	int i3
PREINIT:
	int(*func)(short, void *, short, int);
CODE:
	func   = INT2PTR(int(*)(short, void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, s2, i3);
OUTPUT:
	RETVAL

void *
nci_pfpsi( c_func, f0, p1, s2, i3 )
	SV* c_func
	float f0
	void * p1
	short s2
	int i3
PREINIT:
	void *(*func)(float, void *, short, int);
CODE:
	func   = INT2PTR(void *(*)(float, void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2, i3);
OUTPUT:
	RETVAL

void
nci_vfpsi( c_func, f0, p1, s2, i3 )
	SV* c_func
	float f0
	void * p1
	short s2
	int i3
PREINIT:
	void(*func)(float, void *, short, int);
CODE:
	func   = INT2PTR(void(*)(float, void *, short, int), SvIV(c_func) );
	(*func)(f0, p1, s2, i3);

double
nci_dfpsi( c_func, f0, p1, s2, i3 )
	SV* c_func
	float f0
	void * p1
	short s2
	int i3
PREINIT:
	double(*func)(float, void *, short, int);
CODE:
	func   = INT2PTR(double(*)(float, void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2, i3);
OUTPUT:
	RETVAL

short
nci_sfpsi( c_func, f0, p1, s2, i3 )
	SV* c_func
	float f0
	void * p1
	short s2
	int i3
PREINIT:
	short(*func)(float, void *, short, int);
CODE:
	func   = INT2PTR(short(*)(float, void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2, i3);
OUTPUT:
	RETVAL

float
nci_ffpsi( c_func, f0, p1, s2, i3 )
	SV* c_func
	float f0
	void * p1
	short s2
	int i3
PREINIT:
	float(*func)(float, void *, short, int);
CODE:
	func   = INT2PTR(float(*)(float, void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2, i3);
OUTPUT:
	RETVAL

char *
nci_tfpsi( c_func, f0, p1, s2, i3 )
	SV* c_func
	float f0
	void * p1
	short s2
	int i3
PREINIT:
	char *(*func)(float, void *, short, int);
CODE:
	func   = INT2PTR(char *(*)(float, void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2, i3);
OUTPUT:
	RETVAL

int
nci_ifpsi( c_func, f0, p1, s2, i3 )
	SV* c_func
	float f0
	void * p1
	short s2
	int i3
PREINIT:
	int(*func)(float, void *, short, int);
CODE:
	func   = INT2PTR(int(*)(float, void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, s2, i3);
OUTPUT:
	RETVAL

void *
nci_ptpsi( c_func, t0, p1, s2, i3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	int i3
PREINIT:
	void *(*func)(char *, void *, short, int);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2, i3);
OUTPUT:
	RETVAL

void
nci_vtpsi( c_func, t0, p1, s2, i3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	int i3
PREINIT:
	void(*func)(char *, void *, short, int);
CODE:
	func   = INT2PTR(void(*)(char *, void *, short, int), SvIV(c_func) );
	(*func)(t0, p1, s2, i3);

double
nci_dtpsi( c_func, t0, p1, s2, i3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	int i3
PREINIT:
	double(*func)(char *, void *, short, int);
CODE:
	func   = INT2PTR(double(*)(char *, void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2, i3);
OUTPUT:
	RETVAL

short
nci_stpsi( c_func, t0, p1, s2, i3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	int i3
PREINIT:
	short(*func)(char *, void *, short, int);
CODE:
	func   = INT2PTR(short(*)(char *, void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2, i3);
OUTPUT:
	RETVAL

float
nci_ftpsi( c_func, t0, p1, s2, i3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	int i3
PREINIT:
	float(*func)(char *, void *, short, int);
CODE:
	func   = INT2PTR(float(*)(char *, void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2, i3);
OUTPUT:
	RETVAL

char *
nci_ttpsi( c_func, t0, p1, s2, i3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	int i3
PREINIT:
	char *(*func)(char *, void *, short, int);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2, i3);
OUTPUT:
	RETVAL

int
nci_itpsi( c_func, t0, p1, s2, i3 )
	SV* c_func
	char * t0
	void * p1
	short s2
	int i3
PREINIT:
	int(*func)(char *, void *, short, int);
CODE:
	func   = INT2PTR(int(*)(char *, void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, s2, i3);
OUTPUT:
	RETVAL

void *
nci_pipsi( c_func, i0, p1, s2, i3 )
	SV* c_func
	int i0
	void * p1
	short s2
	int i3
PREINIT:
	void *(*func)(int, void *, short, int);
CODE:
	func   = INT2PTR(void *(*)(int, void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2, i3);
OUTPUT:
	RETVAL

void
nci_vipsi( c_func, i0, p1, s2, i3 )
	SV* c_func
	int i0
	void * p1
	short s2
	int i3
PREINIT:
	void(*func)(int, void *, short, int);
CODE:
	func   = INT2PTR(void(*)(int, void *, short, int), SvIV(c_func) );
	(*func)(i0, p1, s2, i3);

double
nci_dipsi( c_func, i0, p1, s2, i3 )
	SV* c_func
	int i0
	void * p1
	short s2
	int i3
PREINIT:
	double(*func)(int, void *, short, int);
CODE:
	func   = INT2PTR(double(*)(int, void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2, i3);
OUTPUT:
	RETVAL

short
nci_sipsi( c_func, i0, p1, s2, i3 )
	SV* c_func
	int i0
	void * p1
	short s2
	int i3
PREINIT:
	short(*func)(int, void *, short, int);
CODE:
	func   = INT2PTR(short(*)(int, void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2, i3);
OUTPUT:
	RETVAL

float
nci_fipsi( c_func, i0, p1, s2, i3 )
	SV* c_func
	int i0
	void * p1
	short s2
	int i3
PREINIT:
	float(*func)(int, void *, short, int);
CODE:
	func   = INT2PTR(float(*)(int, void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2, i3);
OUTPUT:
	RETVAL

char *
nci_tipsi( c_func, i0, p1, s2, i3 )
	SV* c_func
	int i0
	void * p1
	short s2
	int i3
PREINIT:
	char *(*func)(int, void *, short, int);
CODE:
	func   = INT2PTR(char *(*)(int, void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2, i3);
OUTPUT:
	RETVAL

int
nci_iipsi( c_func, i0, p1, s2, i3 )
	SV* c_func
	int i0
	void * p1
	short s2
	int i3
PREINIT:
	int(*func)(int, void *, short, int);
CODE:
	func   = INT2PTR(int(*)(int, void *, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, s2, i3);
OUTPUT:
	RETVAL

void *
nci_ppdsi( c_func, p0, d1, s2, i3 )
	SV* c_func
	void * p0
	double d1
	short s2
	int i3
PREINIT:
	void *(*func)(void *, double, short, int);
CODE:
	func   = INT2PTR(void *(*)(void *, double, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2, i3);
OUTPUT:
	RETVAL

void
nci_vpdsi( c_func, p0, d1, s2, i3 )
	SV* c_func
	void * p0
	double d1
	short s2
	int i3
PREINIT:
	void(*func)(void *, double, short, int);
CODE:
	func   = INT2PTR(void(*)(void *, double, short, int), SvIV(c_func) );
	(*func)(p0, d1, s2, i3);

double
nci_dpdsi( c_func, p0, d1, s2, i3 )
	SV* c_func
	void * p0
	double d1
	short s2
	int i3
PREINIT:
	double(*func)(void *, double, short, int);
CODE:
	func   = INT2PTR(double(*)(void *, double, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2, i3);
OUTPUT:
	RETVAL

short
nci_spdsi( c_func, p0, d1, s2, i3 )
	SV* c_func
	void * p0
	double d1
	short s2
	int i3
PREINIT:
	short(*func)(void *, double, short, int);
CODE:
	func   = INT2PTR(short(*)(void *, double, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2, i3);
OUTPUT:
	RETVAL

float
nci_fpdsi( c_func, p0, d1, s2, i3 )
	SV* c_func
	void * p0
	double d1
	short s2
	int i3
PREINIT:
	float(*func)(void *, double, short, int);
CODE:
	func   = INT2PTR(float(*)(void *, double, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2, i3);
OUTPUT:
	RETVAL

char *
nci_tpdsi( c_func, p0, d1, s2, i3 )
	SV* c_func
	void * p0
	double d1
	short s2
	int i3
PREINIT:
	char *(*func)(void *, double, short, int);
CODE:
	func   = INT2PTR(char *(*)(void *, double, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2, i3);
OUTPUT:
	RETVAL

int
nci_ipdsi( c_func, p0, d1, s2, i3 )
	SV* c_func
	void * p0
	double d1
	short s2
	int i3
PREINIT:
	int(*func)(void *, double, short, int);
CODE:
	func   = INT2PTR(int(*)(void *, double, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, s2, i3);
OUTPUT:
	RETVAL

void *
nci_pvdsi( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvdsi( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvdsi( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svdsi( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvdsi( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvdsi( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivdsi( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pddsi( c_func, d0, d1, s2, i3 )
	SV* c_func
	double d0
	double d1
	short s2
	int i3
PREINIT:
	void *(*func)(double, double, short, int);
CODE:
	func   = INT2PTR(void *(*)(double, double, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2, i3);
OUTPUT:
	RETVAL

void
nci_vddsi( c_func, d0, d1, s2, i3 )
	SV* c_func
	double d0
	double d1
	short s2
	int i3
PREINIT:
	void(*func)(double, double, short, int);
CODE:
	func   = INT2PTR(void(*)(double, double, short, int), SvIV(c_func) );
	(*func)(d0, d1, s2, i3);

double
nci_dddsi( c_func, d0, d1, s2, i3 )
	SV* c_func
	double d0
	double d1
	short s2
	int i3
PREINIT:
	double(*func)(double, double, short, int);
CODE:
	func   = INT2PTR(double(*)(double, double, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2, i3);
OUTPUT:
	RETVAL

short
nci_sddsi( c_func, d0, d1, s2, i3 )
	SV* c_func
	double d0
	double d1
	short s2
	int i3
PREINIT:
	short(*func)(double, double, short, int);
CODE:
	func   = INT2PTR(short(*)(double, double, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2, i3);
OUTPUT:
	RETVAL

float
nci_fddsi( c_func, d0, d1, s2, i3 )
	SV* c_func
	double d0
	double d1
	short s2
	int i3
PREINIT:
	float(*func)(double, double, short, int);
CODE:
	func   = INT2PTR(float(*)(double, double, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2, i3);
OUTPUT:
	RETVAL

char *
nci_tddsi( c_func, d0, d1, s2, i3 )
	SV* c_func
	double d0
	double d1
	short s2
	int i3
PREINIT:
	char *(*func)(double, double, short, int);
CODE:
	func   = INT2PTR(char *(*)(double, double, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2, i3);
OUTPUT:
	RETVAL

int
nci_iddsi( c_func, d0, d1, s2, i3 )
	SV* c_func
	double d0
	double d1
	short s2
	int i3
PREINIT:
	int(*func)(double, double, short, int);
CODE:
	func   = INT2PTR(int(*)(double, double, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, s2, i3);
OUTPUT:
	RETVAL

void *
nci_psdsi( c_func, s0, d1, s2, i3 )
	SV* c_func
	short s0
	double d1
	short s2
	int i3
PREINIT:
	void *(*func)(short, double, short, int);
CODE:
	func   = INT2PTR(void *(*)(short, double, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2, i3);
OUTPUT:
	RETVAL

void
nci_vsdsi( c_func, s0, d1, s2, i3 )
	SV* c_func
	short s0
	double d1
	short s2
	int i3
PREINIT:
	void(*func)(short, double, short, int);
CODE:
	func   = INT2PTR(void(*)(short, double, short, int), SvIV(c_func) );
	(*func)(s0, d1, s2, i3);

double
nci_dsdsi( c_func, s0, d1, s2, i3 )
	SV* c_func
	short s0
	double d1
	short s2
	int i3
PREINIT:
	double(*func)(short, double, short, int);
CODE:
	func   = INT2PTR(double(*)(short, double, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2, i3);
OUTPUT:
	RETVAL

short
nci_ssdsi( c_func, s0, d1, s2, i3 )
	SV* c_func
	short s0
	double d1
	short s2
	int i3
PREINIT:
	short(*func)(short, double, short, int);
CODE:
	func   = INT2PTR(short(*)(short, double, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2, i3);
OUTPUT:
	RETVAL

float
nci_fsdsi( c_func, s0, d1, s2, i3 )
	SV* c_func
	short s0
	double d1
	short s2
	int i3
PREINIT:
	float(*func)(short, double, short, int);
CODE:
	func   = INT2PTR(float(*)(short, double, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2, i3);
OUTPUT:
	RETVAL

char *
nci_tsdsi( c_func, s0, d1, s2, i3 )
	SV* c_func
	short s0
	double d1
	short s2
	int i3
PREINIT:
	char *(*func)(short, double, short, int);
CODE:
	func   = INT2PTR(char *(*)(short, double, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2, i3);
OUTPUT:
	RETVAL

int
nci_isdsi( c_func, s0, d1, s2, i3 )
	SV* c_func
	short s0
	double d1
	short s2
	int i3
PREINIT:
	int(*func)(short, double, short, int);
CODE:
	func   = INT2PTR(int(*)(short, double, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, s2, i3);
OUTPUT:
	RETVAL

void *
nci_pfdsi( c_func, f0, d1, s2, i3 )
	SV* c_func
	float f0
	double d1
	short s2
	int i3
PREINIT:
	void *(*func)(float, double, short, int);
CODE:
	func   = INT2PTR(void *(*)(float, double, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2, i3);
OUTPUT:
	RETVAL

void
nci_vfdsi( c_func, f0, d1, s2, i3 )
	SV* c_func
	float f0
	double d1
	short s2
	int i3
PREINIT:
	void(*func)(float, double, short, int);
CODE:
	func   = INT2PTR(void(*)(float, double, short, int), SvIV(c_func) );
	(*func)(f0, d1, s2, i3);

double
nci_dfdsi( c_func, f0, d1, s2, i3 )
	SV* c_func
	float f0
	double d1
	short s2
	int i3
PREINIT:
	double(*func)(float, double, short, int);
CODE:
	func   = INT2PTR(double(*)(float, double, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2, i3);
OUTPUT:
	RETVAL

short
nci_sfdsi( c_func, f0, d1, s2, i3 )
	SV* c_func
	float f0
	double d1
	short s2
	int i3
PREINIT:
	short(*func)(float, double, short, int);
CODE:
	func   = INT2PTR(short(*)(float, double, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2, i3);
OUTPUT:
	RETVAL

float
nci_ffdsi( c_func, f0, d1, s2, i3 )
	SV* c_func
	float f0
	double d1
	short s2
	int i3
PREINIT:
	float(*func)(float, double, short, int);
CODE:
	func   = INT2PTR(float(*)(float, double, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2, i3);
OUTPUT:
	RETVAL

char *
nci_tfdsi( c_func, f0, d1, s2, i3 )
	SV* c_func
	float f0
	double d1
	short s2
	int i3
PREINIT:
	char *(*func)(float, double, short, int);
CODE:
	func   = INT2PTR(char *(*)(float, double, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2, i3);
OUTPUT:
	RETVAL

int
nci_ifdsi( c_func, f0, d1, s2, i3 )
	SV* c_func
	float f0
	double d1
	short s2
	int i3
PREINIT:
	int(*func)(float, double, short, int);
CODE:
	func   = INT2PTR(int(*)(float, double, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, s2, i3);
OUTPUT:
	RETVAL

void *
nci_ptdsi( c_func, t0, d1, s2, i3 )
	SV* c_func
	char * t0
	double d1
	short s2
	int i3
PREINIT:
	void *(*func)(char *, double, short, int);
CODE:
	func   = INT2PTR(void *(*)(char *, double, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2, i3);
OUTPUT:
	RETVAL

void
nci_vtdsi( c_func, t0, d1, s2, i3 )
	SV* c_func
	char * t0
	double d1
	short s2
	int i3
PREINIT:
	void(*func)(char *, double, short, int);
CODE:
	func   = INT2PTR(void(*)(char *, double, short, int), SvIV(c_func) );
	(*func)(t0, d1, s2, i3);

double
nci_dtdsi( c_func, t0, d1, s2, i3 )
	SV* c_func
	char * t0
	double d1
	short s2
	int i3
PREINIT:
	double(*func)(char *, double, short, int);
CODE:
	func   = INT2PTR(double(*)(char *, double, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2, i3);
OUTPUT:
	RETVAL

short
nci_stdsi( c_func, t0, d1, s2, i3 )
	SV* c_func
	char * t0
	double d1
	short s2
	int i3
PREINIT:
	short(*func)(char *, double, short, int);
CODE:
	func   = INT2PTR(short(*)(char *, double, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2, i3);
OUTPUT:
	RETVAL

float
nci_ftdsi( c_func, t0, d1, s2, i3 )
	SV* c_func
	char * t0
	double d1
	short s2
	int i3
PREINIT:
	float(*func)(char *, double, short, int);
CODE:
	func   = INT2PTR(float(*)(char *, double, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2, i3);
OUTPUT:
	RETVAL

char *
nci_ttdsi( c_func, t0, d1, s2, i3 )
	SV* c_func
	char * t0
	double d1
	short s2
	int i3
PREINIT:
	char *(*func)(char *, double, short, int);
CODE:
	func   = INT2PTR(char *(*)(char *, double, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2, i3);
OUTPUT:
	RETVAL

int
nci_itdsi( c_func, t0, d1, s2, i3 )
	SV* c_func
	char * t0
	double d1
	short s2
	int i3
PREINIT:
	int(*func)(char *, double, short, int);
CODE:
	func   = INT2PTR(int(*)(char *, double, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, s2, i3);
OUTPUT:
	RETVAL

void *
nci_pidsi( c_func, i0, d1, s2, i3 )
	SV* c_func
	int i0
	double d1
	short s2
	int i3
PREINIT:
	void *(*func)(int, double, short, int);
CODE:
	func   = INT2PTR(void *(*)(int, double, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2, i3);
OUTPUT:
	RETVAL

void
nci_vidsi( c_func, i0, d1, s2, i3 )
	SV* c_func
	int i0
	double d1
	short s2
	int i3
PREINIT:
	void(*func)(int, double, short, int);
CODE:
	func   = INT2PTR(void(*)(int, double, short, int), SvIV(c_func) );
	(*func)(i0, d1, s2, i3);

double
nci_didsi( c_func, i0, d1, s2, i3 )
	SV* c_func
	int i0
	double d1
	short s2
	int i3
PREINIT:
	double(*func)(int, double, short, int);
CODE:
	func   = INT2PTR(double(*)(int, double, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2, i3);
OUTPUT:
	RETVAL

short
nci_sidsi( c_func, i0, d1, s2, i3 )
	SV* c_func
	int i0
	double d1
	short s2
	int i3
PREINIT:
	short(*func)(int, double, short, int);
CODE:
	func   = INT2PTR(short(*)(int, double, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2, i3);
OUTPUT:
	RETVAL

float
nci_fidsi( c_func, i0, d1, s2, i3 )
	SV* c_func
	int i0
	double d1
	short s2
	int i3
PREINIT:
	float(*func)(int, double, short, int);
CODE:
	func   = INT2PTR(float(*)(int, double, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2, i3);
OUTPUT:
	RETVAL

char *
nci_tidsi( c_func, i0, d1, s2, i3 )
	SV* c_func
	int i0
	double d1
	short s2
	int i3
PREINIT:
	char *(*func)(int, double, short, int);
CODE:
	func   = INT2PTR(char *(*)(int, double, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2, i3);
OUTPUT:
	RETVAL

int
nci_iidsi( c_func, i0, d1, s2, i3 )
	SV* c_func
	int i0
	double d1
	short s2
	int i3
PREINIT:
	int(*func)(int, double, short, int);
CODE:
	func   = INT2PTR(int(*)(int, double, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, s2, i3);
OUTPUT:
	RETVAL

void *
nci_ppssi( c_func, p0, s1, s2, i3 )
	SV* c_func
	void * p0
	short s1
	short s2
	int i3
PREINIT:
	void *(*func)(void *, short, short, int);
CODE:
	func   = INT2PTR(void *(*)(void *, short, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2, i3);
OUTPUT:
	RETVAL

void
nci_vpssi( c_func, p0, s1, s2, i3 )
	SV* c_func
	void * p0
	short s1
	short s2
	int i3
PREINIT:
	void(*func)(void *, short, short, int);
CODE:
	func   = INT2PTR(void(*)(void *, short, short, int), SvIV(c_func) );
	(*func)(p0, s1, s2, i3);

double
nci_dpssi( c_func, p0, s1, s2, i3 )
	SV* c_func
	void * p0
	short s1
	short s2
	int i3
PREINIT:
	double(*func)(void *, short, short, int);
CODE:
	func   = INT2PTR(double(*)(void *, short, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2, i3);
OUTPUT:
	RETVAL

short
nci_spssi( c_func, p0, s1, s2, i3 )
	SV* c_func
	void * p0
	short s1
	short s2
	int i3
PREINIT:
	short(*func)(void *, short, short, int);
CODE:
	func   = INT2PTR(short(*)(void *, short, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2, i3);
OUTPUT:
	RETVAL

float
nci_fpssi( c_func, p0, s1, s2, i3 )
	SV* c_func
	void * p0
	short s1
	short s2
	int i3
PREINIT:
	float(*func)(void *, short, short, int);
CODE:
	func   = INT2PTR(float(*)(void *, short, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2, i3);
OUTPUT:
	RETVAL

char *
nci_tpssi( c_func, p0, s1, s2, i3 )
	SV* c_func
	void * p0
	short s1
	short s2
	int i3
PREINIT:
	char *(*func)(void *, short, short, int);
CODE:
	func   = INT2PTR(char *(*)(void *, short, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2, i3);
OUTPUT:
	RETVAL

int
nci_ipssi( c_func, p0, s1, s2, i3 )
	SV* c_func
	void * p0
	short s1
	short s2
	int i3
PREINIT:
	int(*func)(void *, short, short, int);
CODE:
	func   = INT2PTR(int(*)(void *, short, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, s2, i3);
OUTPUT:
	RETVAL

void *
nci_pvssi( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvssi( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvssi( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svssi( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvssi( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvssi( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivssi( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdssi( c_func, d0, s1, s2, i3 )
	SV* c_func
	double d0
	short s1
	short s2
	int i3
PREINIT:
	void *(*func)(double, short, short, int);
CODE:
	func   = INT2PTR(void *(*)(double, short, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2, i3);
OUTPUT:
	RETVAL

void
nci_vdssi( c_func, d0, s1, s2, i3 )
	SV* c_func
	double d0
	short s1
	short s2
	int i3
PREINIT:
	void(*func)(double, short, short, int);
CODE:
	func   = INT2PTR(void(*)(double, short, short, int), SvIV(c_func) );
	(*func)(d0, s1, s2, i3);

double
nci_ddssi( c_func, d0, s1, s2, i3 )
	SV* c_func
	double d0
	short s1
	short s2
	int i3
PREINIT:
	double(*func)(double, short, short, int);
CODE:
	func   = INT2PTR(double(*)(double, short, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2, i3);
OUTPUT:
	RETVAL

short
nci_sdssi( c_func, d0, s1, s2, i3 )
	SV* c_func
	double d0
	short s1
	short s2
	int i3
PREINIT:
	short(*func)(double, short, short, int);
CODE:
	func   = INT2PTR(short(*)(double, short, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2, i3);
OUTPUT:
	RETVAL

float
nci_fdssi( c_func, d0, s1, s2, i3 )
	SV* c_func
	double d0
	short s1
	short s2
	int i3
PREINIT:
	float(*func)(double, short, short, int);
CODE:
	func   = INT2PTR(float(*)(double, short, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2, i3);
OUTPUT:
	RETVAL

char *
nci_tdssi( c_func, d0, s1, s2, i3 )
	SV* c_func
	double d0
	short s1
	short s2
	int i3
PREINIT:
	char *(*func)(double, short, short, int);
CODE:
	func   = INT2PTR(char *(*)(double, short, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2, i3);
OUTPUT:
	RETVAL

int
nci_idssi( c_func, d0, s1, s2, i3 )
	SV* c_func
	double d0
	short s1
	short s2
	int i3
PREINIT:
	int(*func)(double, short, short, int);
CODE:
	func   = INT2PTR(int(*)(double, short, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, s2, i3);
OUTPUT:
	RETVAL

void *
nci_psssi( c_func, s0, s1, s2, i3 )
	SV* c_func
	short s0
	short s1
	short s2
	int i3
PREINIT:
	void *(*func)(short, short, short, int);
CODE:
	func   = INT2PTR(void *(*)(short, short, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2, i3);
OUTPUT:
	RETVAL

void
nci_vsssi( c_func, s0, s1, s2, i3 )
	SV* c_func
	short s0
	short s1
	short s2
	int i3
PREINIT:
	void(*func)(short, short, short, int);
CODE:
	func   = INT2PTR(void(*)(short, short, short, int), SvIV(c_func) );
	(*func)(s0, s1, s2, i3);

double
nci_dsssi( c_func, s0, s1, s2, i3 )
	SV* c_func
	short s0
	short s1
	short s2
	int i3
PREINIT:
	double(*func)(short, short, short, int);
CODE:
	func   = INT2PTR(double(*)(short, short, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2, i3);
OUTPUT:
	RETVAL

short
nci_ssssi( c_func, s0, s1, s2, i3 )
	SV* c_func
	short s0
	short s1
	short s2
	int i3
PREINIT:
	short(*func)(short, short, short, int);
CODE:
	func   = INT2PTR(short(*)(short, short, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2, i3);
OUTPUT:
	RETVAL

float
nci_fsssi( c_func, s0, s1, s2, i3 )
	SV* c_func
	short s0
	short s1
	short s2
	int i3
PREINIT:
	float(*func)(short, short, short, int);
CODE:
	func   = INT2PTR(float(*)(short, short, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2, i3);
OUTPUT:
	RETVAL

char *
nci_tsssi( c_func, s0, s1, s2, i3 )
	SV* c_func
	short s0
	short s1
	short s2
	int i3
PREINIT:
	char *(*func)(short, short, short, int);
CODE:
	func   = INT2PTR(char *(*)(short, short, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2, i3);
OUTPUT:
	RETVAL

int
nci_isssi( c_func, s0, s1, s2, i3 )
	SV* c_func
	short s0
	short s1
	short s2
	int i3
PREINIT:
	int(*func)(short, short, short, int);
CODE:
	func   = INT2PTR(int(*)(short, short, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, s2, i3);
OUTPUT:
	RETVAL

void *
nci_pfssi( c_func, f0, s1, s2, i3 )
	SV* c_func
	float f0
	short s1
	short s2
	int i3
PREINIT:
	void *(*func)(float, short, short, int);
CODE:
	func   = INT2PTR(void *(*)(float, short, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2, i3);
OUTPUT:
	RETVAL

void
nci_vfssi( c_func, f0, s1, s2, i3 )
	SV* c_func
	float f0
	short s1
	short s2
	int i3
PREINIT:
	void(*func)(float, short, short, int);
CODE:
	func   = INT2PTR(void(*)(float, short, short, int), SvIV(c_func) );
	(*func)(f0, s1, s2, i3);

double
nci_dfssi( c_func, f0, s1, s2, i3 )
	SV* c_func
	float f0
	short s1
	short s2
	int i3
PREINIT:
	double(*func)(float, short, short, int);
CODE:
	func   = INT2PTR(double(*)(float, short, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2, i3);
OUTPUT:
	RETVAL

short
nci_sfssi( c_func, f0, s1, s2, i3 )
	SV* c_func
	float f0
	short s1
	short s2
	int i3
PREINIT:
	short(*func)(float, short, short, int);
CODE:
	func   = INT2PTR(short(*)(float, short, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2, i3);
OUTPUT:
	RETVAL

float
nci_ffssi( c_func, f0, s1, s2, i3 )
	SV* c_func
	float f0
	short s1
	short s2
	int i3
PREINIT:
	float(*func)(float, short, short, int);
CODE:
	func   = INT2PTR(float(*)(float, short, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2, i3);
OUTPUT:
	RETVAL

char *
nci_tfssi( c_func, f0, s1, s2, i3 )
	SV* c_func
	float f0
	short s1
	short s2
	int i3
PREINIT:
	char *(*func)(float, short, short, int);
CODE:
	func   = INT2PTR(char *(*)(float, short, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2, i3);
OUTPUT:
	RETVAL

int
nci_ifssi( c_func, f0, s1, s2, i3 )
	SV* c_func
	float f0
	short s1
	short s2
	int i3
PREINIT:
	int(*func)(float, short, short, int);
CODE:
	func   = INT2PTR(int(*)(float, short, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, s2, i3);
OUTPUT:
	RETVAL

void *
nci_ptssi( c_func, t0, s1, s2, i3 )
	SV* c_func
	char * t0
	short s1
	short s2
	int i3
PREINIT:
	void *(*func)(char *, short, short, int);
CODE:
	func   = INT2PTR(void *(*)(char *, short, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2, i3);
OUTPUT:
	RETVAL

void
nci_vtssi( c_func, t0, s1, s2, i3 )
	SV* c_func
	char * t0
	short s1
	short s2
	int i3
PREINIT:
	void(*func)(char *, short, short, int);
CODE:
	func   = INT2PTR(void(*)(char *, short, short, int), SvIV(c_func) );
	(*func)(t0, s1, s2, i3);

double
nci_dtssi( c_func, t0, s1, s2, i3 )
	SV* c_func
	char * t0
	short s1
	short s2
	int i3
PREINIT:
	double(*func)(char *, short, short, int);
CODE:
	func   = INT2PTR(double(*)(char *, short, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2, i3);
OUTPUT:
	RETVAL

short
nci_stssi( c_func, t0, s1, s2, i3 )
	SV* c_func
	char * t0
	short s1
	short s2
	int i3
PREINIT:
	short(*func)(char *, short, short, int);
CODE:
	func   = INT2PTR(short(*)(char *, short, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2, i3);
OUTPUT:
	RETVAL

float
nci_ftssi( c_func, t0, s1, s2, i3 )
	SV* c_func
	char * t0
	short s1
	short s2
	int i3
PREINIT:
	float(*func)(char *, short, short, int);
CODE:
	func   = INT2PTR(float(*)(char *, short, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2, i3);
OUTPUT:
	RETVAL

char *
nci_ttssi( c_func, t0, s1, s2, i3 )
	SV* c_func
	char * t0
	short s1
	short s2
	int i3
PREINIT:
	char *(*func)(char *, short, short, int);
CODE:
	func   = INT2PTR(char *(*)(char *, short, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2, i3);
OUTPUT:
	RETVAL

int
nci_itssi( c_func, t0, s1, s2, i3 )
	SV* c_func
	char * t0
	short s1
	short s2
	int i3
PREINIT:
	int(*func)(char *, short, short, int);
CODE:
	func   = INT2PTR(int(*)(char *, short, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, s2, i3);
OUTPUT:
	RETVAL

void *
nci_pissi( c_func, i0, s1, s2, i3 )
	SV* c_func
	int i0
	short s1
	short s2
	int i3
PREINIT:
	void *(*func)(int, short, short, int);
CODE:
	func   = INT2PTR(void *(*)(int, short, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2, i3);
OUTPUT:
	RETVAL

void
nci_vissi( c_func, i0, s1, s2, i3 )
	SV* c_func
	int i0
	short s1
	short s2
	int i3
PREINIT:
	void(*func)(int, short, short, int);
CODE:
	func   = INT2PTR(void(*)(int, short, short, int), SvIV(c_func) );
	(*func)(i0, s1, s2, i3);

double
nci_dissi( c_func, i0, s1, s2, i3 )
	SV* c_func
	int i0
	short s1
	short s2
	int i3
PREINIT:
	double(*func)(int, short, short, int);
CODE:
	func   = INT2PTR(double(*)(int, short, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2, i3);
OUTPUT:
	RETVAL

short
nci_sissi( c_func, i0, s1, s2, i3 )
	SV* c_func
	int i0
	short s1
	short s2
	int i3
PREINIT:
	short(*func)(int, short, short, int);
CODE:
	func   = INT2PTR(short(*)(int, short, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2, i3);
OUTPUT:
	RETVAL

float
nci_fissi( c_func, i0, s1, s2, i3 )
	SV* c_func
	int i0
	short s1
	short s2
	int i3
PREINIT:
	float(*func)(int, short, short, int);
CODE:
	func   = INT2PTR(float(*)(int, short, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2, i3);
OUTPUT:
	RETVAL

char *
nci_tissi( c_func, i0, s1, s2, i3 )
	SV* c_func
	int i0
	short s1
	short s2
	int i3
PREINIT:
	char *(*func)(int, short, short, int);
CODE:
	func   = INT2PTR(char *(*)(int, short, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2, i3);
OUTPUT:
	RETVAL

int
nci_iissi( c_func, i0, s1, s2, i3 )
	SV* c_func
	int i0
	short s1
	short s2
	int i3
PREINIT:
	int(*func)(int, short, short, int);
CODE:
	func   = INT2PTR(int(*)(int, short, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, s2, i3);
OUTPUT:
	RETVAL

void *
nci_ppfsi( c_func, p0, f1, s2, i3 )
	SV* c_func
	void * p0
	float f1
	short s2
	int i3
PREINIT:
	void *(*func)(void *, float, short, int);
CODE:
	func   = INT2PTR(void *(*)(void *, float, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2, i3);
OUTPUT:
	RETVAL

void
nci_vpfsi( c_func, p0, f1, s2, i3 )
	SV* c_func
	void * p0
	float f1
	short s2
	int i3
PREINIT:
	void(*func)(void *, float, short, int);
CODE:
	func   = INT2PTR(void(*)(void *, float, short, int), SvIV(c_func) );
	(*func)(p0, f1, s2, i3);

double
nci_dpfsi( c_func, p0, f1, s2, i3 )
	SV* c_func
	void * p0
	float f1
	short s2
	int i3
PREINIT:
	double(*func)(void *, float, short, int);
CODE:
	func   = INT2PTR(double(*)(void *, float, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2, i3);
OUTPUT:
	RETVAL

short
nci_spfsi( c_func, p0, f1, s2, i3 )
	SV* c_func
	void * p0
	float f1
	short s2
	int i3
PREINIT:
	short(*func)(void *, float, short, int);
CODE:
	func   = INT2PTR(short(*)(void *, float, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2, i3);
OUTPUT:
	RETVAL

float
nci_fpfsi( c_func, p0, f1, s2, i3 )
	SV* c_func
	void * p0
	float f1
	short s2
	int i3
PREINIT:
	float(*func)(void *, float, short, int);
CODE:
	func   = INT2PTR(float(*)(void *, float, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2, i3);
OUTPUT:
	RETVAL

char *
nci_tpfsi( c_func, p0, f1, s2, i3 )
	SV* c_func
	void * p0
	float f1
	short s2
	int i3
PREINIT:
	char *(*func)(void *, float, short, int);
CODE:
	func   = INT2PTR(char *(*)(void *, float, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2, i3);
OUTPUT:
	RETVAL

int
nci_ipfsi( c_func, p0, f1, s2, i3 )
	SV* c_func
	void * p0
	float f1
	short s2
	int i3
PREINIT:
	int(*func)(void *, float, short, int);
CODE:
	func   = INT2PTR(int(*)(void *, float, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, s2, i3);
OUTPUT:
	RETVAL

void *
nci_pvfsi( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvfsi( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvfsi( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svfsi( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvfsi( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvfsi( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivfsi( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdfsi( c_func, d0, f1, s2, i3 )
	SV* c_func
	double d0
	float f1
	short s2
	int i3
PREINIT:
	void *(*func)(double, float, short, int);
CODE:
	func   = INT2PTR(void *(*)(double, float, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2, i3);
OUTPUT:
	RETVAL

void
nci_vdfsi( c_func, d0, f1, s2, i3 )
	SV* c_func
	double d0
	float f1
	short s2
	int i3
PREINIT:
	void(*func)(double, float, short, int);
CODE:
	func   = INT2PTR(void(*)(double, float, short, int), SvIV(c_func) );
	(*func)(d0, f1, s2, i3);

double
nci_ddfsi( c_func, d0, f1, s2, i3 )
	SV* c_func
	double d0
	float f1
	short s2
	int i3
PREINIT:
	double(*func)(double, float, short, int);
CODE:
	func   = INT2PTR(double(*)(double, float, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2, i3);
OUTPUT:
	RETVAL

short
nci_sdfsi( c_func, d0, f1, s2, i3 )
	SV* c_func
	double d0
	float f1
	short s2
	int i3
PREINIT:
	short(*func)(double, float, short, int);
CODE:
	func   = INT2PTR(short(*)(double, float, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2, i3);
OUTPUT:
	RETVAL

float
nci_fdfsi( c_func, d0, f1, s2, i3 )
	SV* c_func
	double d0
	float f1
	short s2
	int i3
PREINIT:
	float(*func)(double, float, short, int);
CODE:
	func   = INT2PTR(float(*)(double, float, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2, i3);
OUTPUT:
	RETVAL

char *
nci_tdfsi( c_func, d0, f1, s2, i3 )
	SV* c_func
	double d0
	float f1
	short s2
	int i3
PREINIT:
	char *(*func)(double, float, short, int);
CODE:
	func   = INT2PTR(char *(*)(double, float, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2, i3);
OUTPUT:
	RETVAL

int
nci_idfsi( c_func, d0, f1, s2, i3 )
	SV* c_func
	double d0
	float f1
	short s2
	int i3
PREINIT:
	int(*func)(double, float, short, int);
CODE:
	func   = INT2PTR(int(*)(double, float, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, s2, i3);
OUTPUT:
	RETVAL

void *
nci_psfsi( c_func, s0, f1, s2, i3 )
	SV* c_func
	short s0
	float f1
	short s2
	int i3
PREINIT:
	void *(*func)(short, float, short, int);
CODE:
	func   = INT2PTR(void *(*)(short, float, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2, i3);
OUTPUT:
	RETVAL

void
nci_vsfsi( c_func, s0, f1, s2, i3 )
	SV* c_func
	short s0
	float f1
	short s2
	int i3
PREINIT:
	void(*func)(short, float, short, int);
CODE:
	func   = INT2PTR(void(*)(short, float, short, int), SvIV(c_func) );
	(*func)(s0, f1, s2, i3);

double
nci_dsfsi( c_func, s0, f1, s2, i3 )
	SV* c_func
	short s0
	float f1
	short s2
	int i3
PREINIT:
	double(*func)(short, float, short, int);
CODE:
	func   = INT2PTR(double(*)(short, float, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2, i3);
OUTPUT:
	RETVAL

short
nci_ssfsi( c_func, s0, f1, s2, i3 )
	SV* c_func
	short s0
	float f1
	short s2
	int i3
PREINIT:
	short(*func)(short, float, short, int);
CODE:
	func   = INT2PTR(short(*)(short, float, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2, i3);
OUTPUT:
	RETVAL

float
nci_fsfsi( c_func, s0, f1, s2, i3 )
	SV* c_func
	short s0
	float f1
	short s2
	int i3
PREINIT:
	float(*func)(short, float, short, int);
CODE:
	func   = INT2PTR(float(*)(short, float, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2, i3);
OUTPUT:
	RETVAL

char *
nci_tsfsi( c_func, s0, f1, s2, i3 )
	SV* c_func
	short s0
	float f1
	short s2
	int i3
PREINIT:
	char *(*func)(short, float, short, int);
CODE:
	func   = INT2PTR(char *(*)(short, float, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2, i3);
OUTPUT:
	RETVAL

int
nci_isfsi( c_func, s0, f1, s2, i3 )
	SV* c_func
	short s0
	float f1
	short s2
	int i3
PREINIT:
	int(*func)(short, float, short, int);
CODE:
	func   = INT2PTR(int(*)(short, float, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, s2, i3);
OUTPUT:
	RETVAL

void *
nci_pffsi( c_func, f0, f1, s2, i3 )
	SV* c_func
	float f0
	float f1
	short s2
	int i3
PREINIT:
	void *(*func)(float, float, short, int);
CODE:
	func   = INT2PTR(void *(*)(float, float, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2, i3);
OUTPUT:
	RETVAL

void
nci_vffsi( c_func, f0, f1, s2, i3 )
	SV* c_func
	float f0
	float f1
	short s2
	int i3
PREINIT:
	void(*func)(float, float, short, int);
CODE:
	func   = INT2PTR(void(*)(float, float, short, int), SvIV(c_func) );
	(*func)(f0, f1, s2, i3);

double
nci_dffsi( c_func, f0, f1, s2, i3 )
	SV* c_func
	float f0
	float f1
	short s2
	int i3
PREINIT:
	double(*func)(float, float, short, int);
CODE:
	func   = INT2PTR(double(*)(float, float, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2, i3);
OUTPUT:
	RETVAL

short
nci_sffsi( c_func, f0, f1, s2, i3 )
	SV* c_func
	float f0
	float f1
	short s2
	int i3
PREINIT:
	short(*func)(float, float, short, int);
CODE:
	func   = INT2PTR(short(*)(float, float, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2, i3);
OUTPUT:
	RETVAL

float
nci_fffsi( c_func, f0, f1, s2, i3 )
	SV* c_func
	float f0
	float f1
	short s2
	int i3
PREINIT:
	float(*func)(float, float, short, int);
CODE:
	func   = INT2PTR(float(*)(float, float, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2, i3);
OUTPUT:
	RETVAL

char *
nci_tffsi( c_func, f0, f1, s2, i3 )
	SV* c_func
	float f0
	float f1
	short s2
	int i3
PREINIT:
	char *(*func)(float, float, short, int);
CODE:
	func   = INT2PTR(char *(*)(float, float, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2, i3);
OUTPUT:
	RETVAL

int
nci_iffsi( c_func, f0, f1, s2, i3 )
	SV* c_func
	float f0
	float f1
	short s2
	int i3
PREINIT:
	int(*func)(float, float, short, int);
CODE:
	func   = INT2PTR(int(*)(float, float, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, s2, i3);
OUTPUT:
	RETVAL

void *
nci_ptfsi( c_func, t0, f1, s2, i3 )
	SV* c_func
	char * t0
	float f1
	short s2
	int i3
PREINIT:
	void *(*func)(char *, float, short, int);
CODE:
	func   = INT2PTR(void *(*)(char *, float, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2, i3);
OUTPUT:
	RETVAL

void
nci_vtfsi( c_func, t0, f1, s2, i3 )
	SV* c_func
	char * t0
	float f1
	short s2
	int i3
PREINIT:
	void(*func)(char *, float, short, int);
CODE:
	func   = INT2PTR(void(*)(char *, float, short, int), SvIV(c_func) );
	(*func)(t0, f1, s2, i3);

double
nci_dtfsi( c_func, t0, f1, s2, i3 )
	SV* c_func
	char * t0
	float f1
	short s2
	int i3
PREINIT:
	double(*func)(char *, float, short, int);
CODE:
	func   = INT2PTR(double(*)(char *, float, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2, i3);
OUTPUT:
	RETVAL

short
nci_stfsi( c_func, t0, f1, s2, i3 )
	SV* c_func
	char * t0
	float f1
	short s2
	int i3
PREINIT:
	short(*func)(char *, float, short, int);
CODE:
	func   = INT2PTR(short(*)(char *, float, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2, i3);
OUTPUT:
	RETVAL

float
nci_ftfsi( c_func, t0, f1, s2, i3 )
	SV* c_func
	char * t0
	float f1
	short s2
	int i3
PREINIT:
	float(*func)(char *, float, short, int);
CODE:
	func   = INT2PTR(float(*)(char *, float, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2, i3);
OUTPUT:
	RETVAL

char *
nci_ttfsi( c_func, t0, f1, s2, i3 )
	SV* c_func
	char * t0
	float f1
	short s2
	int i3
PREINIT:
	char *(*func)(char *, float, short, int);
CODE:
	func   = INT2PTR(char *(*)(char *, float, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2, i3);
OUTPUT:
	RETVAL

int
nci_itfsi( c_func, t0, f1, s2, i3 )
	SV* c_func
	char * t0
	float f1
	short s2
	int i3
PREINIT:
	int(*func)(char *, float, short, int);
CODE:
	func   = INT2PTR(int(*)(char *, float, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, s2, i3);
OUTPUT:
	RETVAL

void *
nci_pifsi( c_func, i0, f1, s2, i3 )
	SV* c_func
	int i0
	float f1
	short s2
	int i3
PREINIT:
	void *(*func)(int, float, short, int);
CODE:
	func   = INT2PTR(void *(*)(int, float, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2, i3);
OUTPUT:
	RETVAL

void
nci_vifsi( c_func, i0, f1, s2, i3 )
	SV* c_func
	int i0
	float f1
	short s2
	int i3
PREINIT:
	void(*func)(int, float, short, int);
CODE:
	func   = INT2PTR(void(*)(int, float, short, int), SvIV(c_func) );
	(*func)(i0, f1, s2, i3);

double
nci_difsi( c_func, i0, f1, s2, i3 )
	SV* c_func
	int i0
	float f1
	short s2
	int i3
PREINIT:
	double(*func)(int, float, short, int);
CODE:
	func   = INT2PTR(double(*)(int, float, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2, i3);
OUTPUT:
	RETVAL

short
nci_sifsi( c_func, i0, f1, s2, i3 )
	SV* c_func
	int i0
	float f1
	short s2
	int i3
PREINIT:
	short(*func)(int, float, short, int);
CODE:
	func   = INT2PTR(short(*)(int, float, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2, i3);
OUTPUT:
	RETVAL

float
nci_fifsi( c_func, i0, f1, s2, i3 )
	SV* c_func
	int i0
	float f1
	short s2
	int i3
PREINIT:
	float(*func)(int, float, short, int);
CODE:
	func   = INT2PTR(float(*)(int, float, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2, i3);
OUTPUT:
	RETVAL

char *
nci_tifsi( c_func, i0, f1, s2, i3 )
	SV* c_func
	int i0
	float f1
	short s2
	int i3
PREINIT:
	char *(*func)(int, float, short, int);
CODE:
	func   = INT2PTR(char *(*)(int, float, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2, i3);
OUTPUT:
	RETVAL

int
nci_iifsi( c_func, i0, f1, s2, i3 )
	SV* c_func
	int i0
	float f1
	short s2
	int i3
PREINIT:
	int(*func)(int, float, short, int);
CODE:
	func   = INT2PTR(int(*)(int, float, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, s2, i3);
OUTPUT:
	RETVAL

void *
nci_pptsi( c_func, p0, t1, s2, i3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	int i3
PREINIT:
	void *(*func)(void *, char *, short, int);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2, i3);
OUTPUT:
	RETVAL

void
nci_vptsi( c_func, p0, t1, s2, i3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	int i3
PREINIT:
	void(*func)(void *, char *, short, int);
CODE:
	func   = INT2PTR(void(*)(void *, char *, short, int), SvIV(c_func) );
	(*func)(p0, t1, s2, i3);

double
nci_dptsi( c_func, p0, t1, s2, i3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	int i3
PREINIT:
	double(*func)(void *, char *, short, int);
CODE:
	func   = INT2PTR(double(*)(void *, char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2, i3);
OUTPUT:
	RETVAL

short
nci_sptsi( c_func, p0, t1, s2, i3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	int i3
PREINIT:
	short(*func)(void *, char *, short, int);
CODE:
	func   = INT2PTR(short(*)(void *, char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2, i3);
OUTPUT:
	RETVAL

float
nci_fptsi( c_func, p0, t1, s2, i3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	int i3
PREINIT:
	float(*func)(void *, char *, short, int);
CODE:
	func   = INT2PTR(float(*)(void *, char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2, i3);
OUTPUT:
	RETVAL

char *
nci_tptsi( c_func, p0, t1, s2, i3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	int i3
PREINIT:
	char *(*func)(void *, char *, short, int);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2, i3);
OUTPUT:
	RETVAL

int
nci_iptsi( c_func, p0, t1, s2, i3 )
	SV* c_func
	void * p0
	char * t1
	short s2
	int i3
PREINIT:
	int(*func)(void *, char *, short, int);
CODE:
	func   = INT2PTR(int(*)(void *, char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, s2, i3);
OUTPUT:
	RETVAL

void *
nci_pvtsi( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvtsi( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvtsi( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svtsi( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvtsi( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvtsi( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivtsi( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdtsi( c_func, d0, t1, s2, i3 )
	SV* c_func
	double d0
	char * t1
	short s2
	int i3
PREINIT:
	void *(*func)(double, char *, short, int);
CODE:
	func   = INT2PTR(void *(*)(double, char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2, i3);
OUTPUT:
	RETVAL

void
nci_vdtsi( c_func, d0, t1, s2, i3 )
	SV* c_func
	double d0
	char * t1
	short s2
	int i3
PREINIT:
	void(*func)(double, char *, short, int);
CODE:
	func   = INT2PTR(void(*)(double, char *, short, int), SvIV(c_func) );
	(*func)(d0, t1, s2, i3);

double
nci_ddtsi( c_func, d0, t1, s2, i3 )
	SV* c_func
	double d0
	char * t1
	short s2
	int i3
PREINIT:
	double(*func)(double, char *, short, int);
CODE:
	func   = INT2PTR(double(*)(double, char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2, i3);
OUTPUT:
	RETVAL

short
nci_sdtsi( c_func, d0, t1, s2, i3 )
	SV* c_func
	double d0
	char * t1
	short s2
	int i3
PREINIT:
	short(*func)(double, char *, short, int);
CODE:
	func   = INT2PTR(short(*)(double, char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2, i3);
OUTPUT:
	RETVAL

float
nci_fdtsi( c_func, d0, t1, s2, i3 )
	SV* c_func
	double d0
	char * t1
	short s2
	int i3
PREINIT:
	float(*func)(double, char *, short, int);
CODE:
	func   = INT2PTR(float(*)(double, char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2, i3);
OUTPUT:
	RETVAL

char *
nci_tdtsi( c_func, d0, t1, s2, i3 )
	SV* c_func
	double d0
	char * t1
	short s2
	int i3
PREINIT:
	char *(*func)(double, char *, short, int);
CODE:
	func   = INT2PTR(char *(*)(double, char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2, i3);
OUTPUT:
	RETVAL

int
nci_idtsi( c_func, d0, t1, s2, i3 )
	SV* c_func
	double d0
	char * t1
	short s2
	int i3
PREINIT:
	int(*func)(double, char *, short, int);
CODE:
	func   = INT2PTR(int(*)(double, char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, s2, i3);
OUTPUT:
	RETVAL

void *
nci_pstsi( c_func, s0, t1, s2, i3 )
	SV* c_func
	short s0
	char * t1
	short s2
	int i3
PREINIT:
	void *(*func)(short, char *, short, int);
CODE:
	func   = INT2PTR(void *(*)(short, char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2, i3);
OUTPUT:
	RETVAL

void
nci_vstsi( c_func, s0, t1, s2, i3 )
	SV* c_func
	short s0
	char * t1
	short s2
	int i3
PREINIT:
	void(*func)(short, char *, short, int);
CODE:
	func   = INT2PTR(void(*)(short, char *, short, int), SvIV(c_func) );
	(*func)(s0, t1, s2, i3);

double
nci_dstsi( c_func, s0, t1, s2, i3 )
	SV* c_func
	short s0
	char * t1
	short s2
	int i3
PREINIT:
	double(*func)(short, char *, short, int);
CODE:
	func   = INT2PTR(double(*)(short, char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2, i3);
OUTPUT:
	RETVAL

short
nci_sstsi( c_func, s0, t1, s2, i3 )
	SV* c_func
	short s0
	char * t1
	short s2
	int i3
PREINIT:
	short(*func)(short, char *, short, int);
CODE:
	func   = INT2PTR(short(*)(short, char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2, i3);
OUTPUT:
	RETVAL

float
nci_fstsi( c_func, s0, t1, s2, i3 )
	SV* c_func
	short s0
	char * t1
	short s2
	int i3
PREINIT:
	float(*func)(short, char *, short, int);
CODE:
	func   = INT2PTR(float(*)(short, char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2, i3);
OUTPUT:
	RETVAL

char *
nci_tstsi( c_func, s0, t1, s2, i3 )
	SV* c_func
	short s0
	char * t1
	short s2
	int i3
PREINIT:
	char *(*func)(short, char *, short, int);
CODE:
	func   = INT2PTR(char *(*)(short, char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2, i3);
OUTPUT:
	RETVAL

int
nci_istsi( c_func, s0, t1, s2, i3 )
	SV* c_func
	short s0
	char * t1
	short s2
	int i3
PREINIT:
	int(*func)(short, char *, short, int);
CODE:
	func   = INT2PTR(int(*)(short, char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, s2, i3);
OUTPUT:
	RETVAL

void *
nci_pftsi( c_func, f0, t1, s2, i3 )
	SV* c_func
	float f0
	char * t1
	short s2
	int i3
PREINIT:
	void *(*func)(float, char *, short, int);
CODE:
	func   = INT2PTR(void *(*)(float, char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2, i3);
OUTPUT:
	RETVAL

void
nci_vftsi( c_func, f0, t1, s2, i3 )
	SV* c_func
	float f0
	char * t1
	short s2
	int i3
PREINIT:
	void(*func)(float, char *, short, int);
CODE:
	func   = INT2PTR(void(*)(float, char *, short, int), SvIV(c_func) );
	(*func)(f0, t1, s2, i3);

double
nci_dftsi( c_func, f0, t1, s2, i3 )
	SV* c_func
	float f0
	char * t1
	short s2
	int i3
PREINIT:
	double(*func)(float, char *, short, int);
CODE:
	func   = INT2PTR(double(*)(float, char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2, i3);
OUTPUT:
	RETVAL

short
nci_sftsi( c_func, f0, t1, s2, i3 )
	SV* c_func
	float f0
	char * t1
	short s2
	int i3
PREINIT:
	short(*func)(float, char *, short, int);
CODE:
	func   = INT2PTR(short(*)(float, char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2, i3);
OUTPUT:
	RETVAL

float
nci_fftsi( c_func, f0, t1, s2, i3 )
	SV* c_func
	float f0
	char * t1
	short s2
	int i3
PREINIT:
	float(*func)(float, char *, short, int);
CODE:
	func   = INT2PTR(float(*)(float, char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2, i3);
OUTPUT:
	RETVAL

char *
nci_tftsi( c_func, f0, t1, s2, i3 )
	SV* c_func
	float f0
	char * t1
	short s2
	int i3
PREINIT:
	char *(*func)(float, char *, short, int);
CODE:
	func   = INT2PTR(char *(*)(float, char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2, i3);
OUTPUT:
	RETVAL

int
nci_iftsi( c_func, f0, t1, s2, i3 )
	SV* c_func
	float f0
	char * t1
	short s2
	int i3
PREINIT:
	int(*func)(float, char *, short, int);
CODE:
	func   = INT2PTR(int(*)(float, char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, s2, i3);
OUTPUT:
	RETVAL

void *
nci_pttsi( c_func, t0, t1, s2, i3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	int i3
PREINIT:
	void *(*func)(char *, char *, short, int);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2, i3);
OUTPUT:
	RETVAL

void
nci_vttsi( c_func, t0, t1, s2, i3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	int i3
PREINIT:
	void(*func)(char *, char *, short, int);
CODE:
	func   = INT2PTR(void(*)(char *, char *, short, int), SvIV(c_func) );
	(*func)(t0, t1, s2, i3);

double
nci_dttsi( c_func, t0, t1, s2, i3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	int i3
PREINIT:
	double(*func)(char *, char *, short, int);
CODE:
	func   = INT2PTR(double(*)(char *, char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2, i3);
OUTPUT:
	RETVAL

short
nci_sttsi( c_func, t0, t1, s2, i3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	int i3
PREINIT:
	short(*func)(char *, char *, short, int);
CODE:
	func   = INT2PTR(short(*)(char *, char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2, i3);
OUTPUT:
	RETVAL

float
nci_fttsi( c_func, t0, t1, s2, i3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	int i3
PREINIT:
	float(*func)(char *, char *, short, int);
CODE:
	func   = INT2PTR(float(*)(char *, char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2, i3);
OUTPUT:
	RETVAL

char *
nci_tttsi( c_func, t0, t1, s2, i3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	int i3
PREINIT:
	char *(*func)(char *, char *, short, int);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2, i3);
OUTPUT:
	RETVAL

int
nci_ittsi( c_func, t0, t1, s2, i3 )
	SV* c_func
	char * t0
	char * t1
	short s2
	int i3
PREINIT:
	int(*func)(char *, char *, short, int);
CODE:
	func   = INT2PTR(int(*)(char *, char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, s2, i3);
OUTPUT:
	RETVAL

void *
nci_pitsi( c_func, i0, t1, s2, i3 )
	SV* c_func
	int i0
	char * t1
	short s2
	int i3
PREINIT:
	void *(*func)(int, char *, short, int);
CODE:
	func   = INT2PTR(void *(*)(int, char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2, i3);
OUTPUT:
	RETVAL

void
nci_vitsi( c_func, i0, t1, s2, i3 )
	SV* c_func
	int i0
	char * t1
	short s2
	int i3
PREINIT:
	void(*func)(int, char *, short, int);
CODE:
	func   = INT2PTR(void(*)(int, char *, short, int), SvIV(c_func) );
	(*func)(i0, t1, s2, i3);

double
nci_ditsi( c_func, i0, t1, s2, i3 )
	SV* c_func
	int i0
	char * t1
	short s2
	int i3
PREINIT:
	double(*func)(int, char *, short, int);
CODE:
	func   = INT2PTR(double(*)(int, char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2, i3);
OUTPUT:
	RETVAL

short
nci_sitsi( c_func, i0, t1, s2, i3 )
	SV* c_func
	int i0
	char * t1
	short s2
	int i3
PREINIT:
	short(*func)(int, char *, short, int);
CODE:
	func   = INT2PTR(short(*)(int, char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2, i3);
OUTPUT:
	RETVAL

float
nci_fitsi( c_func, i0, t1, s2, i3 )
	SV* c_func
	int i0
	char * t1
	short s2
	int i3
PREINIT:
	float(*func)(int, char *, short, int);
CODE:
	func   = INT2PTR(float(*)(int, char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2, i3);
OUTPUT:
	RETVAL

char *
nci_titsi( c_func, i0, t1, s2, i3 )
	SV* c_func
	int i0
	char * t1
	short s2
	int i3
PREINIT:
	char *(*func)(int, char *, short, int);
CODE:
	func   = INT2PTR(char *(*)(int, char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2, i3);
OUTPUT:
	RETVAL

int
nci_iitsi( c_func, i0, t1, s2, i3 )
	SV* c_func
	int i0
	char * t1
	short s2
	int i3
PREINIT:
	int(*func)(int, char *, short, int);
CODE:
	func   = INT2PTR(int(*)(int, char *, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, s2, i3);
OUTPUT:
	RETVAL

void *
nci_ppisi( c_func, p0, i1, s2, i3 )
	SV* c_func
	void * p0
	int i1
	short s2
	int i3
PREINIT:
	void *(*func)(void *, int, short, int);
CODE:
	func   = INT2PTR(void *(*)(void *, int, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2, i3);
OUTPUT:
	RETVAL

void
nci_vpisi( c_func, p0, i1, s2, i3 )
	SV* c_func
	void * p0
	int i1
	short s2
	int i3
PREINIT:
	void(*func)(void *, int, short, int);
CODE:
	func   = INT2PTR(void(*)(void *, int, short, int), SvIV(c_func) );
	(*func)(p0, i1, s2, i3);

double
nci_dpisi( c_func, p0, i1, s2, i3 )
	SV* c_func
	void * p0
	int i1
	short s2
	int i3
PREINIT:
	double(*func)(void *, int, short, int);
CODE:
	func   = INT2PTR(double(*)(void *, int, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2, i3);
OUTPUT:
	RETVAL

short
nci_spisi( c_func, p0, i1, s2, i3 )
	SV* c_func
	void * p0
	int i1
	short s2
	int i3
PREINIT:
	short(*func)(void *, int, short, int);
CODE:
	func   = INT2PTR(short(*)(void *, int, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2, i3);
OUTPUT:
	RETVAL

float
nci_fpisi( c_func, p0, i1, s2, i3 )
	SV* c_func
	void * p0
	int i1
	short s2
	int i3
PREINIT:
	float(*func)(void *, int, short, int);
CODE:
	func   = INT2PTR(float(*)(void *, int, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2, i3);
OUTPUT:
	RETVAL

char *
nci_tpisi( c_func, p0, i1, s2, i3 )
	SV* c_func
	void * p0
	int i1
	short s2
	int i3
PREINIT:
	char *(*func)(void *, int, short, int);
CODE:
	func   = INT2PTR(char *(*)(void *, int, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2, i3);
OUTPUT:
	RETVAL

int
nci_ipisi( c_func, p0, i1, s2, i3 )
	SV* c_func
	void * p0
	int i1
	short s2
	int i3
PREINIT:
	int(*func)(void *, int, short, int);
CODE:
	func   = INT2PTR(int(*)(void *, int, short, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, s2, i3);
OUTPUT:
	RETVAL

void *
nci_pvisi( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvisi( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvisi( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svisi( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvisi( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvisi( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivisi( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdisi( c_func, d0, i1, s2, i3 )
	SV* c_func
	double d0
	int i1
	short s2
	int i3
PREINIT:
	void *(*func)(double, int, short, int);
CODE:
	func   = INT2PTR(void *(*)(double, int, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2, i3);
OUTPUT:
	RETVAL

void
nci_vdisi( c_func, d0, i1, s2, i3 )
	SV* c_func
	double d0
	int i1
	short s2
	int i3
PREINIT:
	void(*func)(double, int, short, int);
CODE:
	func   = INT2PTR(void(*)(double, int, short, int), SvIV(c_func) );
	(*func)(d0, i1, s2, i3);

double
nci_ddisi( c_func, d0, i1, s2, i3 )
	SV* c_func
	double d0
	int i1
	short s2
	int i3
PREINIT:
	double(*func)(double, int, short, int);
CODE:
	func   = INT2PTR(double(*)(double, int, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2, i3);
OUTPUT:
	RETVAL

short
nci_sdisi( c_func, d0, i1, s2, i3 )
	SV* c_func
	double d0
	int i1
	short s2
	int i3
PREINIT:
	short(*func)(double, int, short, int);
CODE:
	func   = INT2PTR(short(*)(double, int, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2, i3);
OUTPUT:
	RETVAL

float
nci_fdisi( c_func, d0, i1, s2, i3 )
	SV* c_func
	double d0
	int i1
	short s2
	int i3
PREINIT:
	float(*func)(double, int, short, int);
CODE:
	func   = INT2PTR(float(*)(double, int, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2, i3);
OUTPUT:
	RETVAL

char *
nci_tdisi( c_func, d0, i1, s2, i3 )
	SV* c_func
	double d0
	int i1
	short s2
	int i3
PREINIT:
	char *(*func)(double, int, short, int);
CODE:
	func   = INT2PTR(char *(*)(double, int, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2, i3);
OUTPUT:
	RETVAL

int
nci_idisi( c_func, d0, i1, s2, i3 )
	SV* c_func
	double d0
	int i1
	short s2
	int i3
PREINIT:
	int(*func)(double, int, short, int);
CODE:
	func   = INT2PTR(int(*)(double, int, short, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, s2, i3);
OUTPUT:
	RETVAL

void *
nci_psisi( c_func, s0, i1, s2, i3 )
	SV* c_func
	short s0
	int i1
	short s2
	int i3
PREINIT:
	void *(*func)(short, int, short, int);
CODE:
	func   = INT2PTR(void *(*)(short, int, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2, i3);
OUTPUT:
	RETVAL

void
nci_vsisi( c_func, s0, i1, s2, i3 )
	SV* c_func
	short s0
	int i1
	short s2
	int i3
PREINIT:
	void(*func)(short, int, short, int);
CODE:
	func   = INT2PTR(void(*)(short, int, short, int), SvIV(c_func) );
	(*func)(s0, i1, s2, i3);

double
nci_dsisi( c_func, s0, i1, s2, i3 )
	SV* c_func
	short s0
	int i1
	short s2
	int i3
PREINIT:
	double(*func)(short, int, short, int);
CODE:
	func   = INT2PTR(double(*)(short, int, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2, i3);
OUTPUT:
	RETVAL

short
nci_ssisi( c_func, s0, i1, s2, i3 )
	SV* c_func
	short s0
	int i1
	short s2
	int i3
PREINIT:
	short(*func)(short, int, short, int);
CODE:
	func   = INT2PTR(short(*)(short, int, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2, i3);
OUTPUT:
	RETVAL

float
nci_fsisi( c_func, s0, i1, s2, i3 )
	SV* c_func
	short s0
	int i1
	short s2
	int i3
PREINIT:
	float(*func)(short, int, short, int);
CODE:
	func   = INT2PTR(float(*)(short, int, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2, i3);
OUTPUT:
	RETVAL

char *
nci_tsisi( c_func, s0, i1, s2, i3 )
	SV* c_func
	short s0
	int i1
	short s2
	int i3
PREINIT:
	char *(*func)(short, int, short, int);
CODE:
	func   = INT2PTR(char *(*)(short, int, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2, i3);
OUTPUT:
	RETVAL

int
nci_isisi( c_func, s0, i1, s2, i3 )
	SV* c_func
	short s0
	int i1
	short s2
	int i3
PREINIT:
	int(*func)(short, int, short, int);
CODE:
	func   = INT2PTR(int(*)(short, int, short, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, s2, i3);
OUTPUT:
	RETVAL

void *
nci_pfisi( c_func, f0, i1, s2, i3 )
	SV* c_func
	float f0
	int i1
	short s2
	int i3
PREINIT:
	void *(*func)(float, int, short, int);
CODE:
	func   = INT2PTR(void *(*)(float, int, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2, i3);
OUTPUT:
	RETVAL

void
nci_vfisi( c_func, f0, i1, s2, i3 )
	SV* c_func
	float f0
	int i1
	short s2
	int i3
PREINIT:
	void(*func)(float, int, short, int);
CODE:
	func   = INT2PTR(void(*)(float, int, short, int), SvIV(c_func) );
	(*func)(f0, i1, s2, i3);

double
nci_dfisi( c_func, f0, i1, s2, i3 )
	SV* c_func
	float f0
	int i1
	short s2
	int i3
PREINIT:
	double(*func)(float, int, short, int);
CODE:
	func   = INT2PTR(double(*)(float, int, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2, i3);
OUTPUT:
	RETVAL

short
nci_sfisi( c_func, f0, i1, s2, i3 )
	SV* c_func
	float f0
	int i1
	short s2
	int i3
PREINIT:
	short(*func)(float, int, short, int);
CODE:
	func   = INT2PTR(short(*)(float, int, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2, i3);
OUTPUT:
	RETVAL

float
nci_ffisi( c_func, f0, i1, s2, i3 )
	SV* c_func
	float f0
	int i1
	short s2
	int i3
PREINIT:
	float(*func)(float, int, short, int);
CODE:
	func   = INT2PTR(float(*)(float, int, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2, i3);
OUTPUT:
	RETVAL

char *
nci_tfisi( c_func, f0, i1, s2, i3 )
	SV* c_func
	float f0
	int i1
	short s2
	int i3
PREINIT:
	char *(*func)(float, int, short, int);
CODE:
	func   = INT2PTR(char *(*)(float, int, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2, i3);
OUTPUT:
	RETVAL

int
nci_ifisi( c_func, f0, i1, s2, i3 )
	SV* c_func
	float f0
	int i1
	short s2
	int i3
PREINIT:
	int(*func)(float, int, short, int);
CODE:
	func   = INT2PTR(int(*)(float, int, short, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, s2, i3);
OUTPUT:
	RETVAL

void *
nci_ptisi( c_func, t0, i1, s2, i3 )
	SV* c_func
	char * t0
	int i1
	short s2
	int i3
PREINIT:
	void *(*func)(char *, int, short, int);
CODE:
	func   = INT2PTR(void *(*)(char *, int, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2, i3);
OUTPUT:
	RETVAL

void
nci_vtisi( c_func, t0, i1, s2, i3 )
	SV* c_func
	char * t0
	int i1
	short s2
	int i3
PREINIT:
	void(*func)(char *, int, short, int);
CODE:
	func   = INT2PTR(void(*)(char *, int, short, int), SvIV(c_func) );
	(*func)(t0, i1, s2, i3);

double
nci_dtisi( c_func, t0, i1, s2, i3 )
	SV* c_func
	char * t0
	int i1
	short s2
	int i3
PREINIT:
	double(*func)(char *, int, short, int);
CODE:
	func   = INT2PTR(double(*)(char *, int, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2, i3);
OUTPUT:
	RETVAL

short
nci_stisi( c_func, t0, i1, s2, i3 )
	SV* c_func
	char * t0
	int i1
	short s2
	int i3
PREINIT:
	short(*func)(char *, int, short, int);
CODE:
	func   = INT2PTR(short(*)(char *, int, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2, i3);
OUTPUT:
	RETVAL

float
nci_ftisi( c_func, t0, i1, s2, i3 )
	SV* c_func
	char * t0
	int i1
	short s2
	int i3
PREINIT:
	float(*func)(char *, int, short, int);
CODE:
	func   = INT2PTR(float(*)(char *, int, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2, i3);
OUTPUT:
	RETVAL

char *
nci_ttisi( c_func, t0, i1, s2, i3 )
	SV* c_func
	char * t0
	int i1
	short s2
	int i3
PREINIT:
	char *(*func)(char *, int, short, int);
CODE:
	func   = INT2PTR(char *(*)(char *, int, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2, i3);
OUTPUT:
	RETVAL

int
nci_itisi( c_func, t0, i1, s2, i3 )
	SV* c_func
	char * t0
	int i1
	short s2
	int i3
PREINIT:
	int(*func)(char *, int, short, int);
CODE:
	func   = INT2PTR(int(*)(char *, int, short, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, s2, i3);
OUTPUT:
	RETVAL

void *
nci_piisi( c_func, i0, i1, s2, i3 )
	SV* c_func
	int i0
	int i1
	short s2
	int i3
PREINIT:
	void *(*func)(int, int, short, int);
CODE:
	func   = INT2PTR(void *(*)(int, int, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2, i3);
OUTPUT:
	RETVAL

void
nci_viisi( c_func, i0, i1, s2, i3 )
	SV* c_func
	int i0
	int i1
	short s2
	int i3
PREINIT:
	void(*func)(int, int, short, int);
CODE:
	func   = INT2PTR(void(*)(int, int, short, int), SvIV(c_func) );
	(*func)(i0, i1, s2, i3);

double
nci_diisi( c_func, i0, i1, s2, i3 )
	SV* c_func
	int i0
	int i1
	short s2
	int i3
PREINIT:
	double(*func)(int, int, short, int);
CODE:
	func   = INT2PTR(double(*)(int, int, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2, i3);
OUTPUT:
	RETVAL

short
nci_siisi( c_func, i0, i1, s2, i3 )
	SV* c_func
	int i0
	int i1
	short s2
	int i3
PREINIT:
	short(*func)(int, int, short, int);
CODE:
	func   = INT2PTR(short(*)(int, int, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2, i3);
OUTPUT:
	RETVAL

float
nci_fiisi( c_func, i0, i1, s2, i3 )
	SV* c_func
	int i0
	int i1
	short s2
	int i3
PREINIT:
	float(*func)(int, int, short, int);
CODE:
	func   = INT2PTR(float(*)(int, int, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2, i3);
OUTPUT:
	RETVAL

char *
nci_tiisi( c_func, i0, i1, s2, i3 )
	SV* c_func
	int i0
	int i1
	short s2
	int i3
PREINIT:
	char *(*func)(int, int, short, int);
CODE:
	func   = INT2PTR(char *(*)(int, int, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2, i3);
OUTPUT:
	RETVAL

int
nci_iiisi( c_func, i0, i1, s2, i3 )
	SV* c_func
	int i0
	int i1
	short s2
	int i3
PREINIT:
	int(*func)(int, int, short, int);
CODE:
	func   = INT2PTR(int(*)(int, int, short, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, s2, i3);
OUTPUT:
	RETVAL

void *
nci_pppfi( c_func, p0, p1, f2, i3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	int i3
PREINIT:
	void *(*func)(void *, void *, float, int);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2, i3);
OUTPUT:
	RETVAL

void
nci_vppfi( c_func, p0, p1, f2, i3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	int i3
PREINIT:
	void(*func)(void *, void *, float, int);
CODE:
	func   = INT2PTR(void(*)(void *, void *, float, int), SvIV(c_func) );
	(*func)(p0, p1, f2, i3);

double
nci_dppfi( c_func, p0, p1, f2, i3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	int i3
PREINIT:
	double(*func)(void *, void *, float, int);
CODE:
	func   = INT2PTR(double(*)(void *, void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2, i3);
OUTPUT:
	RETVAL

short
nci_sppfi( c_func, p0, p1, f2, i3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	int i3
PREINIT:
	short(*func)(void *, void *, float, int);
CODE:
	func   = INT2PTR(short(*)(void *, void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2, i3);
OUTPUT:
	RETVAL

float
nci_fppfi( c_func, p0, p1, f2, i3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	int i3
PREINIT:
	float(*func)(void *, void *, float, int);
CODE:
	func   = INT2PTR(float(*)(void *, void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2, i3);
OUTPUT:
	RETVAL

char *
nci_tppfi( c_func, p0, p1, f2, i3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	int i3
PREINIT:
	char *(*func)(void *, void *, float, int);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2, i3);
OUTPUT:
	RETVAL

int
nci_ippfi( c_func, p0, p1, f2, i3 )
	SV* c_func
	void * p0
	void * p1
	float f2
	int i3
PREINIT:
	int(*func)(void *, void *, float, int);
CODE:
	func   = INT2PTR(int(*)(void *, void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, f2, i3);
OUTPUT:
	RETVAL

void *
nci_pvpfi( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvpfi( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvpfi( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svpfi( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvpfi( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvpfi( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivpfi( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdpfi( c_func, d0, p1, f2, i3 )
	SV* c_func
	double d0
	void * p1
	float f2
	int i3
PREINIT:
	void *(*func)(double, void *, float, int);
CODE:
	func   = INT2PTR(void *(*)(double, void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2, i3);
OUTPUT:
	RETVAL

void
nci_vdpfi( c_func, d0, p1, f2, i3 )
	SV* c_func
	double d0
	void * p1
	float f2
	int i3
PREINIT:
	void(*func)(double, void *, float, int);
CODE:
	func   = INT2PTR(void(*)(double, void *, float, int), SvIV(c_func) );
	(*func)(d0, p1, f2, i3);

double
nci_ddpfi( c_func, d0, p1, f2, i3 )
	SV* c_func
	double d0
	void * p1
	float f2
	int i3
PREINIT:
	double(*func)(double, void *, float, int);
CODE:
	func   = INT2PTR(double(*)(double, void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2, i3);
OUTPUT:
	RETVAL

short
nci_sdpfi( c_func, d0, p1, f2, i3 )
	SV* c_func
	double d0
	void * p1
	float f2
	int i3
PREINIT:
	short(*func)(double, void *, float, int);
CODE:
	func   = INT2PTR(short(*)(double, void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2, i3);
OUTPUT:
	RETVAL

float
nci_fdpfi( c_func, d0, p1, f2, i3 )
	SV* c_func
	double d0
	void * p1
	float f2
	int i3
PREINIT:
	float(*func)(double, void *, float, int);
CODE:
	func   = INT2PTR(float(*)(double, void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2, i3);
OUTPUT:
	RETVAL

char *
nci_tdpfi( c_func, d0, p1, f2, i3 )
	SV* c_func
	double d0
	void * p1
	float f2
	int i3
PREINIT:
	char *(*func)(double, void *, float, int);
CODE:
	func   = INT2PTR(char *(*)(double, void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2, i3);
OUTPUT:
	RETVAL

int
nci_idpfi( c_func, d0, p1, f2, i3 )
	SV* c_func
	double d0
	void * p1
	float f2
	int i3
PREINIT:
	int(*func)(double, void *, float, int);
CODE:
	func   = INT2PTR(int(*)(double, void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, f2, i3);
OUTPUT:
	RETVAL

void *
nci_pspfi( c_func, s0, p1, f2, i3 )
	SV* c_func
	short s0
	void * p1
	float f2
	int i3
PREINIT:
	void *(*func)(short, void *, float, int);
CODE:
	func   = INT2PTR(void *(*)(short, void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2, i3);
OUTPUT:
	RETVAL

void
nci_vspfi( c_func, s0, p1, f2, i3 )
	SV* c_func
	short s0
	void * p1
	float f2
	int i3
PREINIT:
	void(*func)(short, void *, float, int);
CODE:
	func   = INT2PTR(void(*)(short, void *, float, int), SvIV(c_func) );
	(*func)(s0, p1, f2, i3);

double
nci_dspfi( c_func, s0, p1, f2, i3 )
	SV* c_func
	short s0
	void * p1
	float f2
	int i3
PREINIT:
	double(*func)(short, void *, float, int);
CODE:
	func   = INT2PTR(double(*)(short, void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2, i3);
OUTPUT:
	RETVAL

short
nci_sspfi( c_func, s0, p1, f2, i3 )
	SV* c_func
	short s0
	void * p1
	float f2
	int i3
PREINIT:
	short(*func)(short, void *, float, int);
CODE:
	func   = INT2PTR(short(*)(short, void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2, i3);
OUTPUT:
	RETVAL

float
nci_fspfi( c_func, s0, p1, f2, i3 )
	SV* c_func
	short s0
	void * p1
	float f2
	int i3
PREINIT:
	float(*func)(short, void *, float, int);
CODE:
	func   = INT2PTR(float(*)(short, void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2, i3);
OUTPUT:
	RETVAL

char *
nci_tspfi( c_func, s0, p1, f2, i3 )
	SV* c_func
	short s0
	void * p1
	float f2
	int i3
PREINIT:
	char *(*func)(short, void *, float, int);
CODE:
	func   = INT2PTR(char *(*)(short, void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2, i3);
OUTPUT:
	RETVAL

int
nci_ispfi( c_func, s0, p1, f2, i3 )
	SV* c_func
	short s0
	void * p1
	float f2
	int i3
PREINIT:
	int(*func)(short, void *, float, int);
CODE:
	func   = INT2PTR(int(*)(short, void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, f2, i3);
OUTPUT:
	RETVAL

void *
nci_pfpfi( c_func, f0, p1, f2, i3 )
	SV* c_func
	float f0
	void * p1
	float f2
	int i3
PREINIT:
	void *(*func)(float, void *, float, int);
CODE:
	func   = INT2PTR(void *(*)(float, void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2, i3);
OUTPUT:
	RETVAL

void
nci_vfpfi( c_func, f0, p1, f2, i3 )
	SV* c_func
	float f0
	void * p1
	float f2
	int i3
PREINIT:
	void(*func)(float, void *, float, int);
CODE:
	func   = INT2PTR(void(*)(float, void *, float, int), SvIV(c_func) );
	(*func)(f0, p1, f2, i3);

double
nci_dfpfi( c_func, f0, p1, f2, i3 )
	SV* c_func
	float f0
	void * p1
	float f2
	int i3
PREINIT:
	double(*func)(float, void *, float, int);
CODE:
	func   = INT2PTR(double(*)(float, void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2, i3);
OUTPUT:
	RETVAL

short
nci_sfpfi( c_func, f0, p1, f2, i3 )
	SV* c_func
	float f0
	void * p1
	float f2
	int i3
PREINIT:
	short(*func)(float, void *, float, int);
CODE:
	func   = INT2PTR(short(*)(float, void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2, i3);
OUTPUT:
	RETVAL

float
nci_ffpfi( c_func, f0, p1, f2, i3 )
	SV* c_func
	float f0
	void * p1
	float f2
	int i3
PREINIT:
	float(*func)(float, void *, float, int);
CODE:
	func   = INT2PTR(float(*)(float, void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2, i3);
OUTPUT:
	RETVAL

char *
nci_tfpfi( c_func, f0, p1, f2, i3 )
	SV* c_func
	float f0
	void * p1
	float f2
	int i3
PREINIT:
	char *(*func)(float, void *, float, int);
CODE:
	func   = INT2PTR(char *(*)(float, void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2, i3);
OUTPUT:
	RETVAL

int
nci_ifpfi( c_func, f0, p1, f2, i3 )
	SV* c_func
	float f0
	void * p1
	float f2
	int i3
PREINIT:
	int(*func)(float, void *, float, int);
CODE:
	func   = INT2PTR(int(*)(float, void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, f2, i3);
OUTPUT:
	RETVAL

void *
nci_ptpfi( c_func, t0, p1, f2, i3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	int i3
PREINIT:
	void *(*func)(char *, void *, float, int);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2, i3);
OUTPUT:
	RETVAL

void
nci_vtpfi( c_func, t0, p1, f2, i3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	int i3
PREINIT:
	void(*func)(char *, void *, float, int);
CODE:
	func   = INT2PTR(void(*)(char *, void *, float, int), SvIV(c_func) );
	(*func)(t0, p1, f2, i3);

double
nci_dtpfi( c_func, t0, p1, f2, i3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	int i3
PREINIT:
	double(*func)(char *, void *, float, int);
CODE:
	func   = INT2PTR(double(*)(char *, void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2, i3);
OUTPUT:
	RETVAL

short
nci_stpfi( c_func, t0, p1, f2, i3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	int i3
PREINIT:
	short(*func)(char *, void *, float, int);
CODE:
	func   = INT2PTR(short(*)(char *, void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2, i3);
OUTPUT:
	RETVAL

float
nci_ftpfi( c_func, t0, p1, f2, i3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	int i3
PREINIT:
	float(*func)(char *, void *, float, int);
CODE:
	func   = INT2PTR(float(*)(char *, void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2, i3);
OUTPUT:
	RETVAL

char *
nci_ttpfi( c_func, t0, p1, f2, i3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	int i3
PREINIT:
	char *(*func)(char *, void *, float, int);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2, i3);
OUTPUT:
	RETVAL

int
nci_itpfi( c_func, t0, p1, f2, i3 )
	SV* c_func
	char * t0
	void * p1
	float f2
	int i3
PREINIT:
	int(*func)(char *, void *, float, int);
CODE:
	func   = INT2PTR(int(*)(char *, void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, f2, i3);
OUTPUT:
	RETVAL

void *
nci_pipfi( c_func, i0, p1, f2, i3 )
	SV* c_func
	int i0
	void * p1
	float f2
	int i3
PREINIT:
	void *(*func)(int, void *, float, int);
CODE:
	func   = INT2PTR(void *(*)(int, void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2, i3);
OUTPUT:
	RETVAL

void
nci_vipfi( c_func, i0, p1, f2, i3 )
	SV* c_func
	int i0
	void * p1
	float f2
	int i3
PREINIT:
	void(*func)(int, void *, float, int);
CODE:
	func   = INT2PTR(void(*)(int, void *, float, int), SvIV(c_func) );
	(*func)(i0, p1, f2, i3);

double
nci_dipfi( c_func, i0, p1, f2, i3 )
	SV* c_func
	int i0
	void * p1
	float f2
	int i3
PREINIT:
	double(*func)(int, void *, float, int);
CODE:
	func   = INT2PTR(double(*)(int, void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2, i3);
OUTPUT:
	RETVAL

short
nci_sipfi( c_func, i0, p1, f2, i3 )
	SV* c_func
	int i0
	void * p1
	float f2
	int i3
PREINIT:
	short(*func)(int, void *, float, int);
CODE:
	func   = INT2PTR(short(*)(int, void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2, i3);
OUTPUT:
	RETVAL

float
nci_fipfi( c_func, i0, p1, f2, i3 )
	SV* c_func
	int i0
	void * p1
	float f2
	int i3
PREINIT:
	float(*func)(int, void *, float, int);
CODE:
	func   = INT2PTR(float(*)(int, void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2, i3);
OUTPUT:
	RETVAL

char *
nci_tipfi( c_func, i0, p1, f2, i3 )
	SV* c_func
	int i0
	void * p1
	float f2
	int i3
PREINIT:
	char *(*func)(int, void *, float, int);
CODE:
	func   = INT2PTR(char *(*)(int, void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2, i3);
OUTPUT:
	RETVAL

int
nci_iipfi( c_func, i0, p1, f2, i3 )
	SV* c_func
	int i0
	void * p1
	float f2
	int i3
PREINIT:
	int(*func)(int, void *, float, int);
CODE:
	func   = INT2PTR(int(*)(int, void *, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, f2, i3);
OUTPUT:
	RETVAL

void *
nci_ppdfi( c_func, p0, d1, f2, i3 )
	SV* c_func
	void * p0
	double d1
	float f2
	int i3
PREINIT:
	void *(*func)(void *, double, float, int);
CODE:
	func   = INT2PTR(void *(*)(void *, double, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2, i3);
OUTPUT:
	RETVAL

void
nci_vpdfi( c_func, p0, d1, f2, i3 )
	SV* c_func
	void * p0
	double d1
	float f2
	int i3
PREINIT:
	void(*func)(void *, double, float, int);
CODE:
	func   = INT2PTR(void(*)(void *, double, float, int), SvIV(c_func) );
	(*func)(p0, d1, f2, i3);

double
nci_dpdfi( c_func, p0, d1, f2, i3 )
	SV* c_func
	void * p0
	double d1
	float f2
	int i3
PREINIT:
	double(*func)(void *, double, float, int);
CODE:
	func   = INT2PTR(double(*)(void *, double, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2, i3);
OUTPUT:
	RETVAL

short
nci_spdfi( c_func, p0, d1, f2, i3 )
	SV* c_func
	void * p0
	double d1
	float f2
	int i3
PREINIT:
	short(*func)(void *, double, float, int);
CODE:
	func   = INT2PTR(short(*)(void *, double, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2, i3);
OUTPUT:
	RETVAL

float
nci_fpdfi( c_func, p0, d1, f2, i3 )
	SV* c_func
	void * p0
	double d1
	float f2
	int i3
PREINIT:
	float(*func)(void *, double, float, int);
CODE:
	func   = INT2PTR(float(*)(void *, double, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2, i3);
OUTPUT:
	RETVAL

char *
nci_tpdfi( c_func, p0, d1, f2, i3 )
	SV* c_func
	void * p0
	double d1
	float f2
	int i3
PREINIT:
	char *(*func)(void *, double, float, int);
CODE:
	func   = INT2PTR(char *(*)(void *, double, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2, i3);
OUTPUT:
	RETVAL

int
nci_ipdfi( c_func, p0, d1, f2, i3 )
	SV* c_func
	void * p0
	double d1
	float f2
	int i3
PREINIT:
	int(*func)(void *, double, float, int);
CODE:
	func   = INT2PTR(int(*)(void *, double, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, f2, i3);
OUTPUT:
	RETVAL

void *
nci_pvdfi( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvdfi( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvdfi( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svdfi( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvdfi( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvdfi( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivdfi( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pddfi( c_func, d0, d1, f2, i3 )
	SV* c_func
	double d0
	double d1
	float f2
	int i3
PREINIT:
	void *(*func)(double, double, float, int);
CODE:
	func   = INT2PTR(void *(*)(double, double, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2, i3);
OUTPUT:
	RETVAL

void
nci_vddfi( c_func, d0, d1, f2, i3 )
	SV* c_func
	double d0
	double d1
	float f2
	int i3
PREINIT:
	void(*func)(double, double, float, int);
CODE:
	func   = INT2PTR(void(*)(double, double, float, int), SvIV(c_func) );
	(*func)(d0, d1, f2, i3);

double
nci_dddfi( c_func, d0, d1, f2, i3 )
	SV* c_func
	double d0
	double d1
	float f2
	int i3
PREINIT:
	double(*func)(double, double, float, int);
CODE:
	func   = INT2PTR(double(*)(double, double, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2, i3);
OUTPUT:
	RETVAL

short
nci_sddfi( c_func, d0, d1, f2, i3 )
	SV* c_func
	double d0
	double d1
	float f2
	int i3
PREINIT:
	short(*func)(double, double, float, int);
CODE:
	func   = INT2PTR(short(*)(double, double, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2, i3);
OUTPUT:
	RETVAL

float
nci_fddfi( c_func, d0, d1, f2, i3 )
	SV* c_func
	double d0
	double d1
	float f2
	int i3
PREINIT:
	float(*func)(double, double, float, int);
CODE:
	func   = INT2PTR(float(*)(double, double, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2, i3);
OUTPUT:
	RETVAL

char *
nci_tddfi( c_func, d0, d1, f2, i3 )
	SV* c_func
	double d0
	double d1
	float f2
	int i3
PREINIT:
	char *(*func)(double, double, float, int);
CODE:
	func   = INT2PTR(char *(*)(double, double, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2, i3);
OUTPUT:
	RETVAL

int
nci_iddfi( c_func, d0, d1, f2, i3 )
	SV* c_func
	double d0
	double d1
	float f2
	int i3
PREINIT:
	int(*func)(double, double, float, int);
CODE:
	func   = INT2PTR(int(*)(double, double, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, f2, i3);
OUTPUT:
	RETVAL

void *
nci_psdfi( c_func, s0, d1, f2, i3 )
	SV* c_func
	short s0
	double d1
	float f2
	int i3
PREINIT:
	void *(*func)(short, double, float, int);
CODE:
	func   = INT2PTR(void *(*)(short, double, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2, i3);
OUTPUT:
	RETVAL

void
nci_vsdfi( c_func, s0, d1, f2, i3 )
	SV* c_func
	short s0
	double d1
	float f2
	int i3
PREINIT:
	void(*func)(short, double, float, int);
CODE:
	func   = INT2PTR(void(*)(short, double, float, int), SvIV(c_func) );
	(*func)(s0, d1, f2, i3);

double
nci_dsdfi( c_func, s0, d1, f2, i3 )
	SV* c_func
	short s0
	double d1
	float f2
	int i3
PREINIT:
	double(*func)(short, double, float, int);
CODE:
	func   = INT2PTR(double(*)(short, double, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2, i3);
OUTPUT:
	RETVAL

short
nci_ssdfi( c_func, s0, d1, f2, i3 )
	SV* c_func
	short s0
	double d1
	float f2
	int i3
PREINIT:
	short(*func)(short, double, float, int);
CODE:
	func   = INT2PTR(short(*)(short, double, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2, i3);
OUTPUT:
	RETVAL

float
nci_fsdfi( c_func, s0, d1, f2, i3 )
	SV* c_func
	short s0
	double d1
	float f2
	int i3
PREINIT:
	float(*func)(short, double, float, int);
CODE:
	func   = INT2PTR(float(*)(short, double, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2, i3);
OUTPUT:
	RETVAL

char *
nci_tsdfi( c_func, s0, d1, f2, i3 )
	SV* c_func
	short s0
	double d1
	float f2
	int i3
PREINIT:
	char *(*func)(short, double, float, int);
CODE:
	func   = INT2PTR(char *(*)(short, double, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2, i3);
OUTPUT:
	RETVAL

int
nci_isdfi( c_func, s0, d1, f2, i3 )
	SV* c_func
	short s0
	double d1
	float f2
	int i3
PREINIT:
	int(*func)(short, double, float, int);
CODE:
	func   = INT2PTR(int(*)(short, double, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, f2, i3);
OUTPUT:
	RETVAL

void *
nci_pfdfi( c_func, f0, d1, f2, i3 )
	SV* c_func
	float f0
	double d1
	float f2
	int i3
PREINIT:
	void *(*func)(float, double, float, int);
CODE:
	func   = INT2PTR(void *(*)(float, double, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2, i3);
OUTPUT:
	RETVAL

void
nci_vfdfi( c_func, f0, d1, f2, i3 )
	SV* c_func
	float f0
	double d1
	float f2
	int i3
PREINIT:
	void(*func)(float, double, float, int);
CODE:
	func   = INT2PTR(void(*)(float, double, float, int), SvIV(c_func) );
	(*func)(f0, d1, f2, i3);

double
nci_dfdfi( c_func, f0, d1, f2, i3 )
	SV* c_func
	float f0
	double d1
	float f2
	int i3
PREINIT:
	double(*func)(float, double, float, int);
CODE:
	func   = INT2PTR(double(*)(float, double, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2, i3);
OUTPUT:
	RETVAL

short
nci_sfdfi( c_func, f0, d1, f2, i3 )
	SV* c_func
	float f0
	double d1
	float f2
	int i3
PREINIT:
	short(*func)(float, double, float, int);
CODE:
	func   = INT2PTR(short(*)(float, double, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2, i3);
OUTPUT:
	RETVAL

float
nci_ffdfi( c_func, f0, d1, f2, i3 )
	SV* c_func
	float f0
	double d1
	float f2
	int i3
PREINIT:
	float(*func)(float, double, float, int);
CODE:
	func   = INT2PTR(float(*)(float, double, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2, i3);
OUTPUT:
	RETVAL

char *
nci_tfdfi( c_func, f0, d1, f2, i3 )
	SV* c_func
	float f0
	double d1
	float f2
	int i3
PREINIT:
	char *(*func)(float, double, float, int);
CODE:
	func   = INT2PTR(char *(*)(float, double, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2, i3);
OUTPUT:
	RETVAL

int
nci_ifdfi( c_func, f0, d1, f2, i3 )
	SV* c_func
	float f0
	double d1
	float f2
	int i3
PREINIT:
	int(*func)(float, double, float, int);
CODE:
	func   = INT2PTR(int(*)(float, double, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, f2, i3);
OUTPUT:
	RETVAL

void *
nci_ptdfi( c_func, t0, d1, f2, i3 )
	SV* c_func
	char * t0
	double d1
	float f2
	int i3
PREINIT:
	void *(*func)(char *, double, float, int);
CODE:
	func   = INT2PTR(void *(*)(char *, double, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2, i3);
OUTPUT:
	RETVAL

void
nci_vtdfi( c_func, t0, d1, f2, i3 )
	SV* c_func
	char * t0
	double d1
	float f2
	int i3
PREINIT:
	void(*func)(char *, double, float, int);
CODE:
	func   = INT2PTR(void(*)(char *, double, float, int), SvIV(c_func) );
	(*func)(t0, d1, f2, i3);

double
nci_dtdfi( c_func, t0, d1, f2, i3 )
	SV* c_func
	char * t0
	double d1
	float f2
	int i3
PREINIT:
	double(*func)(char *, double, float, int);
CODE:
	func   = INT2PTR(double(*)(char *, double, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2, i3);
OUTPUT:
	RETVAL

short
nci_stdfi( c_func, t0, d1, f2, i3 )
	SV* c_func
	char * t0
	double d1
	float f2
	int i3
PREINIT:
	short(*func)(char *, double, float, int);
CODE:
	func   = INT2PTR(short(*)(char *, double, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2, i3);
OUTPUT:
	RETVAL

float
nci_ftdfi( c_func, t0, d1, f2, i3 )
	SV* c_func
	char * t0
	double d1
	float f2
	int i3
PREINIT:
	float(*func)(char *, double, float, int);
CODE:
	func   = INT2PTR(float(*)(char *, double, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2, i3);
OUTPUT:
	RETVAL

char *
nci_ttdfi( c_func, t0, d1, f2, i3 )
	SV* c_func
	char * t0
	double d1
	float f2
	int i3
PREINIT:
	char *(*func)(char *, double, float, int);
CODE:
	func   = INT2PTR(char *(*)(char *, double, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2, i3);
OUTPUT:
	RETVAL

int
nci_itdfi( c_func, t0, d1, f2, i3 )
	SV* c_func
	char * t0
	double d1
	float f2
	int i3
PREINIT:
	int(*func)(char *, double, float, int);
CODE:
	func   = INT2PTR(int(*)(char *, double, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, f2, i3);
OUTPUT:
	RETVAL

void *
nci_pidfi( c_func, i0, d1, f2, i3 )
	SV* c_func
	int i0
	double d1
	float f2
	int i3
PREINIT:
	void *(*func)(int, double, float, int);
CODE:
	func   = INT2PTR(void *(*)(int, double, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2, i3);
OUTPUT:
	RETVAL

void
nci_vidfi( c_func, i0, d1, f2, i3 )
	SV* c_func
	int i0
	double d1
	float f2
	int i3
PREINIT:
	void(*func)(int, double, float, int);
CODE:
	func   = INT2PTR(void(*)(int, double, float, int), SvIV(c_func) );
	(*func)(i0, d1, f2, i3);

double
nci_didfi( c_func, i0, d1, f2, i3 )
	SV* c_func
	int i0
	double d1
	float f2
	int i3
PREINIT:
	double(*func)(int, double, float, int);
CODE:
	func   = INT2PTR(double(*)(int, double, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2, i3);
OUTPUT:
	RETVAL

short
nci_sidfi( c_func, i0, d1, f2, i3 )
	SV* c_func
	int i0
	double d1
	float f2
	int i3
PREINIT:
	short(*func)(int, double, float, int);
CODE:
	func   = INT2PTR(short(*)(int, double, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2, i3);
OUTPUT:
	RETVAL

float
nci_fidfi( c_func, i0, d1, f2, i3 )
	SV* c_func
	int i0
	double d1
	float f2
	int i3
PREINIT:
	float(*func)(int, double, float, int);
CODE:
	func   = INT2PTR(float(*)(int, double, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2, i3);
OUTPUT:
	RETVAL

char *
nci_tidfi( c_func, i0, d1, f2, i3 )
	SV* c_func
	int i0
	double d1
	float f2
	int i3
PREINIT:
	char *(*func)(int, double, float, int);
CODE:
	func   = INT2PTR(char *(*)(int, double, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2, i3);
OUTPUT:
	RETVAL

int
nci_iidfi( c_func, i0, d1, f2, i3 )
	SV* c_func
	int i0
	double d1
	float f2
	int i3
PREINIT:
	int(*func)(int, double, float, int);
CODE:
	func   = INT2PTR(int(*)(int, double, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, f2, i3);
OUTPUT:
	RETVAL

void *
nci_ppsfi( c_func, p0, s1, f2, i3 )
	SV* c_func
	void * p0
	short s1
	float f2
	int i3
PREINIT:
	void *(*func)(void *, short, float, int);
CODE:
	func   = INT2PTR(void *(*)(void *, short, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2, i3);
OUTPUT:
	RETVAL

void
nci_vpsfi( c_func, p0, s1, f2, i3 )
	SV* c_func
	void * p0
	short s1
	float f2
	int i3
PREINIT:
	void(*func)(void *, short, float, int);
CODE:
	func   = INT2PTR(void(*)(void *, short, float, int), SvIV(c_func) );
	(*func)(p0, s1, f2, i3);

double
nci_dpsfi( c_func, p0, s1, f2, i3 )
	SV* c_func
	void * p0
	short s1
	float f2
	int i3
PREINIT:
	double(*func)(void *, short, float, int);
CODE:
	func   = INT2PTR(double(*)(void *, short, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2, i3);
OUTPUT:
	RETVAL

short
nci_spsfi( c_func, p0, s1, f2, i3 )
	SV* c_func
	void * p0
	short s1
	float f2
	int i3
PREINIT:
	short(*func)(void *, short, float, int);
CODE:
	func   = INT2PTR(short(*)(void *, short, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2, i3);
OUTPUT:
	RETVAL

float
nci_fpsfi( c_func, p0, s1, f2, i3 )
	SV* c_func
	void * p0
	short s1
	float f2
	int i3
PREINIT:
	float(*func)(void *, short, float, int);
CODE:
	func   = INT2PTR(float(*)(void *, short, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2, i3);
OUTPUT:
	RETVAL

char *
nci_tpsfi( c_func, p0, s1, f2, i3 )
	SV* c_func
	void * p0
	short s1
	float f2
	int i3
PREINIT:
	char *(*func)(void *, short, float, int);
CODE:
	func   = INT2PTR(char *(*)(void *, short, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2, i3);
OUTPUT:
	RETVAL

int
nci_ipsfi( c_func, p0, s1, f2, i3 )
	SV* c_func
	void * p0
	short s1
	float f2
	int i3
PREINIT:
	int(*func)(void *, short, float, int);
CODE:
	func   = INT2PTR(int(*)(void *, short, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, f2, i3);
OUTPUT:
	RETVAL

void *
nci_pvsfi( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvsfi( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvsfi( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svsfi( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvsfi( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvsfi( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivsfi( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdsfi( c_func, d0, s1, f2, i3 )
	SV* c_func
	double d0
	short s1
	float f2
	int i3
PREINIT:
	void *(*func)(double, short, float, int);
CODE:
	func   = INT2PTR(void *(*)(double, short, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2, i3);
OUTPUT:
	RETVAL

void
nci_vdsfi( c_func, d0, s1, f2, i3 )
	SV* c_func
	double d0
	short s1
	float f2
	int i3
PREINIT:
	void(*func)(double, short, float, int);
CODE:
	func   = INT2PTR(void(*)(double, short, float, int), SvIV(c_func) );
	(*func)(d0, s1, f2, i3);

double
nci_ddsfi( c_func, d0, s1, f2, i3 )
	SV* c_func
	double d0
	short s1
	float f2
	int i3
PREINIT:
	double(*func)(double, short, float, int);
CODE:
	func   = INT2PTR(double(*)(double, short, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2, i3);
OUTPUT:
	RETVAL

short
nci_sdsfi( c_func, d0, s1, f2, i3 )
	SV* c_func
	double d0
	short s1
	float f2
	int i3
PREINIT:
	short(*func)(double, short, float, int);
CODE:
	func   = INT2PTR(short(*)(double, short, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2, i3);
OUTPUT:
	RETVAL

float
nci_fdsfi( c_func, d0, s1, f2, i3 )
	SV* c_func
	double d0
	short s1
	float f2
	int i3
PREINIT:
	float(*func)(double, short, float, int);
CODE:
	func   = INT2PTR(float(*)(double, short, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2, i3);
OUTPUT:
	RETVAL

char *
nci_tdsfi( c_func, d0, s1, f2, i3 )
	SV* c_func
	double d0
	short s1
	float f2
	int i3
PREINIT:
	char *(*func)(double, short, float, int);
CODE:
	func   = INT2PTR(char *(*)(double, short, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2, i3);
OUTPUT:
	RETVAL

int
nci_idsfi( c_func, d0, s1, f2, i3 )
	SV* c_func
	double d0
	short s1
	float f2
	int i3
PREINIT:
	int(*func)(double, short, float, int);
CODE:
	func   = INT2PTR(int(*)(double, short, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, f2, i3);
OUTPUT:
	RETVAL

void *
nci_pssfi( c_func, s0, s1, f2, i3 )
	SV* c_func
	short s0
	short s1
	float f2
	int i3
PREINIT:
	void *(*func)(short, short, float, int);
CODE:
	func   = INT2PTR(void *(*)(short, short, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2, i3);
OUTPUT:
	RETVAL

void
nci_vssfi( c_func, s0, s1, f2, i3 )
	SV* c_func
	short s0
	short s1
	float f2
	int i3
PREINIT:
	void(*func)(short, short, float, int);
CODE:
	func   = INT2PTR(void(*)(short, short, float, int), SvIV(c_func) );
	(*func)(s0, s1, f2, i3);

double
nci_dssfi( c_func, s0, s1, f2, i3 )
	SV* c_func
	short s0
	short s1
	float f2
	int i3
PREINIT:
	double(*func)(short, short, float, int);
CODE:
	func   = INT2PTR(double(*)(short, short, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2, i3);
OUTPUT:
	RETVAL

short
nci_sssfi( c_func, s0, s1, f2, i3 )
	SV* c_func
	short s0
	short s1
	float f2
	int i3
PREINIT:
	short(*func)(short, short, float, int);
CODE:
	func   = INT2PTR(short(*)(short, short, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2, i3);
OUTPUT:
	RETVAL

float
nci_fssfi( c_func, s0, s1, f2, i3 )
	SV* c_func
	short s0
	short s1
	float f2
	int i3
PREINIT:
	float(*func)(short, short, float, int);
CODE:
	func   = INT2PTR(float(*)(short, short, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2, i3);
OUTPUT:
	RETVAL

char *
nci_tssfi( c_func, s0, s1, f2, i3 )
	SV* c_func
	short s0
	short s1
	float f2
	int i3
PREINIT:
	char *(*func)(short, short, float, int);
CODE:
	func   = INT2PTR(char *(*)(short, short, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2, i3);
OUTPUT:
	RETVAL

int
nci_issfi( c_func, s0, s1, f2, i3 )
	SV* c_func
	short s0
	short s1
	float f2
	int i3
PREINIT:
	int(*func)(short, short, float, int);
CODE:
	func   = INT2PTR(int(*)(short, short, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, f2, i3);
OUTPUT:
	RETVAL

void *
nci_pfsfi( c_func, f0, s1, f2, i3 )
	SV* c_func
	float f0
	short s1
	float f2
	int i3
PREINIT:
	void *(*func)(float, short, float, int);
CODE:
	func   = INT2PTR(void *(*)(float, short, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2, i3);
OUTPUT:
	RETVAL

void
nci_vfsfi( c_func, f0, s1, f2, i3 )
	SV* c_func
	float f0
	short s1
	float f2
	int i3
PREINIT:
	void(*func)(float, short, float, int);
CODE:
	func   = INT2PTR(void(*)(float, short, float, int), SvIV(c_func) );
	(*func)(f0, s1, f2, i3);

double
nci_dfsfi( c_func, f0, s1, f2, i3 )
	SV* c_func
	float f0
	short s1
	float f2
	int i3
PREINIT:
	double(*func)(float, short, float, int);
CODE:
	func   = INT2PTR(double(*)(float, short, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2, i3);
OUTPUT:
	RETVAL

short
nci_sfsfi( c_func, f0, s1, f2, i3 )
	SV* c_func
	float f0
	short s1
	float f2
	int i3
PREINIT:
	short(*func)(float, short, float, int);
CODE:
	func   = INT2PTR(short(*)(float, short, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2, i3);
OUTPUT:
	RETVAL

float
nci_ffsfi( c_func, f0, s1, f2, i3 )
	SV* c_func
	float f0
	short s1
	float f2
	int i3
PREINIT:
	float(*func)(float, short, float, int);
CODE:
	func   = INT2PTR(float(*)(float, short, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2, i3);
OUTPUT:
	RETVAL

char *
nci_tfsfi( c_func, f0, s1, f2, i3 )
	SV* c_func
	float f0
	short s1
	float f2
	int i3
PREINIT:
	char *(*func)(float, short, float, int);
CODE:
	func   = INT2PTR(char *(*)(float, short, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2, i3);
OUTPUT:
	RETVAL

int
nci_ifsfi( c_func, f0, s1, f2, i3 )
	SV* c_func
	float f0
	short s1
	float f2
	int i3
PREINIT:
	int(*func)(float, short, float, int);
CODE:
	func   = INT2PTR(int(*)(float, short, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, f2, i3);
OUTPUT:
	RETVAL

void *
nci_ptsfi( c_func, t0, s1, f2, i3 )
	SV* c_func
	char * t0
	short s1
	float f2
	int i3
PREINIT:
	void *(*func)(char *, short, float, int);
CODE:
	func   = INT2PTR(void *(*)(char *, short, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2, i3);
OUTPUT:
	RETVAL

void
nci_vtsfi( c_func, t0, s1, f2, i3 )
	SV* c_func
	char * t0
	short s1
	float f2
	int i3
PREINIT:
	void(*func)(char *, short, float, int);
CODE:
	func   = INT2PTR(void(*)(char *, short, float, int), SvIV(c_func) );
	(*func)(t0, s1, f2, i3);

double
nci_dtsfi( c_func, t0, s1, f2, i3 )
	SV* c_func
	char * t0
	short s1
	float f2
	int i3
PREINIT:
	double(*func)(char *, short, float, int);
CODE:
	func   = INT2PTR(double(*)(char *, short, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2, i3);
OUTPUT:
	RETVAL

short
nci_stsfi( c_func, t0, s1, f2, i3 )
	SV* c_func
	char * t0
	short s1
	float f2
	int i3
PREINIT:
	short(*func)(char *, short, float, int);
CODE:
	func   = INT2PTR(short(*)(char *, short, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2, i3);
OUTPUT:
	RETVAL

float
nci_ftsfi( c_func, t0, s1, f2, i3 )
	SV* c_func
	char * t0
	short s1
	float f2
	int i3
PREINIT:
	float(*func)(char *, short, float, int);
CODE:
	func   = INT2PTR(float(*)(char *, short, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2, i3);
OUTPUT:
	RETVAL

char *
nci_ttsfi( c_func, t0, s1, f2, i3 )
	SV* c_func
	char * t0
	short s1
	float f2
	int i3
PREINIT:
	char *(*func)(char *, short, float, int);
CODE:
	func   = INT2PTR(char *(*)(char *, short, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2, i3);
OUTPUT:
	RETVAL

int
nci_itsfi( c_func, t0, s1, f2, i3 )
	SV* c_func
	char * t0
	short s1
	float f2
	int i3
PREINIT:
	int(*func)(char *, short, float, int);
CODE:
	func   = INT2PTR(int(*)(char *, short, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, f2, i3);
OUTPUT:
	RETVAL

void *
nci_pisfi( c_func, i0, s1, f2, i3 )
	SV* c_func
	int i0
	short s1
	float f2
	int i3
PREINIT:
	void *(*func)(int, short, float, int);
CODE:
	func   = INT2PTR(void *(*)(int, short, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2, i3);
OUTPUT:
	RETVAL

void
nci_visfi( c_func, i0, s1, f2, i3 )
	SV* c_func
	int i0
	short s1
	float f2
	int i3
PREINIT:
	void(*func)(int, short, float, int);
CODE:
	func   = INT2PTR(void(*)(int, short, float, int), SvIV(c_func) );
	(*func)(i0, s1, f2, i3);

double
nci_disfi( c_func, i0, s1, f2, i3 )
	SV* c_func
	int i0
	short s1
	float f2
	int i3
PREINIT:
	double(*func)(int, short, float, int);
CODE:
	func   = INT2PTR(double(*)(int, short, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2, i3);
OUTPUT:
	RETVAL

short
nci_sisfi( c_func, i0, s1, f2, i3 )
	SV* c_func
	int i0
	short s1
	float f2
	int i3
PREINIT:
	short(*func)(int, short, float, int);
CODE:
	func   = INT2PTR(short(*)(int, short, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2, i3);
OUTPUT:
	RETVAL

float
nci_fisfi( c_func, i0, s1, f2, i3 )
	SV* c_func
	int i0
	short s1
	float f2
	int i3
PREINIT:
	float(*func)(int, short, float, int);
CODE:
	func   = INT2PTR(float(*)(int, short, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2, i3);
OUTPUT:
	RETVAL

char *
nci_tisfi( c_func, i0, s1, f2, i3 )
	SV* c_func
	int i0
	short s1
	float f2
	int i3
PREINIT:
	char *(*func)(int, short, float, int);
CODE:
	func   = INT2PTR(char *(*)(int, short, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2, i3);
OUTPUT:
	RETVAL

int
nci_iisfi( c_func, i0, s1, f2, i3 )
	SV* c_func
	int i0
	short s1
	float f2
	int i3
PREINIT:
	int(*func)(int, short, float, int);
CODE:
	func   = INT2PTR(int(*)(int, short, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, f2, i3);
OUTPUT:
	RETVAL

void *
nci_ppffi( c_func, p0, f1, f2, i3 )
	SV* c_func
	void * p0
	float f1
	float f2
	int i3
PREINIT:
	void *(*func)(void *, float, float, int);
CODE:
	func   = INT2PTR(void *(*)(void *, float, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2, i3);
OUTPUT:
	RETVAL

void
nci_vpffi( c_func, p0, f1, f2, i3 )
	SV* c_func
	void * p0
	float f1
	float f2
	int i3
PREINIT:
	void(*func)(void *, float, float, int);
CODE:
	func   = INT2PTR(void(*)(void *, float, float, int), SvIV(c_func) );
	(*func)(p0, f1, f2, i3);

double
nci_dpffi( c_func, p0, f1, f2, i3 )
	SV* c_func
	void * p0
	float f1
	float f2
	int i3
PREINIT:
	double(*func)(void *, float, float, int);
CODE:
	func   = INT2PTR(double(*)(void *, float, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2, i3);
OUTPUT:
	RETVAL

short
nci_spffi( c_func, p0, f1, f2, i3 )
	SV* c_func
	void * p0
	float f1
	float f2
	int i3
PREINIT:
	short(*func)(void *, float, float, int);
CODE:
	func   = INT2PTR(short(*)(void *, float, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2, i3);
OUTPUT:
	RETVAL

float
nci_fpffi( c_func, p0, f1, f2, i3 )
	SV* c_func
	void * p0
	float f1
	float f2
	int i3
PREINIT:
	float(*func)(void *, float, float, int);
CODE:
	func   = INT2PTR(float(*)(void *, float, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2, i3);
OUTPUT:
	RETVAL

char *
nci_tpffi( c_func, p0, f1, f2, i3 )
	SV* c_func
	void * p0
	float f1
	float f2
	int i3
PREINIT:
	char *(*func)(void *, float, float, int);
CODE:
	func   = INT2PTR(char *(*)(void *, float, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2, i3);
OUTPUT:
	RETVAL

int
nci_ipffi( c_func, p0, f1, f2, i3 )
	SV* c_func
	void * p0
	float f1
	float f2
	int i3
PREINIT:
	int(*func)(void *, float, float, int);
CODE:
	func   = INT2PTR(int(*)(void *, float, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, f2, i3);
OUTPUT:
	RETVAL

void *
nci_pvffi( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvffi( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvffi( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svffi( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvffi( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvffi( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivffi( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdffi( c_func, d0, f1, f2, i3 )
	SV* c_func
	double d0
	float f1
	float f2
	int i3
PREINIT:
	void *(*func)(double, float, float, int);
CODE:
	func   = INT2PTR(void *(*)(double, float, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2, i3);
OUTPUT:
	RETVAL

void
nci_vdffi( c_func, d0, f1, f2, i3 )
	SV* c_func
	double d0
	float f1
	float f2
	int i3
PREINIT:
	void(*func)(double, float, float, int);
CODE:
	func   = INT2PTR(void(*)(double, float, float, int), SvIV(c_func) );
	(*func)(d0, f1, f2, i3);

double
nci_ddffi( c_func, d0, f1, f2, i3 )
	SV* c_func
	double d0
	float f1
	float f2
	int i3
PREINIT:
	double(*func)(double, float, float, int);
CODE:
	func   = INT2PTR(double(*)(double, float, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2, i3);
OUTPUT:
	RETVAL

short
nci_sdffi( c_func, d0, f1, f2, i3 )
	SV* c_func
	double d0
	float f1
	float f2
	int i3
PREINIT:
	short(*func)(double, float, float, int);
CODE:
	func   = INT2PTR(short(*)(double, float, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2, i3);
OUTPUT:
	RETVAL

float
nci_fdffi( c_func, d0, f1, f2, i3 )
	SV* c_func
	double d0
	float f1
	float f2
	int i3
PREINIT:
	float(*func)(double, float, float, int);
CODE:
	func   = INT2PTR(float(*)(double, float, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2, i3);
OUTPUT:
	RETVAL

char *
nci_tdffi( c_func, d0, f1, f2, i3 )
	SV* c_func
	double d0
	float f1
	float f2
	int i3
PREINIT:
	char *(*func)(double, float, float, int);
CODE:
	func   = INT2PTR(char *(*)(double, float, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2, i3);
OUTPUT:
	RETVAL

int
nci_idffi( c_func, d0, f1, f2, i3 )
	SV* c_func
	double d0
	float f1
	float f2
	int i3
PREINIT:
	int(*func)(double, float, float, int);
CODE:
	func   = INT2PTR(int(*)(double, float, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, f2, i3);
OUTPUT:
	RETVAL

void *
nci_psffi( c_func, s0, f1, f2, i3 )
	SV* c_func
	short s0
	float f1
	float f2
	int i3
PREINIT:
	void *(*func)(short, float, float, int);
CODE:
	func   = INT2PTR(void *(*)(short, float, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2, i3);
OUTPUT:
	RETVAL

void
nci_vsffi( c_func, s0, f1, f2, i3 )
	SV* c_func
	short s0
	float f1
	float f2
	int i3
PREINIT:
	void(*func)(short, float, float, int);
CODE:
	func   = INT2PTR(void(*)(short, float, float, int), SvIV(c_func) );
	(*func)(s0, f1, f2, i3);

double
nci_dsffi( c_func, s0, f1, f2, i3 )
	SV* c_func
	short s0
	float f1
	float f2
	int i3
PREINIT:
	double(*func)(short, float, float, int);
CODE:
	func   = INT2PTR(double(*)(short, float, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2, i3);
OUTPUT:
	RETVAL

short
nci_ssffi( c_func, s0, f1, f2, i3 )
	SV* c_func
	short s0
	float f1
	float f2
	int i3
PREINIT:
	short(*func)(short, float, float, int);
CODE:
	func   = INT2PTR(short(*)(short, float, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2, i3);
OUTPUT:
	RETVAL

float
nci_fsffi( c_func, s0, f1, f2, i3 )
	SV* c_func
	short s0
	float f1
	float f2
	int i3
PREINIT:
	float(*func)(short, float, float, int);
CODE:
	func   = INT2PTR(float(*)(short, float, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2, i3);
OUTPUT:
	RETVAL

char *
nci_tsffi( c_func, s0, f1, f2, i3 )
	SV* c_func
	short s0
	float f1
	float f2
	int i3
PREINIT:
	char *(*func)(short, float, float, int);
CODE:
	func   = INT2PTR(char *(*)(short, float, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2, i3);
OUTPUT:
	RETVAL

int
nci_isffi( c_func, s0, f1, f2, i3 )
	SV* c_func
	short s0
	float f1
	float f2
	int i3
PREINIT:
	int(*func)(short, float, float, int);
CODE:
	func   = INT2PTR(int(*)(short, float, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, f2, i3);
OUTPUT:
	RETVAL

void *
nci_pfffi( c_func, f0, f1, f2, i3 )
	SV* c_func
	float f0
	float f1
	float f2
	int i3
PREINIT:
	void *(*func)(float, float, float, int);
CODE:
	func   = INT2PTR(void *(*)(float, float, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2, i3);
OUTPUT:
	RETVAL

void
nci_vfffi( c_func, f0, f1, f2, i3 )
	SV* c_func
	float f0
	float f1
	float f2
	int i3
PREINIT:
	void(*func)(float, float, float, int);
CODE:
	func   = INT2PTR(void(*)(float, float, float, int), SvIV(c_func) );
	(*func)(f0, f1, f2, i3);

double
nci_dfffi( c_func, f0, f1, f2, i3 )
	SV* c_func
	float f0
	float f1
	float f2
	int i3
PREINIT:
	double(*func)(float, float, float, int);
CODE:
	func   = INT2PTR(double(*)(float, float, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2, i3);
OUTPUT:
	RETVAL

short
nci_sfffi( c_func, f0, f1, f2, i3 )
	SV* c_func
	float f0
	float f1
	float f2
	int i3
PREINIT:
	short(*func)(float, float, float, int);
CODE:
	func   = INT2PTR(short(*)(float, float, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2, i3);
OUTPUT:
	RETVAL

float
nci_ffffi( c_func, f0, f1, f2, i3 )
	SV* c_func
	float f0
	float f1
	float f2
	int i3
PREINIT:
	float(*func)(float, float, float, int);
CODE:
	func   = INT2PTR(float(*)(float, float, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2, i3);
OUTPUT:
	RETVAL

char *
nci_tfffi( c_func, f0, f1, f2, i3 )
	SV* c_func
	float f0
	float f1
	float f2
	int i3
PREINIT:
	char *(*func)(float, float, float, int);
CODE:
	func   = INT2PTR(char *(*)(float, float, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2, i3);
OUTPUT:
	RETVAL

int
nci_ifffi( c_func, f0, f1, f2, i3 )
	SV* c_func
	float f0
	float f1
	float f2
	int i3
PREINIT:
	int(*func)(float, float, float, int);
CODE:
	func   = INT2PTR(int(*)(float, float, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, f2, i3);
OUTPUT:
	RETVAL

void *
nci_ptffi( c_func, t0, f1, f2, i3 )
	SV* c_func
	char * t0
	float f1
	float f2
	int i3
PREINIT:
	void *(*func)(char *, float, float, int);
CODE:
	func   = INT2PTR(void *(*)(char *, float, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2, i3);
OUTPUT:
	RETVAL

void
nci_vtffi( c_func, t0, f1, f2, i3 )
	SV* c_func
	char * t0
	float f1
	float f2
	int i3
PREINIT:
	void(*func)(char *, float, float, int);
CODE:
	func   = INT2PTR(void(*)(char *, float, float, int), SvIV(c_func) );
	(*func)(t0, f1, f2, i3);

double
nci_dtffi( c_func, t0, f1, f2, i3 )
	SV* c_func
	char * t0
	float f1
	float f2
	int i3
PREINIT:
	double(*func)(char *, float, float, int);
CODE:
	func   = INT2PTR(double(*)(char *, float, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2, i3);
OUTPUT:
	RETVAL

short
nci_stffi( c_func, t0, f1, f2, i3 )
	SV* c_func
	char * t0
	float f1
	float f2
	int i3
PREINIT:
	short(*func)(char *, float, float, int);
CODE:
	func   = INT2PTR(short(*)(char *, float, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2, i3);
OUTPUT:
	RETVAL

float
nci_ftffi( c_func, t0, f1, f2, i3 )
	SV* c_func
	char * t0
	float f1
	float f2
	int i3
PREINIT:
	float(*func)(char *, float, float, int);
CODE:
	func   = INT2PTR(float(*)(char *, float, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2, i3);
OUTPUT:
	RETVAL

char *
nci_ttffi( c_func, t0, f1, f2, i3 )
	SV* c_func
	char * t0
	float f1
	float f2
	int i3
PREINIT:
	char *(*func)(char *, float, float, int);
CODE:
	func   = INT2PTR(char *(*)(char *, float, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2, i3);
OUTPUT:
	RETVAL

int
nci_itffi( c_func, t0, f1, f2, i3 )
	SV* c_func
	char * t0
	float f1
	float f2
	int i3
PREINIT:
	int(*func)(char *, float, float, int);
CODE:
	func   = INT2PTR(int(*)(char *, float, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, f2, i3);
OUTPUT:
	RETVAL

void *
nci_piffi( c_func, i0, f1, f2, i3 )
	SV* c_func
	int i0
	float f1
	float f2
	int i3
PREINIT:
	void *(*func)(int, float, float, int);
CODE:
	func   = INT2PTR(void *(*)(int, float, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2, i3);
OUTPUT:
	RETVAL

void
nci_viffi( c_func, i0, f1, f2, i3 )
	SV* c_func
	int i0
	float f1
	float f2
	int i3
PREINIT:
	void(*func)(int, float, float, int);
CODE:
	func   = INT2PTR(void(*)(int, float, float, int), SvIV(c_func) );
	(*func)(i0, f1, f2, i3);

double
nci_diffi( c_func, i0, f1, f2, i3 )
	SV* c_func
	int i0
	float f1
	float f2
	int i3
PREINIT:
	double(*func)(int, float, float, int);
CODE:
	func   = INT2PTR(double(*)(int, float, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2, i3);
OUTPUT:
	RETVAL

short
nci_siffi( c_func, i0, f1, f2, i3 )
	SV* c_func
	int i0
	float f1
	float f2
	int i3
PREINIT:
	short(*func)(int, float, float, int);
CODE:
	func   = INT2PTR(short(*)(int, float, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2, i3);
OUTPUT:
	RETVAL

float
nci_fiffi( c_func, i0, f1, f2, i3 )
	SV* c_func
	int i0
	float f1
	float f2
	int i3
PREINIT:
	float(*func)(int, float, float, int);
CODE:
	func   = INT2PTR(float(*)(int, float, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2, i3);
OUTPUT:
	RETVAL

char *
nci_tiffi( c_func, i0, f1, f2, i3 )
	SV* c_func
	int i0
	float f1
	float f2
	int i3
PREINIT:
	char *(*func)(int, float, float, int);
CODE:
	func   = INT2PTR(char *(*)(int, float, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2, i3);
OUTPUT:
	RETVAL

int
nci_iiffi( c_func, i0, f1, f2, i3 )
	SV* c_func
	int i0
	float f1
	float f2
	int i3
PREINIT:
	int(*func)(int, float, float, int);
CODE:
	func   = INT2PTR(int(*)(int, float, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, f2, i3);
OUTPUT:
	RETVAL

void *
nci_pptfi( c_func, p0, t1, f2, i3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	int i3
PREINIT:
	void *(*func)(void *, char *, float, int);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2, i3);
OUTPUT:
	RETVAL

void
nci_vptfi( c_func, p0, t1, f2, i3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	int i3
PREINIT:
	void(*func)(void *, char *, float, int);
CODE:
	func   = INT2PTR(void(*)(void *, char *, float, int), SvIV(c_func) );
	(*func)(p0, t1, f2, i3);

double
nci_dptfi( c_func, p0, t1, f2, i3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	int i3
PREINIT:
	double(*func)(void *, char *, float, int);
CODE:
	func   = INT2PTR(double(*)(void *, char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2, i3);
OUTPUT:
	RETVAL

short
nci_sptfi( c_func, p0, t1, f2, i3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	int i3
PREINIT:
	short(*func)(void *, char *, float, int);
CODE:
	func   = INT2PTR(short(*)(void *, char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2, i3);
OUTPUT:
	RETVAL

float
nci_fptfi( c_func, p0, t1, f2, i3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	int i3
PREINIT:
	float(*func)(void *, char *, float, int);
CODE:
	func   = INT2PTR(float(*)(void *, char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2, i3);
OUTPUT:
	RETVAL

char *
nci_tptfi( c_func, p0, t1, f2, i3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	int i3
PREINIT:
	char *(*func)(void *, char *, float, int);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2, i3);
OUTPUT:
	RETVAL

int
nci_iptfi( c_func, p0, t1, f2, i3 )
	SV* c_func
	void * p0
	char * t1
	float f2
	int i3
PREINIT:
	int(*func)(void *, char *, float, int);
CODE:
	func   = INT2PTR(int(*)(void *, char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, f2, i3);
OUTPUT:
	RETVAL

void *
nci_pvtfi( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvtfi( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvtfi( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svtfi( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvtfi( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvtfi( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivtfi( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdtfi( c_func, d0, t1, f2, i3 )
	SV* c_func
	double d0
	char * t1
	float f2
	int i3
PREINIT:
	void *(*func)(double, char *, float, int);
CODE:
	func   = INT2PTR(void *(*)(double, char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2, i3);
OUTPUT:
	RETVAL

void
nci_vdtfi( c_func, d0, t1, f2, i3 )
	SV* c_func
	double d0
	char * t1
	float f2
	int i3
PREINIT:
	void(*func)(double, char *, float, int);
CODE:
	func   = INT2PTR(void(*)(double, char *, float, int), SvIV(c_func) );
	(*func)(d0, t1, f2, i3);

double
nci_ddtfi( c_func, d0, t1, f2, i3 )
	SV* c_func
	double d0
	char * t1
	float f2
	int i3
PREINIT:
	double(*func)(double, char *, float, int);
CODE:
	func   = INT2PTR(double(*)(double, char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2, i3);
OUTPUT:
	RETVAL

short
nci_sdtfi( c_func, d0, t1, f2, i3 )
	SV* c_func
	double d0
	char * t1
	float f2
	int i3
PREINIT:
	short(*func)(double, char *, float, int);
CODE:
	func   = INT2PTR(short(*)(double, char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2, i3);
OUTPUT:
	RETVAL

float
nci_fdtfi( c_func, d0, t1, f2, i3 )
	SV* c_func
	double d0
	char * t1
	float f2
	int i3
PREINIT:
	float(*func)(double, char *, float, int);
CODE:
	func   = INT2PTR(float(*)(double, char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2, i3);
OUTPUT:
	RETVAL

char *
nci_tdtfi( c_func, d0, t1, f2, i3 )
	SV* c_func
	double d0
	char * t1
	float f2
	int i3
PREINIT:
	char *(*func)(double, char *, float, int);
CODE:
	func   = INT2PTR(char *(*)(double, char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2, i3);
OUTPUT:
	RETVAL

int
nci_idtfi( c_func, d0, t1, f2, i3 )
	SV* c_func
	double d0
	char * t1
	float f2
	int i3
PREINIT:
	int(*func)(double, char *, float, int);
CODE:
	func   = INT2PTR(int(*)(double, char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, f2, i3);
OUTPUT:
	RETVAL

void *
nci_pstfi( c_func, s0, t1, f2, i3 )
	SV* c_func
	short s0
	char * t1
	float f2
	int i3
PREINIT:
	void *(*func)(short, char *, float, int);
CODE:
	func   = INT2PTR(void *(*)(short, char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2, i3);
OUTPUT:
	RETVAL

void
nci_vstfi( c_func, s0, t1, f2, i3 )
	SV* c_func
	short s0
	char * t1
	float f2
	int i3
PREINIT:
	void(*func)(short, char *, float, int);
CODE:
	func   = INT2PTR(void(*)(short, char *, float, int), SvIV(c_func) );
	(*func)(s0, t1, f2, i3);

double
nci_dstfi( c_func, s0, t1, f2, i3 )
	SV* c_func
	short s0
	char * t1
	float f2
	int i3
PREINIT:
	double(*func)(short, char *, float, int);
CODE:
	func   = INT2PTR(double(*)(short, char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2, i3);
OUTPUT:
	RETVAL

short
nci_sstfi( c_func, s0, t1, f2, i3 )
	SV* c_func
	short s0
	char * t1
	float f2
	int i3
PREINIT:
	short(*func)(short, char *, float, int);
CODE:
	func   = INT2PTR(short(*)(short, char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2, i3);
OUTPUT:
	RETVAL

float
nci_fstfi( c_func, s0, t1, f2, i3 )
	SV* c_func
	short s0
	char * t1
	float f2
	int i3
PREINIT:
	float(*func)(short, char *, float, int);
CODE:
	func   = INT2PTR(float(*)(short, char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2, i3);
OUTPUT:
	RETVAL

char *
nci_tstfi( c_func, s0, t1, f2, i3 )
	SV* c_func
	short s0
	char * t1
	float f2
	int i3
PREINIT:
	char *(*func)(short, char *, float, int);
CODE:
	func   = INT2PTR(char *(*)(short, char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2, i3);
OUTPUT:
	RETVAL

int
nci_istfi( c_func, s0, t1, f2, i3 )
	SV* c_func
	short s0
	char * t1
	float f2
	int i3
PREINIT:
	int(*func)(short, char *, float, int);
CODE:
	func   = INT2PTR(int(*)(short, char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, f2, i3);
OUTPUT:
	RETVAL

void *
nci_pftfi( c_func, f0, t1, f2, i3 )
	SV* c_func
	float f0
	char * t1
	float f2
	int i3
PREINIT:
	void *(*func)(float, char *, float, int);
CODE:
	func   = INT2PTR(void *(*)(float, char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2, i3);
OUTPUT:
	RETVAL

void
nci_vftfi( c_func, f0, t1, f2, i3 )
	SV* c_func
	float f0
	char * t1
	float f2
	int i3
PREINIT:
	void(*func)(float, char *, float, int);
CODE:
	func   = INT2PTR(void(*)(float, char *, float, int), SvIV(c_func) );
	(*func)(f0, t1, f2, i3);

double
nci_dftfi( c_func, f0, t1, f2, i3 )
	SV* c_func
	float f0
	char * t1
	float f2
	int i3
PREINIT:
	double(*func)(float, char *, float, int);
CODE:
	func   = INT2PTR(double(*)(float, char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2, i3);
OUTPUT:
	RETVAL

short
nci_sftfi( c_func, f0, t1, f2, i3 )
	SV* c_func
	float f0
	char * t1
	float f2
	int i3
PREINIT:
	short(*func)(float, char *, float, int);
CODE:
	func   = INT2PTR(short(*)(float, char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2, i3);
OUTPUT:
	RETVAL

float
nci_fftfi( c_func, f0, t1, f2, i3 )
	SV* c_func
	float f0
	char * t1
	float f2
	int i3
PREINIT:
	float(*func)(float, char *, float, int);
CODE:
	func   = INT2PTR(float(*)(float, char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2, i3);
OUTPUT:
	RETVAL

char *
nci_tftfi( c_func, f0, t1, f2, i3 )
	SV* c_func
	float f0
	char * t1
	float f2
	int i3
PREINIT:
	char *(*func)(float, char *, float, int);
CODE:
	func   = INT2PTR(char *(*)(float, char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2, i3);
OUTPUT:
	RETVAL

int
nci_iftfi( c_func, f0, t1, f2, i3 )
	SV* c_func
	float f0
	char * t1
	float f2
	int i3
PREINIT:
	int(*func)(float, char *, float, int);
CODE:
	func   = INT2PTR(int(*)(float, char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, f2, i3);
OUTPUT:
	RETVAL

void *
nci_pttfi( c_func, t0, t1, f2, i3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	int i3
PREINIT:
	void *(*func)(char *, char *, float, int);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2, i3);
OUTPUT:
	RETVAL

void
nci_vttfi( c_func, t0, t1, f2, i3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	int i3
PREINIT:
	void(*func)(char *, char *, float, int);
CODE:
	func   = INT2PTR(void(*)(char *, char *, float, int), SvIV(c_func) );
	(*func)(t0, t1, f2, i3);

double
nci_dttfi( c_func, t0, t1, f2, i3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	int i3
PREINIT:
	double(*func)(char *, char *, float, int);
CODE:
	func   = INT2PTR(double(*)(char *, char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2, i3);
OUTPUT:
	RETVAL

short
nci_sttfi( c_func, t0, t1, f2, i3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	int i3
PREINIT:
	short(*func)(char *, char *, float, int);
CODE:
	func   = INT2PTR(short(*)(char *, char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2, i3);
OUTPUT:
	RETVAL

float
nci_fttfi( c_func, t0, t1, f2, i3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	int i3
PREINIT:
	float(*func)(char *, char *, float, int);
CODE:
	func   = INT2PTR(float(*)(char *, char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2, i3);
OUTPUT:
	RETVAL

char *
nci_tttfi( c_func, t0, t1, f2, i3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	int i3
PREINIT:
	char *(*func)(char *, char *, float, int);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2, i3);
OUTPUT:
	RETVAL

int
nci_ittfi( c_func, t0, t1, f2, i3 )
	SV* c_func
	char * t0
	char * t1
	float f2
	int i3
PREINIT:
	int(*func)(char *, char *, float, int);
CODE:
	func   = INT2PTR(int(*)(char *, char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, f2, i3);
OUTPUT:
	RETVAL

void *
nci_pitfi( c_func, i0, t1, f2, i3 )
	SV* c_func
	int i0
	char * t1
	float f2
	int i3
PREINIT:
	void *(*func)(int, char *, float, int);
CODE:
	func   = INT2PTR(void *(*)(int, char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2, i3);
OUTPUT:
	RETVAL

void
nci_vitfi( c_func, i0, t1, f2, i3 )
	SV* c_func
	int i0
	char * t1
	float f2
	int i3
PREINIT:
	void(*func)(int, char *, float, int);
CODE:
	func   = INT2PTR(void(*)(int, char *, float, int), SvIV(c_func) );
	(*func)(i0, t1, f2, i3);

double
nci_ditfi( c_func, i0, t1, f2, i3 )
	SV* c_func
	int i0
	char * t1
	float f2
	int i3
PREINIT:
	double(*func)(int, char *, float, int);
CODE:
	func   = INT2PTR(double(*)(int, char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2, i3);
OUTPUT:
	RETVAL

short
nci_sitfi( c_func, i0, t1, f2, i3 )
	SV* c_func
	int i0
	char * t1
	float f2
	int i3
PREINIT:
	short(*func)(int, char *, float, int);
CODE:
	func   = INT2PTR(short(*)(int, char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2, i3);
OUTPUT:
	RETVAL

float
nci_fitfi( c_func, i0, t1, f2, i3 )
	SV* c_func
	int i0
	char * t1
	float f2
	int i3
PREINIT:
	float(*func)(int, char *, float, int);
CODE:
	func   = INT2PTR(float(*)(int, char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2, i3);
OUTPUT:
	RETVAL

char *
nci_titfi( c_func, i0, t1, f2, i3 )
	SV* c_func
	int i0
	char * t1
	float f2
	int i3
PREINIT:
	char *(*func)(int, char *, float, int);
CODE:
	func   = INT2PTR(char *(*)(int, char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2, i3);
OUTPUT:
	RETVAL

int
nci_iitfi( c_func, i0, t1, f2, i3 )
	SV* c_func
	int i0
	char * t1
	float f2
	int i3
PREINIT:
	int(*func)(int, char *, float, int);
CODE:
	func   = INT2PTR(int(*)(int, char *, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, f2, i3);
OUTPUT:
	RETVAL

void *
nci_ppifi( c_func, p0, i1, f2, i3 )
	SV* c_func
	void * p0
	int i1
	float f2
	int i3
PREINIT:
	void *(*func)(void *, int, float, int);
CODE:
	func   = INT2PTR(void *(*)(void *, int, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2, i3);
OUTPUT:
	RETVAL

void
nci_vpifi( c_func, p0, i1, f2, i3 )
	SV* c_func
	void * p0
	int i1
	float f2
	int i3
PREINIT:
	void(*func)(void *, int, float, int);
CODE:
	func   = INT2PTR(void(*)(void *, int, float, int), SvIV(c_func) );
	(*func)(p0, i1, f2, i3);

double
nci_dpifi( c_func, p0, i1, f2, i3 )
	SV* c_func
	void * p0
	int i1
	float f2
	int i3
PREINIT:
	double(*func)(void *, int, float, int);
CODE:
	func   = INT2PTR(double(*)(void *, int, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2, i3);
OUTPUT:
	RETVAL

short
nci_spifi( c_func, p0, i1, f2, i3 )
	SV* c_func
	void * p0
	int i1
	float f2
	int i3
PREINIT:
	short(*func)(void *, int, float, int);
CODE:
	func   = INT2PTR(short(*)(void *, int, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2, i3);
OUTPUT:
	RETVAL

float
nci_fpifi( c_func, p0, i1, f2, i3 )
	SV* c_func
	void * p0
	int i1
	float f2
	int i3
PREINIT:
	float(*func)(void *, int, float, int);
CODE:
	func   = INT2PTR(float(*)(void *, int, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2, i3);
OUTPUT:
	RETVAL

char *
nci_tpifi( c_func, p0, i1, f2, i3 )
	SV* c_func
	void * p0
	int i1
	float f2
	int i3
PREINIT:
	char *(*func)(void *, int, float, int);
CODE:
	func   = INT2PTR(char *(*)(void *, int, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2, i3);
OUTPUT:
	RETVAL

int
nci_ipifi( c_func, p0, i1, f2, i3 )
	SV* c_func
	void * p0
	int i1
	float f2
	int i3
PREINIT:
	int(*func)(void *, int, float, int);
CODE:
	func   = INT2PTR(int(*)(void *, int, float, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, f2, i3);
OUTPUT:
	RETVAL

void *
nci_pvifi( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvifi( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvifi( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svifi( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvifi( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvifi( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivifi( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdifi( c_func, d0, i1, f2, i3 )
	SV* c_func
	double d0
	int i1
	float f2
	int i3
PREINIT:
	void *(*func)(double, int, float, int);
CODE:
	func   = INT2PTR(void *(*)(double, int, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2, i3);
OUTPUT:
	RETVAL

void
nci_vdifi( c_func, d0, i1, f2, i3 )
	SV* c_func
	double d0
	int i1
	float f2
	int i3
PREINIT:
	void(*func)(double, int, float, int);
CODE:
	func   = INT2PTR(void(*)(double, int, float, int), SvIV(c_func) );
	(*func)(d0, i1, f2, i3);

double
nci_ddifi( c_func, d0, i1, f2, i3 )
	SV* c_func
	double d0
	int i1
	float f2
	int i3
PREINIT:
	double(*func)(double, int, float, int);
CODE:
	func   = INT2PTR(double(*)(double, int, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2, i3);
OUTPUT:
	RETVAL

short
nci_sdifi( c_func, d0, i1, f2, i3 )
	SV* c_func
	double d0
	int i1
	float f2
	int i3
PREINIT:
	short(*func)(double, int, float, int);
CODE:
	func   = INT2PTR(short(*)(double, int, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2, i3);
OUTPUT:
	RETVAL

float
nci_fdifi( c_func, d0, i1, f2, i3 )
	SV* c_func
	double d0
	int i1
	float f2
	int i3
PREINIT:
	float(*func)(double, int, float, int);
CODE:
	func   = INT2PTR(float(*)(double, int, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2, i3);
OUTPUT:
	RETVAL

char *
nci_tdifi( c_func, d0, i1, f2, i3 )
	SV* c_func
	double d0
	int i1
	float f2
	int i3
PREINIT:
	char *(*func)(double, int, float, int);
CODE:
	func   = INT2PTR(char *(*)(double, int, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2, i3);
OUTPUT:
	RETVAL

int
nci_idifi( c_func, d0, i1, f2, i3 )
	SV* c_func
	double d0
	int i1
	float f2
	int i3
PREINIT:
	int(*func)(double, int, float, int);
CODE:
	func   = INT2PTR(int(*)(double, int, float, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, f2, i3);
OUTPUT:
	RETVAL

void *
nci_psifi( c_func, s0, i1, f2, i3 )
	SV* c_func
	short s0
	int i1
	float f2
	int i3
PREINIT:
	void *(*func)(short, int, float, int);
CODE:
	func   = INT2PTR(void *(*)(short, int, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2, i3);
OUTPUT:
	RETVAL

void
nci_vsifi( c_func, s0, i1, f2, i3 )
	SV* c_func
	short s0
	int i1
	float f2
	int i3
PREINIT:
	void(*func)(short, int, float, int);
CODE:
	func   = INT2PTR(void(*)(short, int, float, int), SvIV(c_func) );
	(*func)(s0, i1, f2, i3);

double
nci_dsifi( c_func, s0, i1, f2, i3 )
	SV* c_func
	short s0
	int i1
	float f2
	int i3
PREINIT:
	double(*func)(short, int, float, int);
CODE:
	func   = INT2PTR(double(*)(short, int, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2, i3);
OUTPUT:
	RETVAL

short
nci_ssifi( c_func, s0, i1, f2, i3 )
	SV* c_func
	short s0
	int i1
	float f2
	int i3
PREINIT:
	short(*func)(short, int, float, int);
CODE:
	func   = INT2PTR(short(*)(short, int, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2, i3);
OUTPUT:
	RETVAL

float
nci_fsifi( c_func, s0, i1, f2, i3 )
	SV* c_func
	short s0
	int i1
	float f2
	int i3
PREINIT:
	float(*func)(short, int, float, int);
CODE:
	func   = INT2PTR(float(*)(short, int, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2, i3);
OUTPUT:
	RETVAL

char *
nci_tsifi( c_func, s0, i1, f2, i3 )
	SV* c_func
	short s0
	int i1
	float f2
	int i3
PREINIT:
	char *(*func)(short, int, float, int);
CODE:
	func   = INT2PTR(char *(*)(short, int, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2, i3);
OUTPUT:
	RETVAL

int
nci_isifi( c_func, s0, i1, f2, i3 )
	SV* c_func
	short s0
	int i1
	float f2
	int i3
PREINIT:
	int(*func)(short, int, float, int);
CODE:
	func   = INT2PTR(int(*)(short, int, float, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, f2, i3);
OUTPUT:
	RETVAL

void *
nci_pfifi( c_func, f0, i1, f2, i3 )
	SV* c_func
	float f0
	int i1
	float f2
	int i3
PREINIT:
	void *(*func)(float, int, float, int);
CODE:
	func   = INT2PTR(void *(*)(float, int, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2, i3);
OUTPUT:
	RETVAL

void
nci_vfifi( c_func, f0, i1, f2, i3 )
	SV* c_func
	float f0
	int i1
	float f2
	int i3
PREINIT:
	void(*func)(float, int, float, int);
CODE:
	func   = INT2PTR(void(*)(float, int, float, int), SvIV(c_func) );
	(*func)(f0, i1, f2, i3);

double
nci_dfifi( c_func, f0, i1, f2, i3 )
	SV* c_func
	float f0
	int i1
	float f2
	int i3
PREINIT:
	double(*func)(float, int, float, int);
CODE:
	func   = INT2PTR(double(*)(float, int, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2, i3);
OUTPUT:
	RETVAL

short
nci_sfifi( c_func, f0, i1, f2, i3 )
	SV* c_func
	float f0
	int i1
	float f2
	int i3
PREINIT:
	short(*func)(float, int, float, int);
CODE:
	func   = INT2PTR(short(*)(float, int, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2, i3);
OUTPUT:
	RETVAL

float
nci_ffifi( c_func, f0, i1, f2, i3 )
	SV* c_func
	float f0
	int i1
	float f2
	int i3
PREINIT:
	float(*func)(float, int, float, int);
CODE:
	func   = INT2PTR(float(*)(float, int, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2, i3);
OUTPUT:
	RETVAL

char *
nci_tfifi( c_func, f0, i1, f2, i3 )
	SV* c_func
	float f0
	int i1
	float f2
	int i3
PREINIT:
	char *(*func)(float, int, float, int);
CODE:
	func   = INT2PTR(char *(*)(float, int, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2, i3);
OUTPUT:
	RETVAL

int
nci_ififi( c_func, f0, i1, f2, i3 )
	SV* c_func
	float f0
	int i1
	float f2
	int i3
PREINIT:
	int(*func)(float, int, float, int);
CODE:
	func   = INT2PTR(int(*)(float, int, float, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, f2, i3);
OUTPUT:
	RETVAL

void *
nci_ptifi( c_func, t0, i1, f2, i3 )
	SV* c_func
	char * t0
	int i1
	float f2
	int i3
PREINIT:
	void *(*func)(char *, int, float, int);
CODE:
	func   = INT2PTR(void *(*)(char *, int, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2, i3);
OUTPUT:
	RETVAL

void
nci_vtifi( c_func, t0, i1, f2, i3 )
	SV* c_func
	char * t0
	int i1
	float f2
	int i3
PREINIT:
	void(*func)(char *, int, float, int);
CODE:
	func   = INT2PTR(void(*)(char *, int, float, int), SvIV(c_func) );
	(*func)(t0, i1, f2, i3);

double
nci_dtifi( c_func, t0, i1, f2, i3 )
	SV* c_func
	char * t0
	int i1
	float f2
	int i3
PREINIT:
	double(*func)(char *, int, float, int);
CODE:
	func   = INT2PTR(double(*)(char *, int, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2, i3);
OUTPUT:
	RETVAL

short
nci_stifi( c_func, t0, i1, f2, i3 )
	SV* c_func
	char * t0
	int i1
	float f2
	int i3
PREINIT:
	short(*func)(char *, int, float, int);
CODE:
	func   = INT2PTR(short(*)(char *, int, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2, i3);
OUTPUT:
	RETVAL

float
nci_ftifi( c_func, t0, i1, f2, i3 )
	SV* c_func
	char * t0
	int i1
	float f2
	int i3
PREINIT:
	float(*func)(char *, int, float, int);
CODE:
	func   = INT2PTR(float(*)(char *, int, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2, i3);
OUTPUT:
	RETVAL

char *
nci_ttifi( c_func, t0, i1, f2, i3 )
	SV* c_func
	char * t0
	int i1
	float f2
	int i3
PREINIT:
	char *(*func)(char *, int, float, int);
CODE:
	func   = INT2PTR(char *(*)(char *, int, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2, i3);
OUTPUT:
	RETVAL

int
nci_itifi( c_func, t0, i1, f2, i3 )
	SV* c_func
	char * t0
	int i1
	float f2
	int i3
PREINIT:
	int(*func)(char *, int, float, int);
CODE:
	func   = INT2PTR(int(*)(char *, int, float, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, f2, i3);
OUTPUT:
	RETVAL

void *
nci_piifi( c_func, i0, i1, f2, i3 )
	SV* c_func
	int i0
	int i1
	float f2
	int i3
PREINIT:
	void *(*func)(int, int, float, int);
CODE:
	func   = INT2PTR(void *(*)(int, int, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2, i3);
OUTPUT:
	RETVAL

void
nci_viifi( c_func, i0, i1, f2, i3 )
	SV* c_func
	int i0
	int i1
	float f2
	int i3
PREINIT:
	void(*func)(int, int, float, int);
CODE:
	func   = INT2PTR(void(*)(int, int, float, int), SvIV(c_func) );
	(*func)(i0, i1, f2, i3);

double
nci_diifi( c_func, i0, i1, f2, i3 )
	SV* c_func
	int i0
	int i1
	float f2
	int i3
PREINIT:
	double(*func)(int, int, float, int);
CODE:
	func   = INT2PTR(double(*)(int, int, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2, i3);
OUTPUT:
	RETVAL

short
nci_siifi( c_func, i0, i1, f2, i3 )
	SV* c_func
	int i0
	int i1
	float f2
	int i3
PREINIT:
	short(*func)(int, int, float, int);
CODE:
	func   = INT2PTR(short(*)(int, int, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2, i3);
OUTPUT:
	RETVAL

float
nci_fiifi( c_func, i0, i1, f2, i3 )
	SV* c_func
	int i0
	int i1
	float f2
	int i3
PREINIT:
	float(*func)(int, int, float, int);
CODE:
	func   = INT2PTR(float(*)(int, int, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2, i3);
OUTPUT:
	RETVAL

char *
nci_tiifi( c_func, i0, i1, f2, i3 )
	SV* c_func
	int i0
	int i1
	float f2
	int i3
PREINIT:
	char *(*func)(int, int, float, int);
CODE:
	func   = INT2PTR(char *(*)(int, int, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2, i3);
OUTPUT:
	RETVAL

int
nci_iiifi( c_func, i0, i1, f2, i3 )
	SV* c_func
	int i0
	int i1
	float f2
	int i3
PREINIT:
	int(*func)(int, int, float, int);
CODE:
	func   = INT2PTR(int(*)(int, int, float, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, f2, i3);
OUTPUT:
	RETVAL

void *
nci_pppti( c_func, p0, p1, t2, i3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	int i3
PREINIT:
	void *(*func)(void *, void *, char *, int);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2, i3);
OUTPUT:
	RETVAL

void
nci_vppti( c_func, p0, p1, t2, i3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	int i3
PREINIT:
	void(*func)(void *, void *, char *, int);
CODE:
	func   = INT2PTR(void(*)(void *, void *, char *, int), SvIV(c_func) );
	(*func)(p0, p1, t2, i3);

double
nci_dppti( c_func, p0, p1, t2, i3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	int i3
PREINIT:
	double(*func)(void *, void *, char *, int);
CODE:
	func   = INT2PTR(double(*)(void *, void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2, i3);
OUTPUT:
	RETVAL

short
nci_sppti( c_func, p0, p1, t2, i3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	int i3
PREINIT:
	short(*func)(void *, void *, char *, int);
CODE:
	func   = INT2PTR(short(*)(void *, void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2, i3);
OUTPUT:
	RETVAL

float
nci_fppti( c_func, p0, p1, t2, i3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	int i3
PREINIT:
	float(*func)(void *, void *, char *, int);
CODE:
	func   = INT2PTR(float(*)(void *, void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2, i3);
OUTPUT:
	RETVAL

char *
nci_tppti( c_func, p0, p1, t2, i3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	int i3
PREINIT:
	char *(*func)(void *, void *, char *, int);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2, i3);
OUTPUT:
	RETVAL

int
nci_ippti( c_func, p0, p1, t2, i3 )
	SV* c_func
	void * p0
	void * p1
	char * t2
	int i3
PREINIT:
	int(*func)(void *, void *, char *, int);
CODE:
	func   = INT2PTR(int(*)(void *, void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, t2, i3);
OUTPUT:
	RETVAL

void *
nci_pvpti( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvpti( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvpti( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svpti( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvpti( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvpti( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivpti( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdpti( c_func, d0, p1, t2, i3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	int i3
PREINIT:
	void *(*func)(double, void *, char *, int);
CODE:
	func   = INT2PTR(void *(*)(double, void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2, i3);
OUTPUT:
	RETVAL

void
nci_vdpti( c_func, d0, p1, t2, i3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	int i3
PREINIT:
	void(*func)(double, void *, char *, int);
CODE:
	func   = INT2PTR(void(*)(double, void *, char *, int), SvIV(c_func) );
	(*func)(d0, p1, t2, i3);

double
nci_ddpti( c_func, d0, p1, t2, i3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	int i3
PREINIT:
	double(*func)(double, void *, char *, int);
CODE:
	func   = INT2PTR(double(*)(double, void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2, i3);
OUTPUT:
	RETVAL

short
nci_sdpti( c_func, d0, p1, t2, i3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	int i3
PREINIT:
	short(*func)(double, void *, char *, int);
CODE:
	func   = INT2PTR(short(*)(double, void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2, i3);
OUTPUT:
	RETVAL

float
nci_fdpti( c_func, d0, p1, t2, i3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	int i3
PREINIT:
	float(*func)(double, void *, char *, int);
CODE:
	func   = INT2PTR(float(*)(double, void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2, i3);
OUTPUT:
	RETVAL

char *
nci_tdpti( c_func, d0, p1, t2, i3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	int i3
PREINIT:
	char *(*func)(double, void *, char *, int);
CODE:
	func   = INT2PTR(char *(*)(double, void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2, i3);
OUTPUT:
	RETVAL

int
nci_idpti( c_func, d0, p1, t2, i3 )
	SV* c_func
	double d0
	void * p1
	char * t2
	int i3
PREINIT:
	int(*func)(double, void *, char *, int);
CODE:
	func   = INT2PTR(int(*)(double, void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, t2, i3);
OUTPUT:
	RETVAL

void *
nci_pspti( c_func, s0, p1, t2, i3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	int i3
PREINIT:
	void *(*func)(short, void *, char *, int);
CODE:
	func   = INT2PTR(void *(*)(short, void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2, i3);
OUTPUT:
	RETVAL

void
nci_vspti( c_func, s0, p1, t2, i3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	int i3
PREINIT:
	void(*func)(short, void *, char *, int);
CODE:
	func   = INT2PTR(void(*)(short, void *, char *, int), SvIV(c_func) );
	(*func)(s0, p1, t2, i3);

double
nci_dspti( c_func, s0, p1, t2, i3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	int i3
PREINIT:
	double(*func)(short, void *, char *, int);
CODE:
	func   = INT2PTR(double(*)(short, void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2, i3);
OUTPUT:
	RETVAL

short
nci_sspti( c_func, s0, p1, t2, i3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	int i3
PREINIT:
	short(*func)(short, void *, char *, int);
CODE:
	func   = INT2PTR(short(*)(short, void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2, i3);
OUTPUT:
	RETVAL

float
nci_fspti( c_func, s0, p1, t2, i3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	int i3
PREINIT:
	float(*func)(short, void *, char *, int);
CODE:
	func   = INT2PTR(float(*)(short, void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2, i3);
OUTPUT:
	RETVAL

char *
nci_tspti( c_func, s0, p1, t2, i3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	int i3
PREINIT:
	char *(*func)(short, void *, char *, int);
CODE:
	func   = INT2PTR(char *(*)(short, void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2, i3);
OUTPUT:
	RETVAL

int
nci_ispti( c_func, s0, p1, t2, i3 )
	SV* c_func
	short s0
	void * p1
	char * t2
	int i3
PREINIT:
	int(*func)(short, void *, char *, int);
CODE:
	func   = INT2PTR(int(*)(short, void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, t2, i3);
OUTPUT:
	RETVAL

void *
nci_pfpti( c_func, f0, p1, t2, i3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	int i3
PREINIT:
	void *(*func)(float, void *, char *, int);
CODE:
	func   = INT2PTR(void *(*)(float, void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2, i3);
OUTPUT:
	RETVAL

void
nci_vfpti( c_func, f0, p1, t2, i3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	int i3
PREINIT:
	void(*func)(float, void *, char *, int);
CODE:
	func   = INT2PTR(void(*)(float, void *, char *, int), SvIV(c_func) );
	(*func)(f0, p1, t2, i3);

double
nci_dfpti( c_func, f0, p1, t2, i3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	int i3
PREINIT:
	double(*func)(float, void *, char *, int);
CODE:
	func   = INT2PTR(double(*)(float, void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2, i3);
OUTPUT:
	RETVAL

short
nci_sfpti( c_func, f0, p1, t2, i3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	int i3
PREINIT:
	short(*func)(float, void *, char *, int);
CODE:
	func   = INT2PTR(short(*)(float, void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2, i3);
OUTPUT:
	RETVAL

float
nci_ffpti( c_func, f0, p1, t2, i3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	int i3
PREINIT:
	float(*func)(float, void *, char *, int);
CODE:
	func   = INT2PTR(float(*)(float, void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2, i3);
OUTPUT:
	RETVAL

char *
nci_tfpti( c_func, f0, p1, t2, i3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	int i3
PREINIT:
	char *(*func)(float, void *, char *, int);
CODE:
	func   = INT2PTR(char *(*)(float, void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2, i3);
OUTPUT:
	RETVAL

int
nci_ifpti( c_func, f0, p1, t2, i3 )
	SV* c_func
	float f0
	void * p1
	char * t2
	int i3
PREINIT:
	int(*func)(float, void *, char *, int);
CODE:
	func   = INT2PTR(int(*)(float, void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, t2, i3);
OUTPUT:
	RETVAL

void *
nci_ptpti( c_func, t0, p1, t2, i3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	int i3
PREINIT:
	void *(*func)(char *, void *, char *, int);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2, i3);
OUTPUT:
	RETVAL

void
nci_vtpti( c_func, t0, p1, t2, i3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	int i3
PREINIT:
	void(*func)(char *, void *, char *, int);
CODE:
	func   = INT2PTR(void(*)(char *, void *, char *, int), SvIV(c_func) );
	(*func)(t0, p1, t2, i3);

double
nci_dtpti( c_func, t0, p1, t2, i3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	int i3
PREINIT:
	double(*func)(char *, void *, char *, int);
CODE:
	func   = INT2PTR(double(*)(char *, void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2, i3);
OUTPUT:
	RETVAL

short
nci_stpti( c_func, t0, p1, t2, i3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	int i3
PREINIT:
	short(*func)(char *, void *, char *, int);
CODE:
	func   = INT2PTR(short(*)(char *, void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2, i3);
OUTPUT:
	RETVAL

float
nci_ftpti( c_func, t0, p1, t2, i3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	int i3
PREINIT:
	float(*func)(char *, void *, char *, int);
CODE:
	func   = INT2PTR(float(*)(char *, void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2, i3);
OUTPUT:
	RETVAL

char *
nci_ttpti( c_func, t0, p1, t2, i3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	int i3
PREINIT:
	char *(*func)(char *, void *, char *, int);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2, i3);
OUTPUT:
	RETVAL

int
nci_itpti( c_func, t0, p1, t2, i3 )
	SV* c_func
	char * t0
	void * p1
	char * t2
	int i3
PREINIT:
	int(*func)(char *, void *, char *, int);
CODE:
	func   = INT2PTR(int(*)(char *, void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, t2, i3);
OUTPUT:
	RETVAL

void *
nci_pipti( c_func, i0, p1, t2, i3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	int i3
PREINIT:
	void *(*func)(int, void *, char *, int);
CODE:
	func   = INT2PTR(void *(*)(int, void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2, i3);
OUTPUT:
	RETVAL

void
nci_vipti( c_func, i0, p1, t2, i3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	int i3
PREINIT:
	void(*func)(int, void *, char *, int);
CODE:
	func   = INT2PTR(void(*)(int, void *, char *, int), SvIV(c_func) );
	(*func)(i0, p1, t2, i3);

double
nci_dipti( c_func, i0, p1, t2, i3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	int i3
PREINIT:
	double(*func)(int, void *, char *, int);
CODE:
	func   = INT2PTR(double(*)(int, void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2, i3);
OUTPUT:
	RETVAL

short
nci_sipti( c_func, i0, p1, t2, i3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	int i3
PREINIT:
	short(*func)(int, void *, char *, int);
CODE:
	func   = INT2PTR(short(*)(int, void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2, i3);
OUTPUT:
	RETVAL

float
nci_fipti( c_func, i0, p1, t2, i3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	int i3
PREINIT:
	float(*func)(int, void *, char *, int);
CODE:
	func   = INT2PTR(float(*)(int, void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2, i3);
OUTPUT:
	RETVAL

char *
nci_tipti( c_func, i0, p1, t2, i3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	int i3
PREINIT:
	char *(*func)(int, void *, char *, int);
CODE:
	func   = INT2PTR(char *(*)(int, void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2, i3);
OUTPUT:
	RETVAL

int
nci_iipti( c_func, i0, p1, t2, i3 )
	SV* c_func
	int i0
	void * p1
	char * t2
	int i3
PREINIT:
	int(*func)(int, void *, char *, int);
CODE:
	func   = INT2PTR(int(*)(int, void *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, t2, i3);
OUTPUT:
	RETVAL

void *
nci_ppdti( c_func, p0, d1, t2, i3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	int i3
PREINIT:
	void *(*func)(void *, double, char *, int);
CODE:
	func   = INT2PTR(void *(*)(void *, double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2, i3);
OUTPUT:
	RETVAL

void
nci_vpdti( c_func, p0, d1, t2, i3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	int i3
PREINIT:
	void(*func)(void *, double, char *, int);
CODE:
	func   = INT2PTR(void(*)(void *, double, char *, int), SvIV(c_func) );
	(*func)(p0, d1, t2, i3);

double
nci_dpdti( c_func, p0, d1, t2, i3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	int i3
PREINIT:
	double(*func)(void *, double, char *, int);
CODE:
	func   = INT2PTR(double(*)(void *, double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2, i3);
OUTPUT:
	RETVAL

short
nci_spdti( c_func, p0, d1, t2, i3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	int i3
PREINIT:
	short(*func)(void *, double, char *, int);
CODE:
	func   = INT2PTR(short(*)(void *, double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2, i3);
OUTPUT:
	RETVAL

float
nci_fpdti( c_func, p0, d1, t2, i3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	int i3
PREINIT:
	float(*func)(void *, double, char *, int);
CODE:
	func   = INT2PTR(float(*)(void *, double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2, i3);
OUTPUT:
	RETVAL

char *
nci_tpdti( c_func, p0, d1, t2, i3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	int i3
PREINIT:
	char *(*func)(void *, double, char *, int);
CODE:
	func   = INT2PTR(char *(*)(void *, double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2, i3);
OUTPUT:
	RETVAL

int
nci_ipdti( c_func, p0, d1, t2, i3 )
	SV* c_func
	void * p0
	double d1
	char * t2
	int i3
PREINIT:
	int(*func)(void *, double, char *, int);
CODE:
	func   = INT2PTR(int(*)(void *, double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, t2, i3);
OUTPUT:
	RETVAL

void *
nci_pvdti( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvdti( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvdti( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svdti( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvdti( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvdti( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivdti( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pddti( c_func, d0, d1, t2, i3 )
	SV* c_func
	double d0
	double d1
	char * t2
	int i3
PREINIT:
	void *(*func)(double, double, char *, int);
CODE:
	func   = INT2PTR(void *(*)(double, double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2, i3);
OUTPUT:
	RETVAL

void
nci_vddti( c_func, d0, d1, t2, i3 )
	SV* c_func
	double d0
	double d1
	char * t2
	int i3
PREINIT:
	void(*func)(double, double, char *, int);
CODE:
	func   = INT2PTR(void(*)(double, double, char *, int), SvIV(c_func) );
	(*func)(d0, d1, t2, i3);

double
nci_dddti( c_func, d0, d1, t2, i3 )
	SV* c_func
	double d0
	double d1
	char * t2
	int i3
PREINIT:
	double(*func)(double, double, char *, int);
CODE:
	func   = INT2PTR(double(*)(double, double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2, i3);
OUTPUT:
	RETVAL

short
nci_sddti( c_func, d0, d1, t2, i3 )
	SV* c_func
	double d0
	double d1
	char * t2
	int i3
PREINIT:
	short(*func)(double, double, char *, int);
CODE:
	func   = INT2PTR(short(*)(double, double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2, i3);
OUTPUT:
	RETVAL

float
nci_fddti( c_func, d0, d1, t2, i3 )
	SV* c_func
	double d0
	double d1
	char * t2
	int i3
PREINIT:
	float(*func)(double, double, char *, int);
CODE:
	func   = INT2PTR(float(*)(double, double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2, i3);
OUTPUT:
	RETVAL

char *
nci_tddti( c_func, d0, d1, t2, i3 )
	SV* c_func
	double d0
	double d1
	char * t2
	int i3
PREINIT:
	char *(*func)(double, double, char *, int);
CODE:
	func   = INT2PTR(char *(*)(double, double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2, i3);
OUTPUT:
	RETVAL

int
nci_iddti( c_func, d0, d1, t2, i3 )
	SV* c_func
	double d0
	double d1
	char * t2
	int i3
PREINIT:
	int(*func)(double, double, char *, int);
CODE:
	func   = INT2PTR(int(*)(double, double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, t2, i3);
OUTPUT:
	RETVAL

void *
nci_psdti( c_func, s0, d1, t2, i3 )
	SV* c_func
	short s0
	double d1
	char * t2
	int i3
PREINIT:
	void *(*func)(short, double, char *, int);
CODE:
	func   = INT2PTR(void *(*)(short, double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2, i3);
OUTPUT:
	RETVAL

void
nci_vsdti( c_func, s0, d1, t2, i3 )
	SV* c_func
	short s0
	double d1
	char * t2
	int i3
PREINIT:
	void(*func)(short, double, char *, int);
CODE:
	func   = INT2PTR(void(*)(short, double, char *, int), SvIV(c_func) );
	(*func)(s0, d1, t2, i3);

double
nci_dsdti( c_func, s0, d1, t2, i3 )
	SV* c_func
	short s0
	double d1
	char * t2
	int i3
PREINIT:
	double(*func)(short, double, char *, int);
CODE:
	func   = INT2PTR(double(*)(short, double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2, i3);
OUTPUT:
	RETVAL

short
nci_ssdti( c_func, s0, d1, t2, i3 )
	SV* c_func
	short s0
	double d1
	char * t2
	int i3
PREINIT:
	short(*func)(short, double, char *, int);
CODE:
	func   = INT2PTR(short(*)(short, double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2, i3);
OUTPUT:
	RETVAL

float
nci_fsdti( c_func, s0, d1, t2, i3 )
	SV* c_func
	short s0
	double d1
	char * t2
	int i3
PREINIT:
	float(*func)(short, double, char *, int);
CODE:
	func   = INT2PTR(float(*)(short, double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2, i3);
OUTPUT:
	RETVAL

char *
nci_tsdti( c_func, s0, d1, t2, i3 )
	SV* c_func
	short s0
	double d1
	char * t2
	int i3
PREINIT:
	char *(*func)(short, double, char *, int);
CODE:
	func   = INT2PTR(char *(*)(short, double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2, i3);
OUTPUT:
	RETVAL

int
nci_isdti( c_func, s0, d1, t2, i3 )
	SV* c_func
	short s0
	double d1
	char * t2
	int i3
PREINIT:
	int(*func)(short, double, char *, int);
CODE:
	func   = INT2PTR(int(*)(short, double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, t2, i3);
OUTPUT:
	RETVAL

void *
nci_pfdti( c_func, f0, d1, t2, i3 )
	SV* c_func
	float f0
	double d1
	char * t2
	int i3
PREINIT:
	void *(*func)(float, double, char *, int);
CODE:
	func   = INT2PTR(void *(*)(float, double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2, i3);
OUTPUT:
	RETVAL

void
nci_vfdti( c_func, f0, d1, t2, i3 )
	SV* c_func
	float f0
	double d1
	char * t2
	int i3
PREINIT:
	void(*func)(float, double, char *, int);
CODE:
	func   = INT2PTR(void(*)(float, double, char *, int), SvIV(c_func) );
	(*func)(f0, d1, t2, i3);

double
nci_dfdti( c_func, f0, d1, t2, i3 )
	SV* c_func
	float f0
	double d1
	char * t2
	int i3
PREINIT:
	double(*func)(float, double, char *, int);
CODE:
	func   = INT2PTR(double(*)(float, double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2, i3);
OUTPUT:
	RETVAL

short
nci_sfdti( c_func, f0, d1, t2, i3 )
	SV* c_func
	float f0
	double d1
	char * t2
	int i3
PREINIT:
	short(*func)(float, double, char *, int);
CODE:
	func   = INT2PTR(short(*)(float, double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2, i3);
OUTPUT:
	RETVAL

float
nci_ffdti( c_func, f0, d1, t2, i3 )
	SV* c_func
	float f0
	double d1
	char * t2
	int i3
PREINIT:
	float(*func)(float, double, char *, int);
CODE:
	func   = INT2PTR(float(*)(float, double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2, i3);
OUTPUT:
	RETVAL

char *
nci_tfdti( c_func, f0, d1, t2, i3 )
	SV* c_func
	float f0
	double d1
	char * t2
	int i3
PREINIT:
	char *(*func)(float, double, char *, int);
CODE:
	func   = INT2PTR(char *(*)(float, double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2, i3);
OUTPUT:
	RETVAL

int
nci_ifdti( c_func, f0, d1, t2, i3 )
	SV* c_func
	float f0
	double d1
	char * t2
	int i3
PREINIT:
	int(*func)(float, double, char *, int);
CODE:
	func   = INT2PTR(int(*)(float, double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, t2, i3);
OUTPUT:
	RETVAL

void *
nci_ptdti( c_func, t0, d1, t2, i3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	int i3
PREINIT:
	void *(*func)(char *, double, char *, int);
CODE:
	func   = INT2PTR(void *(*)(char *, double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2, i3);
OUTPUT:
	RETVAL

void
nci_vtdti( c_func, t0, d1, t2, i3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	int i3
PREINIT:
	void(*func)(char *, double, char *, int);
CODE:
	func   = INT2PTR(void(*)(char *, double, char *, int), SvIV(c_func) );
	(*func)(t0, d1, t2, i3);

double
nci_dtdti( c_func, t0, d1, t2, i3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	int i3
PREINIT:
	double(*func)(char *, double, char *, int);
CODE:
	func   = INT2PTR(double(*)(char *, double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2, i3);
OUTPUT:
	RETVAL

short
nci_stdti( c_func, t0, d1, t2, i3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	int i3
PREINIT:
	short(*func)(char *, double, char *, int);
CODE:
	func   = INT2PTR(short(*)(char *, double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2, i3);
OUTPUT:
	RETVAL

float
nci_ftdti( c_func, t0, d1, t2, i3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	int i3
PREINIT:
	float(*func)(char *, double, char *, int);
CODE:
	func   = INT2PTR(float(*)(char *, double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2, i3);
OUTPUT:
	RETVAL

char *
nci_ttdti( c_func, t0, d1, t2, i3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	int i3
PREINIT:
	char *(*func)(char *, double, char *, int);
CODE:
	func   = INT2PTR(char *(*)(char *, double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2, i3);
OUTPUT:
	RETVAL

int
nci_itdti( c_func, t0, d1, t2, i3 )
	SV* c_func
	char * t0
	double d1
	char * t2
	int i3
PREINIT:
	int(*func)(char *, double, char *, int);
CODE:
	func   = INT2PTR(int(*)(char *, double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, t2, i3);
OUTPUT:
	RETVAL

void *
nci_pidti( c_func, i0, d1, t2, i3 )
	SV* c_func
	int i0
	double d1
	char * t2
	int i3
PREINIT:
	void *(*func)(int, double, char *, int);
CODE:
	func   = INT2PTR(void *(*)(int, double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2, i3);
OUTPUT:
	RETVAL

void
nci_vidti( c_func, i0, d1, t2, i3 )
	SV* c_func
	int i0
	double d1
	char * t2
	int i3
PREINIT:
	void(*func)(int, double, char *, int);
CODE:
	func   = INT2PTR(void(*)(int, double, char *, int), SvIV(c_func) );
	(*func)(i0, d1, t2, i3);

double
nci_didti( c_func, i0, d1, t2, i3 )
	SV* c_func
	int i0
	double d1
	char * t2
	int i3
PREINIT:
	double(*func)(int, double, char *, int);
CODE:
	func   = INT2PTR(double(*)(int, double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2, i3);
OUTPUT:
	RETVAL

short
nci_sidti( c_func, i0, d1, t2, i3 )
	SV* c_func
	int i0
	double d1
	char * t2
	int i3
PREINIT:
	short(*func)(int, double, char *, int);
CODE:
	func   = INT2PTR(short(*)(int, double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2, i3);
OUTPUT:
	RETVAL

float
nci_fidti( c_func, i0, d1, t2, i3 )
	SV* c_func
	int i0
	double d1
	char * t2
	int i3
PREINIT:
	float(*func)(int, double, char *, int);
CODE:
	func   = INT2PTR(float(*)(int, double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2, i3);
OUTPUT:
	RETVAL

char *
nci_tidti( c_func, i0, d1, t2, i3 )
	SV* c_func
	int i0
	double d1
	char * t2
	int i3
PREINIT:
	char *(*func)(int, double, char *, int);
CODE:
	func   = INT2PTR(char *(*)(int, double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2, i3);
OUTPUT:
	RETVAL

int
nci_iidti( c_func, i0, d1, t2, i3 )
	SV* c_func
	int i0
	double d1
	char * t2
	int i3
PREINIT:
	int(*func)(int, double, char *, int);
CODE:
	func   = INT2PTR(int(*)(int, double, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, t2, i3);
OUTPUT:
	RETVAL

void *
nci_ppsti( c_func, p0, s1, t2, i3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	int i3
PREINIT:
	void *(*func)(void *, short, char *, int);
CODE:
	func   = INT2PTR(void *(*)(void *, short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2, i3);
OUTPUT:
	RETVAL

void
nci_vpsti( c_func, p0, s1, t2, i3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	int i3
PREINIT:
	void(*func)(void *, short, char *, int);
CODE:
	func   = INT2PTR(void(*)(void *, short, char *, int), SvIV(c_func) );
	(*func)(p0, s1, t2, i3);

double
nci_dpsti( c_func, p0, s1, t2, i3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	int i3
PREINIT:
	double(*func)(void *, short, char *, int);
CODE:
	func   = INT2PTR(double(*)(void *, short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2, i3);
OUTPUT:
	RETVAL

short
nci_spsti( c_func, p0, s1, t2, i3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	int i3
PREINIT:
	short(*func)(void *, short, char *, int);
CODE:
	func   = INT2PTR(short(*)(void *, short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2, i3);
OUTPUT:
	RETVAL

float
nci_fpsti( c_func, p0, s1, t2, i3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	int i3
PREINIT:
	float(*func)(void *, short, char *, int);
CODE:
	func   = INT2PTR(float(*)(void *, short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2, i3);
OUTPUT:
	RETVAL

char *
nci_tpsti( c_func, p0, s1, t2, i3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	int i3
PREINIT:
	char *(*func)(void *, short, char *, int);
CODE:
	func   = INT2PTR(char *(*)(void *, short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2, i3);
OUTPUT:
	RETVAL

int
nci_ipsti( c_func, p0, s1, t2, i3 )
	SV* c_func
	void * p0
	short s1
	char * t2
	int i3
PREINIT:
	int(*func)(void *, short, char *, int);
CODE:
	func   = INT2PTR(int(*)(void *, short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, t2, i3);
OUTPUT:
	RETVAL

void *
nci_pvsti( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvsti( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvsti( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svsti( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvsti( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvsti( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivsti( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdsti( c_func, d0, s1, t2, i3 )
	SV* c_func
	double d0
	short s1
	char * t2
	int i3
PREINIT:
	void *(*func)(double, short, char *, int);
CODE:
	func   = INT2PTR(void *(*)(double, short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2, i3);
OUTPUT:
	RETVAL

void
nci_vdsti( c_func, d0, s1, t2, i3 )
	SV* c_func
	double d0
	short s1
	char * t2
	int i3
PREINIT:
	void(*func)(double, short, char *, int);
CODE:
	func   = INT2PTR(void(*)(double, short, char *, int), SvIV(c_func) );
	(*func)(d0, s1, t2, i3);

double
nci_ddsti( c_func, d0, s1, t2, i3 )
	SV* c_func
	double d0
	short s1
	char * t2
	int i3
PREINIT:
	double(*func)(double, short, char *, int);
CODE:
	func   = INT2PTR(double(*)(double, short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2, i3);
OUTPUT:
	RETVAL

short
nci_sdsti( c_func, d0, s1, t2, i3 )
	SV* c_func
	double d0
	short s1
	char * t2
	int i3
PREINIT:
	short(*func)(double, short, char *, int);
CODE:
	func   = INT2PTR(short(*)(double, short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2, i3);
OUTPUT:
	RETVAL

float
nci_fdsti( c_func, d0, s1, t2, i3 )
	SV* c_func
	double d0
	short s1
	char * t2
	int i3
PREINIT:
	float(*func)(double, short, char *, int);
CODE:
	func   = INT2PTR(float(*)(double, short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2, i3);
OUTPUT:
	RETVAL

char *
nci_tdsti( c_func, d0, s1, t2, i3 )
	SV* c_func
	double d0
	short s1
	char * t2
	int i3
PREINIT:
	char *(*func)(double, short, char *, int);
CODE:
	func   = INT2PTR(char *(*)(double, short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2, i3);
OUTPUT:
	RETVAL

int
nci_idsti( c_func, d0, s1, t2, i3 )
	SV* c_func
	double d0
	short s1
	char * t2
	int i3
PREINIT:
	int(*func)(double, short, char *, int);
CODE:
	func   = INT2PTR(int(*)(double, short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, t2, i3);
OUTPUT:
	RETVAL

void *
nci_pssti( c_func, s0, s1, t2, i3 )
	SV* c_func
	short s0
	short s1
	char * t2
	int i3
PREINIT:
	void *(*func)(short, short, char *, int);
CODE:
	func   = INT2PTR(void *(*)(short, short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2, i3);
OUTPUT:
	RETVAL

void
nci_vssti( c_func, s0, s1, t2, i3 )
	SV* c_func
	short s0
	short s1
	char * t2
	int i3
PREINIT:
	void(*func)(short, short, char *, int);
CODE:
	func   = INT2PTR(void(*)(short, short, char *, int), SvIV(c_func) );
	(*func)(s0, s1, t2, i3);

double
nci_dssti( c_func, s0, s1, t2, i3 )
	SV* c_func
	short s0
	short s1
	char * t2
	int i3
PREINIT:
	double(*func)(short, short, char *, int);
CODE:
	func   = INT2PTR(double(*)(short, short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2, i3);
OUTPUT:
	RETVAL

short
nci_sssti( c_func, s0, s1, t2, i3 )
	SV* c_func
	short s0
	short s1
	char * t2
	int i3
PREINIT:
	short(*func)(short, short, char *, int);
CODE:
	func   = INT2PTR(short(*)(short, short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2, i3);
OUTPUT:
	RETVAL

float
nci_fssti( c_func, s0, s1, t2, i3 )
	SV* c_func
	short s0
	short s1
	char * t2
	int i3
PREINIT:
	float(*func)(short, short, char *, int);
CODE:
	func   = INT2PTR(float(*)(short, short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2, i3);
OUTPUT:
	RETVAL

char *
nci_tssti( c_func, s0, s1, t2, i3 )
	SV* c_func
	short s0
	short s1
	char * t2
	int i3
PREINIT:
	char *(*func)(short, short, char *, int);
CODE:
	func   = INT2PTR(char *(*)(short, short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2, i3);
OUTPUT:
	RETVAL

int
nci_issti( c_func, s0, s1, t2, i3 )
	SV* c_func
	short s0
	short s1
	char * t2
	int i3
PREINIT:
	int(*func)(short, short, char *, int);
CODE:
	func   = INT2PTR(int(*)(short, short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, t2, i3);
OUTPUT:
	RETVAL

void *
nci_pfsti( c_func, f0, s1, t2, i3 )
	SV* c_func
	float f0
	short s1
	char * t2
	int i3
PREINIT:
	void *(*func)(float, short, char *, int);
CODE:
	func   = INT2PTR(void *(*)(float, short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2, i3);
OUTPUT:
	RETVAL

void
nci_vfsti( c_func, f0, s1, t2, i3 )
	SV* c_func
	float f0
	short s1
	char * t2
	int i3
PREINIT:
	void(*func)(float, short, char *, int);
CODE:
	func   = INT2PTR(void(*)(float, short, char *, int), SvIV(c_func) );
	(*func)(f0, s1, t2, i3);

double
nci_dfsti( c_func, f0, s1, t2, i3 )
	SV* c_func
	float f0
	short s1
	char * t2
	int i3
PREINIT:
	double(*func)(float, short, char *, int);
CODE:
	func   = INT2PTR(double(*)(float, short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2, i3);
OUTPUT:
	RETVAL

short
nci_sfsti( c_func, f0, s1, t2, i3 )
	SV* c_func
	float f0
	short s1
	char * t2
	int i3
PREINIT:
	short(*func)(float, short, char *, int);
CODE:
	func   = INT2PTR(short(*)(float, short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2, i3);
OUTPUT:
	RETVAL

float
nci_ffsti( c_func, f0, s1, t2, i3 )
	SV* c_func
	float f0
	short s1
	char * t2
	int i3
PREINIT:
	float(*func)(float, short, char *, int);
CODE:
	func   = INT2PTR(float(*)(float, short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2, i3);
OUTPUT:
	RETVAL

char *
nci_tfsti( c_func, f0, s1, t2, i3 )
	SV* c_func
	float f0
	short s1
	char * t2
	int i3
PREINIT:
	char *(*func)(float, short, char *, int);
CODE:
	func   = INT2PTR(char *(*)(float, short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2, i3);
OUTPUT:
	RETVAL

int
nci_ifsti( c_func, f0, s1, t2, i3 )
	SV* c_func
	float f0
	short s1
	char * t2
	int i3
PREINIT:
	int(*func)(float, short, char *, int);
CODE:
	func   = INT2PTR(int(*)(float, short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, t2, i3);
OUTPUT:
	RETVAL

void *
nci_ptsti( c_func, t0, s1, t2, i3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	int i3
PREINIT:
	void *(*func)(char *, short, char *, int);
CODE:
	func   = INT2PTR(void *(*)(char *, short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2, i3);
OUTPUT:
	RETVAL

void
nci_vtsti( c_func, t0, s1, t2, i3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	int i3
PREINIT:
	void(*func)(char *, short, char *, int);
CODE:
	func   = INT2PTR(void(*)(char *, short, char *, int), SvIV(c_func) );
	(*func)(t0, s1, t2, i3);

double
nci_dtsti( c_func, t0, s1, t2, i3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	int i3
PREINIT:
	double(*func)(char *, short, char *, int);
CODE:
	func   = INT2PTR(double(*)(char *, short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2, i3);
OUTPUT:
	RETVAL

short
nci_ststi( c_func, t0, s1, t2, i3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	int i3
PREINIT:
	short(*func)(char *, short, char *, int);
CODE:
	func   = INT2PTR(short(*)(char *, short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2, i3);
OUTPUT:
	RETVAL

float
nci_ftsti( c_func, t0, s1, t2, i3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	int i3
PREINIT:
	float(*func)(char *, short, char *, int);
CODE:
	func   = INT2PTR(float(*)(char *, short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2, i3);
OUTPUT:
	RETVAL

char *
nci_ttsti( c_func, t0, s1, t2, i3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	int i3
PREINIT:
	char *(*func)(char *, short, char *, int);
CODE:
	func   = INT2PTR(char *(*)(char *, short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2, i3);
OUTPUT:
	RETVAL

int
nci_itsti( c_func, t0, s1, t2, i3 )
	SV* c_func
	char * t0
	short s1
	char * t2
	int i3
PREINIT:
	int(*func)(char *, short, char *, int);
CODE:
	func   = INT2PTR(int(*)(char *, short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, t2, i3);
OUTPUT:
	RETVAL

void *
nci_pisti( c_func, i0, s1, t2, i3 )
	SV* c_func
	int i0
	short s1
	char * t2
	int i3
PREINIT:
	void *(*func)(int, short, char *, int);
CODE:
	func   = INT2PTR(void *(*)(int, short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2, i3);
OUTPUT:
	RETVAL

void
nci_visti( c_func, i0, s1, t2, i3 )
	SV* c_func
	int i0
	short s1
	char * t2
	int i3
PREINIT:
	void(*func)(int, short, char *, int);
CODE:
	func   = INT2PTR(void(*)(int, short, char *, int), SvIV(c_func) );
	(*func)(i0, s1, t2, i3);

double
nci_disti( c_func, i0, s1, t2, i3 )
	SV* c_func
	int i0
	short s1
	char * t2
	int i3
PREINIT:
	double(*func)(int, short, char *, int);
CODE:
	func   = INT2PTR(double(*)(int, short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2, i3);
OUTPUT:
	RETVAL

short
nci_sisti( c_func, i0, s1, t2, i3 )
	SV* c_func
	int i0
	short s1
	char * t2
	int i3
PREINIT:
	short(*func)(int, short, char *, int);
CODE:
	func   = INT2PTR(short(*)(int, short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2, i3);
OUTPUT:
	RETVAL

float
nci_fisti( c_func, i0, s1, t2, i3 )
	SV* c_func
	int i0
	short s1
	char * t2
	int i3
PREINIT:
	float(*func)(int, short, char *, int);
CODE:
	func   = INT2PTR(float(*)(int, short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2, i3);
OUTPUT:
	RETVAL

char *
nci_tisti( c_func, i0, s1, t2, i3 )
	SV* c_func
	int i0
	short s1
	char * t2
	int i3
PREINIT:
	char *(*func)(int, short, char *, int);
CODE:
	func   = INT2PTR(char *(*)(int, short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2, i3);
OUTPUT:
	RETVAL

int
nci_iisti( c_func, i0, s1, t2, i3 )
	SV* c_func
	int i0
	short s1
	char * t2
	int i3
PREINIT:
	int(*func)(int, short, char *, int);
CODE:
	func   = INT2PTR(int(*)(int, short, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, t2, i3);
OUTPUT:
	RETVAL

void *
nci_ppfti( c_func, p0, f1, t2, i3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	int i3
PREINIT:
	void *(*func)(void *, float, char *, int);
CODE:
	func   = INT2PTR(void *(*)(void *, float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2, i3);
OUTPUT:
	RETVAL

void
nci_vpfti( c_func, p0, f1, t2, i3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	int i3
PREINIT:
	void(*func)(void *, float, char *, int);
CODE:
	func   = INT2PTR(void(*)(void *, float, char *, int), SvIV(c_func) );
	(*func)(p0, f1, t2, i3);

double
nci_dpfti( c_func, p0, f1, t2, i3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	int i3
PREINIT:
	double(*func)(void *, float, char *, int);
CODE:
	func   = INT2PTR(double(*)(void *, float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2, i3);
OUTPUT:
	RETVAL

short
nci_spfti( c_func, p0, f1, t2, i3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	int i3
PREINIT:
	short(*func)(void *, float, char *, int);
CODE:
	func   = INT2PTR(short(*)(void *, float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2, i3);
OUTPUT:
	RETVAL

float
nci_fpfti( c_func, p0, f1, t2, i3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	int i3
PREINIT:
	float(*func)(void *, float, char *, int);
CODE:
	func   = INT2PTR(float(*)(void *, float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2, i3);
OUTPUT:
	RETVAL

char *
nci_tpfti( c_func, p0, f1, t2, i3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	int i3
PREINIT:
	char *(*func)(void *, float, char *, int);
CODE:
	func   = INT2PTR(char *(*)(void *, float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2, i3);
OUTPUT:
	RETVAL

int
nci_ipfti( c_func, p0, f1, t2, i3 )
	SV* c_func
	void * p0
	float f1
	char * t2
	int i3
PREINIT:
	int(*func)(void *, float, char *, int);
CODE:
	func   = INT2PTR(int(*)(void *, float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, t2, i3);
OUTPUT:
	RETVAL

void *
nci_pvfti( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvfti( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvfti( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svfti( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvfti( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvfti( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivfti( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdfti( c_func, d0, f1, t2, i3 )
	SV* c_func
	double d0
	float f1
	char * t2
	int i3
PREINIT:
	void *(*func)(double, float, char *, int);
CODE:
	func   = INT2PTR(void *(*)(double, float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2, i3);
OUTPUT:
	RETVAL

void
nci_vdfti( c_func, d0, f1, t2, i3 )
	SV* c_func
	double d0
	float f1
	char * t2
	int i3
PREINIT:
	void(*func)(double, float, char *, int);
CODE:
	func   = INT2PTR(void(*)(double, float, char *, int), SvIV(c_func) );
	(*func)(d0, f1, t2, i3);

double
nci_ddfti( c_func, d0, f1, t2, i3 )
	SV* c_func
	double d0
	float f1
	char * t2
	int i3
PREINIT:
	double(*func)(double, float, char *, int);
CODE:
	func   = INT2PTR(double(*)(double, float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2, i3);
OUTPUT:
	RETVAL

short
nci_sdfti( c_func, d0, f1, t2, i3 )
	SV* c_func
	double d0
	float f1
	char * t2
	int i3
PREINIT:
	short(*func)(double, float, char *, int);
CODE:
	func   = INT2PTR(short(*)(double, float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2, i3);
OUTPUT:
	RETVAL

float
nci_fdfti( c_func, d0, f1, t2, i3 )
	SV* c_func
	double d0
	float f1
	char * t2
	int i3
PREINIT:
	float(*func)(double, float, char *, int);
CODE:
	func   = INT2PTR(float(*)(double, float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2, i3);
OUTPUT:
	RETVAL

char *
nci_tdfti( c_func, d0, f1, t2, i3 )
	SV* c_func
	double d0
	float f1
	char * t2
	int i3
PREINIT:
	char *(*func)(double, float, char *, int);
CODE:
	func   = INT2PTR(char *(*)(double, float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2, i3);
OUTPUT:
	RETVAL

int
nci_idfti( c_func, d0, f1, t2, i3 )
	SV* c_func
	double d0
	float f1
	char * t2
	int i3
PREINIT:
	int(*func)(double, float, char *, int);
CODE:
	func   = INT2PTR(int(*)(double, float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, t2, i3);
OUTPUT:
	RETVAL

void *
nci_psfti( c_func, s0, f1, t2, i3 )
	SV* c_func
	short s0
	float f1
	char * t2
	int i3
PREINIT:
	void *(*func)(short, float, char *, int);
CODE:
	func   = INT2PTR(void *(*)(short, float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2, i3);
OUTPUT:
	RETVAL

void
nci_vsfti( c_func, s0, f1, t2, i3 )
	SV* c_func
	short s0
	float f1
	char * t2
	int i3
PREINIT:
	void(*func)(short, float, char *, int);
CODE:
	func   = INT2PTR(void(*)(short, float, char *, int), SvIV(c_func) );
	(*func)(s0, f1, t2, i3);

double
nci_dsfti( c_func, s0, f1, t2, i3 )
	SV* c_func
	short s0
	float f1
	char * t2
	int i3
PREINIT:
	double(*func)(short, float, char *, int);
CODE:
	func   = INT2PTR(double(*)(short, float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2, i3);
OUTPUT:
	RETVAL

short
nci_ssfti( c_func, s0, f1, t2, i3 )
	SV* c_func
	short s0
	float f1
	char * t2
	int i3
PREINIT:
	short(*func)(short, float, char *, int);
CODE:
	func   = INT2PTR(short(*)(short, float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2, i3);
OUTPUT:
	RETVAL

float
nci_fsfti( c_func, s0, f1, t2, i3 )
	SV* c_func
	short s0
	float f1
	char * t2
	int i3
PREINIT:
	float(*func)(short, float, char *, int);
CODE:
	func   = INT2PTR(float(*)(short, float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2, i3);
OUTPUT:
	RETVAL

char *
nci_tsfti( c_func, s0, f1, t2, i3 )
	SV* c_func
	short s0
	float f1
	char * t2
	int i3
PREINIT:
	char *(*func)(short, float, char *, int);
CODE:
	func   = INT2PTR(char *(*)(short, float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2, i3);
OUTPUT:
	RETVAL

int
nci_isfti( c_func, s0, f1, t2, i3 )
	SV* c_func
	short s0
	float f1
	char * t2
	int i3
PREINIT:
	int(*func)(short, float, char *, int);
CODE:
	func   = INT2PTR(int(*)(short, float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, t2, i3);
OUTPUT:
	RETVAL

void *
nci_pffti( c_func, f0, f1, t2, i3 )
	SV* c_func
	float f0
	float f1
	char * t2
	int i3
PREINIT:
	void *(*func)(float, float, char *, int);
CODE:
	func   = INT2PTR(void *(*)(float, float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2, i3);
OUTPUT:
	RETVAL

void
nci_vffti( c_func, f0, f1, t2, i3 )
	SV* c_func
	float f0
	float f1
	char * t2
	int i3
PREINIT:
	void(*func)(float, float, char *, int);
CODE:
	func   = INT2PTR(void(*)(float, float, char *, int), SvIV(c_func) );
	(*func)(f0, f1, t2, i3);

double
nci_dffti( c_func, f0, f1, t2, i3 )
	SV* c_func
	float f0
	float f1
	char * t2
	int i3
PREINIT:
	double(*func)(float, float, char *, int);
CODE:
	func   = INT2PTR(double(*)(float, float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2, i3);
OUTPUT:
	RETVAL

short
nci_sffti( c_func, f0, f1, t2, i3 )
	SV* c_func
	float f0
	float f1
	char * t2
	int i3
PREINIT:
	short(*func)(float, float, char *, int);
CODE:
	func   = INT2PTR(short(*)(float, float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2, i3);
OUTPUT:
	RETVAL

float
nci_fffti( c_func, f0, f1, t2, i3 )
	SV* c_func
	float f0
	float f1
	char * t2
	int i3
PREINIT:
	float(*func)(float, float, char *, int);
CODE:
	func   = INT2PTR(float(*)(float, float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2, i3);
OUTPUT:
	RETVAL

char *
nci_tffti( c_func, f0, f1, t2, i3 )
	SV* c_func
	float f0
	float f1
	char * t2
	int i3
PREINIT:
	char *(*func)(float, float, char *, int);
CODE:
	func   = INT2PTR(char *(*)(float, float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2, i3);
OUTPUT:
	RETVAL

int
nci_iffti( c_func, f0, f1, t2, i3 )
	SV* c_func
	float f0
	float f1
	char * t2
	int i3
PREINIT:
	int(*func)(float, float, char *, int);
CODE:
	func   = INT2PTR(int(*)(float, float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, t2, i3);
OUTPUT:
	RETVAL

void *
nci_ptfti( c_func, t0, f1, t2, i3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	int i3
PREINIT:
	void *(*func)(char *, float, char *, int);
CODE:
	func   = INT2PTR(void *(*)(char *, float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2, i3);
OUTPUT:
	RETVAL

void
nci_vtfti( c_func, t0, f1, t2, i3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	int i3
PREINIT:
	void(*func)(char *, float, char *, int);
CODE:
	func   = INT2PTR(void(*)(char *, float, char *, int), SvIV(c_func) );
	(*func)(t0, f1, t2, i3);

double
nci_dtfti( c_func, t0, f1, t2, i3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	int i3
PREINIT:
	double(*func)(char *, float, char *, int);
CODE:
	func   = INT2PTR(double(*)(char *, float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2, i3);
OUTPUT:
	RETVAL

short
nci_stfti( c_func, t0, f1, t2, i3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	int i3
PREINIT:
	short(*func)(char *, float, char *, int);
CODE:
	func   = INT2PTR(short(*)(char *, float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2, i3);
OUTPUT:
	RETVAL

float
nci_ftfti( c_func, t0, f1, t2, i3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	int i3
PREINIT:
	float(*func)(char *, float, char *, int);
CODE:
	func   = INT2PTR(float(*)(char *, float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2, i3);
OUTPUT:
	RETVAL

char *
nci_ttfti( c_func, t0, f1, t2, i3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	int i3
PREINIT:
	char *(*func)(char *, float, char *, int);
CODE:
	func   = INT2PTR(char *(*)(char *, float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2, i3);
OUTPUT:
	RETVAL

int
nci_itfti( c_func, t0, f1, t2, i3 )
	SV* c_func
	char * t0
	float f1
	char * t2
	int i3
PREINIT:
	int(*func)(char *, float, char *, int);
CODE:
	func   = INT2PTR(int(*)(char *, float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, t2, i3);
OUTPUT:
	RETVAL

void *
nci_pifti( c_func, i0, f1, t2, i3 )
	SV* c_func
	int i0
	float f1
	char * t2
	int i3
PREINIT:
	void *(*func)(int, float, char *, int);
CODE:
	func   = INT2PTR(void *(*)(int, float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2, i3);
OUTPUT:
	RETVAL

void
nci_vifti( c_func, i0, f1, t2, i3 )
	SV* c_func
	int i0
	float f1
	char * t2
	int i3
PREINIT:
	void(*func)(int, float, char *, int);
CODE:
	func   = INT2PTR(void(*)(int, float, char *, int), SvIV(c_func) );
	(*func)(i0, f1, t2, i3);

double
nci_difti( c_func, i0, f1, t2, i3 )
	SV* c_func
	int i0
	float f1
	char * t2
	int i3
PREINIT:
	double(*func)(int, float, char *, int);
CODE:
	func   = INT2PTR(double(*)(int, float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2, i3);
OUTPUT:
	RETVAL

short
nci_sifti( c_func, i0, f1, t2, i3 )
	SV* c_func
	int i0
	float f1
	char * t2
	int i3
PREINIT:
	short(*func)(int, float, char *, int);
CODE:
	func   = INT2PTR(short(*)(int, float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2, i3);
OUTPUT:
	RETVAL

float
nci_fifti( c_func, i0, f1, t2, i3 )
	SV* c_func
	int i0
	float f1
	char * t2
	int i3
PREINIT:
	float(*func)(int, float, char *, int);
CODE:
	func   = INT2PTR(float(*)(int, float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2, i3);
OUTPUT:
	RETVAL

char *
nci_tifti( c_func, i0, f1, t2, i3 )
	SV* c_func
	int i0
	float f1
	char * t2
	int i3
PREINIT:
	char *(*func)(int, float, char *, int);
CODE:
	func   = INT2PTR(char *(*)(int, float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2, i3);
OUTPUT:
	RETVAL

int
nci_iifti( c_func, i0, f1, t2, i3 )
	SV* c_func
	int i0
	float f1
	char * t2
	int i3
PREINIT:
	int(*func)(int, float, char *, int);
CODE:
	func   = INT2PTR(int(*)(int, float, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, t2, i3);
OUTPUT:
	RETVAL

void *
nci_pptti( c_func, p0, t1, t2, i3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	int i3
PREINIT:
	void *(*func)(void *, char *, char *, int);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2, i3);
OUTPUT:
	RETVAL

void
nci_vptti( c_func, p0, t1, t2, i3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	int i3
PREINIT:
	void(*func)(void *, char *, char *, int);
CODE:
	func   = INT2PTR(void(*)(void *, char *, char *, int), SvIV(c_func) );
	(*func)(p0, t1, t2, i3);

double
nci_dptti( c_func, p0, t1, t2, i3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	int i3
PREINIT:
	double(*func)(void *, char *, char *, int);
CODE:
	func   = INT2PTR(double(*)(void *, char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2, i3);
OUTPUT:
	RETVAL

short
nci_sptti( c_func, p0, t1, t2, i3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	int i3
PREINIT:
	short(*func)(void *, char *, char *, int);
CODE:
	func   = INT2PTR(short(*)(void *, char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2, i3);
OUTPUT:
	RETVAL

float
nci_fptti( c_func, p0, t1, t2, i3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	int i3
PREINIT:
	float(*func)(void *, char *, char *, int);
CODE:
	func   = INT2PTR(float(*)(void *, char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2, i3);
OUTPUT:
	RETVAL

char *
nci_tptti( c_func, p0, t1, t2, i3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	int i3
PREINIT:
	char *(*func)(void *, char *, char *, int);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2, i3);
OUTPUT:
	RETVAL

int
nci_iptti( c_func, p0, t1, t2, i3 )
	SV* c_func
	void * p0
	char * t1
	char * t2
	int i3
PREINIT:
	int(*func)(void *, char *, char *, int);
CODE:
	func   = INT2PTR(int(*)(void *, char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, t2, i3);
OUTPUT:
	RETVAL

void *
nci_pvtti( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvtti( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvtti( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svtti( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvtti( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvtti( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivtti( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdtti( c_func, d0, t1, t2, i3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	int i3
PREINIT:
	void *(*func)(double, char *, char *, int);
CODE:
	func   = INT2PTR(void *(*)(double, char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2, i3);
OUTPUT:
	RETVAL

void
nci_vdtti( c_func, d0, t1, t2, i3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	int i3
PREINIT:
	void(*func)(double, char *, char *, int);
CODE:
	func   = INT2PTR(void(*)(double, char *, char *, int), SvIV(c_func) );
	(*func)(d0, t1, t2, i3);

double
nci_ddtti( c_func, d0, t1, t2, i3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	int i3
PREINIT:
	double(*func)(double, char *, char *, int);
CODE:
	func   = INT2PTR(double(*)(double, char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2, i3);
OUTPUT:
	RETVAL

short
nci_sdtti( c_func, d0, t1, t2, i3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	int i3
PREINIT:
	short(*func)(double, char *, char *, int);
CODE:
	func   = INT2PTR(short(*)(double, char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2, i3);
OUTPUT:
	RETVAL

float
nci_fdtti( c_func, d0, t1, t2, i3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	int i3
PREINIT:
	float(*func)(double, char *, char *, int);
CODE:
	func   = INT2PTR(float(*)(double, char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2, i3);
OUTPUT:
	RETVAL

char *
nci_tdtti( c_func, d0, t1, t2, i3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	int i3
PREINIT:
	char *(*func)(double, char *, char *, int);
CODE:
	func   = INT2PTR(char *(*)(double, char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2, i3);
OUTPUT:
	RETVAL

int
nci_idtti( c_func, d0, t1, t2, i3 )
	SV* c_func
	double d0
	char * t1
	char * t2
	int i3
PREINIT:
	int(*func)(double, char *, char *, int);
CODE:
	func   = INT2PTR(int(*)(double, char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, t2, i3);
OUTPUT:
	RETVAL

void *
nci_pstti( c_func, s0, t1, t2, i3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	int i3
PREINIT:
	void *(*func)(short, char *, char *, int);
CODE:
	func   = INT2PTR(void *(*)(short, char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2, i3);
OUTPUT:
	RETVAL

void
nci_vstti( c_func, s0, t1, t2, i3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	int i3
PREINIT:
	void(*func)(short, char *, char *, int);
CODE:
	func   = INT2PTR(void(*)(short, char *, char *, int), SvIV(c_func) );
	(*func)(s0, t1, t2, i3);

double
nci_dstti( c_func, s0, t1, t2, i3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	int i3
PREINIT:
	double(*func)(short, char *, char *, int);
CODE:
	func   = INT2PTR(double(*)(short, char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2, i3);
OUTPUT:
	RETVAL

short
nci_sstti( c_func, s0, t1, t2, i3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	int i3
PREINIT:
	short(*func)(short, char *, char *, int);
CODE:
	func   = INT2PTR(short(*)(short, char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2, i3);
OUTPUT:
	RETVAL

float
nci_fstti( c_func, s0, t1, t2, i3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	int i3
PREINIT:
	float(*func)(short, char *, char *, int);
CODE:
	func   = INT2PTR(float(*)(short, char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2, i3);
OUTPUT:
	RETVAL

char *
nci_tstti( c_func, s0, t1, t2, i3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	int i3
PREINIT:
	char *(*func)(short, char *, char *, int);
CODE:
	func   = INT2PTR(char *(*)(short, char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2, i3);
OUTPUT:
	RETVAL

int
nci_istti( c_func, s0, t1, t2, i3 )
	SV* c_func
	short s0
	char * t1
	char * t2
	int i3
PREINIT:
	int(*func)(short, char *, char *, int);
CODE:
	func   = INT2PTR(int(*)(short, char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, t2, i3);
OUTPUT:
	RETVAL

void *
nci_pftti( c_func, f0, t1, t2, i3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	int i3
PREINIT:
	void *(*func)(float, char *, char *, int);
CODE:
	func   = INT2PTR(void *(*)(float, char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2, i3);
OUTPUT:
	RETVAL

void
nci_vftti( c_func, f0, t1, t2, i3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	int i3
PREINIT:
	void(*func)(float, char *, char *, int);
CODE:
	func   = INT2PTR(void(*)(float, char *, char *, int), SvIV(c_func) );
	(*func)(f0, t1, t2, i3);

double
nci_dftti( c_func, f0, t1, t2, i3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	int i3
PREINIT:
	double(*func)(float, char *, char *, int);
CODE:
	func   = INT2PTR(double(*)(float, char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2, i3);
OUTPUT:
	RETVAL

short
nci_sftti( c_func, f0, t1, t2, i3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	int i3
PREINIT:
	short(*func)(float, char *, char *, int);
CODE:
	func   = INT2PTR(short(*)(float, char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2, i3);
OUTPUT:
	RETVAL

float
nci_fftti( c_func, f0, t1, t2, i3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	int i3
PREINIT:
	float(*func)(float, char *, char *, int);
CODE:
	func   = INT2PTR(float(*)(float, char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2, i3);
OUTPUT:
	RETVAL

char *
nci_tftti( c_func, f0, t1, t2, i3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	int i3
PREINIT:
	char *(*func)(float, char *, char *, int);
CODE:
	func   = INT2PTR(char *(*)(float, char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2, i3);
OUTPUT:
	RETVAL

int
nci_iftti( c_func, f0, t1, t2, i3 )
	SV* c_func
	float f0
	char * t1
	char * t2
	int i3
PREINIT:
	int(*func)(float, char *, char *, int);
CODE:
	func   = INT2PTR(int(*)(float, char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, t2, i3);
OUTPUT:
	RETVAL

void *
nci_pttti( c_func, t0, t1, t2, i3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	int i3
PREINIT:
	void *(*func)(char *, char *, char *, int);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2, i3);
OUTPUT:
	RETVAL

void
nci_vttti( c_func, t0, t1, t2, i3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	int i3
PREINIT:
	void(*func)(char *, char *, char *, int);
CODE:
	func   = INT2PTR(void(*)(char *, char *, char *, int), SvIV(c_func) );
	(*func)(t0, t1, t2, i3);

double
nci_dttti( c_func, t0, t1, t2, i3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	int i3
PREINIT:
	double(*func)(char *, char *, char *, int);
CODE:
	func   = INT2PTR(double(*)(char *, char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2, i3);
OUTPUT:
	RETVAL

short
nci_sttti( c_func, t0, t1, t2, i3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	int i3
PREINIT:
	short(*func)(char *, char *, char *, int);
CODE:
	func   = INT2PTR(short(*)(char *, char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2, i3);
OUTPUT:
	RETVAL

float
nci_fttti( c_func, t0, t1, t2, i3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	int i3
PREINIT:
	float(*func)(char *, char *, char *, int);
CODE:
	func   = INT2PTR(float(*)(char *, char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2, i3);
OUTPUT:
	RETVAL

char *
nci_tttti( c_func, t0, t1, t2, i3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	int i3
PREINIT:
	char *(*func)(char *, char *, char *, int);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2, i3);
OUTPUT:
	RETVAL

int
nci_ittti( c_func, t0, t1, t2, i3 )
	SV* c_func
	char * t0
	char * t1
	char * t2
	int i3
PREINIT:
	int(*func)(char *, char *, char *, int);
CODE:
	func   = INT2PTR(int(*)(char *, char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, t2, i3);
OUTPUT:
	RETVAL

void *
nci_pitti( c_func, i0, t1, t2, i3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	int i3
PREINIT:
	void *(*func)(int, char *, char *, int);
CODE:
	func   = INT2PTR(void *(*)(int, char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2, i3);
OUTPUT:
	RETVAL

void
nci_vitti( c_func, i0, t1, t2, i3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	int i3
PREINIT:
	void(*func)(int, char *, char *, int);
CODE:
	func   = INT2PTR(void(*)(int, char *, char *, int), SvIV(c_func) );
	(*func)(i0, t1, t2, i3);

double
nci_ditti( c_func, i0, t1, t2, i3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	int i3
PREINIT:
	double(*func)(int, char *, char *, int);
CODE:
	func   = INT2PTR(double(*)(int, char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2, i3);
OUTPUT:
	RETVAL

short
nci_sitti( c_func, i0, t1, t2, i3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	int i3
PREINIT:
	short(*func)(int, char *, char *, int);
CODE:
	func   = INT2PTR(short(*)(int, char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2, i3);
OUTPUT:
	RETVAL

float
nci_fitti( c_func, i0, t1, t2, i3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	int i3
PREINIT:
	float(*func)(int, char *, char *, int);
CODE:
	func   = INT2PTR(float(*)(int, char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2, i3);
OUTPUT:
	RETVAL

char *
nci_titti( c_func, i0, t1, t2, i3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	int i3
PREINIT:
	char *(*func)(int, char *, char *, int);
CODE:
	func   = INT2PTR(char *(*)(int, char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2, i3);
OUTPUT:
	RETVAL

int
nci_iitti( c_func, i0, t1, t2, i3 )
	SV* c_func
	int i0
	char * t1
	char * t2
	int i3
PREINIT:
	int(*func)(int, char *, char *, int);
CODE:
	func   = INT2PTR(int(*)(int, char *, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, t2, i3);
OUTPUT:
	RETVAL

void *
nci_ppiti( c_func, p0, i1, t2, i3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	int i3
PREINIT:
	void *(*func)(void *, int, char *, int);
CODE:
	func   = INT2PTR(void *(*)(void *, int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2, i3);
OUTPUT:
	RETVAL

void
nci_vpiti( c_func, p0, i1, t2, i3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	int i3
PREINIT:
	void(*func)(void *, int, char *, int);
CODE:
	func   = INT2PTR(void(*)(void *, int, char *, int), SvIV(c_func) );
	(*func)(p0, i1, t2, i3);

double
nci_dpiti( c_func, p0, i1, t2, i3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	int i3
PREINIT:
	double(*func)(void *, int, char *, int);
CODE:
	func   = INT2PTR(double(*)(void *, int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2, i3);
OUTPUT:
	RETVAL

short
nci_spiti( c_func, p0, i1, t2, i3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	int i3
PREINIT:
	short(*func)(void *, int, char *, int);
CODE:
	func   = INT2PTR(short(*)(void *, int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2, i3);
OUTPUT:
	RETVAL

float
nci_fpiti( c_func, p0, i1, t2, i3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	int i3
PREINIT:
	float(*func)(void *, int, char *, int);
CODE:
	func   = INT2PTR(float(*)(void *, int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2, i3);
OUTPUT:
	RETVAL

char *
nci_tpiti( c_func, p0, i1, t2, i3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	int i3
PREINIT:
	char *(*func)(void *, int, char *, int);
CODE:
	func   = INT2PTR(char *(*)(void *, int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2, i3);
OUTPUT:
	RETVAL

int
nci_ipiti( c_func, p0, i1, t2, i3 )
	SV* c_func
	void * p0
	int i1
	char * t2
	int i3
PREINIT:
	int(*func)(void *, int, char *, int);
CODE:
	func   = INT2PTR(int(*)(void *, int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, t2, i3);
OUTPUT:
	RETVAL

void *
nci_pviti( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vviti( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dviti( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_sviti( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fviti( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tviti( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_iviti( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pditi( c_func, d0, i1, t2, i3 )
	SV* c_func
	double d0
	int i1
	char * t2
	int i3
PREINIT:
	void *(*func)(double, int, char *, int);
CODE:
	func   = INT2PTR(void *(*)(double, int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2, i3);
OUTPUT:
	RETVAL

void
nci_vditi( c_func, d0, i1, t2, i3 )
	SV* c_func
	double d0
	int i1
	char * t2
	int i3
PREINIT:
	void(*func)(double, int, char *, int);
CODE:
	func   = INT2PTR(void(*)(double, int, char *, int), SvIV(c_func) );
	(*func)(d0, i1, t2, i3);

double
nci_dditi( c_func, d0, i1, t2, i3 )
	SV* c_func
	double d0
	int i1
	char * t2
	int i3
PREINIT:
	double(*func)(double, int, char *, int);
CODE:
	func   = INT2PTR(double(*)(double, int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2, i3);
OUTPUT:
	RETVAL

short
nci_sditi( c_func, d0, i1, t2, i3 )
	SV* c_func
	double d0
	int i1
	char * t2
	int i3
PREINIT:
	short(*func)(double, int, char *, int);
CODE:
	func   = INT2PTR(short(*)(double, int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2, i3);
OUTPUT:
	RETVAL

float
nci_fditi( c_func, d0, i1, t2, i3 )
	SV* c_func
	double d0
	int i1
	char * t2
	int i3
PREINIT:
	float(*func)(double, int, char *, int);
CODE:
	func   = INT2PTR(float(*)(double, int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2, i3);
OUTPUT:
	RETVAL

char *
nci_tditi( c_func, d0, i1, t2, i3 )
	SV* c_func
	double d0
	int i1
	char * t2
	int i3
PREINIT:
	char *(*func)(double, int, char *, int);
CODE:
	func   = INT2PTR(char *(*)(double, int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2, i3);
OUTPUT:
	RETVAL

int
nci_iditi( c_func, d0, i1, t2, i3 )
	SV* c_func
	double d0
	int i1
	char * t2
	int i3
PREINIT:
	int(*func)(double, int, char *, int);
CODE:
	func   = INT2PTR(int(*)(double, int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, t2, i3);
OUTPUT:
	RETVAL

void *
nci_psiti( c_func, s0, i1, t2, i3 )
	SV* c_func
	short s0
	int i1
	char * t2
	int i3
PREINIT:
	void *(*func)(short, int, char *, int);
CODE:
	func   = INT2PTR(void *(*)(short, int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2, i3);
OUTPUT:
	RETVAL

void
nci_vsiti( c_func, s0, i1, t2, i3 )
	SV* c_func
	short s0
	int i1
	char * t2
	int i3
PREINIT:
	void(*func)(short, int, char *, int);
CODE:
	func   = INT2PTR(void(*)(short, int, char *, int), SvIV(c_func) );
	(*func)(s0, i1, t2, i3);

double
nci_dsiti( c_func, s0, i1, t2, i3 )
	SV* c_func
	short s0
	int i1
	char * t2
	int i3
PREINIT:
	double(*func)(short, int, char *, int);
CODE:
	func   = INT2PTR(double(*)(short, int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2, i3);
OUTPUT:
	RETVAL

short
nci_ssiti( c_func, s0, i1, t2, i3 )
	SV* c_func
	short s0
	int i1
	char * t2
	int i3
PREINIT:
	short(*func)(short, int, char *, int);
CODE:
	func   = INT2PTR(short(*)(short, int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2, i3);
OUTPUT:
	RETVAL

float
nci_fsiti( c_func, s0, i1, t2, i3 )
	SV* c_func
	short s0
	int i1
	char * t2
	int i3
PREINIT:
	float(*func)(short, int, char *, int);
CODE:
	func   = INT2PTR(float(*)(short, int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2, i3);
OUTPUT:
	RETVAL

char *
nci_tsiti( c_func, s0, i1, t2, i3 )
	SV* c_func
	short s0
	int i1
	char * t2
	int i3
PREINIT:
	char *(*func)(short, int, char *, int);
CODE:
	func   = INT2PTR(char *(*)(short, int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2, i3);
OUTPUT:
	RETVAL

int
nci_isiti( c_func, s0, i1, t2, i3 )
	SV* c_func
	short s0
	int i1
	char * t2
	int i3
PREINIT:
	int(*func)(short, int, char *, int);
CODE:
	func   = INT2PTR(int(*)(short, int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, t2, i3);
OUTPUT:
	RETVAL

void *
nci_pfiti( c_func, f0, i1, t2, i3 )
	SV* c_func
	float f0
	int i1
	char * t2
	int i3
PREINIT:
	void *(*func)(float, int, char *, int);
CODE:
	func   = INT2PTR(void *(*)(float, int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2, i3);
OUTPUT:
	RETVAL

void
nci_vfiti( c_func, f0, i1, t2, i3 )
	SV* c_func
	float f0
	int i1
	char * t2
	int i3
PREINIT:
	void(*func)(float, int, char *, int);
CODE:
	func   = INT2PTR(void(*)(float, int, char *, int), SvIV(c_func) );
	(*func)(f0, i1, t2, i3);

double
nci_dfiti( c_func, f0, i1, t2, i3 )
	SV* c_func
	float f0
	int i1
	char * t2
	int i3
PREINIT:
	double(*func)(float, int, char *, int);
CODE:
	func   = INT2PTR(double(*)(float, int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2, i3);
OUTPUT:
	RETVAL

short
nci_sfiti( c_func, f0, i1, t2, i3 )
	SV* c_func
	float f0
	int i1
	char * t2
	int i3
PREINIT:
	short(*func)(float, int, char *, int);
CODE:
	func   = INT2PTR(short(*)(float, int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2, i3);
OUTPUT:
	RETVAL

float
nci_ffiti( c_func, f0, i1, t2, i3 )
	SV* c_func
	float f0
	int i1
	char * t2
	int i3
PREINIT:
	float(*func)(float, int, char *, int);
CODE:
	func   = INT2PTR(float(*)(float, int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2, i3);
OUTPUT:
	RETVAL

char *
nci_tfiti( c_func, f0, i1, t2, i3 )
	SV* c_func
	float f0
	int i1
	char * t2
	int i3
PREINIT:
	char *(*func)(float, int, char *, int);
CODE:
	func   = INT2PTR(char *(*)(float, int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2, i3);
OUTPUT:
	RETVAL

int
nci_ifiti( c_func, f0, i1, t2, i3 )
	SV* c_func
	float f0
	int i1
	char * t2
	int i3
PREINIT:
	int(*func)(float, int, char *, int);
CODE:
	func   = INT2PTR(int(*)(float, int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, t2, i3);
OUTPUT:
	RETVAL

void *
nci_ptiti( c_func, t0, i1, t2, i3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	int i3
PREINIT:
	void *(*func)(char *, int, char *, int);
CODE:
	func   = INT2PTR(void *(*)(char *, int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2, i3);
OUTPUT:
	RETVAL

void
nci_vtiti( c_func, t0, i1, t2, i3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	int i3
PREINIT:
	void(*func)(char *, int, char *, int);
CODE:
	func   = INT2PTR(void(*)(char *, int, char *, int), SvIV(c_func) );
	(*func)(t0, i1, t2, i3);

double
nci_dtiti( c_func, t0, i1, t2, i3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	int i3
PREINIT:
	double(*func)(char *, int, char *, int);
CODE:
	func   = INT2PTR(double(*)(char *, int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2, i3);
OUTPUT:
	RETVAL

short
nci_stiti( c_func, t0, i1, t2, i3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	int i3
PREINIT:
	short(*func)(char *, int, char *, int);
CODE:
	func   = INT2PTR(short(*)(char *, int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2, i3);
OUTPUT:
	RETVAL

float
nci_ftiti( c_func, t0, i1, t2, i3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	int i3
PREINIT:
	float(*func)(char *, int, char *, int);
CODE:
	func   = INT2PTR(float(*)(char *, int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2, i3);
OUTPUT:
	RETVAL

char *
nci_ttiti( c_func, t0, i1, t2, i3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	int i3
PREINIT:
	char *(*func)(char *, int, char *, int);
CODE:
	func   = INT2PTR(char *(*)(char *, int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2, i3);
OUTPUT:
	RETVAL

int
nci_ititi( c_func, t0, i1, t2, i3 )
	SV* c_func
	char * t0
	int i1
	char * t2
	int i3
PREINIT:
	int(*func)(char *, int, char *, int);
CODE:
	func   = INT2PTR(int(*)(char *, int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, t2, i3);
OUTPUT:
	RETVAL

void *
nci_piiti( c_func, i0, i1, t2, i3 )
	SV* c_func
	int i0
	int i1
	char * t2
	int i3
PREINIT:
	void *(*func)(int, int, char *, int);
CODE:
	func   = INT2PTR(void *(*)(int, int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2, i3);
OUTPUT:
	RETVAL

void
nci_viiti( c_func, i0, i1, t2, i3 )
	SV* c_func
	int i0
	int i1
	char * t2
	int i3
PREINIT:
	void(*func)(int, int, char *, int);
CODE:
	func   = INT2PTR(void(*)(int, int, char *, int), SvIV(c_func) );
	(*func)(i0, i1, t2, i3);

double
nci_diiti( c_func, i0, i1, t2, i3 )
	SV* c_func
	int i0
	int i1
	char * t2
	int i3
PREINIT:
	double(*func)(int, int, char *, int);
CODE:
	func   = INT2PTR(double(*)(int, int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2, i3);
OUTPUT:
	RETVAL

short
nci_siiti( c_func, i0, i1, t2, i3 )
	SV* c_func
	int i0
	int i1
	char * t2
	int i3
PREINIT:
	short(*func)(int, int, char *, int);
CODE:
	func   = INT2PTR(short(*)(int, int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2, i3);
OUTPUT:
	RETVAL

float
nci_fiiti( c_func, i0, i1, t2, i3 )
	SV* c_func
	int i0
	int i1
	char * t2
	int i3
PREINIT:
	float(*func)(int, int, char *, int);
CODE:
	func   = INT2PTR(float(*)(int, int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2, i3);
OUTPUT:
	RETVAL

char *
nci_tiiti( c_func, i0, i1, t2, i3 )
	SV* c_func
	int i0
	int i1
	char * t2
	int i3
PREINIT:
	char *(*func)(int, int, char *, int);
CODE:
	func   = INT2PTR(char *(*)(int, int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2, i3);
OUTPUT:
	RETVAL

int
nci_iiiti( c_func, i0, i1, t2, i3 )
	SV* c_func
	int i0
	int i1
	char * t2
	int i3
PREINIT:
	int(*func)(int, int, char *, int);
CODE:
	func   = INT2PTR(int(*)(int, int, char *, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, t2, i3);
OUTPUT:
	RETVAL

void *
nci_pppii( c_func, p0, p1, i2, i3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	int i3
PREINIT:
	void *(*func)(void *, void *, int, int);
CODE:
	func   = INT2PTR(void *(*)(void *, void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2, i3);
OUTPUT:
	RETVAL

void
nci_vppii( c_func, p0, p1, i2, i3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	int i3
PREINIT:
	void(*func)(void *, void *, int, int);
CODE:
	func   = INT2PTR(void(*)(void *, void *, int, int), SvIV(c_func) );
	(*func)(p0, p1, i2, i3);

double
nci_dppii( c_func, p0, p1, i2, i3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	int i3
PREINIT:
	double(*func)(void *, void *, int, int);
CODE:
	func   = INT2PTR(double(*)(void *, void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2, i3);
OUTPUT:
	RETVAL

short
nci_sppii( c_func, p0, p1, i2, i3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	int i3
PREINIT:
	short(*func)(void *, void *, int, int);
CODE:
	func   = INT2PTR(short(*)(void *, void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2, i3);
OUTPUT:
	RETVAL

float
nci_fppii( c_func, p0, p1, i2, i3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	int i3
PREINIT:
	float(*func)(void *, void *, int, int);
CODE:
	func   = INT2PTR(float(*)(void *, void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2, i3);
OUTPUT:
	RETVAL

char *
nci_tppii( c_func, p0, p1, i2, i3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	int i3
PREINIT:
	char *(*func)(void *, void *, int, int);
CODE:
	func   = INT2PTR(char *(*)(void *, void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2, i3);
OUTPUT:
	RETVAL

int
nci_ippii( c_func, p0, p1, i2, i3 )
	SV* c_func
	void * p0
	void * p1
	int i2
	int i3
PREINIT:
	int(*func)(void *, void *, int, int);
CODE:
	func   = INT2PTR(int(*)(void *, void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, p1, i2, i3);
OUTPUT:
	RETVAL

void *
nci_pvpii( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvpii( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvpii( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svpii( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvpii( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvpii( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivpii( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdpii( c_func, d0, p1, i2, i3 )
	SV* c_func
	double d0
	void * p1
	int i2
	int i3
PREINIT:
	void *(*func)(double, void *, int, int);
CODE:
	func   = INT2PTR(void *(*)(double, void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2, i3);
OUTPUT:
	RETVAL

void
nci_vdpii( c_func, d0, p1, i2, i3 )
	SV* c_func
	double d0
	void * p1
	int i2
	int i3
PREINIT:
	void(*func)(double, void *, int, int);
CODE:
	func   = INT2PTR(void(*)(double, void *, int, int), SvIV(c_func) );
	(*func)(d0, p1, i2, i3);

double
nci_ddpii( c_func, d0, p1, i2, i3 )
	SV* c_func
	double d0
	void * p1
	int i2
	int i3
PREINIT:
	double(*func)(double, void *, int, int);
CODE:
	func   = INT2PTR(double(*)(double, void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2, i3);
OUTPUT:
	RETVAL

short
nci_sdpii( c_func, d0, p1, i2, i3 )
	SV* c_func
	double d0
	void * p1
	int i2
	int i3
PREINIT:
	short(*func)(double, void *, int, int);
CODE:
	func   = INT2PTR(short(*)(double, void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2, i3);
OUTPUT:
	RETVAL

float
nci_fdpii( c_func, d0, p1, i2, i3 )
	SV* c_func
	double d0
	void * p1
	int i2
	int i3
PREINIT:
	float(*func)(double, void *, int, int);
CODE:
	func   = INT2PTR(float(*)(double, void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2, i3);
OUTPUT:
	RETVAL

char *
nci_tdpii( c_func, d0, p1, i2, i3 )
	SV* c_func
	double d0
	void * p1
	int i2
	int i3
PREINIT:
	char *(*func)(double, void *, int, int);
CODE:
	func   = INT2PTR(char *(*)(double, void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2, i3);
OUTPUT:
	RETVAL

int
nci_idpii( c_func, d0, p1, i2, i3 )
	SV* c_func
	double d0
	void * p1
	int i2
	int i3
PREINIT:
	int(*func)(double, void *, int, int);
CODE:
	func   = INT2PTR(int(*)(double, void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, p1, i2, i3);
OUTPUT:
	RETVAL

void *
nci_pspii( c_func, s0, p1, i2, i3 )
	SV* c_func
	short s0
	void * p1
	int i2
	int i3
PREINIT:
	void *(*func)(short, void *, int, int);
CODE:
	func   = INT2PTR(void *(*)(short, void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2, i3);
OUTPUT:
	RETVAL

void
nci_vspii( c_func, s0, p1, i2, i3 )
	SV* c_func
	short s0
	void * p1
	int i2
	int i3
PREINIT:
	void(*func)(short, void *, int, int);
CODE:
	func   = INT2PTR(void(*)(short, void *, int, int), SvIV(c_func) );
	(*func)(s0, p1, i2, i3);

double
nci_dspii( c_func, s0, p1, i2, i3 )
	SV* c_func
	short s0
	void * p1
	int i2
	int i3
PREINIT:
	double(*func)(short, void *, int, int);
CODE:
	func   = INT2PTR(double(*)(short, void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2, i3);
OUTPUT:
	RETVAL

short
nci_sspii( c_func, s0, p1, i2, i3 )
	SV* c_func
	short s0
	void * p1
	int i2
	int i3
PREINIT:
	short(*func)(short, void *, int, int);
CODE:
	func   = INT2PTR(short(*)(short, void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2, i3);
OUTPUT:
	RETVAL

float
nci_fspii( c_func, s0, p1, i2, i3 )
	SV* c_func
	short s0
	void * p1
	int i2
	int i3
PREINIT:
	float(*func)(short, void *, int, int);
CODE:
	func   = INT2PTR(float(*)(short, void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2, i3);
OUTPUT:
	RETVAL

char *
nci_tspii( c_func, s0, p1, i2, i3 )
	SV* c_func
	short s0
	void * p1
	int i2
	int i3
PREINIT:
	char *(*func)(short, void *, int, int);
CODE:
	func   = INT2PTR(char *(*)(short, void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2, i3);
OUTPUT:
	RETVAL

int
nci_ispii( c_func, s0, p1, i2, i3 )
	SV* c_func
	short s0
	void * p1
	int i2
	int i3
PREINIT:
	int(*func)(short, void *, int, int);
CODE:
	func   = INT2PTR(int(*)(short, void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, p1, i2, i3);
OUTPUT:
	RETVAL

void *
nci_pfpii( c_func, f0, p1, i2, i3 )
	SV* c_func
	float f0
	void * p1
	int i2
	int i3
PREINIT:
	void *(*func)(float, void *, int, int);
CODE:
	func   = INT2PTR(void *(*)(float, void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2, i3);
OUTPUT:
	RETVAL

void
nci_vfpii( c_func, f0, p1, i2, i3 )
	SV* c_func
	float f0
	void * p1
	int i2
	int i3
PREINIT:
	void(*func)(float, void *, int, int);
CODE:
	func   = INT2PTR(void(*)(float, void *, int, int), SvIV(c_func) );
	(*func)(f0, p1, i2, i3);

double
nci_dfpii( c_func, f0, p1, i2, i3 )
	SV* c_func
	float f0
	void * p1
	int i2
	int i3
PREINIT:
	double(*func)(float, void *, int, int);
CODE:
	func   = INT2PTR(double(*)(float, void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2, i3);
OUTPUT:
	RETVAL

short
nci_sfpii( c_func, f0, p1, i2, i3 )
	SV* c_func
	float f0
	void * p1
	int i2
	int i3
PREINIT:
	short(*func)(float, void *, int, int);
CODE:
	func   = INT2PTR(short(*)(float, void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2, i3);
OUTPUT:
	RETVAL

float
nci_ffpii( c_func, f0, p1, i2, i3 )
	SV* c_func
	float f0
	void * p1
	int i2
	int i3
PREINIT:
	float(*func)(float, void *, int, int);
CODE:
	func   = INT2PTR(float(*)(float, void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2, i3);
OUTPUT:
	RETVAL

char *
nci_tfpii( c_func, f0, p1, i2, i3 )
	SV* c_func
	float f0
	void * p1
	int i2
	int i3
PREINIT:
	char *(*func)(float, void *, int, int);
CODE:
	func   = INT2PTR(char *(*)(float, void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2, i3);
OUTPUT:
	RETVAL

int
nci_ifpii( c_func, f0, p1, i2, i3 )
	SV* c_func
	float f0
	void * p1
	int i2
	int i3
PREINIT:
	int(*func)(float, void *, int, int);
CODE:
	func   = INT2PTR(int(*)(float, void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, p1, i2, i3);
OUTPUT:
	RETVAL

void *
nci_ptpii( c_func, t0, p1, i2, i3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	int i3
PREINIT:
	void *(*func)(char *, void *, int, int);
CODE:
	func   = INT2PTR(void *(*)(char *, void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2, i3);
OUTPUT:
	RETVAL

void
nci_vtpii( c_func, t0, p1, i2, i3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	int i3
PREINIT:
	void(*func)(char *, void *, int, int);
CODE:
	func   = INT2PTR(void(*)(char *, void *, int, int), SvIV(c_func) );
	(*func)(t0, p1, i2, i3);

double
nci_dtpii( c_func, t0, p1, i2, i3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	int i3
PREINIT:
	double(*func)(char *, void *, int, int);
CODE:
	func   = INT2PTR(double(*)(char *, void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2, i3);
OUTPUT:
	RETVAL

short
nci_stpii( c_func, t0, p1, i2, i3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	int i3
PREINIT:
	short(*func)(char *, void *, int, int);
CODE:
	func   = INT2PTR(short(*)(char *, void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2, i3);
OUTPUT:
	RETVAL

float
nci_ftpii( c_func, t0, p1, i2, i3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	int i3
PREINIT:
	float(*func)(char *, void *, int, int);
CODE:
	func   = INT2PTR(float(*)(char *, void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2, i3);
OUTPUT:
	RETVAL

char *
nci_ttpii( c_func, t0, p1, i2, i3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	int i3
PREINIT:
	char *(*func)(char *, void *, int, int);
CODE:
	func   = INT2PTR(char *(*)(char *, void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2, i3);
OUTPUT:
	RETVAL

int
nci_itpii( c_func, t0, p1, i2, i3 )
	SV* c_func
	char * t0
	void * p1
	int i2
	int i3
PREINIT:
	int(*func)(char *, void *, int, int);
CODE:
	func   = INT2PTR(int(*)(char *, void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, p1, i2, i3);
OUTPUT:
	RETVAL

void *
nci_pipii( c_func, i0, p1, i2, i3 )
	SV* c_func
	int i0
	void * p1
	int i2
	int i3
PREINIT:
	void *(*func)(int, void *, int, int);
CODE:
	func   = INT2PTR(void *(*)(int, void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2, i3);
OUTPUT:
	RETVAL

void
nci_vipii( c_func, i0, p1, i2, i3 )
	SV* c_func
	int i0
	void * p1
	int i2
	int i3
PREINIT:
	void(*func)(int, void *, int, int);
CODE:
	func   = INT2PTR(void(*)(int, void *, int, int), SvIV(c_func) );
	(*func)(i0, p1, i2, i3);

double
nci_dipii( c_func, i0, p1, i2, i3 )
	SV* c_func
	int i0
	void * p1
	int i2
	int i3
PREINIT:
	double(*func)(int, void *, int, int);
CODE:
	func   = INT2PTR(double(*)(int, void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2, i3);
OUTPUT:
	RETVAL

short
nci_sipii( c_func, i0, p1, i2, i3 )
	SV* c_func
	int i0
	void * p1
	int i2
	int i3
PREINIT:
	short(*func)(int, void *, int, int);
CODE:
	func   = INT2PTR(short(*)(int, void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2, i3);
OUTPUT:
	RETVAL

float
nci_fipii( c_func, i0, p1, i2, i3 )
	SV* c_func
	int i0
	void * p1
	int i2
	int i3
PREINIT:
	float(*func)(int, void *, int, int);
CODE:
	func   = INT2PTR(float(*)(int, void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2, i3);
OUTPUT:
	RETVAL

char *
nci_tipii( c_func, i0, p1, i2, i3 )
	SV* c_func
	int i0
	void * p1
	int i2
	int i3
PREINIT:
	char *(*func)(int, void *, int, int);
CODE:
	func   = INT2PTR(char *(*)(int, void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2, i3);
OUTPUT:
	RETVAL

int
nci_iipii( c_func, i0, p1, i2, i3 )
	SV* c_func
	int i0
	void * p1
	int i2
	int i3
PREINIT:
	int(*func)(int, void *, int, int);
CODE:
	func   = INT2PTR(int(*)(int, void *, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, p1, i2, i3);
OUTPUT:
	RETVAL

void *
nci_ppdii( c_func, p0, d1, i2, i3 )
	SV* c_func
	void * p0
	double d1
	int i2
	int i3
PREINIT:
	void *(*func)(void *, double, int, int);
CODE:
	func   = INT2PTR(void *(*)(void *, double, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2, i3);
OUTPUT:
	RETVAL

void
nci_vpdii( c_func, p0, d1, i2, i3 )
	SV* c_func
	void * p0
	double d1
	int i2
	int i3
PREINIT:
	void(*func)(void *, double, int, int);
CODE:
	func   = INT2PTR(void(*)(void *, double, int, int), SvIV(c_func) );
	(*func)(p0, d1, i2, i3);

double
nci_dpdii( c_func, p0, d1, i2, i3 )
	SV* c_func
	void * p0
	double d1
	int i2
	int i3
PREINIT:
	double(*func)(void *, double, int, int);
CODE:
	func   = INT2PTR(double(*)(void *, double, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2, i3);
OUTPUT:
	RETVAL

short
nci_spdii( c_func, p0, d1, i2, i3 )
	SV* c_func
	void * p0
	double d1
	int i2
	int i3
PREINIT:
	short(*func)(void *, double, int, int);
CODE:
	func   = INT2PTR(short(*)(void *, double, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2, i3);
OUTPUT:
	RETVAL

float
nci_fpdii( c_func, p0, d1, i2, i3 )
	SV* c_func
	void * p0
	double d1
	int i2
	int i3
PREINIT:
	float(*func)(void *, double, int, int);
CODE:
	func   = INT2PTR(float(*)(void *, double, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2, i3);
OUTPUT:
	RETVAL

char *
nci_tpdii( c_func, p0, d1, i2, i3 )
	SV* c_func
	void * p0
	double d1
	int i2
	int i3
PREINIT:
	char *(*func)(void *, double, int, int);
CODE:
	func   = INT2PTR(char *(*)(void *, double, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2, i3);
OUTPUT:
	RETVAL

int
nci_ipdii( c_func, p0, d1, i2, i3 )
	SV* c_func
	void * p0
	double d1
	int i2
	int i3
PREINIT:
	int(*func)(void *, double, int, int);
CODE:
	func   = INT2PTR(int(*)(void *, double, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, d1, i2, i3);
OUTPUT:
	RETVAL

void *
nci_pvdii( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvdii( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvdii( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svdii( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvdii( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvdii( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivdii( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pddii( c_func, d0, d1, i2, i3 )
	SV* c_func
	double d0
	double d1
	int i2
	int i3
PREINIT:
	void *(*func)(double, double, int, int);
CODE:
	func   = INT2PTR(void *(*)(double, double, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2, i3);
OUTPUT:
	RETVAL

void
nci_vddii( c_func, d0, d1, i2, i3 )
	SV* c_func
	double d0
	double d1
	int i2
	int i3
PREINIT:
	void(*func)(double, double, int, int);
CODE:
	func   = INT2PTR(void(*)(double, double, int, int), SvIV(c_func) );
	(*func)(d0, d1, i2, i3);

double
nci_dddii( c_func, d0, d1, i2, i3 )
	SV* c_func
	double d0
	double d1
	int i2
	int i3
PREINIT:
	double(*func)(double, double, int, int);
CODE:
	func   = INT2PTR(double(*)(double, double, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2, i3);
OUTPUT:
	RETVAL

short
nci_sddii( c_func, d0, d1, i2, i3 )
	SV* c_func
	double d0
	double d1
	int i2
	int i3
PREINIT:
	short(*func)(double, double, int, int);
CODE:
	func   = INT2PTR(short(*)(double, double, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2, i3);
OUTPUT:
	RETVAL

float
nci_fddii( c_func, d0, d1, i2, i3 )
	SV* c_func
	double d0
	double d1
	int i2
	int i3
PREINIT:
	float(*func)(double, double, int, int);
CODE:
	func   = INT2PTR(float(*)(double, double, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2, i3);
OUTPUT:
	RETVAL

char *
nci_tddii( c_func, d0, d1, i2, i3 )
	SV* c_func
	double d0
	double d1
	int i2
	int i3
PREINIT:
	char *(*func)(double, double, int, int);
CODE:
	func   = INT2PTR(char *(*)(double, double, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2, i3);
OUTPUT:
	RETVAL

int
nci_iddii( c_func, d0, d1, i2, i3 )
	SV* c_func
	double d0
	double d1
	int i2
	int i3
PREINIT:
	int(*func)(double, double, int, int);
CODE:
	func   = INT2PTR(int(*)(double, double, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, d1, i2, i3);
OUTPUT:
	RETVAL

void *
nci_psdii( c_func, s0, d1, i2, i3 )
	SV* c_func
	short s0
	double d1
	int i2
	int i3
PREINIT:
	void *(*func)(short, double, int, int);
CODE:
	func   = INT2PTR(void *(*)(short, double, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2, i3);
OUTPUT:
	RETVAL

void
nci_vsdii( c_func, s0, d1, i2, i3 )
	SV* c_func
	short s0
	double d1
	int i2
	int i3
PREINIT:
	void(*func)(short, double, int, int);
CODE:
	func   = INT2PTR(void(*)(short, double, int, int), SvIV(c_func) );
	(*func)(s0, d1, i2, i3);

double
nci_dsdii( c_func, s0, d1, i2, i3 )
	SV* c_func
	short s0
	double d1
	int i2
	int i3
PREINIT:
	double(*func)(short, double, int, int);
CODE:
	func   = INT2PTR(double(*)(short, double, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2, i3);
OUTPUT:
	RETVAL

short
nci_ssdii( c_func, s0, d1, i2, i3 )
	SV* c_func
	short s0
	double d1
	int i2
	int i3
PREINIT:
	short(*func)(short, double, int, int);
CODE:
	func   = INT2PTR(short(*)(short, double, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2, i3);
OUTPUT:
	RETVAL

float
nci_fsdii( c_func, s0, d1, i2, i3 )
	SV* c_func
	short s0
	double d1
	int i2
	int i3
PREINIT:
	float(*func)(short, double, int, int);
CODE:
	func   = INT2PTR(float(*)(short, double, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2, i3);
OUTPUT:
	RETVAL

char *
nci_tsdii( c_func, s0, d1, i2, i3 )
	SV* c_func
	short s0
	double d1
	int i2
	int i3
PREINIT:
	char *(*func)(short, double, int, int);
CODE:
	func   = INT2PTR(char *(*)(short, double, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2, i3);
OUTPUT:
	RETVAL

int
nci_isdii( c_func, s0, d1, i2, i3 )
	SV* c_func
	short s0
	double d1
	int i2
	int i3
PREINIT:
	int(*func)(short, double, int, int);
CODE:
	func   = INT2PTR(int(*)(short, double, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, d1, i2, i3);
OUTPUT:
	RETVAL

void *
nci_pfdii( c_func, f0, d1, i2, i3 )
	SV* c_func
	float f0
	double d1
	int i2
	int i3
PREINIT:
	void *(*func)(float, double, int, int);
CODE:
	func   = INT2PTR(void *(*)(float, double, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2, i3);
OUTPUT:
	RETVAL

void
nci_vfdii( c_func, f0, d1, i2, i3 )
	SV* c_func
	float f0
	double d1
	int i2
	int i3
PREINIT:
	void(*func)(float, double, int, int);
CODE:
	func   = INT2PTR(void(*)(float, double, int, int), SvIV(c_func) );
	(*func)(f0, d1, i2, i3);

double
nci_dfdii( c_func, f0, d1, i2, i3 )
	SV* c_func
	float f0
	double d1
	int i2
	int i3
PREINIT:
	double(*func)(float, double, int, int);
CODE:
	func   = INT2PTR(double(*)(float, double, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2, i3);
OUTPUT:
	RETVAL

short
nci_sfdii( c_func, f0, d1, i2, i3 )
	SV* c_func
	float f0
	double d1
	int i2
	int i3
PREINIT:
	short(*func)(float, double, int, int);
CODE:
	func   = INT2PTR(short(*)(float, double, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2, i3);
OUTPUT:
	RETVAL

float
nci_ffdii( c_func, f0, d1, i2, i3 )
	SV* c_func
	float f0
	double d1
	int i2
	int i3
PREINIT:
	float(*func)(float, double, int, int);
CODE:
	func   = INT2PTR(float(*)(float, double, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2, i3);
OUTPUT:
	RETVAL

char *
nci_tfdii( c_func, f0, d1, i2, i3 )
	SV* c_func
	float f0
	double d1
	int i2
	int i3
PREINIT:
	char *(*func)(float, double, int, int);
CODE:
	func   = INT2PTR(char *(*)(float, double, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2, i3);
OUTPUT:
	RETVAL

int
nci_ifdii( c_func, f0, d1, i2, i3 )
	SV* c_func
	float f0
	double d1
	int i2
	int i3
PREINIT:
	int(*func)(float, double, int, int);
CODE:
	func   = INT2PTR(int(*)(float, double, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, d1, i2, i3);
OUTPUT:
	RETVAL

void *
nci_ptdii( c_func, t0, d1, i2, i3 )
	SV* c_func
	char * t0
	double d1
	int i2
	int i3
PREINIT:
	void *(*func)(char *, double, int, int);
CODE:
	func   = INT2PTR(void *(*)(char *, double, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2, i3);
OUTPUT:
	RETVAL

void
nci_vtdii( c_func, t0, d1, i2, i3 )
	SV* c_func
	char * t0
	double d1
	int i2
	int i3
PREINIT:
	void(*func)(char *, double, int, int);
CODE:
	func   = INT2PTR(void(*)(char *, double, int, int), SvIV(c_func) );
	(*func)(t0, d1, i2, i3);

double
nci_dtdii( c_func, t0, d1, i2, i3 )
	SV* c_func
	char * t0
	double d1
	int i2
	int i3
PREINIT:
	double(*func)(char *, double, int, int);
CODE:
	func   = INT2PTR(double(*)(char *, double, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2, i3);
OUTPUT:
	RETVAL

short
nci_stdii( c_func, t0, d1, i2, i3 )
	SV* c_func
	char * t0
	double d1
	int i2
	int i3
PREINIT:
	short(*func)(char *, double, int, int);
CODE:
	func   = INT2PTR(short(*)(char *, double, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2, i3);
OUTPUT:
	RETVAL

float
nci_ftdii( c_func, t0, d1, i2, i3 )
	SV* c_func
	char * t0
	double d1
	int i2
	int i3
PREINIT:
	float(*func)(char *, double, int, int);
CODE:
	func   = INT2PTR(float(*)(char *, double, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2, i3);
OUTPUT:
	RETVAL

char *
nci_ttdii( c_func, t0, d1, i2, i3 )
	SV* c_func
	char * t0
	double d1
	int i2
	int i3
PREINIT:
	char *(*func)(char *, double, int, int);
CODE:
	func   = INT2PTR(char *(*)(char *, double, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2, i3);
OUTPUT:
	RETVAL

int
nci_itdii( c_func, t0, d1, i2, i3 )
	SV* c_func
	char * t0
	double d1
	int i2
	int i3
PREINIT:
	int(*func)(char *, double, int, int);
CODE:
	func   = INT2PTR(int(*)(char *, double, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, d1, i2, i3);
OUTPUT:
	RETVAL

void *
nci_pidii( c_func, i0, d1, i2, i3 )
	SV* c_func
	int i0
	double d1
	int i2
	int i3
PREINIT:
	void *(*func)(int, double, int, int);
CODE:
	func   = INT2PTR(void *(*)(int, double, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2, i3);
OUTPUT:
	RETVAL

void
nci_vidii( c_func, i0, d1, i2, i3 )
	SV* c_func
	int i0
	double d1
	int i2
	int i3
PREINIT:
	void(*func)(int, double, int, int);
CODE:
	func   = INT2PTR(void(*)(int, double, int, int), SvIV(c_func) );
	(*func)(i0, d1, i2, i3);

double
nci_didii( c_func, i0, d1, i2, i3 )
	SV* c_func
	int i0
	double d1
	int i2
	int i3
PREINIT:
	double(*func)(int, double, int, int);
CODE:
	func   = INT2PTR(double(*)(int, double, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2, i3);
OUTPUT:
	RETVAL

short
nci_sidii( c_func, i0, d1, i2, i3 )
	SV* c_func
	int i0
	double d1
	int i2
	int i3
PREINIT:
	short(*func)(int, double, int, int);
CODE:
	func   = INT2PTR(short(*)(int, double, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2, i3);
OUTPUT:
	RETVAL

float
nci_fidii( c_func, i0, d1, i2, i3 )
	SV* c_func
	int i0
	double d1
	int i2
	int i3
PREINIT:
	float(*func)(int, double, int, int);
CODE:
	func   = INT2PTR(float(*)(int, double, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2, i3);
OUTPUT:
	RETVAL

char *
nci_tidii( c_func, i0, d1, i2, i3 )
	SV* c_func
	int i0
	double d1
	int i2
	int i3
PREINIT:
	char *(*func)(int, double, int, int);
CODE:
	func   = INT2PTR(char *(*)(int, double, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2, i3);
OUTPUT:
	RETVAL

int
nci_iidii( c_func, i0, d1, i2, i3 )
	SV* c_func
	int i0
	double d1
	int i2
	int i3
PREINIT:
	int(*func)(int, double, int, int);
CODE:
	func   = INT2PTR(int(*)(int, double, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, d1, i2, i3);
OUTPUT:
	RETVAL

void *
nci_ppsii( c_func, p0, s1, i2, i3 )
	SV* c_func
	void * p0
	short s1
	int i2
	int i3
PREINIT:
	void *(*func)(void *, short, int, int);
CODE:
	func   = INT2PTR(void *(*)(void *, short, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2, i3);
OUTPUT:
	RETVAL

void
nci_vpsii( c_func, p0, s1, i2, i3 )
	SV* c_func
	void * p0
	short s1
	int i2
	int i3
PREINIT:
	void(*func)(void *, short, int, int);
CODE:
	func   = INT2PTR(void(*)(void *, short, int, int), SvIV(c_func) );
	(*func)(p0, s1, i2, i3);

double
nci_dpsii( c_func, p0, s1, i2, i3 )
	SV* c_func
	void * p0
	short s1
	int i2
	int i3
PREINIT:
	double(*func)(void *, short, int, int);
CODE:
	func   = INT2PTR(double(*)(void *, short, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2, i3);
OUTPUT:
	RETVAL

short
nci_spsii( c_func, p0, s1, i2, i3 )
	SV* c_func
	void * p0
	short s1
	int i2
	int i3
PREINIT:
	short(*func)(void *, short, int, int);
CODE:
	func   = INT2PTR(short(*)(void *, short, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2, i3);
OUTPUT:
	RETVAL

float
nci_fpsii( c_func, p0, s1, i2, i3 )
	SV* c_func
	void * p0
	short s1
	int i2
	int i3
PREINIT:
	float(*func)(void *, short, int, int);
CODE:
	func   = INT2PTR(float(*)(void *, short, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2, i3);
OUTPUT:
	RETVAL

char *
nci_tpsii( c_func, p0, s1, i2, i3 )
	SV* c_func
	void * p0
	short s1
	int i2
	int i3
PREINIT:
	char *(*func)(void *, short, int, int);
CODE:
	func   = INT2PTR(char *(*)(void *, short, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2, i3);
OUTPUT:
	RETVAL

int
nci_ipsii( c_func, p0, s1, i2, i3 )
	SV* c_func
	void * p0
	short s1
	int i2
	int i3
PREINIT:
	int(*func)(void *, short, int, int);
CODE:
	func   = INT2PTR(int(*)(void *, short, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, s1, i2, i3);
OUTPUT:
	RETVAL

void *
nci_pvsii( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvsii( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvsii( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svsii( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvsii( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvsii( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivsii( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdsii( c_func, d0, s1, i2, i3 )
	SV* c_func
	double d0
	short s1
	int i2
	int i3
PREINIT:
	void *(*func)(double, short, int, int);
CODE:
	func   = INT2PTR(void *(*)(double, short, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2, i3);
OUTPUT:
	RETVAL

void
nci_vdsii( c_func, d0, s1, i2, i3 )
	SV* c_func
	double d0
	short s1
	int i2
	int i3
PREINIT:
	void(*func)(double, short, int, int);
CODE:
	func   = INT2PTR(void(*)(double, short, int, int), SvIV(c_func) );
	(*func)(d0, s1, i2, i3);

double
nci_ddsii( c_func, d0, s1, i2, i3 )
	SV* c_func
	double d0
	short s1
	int i2
	int i3
PREINIT:
	double(*func)(double, short, int, int);
CODE:
	func   = INT2PTR(double(*)(double, short, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2, i3);
OUTPUT:
	RETVAL

short
nci_sdsii( c_func, d0, s1, i2, i3 )
	SV* c_func
	double d0
	short s1
	int i2
	int i3
PREINIT:
	short(*func)(double, short, int, int);
CODE:
	func   = INT2PTR(short(*)(double, short, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2, i3);
OUTPUT:
	RETVAL

float
nci_fdsii( c_func, d0, s1, i2, i3 )
	SV* c_func
	double d0
	short s1
	int i2
	int i3
PREINIT:
	float(*func)(double, short, int, int);
CODE:
	func   = INT2PTR(float(*)(double, short, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2, i3);
OUTPUT:
	RETVAL

char *
nci_tdsii( c_func, d0, s1, i2, i3 )
	SV* c_func
	double d0
	short s1
	int i2
	int i3
PREINIT:
	char *(*func)(double, short, int, int);
CODE:
	func   = INT2PTR(char *(*)(double, short, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2, i3);
OUTPUT:
	RETVAL

int
nci_idsii( c_func, d0, s1, i2, i3 )
	SV* c_func
	double d0
	short s1
	int i2
	int i3
PREINIT:
	int(*func)(double, short, int, int);
CODE:
	func   = INT2PTR(int(*)(double, short, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, s1, i2, i3);
OUTPUT:
	RETVAL

void *
nci_pssii( c_func, s0, s1, i2, i3 )
	SV* c_func
	short s0
	short s1
	int i2
	int i3
PREINIT:
	void *(*func)(short, short, int, int);
CODE:
	func   = INT2PTR(void *(*)(short, short, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2, i3);
OUTPUT:
	RETVAL

void
nci_vssii( c_func, s0, s1, i2, i3 )
	SV* c_func
	short s0
	short s1
	int i2
	int i3
PREINIT:
	void(*func)(short, short, int, int);
CODE:
	func   = INT2PTR(void(*)(short, short, int, int), SvIV(c_func) );
	(*func)(s0, s1, i2, i3);

double
nci_dssii( c_func, s0, s1, i2, i3 )
	SV* c_func
	short s0
	short s1
	int i2
	int i3
PREINIT:
	double(*func)(short, short, int, int);
CODE:
	func   = INT2PTR(double(*)(short, short, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2, i3);
OUTPUT:
	RETVAL

short
nci_sssii( c_func, s0, s1, i2, i3 )
	SV* c_func
	short s0
	short s1
	int i2
	int i3
PREINIT:
	short(*func)(short, short, int, int);
CODE:
	func   = INT2PTR(short(*)(short, short, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2, i3);
OUTPUT:
	RETVAL

float
nci_fssii( c_func, s0, s1, i2, i3 )
	SV* c_func
	short s0
	short s1
	int i2
	int i3
PREINIT:
	float(*func)(short, short, int, int);
CODE:
	func   = INT2PTR(float(*)(short, short, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2, i3);
OUTPUT:
	RETVAL

char *
nci_tssii( c_func, s0, s1, i2, i3 )
	SV* c_func
	short s0
	short s1
	int i2
	int i3
PREINIT:
	char *(*func)(short, short, int, int);
CODE:
	func   = INT2PTR(char *(*)(short, short, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2, i3);
OUTPUT:
	RETVAL

int
nci_issii( c_func, s0, s1, i2, i3 )
	SV* c_func
	short s0
	short s1
	int i2
	int i3
PREINIT:
	int(*func)(short, short, int, int);
CODE:
	func   = INT2PTR(int(*)(short, short, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, s1, i2, i3);
OUTPUT:
	RETVAL

void *
nci_pfsii( c_func, f0, s1, i2, i3 )
	SV* c_func
	float f0
	short s1
	int i2
	int i3
PREINIT:
	void *(*func)(float, short, int, int);
CODE:
	func   = INT2PTR(void *(*)(float, short, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2, i3);
OUTPUT:
	RETVAL

void
nci_vfsii( c_func, f0, s1, i2, i3 )
	SV* c_func
	float f0
	short s1
	int i2
	int i3
PREINIT:
	void(*func)(float, short, int, int);
CODE:
	func   = INT2PTR(void(*)(float, short, int, int), SvIV(c_func) );
	(*func)(f0, s1, i2, i3);

double
nci_dfsii( c_func, f0, s1, i2, i3 )
	SV* c_func
	float f0
	short s1
	int i2
	int i3
PREINIT:
	double(*func)(float, short, int, int);
CODE:
	func   = INT2PTR(double(*)(float, short, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2, i3);
OUTPUT:
	RETVAL

short
nci_sfsii( c_func, f0, s1, i2, i3 )
	SV* c_func
	float f0
	short s1
	int i2
	int i3
PREINIT:
	short(*func)(float, short, int, int);
CODE:
	func   = INT2PTR(short(*)(float, short, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2, i3);
OUTPUT:
	RETVAL

float
nci_ffsii( c_func, f0, s1, i2, i3 )
	SV* c_func
	float f0
	short s1
	int i2
	int i3
PREINIT:
	float(*func)(float, short, int, int);
CODE:
	func   = INT2PTR(float(*)(float, short, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2, i3);
OUTPUT:
	RETVAL

char *
nci_tfsii( c_func, f0, s1, i2, i3 )
	SV* c_func
	float f0
	short s1
	int i2
	int i3
PREINIT:
	char *(*func)(float, short, int, int);
CODE:
	func   = INT2PTR(char *(*)(float, short, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2, i3);
OUTPUT:
	RETVAL

int
nci_ifsii( c_func, f0, s1, i2, i3 )
	SV* c_func
	float f0
	short s1
	int i2
	int i3
PREINIT:
	int(*func)(float, short, int, int);
CODE:
	func   = INT2PTR(int(*)(float, short, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, s1, i2, i3);
OUTPUT:
	RETVAL

void *
nci_ptsii( c_func, t0, s1, i2, i3 )
	SV* c_func
	char * t0
	short s1
	int i2
	int i3
PREINIT:
	void *(*func)(char *, short, int, int);
CODE:
	func   = INT2PTR(void *(*)(char *, short, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2, i3);
OUTPUT:
	RETVAL

void
nci_vtsii( c_func, t0, s1, i2, i3 )
	SV* c_func
	char * t0
	short s1
	int i2
	int i3
PREINIT:
	void(*func)(char *, short, int, int);
CODE:
	func   = INT2PTR(void(*)(char *, short, int, int), SvIV(c_func) );
	(*func)(t0, s1, i2, i3);

double
nci_dtsii( c_func, t0, s1, i2, i3 )
	SV* c_func
	char * t0
	short s1
	int i2
	int i3
PREINIT:
	double(*func)(char *, short, int, int);
CODE:
	func   = INT2PTR(double(*)(char *, short, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2, i3);
OUTPUT:
	RETVAL

short
nci_stsii( c_func, t0, s1, i2, i3 )
	SV* c_func
	char * t0
	short s1
	int i2
	int i3
PREINIT:
	short(*func)(char *, short, int, int);
CODE:
	func   = INT2PTR(short(*)(char *, short, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2, i3);
OUTPUT:
	RETVAL

float
nci_ftsii( c_func, t0, s1, i2, i3 )
	SV* c_func
	char * t0
	short s1
	int i2
	int i3
PREINIT:
	float(*func)(char *, short, int, int);
CODE:
	func   = INT2PTR(float(*)(char *, short, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2, i3);
OUTPUT:
	RETVAL

char *
nci_ttsii( c_func, t0, s1, i2, i3 )
	SV* c_func
	char * t0
	short s1
	int i2
	int i3
PREINIT:
	char *(*func)(char *, short, int, int);
CODE:
	func   = INT2PTR(char *(*)(char *, short, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2, i3);
OUTPUT:
	RETVAL

int
nci_itsii( c_func, t0, s1, i2, i3 )
	SV* c_func
	char * t0
	short s1
	int i2
	int i3
PREINIT:
	int(*func)(char *, short, int, int);
CODE:
	func   = INT2PTR(int(*)(char *, short, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, s1, i2, i3);
OUTPUT:
	RETVAL

void *
nci_pisii( c_func, i0, s1, i2, i3 )
	SV* c_func
	int i0
	short s1
	int i2
	int i3
PREINIT:
	void *(*func)(int, short, int, int);
CODE:
	func   = INT2PTR(void *(*)(int, short, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2, i3);
OUTPUT:
	RETVAL

void
nci_visii( c_func, i0, s1, i2, i3 )
	SV* c_func
	int i0
	short s1
	int i2
	int i3
PREINIT:
	void(*func)(int, short, int, int);
CODE:
	func   = INT2PTR(void(*)(int, short, int, int), SvIV(c_func) );
	(*func)(i0, s1, i2, i3);

double
nci_disii( c_func, i0, s1, i2, i3 )
	SV* c_func
	int i0
	short s1
	int i2
	int i3
PREINIT:
	double(*func)(int, short, int, int);
CODE:
	func   = INT2PTR(double(*)(int, short, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2, i3);
OUTPUT:
	RETVAL

short
nci_sisii( c_func, i0, s1, i2, i3 )
	SV* c_func
	int i0
	short s1
	int i2
	int i3
PREINIT:
	short(*func)(int, short, int, int);
CODE:
	func   = INT2PTR(short(*)(int, short, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2, i3);
OUTPUT:
	RETVAL

float
nci_fisii( c_func, i0, s1, i2, i3 )
	SV* c_func
	int i0
	short s1
	int i2
	int i3
PREINIT:
	float(*func)(int, short, int, int);
CODE:
	func   = INT2PTR(float(*)(int, short, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2, i3);
OUTPUT:
	RETVAL

char *
nci_tisii( c_func, i0, s1, i2, i3 )
	SV* c_func
	int i0
	short s1
	int i2
	int i3
PREINIT:
	char *(*func)(int, short, int, int);
CODE:
	func   = INT2PTR(char *(*)(int, short, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2, i3);
OUTPUT:
	RETVAL

int
nci_iisii( c_func, i0, s1, i2, i3 )
	SV* c_func
	int i0
	short s1
	int i2
	int i3
PREINIT:
	int(*func)(int, short, int, int);
CODE:
	func   = INT2PTR(int(*)(int, short, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, s1, i2, i3);
OUTPUT:
	RETVAL

void *
nci_ppfii( c_func, p0, f1, i2, i3 )
	SV* c_func
	void * p0
	float f1
	int i2
	int i3
PREINIT:
	void *(*func)(void *, float, int, int);
CODE:
	func   = INT2PTR(void *(*)(void *, float, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2, i3);
OUTPUT:
	RETVAL

void
nci_vpfii( c_func, p0, f1, i2, i3 )
	SV* c_func
	void * p0
	float f1
	int i2
	int i3
PREINIT:
	void(*func)(void *, float, int, int);
CODE:
	func   = INT2PTR(void(*)(void *, float, int, int), SvIV(c_func) );
	(*func)(p0, f1, i2, i3);

double
nci_dpfii( c_func, p0, f1, i2, i3 )
	SV* c_func
	void * p0
	float f1
	int i2
	int i3
PREINIT:
	double(*func)(void *, float, int, int);
CODE:
	func   = INT2PTR(double(*)(void *, float, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2, i3);
OUTPUT:
	RETVAL

short
nci_spfii( c_func, p0, f1, i2, i3 )
	SV* c_func
	void * p0
	float f1
	int i2
	int i3
PREINIT:
	short(*func)(void *, float, int, int);
CODE:
	func   = INT2PTR(short(*)(void *, float, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2, i3);
OUTPUT:
	RETVAL

float
nci_fpfii( c_func, p0, f1, i2, i3 )
	SV* c_func
	void * p0
	float f1
	int i2
	int i3
PREINIT:
	float(*func)(void *, float, int, int);
CODE:
	func   = INT2PTR(float(*)(void *, float, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2, i3);
OUTPUT:
	RETVAL

char *
nci_tpfii( c_func, p0, f1, i2, i3 )
	SV* c_func
	void * p0
	float f1
	int i2
	int i3
PREINIT:
	char *(*func)(void *, float, int, int);
CODE:
	func   = INT2PTR(char *(*)(void *, float, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2, i3);
OUTPUT:
	RETVAL

int
nci_ipfii( c_func, p0, f1, i2, i3 )
	SV* c_func
	void * p0
	float f1
	int i2
	int i3
PREINIT:
	int(*func)(void *, float, int, int);
CODE:
	func   = INT2PTR(int(*)(void *, float, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, f1, i2, i3);
OUTPUT:
	RETVAL

void *
nci_pvfii( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvfii( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvfii( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svfii( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvfii( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvfii( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivfii( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdfii( c_func, d0, f1, i2, i3 )
	SV* c_func
	double d0
	float f1
	int i2
	int i3
PREINIT:
	void *(*func)(double, float, int, int);
CODE:
	func   = INT2PTR(void *(*)(double, float, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2, i3);
OUTPUT:
	RETVAL

void
nci_vdfii( c_func, d0, f1, i2, i3 )
	SV* c_func
	double d0
	float f1
	int i2
	int i3
PREINIT:
	void(*func)(double, float, int, int);
CODE:
	func   = INT2PTR(void(*)(double, float, int, int), SvIV(c_func) );
	(*func)(d0, f1, i2, i3);

double
nci_ddfii( c_func, d0, f1, i2, i3 )
	SV* c_func
	double d0
	float f1
	int i2
	int i3
PREINIT:
	double(*func)(double, float, int, int);
CODE:
	func   = INT2PTR(double(*)(double, float, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2, i3);
OUTPUT:
	RETVAL

short
nci_sdfii( c_func, d0, f1, i2, i3 )
	SV* c_func
	double d0
	float f1
	int i2
	int i3
PREINIT:
	short(*func)(double, float, int, int);
CODE:
	func   = INT2PTR(short(*)(double, float, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2, i3);
OUTPUT:
	RETVAL

float
nci_fdfii( c_func, d0, f1, i2, i3 )
	SV* c_func
	double d0
	float f1
	int i2
	int i3
PREINIT:
	float(*func)(double, float, int, int);
CODE:
	func   = INT2PTR(float(*)(double, float, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2, i3);
OUTPUT:
	RETVAL

char *
nci_tdfii( c_func, d0, f1, i2, i3 )
	SV* c_func
	double d0
	float f1
	int i2
	int i3
PREINIT:
	char *(*func)(double, float, int, int);
CODE:
	func   = INT2PTR(char *(*)(double, float, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2, i3);
OUTPUT:
	RETVAL

int
nci_idfii( c_func, d0, f1, i2, i3 )
	SV* c_func
	double d0
	float f1
	int i2
	int i3
PREINIT:
	int(*func)(double, float, int, int);
CODE:
	func   = INT2PTR(int(*)(double, float, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, f1, i2, i3);
OUTPUT:
	RETVAL

void *
nci_psfii( c_func, s0, f1, i2, i3 )
	SV* c_func
	short s0
	float f1
	int i2
	int i3
PREINIT:
	void *(*func)(short, float, int, int);
CODE:
	func   = INT2PTR(void *(*)(short, float, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2, i3);
OUTPUT:
	RETVAL

void
nci_vsfii( c_func, s0, f1, i2, i3 )
	SV* c_func
	short s0
	float f1
	int i2
	int i3
PREINIT:
	void(*func)(short, float, int, int);
CODE:
	func   = INT2PTR(void(*)(short, float, int, int), SvIV(c_func) );
	(*func)(s0, f1, i2, i3);

double
nci_dsfii( c_func, s0, f1, i2, i3 )
	SV* c_func
	short s0
	float f1
	int i2
	int i3
PREINIT:
	double(*func)(short, float, int, int);
CODE:
	func   = INT2PTR(double(*)(short, float, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2, i3);
OUTPUT:
	RETVAL

short
nci_ssfii( c_func, s0, f1, i2, i3 )
	SV* c_func
	short s0
	float f1
	int i2
	int i3
PREINIT:
	short(*func)(short, float, int, int);
CODE:
	func   = INT2PTR(short(*)(short, float, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2, i3);
OUTPUT:
	RETVAL

float
nci_fsfii( c_func, s0, f1, i2, i3 )
	SV* c_func
	short s0
	float f1
	int i2
	int i3
PREINIT:
	float(*func)(short, float, int, int);
CODE:
	func   = INT2PTR(float(*)(short, float, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2, i3);
OUTPUT:
	RETVAL

char *
nci_tsfii( c_func, s0, f1, i2, i3 )
	SV* c_func
	short s0
	float f1
	int i2
	int i3
PREINIT:
	char *(*func)(short, float, int, int);
CODE:
	func   = INT2PTR(char *(*)(short, float, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2, i3);
OUTPUT:
	RETVAL

int
nci_isfii( c_func, s0, f1, i2, i3 )
	SV* c_func
	short s0
	float f1
	int i2
	int i3
PREINIT:
	int(*func)(short, float, int, int);
CODE:
	func   = INT2PTR(int(*)(short, float, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, f1, i2, i3);
OUTPUT:
	RETVAL

void *
nci_pffii( c_func, f0, f1, i2, i3 )
	SV* c_func
	float f0
	float f1
	int i2
	int i3
PREINIT:
	void *(*func)(float, float, int, int);
CODE:
	func   = INT2PTR(void *(*)(float, float, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2, i3);
OUTPUT:
	RETVAL

void
nci_vffii( c_func, f0, f1, i2, i3 )
	SV* c_func
	float f0
	float f1
	int i2
	int i3
PREINIT:
	void(*func)(float, float, int, int);
CODE:
	func   = INT2PTR(void(*)(float, float, int, int), SvIV(c_func) );
	(*func)(f0, f1, i2, i3);

double
nci_dffii( c_func, f0, f1, i2, i3 )
	SV* c_func
	float f0
	float f1
	int i2
	int i3
PREINIT:
	double(*func)(float, float, int, int);
CODE:
	func   = INT2PTR(double(*)(float, float, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2, i3);
OUTPUT:
	RETVAL

short
nci_sffii( c_func, f0, f1, i2, i3 )
	SV* c_func
	float f0
	float f1
	int i2
	int i3
PREINIT:
	short(*func)(float, float, int, int);
CODE:
	func   = INT2PTR(short(*)(float, float, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2, i3);
OUTPUT:
	RETVAL

float
nci_fffii( c_func, f0, f1, i2, i3 )
	SV* c_func
	float f0
	float f1
	int i2
	int i3
PREINIT:
	float(*func)(float, float, int, int);
CODE:
	func   = INT2PTR(float(*)(float, float, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2, i3);
OUTPUT:
	RETVAL

char *
nci_tffii( c_func, f0, f1, i2, i3 )
	SV* c_func
	float f0
	float f1
	int i2
	int i3
PREINIT:
	char *(*func)(float, float, int, int);
CODE:
	func   = INT2PTR(char *(*)(float, float, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2, i3);
OUTPUT:
	RETVAL

int
nci_iffii( c_func, f0, f1, i2, i3 )
	SV* c_func
	float f0
	float f1
	int i2
	int i3
PREINIT:
	int(*func)(float, float, int, int);
CODE:
	func   = INT2PTR(int(*)(float, float, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, f1, i2, i3);
OUTPUT:
	RETVAL

void *
nci_ptfii( c_func, t0, f1, i2, i3 )
	SV* c_func
	char * t0
	float f1
	int i2
	int i3
PREINIT:
	void *(*func)(char *, float, int, int);
CODE:
	func   = INT2PTR(void *(*)(char *, float, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2, i3);
OUTPUT:
	RETVAL

void
nci_vtfii( c_func, t0, f1, i2, i3 )
	SV* c_func
	char * t0
	float f1
	int i2
	int i3
PREINIT:
	void(*func)(char *, float, int, int);
CODE:
	func   = INT2PTR(void(*)(char *, float, int, int), SvIV(c_func) );
	(*func)(t0, f1, i2, i3);

double
nci_dtfii( c_func, t0, f1, i2, i3 )
	SV* c_func
	char * t0
	float f1
	int i2
	int i3
PREINIT:
	double(*func)(char *, float, int, int);
CODE:
	func   = INT2PTR(double(*)(char *, float, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2, i3);
OUTPUT:
	RETVAL

short
nci_stfii( c_func, t0, f1, i2, i3 )
	SV* c_func
	char * t0
	float f1
	int i2
	int i3
PREINIT:
	short(*func)(char *, float, int, int);
CODE:
	func   = INT2PTR(short(*)(char *, float, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2, i3);
OUTPUT:
	RETVAL

float
nci_ftfii( c_func, t0, f1, i2, i3 )
	SV* c_func
	char * t0
	float f1
	int i2
	int i3
PREINIT:
	float(*func)(char *, float, int, int);
CODE:
	func   = INT2PTR(float(*)(char *, float, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2, i3);
OUTPUT:
	RETVAL

char *
nci_ttfii( c_func, t0, f1, i2, i3 )
	SV* c_func
	char * t0
	float f1
	int i2
	int i3
PREINIT:
	char *(*func)(char *, float, int, int);
CODE:
	func   = INT2PTR(char *(*)(char *, float, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2, i3);
OUTPUT:
	RETVAL

int
nci_itfii( c_func, t0, f1, i2, i3 )
	SV* c_func
	char * t0
	float f1
	int i2
	int i3
PREINIT:
	int(*func)(char *, float, int, int);
CODE:
	func   = INT2PTR(int(*)(char *, float, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, f1, i2, i3);
OUTPUT:
	RETVAL

void *
nci_pifii( c_func, i0, f1, i2, i3 )
	SV* c_func
	int i0
	float f1
	int i2
	int i3
PREINIT:
	void *(*func)(int, float, int, int);
CODE:
	func   = INT2PTR(void *(*)(int, float, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2, i3);
OUTPUT:
	RETVAL

void
nci_vifii( c_func, i0, f1, i2, i3 )
	SV* c_func
	int i0
	float f1
	int i2
	int i3
PREINIT:
	void(*func)(int, float, int, int);
CODE:
	func   = INT2PTR(void(*)(int, float, int, int), SvIV(c_func) );
	(*func)(i0, f1, i2, i3);

double
nci_difii( c_func, i0, f1, i2, i3 )
	SV* c_func
	int i0
	float f1
	int i2
	int i3
PREINIT:
	double(*func)(int, float, int, int);
CODE:
	func   = INT2PTR(double(*)(int, float, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2, i3);
OUTPUT:
	RETVAL

short
nci_sifii( c_func, i0, f1, i2, i3 )
	SV* c_func
	int i0
	float f1
	int i2
	int i3
PREINIT:
	short(*func)(int, float, int, int);
CODE:
	func   = INT2PTR(short(*)(int, float, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2, i3);
OUTPUT:
	RETVAL

float
nci_fifii( c_func, i0, f1, i2, i3 )
	SV* c_func
	int i0
	float f1
	int i2
	int i3
PREINIT:
	float(*func)(int, float, int, int);
CODE:
	func   = INT2PTR(float(*)(int, float, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2, i3);
OUTPUT:
	RETVAL

char *
nci_tifii( c_func, i0, f1, i2, i3 )
	SV* c_func
	int i0
	float f1
	int i2
	int i3
PREINIT:
	char *(*func)(int, float, int, int);
CODE:
	func   = INT2PTR(char *(*)(int, float, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2, i3);
OUTPUT:
	RETVAL

int
nci_iifii( c_func, i0, f1, i2, i3 )
	SV* c_func
	int i0
	float f1
	int i2
	int i3
PREINIT:
	int(*func)(int, float, int, int);
CODE:
	func   = INT2PTR(int(*)(int, float, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, f1, i2, i3);
OUTPUT:
	RETVAL

void *
nci_pptii( c_func, p0, t1, i2, i3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	int i3
PREINIT:
	void *(*func)(void *, char *, int, int);
CODE:
	func   = INT2PTR(void *(*)(void *, char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2, i3);
OUTPUT:
	RETVAL

void
nci_vptii( c_func, p0, t1, i2, i3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	int i3
PREINIT:
	void(*func)(void *, char *, int, int);
CODE:
	func   = INT2PTR(void(*)(void *, char *, int, int), SvIV(c_func) );
	(*func)(p0, t1, i2, i3);

double
nci_dptii( c_func, p0, t1, i2, i3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	int i3
PREINIT:
	double(*func)(void *, char *, int, int);
CODE:
	func   = INT2PTR(double(*)(void *, char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2, i3);
OUTPUT:
	RETVAL

short
nci_sptii( c_func, p0, t1, i2, i3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	int i3
PREINIT:
	short(*func)(void *, char *, int, int);
CODE:
	func   = INT2PTR(short(*)(void *, char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2, i3);
OUTPUT:
	RETVAL

float
nci_fptii( c_func, p0, t1, i2, i3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	int i3
PREINIT:
	float(*func)(void *, char *, int, int);
CODE:
	func   = INT2PTR(float(*)(void *, char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2, i3);
OUTPUT:
	RETVAL

char *
nci_tptii( c_func, p0, t1, i2, i3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	int i3
PREINIT:
	char *(*func)(void *, char *, int, int);
CODE:
	func   = INT2PTR(char *(*)(void *, char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2, i3);
OUTPUT:
	RETVAL

int
nci_iptii( c_func, p0, t1, i2, i3 )
	SV* c_func
	void * p0
	char * t1
	int i2
	int i3
PREINIT:
	int(*func)(void *, char *, int, int);
CODE:
	func   = INT2PTR(int(*)(void *, char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, t1, i2, i3);
OUTPUT:
	RETVAL

void *
nci_pvtii( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vvtii( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dvtii( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_svtii( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fvtii( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tvtii( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_ivtii( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdtii( c_func, d0, t1, i2, i3 )
	SV* c_func
	double d0
	char * t1
	int i2
	int i3
PREINIT:
	void *(*func)(double, char *, int, int);
CODE:
	func   = INT2PTR(void *(*)(double, char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2, i3);
OUTPUT:
	RETVAL

void
nci_vdtii( c_func, d0, t1, i2, i3 )
	SV* c_func
	double d0
	char * t1
	int i2
	int i3
PREINIT:
	void(*func)(double, char *, int, int);
CODE:
	func   = INT2PTR(void(*)(double, char *, int, int), SvIV(c_func) );
	(*func)(d0, t1, i2, i3);

double
nci_ddtii( c_func, d0, t1, i2, i3 )
	SV* c_func
	double d0
	char * t1
	int i2
	int i3
PREINIT:
	double(*func)(double, char *, int, int);
CODE:
	func   = INT2PTR(double(*)(double, char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2, i3);
OUTPUT:
	RETVAL

short
nci_sdtii( c_func, d0, t1, i2, i3 )
	SV* c_func
	double d0
	char * t1
	int i2
	int i3
PREINIT:
	short(*func)(double, char *, int, int);
CODE:
	func   = INT2PTR(short(*)(double, char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2, i3);
OUTPUT:
	RETVAL

float
nci_fdtii( c_func, d0, t1, i2, i3 )
	SV* c_func
	double d0
	char * t1
	int i2
	int i3
PREINIT:
	float(*func)(double, char *, int, int);
CODE:
	func   = INT2PTR(float(*)(double, char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2, i3);
OUTPUT:
	RETVAL

char *
nci_tdtii( c_func, d0, t1, i2, i3 )
	SV* c_func
	double d0
	char * t1
	int i2
	int i3
PREINIT:
	char *(*func)(double, char *, int, int);
CODE:
	func   = INT2PTR(char *(*)(double, char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2, i3);
OUTPUT:
	RETVAL

int
nci_idtii( c_func, d0, t1, i2, i3 )
	SV* c_func
	double d0
	char * t1
	int i2
	int i3
PREINIT:
	int(*func)(double, char *, int, int);
CODE:
	func   = INT2PTR(int(*)(double, char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, t1, i2, i3);
OUTPUT:
	RETVAL

void *
nci_pstii( c_func, s0, t1, i2, i3 )
	SV* c_func
	short s0
	char * t1
	int i2
	int i3
PREINIT:
	void *(*func)(short, char *, int, int);
CODE:
	func   = INT2PTR(void *(*)(short, char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2, i3);
OUTPUT:
	RETVAL

void
nci_vstii( c_func, s0, t1, i2, i3 )
	SV* c_func
	short s0
	char * t1
	int i2
	int i3
PREINIT:
	void(*func)(short, char *, int, int);
CODE:
	func   = INT2PTR(void(*)(short, char *, int, int), SvIV(c_func) );
	(*func)(s0, t1, i2, i3);

double
nci_dstii( c_func, s0, t1, i2, i3 )
	SV* c_func
	short s0
	char * t1
	int i2
	int i3
PREINIT:
	double(*func)(short, char *, int, int);
CODE:
	func   = INT2PTR(double(*)(short, char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2, i3);
OUTPUT:
	RETVAL

short
nci_sstii( c_func, s0, t1, i2, i3 )
	SV* c_func
	short s0
	char * t1
	int i2
	int i3
PREINIT:
	short(*func)(short, char *, int, int);
CODE:
	func   = INT2PTR(short(*)(short, char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2, i3);
OUTPUT:
	RETVAL

float
nci_fstii( c_func, s0, t1, i2, i3 )
	SV* c_func
	short s0
	char * t1
	int i2
	int i3
PREINIT:
	float(*func)(short, char *, int, int);
CODE:
	func   = INT2PTR(float(*)(short, char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2, i3);
OUTPUT:
	RETVAL

char *
nci_tstii( c_func, s0, t1, i2, i3 )
	SV* c_func
	short s0
	char * t1
	int i2
	int i3
PREINIT:
	char *(*func)(short, char *, int, int);
CODE:
	func   = INT2PTR(char *(*)(short, char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2, i3);
OUTPUT:
	RETVAL

int
nci_istii( c_func, s0, t1, i2, i3 )
	SV* c_func
	short s0
	char * t1
	int i2
	int i3
PREINIT:
	int(*func)(short, char *, int, int);
CODE:
	func   = INT2PTR(int(*)(short, char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, t1, i2, i3);
OUTPUT:
	RETVAL

void *
nci_pftii( c_func, f0, t1, i2, i3 )
	SV* c_func
	float f0
	char * t1
	int i2
	int i3
PREINIT:
	void *(*func)(float, char *, int, int);
CODE:
	func   = INT2PTR(void *(*)(float, char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2, i3);
OUTPUT:
	RETVAL

void
nci_vftii( c_func, f0, t1, i2, i3 )
	SV* c_func
	float f0
	char * t1
	int i2
	int i3
PREINIT:
	void(*func)(float, char *, int, int);
CODE:
	func   = INT2PTR(void(*)(float, char *, int, int), SvIV(c_func) );
	(*func)(f0, t1, i2, i3);

double
nci_dftii( c_func, f0, t1, i2, i3 )
	SV* c_func
	float f0
	char * t1
	int i2
	int i3
PREINIT:
	double(*func)(float, char *, int, int);
CODE:
	func   = INT2PTR(double(*)(float, char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2, i3);
OUTPUT:
	RETVAL

short
nci_sftii( c_func, f0, t1, i2, i3 )
	SV* c_func
	float f0
	char * t1
	int i2
	int i3
PREINIT:
	short(*func)(float, char *, int, int);
CODE:
	func   = INT2PTR(short(*)(float, char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2, i3);
OUTPUT:
	RETVAL

float
nci_fftii( c_func, f0, t1, i2, i3 )
	SV* c_func
	float f0
	char * t1
	int i2
	int i3
PREINIT:
	float(*func)(float, char *, int, int);
CODE:
	func   = INT2PTR(float(*)(float, char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2, i3);
OUTPUT:
	RETVAL

char *
nci_tftii( c_func, f0, t1, i2, i3 )
	SV* c_func
	float f0
	char * t1
	int i2
	int i3
PREINIT:
	char *(*func)(float, char *, int, int);
CODE:
	func   = INT2PTR(char *(*)(float, char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2, i3);
OUTPUT:
	RETVAL

int
nci_iftii( c_func, f0, t1, i2, i3 )
	SV* c_func
	float f0
	char * t1
	int i2
	int i3
PREINIT:
	int(*func)(float, char *, int, int);
CODE:
	func   = INT2PTR(int(*)(float, char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, t1, i2, i3);
OUTPUT:
	RETVAL

void *
nci_pttii( c_func, t0, t1, i2, i3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	int i3
PREINIT:
	void *(*func)(char *, char *, int, int);
CODE:
	func   = INT2PTR(void *(*)(char *, char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2, i3);
OUTPUT:
	RETVAL

void
nci_vttii( c_func, t0, t1, i2, i3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	int i3
PREINIT:
	void(*func)(char *, char *, int, int);
CODE:
	func   = INT2PTR(void(*)(char *, char *, int, int), SvIV(c_func) );
	(*func)(t0, t1, i2, i3);

double
nci_dttii( c_func, t0, t1, i2, i3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	int i3
PREINIT:
	double(*func)(char *, char *, int, int);
CODE:
	func   = INT2PTR(double(*)(char *, char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2, i3);
OUTPUT:
	RETVAL

short
nci_sttii( c_func, t0, t1, i2, i3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	int i3
PREINIT:
	short(*func)(char *, char *, int, int);
CODE:
	func   = INT2PTR(short(*)(char *, char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2, i3);
OUTPUT:
	RETVAL

float
nci_fttii( c_func, t0, t1, i2, i3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	int i3
PREINIT:
	float(*func)(char *, char *, int, int);
CODE:
	func   = INT2PTR(float(*)(char *, char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2, i3);
OUTPUT:
	RETVAL

char *
nci_tttii( c_func, t0, t1, i2, i3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	int i3
PREINIT:
	char *(*func)(char *, char *, int, int);
CODE:
	func   = INT2PTR(char *(*)(char *, char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2, i3);
OUTPUT:
	RETVAL

int
nci_ittii( c_func, t0, t1, i2, i3 )
	SV* c_func
	char * t0
	char * t1
	int i2
	int i3
PREINIT:
	int(*func)(char *, char *, int, int);
CODE:
	func   = INT2PTR(int(*)(char *, char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, t1, i2, i3);
OUTPUT:
	RETVAL

void *
nci_pitii( c_func, i0, t1, i2, i3 )
	SV* c_func
	int i0
	char * t1
	int i2
	int i3
PREINIT:
	void *(*func)(int, char *, int, int);
CODE:
	func   = INT2PTR(void *(*)(int, char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2, i3);
OUTPUT:
	RETVAL

void
nci_vitii( c_func, i0, t1, i2, i3 )
	SV* c_func
	int i0
	char * t1
	int i2
	int i3
PREINIT:
	void(*func)(int, char *, int, int);
CODE:
	func   = INT2PTR(void(*)(int, char *, int, int), SvIV(c_func) );
	(*func)(i0, t1, i2, i3);

double
nci_ditii( c_func, i0, t1, i2, i3 )
	SV* c_func
	int i0
	char * t1
	int i2
	int i3
PREINIT:
	double(*func)(int, char *, int, int);
CODE:
	func   = INT2PTR(double(*)(int, char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2, i3);
OUTPUT:
	RETVAL

short
nci_sitii( c_func, i0, t1, i2, i3 )
	SV* c_func
	int i0
	char * t1
	int i2
	int i3
PREINIT:
	short(*func)(int, char *, int, int);
CODE:
	func   = INT2PTR(short(*)(int, char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2, i3);
OUTPUT:
	RETVAL

float
nci_fitii( c_func, i0, t1, i2, i3 )
	SV* c_func
	int i0
	char * t1
	int i2
	int i3
PREINIT:
	float(*func)(int, char *, int, int);
CODE:
	func   = INT2PTR(float(*)(int, char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2, i3);
OUTPUT:
	RETVAL

char *
nci_titii( c_func, i0, t1, i2, i3 )
	SV* c_func
	int i0
	char * t1
	int i2
	int i3
PREINIT:
	char *(*func)(int, char *, int, int);
CODE:
	func   = INT2PTR(char *(*)(int, char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2, i3);
OUTPUT:
	RETVAL

int
nci_iitii( c_func, i0, t1, i2, i3 )
	SV* c_func
	int i0
	char * t1
	int i2
	int i3
PREINIT:
	int(*func)(int, char *, int, int);
CODE:
	func   = INT2PTR(int(*)(int, char *, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, t1, i2, i3);
OUTPUT:
	RETVAL

void *
nci_ppiii( c_func, p0, i1, i2, i3 )
	SV* c_func
	void * p0
	int i1
	int i2
	int i3
PREINIT:
	void *(*func)(void *, int, int, int);
CODE:
	func   = INT2PTR(void *(*)(void *, int, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2, i3);
OUTPUT:
	RETVAL

void
nci_vpiii( c_func, p0, i1, i2, i3 )
	SV* c_func
	void * p0
	int i1
	int i2
	int i3
PREINIT:
	void(*func)(void *, int, int, int);
CODE:
	func   = INT2PTR(void(*)(void *, int, int, int), SvIV(c_func) );
	(*func)(p0, i1, i2, i3);

double
nci_dpiii( c_func, p0, i1, i2, i3 )
	SV* c_func
	void * p0
	int i1
	int i2
	int i3
PREINIT:
	double(*func)(void *, int, int, int);
CODE:
	func   = INT2PTR(double(*)(void *, int, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2, i3);
OUTPUT:
	RETVAL

short
nci_spiii( c_func, p0, i1, i2, i3 )
	SV* c_func
	void * p0
	int i1
	int i2
	int i3
PREINIT:
	short(*func)(void *, int, int, int);
CODE:
	func   = INT2PTR(short(*)(void *, int, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2, i3);
OUTPUT:
	RETVAL

float
nci_fpiii( c_func, p0, i1, i2, i3 )
	SV* c_func
	void * p0
	int i1
	int i2
	int i3
PREINIT:
	float(*func)(void *, int, int, int);
CODE:
	func   = INT2PTR(float(*)(void *, int, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2, i3);
OUTPUT:
	RETVAL

char *
nci_tpiii( c_func, p0, i1, i2, i3 )
	SV* c_func
	void * p0
	int i1
	int i2
	int i3
PREINIT:
	char *(*func)(void *, int, int, int);
CODE:
	func   = INT2PTR(char *(*)(void *, int, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2, i3);
OUTPUT:
	RETVAL

int
nci_ipiii( c_func, p0, i1, i2, i3 )
	SV* c_func
	void * p0
	int i1
	int i2
	int i3
PREINIT:
	int(*func)(void *, int, int, int);
CODE:
	func   = INT2PTR(int(*)(void *, int, int, int), SvIV(c_func) );
	RETVAL = (*func)(p0, i1, i2, i3);
OUTPUT:
	RETVAL

void *
nci_pviii( c_func )
	SV* c_func
PREINIT:
	void *(*func)( );
CODE:
	func   = INT2PTR(void *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void
nci_vviii( c_func )
	SV* c_func
PREINIT:
	void(*func)( );
CODE:
	func   = INT2PTR(void(*)( ), SvIV(c_func) );
	(*func)();

double
nci_dviii( c_func )
	SV* c_func
PREINIT:
	double(*func)( );
CODE:
	func   = INT2PTR(double(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

short
nci_sviii( c_func )
	SV* c_func
PREINIT:
	short(*func)( );
CODE:
	func   = INT2PTR(short(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

float
nci_fviii( c_func )
	SV* c_func
PREINIT:
	float(*func)( );
CODE:
	func   = INT2PTR(float(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

char *
nci_tviii( c_func )
	SV* c_func
PREINIT:
	char *(*func)( );
CODE:
	func   = INT2PTR(char *(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

int
nci_iviii( c_func )
	SV* c_func
PREINIT:
	int(*func)( );
CODE:
	func   = INT2PTR(int(*)( ), SvIV(c_func) );
	RETVAL = (*func)();
OUTPUT:
	RETVAL

void *
nci_pdiii( c_func, d0, i1, i2, i3 )
	SV* c_func
	double d0
	int i1
	int i2
	int i3
PREINIT:
	void *(*func)(double, int, int, int);
CODE:
	func   = INT2PTR(void *(*)(double, int, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2, i3);
OUTPUT:
	RETVAL

void
nci_vdiii( c_func, d0, i1, i2, i3 )
	SV* c_func
	double d0
	int i1
	int i2
	int i3
PREINIT:
	void(*func)(double, int, int, int);
CODE:
	func   = INT2PTR(void(*)(double, int, int, int), SvIV(c_func) );
	(*func)(d0, i1, i2, i3);

double
nci_ddiii( c_func, d0, i1, i2, i3 )
	SV* c_func
	double d0
	int i1
	int i2
	int i3
PREINIT:
	double(*func)(double, int, int, int);
CODE:
	func   = INT2PTR(double(*)(double, int, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2, i3);
OUTPUT:
	RETVAL

short
nci_sdiii( c_func, d0, i1, i2, i3 )
	SV* c_func
	double d0
	int i1
	int i2
	int i3
PREINIT:
	short(*func)(double, int, int, int);
CODE:
	func   = INT2PTR(short(*)(double, int, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2, i3);
OUTPUT:
	RETVAL

float
nci_fdiii( c_func, d0, i1, i2, i3 )
	SV* c_func
	double d0
	int i1
	int i2
	int i3
PREINIT:
	float(*func)(double, int, int, int);
CODE:
	func   = INT2PTR(float(*)(double, int, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2, i3);
OUTPUT:
	RETVAL

char *
nci_tdiii( c_func, d0, i1, i2, i3 )
	SV* c_func
	double d0
	int i1
	int i2
	int i3
PREINIT:
	char *(*func)(double, int, int, int);
CODE:
	func   = INT2PTR(char *(*)(double, int, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2, i3);
OUTPUT:
	RETVAL

int
nci_idiii( c_func, d0, i1, i2, i3 )
	SV* c_func
	double d0
	int i1
	int i2
	int i3
PREINIT:
	int(*func)(double, int, int, int);
CODE:
	func   = INT2PTR(int(*)(double, int, int, int), SvIV(c_func) );
	RETVAL = (*func)(d0, i1, i2, i3);
OUTPUT:
	RETVAL

void *
nci_psiii( c_func, s0, i1, i2, i3 )
	SV* c_func
	short s0
	int i1
	int i2
	int i3
PREINIT:
	void *(*func)(short, int, int, int);
CODE:
	func   = INT2PTR(void *(*)(short, int, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2, i3);
OUTPUT:
	RETVAL

void
nci_vsiii( c_func, s0, i1, i2, i3 )
	SV* c_func
	short s0
	int i1
	int i2
	int i3
PREINIT:
	void(*func)(short, int, int, int);
CODE:
	func   = INT2PTR(void(*)(short, int, int, int), SvIV(c_func) );
	(*func)(s0, i1, i2, i3);

double
nci_dsiii( c_func, s0, i1, i2, i3 )
	SV* c_func
	short s0
	int i1
	int i2
	int i3
PREINIT:
	double(*func)(short, int, int, int);
CODE:
	func   = INT2PTR(double(*)(short, int, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2, i3);
OUTPUT:
	RETVAL

short
nci_ssiii( c_func, s0, i1, i2, i3 )
	SV* c_func
	short s0
	int i1
	int i2
	int i3
PREINIT:
	short(*func)(short, int, int, int);
CODE:
	func   = INT2PTR(short(*)(short, int, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2, i3);
OUTPUT:
	RETVAL

float
nci_fsiii( c_func, s0, i1, i2, i3 )
	SV* c_func
	short s0
	int i1
	int i2
	int i3
PREINIT:
	float(*func)(short, int, int, int);
CODE:
	func   = INT2PTR(float(*)(short, int, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2, i3);
OUTPUT:
	RETVAL

char *
nci_tsiii( c_func, s0, i1, i2, i3 )
	SV* c_func
	short s0
	int i1
	int i2
	int i3
PREINIT:
	char *(*func)(short, int, int, int);
CODE:
	func   = INT2PTR(char *(*)(short, int, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2, i3);
OUTPUT:
	RETVAL

int
nci_isiii( c_func, s0, i1, i2, i3 )
	SV* c_func
	short s0
	int i1
	int i2
	int i3
PREINIT:
	int(*func)(short, int, int, int);
CODE:
	func   = INT2PTR(int(*)(short, int, int, int), SvIV(c_func) );
	RETVAL = (*func)(s0, i1, i2, i3);
OUTPUT:
	RETVAL

void *
nci_pfiii( c_func, f0, i1, i2, i3 )
	SV* c_func
	float f0
	int i1
	int i2
	int i3
PREINIT:
	void *(*func)(float, int, int, int);
CODE:
	func   = INT2PTR(void *(*)(float, int, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2, i3);
OUTPUT:
	RETVAL

void
nci_vfiii( c_func, f0, i1, i2, i3 )
	SV* c_func
	float f0
	int i1
	int i2
	int i3
PREINIT:
	void(*func)(float, int, int, int);
CODE:
	func   = INT2PTR(void(*)(float, int, int, int), SvIV(c_func) );
	(*func)(f0, i1, i2, i3);

double
nci_dfiii( c_func, f0, i1, i2, i3 )
	SV* c_func
	float f0
	int i1
	int i2
	int i3
PREINIT:
	double(*func)(float, int, int, int);
CODE:
	func   = INT2PTR(double(*)(float, int, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2, i3);
OUTPUT:
	RETVAL

short
nci_sfiii( c_func, f0, i1, i2, i3 )
	SV* c_func
	float f0
	int i1
	int i2
	int i3
PREINIT:
	short(*func)(float, int, int, int);
CODE:
	func   = INT2PTR(short(*)(float, int, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2, i3);
OUTPUT:
	RETVAL

float
nci_ffiii( c_func, f0, i1, i2, i3 )
	SV* c_func
	float f0
	int i1
	int i2
	int i3
PREINIT:
	float(*func)(float, int, int, int);
CODE:
	func   = INT2PTR(float(*)(float, int, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2, i3);
OUTPUT:
	RETVAL

char *
nci_tfiii( c_func, f0, i1, i2, i3 )
	SV* c_func
	float f0
	int i1
	int i2
	int i3
PREINIT:
	char *(*func)(float, int, int, int);
CODE:
	func   = INT2PTR(char *(*)(float, int, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2, i3);
OUTPUT:
	RETVAL

int
nci_ifiii( c_func, f0, i1, i2, i3 )
	SV* c_func
	float f0
	int i1
	int i2
	int i3
PREINIT:
	int(*func)(float, int, int, int);
CODE:
	func   = INT2PTR(int(*)(float, int, int, int), SvIV(c_func) );
	RETVAL = (*func)(f0, i1, i2, i3);
OUTPUT:
	RETVAL

void *
nci_ptiii( c_func, t0, i1, i2, i3 )
	SV* c_func
	char * t0
	int i1
	int i2
	int i3
PREINIT:
	void *(*func)(char *, int, int, int);
CODE:
	func   = INT2PTR(void *(*)(char *, int, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2, i3);
OUTPUT:
	RETVAL

void
nci_vtiii( c_func, t0, i1, i2, i3 )
	SV* c_func
	char * t0
	int i1
	int i2
	int i3
PREINIT:
	void(*func)(char *, int, int, int);
CODE:
	func   = INT2PTR(void(*)(char *, int, int, int), SvIV(c_func) );
	(*func)(t0, i1, i2, i3);

double
nci_dtiii( c_func, t0, i1, i2, i3 )
	SV* c_func
	char * t0
	int i1
	int i2
	int i3
PREINIT:
	double(*func)(char *, int, int, int);
CODE:
	func   = INT2PTR(double(*)(char *, int, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2, i3);
OUTPUT:
	RETVAL

short
nci_stiii( c_func, t0, i1, i2, i3 )
	SV* c_func
	char * t0
	int i1
	int i2
	int i3
PREINIT:
	short(*func)(char *, int, int, int);
CODE:
	func   = INT2PTR(short(*)(char *, int, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2, i3);
OUTPUT:
	RETVAL

float
nci_ftiii( c_func, t0, i1, i2, i3 )
	SV* c_func
	char * t0
	int i1
	int i2
	int i3
PREINIT:
	float(*func)(char *, int, int, int);
CODE:
	func   = INT2PTR(float(*)(char *, int, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2, i3);
OUTPUT:
	RETVAL

char *
nci_ttiii( c_func, t0, i1, i2, i3 )
	SV* c_func
	char * t0
	int i1
	int i2
	int i3
PREINIT:
	char *(*func)(char *, int, int, int);
CODE:
	func   = INT2PTR(char *(*)(char *, int, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2, i3);
OUTPUT:
	RETVAL

int
nci_itiii( c_func, t0, i1, i2, i3 )
	SV* c_func
	char * t0
	int i1
	int i2
	int i3
PREINIT:
	int(*func)(char *, int, int, int);
CODE:
	func   = INT2PTR(int(*)(char *, int, int, int), SvIV(c_func) );
	RETVAL = (*func)(t0, i1, i2, i3);
OUTPUT:
	RETVAL

void *
nci_piiii( c_func, i0, i1, i2, i3 )
	SV* c_func
	int i0
	int i1
	int i2
	int i3
PREINIT:
	void *(*func)(int, int, int, int);
CODE:
	func   = INT2PTR(void *(*)(int, int, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2, i3);
OUTPUT:
	RETVAL

void
nci_viiii( c_func, i0, i1, i2, i3 )
	SV* c_func
	int i0
	int i1
	int i2
	int i3
PREINIT:
	void(*func)(int, int, int, int);
CODE:
	func   = INT2PTR(void(*)(int, int, int, int), SvIV(c_func) );
	(*func)(i0, i1, i2, i3);

double
nci_diiii( c_func, i0, i1, i2, i3 )
	SV* c_func
	int i0
	int i1
	int i2
	int i3
PREINIT:
	double(*func)(int, int, int, int);
CODE:
	func   = INT2PTR(double(*)(int, int, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2, i3);
OUTPUT:
	RETVAL

short
nci_siiii( c_func, i0, i1, i2, i3 )
	SV* c_func
	int i0
	int i1
	int i2
	int i3
PREINIT:
	short(*func)(int, int, int, int);
CODE:
	func   = INT2PTR(short(*)(int, int, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2, i3);
OUTPUT:
	RETVAL

float
nci_fiiii( c_func, i0, i1, i2, i3 )
	SV* c_func
	int i0
	int i1
	int i2
	int i3
PREINIT:
	float(*func)(int, int, int, int);
CODE:
	func   = INT2PTR(float(*)(int, int, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2, i3);
OUTPUT:
	RETVAL

char *
nci_tiiii( c_func, i0, i1, i2, i3 )
	SV* c_func
	int i0
	int i1
	int i2
	int i3
PREINIT:
	char *(*func)(int, int, int, int);
CODE:
	func   = INT2PTR(char *(*)(int, int, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2, i3);
OUTPUT:
	RETVAL

int
nci_iiiii( c_func, i0, i1, i2, i3 )
	SV* c_func
	int i0
	int i1
	int i2
	int i3
PREINIT:
	int(*func)(int, int, int, int);
CODE:
	func   = INT2PTR(int(*)(int, int, int, int), SvIV(c_func) );
	RETVAL = (*func)(i0, i1, i2, i3);
OUTPUT:
	RETVAL
